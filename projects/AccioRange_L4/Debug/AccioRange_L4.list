
AccioRange_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001960c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002164  080197bc  080197bc  000297bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b920  0801b920  0003073c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b920  0801b920  0002b920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b928  0801b928  0003073c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b928  0801b928  0002b928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b92c  0801b92c  0002b92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000073c  20000000  0801b930  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002698  2000073c  0801c06c  0003073c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002dd4  0801c06c  00032dd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003073c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046356  00000000  00000000  0003076c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008b79  00000000  00000000  00076ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000038f8  00000000  00000000  0007f640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003548  00000000  00000000  00082f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003af23  00000000  00000000  00086480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046c35  00000000  00000000  000c13a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013fd73  00000000  00000000  00107fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00247d4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fa0c  00000000  00000000  00247d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000073c 	.word	0x2000073c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080197a4 	.word	0x080197a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000740 	.word	0x20000740
 80001ec:	080197a4 	.word	0x080197a4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
 80005b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005b6:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005b8:	4a2f      	ldr	r2, [pc, #188]	; (8000678 <MX_ADC1_Init+0xe4>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005bc:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80005c2:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005c4:	2208      	movs	r2, #8
 80005c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c8:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ce:	4b29      	ldr	r3, [pc, #164]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005d6:	2204      	movs	r2, #4
 80005d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005da:	4b26      	ldr	r3, [pc, #152]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005dc:	2200      	movs	r2, #0
 80005de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e0:	4b24      	ldr	r3, [pc, #144]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005e6:	4b23      	ldr	r3, [pc, #140]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000602:	2200      	movs	r2, #0
 8000604:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_ADC1_Init+0xe0>)
 800060a:	2200      	movs	r2, #0
 800060c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000616:	4817      	ldr	r0, [pc, #92]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000618:	f00a fcfe 	bl	800b018 <HAL_ADC_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000622:	f001 fa7f 	bl	8001b24 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4619      	mov	r1, r3
 8000630:	4810      	ldr	r0, [pc, #64]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000632:	f00b fa7d 	bl	800bb30 <HAL_ADCEx_MultiModeConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800063c:	f001 fa72 	bl	8001b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_ADC1_Init+0xe8>)
 8000642:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000644:	2306      	movs	r3, #6
 8000646:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800064c:	237f      	movs	r3, #127	; 0x7f
 800064e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000650:	2304      	movs	r3, #4
 8000652:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_ADC1_Init+0xe0>)
 800065e:	f00a fe35 	bl	800b2cc <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000668:	f001 fa5c 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3728      	adds	r7, #40	; 0x28
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000758 	.word	0x20000758
 8000678:	50040000 	.word	0x50040000
 800067c:	36902000 	.word	0x36902000

08000680 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000686:	463b      	mov	r3, r7
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
 8000694:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000696:	4b29      	ldr	r3, [pc, #164]	; (800073c <MX_ADC2_Init+0xbc>)
 8000698:	4a29      	ldr	r2, [pc, #164]	; (8000740 <MX_ADC2_Init+0xc0>)
 800069a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <MX_ADC2_Init+0xbc>)
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006a2:	4b26      	ldr	r3, [pc, #152]	; (800073c <MX_ADC2_Init+0xbc>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <MX_ADC2_Init+0xbc>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <MX_ADC2_Init+0xbc>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b4:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_ADC2_Init+0xbc>)
 80006b6:	2204      	movs	r2, #4
 80006b8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006ba:	4b20      	ldr	r3, [pc, #128]	; (800073c <MX_ADC2_Init+0xbc>)
 80006bc:	2200      	movs	r2, #0
 80006be:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006c0:	4b1e      	ldr	r3, [pc, #120]	; (800073c <MX_ADC2_Init+0xbc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_ADC2_Init+0xbc>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_ADC2_Init+0xbc>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d4:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_ADC2_Init+0xbc>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <MX_ADC2_Init+0xbc>)
 80006dc:	2200      	movs	r2, #0
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_ADC2_Init+0xbc>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_ADC2_Init+0xbc>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_ADC2_Init+0xbc>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006f6:	4811      	ldr	r0, [pc, #68]	; (800073c <MX_ADC2_Init+0xbc>)
 80006f8:	f00a fc8e 	bl	800b018 <HAL_ADC_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000702:	f001 fa0f 	bl	8001b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_ADC2_Init+0xc4>)
 8000708:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800070a:	2306      	movs	r3, #6
 800070c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000712:	237f      	movs	r3, #127	; 0x7f
 8000714:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000716:	2304      	movs	r3, #4
 8000718:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800071e:	463b      	mov	r3, r7
 8000720:	4619      	mov	r1, r3
 8000722:	4806      	ldr	r0, [pc, #24]	; (800073c <MX_ADC2_Init+0xbc>)
 8000724:	f00a fdd2 	bl	800b2cc <HAL_ADC_ConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800072e:	f001 f9f9 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200007c0 	.word	0x200007c0
 8000740:	50040100 	.word	0x50040100
 8000744:	25b00200 	.word	0x25b00200

08000748 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800074e:	463b      	mov	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
 800075c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800075e:	4b29      	ldr	r3, [pc, #164]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000760:	4a29      	ldr	r2, [pc, #164]	; (8000808 <MX_ADC3_Init+0xc0>)
 8000762:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <MX_ADC3_Init+0xbc>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000776:	4b23      	ldr	r3, [pc, #140]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077c:	4b21      	ldr	r3, [pc, #132]	; (8000804 <MX_ADC3_Init+0xbc>)
 800077e:	2204      	movs	r2, #4
 8000780:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000784:	2200      	movs	r2, #0
 8000786:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_ADC3_Init+0xbc>)
 800078a:	2200      	movs	r2, #0
 800078c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000790:	2201      	movs	r2, #1
 8000792:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_ADC3_Init+0xbc>)
 800079e:	2200      	movs	r2, #0
 80007a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007be:	4811      	ldr	r0, [pc, #68]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007c0:	f00a fc2a 	bl	800b018 <HAL_ADC_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80007ca:	f001 f9ab 	bl	8001b24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_ADC3_Init+0xc4>)
 80007d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d2:	2306      	movs	r3, #6
 80007d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007da:	237f      	movs	r3, #127	; 0x7f
 80007dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007de:	2304      	movs	r3, #4
 80007e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007ec:	f00a fd6e 	bl	800b2cc <HAL_ADC_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80007f6:	f001 f995 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000828 	.word	0x20000828
 8000808:	50040200 	.word	0x50040200
 800080c:	36902000 	.word	0x36902000

08000810 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08e      	sub	sp, #56	; 0x38
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a59      	ldr	r2, [pc, #356]	; (8000994 <HAL_ADC_MspInit+0x184>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d12d      	bne.n	800088e <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000832:	4b59      	ldr	r3, [pc, #356]	; (8000998 <HAL_ADC_MspInit+0x188>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	4a57      	ldr	r2, [pc, #348]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800083a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800083c:	4b56      	ldr	r3, [pc, #344]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d10b      	bne.n	800085c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000844:	4b55      	ldr	r3, [pc, #340]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000848:	4a54      	ldr	r2, [pc, #336]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800084a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800084e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000850:	4b52      	ldr	r3, [pc, #328]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000858:	623b      	str	r3, [r7, #32]
 800085a:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800085c:	4b4f      	ldr	r3, [pc, #316]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800085e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000860:	4a4e      	ldr	r2, [pc, #312]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000868:	4b4c      	ldr	r3, [pc, #304]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800086a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	61fb      	str	r3, [r7, #28]
 8000872:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 8000874:	2318      	movs	r3, #24
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000878:	230b      	movs	r3, #11
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000884:	4619      	mov	r1, r3
 8000886:	4846      	ldr	r0, [pc, #280]	; (80009a0 <HAL_ADC_MspInit+0x190>)
 8000888:	f00b fcd8 	bl	800c23c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800088c:	e07e      	b.n	800098c <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC2)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a44      	ldr	r2, [pc, #272]	; (80009a4 <HAL_ADC_MspInit+0x194>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d146      	bne.n	8000926 <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000898:	4b3f      	ldr	r3, [pc, #252]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	4a3e      	ldr	r2, [pc, #248]	; (8000998 <HAL_ADC_MspInit+0x188>)
 80008a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80008a2:	4b3d      	ldr	r3, [pc, #244]	; (8000998 <HAL_ADC_MspInit+0x188>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d10b      	bne.n	80008c2 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80008aa:	4b3c      	ldr	r3, [pc, #240]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a3b      	ldr	r2, [pc, #236]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b39      	ldr	r3, [pc, #228]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	4b36      	ldr	r3, [pc, #216]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a35      	ldr	r2, [pc, #212]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b33      	ldr	r3, [pc, #204]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b30      	ldr	r3, [pc, #192]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a2f      	ldr	r2, [pc, #188]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 80008f2:	2303      	movs	r3, #3
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008f6:	230b      	movs	r3, #11
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	4619      	mov	r1, r3
 8000904:	4826      	ldr	r0, [pc, #152]	; (80009a0 <HAL_ADC_MspInit+0x190>)
 8000906:	f00b fc99 	bl	800c23c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 800090a:	2312      	movs	r3, #18
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800090e:	230b      	movs	r3, #11
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	4619      	mov	r1, r3
 800091c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000920:	f00b fc8c 	bl	800c23c <HAL_GPIO_Init>
}
 8000924:	e032      	b.n	800098c <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC3)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a1f      	ldr	r2, [pc, #124]	; (80009a8 <HAL_ADC_MspInit+0x198>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d12d      	bne.n	800098c <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <HAL_ADC_MspInit+0x188>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	4a18      	ldr	r2, [pc, #96]	; (8000998 <HAL_ADC_MspInit+0x188>)
 8000938:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d10b      	bne.n	800095a <HAL_ADC_MspInit+0x14a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a15      	ldr	r2, [pc, #84]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000948:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a0f      	ldr	r2, [pc, #60]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000960:	f043 0320 	orr.w	r3, r3, #32
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0320 	and.w	r3, r3, #32
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000978:	230b      	movs	r3, #11
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	4809      	ldr	r0, [pc, #36]	; (80009ac <HAL_ADC_MspInit+0x19c>)
 8000988:	f00b fc58 	bl	800c23c <HAL_GPIO_Init>
}
 800098c:	bf00      	nop
 800098e:	3738      	adds	r7, #56	; 0x38
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	50040000 	.word	0x50040000
 8000998:	20000890 	.word	0x20000890
 800099c:	40021000 	.word	0x40021000
 80009a0:	48000800 	.word	0x48000800
 80009a4:	50040100 	.word	0x50040100
 80009a8:	50040200 	.word	0x50040200
 80009ac:	48001400 	.word	0x48001400

080009b0 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009b6:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <MX_DCMI_Init+0x64>)
 80009b8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80009d8:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009fe:	f00b fa8b 	bl	800bf18 <HAL_DCMI_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000a08:	f001 f88c 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000894 	.word	0x20000894
 8000a14:	50050000 	.word	0x50050000

08000a18 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a33      	ldr	r2, [pc, #204]	; (8000b04 <HAL_DCMI_MspInit+0xec>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d160      	bne.n	8000afc <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000a3a:	4b33      	ldr	r3, [pc, #204]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a32      	ldr	r2, [pc, #200]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b30      	ldr	r3, [pc, #192]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4e:	61bb      	str	r3, [r7, #24]
 8000a50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a52:	4b2d      	ldr	r3, [pc, #180]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a2c      	ldr	r2, [pc, #176]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a6a:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a26      	ldr	r2, [pc, #152]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4a20      	ldr	r2, [pc, #128]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a88:	f043 0310 	orr.w	r3, r3, #16
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0310 	and.w	r3, r3, #16
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 8000a9a:	f645 7320 	movw	r3, #24352	; 0x5f20
 8000a9e:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000aac:	230a      	movs	r3, #10
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4815      	ldr	r0, [pc, #84]	; (8000b0c <HAL_DCMI_MspInit+0xf4>)
 8000ab8:	f00b fbc0 	bl	800c23c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000abc:	23b0      	movs	r3, #176	; 0xb0
 8000abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000acc:	230a      	movs	r3, #10
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480e      	ldr	r0, [pc, #56]	; (8000b10 <HAL_DCMI_MspInit+0xf8>)
 8000ad8:	f00b fbb0 	bl	800c23c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8000adc:	2320      	movs	r3, #32
 8000ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000aec:	230a      	movs	r3, #10
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	4807      	ldr	r0, [pc, #28]	; (8000b14 <HAL_DCMI_MspInit+0xfc>)
 8000af8:	f00b fba0 	bl	800c23c <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000afc:	bf00      	nop
 8000afe:	3730      	adds	r7, #48	; 0x30
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	50050000 	.word	0x50050000
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	48001c00 	.word	0x48001c00
 8000b10:	48002000 	.word	0x48002000
 8000b14:	48001000 	.word	0x48001000

08000b18 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel2;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000b1c:	4b30      	ldr	r3, [pc, #192]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b1e:	4a31      	ldr	r2, [pc, #196]	; (8000be4 <MX_DFSDM1_Init+0xcc>)
 8000b20:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000b22:	4b2f      	ldr	r3, [pc, #188]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b28:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000b2e:	4b2c      	ldr	r3, [pc, #176]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b34:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b3a:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000b40:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000b46:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b4c:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b4e:	2204      	movs	r2, #4
 8000b50:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b52:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000b58:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000b5e:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000b64:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000b6a:	481d      	ldr	r0, [pc, #116]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b6c:	f00b fa5a 	bl	800c024 <HAL_DFSDM_ChannelInit>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000b76:	f000 ffd5 	bl	8001b24 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b7c:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <MX_DFSDM1_Init+0xd4>)
 8000b7e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b8e:	2202      	movs	r2, #2
 8000b90:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bae:	2204      	movs	r2, #4
 8000bb0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000bca:	4807      	ldr	r0, [pc, #28]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bcc:	f00b fa2a 	bl	800c024 <HAL_DFSDM_ChannelInit>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 8000bd6:	f000 ffa5 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200008f8 	.word	0x200008f8
 8000be4:	40016020 	.word	0x40016020
 8000be8:	20000930 	.word	0x20000930
 8000bec:	40016040 	.word	0x40016040

08000bf0 <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b0ae      	sub	sp, #184	; 0xb8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c08:	f107 0318 	add.w	r3, r7, #24
 8000c0c:	228c      	movs	r2, #140	; 0x8c
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f017 fdb3 	bl	801877c <memset>
  if(DFSDM1_Init == 0)
 8000c16:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d163      	bne.n	8000ce6 <HAL_DFSDM_ChannelMspInit+0xf6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c22:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c2a:	f107 0318 	add.w	r3, r7, #24
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f00f f92a 	bl	800fe88 <HAL_RCCEx_PeriphCLKConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000c3a:	f000 ff73 	bl	8001b24 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c42:	4a2c      	ldr	r2, [pc, #176]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c48:	6613      	str	r3, [r2, #96]	; 0x60
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	4a26      	ldr	r2, [pc, #152]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c62:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	4a20      	ldr	r2, [pc, #128]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8000c86:	2384      	movs	r3, #132	; 0x84
 8000c88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000c9e:	2306      	movs	r3, #6
 8000ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4813      	ldr	r0, [pc, #76]	; (8000cf8 <HAL_DFSDM_ChannelMspInit+0x108>)
 8000cac:	f00b fac6 	bl	800c23c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000cca:	2306      	movs	r3, #6
 8000ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4809      	ldr	r0, [pc, #36]	; (8000cfc <HAL_DFSDM_ChannelMspInit+0x10c>)
 8000cd8:	f00b fab0 	bl	800c23c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	4a03      	ldr	r2, [pc, #12]	; (8000cf0 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000ce4:	6013      	str	r3, [r2, #0]
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	37b8      	adds	r7, #184	; 0xb8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000968 	.word	0x20000968
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48000800 	.word	0x48000800
 8000cfc:	48000400 	.word	0x48000400

08000d00 <MX_FMC_Init>:
SRAM_HandleTypeDef hsram1;
SRAM_HandleTypeDef hsram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000d06:	463b      	mov	r3, r7
 8000d08:	2220      	movs	r2, #32
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f017 fd35 	bl	801877c <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000d12:	4b4f      	ldr	r3, [pc, #316]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d14:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000d18:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000d1a:	4b4d      	ldr	r3, [pc, #308]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d1c:	4a4d      	ldr	r2, [pc, #308]	; (8000e54 <MX_FMC_Init+0x154>)
 8000d1e:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8000d20:	4b4b      	ldr	r3, [pc, #300]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d22:	2202      	movs	r2, #2
 8000d24:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000d26:	4b4a      	ldr	r3, [pc, #296]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000d2c:	4b48      	ldr	r3, [pc, #288]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000d32:	4b47      	ldr	r3, [pc, #284]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d34:	2210      	movs	r2, #16
 8000d36:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000d38:	4b45      	ldr	r3, [pc, #276]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d3e:	4b44      	ldr	r3, [pc, #272]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000d44:	4b42      	ldr	r3, [pc, #264]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000d4a:	4b41      	ldr	r3, [pc, #260]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000d50:	4b3f      	ldr	r3, [pc, #252]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000d56:	4b3e      	ldr	r3, [pc, #248]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000d5c:	4b3c      	ldr	r3, [pc, #240]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000d62:	4b3b      	ldr	r3, [pc, #236]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000d68:	4b39      	ldr	r3, [pc, #228]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000d6e:	4b38      	ldr	r3, [pc, #224]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000d74:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000d7a:	230f      	movs	r3, #15
 8000d7c:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000d7e:	230f      	movs	r3, #15
 8000d80:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000d82:	23ff      	movs	r3, #255	; 0xff
 8000d84:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8000d86:	230f      	movs	r3, #15
 8000d88:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000d8a:	2310      	movs	r3, #16
 8000d8c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000d8e:	2311      	movs	r3, #17
 8000d90:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000d96:	463b      	mov	r3, r7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	482c      	ldr	r0, [pc, #176]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d9e:	f011 fc48 	bl	8012632 <HAL_SRAM_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 8000da8:	f000 febc 	bl	8001b24 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8000dac:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dae:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000db2:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000db4:	4b28      	ldr	r3, [pc, #160]	; (8000e58 <MX_FMC_Init+0x158>)
 8000db6:	4a27      	ldr	r2, [pc, #156]	; (8000e54 <MX_FMC_Init+0x154>)
 8000db8:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 8000dba:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000dc0:	4b25      	ldr	r3, [pc, #148]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dce:	2210      	movs	r2, #16
 8000dd0:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <MX_FMC_Init+0x158>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000de4:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_FMC_Init+0x158>)
 8000de6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dea:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <MX_FMC_Init+0x158>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000e16:	230f      	movs	r3, #15
 8000e18:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000e1e:	23ff      	movs	r3, #255	; 0xff
 8000e20:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8000e22:	230f      	movs	r3, #15
 8000e24:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000e26:	2310      	movs	r3, #16
 8000e28:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000e2a:	2311      	movs	r3, #17
 8000e2c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000e32:	463b      	mov	r3, r7
 8000e34:	2200      	movs	r2, #0
 8000e36:	4619      	mov	r1, r3
 8000e38:	4807      	ldr	r0, [pc, #28]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e3a:	f011 fbfa 	bl	8012632 <HAL_SRAM_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 8000e44:	f000 fe6e 	bl	8001b24 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e48:	bf00      	nop
 8000e4a:	3720      	adds	r7, #32
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	2000096c 	.word	0x2000096c
 8000e54:	a0000104 	.word	0xa0000104
 8000e58:	200009bc 	.word	0x200009bc

08000e5c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000e70:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <HAL_FMC_MspInit+0xc4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d14f      	bne.n	8000f18 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 8000e78:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <HAL_FMC_MspInit+0xc4>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e7e:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <HAL_FMC_MspInit+0xc8>)
 8000e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e82:	4a28      	ldr	r2, [pc, #160]	; (8000f24 <HAL_FMC_MspInit+0xc8>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6513      	str	r3, [r2, #80]	; 0x50
 8000e8a:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <HAL_FMC_MspInit+0xc8>)
 8000e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 8000e96:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000e9a:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ea8:	230c      	movs	r3, #12
 8000eaa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	481d      	ldr	r0, [pc, #116]	; (8000f28 <HAL_FMC_MspInit+0xcc>)
 8000eb2:	f00b f9c3 	bl	800c23c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 8000eb6:	f240 233f 	movw	r3, #575	; 0x23f
 8000eba:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ec8:	230c      	movs	r3, #12
 8000eca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4816      	ldr	r0, [pc, #88]	; (8000f2c <HAL_FMC_MspInit+0xd0>)
 8000ed2:	f00b f9b3 	bl	800c23c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 8000ed6:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8000eda:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ee8:	230c      	movs	r3, #12
 8000eea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480f      	ldr	r0, [pc, #60]	; (8000f30 <HAL_FMC_MspInit+0xd4>)
 8000ef2:	f00b f9a3 	bl	800c23c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8000ef6:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000efa:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f08:	230c      	movs	r3, #12
 8000f0a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4808      	ldr	r0, [pc, #32]	; (8000f34 <HAL_FMC_MspInit+0xd8>)
 8000f12:	f00b f993 	bl	800c23c <HAL_GPIO_Init>
 8000f16:	e000      	b.n	8000f1a <HAL_FMC_MspInit+0xbe>
    return;
 8000f18:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000a0c 	.word	0x20000a0c
 8000f24:	40021000 	.word	0x40021000
 8000f28:	48001000 	.word	0x48001000
 8000f2c:	48001800 	.word	0x48001800
 8000f30:	48000c00 	.word	0x48000c00
 8000f34:	48001400 	.word	0x48001400

08000f38 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000f40:	f7ff ff8c 	bl	8000e5c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <MX_GPIO_Init>:
     PH13   ------> TIM8_CH1N
     PB9   ------> S_TIM4_CH4
     PA8   ------> LPTIM2_OUT
*/
void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08e      	sub	sp, #56	; 0x38
 8000f50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f62:	4bb3      	ldr	r3, [pc, #716]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4ab2      	ldr	r2, [pc, #712]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4bb0      	ldr	r3, [pc, #704]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f76:	623b      	str	r3, [r7, #32]
 8000f78:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7a:	4bad      	ldr	r3, [pc, #692]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4aac      	ldr	r2, [pc, #688]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4baa      	ldr	r3, [pc, #680]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8e:	61fb      	str	r3, [r7, #28]
 8000f90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f92:	4ba7      	ldr	r3, [pc, #668]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4aa6      	ldr	r2, [pc, #664]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f98:	f043 0310 	orr.w	r3, r3, #16
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4ba4      	ldr	r3, [pc, #656]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0310 	and.w	r3, r3, #16
 8000fa6:	61bb      	str	r3, [r7, #24]
 8000fa8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4ba1      	ldr	r3, [pc, #644]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4aa0      	ldr	r2, [pc, #640]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4b9e      	ldr	r3, [pc, #632]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	4b9b      	ldr	r3, [pc, #620]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	4a9a      	ldr	r2, [pc, #616]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fce:	4b98      	ldr	r3, [pc, #608]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fda:	4b95      	ldr	r3, [pc, #596]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a94      	ldr	r2, [pc, #592]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b92      	ldr	r3, [pc, #584]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000ff2:	f00d fff1 	bl	800efd8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff6:	4b8e      	ldr	r3, [pc, #568]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a8d      	ldr	r2, [pc, #564]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b8b      	ldr	r3, [pc, #556]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	4b88      	ldr	r3, [pc, #544]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a87      	ldr	r2, [pc, #540]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b85      	ldr	r3, [pc, #532]	; (8001230 <MX_GPIO_Init+0x2e4>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001026:	4b82      	ldr	r3, [pc, #520]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4a81      	ldr	r2, [pc, #516]	; (8001230 <MX_GPIO_Init+0x2e4>)
 800102c:	f043 0320 	orr.w	r3, r3, #32
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4b7f      	ldr	r3, [pc, #508]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0320 	and.w	r3, r3, #32
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LCD_BL_Pin|ARD_D4_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f640 0101 	movw	r1, #2049	; 0x801
 8001044:	487b      	ldr	r0, [pc, #492]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8001046:	f00b fb7d 	bl	800c744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2143      	movs	r1, #67	; 0x43
 800104e:	487a      	ldr	r0, [pc, #488]	; (8001238 <MX_GPIO_Init+0x2ec>)
 8001050:	f00b fb78 	bl	800c744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	2140      	movs	r1, #64	; 0x40
 8001058:	4878      	ldr	r0, [pc, #480]	; (800123c <MX_GPIO_Init+0x2f0>)
 800105a:	f00b fb73 	bl	800c744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ARD_D7_GPIO_Port, ARD_D7_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	2140      	movs	r1, #64	; 0x40
 8001062:	4877      	ldr	r0, [pc, #476]	; (8001240 <MX_GPIO_Init+0x2f4>)
 8001064:	f00b fb6e 	bl	800c744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106e:	4875      	ldr	r0, [pc, #468]	; (8001244 <MX_GPIO_Init+0x2f8>)
 8001070:	f00b fb68 	bl	800c744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin;
 8001074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800107a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001080:	2302      	movs	r3, #2
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_DOWN_GPIO_Port, &GPIO_InitStruct);
 8001084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001088:	4619      	mov	r1, r3
 800108a:	486a      	ldr	r0, [pc, #424]	; (8001234 <MX_GPIO_Init+0x2e8>)
 800108c:	f00b f8d6 	bl	800c23c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8001090:	2304      	movs	r3, #4
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001094:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 800109e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a2:	4619      	mov	r1, r3
 80010a4:	4864      	ldr	r0, [pc, #400]	; (8001238 <MX_GPIO_Init+0x2ec>)
 80010a6:	f00b f8c9 	bl	800c23c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|ARD_D4_Pin;
 80010aa:	f640 0301 	movw	r3, #2049	; 0x801
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	485c      	ldr	r0, [pc, #368]	; (8001234 <MX_GPIO_Init+0x2e8>)
 80010c4:	f00b f8ba 	bl	800c23c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_LEFT_Pin;
 80010c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010ce:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010d4:	2302      	movs	r3, #2
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_LEFT_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010dc:	4619      	mov	r1, r3
 80010de:	4855      	ldr	r0, [pc, #340]	; (8001234 <MX_GPIO_Init+0x2e8>)
 80010e0:	f00b f8ac 	bl	800c23c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80010e4:	2340      	movs	r3, #64	; 0x40
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e8:	2302      	movs	r3, #2
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80010f4:	2303      	movs	r3, #3
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fc:	4619      	mov	r1, r3
 80010fe:	484d      	ldr	r0, [pc, #308]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8001100:	f00b f89c 	bl	800c23c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 8001104:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001116:	2303      	movs	r3, #3
 8001118:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800111a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111e:	4619      	mov	r1, r3
 8001120:	4845      	ldr	r0, [pc, #276]	; (8001238 <MX_GPIO_Init+0x2ec>)
 8001122:	f00b f88b 	bl	800c23c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_UP_Pin;
 8001126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112c:	2300      	movs	r3, #0
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001130:	2302      	movs	r3, #2
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_UP_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001138:	4619      	mov	r1, r3
 800113a:	483e      	ldr	r0, [pc, #248]	; (8001234 <MX_GPIO_Init+0x2e8>)
 800113c:	f00b f87e 	bl	800c23c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8001140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001152:	2302      	movs	r3, #2
 8001154:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115a:	4619      	mov	r1, r3
 800115c:	4839      	ldr	r0, [pc, #228]	; (8001244 <MX_GPIO_Init+0x2f8>)
 800115e:	f00b f86d 	bl	800c23c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001166:	2300      	movs	r3, #0
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001172:	4619      	mov	r1, r3
 8001174:	4830      	ldr	r0, [pc, #192]	; (8001238 <MX_GPIO_Init+0x2ec>)
 8001176:	f00b f861 	bl	800c23c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 800117a:	2343      	movs	r3, #67	; 0x43
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117e:	2301      	movs	r3, #1
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800118a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118e:	4619      	mov	r1, r3
 8001190:	4829      	ldr	r0, [pc, #164]	; (8001238 <MX_GPIO_Init+0x2ec>)
 8001192:	f00b f853 	bl	800c23c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8001196:	2340      	movs	r3, #64	; 0x40
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119a:	2301      	movs	r3, #1
 800119c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 80011a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011aa:	4619      	mov	r1, r3
 80011ac:	4823      	ldr	r0, [pc, #140]	; (800123c <MX_GPIO_Init+0x2f0>)
 80011ae:	f00b f845 	bl	800c23c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 80011b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c6:	4619      	mov	r1, r3
 80011c8:	481d      	ldr	r0, [pc, #116]	; (8001240 <MX_GPIO_Init+0x2f4>)
 80011ca:	f00b f837 	bl	800c23c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 80011ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 80011e0:	230e      	movs	r3, #14
 80011e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ee:	f00b f825 	bl	800c23c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80011f2:	2340      	movs	r3, #64	; 0x40
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001206:	4619      	mov	r1, r3
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <MX_GPIO_Init+0x2f4>)
 800120a:	f00b f817 	bl	800c23c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 800120e:	2320      	movs	r3, #32
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001212:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001216:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001220:	4619      	mov	r1, r3
 8001222:	4806      	ldr	r0, [pc, #24]	; (800123c <MX_GPIO_Init+0x2f0>)
 8001224:	f00b f80a 	bl	800c23c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8001228:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
 800122e:	e00b      	b.n	8001248 <MX_GPIO_Init+0x2fc>
 8001230:	40021000 	.word	0x40021000
 8001234:	48002000 	.word	0x48002000
 8001238:	48001c00 	.word	0x48001c00
 800123c:	48000800 	.word	0x48000800
 8001240:	48001800 	.word	0x48001800
 8001244:	48000400 	.word	0x48000400
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001248:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800124e:	2302      	movs	r3, #2
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001256:	4619      	mov	r1, r3
 8001258:	4818      	ldr	r0, [pc, #96]	; (80012bc <MX_GPIO_Init+0x370>)
 800125a:	f00a ffef 	bl	800c23c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 800125e:	2304      	movs	r3, #4
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001262:	2300      	movs	r3, #0
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 800126a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126e:	4619      	mov	r1, r3
 8001270:	4813      	ldr	r0, [pc, #76]	; (80012c0 <MX_GPIO_Init+0x374>)
 8001272:	f00a ffe3 	bl	800c23c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800127c:	2311      	movs	r3, #17
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128c:	4619      	mov	r1, r3
 800128e:	480c      	ldr	r0, [pc, #48]	; (80012c0 <MX_GPIO_Init+0x374>)
 8001290:	f00a ffd4 	bl	800c23c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001294:	2200      	movs	r2, #0
 8001296:	2100      	movs	r1, #0
 8001298:	2017      	movs	r0, #23
 800129a:	f00a fdf8 	bl	800be8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800129e:	2017      	movs	r0, #23
 80012a0:	f00a fe11 	bl	800bec6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012a4:	2200      	movs	r2, #0
 80012a6:	2100      	movs	r1, #0
 80012a8:	2028      	movs	r0, #40	; 0x28
 80012aa:	f00a fdf0 	bl	800be8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012ae:	2028      	movs	r0, #40	; 0x28
 80012b0:	f00a fe09 	bl	800bec6 <HAL_NVIC_EnableIRQ>

}
 80012b4:	bf00      	nop
 80012b6:	3738      	adds	r7, #56	; 0x38
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	48001400 	.word	0x48001400
 80012c0:	48000400 	.word	0x48000400

080012c4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c8:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <MX_I2C1_Init+0x74>)
 80012ca:	4a1c      	ldr	r2, [pc, #112]	; (800133c <MX_I2C1_Init+0x78>)
 80012cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80012ce:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <MX_I2C1_Init+0x74>)
 80012d0:	4a1b      	ldr	r2, [pc, #108]	; (8001340 <MX_I2C1_Init+0x7c>)
 80012d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <MX_I2C1_Init+0x74>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012da:	4b17      	ldr	r3, [pc, #92]	; (8001338 <MX_I2C1_Init+0x74>)
 80012dc:	2201      	movs	r2, #1
 80012de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e0:	4b15      	ldr	r3, [pc, #84]	; (8001338 <MX_I2C1_Init+0x74>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012e6:	4b14      	ldr	r3, [pc, #80]	; (8001338 <MX_I2C1_Init+0x74>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <MX_I2C1_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_I2C1_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <MX_I2C1_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012fe:	480e      	ldr	r0, [pc, #56]	; (8001338 <MX_I2C1_Init+0x74>)
 8001300:	f00b fa50 	bl	800c7a4 <HAL_I2C_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800130a:	f000 fc0b 	bl	8001b24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800130e:	2100      	movs	r1, #0
 8001310:	4809      	ldr	r0, [pc, #36]	; (8001338 <MX_I2C1_Init+0x74>)
 8001312:	f00c fb53 	bl	800d9bc <HAL_I2CEx_ConfigAnalogFilter>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800131c:	f000 fc02 	bl	8001b24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001320:	2100      	movs	r1, #0
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_I2C1_Init+0x74>)
 8001324:	f00c fb95 	bl	800da52 <HAL_I2CEx_ConfigDigitalFilter>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800132e:	f000 fbf9 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000a10 	.word	0x20000a10
 800133c:	40005400 	.word	0x40005400
 8001340:	20303e5d 	.word	0x20303e5d

08001344 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <MX_I2C2_Init+0x74>)
 800134a:	4a1c      	ldr	r2, [pc, #112]	; (80013bc <MX_I2C2_Init+0x78>)
 800134c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <MX_I2C2_Init+0x74>)
 8001350:	4a1b      	ldr	r2, [pc, #108]	; (80013c0 <MX_I2C2_Init+0x7c>)
 8001352:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <MX_I2C2_Init+0x74>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800135a:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <MX_I2C2_Init+0x74>)
 800135c:	2201      	movs	r2, #1
 800135e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001360:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <MX_I2C2_Init+0x74>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <MX_I2C2_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800136c:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <MX_I2C2_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_I2C2_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <MX_I2C2_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800137e:	480e      	ldr	r0, [pc, #56]	; (80013b8 <MX_I2C2_Init+0x74>)
 8001380:	f00b fa10 	bl	800c7a4 <HAL_I2C_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800138a:	f000 fbcb 	bl	8001b24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800138e:	2100      	movs	r1, #0
 8001390:	4809      	ldr	r0, [pc, #36]	; (80013b8 <MX_I2C2_Init+0x74>)
 8001392:	f00c fb13 	bl	800d9bc <HAL_I2CEx_ConfigAnalogFilter>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800139c:	f000 fbc2 	bl	8001b24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013a0:	2100      	movs	r1, #0
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_I2C2_Init+0x74>)
 80013a4:	f00c fb55 	bl	800da52 <HAL_I2CEx_ConfigDigitalFilter>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80013ae:	f000 fbb9 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000a64 	.word	0x20000a64
 80013bc:	40005800 	.word	0x40005800
 80013c0:	20303e5d 	.word	0x20303e5d

080013c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b0b0      	sub	sp, #192	; 0xc0
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013dc:	f107 0320 	add.w	r3, r7, #32
 80013e0:	228c      	movs	r2, #140	; 0x8c
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f017 f9c9 	bl	801877c <memset>
  if(i2cHandle->Instance==I2C1)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a53      	ldr	r2, [pc, #332]	; (800153c <HAL_I2C_MspInit+0x178>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d13c      	bne.n	800146e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013f4:	2340      	movs	r3, #64	; 0x40
 80013f6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013fc:	f107 0320 	add.w	r3, r7, #32
 8001400:	4618      	mov	r0, r3
 8001402:	f00e fd41 	bl	800fe88 <HAL_RCCEx_PeriphCLKConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800140c:	f000 fb8a 	bl	8001b24 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001410:	4b4b      	ldr	r3, [pc, #300]	; (8001540 <HAL_I2C_MspInit+0x17c>)
 8001412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001414:	4a4a      	ldr	r2, [pc, #296]	; (8001540 <HAL_I2C_MspInit+0x17c>)
 8001416:	f043 0302 	orr.w	r3, r3, #2
 800141a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141c:	4b48      	ldr	r3, [pc, #288]	; (8001540 <HAL_I2C_MspInit+0x17c>)
 800141e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	61fb      	str	r3, [r7, #28]
 8001426:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001428:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800142c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001430:	2312      	movs	r3, #18
 8001432:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001436:	2301      	movs	r3, #1
 8001438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001442:	2304      	movs	r3, #4
 8001444:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800144c:	4619      	mov	r1, r3
 800144e:	483d      	ldr	r0, [pc, #244]	; (8001544 <HAL_I2C_MspInit+0x180>)
 8001450:	f00a fef4 	bl	800c23c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001454:	4b3a      	ldr	r3, [pc, #232]	; (8001540 <HAL_I2C_MspInit+0x17c>)
 8001456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001458:	4a39      	ldr	r2, [pc, #228]	; (8001540 <HAL_I2C_MspInit+0x17c>)
 800145a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800145e:	6593      	str	r3, [r2, #88]	; 0x58
 8001460:	4b37      	ldr	r3, [pc, #220]	; (8001540 <HAL_I2C_MspInit+0x17c>)
 8001462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001468:	61bb      	str	r3, [r7, #24]
 800146a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800146c:	e061      	b.n	8001532 <HAL_I2C_MspInit+0x16e>
  else if(i2cHandle->Instance==I2C2)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a35      	ldr	r2, [pc, #212]	; (8001548 <HAL_I2C_MspInit+0x184>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d15c      	bne.n	8001532 <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800147c:	2300      	movs	r3, #0
 800147e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001480:	f107 0320 	add.w	r3, r7, #32
 8001484:	4618      	mov	r0, r3
 8001486:	f00e fcff 	bl	800fe88 <HAL_RCCEx_PeriphCLKConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001490:	f000 fb48 	bl	8001b24 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001494:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <HAL_I2C_MspInit+0x17c>)
 8001496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001498:	4a29      	ldr	r2, [pc, #164]	; (8001540 <HAL_I2C_MspInit+0x17c>)
 800149a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800149e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a0:	4b27      	ldr	r3, [pc, #156]	; (8001540 <HAL_I2C_MspInit+0x17c>)
 80014a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ac:	4b24      	ldr	r3, [pc, #144]	; (8001540 <HAL_I2C_MspInit+0x17c>)
 80014ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b0:	4a23      	ldr	r2, [pc, #140]	; (8001540 <HAL_I2C_MspInit+0x17c>)
 80014b2:	f043 0302 	orr.w	r3, r3, #2
 80014b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b8:	4b21      	ldr	r3, [pc, #132]	; (8001540 <HAL_I2C_MspInit+0x17c>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 80014c4:	2310      	movs	r3, #16
 80014c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ca:	2312      	movs	r3, #18
 80014cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014dc:	2304      	movs	r3, #4
 80014de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014e6:	4619      	mov	r1, r3
 80014e8:	4818      	ldr	r0, [pc, #96]	; (800154c <HAL_I2C_MspInit+0x188>)
 80014ea:	f00a fea7 	bl	800c23c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 80014ee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f6:	2312      	movs	r3, #18
 80014f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014fc:	2301      	movs	r3, #1
 80014fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001508:	2304      	movs	r3, #4
 800150a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 800150e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001512:	4619      	mov	r1, r3
 8001514:	480b      	ldr	r0, [pc, #44]	; (8001544 <HAL_I2C_MspInit+0x180>)
 8001516:	f00a fe91 	bl	800c23c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_I2C_MspInit+0x17c>)
 800151c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151e:	4a08      	ldr	r2, [pc, #32]	; (8001540 <HAL_I2C_MspInit+0x17c>)
 8001520:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001524:	6593      	str	r3, [r2, #88]	; 0x58
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_I2C_MspInit+0x17c>)
 8001528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800152a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
}
 8001532:	bf00      	nop
 8001534:	37c0      	adds	r7, #192	; 0xc0
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40005400 	.word	0x40005400
 8001540:	40021000 	.word	0x40021000
 8001544:	48000400 	.word	0x48000400
 8001548:	40005800 	.word	0x40005800
 800154c:	48001c00 	.word	0x48001c00

08001550 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a15      	ldr	r2, [pc, #84]	; (80015b4 <HAL_I2C_MspDeInit+0x64>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d10f      	bne.n	8001582 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_I2C_MspDeInit+0x68>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <HAL_I2C_MspDeInit+0x68>)
 8001568:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800156c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 800156e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001572:	4812      	ldr	r0, [pc, #72]	; (80015bc <HAL_I2C_MspDeInit+0x6c>)
 8001574:	f00a fff4 	bl	800c560 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8001578:	2180      	movs	r1, #128	; 0x80
 800157a:	4810      	ldr	r0, [pc, #64]	; (80015bc <HAL_I2C_MspDeInit+0x6c>)
 800157c:	f00a fff0 	bl	800c560 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8001580:	e013      	b.n	80015aa <HAL_I2C_MspDeInit+0x5a>
  else if(i2cHandle->Instance==I2C2)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a0e      	ldr	r2, [pc, #56]	; (80015c0 <HAL_I2C_MspDeInit+0x70>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d10e      	bne.n	80015aa <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_I2C_MspDeInit+0x68>)
 800158e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001590:	4a09      	ldr	r2, [pc, #36]	; (80015b8 <HAL_I2C_MspDeInit+0x68>)
 8001592:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001596:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(I2C2_SCL_GPIO_Port, I2C2_SCL_Pin);
 8001598:	2110      	movs	r1, #16
 800159a:	480a      	ldr	r0, [pc, #40]	; (80015c4 <HAL_I2C_MspDeInit+0x74>)
 800159c:	f00a ffe0 	bl	800c560 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(I2C2_SDA_GPIO_Port, I2C2_SDA_Pin);
 80015a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015a4:	4805      	ldr	r0, [pc, #20]	; (80015bc <HAL_I2C_MspDeInit+0x6c>)
 80015a6:	f00a ffdb 	bl	800c560 <HAL_GPIO_DeInit>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40005400 	.word	0x40005400
 80015b8:	40021000 	.word	0x40021000
 80015bc:	48000400 	.word	0x48000400
 80015c0:	40005800 	.word	0x40005800
 80015c4:	48001c00 	.word	0x48001c00

080015c8 <drawCircle>:
		sensor_sample = true;
	}

}

void drawCircle(uint16_t x, uint16_t y) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	460a      	mov	r2, r1
 80015d2:	80fb      	strh	r3, [r7, #6]
 80015d4:	4613      	mov	r3, r2
 80015d6:	80bb      	strh	r3, [r7, #4]

	if(!circle_selected) {
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <drawCircle+0x50>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	f083 0301 	eor.w	r3, r3, #1
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00a      	beq.n	80015fc <drawCircle+0x34>
		BSP_LCD_SetTextColor( LCD_COLOR_DARKMAGENTA );
 80015e6:	f248 0010 	movw	r0, #32784	; 0x8010
 80015ea:	f008 fc33 	bl	8009e54 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(x, y, 20);
 80015ee:	88b9      	ldrh	r1, [r7, #4]
 80015f0:	88fb      	ldrh	r3, [r7, #6]
 80015f2:	2214      	movs	r2, #20
 80015f4:	4618      	mov	r0, r3
 80015f6:	f008 fe4b 	bl	800a290 <BSP_LCD_FillCircle>
	} else {
		BSP_LCD_SetTextColor( LCD_COLOR_GREEN );
		BSP_LCD_FillCircle(x, y, 40);
	}

}
 80015fa:	e009      	b.n	8001610 <drawCircle+0x48>
		BSP_LCD_SetTextColor( LCD_COLOR_GREEN );
 80015fc:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001600:	f008 fc28 	bl	8009e54 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(x, y, 40);
 8001604:	88b9      	ldrh	r1, [r7, #4]
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	2228      	movs	r2, #40	; 0x28
 800160a:	4618      	mov	r0, r3
 800160c:	f008 fe40 	bl	800a290 <BSP_LCD_FillCircle>
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000ac6 	.word	0x20000ac6

0800161c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b095      	sub	sp, #84	; 0x54
 8001620:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001622:	f009 faa1 	bl	800ab68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001626:	f000 f9b7 	bl	8001998 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800162a:	f000 fa17 	bl	8001a5c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800162e:	f7ff fc8d 	bl	8000f4c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001632:	f7fe ffaf 	bl	8000594 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001636:	f7ff f823 	bl	8000680 <MX_ADC2_Init>
  MX_ADC3_Init();
 800163a:	f7ff f885 	bl	8000748 <MX_ADC3_Init>
  MX_DCMI_Init();
 800163e:	f7ff f9b7 	bl	80009b0 <MX_DCMI_Init>
  MX_DFSDM1_Init();
 8001642:	f7ff fa69 	bl	8000b18 <MX_DFSDM1_Init>
  MX_FMC_Init();
 8001646:	f7ff fb5b 	bl	8000d00 <MX_FMC_Init>
  MX_I2C1_Init();
 800164a:	f7ff fe3b 	bl	80012c4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800164e:	f7ff fe79 	bl	8001344 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8001652:	f000 ff57 	bl	8002504 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8001656:	f000 ff83 	bl	8002560 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800165a:	f000 ffb1 	bl	80025c0 <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 800165e:	f000 fa67 	bl	8001b30 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8001662:	f000 faf3 	bl	8001c4c <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8001666:	f000 fc13 	bl	8001e90 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 800166a:	f000 fca3 	bl	8001fb4 <MX_SPI1_Init>
  MX_SPI2_Init();
 800166e:	f000 fcdf 	bl	8002030 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8001672:	f016 fa41 	bl	8017af8 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8001676:	f000 feef 	bl	8002458 <MX_TIM6_Init>
  // above: MX_SDMMC1_SD_Init(); has to be commented out to not be called



  /* LCD Init */
	if (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE) == LCD_ERROR)
 800167a:	2001      	movs	r0, #1
 800167c:	f008 fb2c 	bl	8009cd8 <BSP_LCD_InitEx>
 8001680:	4603      	mov	r3, r0
 8001682:	2b01      	cmp	r3, #1
 8001684:	d101      	bne.n	800168a <main+0x6e>
	{
		/* Initialization Error */
		Error_Handler();
 8001686:	f000 fa4d 	bl	8001b24 <Error_Handler>
	}

	// the lcd bsp includes the fontNN.c files in the Utilities directory
	// in that file, a struct is declared: FontNN
	//BSP_LCD_SetFont(&Font20);
	BSP_LCD_SetFont(&Font24);
 800168a:	48b1      	ldr	r0, [pc, #708]	; (8001950 <main+0x334>)
 800168c:	f008 fbf2 	bl	8009e74 <BSP_LCD_SetFont>

	// the display is 240 px tall, XYZ px wide
	BSP_LCD_DisplayStringAt(0, 240 - 65, (uint8_t *)"Purple Ball", CENTER_MODE);
 8001690:	2301      	movs	r3, #1
 8001692:	4ab0      	ldr	r2, [pc, #704]	; (8001954 <main+0x338>)
 8001694:	21af      	movs	r1, #175	; 0xaf
 8001696:	2000      	movs	r0, #0
 8001698:	f008 fc5c 	bl	8009f54 <BSP_LCD_DisplayStringAt>



	// touchscreen init
	if(BSP_TS_InitEx(BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), LCD_ORIENTATION_LANDSCAPE) != TS_OK) {
 800169c:	f008 fbc2 	bl	8009e24 <BSP_LCD_GetXSize>
 80016a0:	4603      	mov	r3, r0
 80016a2:	b29c      	uxth	r4, r3
 80016a4:	f008 fbca 	bl	8009e3c <BSP_LCD_GetYSize>
 80016a8:	4603      	mov	r3, r0
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	2201      	movs	r2, #1
 80016ae:	4619      	mov	r1, r3
 80016b0:	4620      	mov	r0, r4
 80016b2:	f009 f8ef 	bl	800a894 <BSP_TS_InitEx>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <main+0xa4>
		Error_Handler();
 80016bc:	f000 fa32 	bl	8001b24 <Error_Handler>
	}

	BSP_LCD_ScreenDimmingConfig(100, 5, 1, 20);
 80016c0:	2314      	movs	r3, #20
 80016c2:	2201      	movs	r2, #1
 80016c4:	2105      	movs	r1, #5
 80016c6:	2064      	movs	r0, #100	; 0x64
 80016c8:	f008 fe74 	bl	800a3b4 <BSP_LCD_ScreenDimmingConfig>



	// LED
	BSP_LED_Init(LED1_PIN);
 80016cc:	2010      	movs	r0, #16
 80016ce:	f007 fcad 	bl	800902c <BSP_LED_Init>
	BSP_LED_Init(LED2_PIN);
 80016d2:	2000      	movs	r0, #0
 80016d4:	f007 fcaa 	bl	800902c <BSP_LED_Init>
	BSP_LED_Off( LED1_PIN ); // orange labeled LD1
 80016d8:	2010      	movs	r0, #16
 80016da:	f007 fd17 	bl	800910c <BSP_LED_Off>
	BSP_LED_Off( LED2_PIN ); // doesn't work
 80016de:	2000      	movs	r0, #0
 80016e0:	f007 fd14 	bl	800910c <BSP_LED_Off>



	// Start timer
	HAL_TIM_Base_Start_IT(&htim6);
 80016e4:	489c      	ldr	r0, [pc, #624]	; (8001958 <main+0x33c>)
 80016e6:	f011 f843 	bl	8012770 <HAL_TIM_Base_Start_IT>
	//ResetAndDetectSensor(1); // EK TODO: the parameter SetDisplay doesn't matter

	// EK test1
	HAL_StatusTypeDef status;
	uint8_t pData;
	status = HAL_I2C_Mem_Read(&hi2c1, 0x52, 0xC0, 1, &pData, 1, HAL_TIMEOUT);
 80016ea:	2303      	movs	r3, #3
 80016ec:	9302      	str	r3, [sp, #8]
 80016ee:	2301      	movs	r3, #1
 80016f0:	9301      	str	r3, [sp, #4]
 80016f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	2301      	movs	r3, #1
 80016fa:	22c0      	movs	r2, #192	; 0xc0
 80016fc:	2152      	movs	r1, #82	; 0x52
 80016fe:	4897      	ldr	r0, [pc, #604]	; (800195c <main+0x340>)
 8001700:	f00b fc0c 	bl	800cf1c <HAL_I2C_Mem_Read>
 8001704:	4603      	mov	r3, r0
 8001706:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	// pData should be 0xEE
	if(status == HAL_OK) {
 800170a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800170e:	2b00      	cmp	r3, #0
 8001710:	d102      	bne.n	8001718 <main+0xfc>
		printf("good");
 8001712:	4893      	ldr	r0, [pc, #588]	; (8001960 <main+0x344>)
 8001714:	f017 f91a 	bl	801894c <iprintf>
	}
	//--

	// EK test2
	VL53L0X_Dev_t *pDev;
	pDev = &VL53L0XDev;
 8001718:	4b92      	ldr	r3, [pc, #584]	; (8001964 <main+0x348>)
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
	pDev->I2cDevAddr = 0x52;
 800171c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171e:	2252      	movs	r2, #82	; 0x52
 8001720:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	pDev->Present = 0;
 8001724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001726:	2200      	movs	r2, #0
 8001728:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

	int status2 = VL53L0X_DataInit(pDev);
 800172c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800172e:	f003 f8e9 	bl	8004904 <VL53L0X_DataInit>
 8001732:	4603      	mov	r3, r0
 8001734:	633b      	str	r3, [r7, #48]	; 0x30
	if( status2 == 0 ){
 8001736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001738:	2b00      	cmp	r3, #0
 800173a:	d104      	bne.n	8001746 <main+0x12a>
			pDev->Present = 1;
 800173c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173e:	2201      	movs	r2, #1
 8001740:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8001744:	e002      	b.n	800174c <main+0x130>
	}
	else{
			printf("VL53L0X_DataInit fail\n");
 8001746:	4888      	ldr	r0, [pc, #544]	; (8001968 <main+0x34c>)
 8001748:	f017 f986 	bl	8018a58 <puts>
	}
	printf("VL53L0X %d Present and initiated to final 0x%x\n", pDev->Id, pDev->I2cDevAddr);
 800174c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174e:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 8001752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001754:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8001758:	461a      	mov	r2, r3
 800175a:	4884      	ldr	r0, [pc, #528]	; (800196c <main+0x350>)
 800175c:	f017 f8f6 	bl	801894c <iprintf>
	pDev->Present = 1;
 8001760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001762:	2201      	movs	r2, #1
 8001764:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	uint8_t isApertureSpads;
	VL53L0X_RangingMeasurementData_t RangingMeasurementData;
	//int range;

	// Initialize the device in continuous ranging mode
	VL53L0X_StaticInit(pDev);
 8001768:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800176a:	f003 fa2f 	bl	8004bcc <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(pDev, &VhvSettings, &PhaseCal);
 800176e:	f107 022a 	add.w	r2, r7, #42	; 0x2a
 8001772:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8001776:	4619      	mov	r1, r3
 8001778:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800177a:	f004 f8d7 	bl	800592c <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(pDev, &refSpadCount, &isApertureSpads);
 800177e:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8001782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001786:	4619      	mov	r1, r3
 8001788:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800178a:	f004 fd5d 	bl	8006248 <VL53L0X_PerformRefSpadManagement>
	//VL53L0X_SetInterMeasurementPeriodMilliSeconds(pDev, 250); // Program continuous mode Inter-Measurement period in milliseconds
	//VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
	VL53L0X_SetInterMeasurementPeriodMilliSeconds(pDev, TIMED_RANGING_PERIOD);
 800178e:	2132      	movs	r1, #50	; 0x32
 8001790:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001792:	f003 fe15 	bl	80053c0 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>
	VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING);
 8001796:	2103      	movs	r1, #3
 8001798:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800179a:	f003 fc29 	bl	8004ff0 <VL53L0X_SetDeviceMode>

	// Start continuous ranging
	VL53L0X_StartMeasurement(pDev);
 800179e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80017a0:	f004 f940 	bl	8005a24 <VL53L0X_StartMeasurement>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  	// this has to be the 1st thing in the loop
  	if(gone_sleep) {
 80017a4:	4b72      	ldr	r3, [pc, #456]	; (8001970 <main+0x354>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <main+0x194>
			//HAL_ResumeTick();
			awakeFromSleep();
 80017ac:	f000 f98c 	bl	8001ac8 <awakeFromSleep>
		}

  	// sampling every 50 ms
  	if(sensor_sample) {
 80017b0:	4b70      	ldr	r3, [pc, #448]	; (8001974 <main+0x358>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d002      	beq.n	80017be <main+0x1a2>
				}

			}
			*/

  		sensor_sample = false; // hope all of this takes < 50 ms
 80017b8:	4b6e      	ldr	r3, [pc, #440]	; (8001974 <main+0x358>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]


		// by changing the text, we can prove that it's resetting when pressing
		// the reset button - because the display will say Beep instead of the
		// other two possibilities
		if(TimingDelay == 0) {
 80017be:	4b6e      	ldr	r3, [pc, #440]	; (8001978 <main+0x35c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d12d      	bne.n	8001822 <main+0x206>
			/* Toggle LED1 */
			if(led_on) {
 80017c6:	4b6d      	ldr	r3, [pc, #436]	; (800197c <main+0x360>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d00d      	beq.n	80017ea <main+0x1ce>
				BSP_LED_Off(LED1);
 80017ce:	2000      	movs	r0, #0
 80017d0:	f007 fc9c 	bl	800910c <BSP_LED_Off>
				BSP_LCD_Clear(LCD_COLOR_WHITE);
 80017d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80017d8:	f008 fb5c 	bl	8009e94 <BSP_LCD_Clear>
				BSP_LCD_DisplayStringAt(0, 240 - 65, (uint8_t *)"Zweep", CENTER_MODE);
 80017dc:	2301      	movs	r3, #1
 80017de:	4a68      	ldr	r2, [pc, #416]	; (8001980 <main+0x364>)
 80017e0:	21af      	movs	r1, #175	; 0xaf
 80017e2:	2000      	movs	r0, #0
 80017e4:	f008 fbb6 	bl	8009f54 <BSP_LCD_DisplayStringAt>
 80017e8:	e00c      	b.n	8001804 <main+0x1e8>
			} else {
				BSP_LED_On(LED1);
 80017ea:	2000      	movs	r0, #0
 80017ec:	f007 fc6c 	bl	80090c8 <BSP_LED_On>
				BSP_LCD_Clear(LCD_COLOR_WHITE);
 80017f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80017f4:	f008 fb4e 	bl	8009e94 <BSP_LCD_Clear>
				BSP_LCD_DisplayStringAt(0, 240 - 65, (uint8_t *)"Fleep", CENTER_MODE);
 80017f8:	2301      	movs	r3, #1
 80017fa:	4a62      	ldr	r2, [pc, #392]	; (8001984 <main+0x368>)
 80017fc:	21af      	movs	r1, #175	; 0xaf
 80017fe:	2000      	movs	r0, #0
 8001800:	f008 fba8 	bl	8009f54 <BSP_LCD_DisplayStringAt>
			}
			led_on = !led_on;
 8001804:	4b5d      	ldr	r3, [pc, #372]	; (800197c <main+0x360>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	bf14      	ite	ne
 800180c:	2301      	movne	r3, #1
 800180e:	2300      	moveq	r3, #0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	f083 0301 	eor.w	r3, r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b57      	ldr	r3, [pc, #348]	; (800197c <main+0x360>)
 8001820:	701a      	strb	r2, [r3, #0]
  	// imagine the case where gettick has overflowed, but last_ts has not
		// eg 100-30000
		// abs could be used to prevent this from being a negative number, however
		// in this case, it is not needed, because two unsigned integers being
		// subtracted results in an unsigned integer
		if( HAL_GetTick()-last_ts >= 1000 && dimmed_screen == false) {
 8001822:	f009 fa09 	bl	800ac38 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	4b57      	ldr	r3, [pc, #348]	; (8001988 <main+0x36c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001832:	d311      	bcc.n	8001858 <main+0x23c>
 8001834:	4b55      	ldr	r3, [pc, #340]	; (800198c <main+0x370>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	f083 0301 	eor.w	r3, r3, #1
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00a      	beq.n	8001858 <main+0x23c>
			BSP_LCD_ScreenDimmingConfig(100, 5, 1, 20);
 8001842:	2314      	movs	r3, #20
 8001844:	2201      	movs	r2, #1
 8001846:	2105      	movs	r1, #5
 8001848:	2064      	movs	r0, #100	; 0x64
 800184a:	f008 fdb3 	bl	800a3b4 <BSP_LCD_ScreenDimmingConfig>
			BSP_LCD_ScreenDimmingOn();
 800184e:	f008 fde3 	bl	800a418 <BSP_LCD_ScreenDimmingOn>
			dimmed_screen = true;
 8001852:	4b4e      	ldr	r3, [pc, #312]	; (800198c <main+0x370>)
 8001854:	2201      	movs	r2, #1
 8001856:	701a      	strb	r2, [r3, #0]
		}



		uint8_t circle_x = 100;
 8001858:	2364      	movs	r3, #100	; 0x64
 800185a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint8_t circle_y = 100;
 800185e:	2364      	movs	r3, #100	; 0x64
 8001860:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		drawCircle(circle_x, circle_y);
 8001864:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001868:	b29b      	uxth	r3, r3
 800186a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800186e:	b292      	uxth	r2, r2
 8001870:	4611      	mov	r1, r2
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fea8 	bl	80015c8 <drawCircle>

		BSP_TS_GetState(&ts_result);
 8001878:	4845      	ldr	r0, [pc, #276]	; (8001990 <main+0x374>)
 800187a:	f009 f863 	bl	800a944 <BSP_TS_GetState>

		uint8_t num_touches = ts_result.touchDetected;
 800187e:	4b44      	ldr	r3, [pc, #272]	; (8001990 <main+0x374>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		for(int i=0; i<num_touches; i++) {
 8001886:	2300      	movs	r3, #0
 8001888:	63fb      	str	r3, [r7, #60]	; 0x3c
 800188a:	e05b      	b.n	8001944 <main+0x328>
			Point touch;
			touch.X = ts_result.touchX[i];
 800188c:	4a40      	ldr	r2, [pc, #256]	; (8001990 <main+0x374>)
 800188e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	885b      	ldrh	r3, [r3, #2]
 8001896:	b21b      	sxth	r3, r3
 8001898:	803b      	strh	r3, [r7, #0]
			touch.Y = ts_result.touchY[i];
 800189a:	4a3d      	ldr	r2, [pc, #244]	; (8001990 <main+0x374>)
 800189c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	4413      	add	r3, r2
 80018a2:	88db      	ldrh	r3, [r3, #6]
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	807b      	strh	r3, [r7, #2]

			if(dimmed_screen) {
 80018a8:	4b38      	ldr	r3, [pc, #224]	; (800198c <main+0x370>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d004      	beq.n	80018ba <main+0x29e>
				//BSP_LCD_ScreenDimmingConfig(5, 100, 1, 20);
				//BSP_LCD_ScreenDimmingOn();
				BSP_LCD_ScreenDimmingOff();
 80018b0:	f008 feac 	bl	800a60c <BSP_LCD_ScreenDimmingOff>
				dimmed_screen = false;
 80018b4:	4b35      	ldr	r3, [pc, #212]	; (800198c <main+0x370>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
			}

			last_ts = HAL_GetTick();
 80018ba:	f009 f9bd 	bl	800ac38 <HAL_GetTick>
 80018be:	4603      	mov	r3, r0
 80018c0:	4a31      	ldr	r2, [pc, #196]	; (8001988 <main+0x36c>)
 80018c2:	6013      	str	r3, [r2, #0]

			if(touch.X < circle_x+70 && touch.X > circle_x-70) {
 80018c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018c8:	3345      	adds	r3, #69	; 0x45
 80018ca:	f9b7 2000 	ldrsh.w	r2, [r7]
 80018ce:	4293      	cmp	r3, r2
 80018d0:	db28      	blt.n	8001924 <main+0x308>
 80018d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018d6:	3b45      	subs	r3, #69	; 0x45
 80018d8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80018dc:	4293      	cmp	r3, r2
 80018de:	dc21      	bgt.n	8001924 <main+0x308>
				if(touch.Y < circle_y+70 && touch.Y > circle_y-70) {
 80018e0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80018e4:	3345      	adds	r3, #69	; 0x45
 80018e6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80018ea:	4293      	cmp	r3, r2
 80018ec:	db1a      	blt.n	8001924 <main+0x308>
 80018ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80018f2:	3b45      	subs	r3, #69	; 0x45
 80018f4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80018f8:	4293      	cmp	r3, r2
 80018fa:	dc13      	bgt.n	8001924 <main+0x308>
					circle_selected = !circle_selected;
 80018fc:	4b25      	ldr	r3, [pc, #148]	; (8001994 <main+0x378>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b00      	cmp	r3, #0
 8001902:	bf14      	ite	ne
 8001904:	2301      	movne	r3, #1
 8001906:	2300      	moveq	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f083 0301 	eor.w	r3, r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <main+0x378>)
 8001918:	701a      	strb	r2, [r3, #0]
					BSP_LCD_Clear(LCD_COLOR_WHITE);
 800191a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800191e:	f008 fab9 	bl	8009e94 <BSP_LCD_Clear>
 8001922:	e73f      	b.n	80017a4 <main+0x188>
					break;
				}
			}

			BSP_LCD_SetTextColor( LCD_COLOR_BLUE );
 8001924:	201f      	movs	r0, #31
 8001926:	f008 fa95 	bl	8009e54 <BSP_LCD_SetTextColor>
			BSP_LCD_FillCircle(touch.X, touch.Y, 10);
 800192a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800192e:	b29b      	uxth	r3, r3
 8001930:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001934:	b291      	uxth	r1, r2
 8001936:	220a      	movs	r2, #10
 8001938:	4618      	mov	r0, r3
 800193a:	f008 fca9 	bl	800a290 <BSP_LCD_FillCircle>
		for(int i=0; i<num_touches; i++) {
 800193e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001940:	3301      	adds	r3, #1
 8001942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001944:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001948:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800194a:	429a      	cmp	r2, r3
 800194c:	db9e      	blt.n	800188c <main+0x270>
  {
 800194e:	e729      	b.n	80017a4 <main+0x188>
 8001950:	20000530 	.word	0x20000530
 8001954:	0801988c 	.word	0x0801988c
 8001958:	20000d7c 	.word	0x20000d7c
 800195c:	20000a10 	.word	0x20000a10
 8001960:	08019898 	.word	0x08019898
 8001964:	20000000 	.word	0x20000000
 8001968:	080198a0 	.word	0x080198a0
 800196c:	08019834 	.word	0x08019834
 8001970:	20000ace 	.word	0x20000ace
 8001974:	20000ab8 	.word	0x20000ab8
 8001978:	20000ad0 	.word	0x20000ad0
 800197c:	20000acd 	.word	0x20000acd
 8001980:	080198b8 	.word	0x080198b8
 8001984:	080198c0 	.word	0x080198c0
 8001988:	20000ac8 	.word	0x20000ac8
 800198c:	20000acc 	.word	0x20000acc
 8001990:	20000abc 	.word	0x20000abc
 8001994:	20000ac6 	.word	0x20000ac6

08001998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b096      	sub	sp, #88	; 0x58
 800199c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	2244      	movs	r2, #68	; 0x44
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f016 fee8 	bl	801877c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ac:	463b      	mov	r3, r7
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
 80019b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019be:	f00d faa5 	bl	800ef0c <HAL_PWREx_ControlVoltageScaling>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019c8:	f000 f8ac 	bl	8001b24 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019cc:	f00d fa4c 	bl	800ee68 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80019d0:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <SystemClock_Config+0xc0>)
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d6:	4a20      	ldr	r2, [pc, #128]	; (8001a58 <SystemClock_Config+0xc0>)
 80019d8:	f023 0318 	bic.w	r3, r3, #24
 80019dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80019e0:	2314      	movs	r3, #20
 80019e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80019e4:	2301      	movs	r3, #1
 80019e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019e8:	2301      	movs	r3, #1
 80019ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80019f0:	2360      	movs	r3, #96	; 0x60
 80019f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f4:	2302      	movs	r3, #2
 80019f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80019f8:	2301      	movs	r3, #1
 80019fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019fc:	2301      	movs	r3, #1
 80019fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001a00:	2318      	movs	r3, #24
 8001a02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a04:	2302      	movs	r3, #2
 8001a06:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4618      	mov	r0, r3
 8001a16:	f00d fbf9 	bl	800f20c <HAL_RCC_OscConfig>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001a20:	f000 f880 	bl	8001b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a24:	230f      	movs	r3, #15
 8001a26:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a34:	2300      	movs	r3, #0
 8001a36:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a38:	463b      	mov	r3, r7
 8001a3a:	2102      	movs	r1, #2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f00d ffff 	bl	800fa40 <HAL_RCC_ClockConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001a48:	f000 f86c 	bl	8001b24 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001a4c:	f00f fad0 	bl	8010ff0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001a50:	bf00      	nop
 8001a52:	3758      	adds	r7, #88	; 0x58
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40021000 	.word	0x40021000

08001a5c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b0a4      	sub	sp, #144	; 0x90
 8001a60:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	228c      	movs	r2, #140	; 0x8c
 8001a66:	2100      	movs	r1, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f016 fe87 	bl	801877c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <PeriphCommonClock_Config+0x64>)
 8001a70:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001a76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001a7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001a7e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a82:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8001a84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a88:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001a92:	2318      	movs	r3, #24
 8001a94:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001a96:	2302      	movs	r3, #2
 8001a98:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <PeriphCommonClock_Config+0x68>)
 8001aa4:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aa6:	1d3b      	adds	r3, r7, #4
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f00e f9ed 	bl	800fe88 <HAL_RCCEx_PeriphCLKConfig>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001ab4:	f000 f836 	bl	8001b24 <Error_Handler>
  }
}
 8001ab8:	bf00      	nop
 8001aba:	3790      	adds	r7, #144	; 0x90
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	00086800 	.word	0x00086800
 8001ac4:	01110000 	.word	0x01110000

08001ac8 <awakeFromSleep>:

	/* ... Low-power SLEEP mode ... */

}

void awakeFromSleep(void) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	BSP_LED_On(LED1);
 8001acc:	2000      	movs	r0, #0
 8001ace:	f007 fafb 	bl	80090c8 <BSP_LED_On>

	/* System is Low Power Run mode when exiting Low Power Sleep mode,
		 disable low power run mode and reset the clock to initialization configuration */
	HAL_PWREx_DisableLowPowerRunMode();
 8001ad2:	f00d faa1 	bl	800f018 <HAL_PWREx_DisableLowPowerRunMode>

	/* Configure the system clock for the RUN mode */
	SystemClock_Config();
 8001ad6:	f7ff ff5f 	bl	8001998 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	// should this go here too? added it
	PeriphCommonClock_Config();
 8001ada:	f7ff ffbf 	bl	8001a5c <PeriphCommonClock_Config>

	/* Re-init LED1 to toggle during Run mode */
	/*BSP_LED_Init(LED1);*/

	/* Resume Tick interrupt if disabled prior to Low Power Sleep mode entry */
	HAL_ResumeTick();
 8001ade:	f009 f8eb 	bl	800acb8 <HAL_ResumeTick>
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == JOY_DOWN_Pin) {
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af8:	d108      	bne.n	8001b0c <HAL_GPIO_EXTI_Callback+0x24>
//		HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2_HIGH); // JOY_SEL on SYS_WKUP2
//		prepareForSleep();
//		enterSleep();

		// simpler version
		gone_sleep = true;
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_GPIO_EXTI_Callback+0x38>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
		HAL_SuspendTick();
 8001b00:	f009 f8ca 	bl	800ac98 <HAL_SuspendTick>
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE); // left button configured as event
 8001b04:	2102      	movs	r1, #2
 8001b06:	2000      	movs	r0, #0
 8001b08:	f00d f9be 	bl	800ee88 <HAL_PWR_EnterSLEEPMode>
	}

	// LEFT wakes it up as an event

	if(GPIO_Pin == JOY_RIGHT_Pin) {
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b12:	d101      	bne.n	8001b18 <HAL_GPIO_EXTI_Callback+0x30>
//		awakeFromSleep();

		// simpler version
		HAL_ResumeTick();
 8001b14:	f009 f8d0 	bl	800acb8 <HAL_ResumeTick>
	}

}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000ace 	.word	0x20000ace

08001b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b28:	b672      	cpsid	i
}
 8001b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <Error_Handler+0x8>
	...

08001b30 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <MX_QUADSPI_Init+0x50>)
 8001b36:	4a13      	ldr	r2, [pc, #76]	; (8001b84 <MX_QUADSPI_Init+0x54>)
 8001b38:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <MX_QUADSPI_Init+0x50>)
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <MX_QUADSPI_Init+0x50>)
 8001b42:	2204      	movs	r2, #4
 8001b44:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <MX_QUADSPI_Init+0x50>)
 8001b48:	2210      	movs	r2, #16
 8001b4a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <MX_QUADSPI_Init+0x50>)
 8001b4e:	2217      	movs	r2, #23
 8001b50:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <MX_QUADSPI_Init+0x50>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <MX_QUADSPI_Init+0x50>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <MX_QUADSPI_Init+0x50>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001b64:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <MX_QUADSPI_Init+0x50>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001b6a:	4805      	ldr	r0, [pc, #20]	; (8001b80 <MX_QUADSPI_Init+0x50>)
 8001b6c:	f00d fa8c 	bl	800f088 <HAL_QSPI_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001b76:	f7ff ffd5 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000ad4 	.word	0x20000ad4
 8001b84:	a0001000 	.word	0xa0001000

08001b88 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a26      	ldr	r2, [pc, #152]	; (8001c40 <HAL_QSPI_MspInit+0xb8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d145      	bne.n	8001c36 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001baa:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <HAL_QSPI_MspInit+0xbc>)
 8001bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bae:	4a25      	ldr	r2, [pc, #148]	; (8001c44 <HAL_QSPI_MspInit+0xbc>)
 8001bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb4:	6513      	str	r3, [r2, #80]	; 0x50
 8001bb6:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <HAL_QSPI_MspInit+0xbc>)
 8001bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <HAL_QSPI_MspInit+0xbc>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc6:	4a1f      	ldr	r2, [pc, #124]	; (8001c44 <HAL_QSPI_MspInit+0xbc>)
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bce:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <HAL_QSPI_MspInit+0xbc>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bda:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <HAL_QSPI_MspInit+0xbc>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	4a19      	ldr	r2, [pc, #100]	; (8001c44 <HAL_QSPI_MspInit+0xbc>)
 8001be0:	f043 0301 	orr.w	r3, r3, #1
 8001be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be6:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <HAL_QSPI_MspInit+0xbc>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001bf2:	f640 0303 	movw	r3, #2051	; 0x803
 8001bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c00:	2303      	movs	r3, #3
 8001c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001c04:	230a      	movs	r3, #10
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	480e      	ldr	r0, [pc, #56]	; (8001c48 <HAL_QSPI_MspInit+0xc0>)
 8001c10:	f00a fb14 	bl	800c23c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8001c14:	23c8      	movs	r3, #200	; 0xc8
 8001c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c20:	2303      	movs	r3, #3
 8001c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001c24:	230a      	movs	r3, #10
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c32:	f00a fb03 	bl	800c23c <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001c36:	bf00      	nop
 8001c38:	3728      	adds	r7, #40	; 0x28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	a0001000 	.word	0xa0001000
 8001c44:	40021000 	.word	0x40021000
 8001c48:	48000400 	.word	0x48000400

08001c4c <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001c50:	4b4d      	ldr	r3, [pc, #308]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001c52:	4a4e      	ldr	r2, [pc, #312]	; (8001d8c <MX_SAI1_Init+0x140>)
 8001c54:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001c56:	4b4c      	ldr	r3, [pc, #304]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001c5c:	4b4a      	ldr	r3, [pc, #296]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001c62:	4b49      	ldr	r3, [pc, #292]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001c64:	2240      	movs	r2, #64	; 0x40
 8001c66:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001c68:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001c6e:	4b46      	ldr	r3, [pc, #280]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001c74:	4b44      	ldr	r3, [pc, #272]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001c7a:	4b43      	ldr	r3, [pc, #268]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001c80:	4b41      	ldr	r3, [pc, #260]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001c86:	4b40      	ldr	r3, [pc, #256]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001c8c:	4b3e      	ldr	r3, [pc, #248]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001c8e:	4a40      	ldr	r2, [pc, #256]	; (8001d90 <MX_SAI1_Init+0x144>)
 8001c90:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001c92:	4b3d      	ldr	r3, [pc, #244]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001c98:	4b3b      	ldr	r3, [pc, #236]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001c9e:	4b3a      	ldr	r3, [pc, #232]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001ca4:	4b38      	ldr	r3, [pc, #224]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001caa:	4b37      	ldr	r3, [pc, #220]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001cac:	2208      	movs	r2, #8
 8001cae:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001cb0:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001cb6:	4b34      	ldr	r3, [pc, #208]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001cbc:	4b32      	ldr	r3, [pc, #200]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001cc2:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001cc8:	4b2f      	ldr	r3, [pc, #188]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001cce:	4b2e      	ldr	r3, [pc, #184]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001cd4:	4b2c      	ldr	r3, [pc, #176]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001cda:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001ce0:	4829      	ldr	r0, [pc, #164]	; (8001d88 <MX_SAI1_Init+0x13c>)
 8001ce2:	f00f fc65 	bl	80115b0 <HAL_SAI_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8001cec:	f7ff ff1a 	bl	8001b24 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8001cf0:	4b28      	ldr	r3, [pc, #160]	; (8001d94 <MX_SAI1_Init+0x148>)
 8001cf2:	4a29      	ldr	r2, [pc, #164]	; (8001d98 <MX_SAI1_Init+0x14c>)
 8001cf4:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001cf6:	4b27      	ldr	r3, [pc, #156]	; (8001d94 <MX_SAI1_Init+0x148>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001cfc:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <MX_SAI1_Init+0x148>)
 8001cfe:	2203      	movs	r2, #3
 8001d00:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8001d02:	4b24      	ldr	r3, [pc, #144]	; (8001d94 <MX_SAI1_Init+0x148>)
 8001d04:	2240      	movs	r2, #64	; 0x40
 8001d06:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001d08:	4b22      	ldr	r3, [pc, #136]	; (8001d94 <MX_SAI1_Init+0x148>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001d0e:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <MX_SAI1_Init+0x148>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001d14:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <MX_SAI1_Init+0x148>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <MX_SAI1_Init+0x148>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001d20:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <MX_SAI1_Init+0x148>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001d26:	4b1b      	ldr	r3, [pc, #108]	; (8001d94 <MX_SAI1_Init+0x148>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001d2c:	4b19      	ldr	r3, [pc, #100]	; (8001d94 <MX_SAI1_Init+0x148>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001d32:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <MX_SAI1_Init+0x148>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001d38:	4b16      	ldr	r3, [pc, #88]	; (8001d94 <MX_SAI1_Init+0x148>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8001d3e:	4b15      	ldr	r3, [pc, #84]	; (8001d94 <MX_SAI1_Init+0x148>)
 8001d40:	2208      	movs	r2, #8
 8001d42:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001d44:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <MX_SAI1_Init+0x148>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001d4a:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <MX_SAI1_Init+0x148>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001d50:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <MX_SAI1_Init+0x148>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001d56:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <MX_SAI1_Init+0x148>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001d5c:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <MX_SAI1_Init+0x148>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001d62:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <MX_SAI1_Init+0x148>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <MX_SAI1_Init+0x148>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <MX_SAI1_Init+0x148>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001d74:	4807      	ldr	r0, [pc, #28]	; (8001d94 <MX_SAI1_Init+0x148>)
 8001d76:	f00f fc1b 	bl	80115b0 <HAL_SAI_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8001d80:	f7ff fed0 	bl	8001b24 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000b20 	.word	0x20000b20
 8001d8c:	40015404 	.word	0x40015404
 8001d90:	0002ee00 	.word	0x0002ee00
 8001d94:	20000ba4 	.word	0x20000ba4
 8001d98:	40015424 	.word	0x40015424

08001d9c <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a33      	ldr	r2, [pc, #204]	; (8001e78 <HAL_SAI_MspInit+0xdc>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d135      	bne.n	8001e1a <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001dae:	4b33      	ldr	r3, [pc, #204]	; (8001e7c <HAL_SAI_MspInit+0xe0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10b      	bne.n	8001dce <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001db6:	4b32      	ldr	r3, [pc, #200]	; (8001e80 <HAL_SAI_MspInit+0xe4>)
 8001db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dba:	4a31      	ldr	r2, [pc, #196]	; (8001e80 <HAL_SAI_MspInit+0xe4>)
 8001dbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dc0:	6613      	str	r3, [r2, #96]	; 0x60
 8001dc2:	4b2f      	ldr	r3, [pc, #188]	; (8001e80 <HAL_SAI_MspInit+0xe4>)
 8001dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001dce:	4b2b      	ldr	r3, [pc, #172]	; (8001e7c <HAL_SAI_MspInit+0xe0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	4a29      	ldr	r2, [pc, #164]	; (8001e7c <HAL_SAI_MspInit+0xe0>)
 8001dd6:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8001dd8:	2354      	movs	r3, #84	; 0x54
 8001dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de4:	2300      	movs	r3, #0
 8001de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001de8:	230d      	movs	r3, #13
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4619      	mov	r1, r3
 8001df2:	4824      	ldr	r0, [pc, #144]	; (8001e84 <HAL_SAI_MspInit+0xe8>)
 8001df4:	f00a fa22 	bl	800c23c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e06:	2300      	movs	r3, #0
 8001e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001e0a:	230d      	movs	r3, #13
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	481c      	ldr	r0, [pc, #112]	; (8001e88 <HAL_SAI_MspInit+0xec>)
 8001e16:	f00a fa11 	bl	800c23c <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1b      	ldr	r2, [pc, #108]	; (8001e8c <HAL_SAI_MspInit+0xf0>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d124      	bne.n	8001e6e <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8001e24:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <HAL_SAI_MspInit+0xe0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10b      	bne.n	8001e44 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001e2c:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <HAL_SAI_MspInit+0xe4>)
 8001e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e30:	4a13      	ldr	r2, [pc, #76]	; (8001e80 <HAL_SAI_MspInit+0xe4>)
 8001e32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e36:	6613      	str	r3, [r2, #96]	; 0x60
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_SAI_MspInit+0xe4>)
 8001e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001e44:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <HAL_SAI_MspInit+0xe0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	4a0c      	ldr	r2, [pc, #48]	; (8001e7c <HAL_SAI_MspInit+0xe0>)
 8001e4c:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8001e4e:	2308      	movs	r3, #8
 8001e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001e5e:	230d      	movs	r3, #13
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	4619      	mov	r1, r3
 8001e68:	4806      	ldr	r0, [pc, #24]	; (8001e84 <HAL_SAI_MspInit+0xe8>)
 8001e6a:	f00a f9e7 	bl	800c23c <HAL_GPIO_Init>

    }
}
 8001e6e:	bf00      	nop
 8001e70:	3728      	adds	r7, #40	; 0x28
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40015404 	.word	0x40015404
 8001e7c:	20000c28 	.word	0x20000c28
 8001e80:	40021000 	.word	0x40021000
 8001e84:	48001000 	.word	0x48001000
 8001e88:	48000400 	.word	0x48000400
 8001e8c:	40015424 	.word	0x40015424

08001e90 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <MX_SDMMC1_SD_Init+0x58>)
 8001e96:	4a15      	ldr	r2, [pc, #84]	; (8001eec <MX_SDMMC1_SD_Init+0x5c>)
 8001e98:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <MX_SDMMC1_SD_Init+0x58>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_SDMMC1_SD_Init+0x58>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <MX_SDMMC1_SD_Init+0x58>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001eac:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_SDMMC1_SD_Init+0x58>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <MX_SDMMC1_SD_Init+0x58>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <MX_SDMMC1_SD_Init+0x58>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001ebe:	480a      	ldr	r0, [pc, #40]	; (8001ee8 <MX_SDMMC1_SD_Init+0x58>)
 8001ec0:	f00f fd22 	bl	8011908 <HAL_SD_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8001eca:	f7ff fe2b 	bl	8001b24 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8001ece:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_SDMMC1_SD_Init+0x58>)
 8001ed4:	f00f ff92 	bl	8011dfc <HAL_SD_ConfigWideBusOperation>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8001ede:	f7ff fe21 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000c2c 	.word	0x20000c2c
 8001eec:	40012800 	.word	0x40012800

08001ef0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	f107 0314 	add.w	r3, r7, #20
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	605a      	str	r2, [r3, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	60da      	str	r2, [r3, #12]
 8001f06:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a25      	ldr	r2, [pc, #148]	; (8001fa4 <HAL_SD_MspInit+0xb4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d144      	bne.n	8001f9c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001f12:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <HAL_SD_MspInit+0xb8>)
 8001f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f16:	4a24      	ldr	r2, [pc, #144]	; (8001fa8 <HAL_SD_MspInit+0xb8>)
 8001f18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f1c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f1e:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <HAL_SD_MspInit+0xb8>)
 8001f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2a:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <HAL_SD_MspInit+0xb8>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	4a1e      	ldr	r2, [pc, #120]	; (8001fa8 <HAL_SD_MspInit+0xb8>)
 8001f30:	f043 0308 	orr.w	r3, r3, #8
 8001f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f36:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <HAL_SD_MspInit+0xb8>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f42:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_SD_MspInit+0xb8>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	4a18      	ldr	r2, [pc, #96]	; (8001fa8 <HAL_SD_MspInit+0xb8>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4e:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <HAL_SD_MspInit+0xb8>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f66:	2303      	movs	r3, #3
 8001f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f6a:	230c      	movs	r3, #12
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	4619      	mov	r1, r3
 8001f74:	480d      	ldr	r0, [pc, #52]	; (8001fac <HAL_SD_MspInit+0xbc>)
 8001f76:	f00a f961 	bl	800c23c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 8001f7a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001f7e:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f80:	2302      	movs	r3, #2
 8001f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001f8c:	230c      	movs	r3, #12
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	4619      	mov	r1, r3
 8001f96:	4806      	ldr	r0, [pc, #24]	; (8001fb0 <HAL_SD_MspInit+0xc0>)
 8001f98:	f00a f950 	bl	800c23c <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	3728      	adds	r7, #40	; 0x28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40012800 	.word	0x40012800
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	48000c00 	.word	0x48000c00
 8001fb0:	48000800 	.word	0x48000800

08001fb4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <MX_SPI1_Init+0x74>)
 8001fba:	4a1c      	ldr	r2, [pc, #112]	; (800202c <MX_SPI1_Init+0x78>)
 8001fbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <MX_SPI1_Init+0x74>)
 8001fc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fc6:	4b18      	ldr	r3, [pc, #96]	; (8002028 <MX_SPI1_Init+0x74>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001fcc:	4b16      	ldr	r3, [pc, #88]	; (8002028 <MX_SPI1_Init+0x74>)
 8001fce:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001fd2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fd4:	4b14      	ldr	r3, [pc, #80]	; (8002028 <MX_SPI1_Init+0x74>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fda:	4b13      	ldr	r3, [pc, #76]	; (8002028 <MX_SPI1_Init+0x74>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <MX_SPI1_Init+0x74>)
 8001fe2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001fe6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <MX_SPI1_Init+0x74>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <MX_SPI1_Init+0x74>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <MX_SPI1_Init+0x74>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <MX_SPI1_Init+0x74>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002000:	4b09      	ldr	r3, [pc, #36]	; (8002028 <MX_SPI1_Init+0x74>)
 8002002:	2207      	movs	r2, #7
 8002004:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002006:	4b08      	ldr	r3, [pc, #32]	; (8002028 <MX_SPI1_Init+0x74>)
 8002008:	2200      	movs	r2, #0
 800200a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <MX_SPI1_Init+0x74>)
 800200e:	2208      	movs	r2, #8
 8002010:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002012:	4805      	ldr	r0, [pc, #20]	; (8002028 <MX_SPI1_Init+0x74>)
 8002014:	f010 fa6a 	bl	80124ec <HAL_SPI_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800201e:	f7ff fd81 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000cb0 	.word	0x20000cb0
 800202c:	40013000 	.word	0x40013000

08002030 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002034:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <MX_SPI2_Init+0x74>)
 8002036:	4a1c      	ldr	r2, [pc, #112]	; (80020a8 <MX_SPI2_Init+0x78>)
 8002038:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800203a:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <MX_SPI2_Init+0x74>)
 800203c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002040:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002042:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <MX_SPI2_Init+0x74>)
 8002044:	2200      	movs	r2, #0
 8002046:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002048:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <MX_SPI2_Init+0x74>)
 800204a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800204e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002050:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <MX_SPI2_Init+0x74>)
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <MX_SPI2_Init+0x74>)
 8002058:	2200      	movs	r2, #0
 800205a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <MX_SPI2_Init+0x74>)
 800205e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002062:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <MX_SPI2_Init+0x74>)
 8002066:	2200      	movs	r2, #0
 8002068:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <MX_SPI2_Init+0x74>)
 800206c:	2200      	movs	r2, #0
 800206e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <MX_SPI2_Init+0x74>)
 8002072:	2200      	movs	r2, #0
 8002074:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <MX_SPI2_Init+0x74>)
 8002078:	2200      	movs	r2, #0
 800207a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <MX_SPI2_Init+0x74>)
 800207e:	2207      	movs	r2, #7
 8002080:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <MX_SPI2_Init+0x74>)
 8002084:	2200      	movs	r2, #0
 8002086:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <MX_SPI2_Init+0x74>)
 800208a:	2208      	movs	r2, #8
 800208c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800208e:	4805      	ldr	r0, [pc, #20]	; (80020a4 <MX_SPI2_Init+0x74>)
 8002090:	f010 fa2c 	bl	80124ec <HAL_SPI_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800209a:	f7ff fd43 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000d14 	.word	0x20000d14
 80020a8:	40003800 	.word	0x40003800

080020ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08e      	sub	sp, #56	; 0x38
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a4b      	ldr	r2, [pc, #300]	; (80021f8 <HAL_SPI_MspInit+0x14c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d146      	bne.n	800215c <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020ce:	4b4b      	ldr	r3, [pc, #300]	; (80021fc <HAL_SPI_MspInit+0x150>)
 80020d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d2:	4a4a      	ldr	r2, [pc, #296]	; (80021fc <HAL_SPI_MspInit+0x150>)
 80020d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020d8:	6613      	str	r3, [r2, #96]	; 0x60
 80020da:	4b48      	ldr	r3, [pc, #288]	; (80021fc <HAL_SPI_MspInit+0x150>)
 80020dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020e2:	623b      	str	r3, [r7, #32]
 80020e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e6:	4b45      	ldr	r3, [pc, #276]	; (80021fc <HAL_SPI_MspInit+0x150>)
 80020e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ea:	4a44      	ldr	r2, [pc, #272]	; (80021fc <HAL_SPI_MspInit+0x150>)
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020f2:	4b42      	ldr	r3, [pc, #264]	; (80021fc <HAL_SPI_MspInit+0x150>)
 80020f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	61fb      	str	r3, [r7, #28]
 80020fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fe:	4b3f      	ldr	r3, [pc, #252]	; (80021fc <HAL_SPI_MspInit+0x150>)
 8002100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002102:	4a3e      	ldr	r2, [pc, #248]	; (80021fc <HAL_SPI_MspInit+0x150>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800210a:	4b3c      	ldr	r3, [pc, #240]	; (80021fc <HAL_SPI_MspInit+0x150>)
 800210c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	69bb      	ldr	r3, [r7, #24]
    PB4 (NJTRST)     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8002116:	2330      	movs	r3, #48	; 0x30
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211a:	2302      	movs	r3, #2
 800211c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002122:	2303      	movs	r3, #3
 8002124:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002126:	2305      	movs	r3, #5
 8002128:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212e:	4619      	mov	r1, r3
 8002130:	4833      	ldr	r0, [pc, #204]	; (8002200 <HAL_SPI_MspInit+0x154>)
 8002132:	f00a f883 	bl	800c23c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 8002136:	f248 0320 	movw	r3, #32800	; 0x8020
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002140:	2300      	movs	r3, #0
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002144:	2303      	movs	r3, #3
 8002146:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002148:	2305      	movs	r3, #5
 800214a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002150:	4619      	mov	r1, r3
 8002152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002156:	f00a f871 	bl	800c23c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800215a:	e049      	b.n	80021f0 <HAL_SPI_MspInit+0x144>
  else if(spiHandle->Instance==SPI2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a28      	ldr	r2, [pc, #160]	; (8002204 <HAL_SPI_MspInit+0x158>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d144      	bne.n	80021f0 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002166:	4b25      	ldr	r3, [pc, #148]	; (80021fc <HAL_SPI_MspInit+0x150>)
 8002168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216a:	4a24      	ldr	r2, [pc, #144]	; (80021fc <HAL_SPI_MspInit+0x150>)
 800216c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002170:	6593      	str	r3, [r2, #88]	; 0x58
 8002172:	4b22      	ldr	r3, [pc, #136]	; (80021fc <HAL_SPI_MspInit+0x150>)
 8002174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800217e:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <HAL_SPI_MspInit+0x150>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002182:	4a1e      	ldr	r2, [pc, #120]	; (80021fc <HAL_SPI_MspInit+0x150>)
 8002184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800218a:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <HAL_SPI_MspInit+0x150>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002196:	4b19      	ldr	r3, [pc, #100]	; (80021fc <HAL_SPI_MspInit+0x150>)
 8002198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219a:	4a18      	ldr	r2, [pc, #96]	; (80021fc <HAL_SPI_MspInit+0x150>)
 800219c:	f043 0302 	orr.w	r3, r3, #2
 80021a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021a2:	4b16      	ldr	r3, [pc, #88]	; (80021fc <HAL_SPI_MspInit+0x150>)
 80021a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 80021ae:	2306      	movs	r3, #6
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ba:	2303      	movs	r3, #3
 80021bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021be:	2305      	movs	r3, #5
 80021c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80021c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c6:	4619      	mov	r1, r3
 80021c8:	480f      	ldr	r0, [pc, #60]	; (8002208 <HAL_SPI_MspInit+0x15c>)
 80021ca:	f00a f837 	bl	800c23c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 80021ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021dc:	2303      	movs	r3, #3
 80021de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021e0:	2305      	movs	r3, #5
 80021e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 80021e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e8:	4619      	mov	r1, r3
 80021ea:	4805      	ldr	r0, [pc, #20]	; (8002200 <HAL_SPI_MspInit+0x154>)
 80021ec:	f00a f826 	bl	800c23c <HAL_GPIO_Init>
}
 80021f0:	bf00      	nop
 80021f2:	3738      	adds	r7, #56	; 0x38
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40013000 	.word	0x40013000
 80021fc:	40021000 	.word	0x40021000
 8002200:	48000400 	.word	0x48000400
 8002204:	40003800 	.word	0x40003800
 8002208:	48002000 	.word	0x48002000

0800220c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <HAL_MspInit+0x44>)
 8002214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002216:	4a0e      	ldr	r2, [pc, #56]	; (8002250 <HAL_MspInit+0x44>)
 8002218:	f043 0301 	orr.w	r3, r3, #1
 800221c:	6613      	str	r3, [r2, #96]	; 0x60
 800221e:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <HAL_MspInit+0x44>)
 8002220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_MspInit+0x44>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	4a08      	ldr	r2, [pc, #32]	; (8002250 <HAL_MspInit+0x44>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002234:	6593      	str	r3, [r2, #88]	; 0x58
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_MspInit+0x44>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40021000 	.word	0x40021000

08002254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002258:	e7fe      	b.n	8002258 <NMI_Handler+0x4>

0800225a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800225a:	b480      	push	{r7}
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800225e:	e7fe      	b.n	800225e <HardFault_Handler+0x4>

08002260 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002264:	e7fe      	b.n	8002264 <MemManage_Handler+0x4>

08002266 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800226a:	e7fe      	b.n	800226a <BusFault_Handler+0x4>

0800226c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002270:	e7fe      	b.n	8002270 <UsageFault_Handler+0x4>

08002272 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002272:	b480      	push	{r7}
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022a0:	f008 fcb6 	bl	800ac10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MFX_IRQ_OUT_Pin);
 80022ac:	2020      	movs	r0, #32
 80022ae:	f00a fa61 	bl	800c774 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_DOWN_Pin);
 80022ba:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80022be:	f00a fa59 	bl	800c774 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_RIGHT_Pin);
 80022c2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80022c6:	f00a fa55 	bl	800c774 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_Pin);
 80022ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80022ce:	f00a fa51 	bl	800c774 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <OTG_FS_IRQHandler+0x10>)
 80022de:	f00b fd57 	bl	800dd90 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20002698 	.word	0x20002698

080022ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	e00a      	b.n	8002314 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022fe:	f3af 8000 	nop.w
 8002302:	4601      	mov	r1, r0
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	60ba      	str	r2, [r7, #8]
 800230a:	b2ca      	uxtb	r2, r1
 800230c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	3301      	adds	r3, #1
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	429a      	cmp	r2, r3
 800231a:	dbf0      	blt.n	80022fe <_read+0x12>
	}

return len;
 800231c:	687b      	ldr	r3, [r7, #4]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	e009      	b.n	800234c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	60ba      	str	r2, [r7, #8]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	3301      	adds	r3, #1
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	429a      	cmp	r2, r3
 8002352:	dbf1      	blt.n	8002338 <_write+0x12>
	}
	return len;
 8002354:	687b      	ldr	r3, [r7, #4]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <_close>:

int _close(int file)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
	return -1;
 8002366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002386:	605a      	str	r2, [r3, #4]
	return 0;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <_isatty>:

int _isatty(int file)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
	return 1;
 800239e:	2301      	movs	r3, #1
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
	return 0;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023d0:	4a14      	ldr	r2, [pc, #80]	; (8002424 <_sbrk+0x5c>)
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <_sbrk+0x60>)
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023dc:	4b13      	ldr	r3, [pc, #76]	; (800242c <_sbrk+0x64>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d102      	bne.n	80023ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <_sbrk+0x64>)
 80023e6:	4a12      	ldr	r2, [pc, #72]	; (8002430 <_sbrk+0x68>)
 80023e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <_sbrk+0x64>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d207      	bcs.n	8002408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023f8:	f016 f988 	bl	801870c <__errno>
 80023fc:	4603      	mov	r3, r0
 80023fe:	220c      	movs	r2, #12
 8002400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002406:	e009      	b.n	800241c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <_sbrk+0x64>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800240e:	4b07      	ldr	r3, [pc, #28]	; (800242c <_sbrk+0x64>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	4a05      	ldr	r2, [pc, #20]	; (800242c <_sbrk+0x64>)
 8002418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800241a:	68fb      	ldr	r3, [r7, #12]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20050000 	.word	0x20050000
 8002428:	00000400 	.word	0x00000400
 800242c:	20000d78 	.word	0x20000d78
 8002430:	20002dd8 	.word	0x20002dd8

08002434 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <SystemInit+0x20>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243e:	4a05      	ldr	r2, [pc, #20]	; (8002454 <SystemInit+0x20>)
 8002440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002468:	4b14      	ldr	r3, [pc, #80]	; (80024bc <MX_TIM6_Init+0x64>)
 800246a:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <MX_TIM6_Init+0x68>)
 800246c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 800246e:	4b13      	ldr	r3, [pc, #76]	; (80024bc <MX_TIM6_Init+0x64>)
 8002470:	2263      	movs	r2, #99	; 0x63
 8002472:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <MX_TIM6_Init+0x64>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19200-1;
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <MX_TIM6_Init+0x64>)
 800247c:	f644 22ff 	movw	r2, #19199	; 0x4aff
 8002480:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002482:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <MX_TIM6_Init+0x64>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002488:	480c      	ldr	r0, [pc, #48]	; (80024bc <MX_TIM6_Init+0x64>)
 800248a:	f010 f91a 	bl	80126c2 <HAL_TIM_Base_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002494:	f7ff fb46 	bl	8001b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002498:	2300      	movs	r3, #0
 800249a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80024a0:	1d3b      	adds	r3, r7, #4
 80024a2:	4619      	mov	r1, r3
 80024a4:	4805      	ldr	r0, [pc, #20]	; (80024bc <MX_TIM6_Init+0x64>)
 80024a6:	f011 f871 	bl	801358c <HAL_TIMEx_MasterConfigSynchronization>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80024b0:	f7ff fb38 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000d7c 	.word	0x20000d7c
 80024c0:	40001000 	.word	0x40001000

080024c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <HAL_TIM_Base_MspInit+0x38>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d10b      	bne.n	80024ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80024d6:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_TIM_Base_MspInit+0x3c>)
 80024d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024da:	4a09      	ldr	r2, [pc, #36]	; (8002500 <HAL_TIM_Base_MspInit+0x3c>)
 80024dc:	f043 0310 	orr.w	r3, r3, #16
 80024e0:	6593      	str	r3, [r2, #88]	; 0x58
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <HAL_TIM_Base_MspInit+0x3c>)
 80024e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80024ee:	bf00      	nop
 80024f0:	3714      	adds	r7, #20
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40001000 	.word	0x40001000
 8002500:	40021000 	.word	0x40021000

08002504 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <MX_LPUART1_UART_Init+0x50>)
 800250a:	4a13      	ldr	r2, [pc, #76]	; (8002558 <MX_LPUART1_UART_Init+0x54>)
 800250c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800250e:	4b11      	ldr	r3, [pc, #68]	; (8002554 <MX_LPUART1_UART_Init+0x50>)
 8002510:	4a12      	ldr	r2, [pc, #72]	; (800255c <MX_LPUART1_UART_Init+0x58>)
 8002512:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <MX_LPUART1_UART_Init+0x50>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800251a:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <MX_LPUART1_UART_Init+0x50>)
 800251c:	2200      	movs	r2, #0
 800251e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002520:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <MX_LPUART1_UART_Init+0x50>)
 8002522:	2200      	movs	r2, #0
 8002524:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002526:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <MX_LPUART1_UART_Init+0x50>)
 8002528:	220c      	movs	r2, #12
 800252a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <MX_LPUART1_UART_Init+0x50>)
 800252e:	2200      	movs	r2, #0
 8002530:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <MX_LPUART1_UART_Init+0x50>)
 8002534:	2200      	movs	r2, #0
 8002536:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002538:	4b06      	ldr	r3, [pc, #24]	; (8002554 <MX_LPUART1_UART_Init+0x50>)
 800253a:	2200      	movs	r2, #0
 800253c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800253e:	4805      	ldr	r0, [pc, #20]	; (8002554 <MX_LPUART1_UART_Init+0x50>)
 8002540:	f011 f8ac 	bl	801369c <HAL_UART_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_LPUART1_UART_Init+0x4a>
  {
    Error_Handler();
 800254a:	f7ff faeb 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000dc8 	.word	0x20000dc8
 8002558:	40008000 	.word	0x40008000
 800255c:	00033324 	.word	0x00033324

08002560 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002564:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <MX_USART1_UART_Init+0x58>)
 8002566:	4a15      	ldr	r2, [pc, #84]	; (80025bc <MX_USART1_UART_Init+0x5c>)
 8002568:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800256a:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <MX_USART1_UART_Init+0x58>)
 800256c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002570:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <MX_USART1_UART_Init+0x58>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <MX_USART1_UART_Init+0x58>)
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <MX_USART1_UART_Init+0x58>)
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <MX_USART1_UART_Init+0x58>)
 8002586:	220c      	movs	r2, #12
 8002588:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <MX_USART1_UART_Init+0x58>)
 800258c:	2200      	movs	r2, #0
 800258e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002590:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <MX_USART1_UART_Init+0x58>)
 8002592:	2200      	movs	r2, #0
 8002594:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002596:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <MX_USART1_UART_Init+0x58>)
 8002598:	2200      	movs	r2, #0
 800259a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <MX_USART1_UART_Init+0x58>)
 800259e:	2200      	movs	r2, #0
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025a2:	4805      	ldr	r0, [pc, #20]	; (80025b8 <MX_USART1_UART_Init+0x58>)
 80025a4:	f011 f87a 	bl	801369c <HAL_UART_Init>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80025ae:	f7ff fab9 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000e4c 	.word	0x20000e4c
 80025bc:	40013800 	.word	0x40013800

080025c0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025c4:	4b14      	ldr	r3, [pc, #80]	; (8002618 <MX_USART2_UART_Init+0x58>)
 80025c6:	4a15      	ldr	r2, [pc, #84]	; (800261c <MX_USART2_UART_Init+0x5c>)
 80025c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025ca:	4b13      	ldr	r3, [pc, #76]	; (8002618 <MX_USART2_UART_Init+0x58>)
 80025cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <MX_USART2_UART_Init+0x58>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025d8:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <MX_USART2_UART_Init+0x58>)
 80025da:	2200      	movs	r2, #0
 80025dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025de:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <MX_USART2_UART_Init+0x58>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <MX_USART2_UART_Init+0x58>)
 80025e6:	220c      	movs	r2, #12
 80025e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <MX_USART2_UART_Init+0x58>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025f0:	4b09      	ldr	r3, [pc, #36]	; (8002618 <MX_USART2_UART_Init+0x58>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025f6:	4b08      	ldr	r3, [pc, #32]	; (8002618 <MX_USART2_UART_Init+0x58>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <MX_USART2_UART_Init+0x58>)
 80025fe:	2200      	movs	r2, #0
 8002600:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002602:	4805      	ldr	r0, [pc, #20]	; (8002618 <MX_USART2_UART_Init+0x58>)
 8002604:	f011 f84a 	bl	801369c <HAL_UART_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800260e:	f7ff fa89 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000ed0 	.word	0x20000ed0
 800261c:	40004400 	.word	0x40004400

08002620 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b0b2      	sub	sp, #200	; 0xc8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002628:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	60da      	str	r2, [r3, #12]
 8002636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002638:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800263c:	228c      	movs	r2, #140	; 0x8c
 800263e:	2100      	movs	r1, #0
 8002640:	4618      	mov	r0, r3
 8002642:	f016 f89b 	bl	801877c <memset>
  if(uartHandle->Instance==LPUART1)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a86      	ldr	r2, [pc, #536]	; (8002864 <HAL_UART_MspInit+0x244>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d13e      	bne.n	80026ce <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002650:	2320      	movs	r3, #32
 8002652:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002654:	2300      	movs	r3, #0
 8002656:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002658:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800265c:	4618      	mov	r0, r3
 800265e:	f00d fc13 	bl	800fe88 <HAL_RCCEx_PeriphCLKConfig>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002668:	f7ff fa5c 	bl	8001b24 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800266c:	4b7e      	ldr	r3, [pc, #504]	; (8002868 <HAL_UART_MspInit+0x248>)
 800266e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002670:	4a7d      	ldr	r2, [pc, #500]	; (8002868 <HAL_UART_MspInit+0x248>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002678:	4b7b      	ldr	r3, [pc, #492]	; (8002868 <HAL_UART_MspInit+0x248>)
 800267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002684:	4b78      	ldr	r3, [pc, #480]	; (8002868 <HAL_UART_MspInit+0x248>)
 8002686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002688:	4a77      	ldr	r2, [pc, #476]	; (8002868 <HAL_UART_MspInit+0x248>)
 800268a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800268e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002690:	4b75      	ldr	r3, [pc, #468]	; (8002868 <HAL_UART_MspInit+0x248>)
 8002692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002698:	623b      	str	r3, [r7, #32]
 800269a:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableVddIO2();
 800269c:	f00c fc9c 	bl	800efd8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 80026a0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80026a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b4:	2303      	movs	r3, #3
 80026b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80026ba:	2308      	movs	r3, #8
 80026bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80026c4:	4619      	mov	r1, r3
 80026c6:	4869      	ldr	r0, [pc, #420]	; (800286c <HAL_UART_MspInit+0x24c>)
 80026c8:	f009 fdb8 	bl	800c23c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026cc:	e0c6      	b.n	800285c <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a67      	ldr	r2, [pc, #412]	; (8002870 <HAL_UART_MspInit+0x250>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d15f      	bne.n	8002798 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026d8:	2301      	movs	r3, #1
 80026da:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80026dc:	2300      	movs	r3, #0
 80026de:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026e4:	4618      	mov	r0, r3
 80026e6:	f00d fbcf 	bl	800fe88 <HAL_RCCEx_PeriphCLKConfig>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80026f0:	f7ff fa18 	bl	8001b24 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80026f4:	4b5c      	ldr	r3, [pc, #368]	; (8002868 <HAL_UART_MspInit+0x248>)
 80026f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f8:	4a5b      	ldr	r2, [pc, #364]	; (8002868 <HAL_UART_MspInit+0x248>)
 80026fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026fe:	6613      	str	r3, [r2, #96]	; 0x60
 8002700:	4b59      	ldr	r3, [pc, #356]	; (8002868 <HAL_UART_MspInit+0x248>)
 8002702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800270c:	4b56      	ldr	r3, [pc, #344]	; (8002868 <HAL_UART_MspInit+0x248>)
 800270e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002710:	4a55      	ldr	r2, [pc, #340]	; (8002868 <HAL_UART_MspInit+0x248>)
 8002712:	f043 0302 	orr.w	r3, r3, #2
 8002716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002718:	4b53      	ldr	r3, [pc, #332]	; (8002868 <HAL_UART_MspInit+0x248>)
 800271a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	61bb      	str	r3, [r7, #24]
 8002722:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002724:	4b50      	ldr	r3, [pc, #320]	; (8002868 <HAL_UART_MspInit+0x248>)
 8002726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002728:	4a4f      	ldr	r2, [pc, #316]	; (8002868 <HAL_UART_MspInit+0x248>)
 800272a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800272e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002730:	4b4d      	ldr	r3, [pc, #308]	; (8002868 <HAL_UART_MspInit+0x248>)
 8002732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 800273c:	f00c fc4c 	bl	800efd8 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 8002740:	2340      	movs	r3, #64	; 0x40
 8002742:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002746:	2302      	movs	r3, #2
 8002748:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002752:	2303      	movs	r3, #3
 8002754:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002758:	2307      	movs	r3, #7
 800275a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 800275e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002762:	4619      	mov	r1, r3
 8002764:	4843      	ldr	r0, [pc, #268]	; (8002874 <HAL_UART_MspInit+0x254>)
 8002766:	f009 fd69 	bl	800c23c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 800276a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800276e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002772:	2302      	movs	r3, #2
 8002774:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277e:	2303      	movs	r3, #3
 8002780:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002784:	2307      	movs	r3, #7
 8002786:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800278a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800278e:	4619      	mov	r1, r3
 8002790:	4836      	ldr	r0, [pc, #216]	; (800286c <HAL_UART_MspInit+0x24c>)
 8002792:	f009 fd53 	bl	800c23c <HAL_GPIO_Init>
}
 8002796:	e061      	b.n	800285c <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART2)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a36      	ldr	r2, [pc, #216]	; (8002878 <HAL_UART_MspInit+0x258>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d15c      	bne.n	800285c <HAL_UART_MspInit+0x23c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80027a2:	2302      	movs	r3, #2
 80027a4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80027a6:	2300      	movs	r3, #0
 80027a8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027ae:	4618      	mov	r0, r3
 80027b0:	f00d fb6a 	bl	800fe88 <HAL_RCCEx_PeriphCLKConfig>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_UART_MspInit+0x19e>
      Error_Handler();
 80027ba:	f7ff f9b3 	bl	8001b24 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027be:	4b2a      	ldr	r3, [pc, #168]	; (8002868 <HAL_UART_MspInit+0x248>)
 80027c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c2:	4a29      	ldr	r2, [pc, #164]	; (8002868 <HAL_UART_MspInit+0x248>)
 80027c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c8:	6593      	str	r3, [r2, #88]	; 0x58
 80027ca:	4b27      	ldr	r3, [pc, #156]	; (8002868 <HAL_UART_MspInit+0x248>)
 80027cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027d6:	4b24      	ldr	r3, [pc, #144]	; (8002868 <HAL_UART_MspInit+0x248>)
 80027d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027da:	4a23      	ldr	r2, [pc, #140]	; (8002868 <HAL_UART_MspInit+0x248>)
 80027dc:	f043 0308 	orr.w	r3, r3, #8
 80027e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027e2:	4b21      	ldr	r3, [pc, #132]	; (8002868 <HAL_UART_MspInit+0x248>)
 80027e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ee:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <HAL_UART_MspInit+0x248>)
 80027f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f2:	4a1d      	ldr	r2, [pc, #116]	; (8002868 <HAL_UART_MspInit+0x248>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027fa:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_UART_MspInit+0x248>)
 80027fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8002806:	2340      	movs	r3, #64	; 0x40
 8002808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002818:	2303      	movs	r3, #3
 800281a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800281e:	2307      	movs	r3, #7
 8002820:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8002824:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002828:	4619      	mov	r1, r3
 800282a:	4814      	ldr	r0, [pc, #80]	; (800287c <HAL_UART_MspInit+0x25c>)
 800282c:	f009 fd06 	bl	800c23c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8002830:	2304      	movs	r3, #4
 8002832:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002836:	2302      	movs	r3, #2
 8002838:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002842:	2303      	movs	r3, #3
 8002844:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002848:	2307      	movs	r3, #7
 800284a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 800284e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002852:	4619      	mov	r1, r3
 8002854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002858:	f009 fcf0 	bl	800c23c <HAL_GPIO_Init>
}
 800285c:	bf00      	nop
 800285e:	37c8      	adds	r7, #200	; 0xc8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40008000 	.word	0x40008000
 8002868:	40021000 	.word	0x40021000
 800286c:	48001800 	.word	0x48001800
 8002870:	40013800 	.word	0x40013800
 8002874:	48000400 	.word	0x48000400
 8002878:	40004400 	.word	0x40004400
 800287c:	48000c00 	.word	0x48000c00

08002880 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af02      	add	r7, sp, #8
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	330a      	adds	r3, #10
 8002890:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800289e:	b299      	uxth	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	4613      	mov	r3, r2
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	f00a f838 	bl	800c920 <HAL_I2C_Master_Transmit>
 80028b0:	4603      	mov	r3, r0
 80028b2:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80028b4:	693b      	ldr	r3, [r7, #16]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80028be:	b580      	push	{r7, lr}
 80028c0:	b088      	sub	sp, #32
 80028c2:	af02      	add	r7, sp, #8
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	330a      	adds	r3, #10
 80028ce:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	b299      	uxth	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	4613      	mov	r3, r2
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	f00a f90a 	bl	800cb08 <HAL_I2C_Master_Receive>
 80028f4:	4603      	mov	r3, r0
 80028f6:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80028f8:	693b      	ldr	r3, [r7, #16]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	460b      	mov	r3, r1
 8002912:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002914:	2300      	movs	r3, #0
 8002916:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	2b3f      	cmp	r3, #63	; 0x3f
 800291c:	d902      	bls.n	8002924 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800291e:	f06f 0303 	mvn.w	r3, #3
 8002922:	e016      	b.n	8002952 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8002924:	4a0d      	ldr	r2, [pc, #52]	; (800295c <VL53L0X_WriteMulti+0x58>)
 8002926:	7afb      	ldrb	r3, [r7, #11]
 8002928:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	480c      	ldr	r0, [pc, #48]	; (8002960 <VL53L0X_WriteMulti+0x5c>)
 8002930:	f015 ff16 	bl	8018760 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	3301      	adds	r3, #1
 8002938:	461a      	mov	r2, r3
 800293a:	4908      	ldr	r1, [pc, #32]	; (800295c <VL53L0X_WriteMulti+0x58>)
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f7ff ff9f 	bl	8002880 <_I2CWrite>
 8002942:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800294a:	23ec      	movs	r3, #236	; 0xec
 800294c:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800294e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000f54 	.word	0x20000f54
 8002960:	20000f55 	.word	0x20000f55

08002964 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	460b      	mov	r3, r1
 8002972:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002974:	2300      	movs	r3, #0
 8002976:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8002978:	f107 030b 	add.w	r3, r7, #11
 800297c:	2201      	movs	r2, #1
 800297e:	4619      	mov	r1, r3
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f7ff ff7d 	bl	8002880 <_I2CWrite>
 8002986:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800298e:	23ec      	movs	r3, #236	; 0xec
 8002990:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002992:	e00c      	b.n	80029ae <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f7ff ff90 	bl	80028be <_I2CRead>
 800299e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d002      	beq.n	80029ac <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80029a6:	23ec      	movs	r3, #236	; 0xec
 80029a8:	75fb      	strb	r3, [r7, #23]
 80029aa:	e000      	b.n	80029ae <VL53L0X_ReadMulti+0x4a>
    }
done:
 80029ac:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80029ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	70fb      	strb	r3, [r7, #3]
 80029c8:	4613      	mov	r3, r2
 80029ca:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80029d0:	4a0b      	ldr	r2, [pc, #44]	; (8002a00 <VL53L0X_WrByte+0x44>)
 80029d2:	78fb      	ldrb	r3, [r7, #3]
 80029d4:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 80029d6:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <VL53L0X_WrByte+0x44>)
 80029d8:	78bb      	ldrb	r3, [r7, #2]
 80029da:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80029dc:	2202      	movs	r2, #2
 80029de:	4908      	ldr	r1, [pc, #32]	; (8002a00 <VL53L0X_WrByte+0x44>)
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff ff4d 	bl	8002880 <_I2CWrite>
 80029e6:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80029ee:	23ec      	movs	r3, #236	; 0xec
 80029f0:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80029f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000f54 	.word	0x20000f54

08002a04 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	70fb      	strb	r3, [r7, #3]
 8002a10:	4613      	mov	r3, r2
 8002a12:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a14:	2300      	movs	r3, #0
 8002a16:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8002a18:	4a0e      	ldr	r2, [pc, #56]	; (8002a54 <VL53L0X_WrWord+0x50>)
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8002a1e:	883b      	ldrh	r3, [r7, #0]
 8002a20:	0a1b      	lsrs	r3, r3, #8
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <VL53L0X_WrWord+0x50>)
 8002a28:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8002a2a:	883b      	ldrh	r3, [r7, #0]
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <VL53L0X_WrWord+0x50>)
 8002a30:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8002a32:	2203      	movs	r2, #3
 8002a34:	4907      	ldr	r1, [pc, #28]	; (8002a54 <VL53L0X_WrWord+0x50>)
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff ff22 	bl	8002880 <_I2CWrite>
 8002a3c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002a44:	23ec      	movs	r3, #236	; 0xec
 8002a46:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8002a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000f54 	.word	0x20000f54

08002a58 <VL53L0X_WrDWord>:

VL53L0X_Error VL53L0X_WrDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t data) {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	460b      	mov	r3, r1
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    _I2CBuffer[0] = index;
 8002a6a:	4a13      	ldr	r2, [pc, #76]	; (8002ab8 <VL53L0X_WrDWord+0x60>)
 8002a6c:	7afb      	ldrb	r3, [r7, #11]
 8002a6e:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = (data >> 24) & 0xFF;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	0e1b      	lsrs	r3, r3, #24
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <VL53L0X_WrDWord+0x60>)
 8002a78:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 16) & 0xFF;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <VL53L0X_WrDWord+0x60>)
 8002a82:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 8)  & 0xFF;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	0a1b      	lsrs	r3, r3, #8
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <VL53L0X_WrDWord+0x60>)
 8002a8c:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 0 ) & 0xFF;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <VL53L0X_WrDWord+0x60>)
 8002a94:	711a      	strb	r2, [r3, #4]
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 5);
 8002a96:	2205      	movs	r2, #5
 8002a98:	4907      	ldr	r1, [pc, #28]	; (8002ab8 <VL53L0X_WrDWord+0x60>)
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f7ff fef0 	bl	8002880 <_I2CWrite>
 8002aa0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <VL53L0X_WrDWord+0x54>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002aa8:	23ec      	movs	r3, #236	; 0xec
 8002aaa:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8002aac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3718      	adds	r7, #24
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000f54 	.word	0x20000f54

08002abc <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	4608      	mov	r0, r1
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4603      	mov	r3, r0
 8002acc:	70fb      	strb	r3, [r7, #3]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	70bb      	strb	r3, [r7, #2]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8002ada:	f107 020e 	add.w	r2, r7, #14
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f81e 	bl	8002b24 <VL53L0X_RdByte>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8002aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d110      	bne.n	8002b16 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8002af4:	7bba      	ldrb	r2, [r7, #14]
 8002af6:	78bb      	ldrb	r3, [r7, #2]
 8002af8:	4013      	ands	r3, r2
 8002afa:	b2da      	uxtb	r2, r3
 8002afc:	787b      	ldrb	r3, [r7, #1]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8002b04:	7bba      	ldrb	r2, [r7, #14]
 8002b06:	78fb      	ldrb	r3, [r7, #3]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff ff56 	bl	80029bc <VL53L0X_WrByte>
 8002b10:	4603      	mov	r3, r0
 8002b12:	73fb      	strb	r3, [r7, #15]
 8002b14:	e000      	b.n	8002b18 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8002b16:	bf00      	nop
done:
    return Status;
 8002b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002b32:	2300      	movs	r3, #0
 8002b34:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8002b36:	f107 030b 	add.w	r3, r7, #11
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f7ff fe9e 	bl	8002880 <_I2CWrite>
 8002b44:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002b4c:	23ec      	movs	r3, #236	; 0xec
 8002b4e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002b50:	e00c      	b.n	8002b6c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8002b52:	2201      	movs	r2, #1
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f7ff feb1 	bl	80028be <_I2CRead>
 8002b5c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002b64:	23ec      	movs	r3, #236	; 0xec
 8002b66:	75fb      	strb	r3, [r7, #23]
 8002b68:	e000      	b.n	8002b6c <VL53L0X_RdByte+0x48>
    }
done:
 8002b6a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8002b6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	460b      	mov	r3, r1
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8002b8a:	f107 030b 	add.w	r3, r7, #11
 8002b8e:	2201      	movs	r2, #1
 8002b90:	4619      	mov	r1, r3
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f7ff fe74 	bl	8002880 <_I2CWrite>
 8002b98:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002ba0:	23ec      	movs	r3, #236	; 0xec
 8002ba2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002ba4:	e017      	b.n	8002bd6 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	490e      	ldr	r1, [pc, #56]	; (8002be4 <VL53L0X_RdWord+0x6c>)
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f7ff fe87 	bl	80028be <_I2CRead>
 8002bb0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002bb8:	23ec      	movs	r3, #236	; 0xec
 8002bba:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002bbc:	e00b      	b.n	8002bd6 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8002bbe:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <VL53L0X_RdWord+0x6c>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	021b      	lsls	r3, r3, #8
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <VL53L0X_RdWord+0x6c>)
 8002bca:	785b      	ldrb	r3, [r3, #1]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8002bd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000f54 	.word	0x20000f54

08002be8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8002bfa:	f107 030b 	add.w	r3, r7, #11
 8002bfe:	2201      	movs	r2, #1
 8002c00:	4619      	mov	r1, r3
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f7ff fe3c 	bl	8002880 <_I2CWrite>
 8002c08:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002c10:	23ec      	movs	r3, #236	; 0xec
 8002c12:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002c14:	e01b      	b.n	8002c4e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8002c16:	2204      	movs	r2, #4
 8002c18:	4910      	ldr	r1, [pc, #64]	; (8002c5c <VL53L0X_RdDWord+0x74>)
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f7ff fe4f 	bl	80028be <_I2CRead>
 8002c20:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002c28:	23ec      	movs	r3, #236	; 0xec
 8002c2a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002c2c:	e00f      	b.n	8002c4e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8002c2e:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <VL53L0X_RdDWord+0x74>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	061a      	lsls	r2, r3, #24
 8002c34:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <VL53L0X_RdDWord+0x74>)
 8002c36:	785b      	ldrb	r3, [r3, #1]
 8002c38:	041b      	lsls	r3, r3, #16
 8002c3a:	441a      	add	r2, r3
 8002c3c:	4b07      	ldr	r3, [pc, #28]	; (8002c5c <VL53L0X_RdDWord+0x74>)
 8002c3e:	789b      	ldrb	r3, [r3, #2]
 8002c40:	021b      	lsls	r3, r3, #8
 8002c42:	4413      	add	r3, r2
 8002c44:	4a05      	ldr	r2, [pc, #20]	; (8002c5c <VL53L0X_RdDWord+0x74>)
 8002c46:	78d2      	ldrb	r2, [r2, #3]
 8002c48:	441a      	add	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8002c4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000f54 	.word	0x20000f54

08002c60 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8002c6c:	2002      	movs	r0, #2
 8002c6e:	f007 ffef 	bl	800ac50 <HAL_Delay>
    return status;
 8002c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cb8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c84:	f7ff fbd6 	bl	8002434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c88:	480c      	ldr	r0, [pc, #48]	; (8002cbc <LoopForever+0x6>)
  ldr r1, =_edata
 8002c8a:	490d      	ldr	r1, [pc, #52]	; (8002cc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c8c:	4a0d      	ldr	r2, [pc, #52]	; (8002cc4 <LoopForever+0xe>)
  movs r3, #0
 8002c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c90:	e002      	b.n	8002c98 <LoopCopyDataInit>

08002c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c96:	3304      	adds	r3, #4

08002c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c9c:	d3f9      	bcc.n	8002c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ca0:	4c0a      	ldr	r4, [pc, #40]	; (8002ccc <LoopForever+0x16>)
  movs r3, #0
 8002ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ca4:	e001      	b.n	8002caa <LoopFillZerobss>

08002ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ca8:	3204      	adds	r2, #4

08002caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cac:	d3fb      	bcc.n	8002ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cae:	f015 fd33 	bl	8018718 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cb2:	f7fe fcb3 	bl	800161c <main>

08002cb6 <LoopForever>:

LoopForever:
    b LoopForever
 8002cb6:	e7fe      	b.n	8002cb6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002cb8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cc0:	2000073c 	.word	0x2000073c
  ldr r2, =_sidata
 8002cc4:	0801b930 	.word	0x0801b930
  ldr r2, =_sbss
 8002cc8:	2000073c 	.word	0x2000073c
  ldr r4, =_ebss
 8002ccc:	20002dd4 	.word	0x20002dd4

08002cd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cd0:	e7fe      	b.n	8002cd0 <ADC1_2_IRQHandler>
	...

08002cd4 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 f90d 	bl	8002f00 <ft6x06_GetInstance>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	2bff      	cmp	r3, #255	; 0xff
 8002cee:	d10e      	bne.n	8002d0e <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f000 f905 	bl	8002f00 <ft6x06_GetInstance>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8002cfa:	7bbb      	ldrb	r3, [r7, #14]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d806      	bhi.n	8002d0e <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8002d00:	7bbb      	ldrb	r3, [r7, #14]
 8002d02:	88fa      	ldrh	r2, [r7, #6]
 8002d04:	b2d1      	uxtb	r1, r2
 8002d06:	4a04      	ldr	r2, [pc, #16]	; (8002d18 <ft6x06_Init+0x44>)
 8002d08:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8002d0a:	f006 fee7 	bl	8009adc <TS_IO_Init>
    }
  }
}
 8002d0e:	bf00      	nop
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	20000f94 	.word	0x20000f94

08002d1c <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	4603      	mov	r3, r0
 8002d3a:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8002d3c:	f006 fece 	bl	8009adc <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	21a8      	movs	r1, #168	; 0xa8
 8002d46:	4618      	mov	r0, r3
 8002d48:	f006 ff0e 	bl	8009b68 <TS_IO_Read>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	b29b      	uxth	r3, r3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 f8bc 	bl	8002ee2 <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8002d6a:	88fb      	ldrh	r3, [r7, #6]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 f88d 	bl	8002e8c <ft6x06_TS_DisableIT>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2102      	movs	r1, #2
 8002d90:	4618      	mov	r0, r3
 8002d92:	f006 fee9 	bl	8009b68 <TS_IO_Read>
 8002d96:	4603      	mov	r3, r0
 8002d98:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f003 030f 	and.w	r3, r3, #15
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8002dae:	2300      	movs	r3, #0
 8002db0:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <ft6x06_TS_DetectTouch+0x50>)
 8002db8:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 8002dba:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <ft6x06_TS_DetectTouch+0x50>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	b2db      	uxtb	r3, r3
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20000f98 	.word	0x20000f98

08002dd0 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8002de2:	4b1f      	ldr	r3, [pc, #124]	; (8002e60 <ft6x06_TS_GetXY+0x90>)
 8002de4:	789a      	ldrb	r2, [r3, #2]
 8002de6:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <ft6x06_TS_GetXY+0x90>)
 8002de8:	785b      	ldrb	r3, [r3, #1]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d234      	bcs.n	8002e58 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 8002dee:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <ft6x06_TS_GetXY+0x90>)
 8002df0:	789b      	ldrb	r3, [r3, #2]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <ft6x06_TS_GetXY+0x2c>
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d003      	beq.n	8002e02 <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8002dfa:	e005      	b.n	8002e08 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	75fb      	strb	r3, [r7, #23]
      break;
 8002e00:	e002      	b.n	8002e08 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8002e02:	2309      	movs	r3, #9
 8002e04:	75fb      	strb	r3, [r7, #23]
      break;
 8002e06:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8002e08:	89fb      	ldrh	r3, [r7, #14]
 8002e0a:	b2d8      	uxtb	r0, r3
 8002e0c:	f107 0210 	add.w	r2, r7, #16
 8002e10:	7df9      	ldrb	r1, [r7, #23]
 8002e12:	2304      	movs	r3, #4
 8002e14:	f006 febe 	bl	8009b94 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8002e18:	7c3b      	ldrb	r3, [r7, #16]
 8002e1a:	021b      	lsls	r3, r3, #8
 8002e1c:	b21b      	sxth	r3, r3
 8002e1e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002e22:	b21a      	sxth	r2, r3
 8002e24:	7c7b      	ldrb	r3, [r7, #17]
 8002e26:	b21b      	sxth	r3, r3
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	b21b      	sxth	r3, r3
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8002e32:	7cbb      	ldrb	r3, [r7, #18]
 8002e34:	021b      	lsls	r3, r3, #8
 8002e36:	b21b      	sxth	r3, r3
 8002e38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002e3c:	b21a      	sxth	r2, r3
 8002e3e:	7cfb      	ldrb	r3, [r7, #19]
 8002e40:	b21b      	sxth	r3, r3
 8002e42:	4313      	orrs	r3, r2
 8002e44:	b21b      	sxth	r3, r3
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8002e4c:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <ft6x06_TS_GetXY+0x90>)
 8002e4e:	789b      	ldrb	r3, [r3, #2]
 8002e50:	3301      	adds	r3, #1
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	4b02      	ldr	r3, [pc, #8]	; (8002e60 <ft6x06_TS_GetXY+0x90>)
 8002e56:	709a      	strb	r2, [r3, #2]
  }
}
 8002e58:	bf00      	nop
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000f98 	.word	0x20000f98

08002e64 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8002e72:	2301      	movs	r3, #1
 8002e74:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	7bfa      	ldrb	r2, [r7, #15]
 8002e7c:	21a4      	movs	r1, #164	; 0xa4
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f006 fe58 	bl	8009b34 <TS_IO_Write>
}
 8002e84:	bf00      	nop
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	7bfa      	ldrb	r2, [r7, #15]
 8002ea4:	21a4      	movs	r1, #164	; 0xa4
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f006 fe44 	bl	8009b34 <TS_IO_Write>
}
 8002eac:	bf00      	nop
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b085      	sub	sp, #20
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	4603      	mov	r3, r0
 8002eea:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8002f0e:	2300      	movs	r3, #0
 8002f10:	73fb      	strb	r3, [r7, #15]
 8002f12:	e00b      	b.n	8002f2c <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <ft6x06_GetInstance+0x40>)
 8002f18:	5cd3      	ldrb	r3, [r2, r3]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d101      	bne.n	8002f26 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	e006      	b.n	8002f34 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	73fb      	strb	r3, [r7, #15]
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d9f0      	bls.n	8002f14 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002f32:	23ff      	movs	r3, #255	; 0xff
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	20000f94 	.word	0x20000f94

08002f44 <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 ffd1 	bl	8003ef8 <mfxstm32l152_GetInstance>
 8002f56:	4603      	mov	r3, r0
 8002f58:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	2bff      	cmp	r3, #255	; 0xff
 8002f5e:	d10e      	bne.n	8002f7e <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 8002f60:	2000      	movs	r0, #0
 8002f62:	f000 ffc9 	bl	8003ef8 <mfxstm32l152_GetInstance>
 8002f66:	4603      	mov	r3, r0
 8002f68:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 8002f6a:	7bbb      	ldrb	r3, [r7, #14]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d806      	bhi.n	8002f7e <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 8002f70:	7bbb      	ldrb	r3, [r7, #14]
 8002f72:	88fa      	ldrh	r2, [r7, #6]
 8002f74:	b2d1      	uxtb	r1, r2
 8002f76:	4a09      	ldr	r2, [pc, #36]	; (8002f9c <mfxstm32l152_Init+0x58>)
 8002f78:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 8002f7a:	f006 fb81 	bl	8009680 <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	2102      	movs	r1, #2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 f8db 	bl	800313e <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8002f88:	88fb      	ldrh	r3, [r7, #6]
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 f8fc 	bl	800318a <mfxstm32l152_SetIrqOutPinType>
}
 8002f92:	bf00      	nop
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	20000f9c 	.word	0x20000f9c

08002fa0 <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 ffc3 	bl	8003f38 <mfxstm32l152_ReleaseInstance>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	2bff      	cmp	r3, #255	; 0xff
 8002fba:	d001      	beq.n	8002fc0 <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 8002fbc:	f006 fb70 	bl	80096a0 <MFX_IO_DeInit>
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	2280      	movs	r2, #128	; 0x80
 8002fd6:	2140      	movs	r1, #64	; 0x40
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f006 fc03 	bl	80097e4 <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 8002fde:	200a      	movs	r0, #10
 8002fe0:	f006 fc42 	bl	8009868 <MFX_IO_Delay>
}
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 8002ff6:	88fb      	ldrh	r3, [r7, #6]
 8002ff8:	2240      	movs	r2, #64	; 0x40
 8002ffa:	2140      	movs	r1, #64	; 0x40
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f006 fbf1 	bl	80097e4 <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 8003002:	f006 fbb7 	bl	8009774 <MFX_IO_EnableWakeupPin>
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b084      	sub	sp, #16
 8003012:	af00      	add	r7, sp, #0
 8003014:	4603      	mov	r3, r0
 8003016:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8003018:	88fb      	ldrh	r3, [r7, #6]
 800301a:	4618      	mov	r0, r3
 800301c:	f000 ff6c 	bl	8003ef8 <mfxstm32l152_GetInstance>
 8003020:	4603      	mov	r3, r0
 8003022:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 8003024:	7bfb      	ldrb	r3, [r7, #15]
 8003026:	2bff      	cmp	r3, #255	; 0xff
 8003028:	d101      	bne.n	800302e <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 800302a:	f006 fba3 	bl	8009774 <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 800302e:	f006 fbc5 	bl	80097bc <MFX_IO_Wakeup>
}
 8003032:	bf00      	nop
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	4603      	mov	r3, r0
 8003042:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 8003044:	2001      	movs	r0, #1
 8003046:	f006 fc0f 	bl	8009868 <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 800304a:	f006 fb19 	bl	8009680 <MFX_IO_Init>

  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 800304e:	88fb      	ldrh	r3, [r7, #6]
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f006 fbda 	bl	800980c <MFX_IO_Read>
 8003058:	4603      	mov	r3, r0
 800305a:	73fb      	strb	r3, [r7, #15]

  /* Return the device ID value */
  return (id);
 800305c:	7bfb      	ldrb	r3, [r7, #15]
 800305e:	b29b      	uxth	r3, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	460a      	mov	r2, r1
 8003072:	80fb      	strh	r3, [r7, #6]
 8003074:	4613      	mov	r3, r2
 8003076:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 800307c:	88fb      	ldrh	r3, [r7, #6]
 800307e:	2142      	movs	r1, #66	; 0x42
 8003080:	4618      	mov	r0, r3
 8003082:	f006 fbc3 	bl	800980c <MFX_IO_Read>
 8003086:	4603      	mov	r3, r0
 8003088:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 800308a:	7bfa      	ldrb	r2, [r7, #15]
 800308c:	797b      	ldrb	r3, [r7, #5]
 800308e:	4313      	orrs	r3, r2
 8003090:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8003092:	7bfa      	ldrb	r2, [r7, #15]
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	2142      	movs	r1, #66	; 0x42
 8003098:	4618      	mov	r0, r3
 800309a:	f006 fba3 	bl	80097e4 <MFX_IO_Write>
}
 800309e:	bf00      	nop
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b084      	sub	sp, #16
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	4603      	mov	r3, r0
 80030ae:	460a      	mov	r2, r1
 80030b0:	80fb      	strh	r3, [r7, #6]
 80030b2:	4613      	mov	r3, r2
 80030b4:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	2142      	movs	r1, #66	; 0x42
 80030be:	4618      	mov	r0, r3
 80030c0:	f006 fba4 	bl	800980c <MFX_IO_Read>
 80030c4:	4603      	mov	r3, r0
 80030c6:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 80030c8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	b25a      	sxtb	r2, r3
 80030d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030d4:	4013      	ands	r3, r2
 80030d6:	b25b      	sxtb	r3, r3
 80030d8:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 80030da:	7bfa      	ldrb	r2, [r7, #15]
 80030dc:	88fb      	ldrh	r3, [r7, #6]
 80030de:	2142      	movs	r1, #66	; 0x42
 80030e0:	4618      	mov	r0, r3
 80030e2:	f006 fb7f 	bl	80097e4 <MFX_IO_Write>
}
 80030e6:	bf00      	nop
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	4603      	mov	r3, r0
 80030f6:	460a      	mov	r2, r1
 80030f8:	80fb      	strh	r3, [r7, #6]
 80030fa:	4613      	mov	r3, r2
 80030fc:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	2108      	movs	r1, #8
 8003102:	4618      	mov	r0, r3
 8003104:	f006 fb82 	bl	800980c <MFX_IO_Read>
 8003108:	4603      	mov	r3, r0
 800310a:	461a      	mov	r2, r3
 800310c:	797b      	ldrb	r3, [r7, #5]
 800310e:	4013      	ands	r3, r2
 8003110:	b2db      	uxtb	r3, r3
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b082      	sub	sp, #8
 800311e:	af00      	add	r7, sp, #0
 8003120:	4603      	mov	r3, r0
 8003122:	460a      	mov	r2, r1
 8003124:	80fb      	strh	r3, [r7, #6]
 8003126:	4613      	mov	r3, r2
 8003128:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 800312a:	797a      	ldrb	r2, [r7, #5]
 800312c:	88fb      	ldrh	r3, [r7, #6]
 800312e:	2144      	movs	r1, #68	; 0x44
 8003130:	4618      	mov	r0, r3
 8003132:	f006 fb57 	bl	80097e4 <MFX_IO_Write>
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
 8003144:	4603      	mov	r3, r0
 8003146:	460a      	mov	r2, r1
 8003148:	80fb      	strh	r3, [r7, #6]
 800314a:	4613      	mov	r3, r2
 800314c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800314e:	2300      	movs	r3, #0
 8003150:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	2141      	movs	r1, #65	; 0x41
 8003156:	4618      	mov	r0, r3
 8003158:	f006 fb58 	bl	800980c <MFX_IO_Read>
 800315c:	4603      	mov	r3, r0
 800315e:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	f023 0302 	bic.w	r3, r3, #2
 8003166:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 8003168:	7bfa      	ldrb	r2, [r7, #15]
 800316a:	797b      	ldrb	r3, [r7, #5]
 800316c:	4313      	orrs	r3, r2
 800316e:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8003170:	7bfa      	ldrb	r2, [r7, #15]
 8003172:	88fb      	ldrh	r3, [r7, #6]
 8003174:	2141      	movs	r1, #65	; 0x41
 8003176:	4618      	mov	r0, r3
 8003178:	f006 fb34 	bl	80097e4 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 800317c:	2001      	movs	r0, #1
 800317e:	f006 fb73 	bl	8009868 <MFX_IO_Delay>

}
 8003182:	bf00      	nop
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b084      	sub	sp, #16
 800318e:	af00      	add	r7, sp, #0
 8003190:	4603      	mov	r3, r0
 8003192:	460a      	mov	r2, r1
 8003194:	80fb      	strh	r3, [r7, #6]
 8003196:	4613      	mov	r3, r2
 8003198:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 800319e:	88fb      	ldrh	r3, [r7, #6]
 80031a0:	2141      	movs	r1, #65	; 0x41
 80031a2:	4618      	mov	r0, r3
 80031a4:	f006 fb32 	bl	800980c <MFX_IO_Read>
 80031a8:	4603      	mov	r3, r0
 80031aa:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	f023 0301 	bic.w	r3, r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 80031b4:	7bfa      	ldrb	r2, [r7, #15]
 80031b6:	797b      	ldrb	r3, [r7, #5]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 80031bc:	7bfa      	ldrb	r2, [r7, #15]
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	2141      	movs	r1, #65	; 0x41
 80031c2:	4618      	mov	r0, r3
 80031c4:	f006 fb0e 	bl	80097e4 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 80031c8:	2001      	movs	r0, #1
 80031ca:	f006 fb4d 	bl	8009868 <MFX_IO_Delay>

}
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	4603      	mov	r3, r0
 80031de:	6039      	str	r1, [r7, #0]
 80031e0:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	2140      	movs	r1, #64	; 0x40
 80031e6:	4618      	mov	r0, r3
 80031e8:	f006 fb10 	bl	800980c <MFX_IO_Read>
 80031ec:	4603      	mov	r3, r0
 80031ee:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fe:	d304      	bcc.n	800320a <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 8003200:	7bfb      	ldrb	r3, [r7, #15]
 8003202:	f043 0308 	orr.w	r3, r3, #8
 8003206:	73fb      	strb	r3, [r7, #15]
 8003208:	e003      	b.n	8003212 <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 800320a:	7bfb      	ldrb	r3, [r7, #15]
 800320c:	f023 0308 	bic.w	r3, r3, #8
 8003210:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8003212:	7bfa      	ldrb	r2, [r7, #15]
 8003214:	88fb      	ldrh	r3, [r7, #6]
 8003216:	2140      	movs	r1, #64	; 0x40
 8003218:	4618      	mov	r0, r3
 800321a:	f006 fae3 	bl	80097e4 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 800321e:	2001      	movs	r0, #1
 8003220:	f006 fb22 	bl	8009868 <MFX_IO_Delay>
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	6039      	str	r1, [r7, #0]
 8003236:	80fb      	strh	r3, [r7, #6]
 8003238:	4613      	mov	r3, r2
 800323a:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 8003240:	797b      	ldrb	r3, [r7, #5]
 8003242:	2b17      	cmp	r3, #23
 8003244:	f200 82d4 	bhi.w	80037f0 <mfxstm32l152_IO_Config+0x5c4>
 8003248:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <mfxstm32l152_IO_Config+0x24>)
 800324a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324e:	bf00      	nop
 8003250:	080032e1 	.word	0x080032e1
 8003254:	08003371 	.word	0x08003371
 8003258:	08003431 	.word	0x08003431
 800325c:	08003521 	.word	0x08003521
 8003260:	08003611 	.word	0x08003611
 8003264:	08003701 	.word	0x08003701
 8003268:	080032b1 	.word	0x080032b1
 800326c:	080032b1 	.word	0x080032b1
 8003270:	08003311 	.word	0x08003311
 8003274:	08003341 	.word	0x08003341
 8003278:	080037f1 	.word	0x080037f1
 800327c:	08003401 	.word	0x08003401
 8003280:	080033d1 	.word	0x080033d1
 8003284:	080037f1 	.word	0x080037f1
 8003288:	080033a1 	.word	0x080033a1
 800328c:	08003371 	.word	0x08003371
 8003290:	08003481 	.word	0x08003481
 8003294:	080034d1 	.word	0x080034d1
 8003298:	08003571 	.word	0x08003571
 800329c:	080035c1 	.word	0x080035c1
 80032a0:	08003661 	.word	0x08003661
 80032a4:	080036b1 	.word	0x080036b1
 80032a8:	08003751 	.word	0x08003751
 80032ac:	080037a1 	.word	0x080037a1
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80032b0:	88fb      	ldrh	r3, [r7, #6]
 80032b2:	6839      	ldr	r1, [r7, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fb67 	bl	8003988 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	2200      	movs	r2, #0
 80032be:	6839      	ldr	r1, [r7, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 fa9d 	bl	8003800 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80032c6:	88f8      	ldrh	r0, [r7, #6]
 80032c8:	2300      	movs	r3, #0
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	2164      	movs	r1, #100	; 0x64
 80032ce:	f000 fe57 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80032d2:	88f8      	ldrh	r0, [r7, #6]
 80032d4:	2300      	movs	r3, #0
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	2168      	movs	r1, #104	; 0x68
 80032da:	f000 fe51 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    break;
 80032de:	e28a      	b.n	80037f6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80032e0:	88fb      	ldrh	r3, [r7, #6]
 80032e2:	6839      	ldr	r1, [r7, #0]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fb4f 	bl	8003988 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	2200      	movs	r2, #0
 80032ee:	6839      	ldr	r1, [r7, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 fa85 	bl	8003800 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80032f6:	88f8      	ldrh	r0, [r7, #6]
 80032f8:	2300      	movs	r3, #0
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	2164      	movs	r1, #100	; 0x64
 80032fe:	f000 fe3f 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003302:	88f8      	ldrh	r0, [r7, #6]
 8003304:	2301      	movs	r3, #1
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	2168      	movs	r1, #104	; 0x68
 800330a:	f000 fe39 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    break;
 800330e:	e272      	b.n	80037f6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	6839      	ldr	r1, [r7, #0]
 8003314:	4618      	mov	r0, r3
 8003316:	f000 fb37 	bl	8003988 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	2200      	movs	r2, #0
 800331e:	6839      	ldr	r1, [r7, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f000 fa6d 	bl	8003800 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003326:	88f8      	ldrh	r0, [r7, #6]
 8003328:	2301      	movs	r3, #1
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	2164      	movs	r1, #100	; 0x64
 800332e:	f000 fe27 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003332:	88f8      	ldrh	r0, [r7, #6]
 8003334:	2301      	movs	r3, #1
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	2168      	movs	r1, #104	; 0x68
 800333a:	f000 fe21 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    break;
 800333e:	e25a      	b.n	80037f6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003340:	88fb      	ldrh	r3, [r7, #6]
 8003342:	6839      	ldr	r1, [r7, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fb1f 	bl	8003988 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800334a:	88fb      	ldrh	r3, [r7, #6]
 800334c:	2200      	movs	r2, #0
 800334e:	6839      	ldr	r1, [r7, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f000 fa55 	bl	8003800 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003356:	88f8      	ldrh	r0, [r7, #6]
 8003358:	2301      	movs	r3, #1
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	2164      	movs	r1, #100	; 0x64
 800335e:	f000 fe0f 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003362:	88f8      	ldrh	r0, [r7, #6]
 8003364:	2300      	movs	r3, #0
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	2168      	movs	r1, #104	; 0x68
 800336a:	f000 fe09 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    break;
 800336e:	e242      	b.n	80037f6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003370:	88fb      	ldrh	r3, [r7, #6]
 8003372:	6839      	ldr	r1, [r7, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fb07 	bl	8003988 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	2201      	movs	r2, #1
 800337e:	6839      	ldr	r1, [r7, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f000 fa3d 	bl	8003800 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8003386:	88f8      	ldrh	r0, [r7, #6]
 8003388:	2300      	movs	r3, #0
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	2164      	movs	r1, #100	; 0x64
 800338e:	f000 fdf7 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003392:	88f8      	ldrh	r0, [r7, #6]
 8003394:	2300      	movs	r3, #0
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	2168      	movs	r1, #104	; 0x68
 800339a:	f000 fdf1 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    break;
 800339e:	e22a      	b.n	80037f6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	6839      	ldr	r1, [r7, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 faef 	bl	8003988 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80033aa:	88fb      	ldrh	r3, [r7, #6]
 80033ac:	2201      	movs	r2, #1
 80033ae:	6839      	ldr	r1, [r7, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 fa25 	bl	8003800 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 80033b6:	88f8      	ldrh	r0, [r7, #6]
 80033b8:	2300      	movs	r3, #0
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	2164      	movs	r1, #100	; 0x64
 80033be:	f000 fddf 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80033c2:	88f8      	ldrh	r0, [r7, #6]
 80033c4:	2301      	movs	r3, #1
 80033c6:	683a      	ldr	r2, [r7, #0]
 80033c8:	2168      	movs	r1, #104	; 0x68
 80033ca:	f000 fdd9 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    break;
 80033ce:	e212      	b.n	80037f6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	6839      	ldr	r1, [r7, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fad7 	bl	8003988 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	2201      	movs	r2, #1
 80033de:	6839      	ldr	r1, [r7, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fa0d 	bl	8003800 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 80033e6:	88f8      	ldrh	r0, [r7, #6]
 80033e8:	2301      	movs	r3, #1
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	2164      	movs	r1, #100	; 0x64
 80033ee:	f000 fdc7 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80033f2:	88f8      	ldrh	r0, [r7, #6]
 80033f4:	2300      	movs	r3, #0
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	2168      	movs	r1, #104	; 0x68
 80033fa:	f000 fdc1 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    break;
 80033fe:	e1fa      	b.n	80037f6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003400:	88fb      	ldrh	r3, [r7, #6]
 8003402:	6839      	ldr	r1, [r7, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fabf 	bl	8003988 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	2201      	movs	r2, #1
 800340e:	6839      	ldr	r1, [r7, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f000 f9f5 	bl	8003800 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 8003416:	88f8      	ldrh	r0, [r7, #6]
 8003418:	2301      	movs	r3, #1
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	2164      	movs	r1, #100	; 0x64
 800341e:	f000 fdaf 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003422:	88f8      	ldrh	r0, [r7, #6]
 8003424:	2301      	movs	r3, #1
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	2168      	movs	r1, #104	; 0x68
 800342a:	f000 fda9 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    break;
 800342e:	e1e2      	b.n	80037f6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fa7a 	bl	800392c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003438:	88fb      	ldrh	r3, [r7, #6]
 800343a:	2200      	movs	r2, #0
 800343c:	6839      	ldr	r1, [r7, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f9de 	bl	8003800 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003444:	88f8      	ldrh	r0, [r7, #6]
 8003446:	2300      	movs	r3, #0
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	2164      	movs	r1, #100	; 0x64
 800344c:	f000 fd98 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003450:	88f8      	ldrh	r0, [r7, #6]
 8003452:	2301      	movs	r3, #1
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	2168      	movs	r1, #104	; 0x68
 8003458:	f000 fd92 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 800345c:	88fb      	ldrh	r3, [r7, #6]
 800345e:	2201      	movs	r2, #1
 8003460:	6839      	ldr	r1, [r7, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f000 f9de 	bl	8003824 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	2201      	movs	r2, #1
 800346c:	6839      	ldr	r1, [r7, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f000 f9ed 	bl	800384e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 8003474:	88fb      	ldrh	r3, [r7, #6]
 8003476:	6839      	ldr	r1, [r7, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fa75 	bl	8003968 <mfxstm32l152_IO_EnablePinIT>
    break;
 800347e:	e1ba      	b.n	80037f6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	4618      	mov	r0, r3
 8003484:	f000 fa52 	bl	800392c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	2200      	movs	r2, #0
 800348c:	6839      	ldr	r1, [r7, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f000 f9b6 	bl	8003800 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003494:	88f8      	ldrh	r0, [r7, #6]
 8003496:	2301      	movs	r3, #1
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	2164      	movs	r1, #100	; 0x64
 800349c:	f000 fd70 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80034a0:	88f8      	ldrh	r0, [r7, #6]
 80034a2:	2301      	movs	r3, #1
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	2168      	movs	r1, #104	; 0x68
 80034a8:	f000 fd6a 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	2201      	movs	r2, #1
 80034b0:	6839      	ldr	r1, [r7, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f9b6 	bl	8003824 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	2201      	movs	r2, #1
 80034bc:	6839      	ldr	r1, [r7, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 f9c5 	bl	800384e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	6839      	ldr	r1, [r7, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fa4d 	bl	8003968 <mfxstm32l152_IO_EnablePinIT>
    break;
 80034ce:	e192      	b.n	80037f6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fa2a 	bl	800392c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	2200      	movs	r2, #0
 80034dc:	6839      	ldr	r1, [r7, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 f98e 	bl	8003800 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80034e4:	88f8      	ldrh	r0, [r7, #6]
 80034e6:	2301      	movs	r3, #1
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	2164      	movs	r1, #100	; 0x64
 80034ec:	f000 fd48 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80034f0:	88f8      	ldrh	r0, [r7, #6]
 80034f2:	2300      	movs	r3, #0
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	2168      	movs	r1, #104	; 0x68
 80034f8:	f000 fd42 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80034fc:	88fb      	ldrh	r3, [r7, #6]
 80034fe:	2201      	movs	r2, #1
 8003500:	6839      	ldr	r1, [r7, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f98e 	bl	8003824 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003508:	88fb      	ldrh	r3, [r7, #6]
 800350a:	2201      	movs	r2, #1
 800350c:	6839      	ldr	r1, [r7, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f000 f99d 	bl	800384e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003514:	88fb      	ldrh	r3, [r7, #6]
 8003516:	6839      	ldr	r1, [r7, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f000 fa25 	bl	8003968 <mfxstm32l152_IO_EnablePinIT>
    break;
 800351e:	e16a      	b.n	80037f6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fa02 	bl	800392c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003528:	88fb      	ldrh	r3, [r7, #6]
 800352a:	2200      	movs	r2, #0
 800352c:	6839      	ldr	r1, [r7, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f966 	bl	8003800 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003534:	88f8      	ldrh	r0, [r7, #6]
 8003536:	2300      	movs	r3, #0
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	2164      	movs	r1, #100	; 0x64
 800353c:	f000 fd20 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003540:	88f8      	ldrh	r0, [r7, #6]
 8003542:	2301      	movs	r3, #1
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	2168      	movs	r1, #104	; 0x68
 8003548:	f000 fd1a 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 800354c:	88fb      	ldrh	r3, [r7, #6]
 800354e:	2201      	movs	r2, #1
 8003550:	6839      	ldr	r1, [r7, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f000 f966 	bl	8003824 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003558:	88fb      	ldrh	r3, [r7, #6]
 800355a:	2200      	movs	r2, #0
 800355c:	6839      	ldr	r1, [r7, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f000 f975 	bl	800384e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	6839      	ldr	r1, [r7, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f000 f9fd 	bl	8003968 <mfxstm32l152_IO_EnablePinIT>
    break;
 800356e:	e142      	b.n	80037f6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	4618      	mov	r0, r3
 8003574:	f000 f9da 	bl	800392c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	2200      	movs	r2, #0
 800357c:	6839      	ldr	r1, [r7, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f000 f93e 	bl	8003800 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003584:	88f8      	ldrh	r0, [r7, #6]
 8003586:	2301      	movs	r3, #1
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	2164      	movs	r1, #100	; 0x64
 800358c:	f000 fcf8 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003590:	88f8      	ldrh	r0, [r7, #6]
 8003592:	2301      	movs	r3, #1
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	2168      	movs	r1, #104	; 0x68
 8003598:	f000 fcf2 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	2201      	movs	r2, #1
 80035a0:	6839      	ldr	r1, [r7, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 f93e 	bl	8003824 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80035a8:	88fb      	ldrh	r3, [r7, #6]
 80035aa:	2200      	movs	r2, #0
 80035ac:	6839      	ldr	r1, [r7, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 f94d 	bl	800384e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	6839      	ldr	r1, [r7, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 f9d5 	bl	8003968 <mfxstm32l152_IO_EnablePinIT>
    break;
 80035be:	e11a      	b.n	80037f6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80035c0:	88fb      	ldrh	r3, [r7, #6]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 f9b2 	bl	800392c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	2200      	movs	r2, #0
 80035cc:	6839      	ldr	r1, [r7, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 f916 	bl	8003800 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80035d4:	88f8      	ldrh	r0, [r7, #6]
 80035d6:	2301      	movs	r3, #1
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	2164      	movs	r1, #100	; 0x64
 80035dc:	f000 fcd0 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80035e0:	88f8      	ldrh	r0, [r7, #6]
 80035e2:	2300      	movs	r3, #0
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	2168      	movs	r1, #104	; 0x68
 80035e8:	f000 fcca 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80035ec:	88fb      	ldrh	r3, [r7, #6]
 80035ee:	2201      	movs	r2, #1
 80035f0:	6839      	ldr	r1, [r7, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 f916 	bl	8003824 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80035f8:	88fb      	ldrh	r3, [r7, #6]
 80035fa:	2200      	movs	r2, #0
 80035fc:	6839      	ldr	r1, [r7, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 f925 	bl	800384e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	6839      	ldr	r1, [r7, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f000 f9ad 	bl	8003968 <mfxstm32l152_IO_EnablePinIT>
    break;
 800360e:	e0f2      	b.n	80037f6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	4618      	mov	r0, r3
 8003614:	f000 f98a 	bl	800392c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003618:	88fb      	ldrh	r3, [r7, #6]
 800361a:	2200      	movs	r2, #0
 800361c:	6839      	ldr	r1, [r7, #0]
 800361e:	4618      	mov	r0, r3
 8003620:	f000 f8ee 	bl	8003800 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003624:	88f8      	ldrh	r0, [r7, #6]
 8003626:	2300      	movs	r3, #0
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	2164      	movs	r1, #100	; 0x64
 800362c:	f000 fca8 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003630:	88f8      	ldrh	r0, [r7, #6]
 8003632:	2301      	movs	r3, #1
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	2168      	movs	r1, #104	; 0x68
 8003638:	f000 fca2 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800363c:	88fb      	ldrh	r3, [r7, #6]
 800363e:	2200      	movs	r2, #0
 8003640:	6839      	ldr	r1, [r7, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f000 f8ee 	bl	8003824 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003648:	88fb      	ldrh	r3, [r7, #6]
 800364a:	2200      	movs	r2, #0
 800364c:	6839      	ldr	r1, [r7, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f000 f8fd 	bl	800384e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003654:	88fb      	ldrh	r3, [r7, #6]
 8003656:	6839      	ldr	r1, [r7, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f000 f985 	bl	8003968 <mfxstm32l152_IO_EnablePinIT>
    break;
 800365e:	e0ca      	b.n	80037f6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	4618      	mov	r0, r3
 8003664:	f000 f962 	bl	800392c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003668:	88fb      	ldrh	r3, [r7, #6]
 800366a:	2200      	movs	r2, #0
 800366c:	6839      	ldr	r1, [r7, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f000 f8c6 	bl	8003800 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003674:	88f8      	ldrh	r0, [r7, #6]
 8003676:	2301      	movs	r3, #1
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	2164      	movs	r1, #100	; 0x64
 800367c:	f000 fc80 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003680:	88f8      	ldrh	r0, [r7, #6]
 8003682:	2301      	movs	r3, #1
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	2168      	movs	r1, #104	; 0x68
 8003688:	f000 fc7a 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800368c:	88fb      	ldrh	r3, [r7, #6]
 800368e:	2200      	movs	r2, #0
 8003690:	6839      	ldr	r1, [r7, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f000 f8c6 	bl	8003824 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8003698:	88fb      	ldrh	r3, [r7, #6]
 800369a:	2200      	movs	r2, #0
 800369c:	6839      	ldr	r1, [r7, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 f8d5 	bl	800384e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80036a4:	88fb      	ldrh	r3, [r7, #6]
 80036a6:	6839      	ldr	r1, [r7, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 f95d 	bl	8003968 <mfxstm32l152_IO_EnablePinIT>
    break;
 80036ae:	e0a2      	b.n	80037f6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 f93a 	bl	800392c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	2200      	movs	r2, #0
 80036bc:	6839      	ldr	r1, [r7, #0]
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 f89e 	bl	8003800 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80036c4:	88f8      	ldrh	r0, [r7, #6]
 80036c6:	2301      	movs	r3, #1
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	2164      	movs	r1, #100	; 0x64
 80036cc:	f000 fc58 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80036d0:	88f8      	ldrh	r0, [r7, #6]
 80036d2:	2300      	movs	r3, #0
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	2168      	movs	r1, #104	; 0x68
 80036d8:	f000 fc52 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80036dc:	88fb      	ldrh	r3, [r7, #6]
 80036de:	2200      	movs	r2, #0
 80036e0:	6839      	ldr	r1, [r7, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 f89e 	bl	8003824 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80036e8:	88fb      	ldrh	r3, [r7, #6]
 80036ea:	2200      	movs	r2, #0
 80036ec:	6839      	ldr	r1, [r7, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f8ad 	bl	800384e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80036f4:	88fb      	ldrh	r3, [r7, #6]
 80036f6:	6839      	ldr	r1, [r7, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 f935 	bl	8003968 <mfxstm32l152_IO_EnablePinIT>
    break;
 80036fe:	e07a      	b.n	80037f6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003700:	88fb      	ldrh	r3, [r7, #6]
 8003702:	4618      	mov	r0, r3
 8003704:	f000 f912 	bl	800392c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003708:	88fb      	ldrh	r3, [r7, #6]
 800370a:	2200      	movs	r2, #0
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f876 	bl	8003800 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003714:	88f8      	ldrh	r0, [r7, #6]
 8003716:	2300      	movs	r3, #0
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	2164      	movs	r1, #100	; 0x64
 800371c:	f000 fc30 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003720:	88f8      	ldrh	r0, [r7, #6]
 8003722:	2301      	movs	r3, #1
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	2168      	movs	r1, #104	; 0x68
 8003728:	f000 fc2a 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800372c:	88fb      	ldrh	r3, [r7, #6]
 800372e:	2200      	movs	r2, #0
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f000 f876 	bl	8003824 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003738:	88fb      	ldrh	r3, [r7, #6]
 800373a:	2201      	movs	r2, #1
 800373c:	6839      	ldr	r1, [r7, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f000 f885 	bl	800384e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003744:	88fb      	ldrh	r3, [r7, #6]
 8003746:	6839      	ldr	r1, [r7, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f000 f90d 	bl	8003968 <mfxstm32l152_IO_EnablePinIT>
    break;
 800374e:	e052      	b.n	80037f6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003750:	88fb      	ldrh	r3, [r7, #6]
 8003752:	4618      	mov	r0, r3
 8003754:	f000 f8ea 	bl	800392c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8003758:	88fb      	ldrh	r3, [r7, #6]
 800375a:	2200      	movs	r2, #0
 800375c:	6839      	ldr	r1, [r7, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f84e 	bl	8003800 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003764:	88f8      	ldrh	r0, [r7, #6]
 8003766:	2301      	movs	r3, #1
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	2164      	movs	r1, #100	; 0x64
 800376c:	f000 fc08 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003770:	88f8      	ldrh	r0, [r7, #6]
 8003772:	2301      	movs	r3, #1
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	2168      	movs	r1, #104	; 0x68
 8003778:	f000 fc02 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 800377c:	88fb      	ldrh	r3, [r7, #6]
 800377e:	2200      	movs	r2, #0
 8003780:	6839      	ldr	r1, [r7, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f000 f84e 	bl	8003824 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8003788:	88fb      	ldrh	r3, [r7, #6]
 800378a:	2201      	movs	r2, #1
 800378c:	6839      	ldr	r1, [r7, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 f85d 	bl	800384e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003794:	88fb      	ldrh	r3, [r7, #6]
 8003796:	6839      	ldr	r1, [r7, #0]
 8003798:	4618      	mov	r0, r3
 800379a:	f000 f8e5 	bl	8003968 <mfxstm32l152_IO_EnablePinIT>
    break;
 800379e:	e02a      	b.n	80037f6 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80037a0:	88fb      	ldrh	r3, [r7, #6]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 f8c2 	bl	800392c <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80037a8:	88fb      	ldrh	r3, [r7, #6]
 80037aa:	2200      	movs	r2, #0
 80037ac:	6839      	ldr	r1, [r7, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 f826 	bl	8003800 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80037b4:	88f8      	ldrh	r0, [r7, #6]
 80037b6:	2301      	movs	r3, #1
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	2164      	movs	r1, #100	; 0x64
 80037bc:	f000 fbe0 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80037c0:	88f8      	ldrh	r0, [r7, #6]
 80037c2:	2300      	movs	r3, #0
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	2168      	movs	r1, #104	; 0x68
 80037c8:	f000 fbda 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80037cc:	88fb      	ldrh	r3, [r7, #6]
 80037ce:	2200      	movs	r2, #0
 80037d0:	6839      	ldr	r1, [r7, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 f826 	bl	8003824 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80037d8:	88fb      	ldrh	r3, [r7, #6]
 80037da:	2201      	movs	r2, #1
 80037dc:	6839      	ldr	r1, [r7, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 f835 	bl	800384e <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	6839      	ldr	r1, [r7, #0]
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 f8bd 	bl	8003968 <mfxstm32l152_IO_EnablePinIT>
    break;
 80037ee:	e002      	b.n	80037f6 <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 80037f0:	797b      	ldrb	r3, [r7, #5]
 80037f2:	73fb      	strb	r3, [r7, #15]
    break;
 80037f4:	bf00      	nop
  }

  return error_code;
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	6039      	str	r1, [r7, #0]
 800380a:	80fb      	strh	r3, [r7, #6]
 800380c:	4613      	mov	r3, r2
 800380e:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 8003810:	797b      	ldrb	r3, [r7, #5]
 8003812:	88f8      	ldrh	r0, [r7, #6]
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	2160      	movs	r1, #96	; 0x60
 8003818:	f000 fbb2 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
}
 800381c:	bf00      	nop
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	6039      	str	r1, [r7, #0]
 800382e:	80fb      	strh	r3, [r7, #6]
 8003830:	4613      	mov	r3, r2
 8003832:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 8003834:	797b      	ldrb	r3, [r7, #5]
 8003836:	88f8      	ldrh	r0, [r7, #6]
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	214c      	movs	r1, #76	; 0x4c
 800383c:	f000 fba0 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8003840:	2001      	movs	r0, #1
 8003842:	f006 f811 	bl	8009868 <MFX_IO_Delay>
}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	4603      	mov	r3, r0
 8003856:	6039      	str	r1, [r7, #0]
 8003858:	80fb      	strh	r3, [r7, #6]
 800385a:	4613      	mov	r3, r2
 800385c:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 800385e:	797b      	ldrb	r3, [r7, #5]
 8003860:	88f8      	ldrh	r0, [r7, #6]
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	2150      	movs	r1, #80	; 0x50
 8003866:	f000 fb8b 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 800386a:	2001      	movs	r0, #1
 800386c:	f005 fffc 	bl	8009868 <MFX_IO_Delay>
}
 8003870:	bf00      	nop
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	6039      	str	r1, [r7, #0]
 8003882:	80fb      	strh	r3, [r7, #6]
 8003884:	4613      	mov	r3, r2
 8003886:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8003888:	797b      	ldrb	r3, [r7, #5]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d006      	beq.n	800389c <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 800388e:	88f8      	ldrh	r0, [r7, #6]
 8003890:	2301      	movs	r3, #1
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	216c      	movs	r1, #108	; 0x6c
 8003896:	f000 fb73 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 800389a:	e005      	b.n	80038a8 <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 800389c:	88f8      	ldrh	r0, [r7, #6]
 800389e:	2301      	movs	r3, #1
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	2170      	movs	r1, #112	; 0x70
 80038a4:	f000 fb6c 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
}
 80038a8:	bf00      	nop
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	6039      	str	r1, [r7, #0]
 80038ba:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 80038bc:	2300      	movs	r3, #0
 80038be:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d006      	beq.n	80038de <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	2110      	movs	r1, #16
 80038d4:	4618      	mov	r0, r3
 80038d6:	f005 ff99 	bl	800980c <MFX_IO_Read>
 80038da:	4603      	mov	r3, r0
 80038dc:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d006      	beq.n	80038f6 <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	2111      	movs	r1, #17
 80038ec:	4618      	mov	r0, r3
 80038ee:	f005 ff8d 	bl	800980c <MFX_IO_Read>
 80038f2:	4603      	mov	r3, r0
 80038f4:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d006      	beq.n	800390e <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	2112      	movs	r1, #18
 8003904:	4618      	mov	r0, r3
 8003906:	f005 ff81 	bl	800980c <MFX_IO_Read>
 800390a:	4603      	mov	r3, r0
 800390c:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	021a      	lsls	r2, r3, #8
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	441a      	add	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	041b      	lsls	r3, r3, #16
 800391a:	4413      	add	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	4013      	ands	r3, r2
}
 8003924:	4618      	mov	r0, r3
 8003926:	3718      	adds	r7, #24
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8003936:	f005 feef 	bl	8009718 <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 800393a:	88fb      	ldrh	r3, [r7, #6]
 800393c:	2101      	movs	r1, #1
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff fb92 	bl	8003068 <mfxstm32l152_EnableITSource>
}
 8003944:	bf00      	nop
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8003956:	88fb      	ldrh	r3, [r7, #6]
 8003958:	2101      	movs	r1, #1
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fba3 	bl	80030a6 <mfxstm32l152_DisableITSource>
}
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	6039      	str	r1, [r7, #0]
 8003972:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 8003974:	88f8      	ldrh	r0, [r7, #6]
 8003976:	2301      	movs	r3, #1
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	2148      	movs	r1, #72	; 0x48
 800397c:	f000 fb00 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
}
 8003980:	bf00      	nop
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	6039      	str	r1, [r7, #0]
 8003992:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 8003994:	88f8      	ldrh	r0, [r7, #6]
 8003996:	2300      	movs	r3, #0
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	2148      	movs	r1, #72	; 0x48
 800399c:	f000 faf0 	bl	8003f80 <mfxstm32l152_reg24_setPinValue>
}
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 80039bc:	2300      	movs	r3, #0
 80039be:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d006      	beq.n	80039d6 <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 80039c8:	88fb      	ldrh	r3, [r7, #6]
 80039ca:	210c      	movs	r1, #12
 80039cc:	4618      	mov	r0, r3
 80039ce:	f005 ff1d 	bl	800980c <MFX_IO_Read>
 80039d2:	4603      	mov	r3, r0
 80039d4:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80039dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d006      	beq.n	80039f2 <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	210d      	movs	r1, #13
 80039e8:	4618      	mov	r0, r3
 80039ea:	f005 ff0f 	bl	800980c <MFX_IO_Read>
 80039ee:	4603      	mov	r3, r0
 80039f0:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	0c1b      	lsrs	r3, r3, #16
 80039f6:	041b      	lsls	r3, r3, #16
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d006      	beq.n	8003a0a <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	210e      	movs	r1, #14
 8003a00:	4618      	mov	r0, r3
 8003a02:	f005 ff03 	bl	800980c <MFX_IO_Read>
 8003a06:	4603      	mov	r3, r0
 8003a08:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8003a0a:	7bfa      	ldrb	r2, [r7, #15]
 8003a0c:	89bb      	ldrh	r3, [r7, #12]
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	4413      	add	r3, r2
 8003a12:	461a      	mov	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	041b      	lsls	r3, r3, #16
 8003a18:	4413      	add	r3, r2
 8003a1a:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	4013      	ands	r3, r2
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	4603      	mov	r3, r0
 8003a32:	6039      	str	r1, [r7, #0]
 8003a34:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	0a1b      	lsrs	r3, r3, #8
 8003a3e:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	0c1b      	lsrs	r3, r3, #16
 8003a44:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 8003a4c:	7bfa      	ldrb	r2, [r7, #15]
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	2154      	movs	r1, #84	; 0x54
 8003a52:	4618      	mov	r0, r3
 8003a54:	f005 fec6 	bl	80097e4 <MFX_IO_Write>
  }
  if (pin_8_15)
 8003a58:	7bbb      	ldrb	r3, [r7, #14]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 8003a5e:	7bba      	ldrb	r2, [r7, #14]
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	2155      	movs	r1, #85	; 0x55
 8003a64:	4618      	mov	r0, r3
 8003a66:	f005 febd 	bl	80097e4 <MFX_IO_Write>
  }
  if (pin_16_23)
 8003a6a:	7b7b      	ldrb	r3, [r7, #13]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8003a70:	7b7a      	ldrb	r2, [r7, #13]
 8003a72:	88fb      	ldrh	r3, [r7, #6]
 8003a74:	2156      	movs	r1, #86	; 0x56
 8003a76:	4618      	mov	r0, r3
 8003a78:	f005 feb4 	bl	80097e4 <MFX_IO_Write>
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2180      	movs	r1, #128	; 0x80
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f005 feb6 	bl	800980c <MFX_IO_Read>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
 8003aa6:	f043 0301 	orr.w	r3, r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 8003aac:	88fb      	ldrh	r3, [r7, #6]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	7bfa      	ldrb	r2, [r7, #15]
 8003ab4:	2180      	movs	r1, #128	; 0x80
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f005 fe94 	bl	80097e4 <MFX_IO_Write>
}
 8003abc:	bf00      	nop
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 8003ac4:	b084      	sub	sp, #16
 8003ac6:	b590      	push	{r4, r7, lr}
 8003ac8:	b085      	sub	sp, #20
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	4604      	mov	r4, r0
 8003ace:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ad2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003ad6:	4623      	mov	r3, r4
 8003ad8:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8003ae2:	88fb      	ldrh	r3, [r7, #6]
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2140      	movs	r1, #64	; 0x40
 8003aea:	4618      	mov	r0, r3
 8003aec:	f005 fe8e 	bl	800980c <MFX_IO_Read>
 8003af0:	4603      	mov	r3, r0
 8003af2:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 8003af4:	7bbb      	ldrb	r3, [r7, #14]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10b      	bne.n	8003b16 <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 8003afe:	7bbb      	ldrb	r3, [r7, #14]
 8003b00:	f043 0304 	orr.w	r3, r3, #4
 8003b04:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	7bba      	ldrb	r2, [r7, #14]
 8003b0e:	2140      	movs	r1, #64	; 0x40
 8003b10:	4618      	mov	r0, r3
 8003b12:	f005 fe67 	bl	80097e4 <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 8003b16:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	f003 030e 	and.w	r3, r3, #14
 8003b22:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8003b24:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003b28:	b25b      	sxtb	r3, r3
 8003b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2e:	b25a      	sxtb	r2, r3
 8003b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	b25b      	sxtb	r3, r3
 8003b38:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 8003b3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003b3e:	b25b      	sxtb	r3, r3
 8003b40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b44:	b25a      	sxtb	r2, r3
 8003b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	b25b      	sxtb	r3, r3
 8003b4e:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8003b50:	88fb      	ldrh	r3, [r7, #6]
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	7bfa      	ldrb	r2, [r7, #15]
 8003b58:	2180      	movs	r1, #128	; 0x80
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f005 fe42 	bl	80097e4 <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8003b60:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003b64:	b25b      	sxtb	r3, r3
 8003b66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b6a:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8003b6c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003b70:	b25b      	sxtb	r3, r3
 8003b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b76:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	b25b      	sxtb	r3, r3
 8003b7c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 8003b7e:	88fb      	ldrh	r3, [r7, #6]
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	7bfa      	ldrb	r2, [r7, #15]
 8003b86:	2181      	movs	r1, #129	; 0x81
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f005 fe2b 	bl	80097e4 <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 8003b8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003b90:	0a1b      	lsrs	r3, r3, #8
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	7bfa      	ldrb	r2, [r7, #15]
 8003b9e:	2182      	movs	r1, #130	; 0x82
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f005 fe1f 	bl	80097e4 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 8003ba6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003ba8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	7bfa      	ldrb	r2, [r7, #15]
 8003bb2:	2183      	movs	r1, #131	; 0x83
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f005 fe15 	bl	80097e4 <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 8003bba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003bbc:	0a1b      	lsrs	r3, r3, #8
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 8003bc2:	88fb      	ldrh	r3, [r7, #6]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	7bfa      	ldrb	r2, [r7, #15]
 8003bca:	2184      	movs	r1, #132	; 0x84
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f005 fe09 	bl	80097e4 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 8003bd2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003bd4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	7bfa      	ldrb	r2, [r7, #15]
 8003bde:	2185      	movs	r1, #133	; 0x85
 8003be0:	4618      	mov	r0, r3
 8003be2:	f005 fdff 	bl	80097e4 <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 8003be6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 8003bee:	88fb      	ldrh	r3, [r7, #6]
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	7bfa      	ldrb	r2, [r7, #15]
 8003bf6:	2186      	movs	r1, #134	; 0x86
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f005 fdf3 	bl	80097e4 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 8003bfe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003c00:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	7bfa      	ldrb	r2, [r7, #15]
 8003c0a:	2187      	movs	r1, #135	; 0x87
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f005 fde9 	bl	80097e4 <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 8003c12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c14:	0a1b      	lsrs	r3, r3, #8
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 8003c1a:	88fb      	ldrh	r3, [r7, #6]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	7bfa      	ldrb	r2, [r7, #15]
 8003c22:	2188      	movs	r1, #136	; 0x88
 8003c24:	4618      	mov	r0, r3
 8003c26:	f005 fddd 	bl	80097e4 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 8003c2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c2c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	7bfa      	ldrb	r2, [r7, #15]
 8003c36:	2189      	movs	r1, #137	; 0x89
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f005 fdd3 	bl	80097e4 <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 8003c3e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003c40:	0a1b      	lsrs	r3, r3, #8
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 8003c46:	88fb      	ldrh	r3, [r7, #6]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	7bfa      	ldrb	r2, [r7, #15]
 8003c4e:	218a      	movs	r1, #138	; 0x8a
 8003c50:	4618      	mov	r0, r3
 8003c52:	f005 fdc7 	bl	80097e4 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 8003c56:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003c58:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 8003c5a:	88fb      	ldrh	r3, [r7, #6]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	7bfa      	ldrb	r2, [r7, #15]
 8003c62:	218b      	movs	r1, #139	; 0x8b
 8003c64:	4618      	mov	r0, r3
 8003c66:	f005 fdbd 	bl	80097e4 <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 8003c6a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003c6c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 8003c6e:	88fb      	ldrh	r3, [r7, #6]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	7bfa      	ldrb	r2, [r7, #15]
 8003c76:	2190      	movs	r1, #144	; 0x90
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f005 fdb3 	bl	80097e4 <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 8003c7e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003c80:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 8003c82:	88fb      	ldrh	r3, [r7, #6]
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	7bfa      	ldrb	r2, [r7, #15]
 8003c8a:	2191      	movs	r1, #145	; 0x91
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f005 fda9 	bl	80097e4 <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 8003c92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c94:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	7bfa      	ldrb	r2, [r7, #15]
 8003c9e:	2192      	movs	r1, #146	; 0x92
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f005 fd9f 	bl	80097e4 <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 8003ca6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003ca8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 8003caa:	88fb      	ldrh	r3, [r7, #6]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	7bfa      	ldrb	r2, [r7, #15]
 8003cb2:	2193      	movs	r1, #147	; 0x93
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f005 fd95 	bl	80097e4 <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 8003cba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003cbc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 8003cbe:	88fb      	ldrh	r3, [r7, #6]
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	7bfa      	ldrb	r2, [r7, #15]
 8003cc6:	2194      	movs	r1, #148	; 0x94
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f005 fd8b 	bl	80097e4 <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 8003cce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cd0:	0a1b      	lsrs	r3, r3, #8
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	7bfa      	ldrb	r2, [r7, #15]
 8003cde:	218c      	movs	r1, #140	; 0x8c
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f005 fd7f 	bl	80097e4 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 8003ce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ce8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	7bfa      	ldrb	r2, [r7, #15]
 8003cf2:	218d      	movs	r1, #141	; 0x8d
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f005 fd75 	bl	80097e4 <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 8003cfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003cfc:	0a1b      	lsrs	r3, r3, #8
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	7bfa      	ldrb	r2, [r7, #15]
 8003d0a:	218e      	movs	r1, #142	; 0x8e
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f005 fd69 	bl	80097e4 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 8003d12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d14:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	7bfa      	ldrb	r2, [r7, #15]
 8003d1e:	218f      	movs	r1, #143	; 0x8f
 8003d20:	4618      	mov	r0, r3
 8003d22:	f005 fd5f 	bl	80097e4 <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 8003d26:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003d2a:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	7bfa      	ldrb	r2, [r7, #15]
 8003d34:	2196      	movs	r1, #150	; 0x96
 8003d36:	4618      	mov	r0, r3
 8003d38:	f005 fd54 	bl	80097e4 <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8003d3c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003d40:	b25b      	sxtb	r3, r3
 8003d42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003d46:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8003d48:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003d4c:	b25b      	sxtb	r3, r3
 8003d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d52:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8003d54:	4313      	orrs	r3, r2
 8003d56:	b25b      	sxtb	r3, r3
 8003d58:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	7bfa      	ldrb	r2, [r7, #15]
 8003d62:	2197      	movs	r1, #151	; 0x97
 8003d64:	4618      	mov	r0, r3
 8003d66:	f005 fd3d 	bl	80097e4 <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 8003d6a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003d6e:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8003d70:	88fb      	ldrh	r3, [r7, #6]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	7bfa      	ldrb	r2, [r7, #15]
 8003d78:	2198      	movs	r1, #152	; 0x98
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f005 fd32 	bl	80097e4 <MFX_IO_Write>
}
 8003d80:	bf00      	nop
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003d8a:	b004      	add	sp, #16
 8003d8c:	4770      	bx	lr

08003d8e <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	4603      	mov	r3, r0
 8003d96:	6039      	str	r1, [r7, #0]
 8003d98:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	b298      	uxth	r0, r3
 8003da0:	f107 020c 	add.w	r2, r7, #12
 8003da4:	2303      	movs	r3, #3
 8003da6:	2114      	movs	r1, #20
 8003da8:	f005 fd44 	bl	8009834 <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 8003dac:	7b3b      	ldrb	r3, [r7, #12]
 8003dae:	041a      	lsls	r2, r3, #16
 8003db0:	7b7b      	ldrb	r3, [r7, #13]
 8003db2:	021b      	lsls	r3, r3, #8
 8003db4:	4313      	orrs	r3, r2
 8003db6:	7bba      	ldrb	r2, [r7, #14]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	461a      	mov	r2, r3
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	601a      	str	r2, [r3, #0]

}
 8003dc0:	bf00      	nop
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8003dd2:	f005 fca1 	bl	8009718 <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8003dd6:	88fb      	ldrh	r3, [r7, #6]
 8003dd8:	2102      	movs	r1, #2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff f944 	bl	8003068 <mfxstm32l152_EnableITSource>
}
 8003de0:	bf00      	nop
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8003df2:	88fb      	ldrh	r3, [r7, #6]
 8003df4:	2102      	movs	r1, #2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff f98f 	bl	800311a <mfxstm32l152_ClearGlobalIT>
}
 8003dfc:	bf00      	nop
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	2102      	movs	r1, #2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff f96b 	bl	80030ee <mfxstm32l152_GlobalITStatus>
 8003e18:	4603      	mov	r3, r0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b082      	sub	sp, #8
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	4603      	mov	r3, r0
 8003e2a:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8003e2c:	88fb      	ldrh	r3, [r7, #6]
 8003e2e:	2102      	movs	r1, #2
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff f938 	bl	80030a6 <mfxstm32l152_DisableITSource>
}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	4603      	mov	r3, r0
 8003e46:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 8003e48:	88fb      	ldrh	r3, [r7, #6]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2103      	movs	r1, #3
 8003e50:	4618      	mov	r0, r3
 8003e52:	f005 fcdb 	bl	800980c <MFX_IO_Read>
 8003e56:	4603      	mov	r3, r0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	2104      	movs	r1, #4
 8003e72:	4618      	mov	r0, r3
 8003e74:	f005 fcca 	bl	800980c <MFX_IO_Read>
 8003e78:	4603      	mov	r3, r0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	4603      	mov	r3, r0
 8003e8a:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8003e8c:	f005 fc44 	bl	8009718 <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8003e90:	88fb      	ldrh	r3, [r7, #6]
 8003e92:	2104      	movs	r1, #4
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff f8e7 	bl	8003068 <mfxstm32l152_EnableITSource>
}
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	2104      	movs	r1, #4
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff f932 	bl	800311a <mfxstm32l152_ClearGlobalIT>
}
 8003eb6:	bf00      	nop
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b082      	sub	sp, #8
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 8003ec8:	88fb      	ldrh	r3, [r7, #6]
 8003eca:	2104      	movs	r1, #4
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff f90e 	bl	80030ee <mfxstm32l152_GlobalITStatus>
 8003ed2:	4603      	mov	r3, r0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8003ee6:	88fb      	ldrh	r3, [r7, #6]
 8003ee8:	2104      	movs	r1, #4
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff f8db 	bl	80030a6 <mfxstm32l152_DisableITSource>
}
 8003ef0:	bf00      	nop
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	4603      	mov	r3, r0
 8003f00:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8003f02:	2300      	movs	r3, #0
 8003f04:	73fb      	strb	r3, [r7, #15]
 8003f06:	e00b      	b.n	8003f20 <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
 8003f0a:	4a0a      	ldr	r2, [pc, #40]	; (8003f34 <mfxstm32l152_GetInstance+0x3c>)
 8003f0c:	5cd3      	ldrb	r3, [r2, r3]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	88fa      	ldrh	r2, [r7, #6]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d101      	bne.n	8003f1a <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 8003f16:	7bfb      	ldrb	r3, [r7, #15]
 8003f18:	e006      	b.n	8003f28 <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d9f0      	bls.n	8003f08 <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 8003f26:	23ff      	movs	r3, #255	; 0xff
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	20000f9c 	.word	0x20000f9c

08003f38 <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8003f42:	2300      	movs	r3, #0
 8003f44:	73fb      	strb	r3, [r7, #15]
 8003f46:	e00f      	b.n	8003f68 <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	4a0c      	ldr	r2, [pc, #48]	; (8003f7c <mfxstm32l152_ReleaseInstance+0x44>)
 8003f4c:	5cd3      	ldrb	r3, [r2, r3]
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	88fa      	ldrh	r2, [r7, #6]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d105      	bne.n	8003f62 <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	4a08      	ldr	r2, [pc, #32]	; (8003f7c <mfxstm32l152_ReleaseInstance+0x44>)
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	54d1      	strb	r1, [r2, r3]
      return idx;
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	e006      	b.n	8003f70 <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	3301      	adds	r3, #1
 8003f66:	73fb      	strb	r3, [r7, #15]
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d9ec      	bls.n	8003f48 <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 8003f6e:	23ff      	movs	r3, #255	; 0xff
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	20000f9c 	.word	0x20000f9c

08003f80 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	603a      	str	r2, [r7, #0]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	80fb      	strh	r3, [r7, #6]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	717b      	strb	r3, [r7, #5]
 8003f92:	4613      	mov	r3, r2
 8003f94:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	0a1b      	lsrs	r3, r3, #8
 8003fa2:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	0c1b      	lsrs	r3, r3, #16
 8003fa8:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 8003faa:	7bbb      	ldrb	r3, [r7, #14]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01e      	beq.n	8003fee <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 8003fb0:	797a      	ldrb	r2, [r7, #5]
 8003fb2:	88fb      	ldrh	r3, [r7, #6]
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f005 fc28 	bl	800980c <MFX_IO_Read>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8003fc0:	793b      	ldrb	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d004      	beq.n	8003fd0 <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 8003fc6:	7bfa      	ldrb	r2, [r7, #15]
 8003fc8:	7bbb      	ldrb	r3, [r7, #14]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	73fb      	strb	r3, [r7, #15]
 8003fce:	e008      	b.n	8003fe2 <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 8003fd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	b25a      	sxtb	r2, r3
 8003fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	b25b      	sxtb	r3, r3
 8003fe0:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 8003fe2:	7bfa      	ldrb	r2, [r7, #15]
 8003fe4:	7979      	ldrb	r1, [r7, #5]
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f005 fbfb 	bl	80097e4 <MFX_IO_Write>
  }

  if (pin_8_15)
 8003fee:	7b7b      	ldrb	r3, [r7, #13]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d022      	beq.n	800403a <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 8003ff4:	797b      	ldrb	r3, [r7, #5]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	88fb      	ldrh	r3, [r7, #6]
 8003ffc:	4611      	mov	r1, r2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f005 fc04 	bl	800980c <MFX_IO_Read>
 8004004:	4603      	mov	r3, r0
 8004006:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8004008:	793b      	ldrb	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d004      	beq.n	8004018 <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 800400e:	7bfa      	ldrb	r2, [r7, #15]
 8004010:	7b7b      	ldrb	r3, [r7, #13]
 8004012:	4313      	orrs	r3, r2
 8004014:	73fb      	strb	r3, [r7, #15]
 8004016:	e008      	b.n	800402a <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 8004018:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800401c:	43db      	mvns	r3, r3
 800401e:	b25a      	sxtb	r2, r3
 8004020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004024:	4013      	ands	r3, r2
 8004026:	b25b      	sxtb	r3, r3
 8004028:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 800402a:	797b      	ldrb	r3, [r7, #5]
 800402c:	3301      	adds	r3, #1
 800402e:	b2d9      	uxtb	r1, r3
 8004030:	7bfa      	ldrb	r2, [r7, #15]
 8004032:	88fb      	ldrh	r3, [r7, #6]
 8004034:	4618      	mov	r0, r3
 8004036:	f005 fbd5 	bl	80097e4 <MFX_IO_Write>
  }

  if (pin_16_23)
 800403a:	7b3b      	ldrb	r3, [r7, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d022      	beq.n	8004086 <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 8004040:	797b      	ldrb	r3, [r7, #5]
 8004042:	3302      	adds	r3, #2
 8004044:	b2da      	uxtb	r2, r3
 8004046:	88fb      	ldrh	r3, [r7, #6]
 8004048:	4611      	mov	r1, r2
 800404a:	4618      	mov	r0, r3
 800404c:	f005 fbde 	bl	800980c <MFX_IO_Read>
 8004050:	4603      	mov	r3, r0
 8004052:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8004054:	793b      	ldrb	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d004      	beq.n	8004064 <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 800405a:	7bfa      	ldrb	r2, [r7, #15]
 800405c:	7b3b      	ldrb	r3, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	73fb      	strb	r3, [r7, #15]
 8004062:	e008      	b.n	8004076 <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8004064:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8004068:	43db      	mvns	r3, r3
 800406a:	b25a      	sxtb	r2, r3
 800406c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004070:	4013      	ands	r3, r2
 8004072:	b25b      	sxtb	r3, r3
 8004074:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 8004076:	797b      	ldrb	r3, [r7, #5]
 8004078:	3302      	adds	r3, #2
 800407a:	b2d9      	uxtb	r1, r3
 800407c:	7bfa      	ldrb	r2, [r7, #15]
 800407e:	88fb      	ldrh	r3, [r7, #6]
 8004080:	4618      	mov	r0, r3
 8004082:	f005 fbaf 	bl	80097e4 <MFX_IO_Write>
  }
}
 8004086:	bf00      	nop
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8004094:	f005 fcf0 	bl	8009a78 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8004098:	2200      	movs	r2, #0
 800409a:	2100      	movs	r1, #0
 800409c:	2010      	movs	r0, #16
 800409e:	f000 f9e4 	bl	800446a <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 80040a2:	200a      	movs	r0, #10
 80040a4:	f005 fd0f 	bl	8009ac6 <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 80040a8:	2200      	movs	r2, #0
 80040aa:	2100      	movs	r1, #0
 80040ac:	2001      	movs	r0, #1
 80040ae:	f000 f9dc 	bl	800446a <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 80040b2:	20c8      	movs	r0, #200	; 0xc8
 80040b4:	f005 fd07 	bl	8009ac6 <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 80040b8:	2200      	movs	r2, #0
 80040ba:	2100      	movs	r1, #0
 80040bc:	2011      	movs	r0, #17
 80040be:	f000 f9d4 	bl	800446a <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 80040c2:	2078      	movs	r0, #120	; 0x78
 80040c4:	f005 fcff 	bl	8009ac6 <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 80040c8:	2300      	movs	r3, #0
 80040ca:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80040cc:	463b      	mov	r3, r7
 80040ce:	2201      	movs	r2, #1
 80040d0:	4619      	mov	r1, r3
 80040d2:	2036      	movs	r0, #54	; 0x36
 80040d4:	f000 f9c9 	bl	800446a <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 80040d8:	2305      	movs	r3, #5
 80040da:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 80040dc:	463b      	mov	r3, r7
 80040de:	2201      	movs	r2, #1
 80040e0:	4619      	mov	r1, r3
 80040e2:	203a      	movs	r0, #58	; 0x3a
 80040e4:	f000 f9c1 	bl	800446a <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 80040e8:	2200      	movs	r2, #0
 80040ea:	2100      	movs	r1, #0
 80040ec:	2021      	movs	r0, #33	; 0x21
 80040ee:	f000 f9bc 	bl	800446a <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 80040f2:	2300      	movs	r3, #0
 80040f4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80040f6:	2300      	movs	r3, #0
 80040f8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80040fa:	2300      	movs	r3, #0
 80040fc:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80040fe:	23ef      	movs	r3, #239	; 0xef
 8004100:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8004102:	463b      	mov	r3, r7
 8004104:	2204      	movs	r2, #4
 8004106:	4619      	mov	r1, r3
 8004108:	202a      	movs	r0, #42	; 0x2a
 800410a:	f000 f9ae 	bl	800446a <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 800410e:	2300      	movs	r3, #0
 8004110:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8004112:	2300      	movs	r3, #0
 8004114:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8004116:	2300      	movs	r3, #0
 8004118:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 800411a:	23ef      	movs	r3, #239	; 0xef
 800411c:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800411e:	463b      	mov	r3, r7
 8004120:	2204      	movs	r2, #4
 8004122:	4619      	mov	r1, r3
 8004124:	202b      	movs	r0, #43	; 0x2b
 8004126:	f000 f9a0 	bl	800446a <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 800412a:	230c      	movs	r3, #12
 800412c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 800412e:	230c      	movs	r3, #12
 8004130:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8004132:	2300      	movs	r3, #0
 8004134:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8004136:	2333      	movs	r3, #51	; 0x33
 8004138:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 800413a:	2333      	movs	r3, #51	; 0x33
 800413c:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 800413e:	463b      	mov	r3, r7
 8004140:	2205      	movs	r2, #5
 8004142:	4619      	mov	r1, r3
 8004144:	20b2      	movs	r0, #178	; 0xb2
 8004146:	f000 f990 	bl	800446a <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 800414a:	2335      	movs	r3, #53	; 0x35
 800414c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 800414e:	463b      	mov	r3, r7
 8004150:	2201      	movs	r2, #1
 8004152:	4619      	mov	r1, r3
 8004154:	20b7      	movs	r0, #183	; 0xb7
 8004156:	f000 f988 	bl	800446a <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 800415a:	231f      	movs	r3, #31
 800415c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 800415e:	463b      	mov	r3, r7
 8004160:	2201      	movs	r2, #1
 8004162:	4619      	mov	r1, r3
 8004164:	20bb      	movs	r0, #187	; 0xbb
 8004166:	f000 f980 	bl	800446a <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 800416a:	232c      	movs	r3, #44	; 0x2c
 800416c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 800416e:	463b      	mov	r3, r7
 8004170:	2201      	movs	r2, #1
 8004172:	4619      	mov	r1, r3
 8004174:	20c0      	movs	r0, #192	; 0xc0
 8004176:	f000 f978 	bl	800446a <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 800417a:	2301      	movs	r3, #1
 800417c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 800417e:	23c3      	movs	r3, #195	; 0xc3
 8004180:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8004182:	463b      	mov	r3, r7
 8004184:	2202      	movs	r2, #2
 8004186:	4619      	mov	r1, r3
 8004188:	20c2      	movs	r0, #194	; 0xc2
 800418a:	f000 f96e 	bl	800446a <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 800418e:	2320      	movs	r3, #32
 8004190:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8004192:	463b      	mov	r3, r7
 8004194:	2201      	movs	r2, #1
 8004196:	4619      	mov	r1, r3
 8004198:	20c4      	movs	r0, #196	; 0xc4
 800419a:	f000 f966 	bl	800446a <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 800419e:	230f      	movs	r3, #15
 80041a0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 80041a2:	463b      	mov	r3, r7
 80041a4:	2201      	movs	r2, #1
 80041a6:	4619      	mov	r1, r3
 80041a8:	20c6      	movs	r0, #198	; 0xc6
 80041aa:	f000 f95e 	bl	800446a <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 80041ae:	23a4      	movs	r3, #164	; 0xa4
 80041b0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 80041b2:	23a1      	movs	r3, #161	; 0xa1
 80041b4:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 2); 
 80041b6:	463b      	mov	r3, r7
 80041b8:	2202      	movs	r2, #2
 80041ba:	4619      	mov	r1, r3
 80041bc:	20d0      	movs	r0, #208	; 0xd0
 80041be:	f000 f954 	bl	800446a <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 80041c2:	23d0      	movs	r3, #208	; 0xd0
 80041c4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 80041c6:	2308      	movs	r3, #8
 80041c8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 80041ca:	2311      	movs	r3, #17
 80041cc:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 80041ce:	2308      	movs	r3, #8
 80041d0:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 80041d2:	230c      	movs	r3, #12
 80041d4:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 80041d6:	2315      	movs	r3, #21
 80041d8:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 80041da:	2339      	movs	r3, #57	; 0x39
 80041dc:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 80041de:	2333      	movs	r3, #51	; 0x33
 80041e0:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 80041e2:	2350      	movs	r3, #80	; 0x50
 80041e4:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 80041e6:	2336      	movs	r3, #54	; 0x36
 80041e8:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 80041ea:	2313      	movs	r3, #19
 80041ec:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 80041ee:	2314      	movs	r3, #20
 80041f0:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 80041f2:	2329      	movs	r3, #41	; 0x29
 80041f4:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 80041f6:	232d      	movs	r3, #45	; 0x2d
 80041f8:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 80041fa:	463b      	mov	r3, r7
 80041fc:	220e      	movs	r2, #14
 80041fe:	4619      	mov	r1, r3
 8004200:	20e0      	movs	r0, #224	; 0xe0
 8004202:	f000 f932 	bl	800446a <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8004206:	23d0      	movs	r3, #208	; 0xd0
 8004208:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 800420a:	2308      	movs	r3, #8
 800420c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 800420e:	2310      	movs	r3, #16
 8004210:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8004212:	2308      	movs	r3, #8
 8004214:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8004216:	2306      	movs	r3, #6
 8004218:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 800421a:	2306      	movs	r3, #6
 800421c:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 800421e:	2339      	movs	r3, #57	; 0x39
 8004220:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8004222:	2344      	movs	r3, #68	; 0x44
 8004224:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8004226:	2351      	movs	r3, #81	; 0x51
 8004228:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 800422a:	230b      	movs	r3, #11
 800422c:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 800422e:	2316      	movs	r3, #22
 8004230:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8004232:	2314      	movs	r3, #20
 8004234:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8004236:	232f      	movs	r3, #47	; 0x2f
 8004238:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 800423a:	2331      	movs	r3, #49	; 0x31
 800423c:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 800423e:	463b      	mov	r3, r7
 8004240:	220e      	movs	r2, #14
 8004242:	4619      	mov	r1, r3
 8004244:	20e1      	movs	r0, #225	; 0xe1
 8004246:	f000 f910 	bl	800446a <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 800424a:	f000 f847 	bl	80042dc <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 800424e:	2300      	movs	r3, #0
 8004250:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8004252:	463b      	mov	r3, r7
 8004254:	2201      	movs	r2, #1
 8004256:	4619      	mov	r1, r3
 8004258:	2035      	movs	r0, #53	; 0x35
 800425a:	f000 f906 	bl	800446a <ST7789H2_WriteReg>

}
 800425e:	bf00      	nop
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b084      	sub	sp, #16
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d102      	bne.n	800427a <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8004274:	2300      	movs	r3, #0
 8004276:	723b      	strb	r3, [r7, #8]
 8004278:	e025      	b.n	80042c6 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b02      	cmp	r3, #2
 800427e:	d120      	bne.n	80042c2 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8004280:	2300      	movs	r3, #0
 8004282:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8004284:	2300      	movs	r3, #0
 8004286:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8004288:	2301      	movs	r3, #1
 800428a:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 800428c:	23f0      	movs	r3, #240	; 0xf0
 800428e:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8004290:	2300      	movs	r3, #0
 8004292:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8004294:	2300      	movs	r3, #0
 8004296:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8004298:	f107 0308 	add.w	r3, r7, #8
 800429c:	2206      	movs	r2, #6
 800429e:	4619      	mov	r1, r3
 80042a0:	2033      	movs	r0, #51	; 0x33
 80042a2:	f000 f8e2 	bl	800446a <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 80042a6:	2300      	movs	r3, #0
 80042a8:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 80042aa:	2350      	movs	r3, #80	; 0x50
 80042ac:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 80042ae:	f107 0308 	add.w	r3, r7, #8
 80042b2:	2202      	movs	r2, #2
 80042b4:	4619      	mov	r1, r3
 80042b6:	2037      	movs	r0, #55	; 0x37
 80042b8:	f000 f8d7 	bl	800446a <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 80042bc:	23c0      	movs	r3, #192	; 0xc0
 80042be:	723b      	strb	r3, [r7, #8]
 80042c0:	e001      	b.n	80042c6 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 80042c2:	2360      	movs	r3, #96	; 0x60
 80042c4:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80042c6:	f107 0308 	add.w	r3, r7, #8
 80042ca:	2201      	movs	r2, #1
 80042cc:	4619      	mov	r1, r3
 80042ce:	2036      	movs	r0, #54	; 0x36
 80042d0:	f000 f8cb 	bl	800446a <ST7789H2_WriteReg>
}
 80042d4:	bf00      	nop
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 80042e0:	2200      	movs	r2, #0
 80042e2:	2100      	movs	r1, #0
 80042e4:	2029      	movs	r0, #41	; 0x29
 80042e6:	f000 f8c0 	bl	800446a <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 80042ea:	2200      	movs	r2, #0
 80042ec:	2100      	movs	r1, #0
 80042ee:	2011      	movs	r0, #17
 80042f0:	f000 f8bb 	bl	800446a <ST7789H2_WriteReg>
}
 80042f4:	bf00      	nop
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 80042fe:	23fe      	movs	r3, #254	; 0xfe
 8004300:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8004302:	1d3b      	adds	r3, r7, #4
 8004304:	2201      	movs	r2, #1
 8004306:	4619      	mov	r1, r3
 8004308:	20bd      	movs	r0, #189	; 0xbd
 800430a:	f000 f8ae 	bl	800446a <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 800430e:	2200      	movs	r2, #0
 8004310:	2100      	movs	r1, #0
 8004312:	2010      	movs	r0, #16
 8004314:	f000 f8a9 	bl	800446a <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8004318:	200a      	movs	r0, #10
 800431a:	f005 fbd4 	bl	8009ac6 <LCD_IO_Delay>
}
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8004326:	b480      	push	{r7}
 8004328:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 800432a:	23f0      	movs	r3, #240	; 0xf0
}
 800432c:	4618      	mov	r0, r3
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8004336:	b480      	push	{r7}
 8004338:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 800433a:	23f0      	movs	r3, #240	; 0xf0
}
 800433c:	4618      	mov	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800434a:	f005 fb95 	bl	8009a78 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 800434e:	2004      	movs	r0, #4
 8004350:	f000 f8ae 	bl	80044b0 <ST7789H2_ReadReg>
 8004354:	4603      	mov	r3, r0
 8004356:	b29b      	uxth	r3, r3
}
 8004358:	4618      	mov	r0, r3
 800435a:	bd80      	pop	{r7, pc}

0800435c <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	4603      	mov	r3, r0
 8004364:	460a      	mov	r2, r1
 8004366:	80fb      	strh	r3, [r7, #6]
 8004368:	4613      	mov	r3, r2
 800436a:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 800436c:	2300      	movs	r3, #0
 800436e:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 8004370:	88fb      	ldrh	r3, [r7, #6]
 8004372:	b2db      	uxtb	r3, r3
 8004374:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8004376:	2300      	movs	r3, #0
 8004378:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 800437a:	88fb      	ldrh	r3, [r7, #6]
 800437c:	b2db      	uxtb	r3, r3
 800437e:	3b11      	subs	r3, #17
 8004380:	b2db      	uxtb	r3, r3
 8004382:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8004384:	f107 030c 	add.w	r3, r7, #12
 8004388:	2204      	movs	r2, #4
 800438a:	4619      	mov	r1, r3
 800438c:	202a      	movs	r0, #42	; 0x2a
 800438e:	f000 f86c 	bl	800446a <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 8004392:	2300      	movs	r3, #0
 8004394:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8004396:	88bb      	ldrh	r3, [r7, #4]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 800439c:	2300      	movs	r3, #0
 800439e:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 80043a0:	88bb      	ldrh	r3, [r7, #4]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	3b11      	subs	r3, #17
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 80043aa:	f107 030c 	add.w	r3, r7, #12
 80043ae:	2204      	movs	r2, #4
 80043b0:	4619      	mov	r1, r3
 80043b2:	202b      	movs	r0, #43	; 0x2b
 80043b4:	f000 f859 	bl	800446a <ST7789H2_WriteReg>
}
 80043b8:	bf00      	nop
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	4603      	mov	r3, r0
 80043c8:	80fb      	strh	r3, [r7, #6]
 80043ca:	460b      	mov	r3, r1
 80043cc:	80bb      	strh	r3, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80043d2:	88ba      	ldrh	r2, [r7, #4]
 80043d4:	88fb      	ldrh	r3, [r7, #6]
 80043d6:	4611      	mov	r1, r2
 80043d8:	4618      	mov	r0, r3
 80043da:	f7ff ffbf 	bl	800435c <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80043de:	2200      	movs	r2, #0
 80043e0:	2100      	movs	r1, #0
 80043e2:	202c      	movs	r0, #44	; 0x2c
 80043e4:	f000 f841 	bl	800446a <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 80043e8:	887b      	ldrh	r3, [r7, #2]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f005 fb4a 	bl	8009a84 <LCD_IO_WriteData>
}
 80043f0:	bf00      	nop
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	4603      	mov	r3, r0
 8004400:	460a      	mov	r2, r1
 8004402:	80fb      	strh	r3, [r7, #6]
 8004404:	4613      	mov	r3, r2
 8004406:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8004408:	88ba      	ldrh	r2, [r7, #4]
 800440a:	88fb      	ldrh	r3, [r7, #6]
 800440c:	4611      	mov	r1, r2
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff ffa4 	bl	800435c <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8004414:	88ba      	ldrh	r2, [r7, #4]
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	4611      	mov	r1, r2
 800441a:	4618      	mov	r0, r3
 800441c:	f000 f9c0 	bl	80047a0 <ST7789H2_ReadPixel_rgb888>
 8004420:	4603      	mov	r3, r0
 8004422:	461a      	mov	r2, r3
 8004424:	733a      	strb	r2, [r7, #12]
 8004426:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800442a:	737a      	strb	r2, [r7, #13]
 800442c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004430:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8004432:	7b3b      	ldrb	r3, [r7, #12]
 8004434:	08db      	lsrs	r3, r3, #3
 8004436:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8004438:	7b7b      	ldrb	r3, [r7, #13]
 800443a:	089b      	lsrs	r3, r3, #2
 800443c:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 800443e:	7bbb      	ldrb	r3, [r7, #14]
 8004440:	08db      	lsrs	r3, r3, #3
 8004442:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8004444:	7dfb      	ldrb	r3, [r7, #23]
 8004446:	b29b      	uxth	r3, r3
 8004448:	02db      	lsls	r3, r3, #11
 800444a:	b29a      	uxth	r2, r3
 800444c:	7dbb      	ldrb	r3, [r7, #22]
 800444e:	b29b      	uxth	r3, r3
 8004450:	015b      	lsls	r3, r3, #5
 8004452:	b29b      	uxth	r3, r3
 8004454:	4413      	add	r3, r2
 8004456:	b29a      	uxth	r2, r3
 8004458:	7d7b      	ldrb	r3, [r7, #21]
 800445a:	b29b      	uxth	r3, r3
 800445c:	4413      	add	r3, r2
 800445e:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 8004460:	8a7b      	ldrh	r3, [r7, #18]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b084      	sub	sp, #16
 800446e:	af00      	add	r7, sp, #0
 8004470:	4603      	mov	r3, r0
 8004472:	6039      	str	r1, [r7, #0]
 8004474:	71fb      	strb	r3, [r7, #7]
 8004476:	4613      	mov	r3, r2
 8004478:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	4618      	mov	r0, r3
 800447e:	f005 fb0e 	bl	8009a9e <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 8004482:	2300      	movs	r3, #0
 8004484:	73fb      	strb	r3, [r7, #15]
 8004486:	e00a      	b.n	800449e <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8004488:	7bfb      	ldrb	r3, [r7, #15]
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	4413      	add	r3, r2
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	b29b      	uxth	r3, r3
 8004492:	4618      	mov	r0, r3
 8004494:	f005 faf6 	bl	8009a84 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	3301      	adds	r3, #1
 800449c:	73fb      	strb	r3, [r7, #15]
 800449e:	7bfa      	ldrb	r2, [r7, #15]
 80044a0:	79bb      	ldrb	r3, [r7, #6]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d3f0      	bcc.n	8004488 <ST7789H2_WriteReg+0x1e>
  }
}
 80044a6:	bf00      	nop
 80044a8:	bf00      	nop
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	4603      	mov	r3, r0
 80044b8:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	4618      	mov	r0, r3
 80044be:	f005 faee 	bl	8009a9e <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 80044c2:	f005 faf9 	bl	8009ab8 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 80044c6:	f005 faf7 	bl	8009ab8 <LCD_IO_ReadData>
 80044ca:	4603      	mov	r3, r0
 80044cc:	b2db      	uxtb	r3, r3
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80044d8:	b490      	push	{r4, r7}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4604      	mov	r4, r0
 80044e0:	4608      	mov	r0, r1
 80044e2:	4611      	mov	r1, r2
 80044e4:	461a      	mov	r2, r3
 80044e6:	4623      	mov	r3, r4
 80044e8:	80fb      	strh	r3, [r7, #6]
 80044ea:	4603      	mov	r3, r0
 80044ec:	80bb      	strh	r3, [r7, #4]
 80044ee:	460b      	mov	r3, r1
 80044f0:	807b      	strh	r3, [r7, #2]
 80044f2:	4613      	mov	r3, r2
 80044f4:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 80044f6:	88fb      	ldrh	r3, [r7, #6]
 80044f8:	2bef      	cmp	r3, #239	; 0xef
 80044fa:	d803      	bhi.n	8004504 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 80044fc:	4a1b      	ldr	r2, [pc, #108]	; (800456c <ST7789H2_SetDisplayWindow+0x94>)
 80044fe:	88fb      	ldrh	r3, [r7, #6]
 8004500:	8013      	strh	r3, [r2, #0]
 8004502:	e002      	b.n	800450a <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8004504:	4b19      	ldr	r3, [pc, #100]	; (800456c <ST7789H2_SetDisplayWindow+0x94>)
 8004506:	2200      	movs	r2, #0
 8004508:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 800450a:	88bb      	ldrh	r3, [r7, #4]
 800450c:	2bef      	cmp	r3, #239	; 0xef
 800450e:	d803      	bhi.n	8004518 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8004510:	4a17      	ldr	r2, [pc, #92]	; (8004570 <ST7789H2_SetDisplayWindow+0x98>)
 8004512:	88bb      	ldrh	r3, [r7, #4]
 8004514:	8013      	strh	r3, [r2, #0]
 8004516:	e002      	b.n	800451e <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 8004518:	4b15      	ldr	r3, [pc, #84]	; (8004570 <ST7789H2_SetDisplayWindow+0x98>)
 800451a:	2200      	movs	r2, #0
 800451c:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 800451e:	887a      	ldrh	r2, [r7, #2]
 8004520:	88fb      	ldrh	r3, [r7, #6]
 8004522:	4413      	add	r3, r2
 8004524:	2bf0      	cmp	r3, #240	; 0xf0
 8004526:	dc08      	bgt.n	800453a <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8004528:	887a      	ldrh	r2, [r7, #2]
 800452a:	88fb      	ldrh	r3, [r7, #6]
 800452c:	4413      	add	r3, r2
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	4b0f      	ldr	r3, [pc, #60]	; (8004574 <ST7789H2_SetDisplayWindow+0x9c>)
 8004536:	801a      	strh	r2, [r3, #0]
 8004538:	e002      	b.n	8004540 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 800453a:	4b0e      	ldr	r3, [pc, #56]	; (8004574 <ST7789H2_SetDisplayWindow+0x9c>)
 800453c:	22ef      	movs	r2, #239	; 0xef
 800453e:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 8004540:	883a      	ldrh	r2, [r7, #0]
 8004542:	88bb      	ldrh	r3, [r7, #4]
 8004544:	4413      	add	r3, r2
 8004546:	2bf0      	cmp	r3, #240	; 0xf0
 8004548:	dc08      	bgt.n	800455c <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 800454a:	883a      	ldrh	r2, [r7, #0]
 800454c:	88bb      	ldrh	r3, [r7, #4]
 800454e:	4413      	add	r3, r2
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	4b08      	ldr	r3, [pc, #32]	; (8004578 <ST7789H2_SetDisplayWindow+0xa0>)
 8004558:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 800455a:	e002      	b.n	8004562 <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 800455c:	4b06      	ldr	r3, [pc, #24]	; (8004578 <ST7789H2_SetDisplayWindow+0xa0>)
 800455e:	22ef      	movs	r2, #239	; 0xef
 8004560:	801a      	strh	r2, [r3, #0]
}
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bc90      	pop	{r4, r7}
 800456a:	4770      	bx	lr
 800456c:	20000fa0 	.word	0x20000fa0
 8004570:	20000fa2 	.word	0x20000fa2
 8004574:	2000026c 	.word	0x2000026c
 8004578:	2000026e 	.word	0x2000026e

0800457c <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800457c:	b590      	push	{r4, r7, lr}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	4604      	mov	r4, r0
 8004584:	4608      	mov	r0, r1
 8004586:	4611      	mov	r1, r2
 8004588:	461a      	mov	r2, r3
 800458a:	4623      	mov	r3, r4
 800458c:	80fb      	strh	r3, [r7, #6]
 800458e:	4603      	mov	r3, r0
 8004590:	80bb      	strh	r3, [r7, #4]
 8004592:	460b      	mov	r3, r1
 8004594:	807b      	strh	r3, [r7, #2]
 8004596:	4613      	mov	r3, r2
 8004598:	803b      	strh	r3, [r7, #0]
  uint16_t counter;
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 800459a:	887a      	ldrh	r2, [r7, #2]
 800459c:	88bb      	ldrh	r3, [r7, #4]
 800459e:	4611      	mov	r1, r2
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff fedb 	bl	800435c <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80045a6:	2200      	movs	r2, #0
 80045a8:	2100      	movs	r1, #0
 80045aa:	202c      	movs	r0, #44	; 0x2c
 80045ac:	f7ff ff5d 	bl	800446a <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 80045b0:	2300      	movs	r3, #0
 80045b2:	81fb      	strh	r3, [r7, #14]
 80045b4:	e006      	b.n	80045c4 <ST7789H2_DrawHLine+0x48>
  {
    LCD_IO_WriteData(RGBCode);
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f005 fa63 	bl	8009a84 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 80045be:	89fb      	ldrh	r3, [r7, #14]
 80045c0:	3301      	adds	r3, #1
 80045c2:	81fb      	strh	r3, [r7, #14]
 80045c4:	89fa      	ldrh	r2, [r7, #14]
 80045c6:	883b      	ldrh	r3, [r7, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d3f4      	bcc.n	80045b6 <ST7789H2_DrawHLine+0x3a>
  }  
}
 80045cc:	bf00      	nop
 80045ce:	bf00      	nop
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd90      	pop	{r4, r7, pc}

080045d6 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80045d6:	b590      	push	{r4, r7, lr}
 80045d8:	b085      	sub	sp, #20
 80045da:	af00      	add	r7, sp, #0
 80045dc:	4604      	mov	r4, r0
 80045de:	4608      	mov	r0, r1
 80045e0:	4611      	mov	r1, r2
 80045e2:	461a      	mov	r2, r3
 80045e4:	4623      	mov	r3, r4
 80045e6:	80fb      	strh	r3, [r7, #6]
 80045e8:	4603      	mov	r3, r0
 80045ea:	80bb      	strh	r3, [r7, #4]
 80045ec:	460b      	mov	r3, r1
 80045ee:	807b      	strh	r3, [r7, #2]
 80045f0:	4613      	mov	r3, r2
 80045f2:	803b      	strh	r3, [r7, #0]
  uint16_t counter;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80045f4:	887a      	ldrh	r2, [r7, #2]
 80045f6:	88bb      	ldrh	r3, [r7, #4]
 80045f8:	4611      	mov	r1, r2
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff feae 	bl	800435c <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8004600:	2200      	movs	r2, #0
 8004602:	2100      	movs	r1, #0
 8004604:	202c      	movs	r0, #44	; 0x2c
 8004606:	f7ff ff30 	bl	800446a <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 800460a:	2300      	movs	r3, #0
 800460c:	81fb      	strh	r3, [r7, #14]
 800460e:	e00b      	b.n	8004628 <ST7789H2_DrawVLine+0x52>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8004610:	887a      	ldrh	r2, [r7, #2]
 8004612:	89fb      	ldrh	r3, [r7, #14]
 8004614:	4413      	add	r3, r2
 8004616:	b299      	uxth	r1, r3
 8004618:	88fa      	ldrh	r2, [r7, #6]
 800461a:	88bb      	ldrh	r3, [r7, #4]
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff fecf 	bl	80043c0 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8004622:	89fb      	ldrh	r3, [r7, #14]
 8004624:	3301      	adds	r3, #1
 8004626:	81fb      	strh	r3, [r7, #14]
 8004628:	89fa      	ldrh	r2, [r7, #14]
 800462a:	883b      	ldrh	r3, [r7, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d3ef      	bcc.n	8004610 <ST7789H2_DrawVLine+0x3a>
  }
}
 8004630:	bf00      	nop
 8004632:	bf00      	nop
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	bd90      	pop	{r4, r7, pc}
	...

0800463c <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b088      	sub	sp, #32
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	603a      	str	r2, [r7, #0]
 8004646:	80fb      	strh	r3, [r7, #6]
 8004648:	460b      	mov	r3, r1
 800464a:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	2300      	movs	r3, #0
 8004652:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8004654:	2300      	movs	r3, #0
 8004656:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8004658:	4b30      	ldr	r3, [pc, #192]	; (800471c <ST7789H2_DrawBitmap+0xe0>)
 800465a:	881a      	ldrh	r2, [r3, #0]
 800465c:	4b30      	ldr	r3, [pc, #192]	; (8004720 <ST7789H2_DrawBitmap+0xe4>)
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	b29b      	uxth	r3, r3
 8004664:	3301      	adds	r3, #1
 8004666:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8004668:	4b2e      	ldr	r3, [pc, #184]	; (8004724 <ST7789H2_DrawBitmap+0xe8>)
 800466a:	881a      	ldrh	r2, [r3, #0]
 800466c:	4b2e      	ldr	r3, [pc, #184]	; (8004728 <ST7789H2_DrawBitmap+0xec>)
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	b29b      	uxth	r3, r3
 8004674:	3301      	adds	r3, #1
 8004676:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	3302      	adds	r3, #2
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	3304      	adds	r3, #4
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	b29b      	uxth	r3, r3
 800468a:	041b      	lsls	r3, r3, #16
 800468c:	461a      	mov	r2, r3
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	330a      	adds	r3, #10
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	b29b      	uxth	r3, r3
 800469c:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	330c      	adds	r3, #12
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	041b      	lsls	r3, r3, #16
 80046a8:	461a      	mov	r2, r3
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	085b      	lsrs	r3, r3, #1
 80046b8:	613b      	str	r3, [r7, #16]
  pbmp += index;
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	4413      	add	r3, r2
 80046c0:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80046c2:	88ba      	ldrh	r2, [r7, #4]
 80046c4:	89bb      	ldrh	r3, [r7, #12]
 80046c6:	4413      	add	r3, r2
 80046c8:	61fb      	str	r3, [r7, #28]
 80046ca:	e01d      	b.n	8004708 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	88fb      	ldrh	r3, [r7, #6]
 80046d6:	4611      	mov	r1, r2
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff fe3f 	bl	800435c <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b299      	uxth	r1, r3
 80046e6:	89fb      	ldrh	r3, [r7, #14]
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	fb02 f303 	mul.w	r3, r2, r3
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	4413      	add	r3, r2
 80046f4:	89fa      	ldrh	r2, [r7, #14]
 80046f6:	88f8      	ldrh	r0, [r7, #6]
 80046f8:	f000 f89c 	bl	8004834 <ST7789H2_DrawRGBHLine>
    nb_line++;
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	3301      	adds	r3, #1
 8004700:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	3b01      	subs	r3, #1
 8004706:	61fb      	str	r3, [r7, #28]
 8004708:	88bb      	ldrh	r3, [r7, #4]
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	429a      	cmp	r2, r3
 800470e:	d8dd      	bhi.n	80046cc <ST7789H2_DrawBitmap+0x90>
  }
}
 8004710:	bf00      	nop
 8004712:	bf00      	nop
 8004714:	3720      	adds	r7, #32
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	2000026c 	.word	0x2000026c
 8004720:	20000fa0 	.word	0x20000fa0
 8004724:	2000026e 	.word	0x2000026e
 8004728:	20000fa2 	.word	0x20000fa2

0800472c <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 800472c:	b590      	push	{r4, r7, lr}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	4604      	mov	r4, r0
 8004734:	4608      	mov	r0, r1
 8004736:	4611      	mov	r1, r2
 8004738:	461a      	mov	r2, r3
 800473a:	4623      	mov	r3, r4
 800473c:	80fb      	strh	r3, [r7, #6]
 800473e:	4603      	mov	r3, r0
 8004740:	80bb      	strh	r3, [r7, #4]
 8004742:	460b      	mov	r3, r1
 8004744:	807b      	strh	r3, [r7, #2]
 8004746:	4613      	mov	r3, r2
 8004748:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 800474a:	2300      	movs	r3, #0
 800474c:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800474e:	88bb      	ldrh	r3, [r7, #4]
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	e019      	b.n	8004788 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	b29a      	uxth	r2, r3
 8004758:	88fb      	ldrh	r3, [r7, #6]
 800475a:	4611      	mov	r1, r2
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff fdfd 	bl	800435c <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	b299      	uxth	r1, r3
 8004766:	887b      	ldrh	r3, [r7, #2]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	fb02 f303 	mul.w	r3, r2, r3
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	6a3a      	ldr	r2, [r7, #32]
 8004772:	4413      	add	r3, r2
 8004774:	887a      	ldrh	r2, [r7, #2]
 8004776:	88f8      	ldrh	r0, [r7, #6]
 8004778:	f000 f85c 	bl	8004834 <ST7789H2_DrawRGBHLine>
    nb_line++;
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	3301      	adds	r3, #1
 8004780:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3301      	adds	r3, #1
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	88ba      	ldrh	r2, [r7, #4]
 800478a:	883b      	ldrh	r3, [r7, #0]
 800478c:	4413      	add	r3, r2
 800478e:	461a      	mov	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4293      	cmp	r3, r2
 8004794:	d3de      	bcc.n	8004754 <ST7789H2_DrawRGBImage+0x28>
  }
}
 8004796:	bf00      	nop
 8004798:	bf00      	nop
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	bd90      	pop	{r4, r7, pc}

080047a0 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	460a      	mov	r2, r1
 80047aa:	80fb      	strh	r3, [r7, #6]
 80047ac:	4613      	mov	r3, r2
 80047ae:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80047b0:	88ba      	ldrh	r2, [r7, #4]
 80047b2:	88fb      	ldrh	r3, [r7, #6]
 80047b4:	4611      	mov	r1, r2
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff fdd0 	bl	800435c <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 80047bc:	2200      	movs	r2, #0
 80047be:	2100      	movs	r1, #0
 80047c0:	202e      	movs	r0, #46	; 0x2e
 80047c2:	f7ff fe52 	bl	800446a <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 80047c6:	f005 f977 	bl	8009ab8 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 80047ca:	f005 f975 	bl	8009ab8 <LCD_IO_ReadData>
 80047ce:	4603      	mov	r3, r0
 80047d0:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 80047d2:	f005 f971 	bl	8009ab8 <LCD_IO_ReadData>
 80047d6:	4603      	mov	r3, r0
 80047d8:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 80047da:	8afb      	ldrh	r3, [r7, #22]
 80047dc:	121b      	asrs	r3, r3, #8
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	f023 0303 	bic.w	r3, r3, #3
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 80047e8:	8afb      	ldrh	r3, [r7, #22]
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	f023 0303 	bic.w	r3, r3, #3
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 80047f4:	8abb      	ldrh	r3, [r7, #20]
 80047f6:	121b      	asrs	r3, r3, #8
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	f023 0303 	bic.w	r3, r3, #3
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8004802:	f107 0310 	add.w	r3, r7, #16
 8004806:	f107 020c 	add.w	r2, r7, #12
 800480a:	6812      	ldr	r2, [r2, #0]
 800480c:	4611      	mov	r1, r2
 800480e:	8019      	strh	r1, [r3, #0]
 8004810:	3302      	adds	r3, #2
 8004812:	0c12      	lsrs	r2, r2, #16
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	2300      	movs	r3, #0
 8004818:	7c3a      	ldrb	r2, [r7, #16]
 800481a:	f362 0307 	bfi	r3, r2, #0, #8
 800481e:	7c7a      	ldrb	r2, [r7, #17]
 8004820:	f362 230f 	bfi	r3, r2, #8, #8
 8004824:	7cba      	ldrb	r2, [r7, #18]
 8004826:	f362 4317 	bfi	r3, r2, #16, #8
}
 800482a:	4618      	mov	r0, r3
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b088      	sub	sp, #32
 8004838:	af00      	add	r7, sp, #0
 800483a:	607b      	str	r3, [r7, #4]
 800483c:	4603      	mov	r3, r0
 800483e:	81fb      	strh	r3, [r7, #14]
 8004840:	460b      	mov	r3, r1
 8004842:	81bb      	strh	r3, [r7, #12]
 8004844:	4613      	mov	r3, r2
 8004846:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8004850:	2200      	movs	r2, #0
 8004852:	2100      	movs	r1, #0
 8004854:	202c      	movs	r0, #44	; 0x2c
 8004856:	f7ff fe08 	bl	800446a <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 800485a:	89fb      	ldrh	r3, [r7, #14]
 800485c:	61bb      	str	r3, [r7, #24]
 800485e:	e029      	b.n	80048b4 <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8004860:	4b1a      	ldr	r3, [pc, #104]	; (80048cc <ST7789H2_DrawRGBHLine+0x98>)
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	461a      	mov	r2, r3
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	4293      	cmp	r3, r2
 800486a:	d320      	bcc.n	80048ae <ST7789H2_DrawRGBHLine+0x7a>
 800486c:	4b18      	ldr	r3, [pc, #96]	; (80048d0 <ST7789H2_DrawRGBHLine+0x9c>)
 800486e:	881b      	ldrh	r3, [r3, #0]
 8004870:	89ba      	ldrh	r2, [r7, #12]
 8004872:	429a      	cmp	r2, r3
 8004874:	d31b      	bcc.n	80048ae <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8004876:	4b17      	ldr	r3, [pc, #92]	; (80048d4 <ST7789H2_DrawRGBHLine+0xa0>)
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	4293      	cmp	r3, r2
 8004880:	d815      	bhi.n	80048ae <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8004882:	4b15      	ldr	r3, [pc, #84]	; (80048d8 <ST7789H2_DrawRGBHLine+0xa4>)
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	89ba      	ldrh	r2, [r7, #12]
 8004888:	429a      	cmp	r2, r3
 800488a:	d810      	bhi.n	80048ae <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 800488c:	897a      	ldrh	r2, [r7, #10]
 800488e:	89fb      	ldrh	r3, [r7, #14]
 8004890:	441a      	add	r2, r3
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	429a      	cmp	r2, r3
 8004896:	d007      	beq.n	80048a8 <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	4413      	add	r3, r2
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f005 f8ee 	bl	8009a84 <LCD_IO_WriteData>
      }      
      i++;
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	3301      	adds	r3, #1
 80048ac:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	3301      	adds	r3, #1
 80048b2:	61bb      	str	r3, [r7, #24]
 80048b4:	897a      	ldrh	r2, [r7, #10]
 80048b6:	89fb      	ldrh	r3, [r7, #14]
 80048b8:	4413      	add	r3, r2
 80048ba:	461a      	mov	r2, r3
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	4293      	cmp	r3, r2
 80048c0:	d3ce      	bcc.n	8004860 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 80048c2:	bf00      	nop
 80048c4:	bf00      	nop
 80048c6:	3720      	adds	r7, #32
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	20000fa0 	.word	0x20000fa0
 80048d0:	20000fa2 	.word	0x20000fa2
 80048d4:	2000026c 	.word	0x2000026c
 80048d8:	2000026e 	.word	0x2000026e

080048dc <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80048e6:	2300      	movs	r3, #0
 80048e8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80048ea:	6839      	ldr	r1, [r7, #0]
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f001 fcc0 	bl	8006272 <VL53L0X_get_offset_calibration_data_micro_meter>
 80048f2:	4603      	mov	r3, r0
 80048f4:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80048f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
	...

08004904 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8004904:	b5b0      	push	{r4, r5, r7, lr}
 8004906:	b096      	sub	sp, #88	; 0x58
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800490c:	2300      	movs	r3, #0
 800490e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8004912:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004916:	2b00      	cmp	r3, #0
 8004918:	d107      	bne.n	800492a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800491a:	2200      	movs	r2, #0
 800491c:	2188      	movs	r1, #136	; 0x88
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fe f84c 	bl	80029bc <VL53L0X_WrByte>
 8004924:	4603      	mov	r3, r0
 8004926:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004938:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004942:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a9e      	ldr	r2, [pc, #632]	; (8004bc4 <VL53L0X_DataInit+0x2c0>)
 800494a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a9d      	ldr	r2, [pc, #628]	; (8004bc8 <VL53L0X_DataInit+0x2c4>)
 8004952:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800495c:	f107 0310 	add.w	r3, r7, #16
 8004960:	4619      	mov	r1, r3
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fab4 	bl	8004ed0 <VL53L0X_GetDeviceParameters>
 8004968:	4603      	mov	r3, r0
 800496a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800496e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004972:	2b00      	cmp	r3, #0
 8004974:	d112      	bne.n	800499c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8004976:	2300      	movs	r3, #0
 8004978:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800497a:	2300      	movs	r3, #0
 800497c:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f103 0410 	add.w	r4, r3, #16
 8004984:	f107 0510 	add.w	r5, r7, #16
 8004988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800498a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800498c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800498e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004994:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004998:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2264      	movs	r2, #100	; 0x64
 80049a0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f44f 7261 	mov.w	r2, #900	; 0x384
 80049aa:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80049b4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80049be:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80049ca:	2201      	movs	r2, #1
 80049cc:	2180      	movs	r1, #128	; 0x80
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fd fff4 	bl	80029bc <VL53L0X_WrByte>
 80049d4:	4603      	mov	r3, r0
 80049d6:	461a      	mov	r2, r3
 80049d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049dc:	4313      	orrs	r3, r2
 80049de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80049e2:	2201      	movs	r2, #1
 80049e4:	21ff      	movs	r1, #255	; 0xff
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7fd ffe8 	bl	80029bc <VL53L0X_WrByte>
 80049ec:	4603      	mov	r3, r0
 80049ee:	461a      	mov	r2, r3
 80049f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80049fa:	2200      	movs	r2, #0
 80049fc:	2100      	movs	r1, #0
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7fd ffdc 	bl	80029bc <VL53L0X_WrByte>
 8004a04:	4603      	mov	r3, r0
 8004a06:	461a      	mov	r2, r3
 8004a08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8004a12:	f107 030f 	add.w	r3, r7, #15
 8004a16:	461a      	mov	r2, r3
 8004a18:	2191      	movs	r1, #145	; 0x91
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fe f882 	bl	8002b24 <VL53L0X_RdByte>
 8004a20:	4603      	mov	r3, r0
 8004a22:	461a      	mov	r2, r3
 8004a24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8004a2e:	7bfa      	ldrb	r2, [r7, #15]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004a36:	2201      	movs	r2, #1
 8004a38:	2100      	movs	r1, #0
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fd ffbe 	bl	80029bc <VL53L0X_WrByte>
 8004a40:	4603      	mov	r3, r0
 8004a42:	461a      	mov	r2, r3
 8004a44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004a4e:	2200      	movs	r2, #0
 8004a50:	21ff      	movs	r1, #255	; 0xff
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fd ffb2 	bl	80029bc <VL53L0X_WrByte>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004a66:	2200      	movs	r2, #0
 8004a68:	2180      	movs	r1, #128	; 0x80
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fd ffa6 	bl	80029bc <VL53L0X_WrByte>
 8004a70:	4603      	mov	r3, r0
 8004a72:	461a      	mov	r2, r3
 8004a74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004a7e:	2300      	movs	r3, #0
 8004a80:	653b      	str	r3, [r7, #80]	; 0x50
 8004a82:	e014      	b.n	8004aae <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8004a84:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d114      	bne.n	8004ab6 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8004a8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2201      	movs	r2, #1
 8004a92:	4619      	mov	r1, r3
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 fd43 	bl	8005520 <VL53L0X_SetLimitCheckEnable>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004aaa:	3301      	adds	r3, #1
 8004aac:	653b      	str	r3, [r7, #80]	; 0x50
 8004aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ab0:	2b05      	cmp	r3, #5
 8004ab2:	dde7      	ble.n	8004a84 <VL53L0X_DataInit+0x180>
 8004ab4:	e000      	b.n	8004ab8 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8004ab6:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8004ab8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d107      	bne.n	8004ad0 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	2102      	movs	r1, #2
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fd2b 	bl	8005520 <VL53L0X_SetLimitCheckEnable>
 8004aca:	4603      	mov	r3, r0
 8004acc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004ad0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d107      	bne.n	8004ae8 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2103      	movs	r1, #3
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 fd1f 	bl	8005520 <VL53L0X_SetLimitCheckEnable>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004ae8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d107      	bne.n	8004b00 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004af0:	2200      	movs	r2, #0
 8004af2:	2104      	movs	r1, #4
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fd13 	bl	8005520 <VL53L0X_SetLimitCheckEnable>
 8004afa:	4603      	mov	r3, r0
 8004afc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004b00:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d107      	bne.n	8004b18 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2105      	movs	r1, #5
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fd07 	bl	8005520 <VL53L0X_SetLimitCheckEnable>
 8004b12:	4603      	mov	r3, r0
 8004b14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8004b18:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d108      	bne.n	8004b32 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004b20:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8004b24:	2100      	movs	r1, #0
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fdaa 	bl	8005680 <VL53L0X_SetLimitCheckValue>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004b32:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d108      	bne.n	8004b4c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004b3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004b3e:	2101      	movs	r1, #1
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 fd9d 	bl	8005680 <VL53L0X_SetLimitCheckValue>
 8004b46:	4603      	mov	r3, r0
 8004b48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004b4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d108      	bne.n	8004b66 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004b54:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8004b58:	2102      	movs	r1, #2
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fd90 	bl	8005680 <VL53L0X_SetLimitCheckValue>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004b66:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d107      	bne.n	8004b7e <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004b6e:	2200      	movs	r2, #0
 8004b70:	2103      	movs	r1, #3
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 fd84 	bl	8005680 <VL53L0X_SetLimitCheckValue>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004b7e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10f      	bne.n	8004ba6 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	22ff      	movs	r2, #255	; 0xff
 8004b8a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004b8e:	22ff      	movs	r2, #255	; 0xff
 8004b90:	2101      	movs	r1, #1
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fd ff12 	bl	80029bc <VL53L0X_WrByte>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8004ba6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d103      	bne.n	8004bb6 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8004bb6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3758      	adds	r7, #88	; 0x58
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	00016b85 	.word	0x00016b85
 8004bc8:	000970a4 	.word	0x000970a4

08004bcc <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8004bcc:	b5b0      	push	{r4, r5, r7, lr}
 8004bce:	b09e      	sub	sp, #120	; 0x78
 8004bd0:	af02      	add	r7, sp, #8
 8004bd2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8004bda:	f107 031c 	add.w	r3, r7, #28
 8004bde:	2240      	movs	r2, #64	; 0x40
 8004be0:	2100      	movs	r1, #0
 8004be2:	4618      	mov	r0, r3
 8004be4:	f013 fdca 	bl	801877c <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8004c02:	2300      	movs	r3, #0
 8004c04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8004c08:	2101      	movs	r1, #1
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f002 fa74 	bl	80070f8 <VL53L0X_get_info_from_device>
 8004c10:	4603      	mov	r3, r0
 8004c12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8004c1c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8004c24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8004c28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d80d      	bhi.n	8004c4c <VL53L0X_StaticInit+0x80>
 8004c30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d102      	bne.n	8004c3e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8004c38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	d806      	bhi.n	8004c4c <VL53L0X_StaticInit+0x80>
 8004c3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10e      	bne.n	8004c64 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8004c46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c48:	2b0c      	cmp	r3, #12
 8004c4a:	d90b      	bls.n	8004c64 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8004c4c:	f107 0218 	add.w	r2, r7, #24
 8004c50:	f107 0314 	add.w	r3, r7, #20
 8004c54:	4619      	mov	r1, r3
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f001 fd06 	bl	8006668 <VL53L0X_perform_ref_spad_management>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004c62:	e009      	b.n	8004c78 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8004c64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004c68:	461a      	mov	r2, r3
 8004c6a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f001 ff07 	bl	8006a80 <VL53L0X_set_reference_spads>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8004c78:	4b94      	ldr	r3, [pc, #592]	; (8004ecc <VL53L0X_StaticInit+0x300>)
 8004c7a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8004c7c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10f      	bne.n	8004ca4 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8004c8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8004c8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d104      	bne.n	8004ca0 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8004c9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c9e:	e001      	b.n	8004ca4 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8004ca0:	4b8a      	ldr	r3, [pc, #552]	; (8004ecc <VL53L0X_StaticInit+0x300>)
 8004ca2:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004ca4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d106      	bne.n	8004cba <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8004cac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f003 fb40 	bl	8008334 <VL53L0X_load_tuning_settings>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8004cba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	2304      	movs	r3, #4
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2100      	movs	r1, #0
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f001 f8ff 	bl	8005ed0 <VL53L0X_SetGpioConfig>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004cd8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d121      	bne.n	8004d24 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	21ff      	movs	r1, #255	; 0xff
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7fd fe69 	bl	80029bc <VL53L0X_WrByte>
 8004cea:	4603      	mov	r3, r0
 8004cec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8004cf0:	f107 031a 	add.w	r3, r7, #26
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	2184      	movs	r1, #132	; 0x84
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7fd ff3d 	bl	8002b78 <VL53L0X_RdWord>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	461a      	mov	r2, r3
 8004d02:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	21ff      	movs	r1, #255	; 0xff
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7fd fe53 	bl	80029bc <VL53L0X_WrByte>
 8004d16:	4603      	mov	r3, r0
 8004d18:	461a      	mov	r2, r3
 8004d1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004d24:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d105      	bne.n	8004d38 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8004d2c:	8b7b      	ldrh	r3, [r7, #26]
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	461a      	mov	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8004d38:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d108      	bne.n	8004d52 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004d40:	f107 031c 	add.w	r3, r7, #28
 8004d44:	4619      	mov	r1, r3
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f8c2 	bl	8004ed0 <VL53L0X_GetDeviceParameters>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8004d52:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d110      	bne.n	8004d7c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8004d5a:	f107 0319 	add.w	r3, r7, #25
 8004d5e:	4619      	mov	r1, r3
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f984 	bl	800506e <VL53L0X_GetFractionEnable>
 8004d66:	4603      	mov	r3, r0
 8004d68:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8004d6c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d103      	bne.n	8004d7c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8004d74:	7e7a      	ldrb	r2, [r7, #25]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004d7c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10e      	bne.n	8004da2 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f103 0410 	add.w	r4, r3, #16
 8004d8a:	f107 051c 	add.w	r5, r7, #28
 8004d8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d9a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004d9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8004da2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d111      	bne.n	8004dce <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8004daa:	f107 0319 	add.w	r3, r7, #25
 8004dae:	461a      	mov	r2, r3
 8004db0:	2101      	movs	r1, #1
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fd feb6 	bl	8002b24 <VL53L0X_RdByte>
 8004db8:	4603      	mov	r3, r0
 8004dba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8004dbe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d103      	bne.n	8004dce <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8004dc6:	7e7a      	ldrb	r2, [r7, #25]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8004dce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d107      	bne.n	8004de6 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	2100      	movs	r1, #0
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f9a4 	bl	8005128 <VL53L0X_SetSequenceStepEnable>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8004de6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d107      	bne.n	8004dfe <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004dee:	2200      	movs	r2, #0
 8004df0:	2102      	movs	r1, #2
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f998 	bl	8005128 <VL53L0X_SetSequenceStepEnable>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8004dfe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d103      	bne.n	8004e0e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2203      	movs	r2, #3
 8004e0a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004e0e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d109      	bne.n	8004e2a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004e16:	f107 0313 	add.w	r3, r7, #19
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f96a 	bl	80050f8 <VL53L0X_GetVcselPulsePeriod>
 8004e24:	4603      	mov	r3, r0
 8004e26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004e2a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d103      	bne.n	8004e3a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004e32:	7cfa      	ldrb	r2, [r7, #19]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004e3a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d109      	bne.n	8004e56 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004e42:	f107 0313 	add.w	r3, r7, #19
 8004e46:	461a      	mov	r2, r3
 8004e48:	2101      	movs	r1, #1
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f954 	bl	80050f8 <VL53L0X_GetVcselPulsePeriod>
 8004e50:	4603      	mov	r3, r0
 8004e52:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004e56:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d103      	bne.n	8004e66 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004e5e:	7cfa      	ldrb	r2, [r7, #19]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8004e66:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8004e6e:	f107 030c 	add.w	r3, r7, #12
 8004e72:	461a      	mov	r2, r3
 8004e74:	2103      	movs	r1, #3
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f002 fec0 	bl	8007bfc <get_sequence_step_timeout>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004e82:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d103      	bne.n	8004e92 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8004e92:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d109      	bne.n	8004eae <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8004e9a:	f107 030c 	add.w	r3, r7, #12
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	2104      	movs	r1, #4
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f002 feaa 	bl	8007bfc <get_sequence_step_timeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004eae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d103      	bne.n	8004ebe <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004ebe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3770      	adds	r7, #112	; 0x70
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bdb0      	pop	{r4, r5, r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000270 	.word	0x20000270

08004ed0 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004eda:	2300      	movs	r3, #0
 8004edc:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f8b0 	bl	8005048 <VL53L0X_GetDeviceMode>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d107      	bne.n	8004f04 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	3308      	adds	r3, #8
 8004ef8:	4619      	mov	r1, r3
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 fa94 	bl	8005428 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8004f00:	4603      	mov	r3, r0
 8004f02:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8004f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d102      	bne.n	8004f12 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8004f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d107      	bne.n	8004f2a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	3310      	adds	r3, #16
 8004f1e:	4619      	mov	r1, r3
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 faca 	bl	80054ba <VL53L0X_GetXTalkCompensationRateMegaCps>
 8004f26:	4603      	mov	r3, r0
 8004f28:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8004f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d107      	bne.n	8004f42 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	3314      	adds	r3, #20
 8004f36:	4619      	mov	r1, r3
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff fccf 	bl	80048dc <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8004f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d134      	bne.n	8004fb4 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	e02a      	b.n	8004fa6 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8004f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d12a      	bne.n	8004fae <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	b299      	uxth	r1, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	3308      	adds	r3, #8
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	4413      	add	r3, r2
 8004f66:	3304      	adds	r3, #4
 8004f68:	461a      	mov	r2, r3
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fbea 	bl	8005744 <VL53L0X_GetLimitCheckValue>
 8004f70:	4603      	mov	r3, r0
 8004f72:	461a      	mov	r2, r3
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8004f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d117      	bne.n	8004fb2 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	b299      	uxth	r1, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	3318      	adds	r3, #24
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	461a      	mov	r2, r3
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fb51 	bl	8005638 <VL53L0X_GetLimitCheckEnable>
 8004f96:	4603      	mov	r3, r0
 8004f98:	461a      	mov	r2, r3
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	60bb      	str	r3, [r7, #8]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b05      	cmp	r3, #5
 8004faa:	ddd1      	ble.n	8004f50 <VL53L0X_GetDeviceParameters+0x80>
 8004fac:	e002      	b.n	8004fb4 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8004fae:	bf00      	nop
 8004fb0:	e000      	b.n	8004fb4 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8004fb2:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d107      	bne.n	8004fcc <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	333c      	adds	r3, #60	; 0x3c
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fc4c 	bl	8005860 <VL53L0X_GetWrapAroundCheckEnable>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8004fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d107      	bne.n	8004fe4 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	4619      	mov	r1, r3
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f879 	bl	80050d2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3710      	adds	r7, #16
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	2b15      	cmp	r3, #21
 8005004:	bf8c      	ite	hi
 8005006:	2201      	movhi	r2, #1
 8005008:	2200      	movls	r2, #0
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	2a00      	cmp	r2, #0
 800500e:	d10e      	bne.n	800502e <VL53L0X_SetDeviceMode+0x3e>
 8005010:	2201      	movs	r2, #1
 8005012:	409a      	lsls	r2, r3
 8005014:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <VL53L0X_SetDeviceMode+0x54>)
 8005016:	4013      	ands	r3, r2
 8005018:	2b00      	cmp	r3, #0
 800501a:	bf14      	ite	ne
 800501c:	2301      	movne	r3, #1
 800501e:	2300      	moveq	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	78fa      	ldrb	r2, [r7, #3]
 800502a:	741a      	strb	r2, [r3, #16]
		break;
 800502c:	e001      	b.n	8005032 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800502e:	23f8      	movs	r3, #248	; 0xf8
 8005030:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005032:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	0030000b 	.word	0x0030000b

08005048 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005052:	2300      	movs	r3, #0
 8005054:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	7c1a      	ldrb	r2, [r3, #16]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800505e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b084      	sub	sp, #16
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
 8005076:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005078:	2300      	movs	r3, #0
 800507a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	2109      	movs	r1, #9
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7fd fd4f 	bl	8002b24 <VL53L0X_RdByte>
 8005086:	4603      	mov	r3, r0
 8005088:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800508a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	b2da      	uxtb	r2, r3
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80050a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050b6:	2300      	movs	r3, #0
 80050b8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80050ba:	6839      	ldr	r1, [r7, #0]
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f002 ffa7 	bl	8008010 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80050c2:	4603      	mov	r3, r0
 80050c4:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80050c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b084      	sub	sp, #16
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050dc:	2300      	movs	r3, #0
 80050de:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80050e0:	6839      	ldr	r1, [r7, #0]
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f003 f874 	bl	80081d0 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80050e8:	4603      	mov	r3, r0
 80050ea:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80050ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	460b      	mov	r3, r1
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005106:	2300      	movs	r3, #0
 8005108:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800510a:	7afb      	ldrb	r3, [r7, #11]
 800510c:	687a      	ldr	r2, [r7, #4]
 800510e:	4619      	mov	r1, r3
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f002 ff46 	bl	8007fa2 <VL53L0X_get_vcsel_pulse_period>
 8005116:	4603      	mov	r3, r0
 8005118:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800511a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
	...

08005128 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	70fb      	strb	r3, [r7, #3]
 8005134:	4613      	mov	r3, r2
 8005136:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005138:	2300      	movs	r3, #0
 800513a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8005140:	2300      	movs	r3, #0
 8005142:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005144:	f107 030f 	add.w	r3, r7, #15
 8005148:	461a      	mov	r2, r3
 800514a:	2101      	movs	r1, #1
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f7fd fce9 	bl	8002b24 <VL53L0X_RdByte>
 8005152:	4603      	mov	r3, r0
 8005154:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8005156:	7bfb      	ldrb	r3, [r7, #15]
 8005158:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800515a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d15a      	bne.n	8005218 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8005162:	78bb      	ldrb	r3, [r7, #2]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d12b      	bne.n	80051c0 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8005168:	78fb      	ldrb	r3, [r7, #3]
 800516a:	2b04      	cmp	r3, #4
 800516c:	d825      	bhi.n	80051ba <VL53L0X_SetSequenceStepEnable+0x92>
 800516e:	a201      	add	r2, pc, #4	; (adr r2, 8005174 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8005170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005174:	08005189 	.word	0x08005189
 8005178:	08005193 	.word	0x08005193
 800517c:	0800519d 	.word	0x0800519d
 8005180:	080051a7 	.word	0x080051a7
 8005184:	080051b1 	.word	0x080051b1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8005188:	7dbb      	ldrb	r3, [r7, #22]
 800518a:	f043 0310 	orr.w	r3, r3, #16
 800518e:	75bb      	strb	r3, [r7, #22]
				break;
 8005190:	e043      	b.n	800521a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8005192:	7dbb      	ldrb	r3, [r7, #22]
 8005194:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8005198:	75bb      	strb	r3, [r7, #22]
				break;
 800519a:	e03e      	b.n	800521a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800519c:	7dbb      	ldrb	r3, [r7, #22]
 800519e:	f043 0304 	orr.w	r3, r3, #4
 80051a2:	75bb      	strb	r3, [r7, #22]
				break;
 80051a4:	e039      	b.n	800521a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80051a6:	7dbb      	ldrb	r3, [r7, #22]
 80051a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ac:	75bb      	strb	r3, [r7, #22]
				break;
 80051ae:	e034      	b.n	800521a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80051b0:	7dbb      	ldrb	r3, [r7, #22]
 80051b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051b6:	75bb      	strb	r3, [r7, #22]
				break;
 80051b8:	e02f      	b.n	800521a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80051ba:	23fc      	movs	r3, #252	; 0xfc
 80051bc:	75fb      	strb	r3, [r7, #23]
 80051be:	e02c      	b.n	800521a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80051c0:	78fb      	ldrb	r3, [r7, #3]
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d825      	bhi.n	8005212 <VL53L0X_SetSequenceStepEnable+0xea>
 80051c6:	a201      	add	r2, pc, #4	; (adr r2, 80051cc <VL53L0X_SetSequenceStepEnable+0xa4>)
 80051c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051cc:	080051e1 	.word	0x080051e1
 80051d0:	080051eb 	.word	0x080051eb
 80051d4:	080051f5 	.word	0x080051f5
 80051d8:	080051ff 	.word	0x080051ff
 80051dc:	08005209 	.word	0x08005209
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80051e0:	7dbb      	ldrb	r3, [r7, #22]
 80051e2:	f023 0310 	bic.w	r3, r3, #16
 80051e6:	75bb      	strb	r3, [r7, #22]
				break;
 80051e8:	e017      	b.n	800521a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80051ea:	7dbb      	ldrb	r3, [r7, #22]
 80051ec:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80051f0:	75bb      	strb	r3, [r7, #22]
				break;
 80051f2:	e012      	b.n	800521a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80051f4:	7dbb      	ldrb	r3, [r7, #22]
 80051f6:	f023 0304 	bic.w	r3, r3, #4
 80051fa:	75bb      	strb	r3, [r7, #22]
				break;
 80051fc:	e00d      	b.n	800521a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80051fe:	7dbb      	ldrb	r3, [r7, #22]
 8005200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005204:	75bb      	strb	r3, [r7, #22]
				break;
 8005206:	e008      	b.n	800521a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8005208:	7dbb      	ldrb	r3, [r7, #22]
 800520a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800520e:	75bb      	strb	r3, [r7, #22]
				break;
 8005210:	e003      	b.n	800521a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005212:	23fc      	movs	r3, #252	; 0xfc
 8005214:	75fb      	strb	r3, [r7, #23]
 8005216:	e000      	b.n	800521a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8005218:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800521a:	7bfb      	ldrb	r3, [r7, #15]
 800521c:	7dba      	ldrb	r2, [r7, #22]
 800521e:	429a      	cmp	r2, r3
 8005220:	d01e      	beq.n	8005260 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8005222:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d107      	bne.n	800523a <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800522a:	7dbb      	ldrb	r3, [r7, #22]
 800522c:	461a      	mov	r2, r3
 800522e:	2101      	movs	r1, #1
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7fd fbc3 	bl	80029bc <VL53L0X_WrByte>
 8005236:	4603      	mov	r3, r0
 8005238:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800523a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d103      	bne.n	800524a <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	7dba      	ldrb	r2, [r7, #22]
 8005246:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800524a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8005258:	6939      	ldr	r1, [r7, #16]
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff ff26 	bl	80050ac <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8005260:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	607b      	str	r3, [r7, #4]
 8005276:	460b      	mov	r3, r1
 8005278:	72fb      	strb	r3, [r7, #11]
 800527a:	4613      	mov	r3, r2
 800527c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800527e:	2300      	movs	r3, #0
 8005280:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8005288:	7afb      	ldrb	r3, [r7, #11]
 800528a:	2b04      	cmp	r3, #4
 800528c:	d836      	bhi.n	80052fc <sequence_step_enabled+0x90>
 800528e:	a201      	add	r2, pc, #4	; (adr r2, 8005294 <sequence_step_enabled+0x28>)
 8005290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005294:	080052a9 	.word	0x080052a9
 8005298:	080052bb 	.word	0x080052bb
 800529c:	080052cd 	.word	0x080052cd
 80052a0:	080052df 	.word	0x080052df
 80052a4:	080052f1 	.word	0x080052f1
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80052a8:	7abb      	ldrb	r3, [r7, #10]
 80052aa:	111b      	asrs	r3, r3, #4
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	701a      	strb	r2, [r3, #0]
		break;
 80052b8:	e022      	b.n	8005300 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80052ba:	7abb      	ldrb	r3, [r7, #10]
 80052bc:	10db      	asrs	r3, r3, #3
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	701a      	strb	r2, [r3, #0]
		break;
 80052ca:	e019      	b.n	8005300 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80052cc:	7abb      	ldrb	r3, [r7, #10]
 80052ce:	109b      	asrs	r3, r3, #2
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	f003 0301 	and.w	r3, r3, #1
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	701a      	strb	r2, [r3, #0]
		break;
 80052dc:	e010      	b.n	8005300 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80052de:	7abb      	ldrb	r3, [r7, #10]
 80052e0:	119b      	asrs	r3, r3, #6
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	701a      	strb	r2, [r3, #0]
		break;
 80052ee:	e007      	b.n	8005300 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80052f0:	7abb      	ldrb	r3, [r7, #10]
 80052f2:	09db      	lsrs	r3, r3, #7
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	701a      	strb	r2, [r3, #0]
		break;
 80052fa:	e001      	b.n	8005300 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80052fc:	23fc      	movs	r3, #252	; 0xfc
 80052fe:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005300:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005304:	4618      	mov	r0, r3
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800531a:	2300      	movs	r3, #0
 800531c:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800531e:	2300      	movs	r3, #0
 8005320:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005322:	f107 030e 	add.w	r3, r7, #14
 8005326:	461a      	mov	r2, r3
 8005328:	2101      	movs	r1, #1
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fd fbfa 	bl	8002b24 <VL53L0X_RdByte>
 8005330:	4603      	mov	r3, r0
 8005332:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8005334:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d107      	bne.n	800534c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800533c:	7bba      	ldrb	r2, [r7, #14]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2100      	movs	r1, #0
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7ff ff92 	bl	800526c <sequence_step_enabled>
 8005348:	4603      	mov	r3, r0
 800534a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800534c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d108      	bne.n	8005366 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8005354:	7bba      	ldrb	r2, [r7, #14]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	3302      	adds	r3, #2
 800535a:	2101      	movs	r1, #1
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff ff85 	bl	800526c <sequence_step_enabled>
 8005362:	4603      	mov	r3, r0
 8005364:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d108      	bne.n	8005380 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800536e:	7bba      	ldrb	r2, [r7, #14]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	3301      	adds	r3, #1
 8005374:	2102      	movs	r1, #2
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f7ff ff78 	bl	800526c <sequence_step_enabled>
 800537c:	4603      	mov	r3, r0
 800537e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d108      	bne.n	800539a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8005388:	7bba      	ldrb	r2, [r7, #14]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	3303      	adds	r3, #3
 800538e:	2103      	movs	r1, #3
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff ff6b 	bl	800526c <sequence_step_enabled>
 8005396:	4603      	mov	r3, r0
 8005398:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800539a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d108      	bne.n	80053b4 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80053a2:	7bba      	ldrb	r2, [r7, #14]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	3304      	adds	r3, #4
 80053a8:	2104      	movs	r1, #4
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7ff ff5e 	bl	800526c <sequence_step_enabled>
 80053b0:	4603      	mov	r3, r0
 80053b2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80053b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80053ca:	2300      	movs	r3, #0
 80053cc:	75fb      	strb	r3, [r7, #23]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80053ce:	f107 030e 	add.w	r3, r7, #14
 80053d2:	461a      	mov	r2, r3
 80053d4:	21f8      	movs	r1, #248	; 0xf8
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7fd fbce 	bl	8002b78 <VL53L0X_RdWord>
 80053dc:	4603      	mov	r3, r0
 80053de:	75fb      	strb	r3, [r7, #23]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80053e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d112      	bne.n	800540e <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x4e>
		if (osc_calibrate_val != 0) {
 80053e8:	89fb      	ldrh	r3, [r7, #14]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d006      	beq.n	80053fc <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x3c>
			IMPeriodMilliSeconds =
				InterMeasurementPeriodMilliSeconds
					* osc_calibrate_val;
 80053ee:	89fb      	ldrh	r3, [r7, #14]
 80053f0:	461a      	mov	r2, r3
			IMPeriodMilliSeconds =
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	fb02 f303 	mul.w	r3, r2, r3
 80053f8:	613b      	str	r3, [r7, #16]
 80053fa:	e001      	b.n	8005400 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x40>
		} else {
			IMPeriodMilliSeconds =
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	613b      	str	r3, [r7, #16]
				InterMeasurementPeriodMilliSeconds;
		}
		Status = VL53L0X_WrDWord(Dev,
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	2104      	movs	r1, #4
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7fd fb27 	bl	8002a58 <VL53L0X_WrDWord>
 800540a:	4603      	mov	r3, r0
 800540c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800540e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d102      	bne.n	800541c <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x5c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			InterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800541c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005432:	2300      	movs	r3, #0
 8005434:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8005436:	f107 030c 	add.w	r3, r7, #12
 800543a:	461a      	mov	r2, r3
 800543c:	21f8      	movs	r1, #248	; 0xf8
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fd fb9a 	bl	8002b78 <VL53L0X_RdWord>
 8005444:	4603      	mov	r3, r0
 8005446:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8005448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d108      	bne.n	8005462 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8005450:	f107 0308 	add.w	r3, r7, #8
 8005454:	461a      	mov	r2, r3
 8005456:	2104      	movs	r1, #4
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f7fd fbc5 	bl	8002be8 <VL53L0X_RdDWord>
 800545e:	4603      	mov	r3, r0
 8005460:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10c      	bne.n	8005484 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800546a:	89bb      	ldrh	r3, [r7, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d005      	beq.n	800547c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	89ba      	ldrh	r2, [r7, #12]
 8005474:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005484:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800549a:	2300      	movs	r3, #0
 800549c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	7f1b      	ldrb	r3, [r3, #28]
 80054a2:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	7bba      	ldrb	r2, [r7, #14]
 80054a8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80054aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b086      	sub	sp, #24
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054c4:	2300      	movs	r3, #0
 80054c6:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80054c8:	f107 030e 	add.w	r3, r7, #14
 80054cc:	461a      	mov	r2, r3
 80054ce:	2120      	movs	r1, #32
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7fd fb51 	bl	8002b78 <VL53L0X_RdWord>
 80054d6:	4603      	mov	r3, r0
 80054d8:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80054da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d118      	bne.n	8005514 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80054e2:	89fb      	ldrh	r3, [r7, #14]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d109      	bne.n	80054fc <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	771a      	strb	r2, [r3, #28]
 80054fa:	e00b      	b.n	8005514 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80054fc:	89fb      	ldrh	r3, [r7, #14]
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005514:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	807b      	strh	r3, [r7, #2]
 800552c:	4613      	mov	r3, r2
 800552e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005530:	2300      	movs	r3, #0
 8005532:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8005534:	2300      	movs	r3, #0
 8005536:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8005538:	2300      	movs	r3, #0
 800553a:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800553c:	2300      	movs	r3, #0
 800553e:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8005540:	887b      	ldrh	r3, [r7, #2]
 8005542:	2b05      	cmp	r3, #5
 8005544:	d902      	bls.n	800554c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005546:	23fc      	movs	r3, #252	; 0xfc
 8005548:	75fb      	strb	r3, [r7, #23]
 800554a:	e05b      	b.n	8005604 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800554c:	787b      	ldrb	r3, [r7, #1]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d106      	bne.n	8005560 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8005552:	2300      	movs	r3, #0
 8005554:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8005556:	2300      	movs	r3, #0
 8005558:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800555a:	2301      	movs	r3, #1
 800555c:	73bb      	strb	r3, [r7, #14]
 800555e:	e00a      	b.n	8005576 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005560:	887b      	ldrh	r3, [r7, #2]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	330c      	adds	r3, #12
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800556e:	2300      	movs	r3, #0
 8005570:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8005572:	2301      	movs	r3, #1
 8005574:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8005576:	887b      	ldrh	r3, [r7, #2]
 8005578:	2b05      	cmp	r3, #5
 800557a:	d841      	bhi.n	8005600 <VL53L0X_SetLimitCheckEnable+0xe0>
 800557c:	a201      	add	r2, pc, #4	; (adr r2, 8005584 <VL53L0X_SetLimitCheckEnable+0x64>)
 800557e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005582:	bf00      	nop
 8005584:	0800559d 	.word	0x0800559d
 8005588:	080055a7 	.word	0x080055a7
 800558c:	080055bd 	.word	0x080055bd
 8005590:	080055c7 	.word	0x080055c7
 8005594:	080055d1 	.word	0x080055d1
 8005598:	080055e9 	.word	0x080055e9

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	7bfa      	ldrb	r2, [r7, #15]
 80055a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80055a4:	e02e      	b.n	8005604 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	2144      	movs	r1, #68	; 0x44
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7fd fa27 	bl	8002a04 <VL53L0X_WrWord>
 80055b6:	4603      	mov	r3, r0
 80055b8:	75fb      	strb	r3, [r7, #23]

			break;
 80055ba:	e023      	b.n	8005604 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	7bfa      	ldrb	r2, [r7, #15]
 80055c0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80055c4:	e01e      	b.n	8005604 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	7bfa      	ldrb	r2, [r7, #15]
 80055ca:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80055ce:	e019      	b.n	8005604 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80055d0:	7bbb      	ldrb	r3, [r7, #14]
 80055d2:	005b      	lsls	r3, r3, #1
 80055d4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80055d6:	7b7b      	ldrb	r3, [r7, #13]
 80055d8:	22fe      	movs	r2, #254	; 0xfe
 80055da:	2160      	movs	r1, #96	; 0x60
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7fd fa6d 	bl	8002abc <VL53L0X_UpdateByte>
 80055e2:	4603      	mov	r3, r0
 80055e4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80055e6:	e00d      	b.n	8005604 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80055e8:	7bbb      	ldrb	r3, [r7, #14]
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80055ee:	7b7b      	ldrb	r3, [r7, #13]
 80055f0:	22ef      	movs	r2, #239	; 0xef
 80055f2:	2160      	movs	r1, #96	; 0x60
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7fd fa61 	bl	8002abc <VL53L0X_UpdateByte>
 80055fa:	4603      	mov	r3, r0
 80055fc:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80055fe:	e001      	b.n	8005604 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005600:	23fc      	movs	r3, #252	; 0xfc
 8005602:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10f      	bne.n	800562c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800560c:	787b      	ldrb	r3, [r7, #1]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d106      	bne.n	8005620 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005612:	887b      	ldrh	r3, [r7, #2]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	4413      	add	r3, r2
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800561e:	e005      	b.n	800562c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005620:	887b      	ldrh	r3, [r7, #2]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	4413      	add	r3, r2
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800562c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3718      	adds	r7, #24
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	460b      	mov	r3, r1
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005646:	2300      	movs	r3, #0
 8005648:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800564a:	897b      	ldrh	r3, [r7, #10]
 800564c:	2b05      	cmp	r3, #5
 800564e:	d905      	bls.n	800565c <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005650:	23fc      	movs	r3, #252	; 0xfc
 8005652:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	e008      	b.n	800566e <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800565c:	897b      	ldrh	r3, [r7, #10]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4413      	add	r3, r2
 8005662:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005666:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	7dba      	ldrb	r2, [r7, #22]
 800566c:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800566e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005672:	4618      	mov	r0, r3
 8005674:	371c      	adds	r7, #28
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
	...

08005680 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	460b      	mov	r3, r1
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800568e:	2300      	movs	r3, #0
 8005690:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8005692:	897b      	ldrh	r3, [r7, #10]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4413      	add	r3, r2
 8005698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800569c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800569e:	7dbb      	ldrb	r3, [r7, #22]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d107      	bne.n	80056b4 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80056a4:	897b      	ldrh	r3, [r7, #10]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	330c      	adds	r3, #12
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	605a      	str	r2, [r3, #4]
 80056b2:	e040      	b.n	8005736 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80056b4:	897b      	ldrh	r3, [r7, #10]
 80056b6:	2b05      	cmp	r3, #5
 80056b8:	d830      	bhi.n	800571c <VL53L0X_SetLimitCheckValue+0x9c>
 80056ba:	a201      	add	r2, pc, #4	; (adr r2, 80056c0 <VL53L0X_SetLimitCheckValue+0x40>)
 80056bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c0:	080056d9 	.word	0x080056d9
 80056c4:	080056e1 	.word	0x080056e1
 80056c8:	080056f7 	.word	0x080056f7
 80056cc:	080056ff 	.word	0x080056ff
 80056d0:	08005707 	.word	0x08005707
 80056d4:	08005707 	.word	0x08005707

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80056de:	e01f      	b.n	8005720 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	461a      	mov	r2, r3
 80056e8:	2144      	movs	r1, #68	; 0x44
 80056ea:	68f8      	ldr	r0, [r7, #12]
 80056ec:	f7fd f98a 	bl	8002a04 <VL53L0X_WrWord>
 80056f0:	4603      	mov	r3, r0
 80056f2:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80056f4:	e014      	b.n	8005720 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80056fc:	e010      	b.n	8005720 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8005704:	e00c      	b.n	8005720 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800570a:	b29b      	uxth	r3, r3
 800570c:	461a      	mov	r2, r3
 800570e:	2164      	movs	r1, #100	; 0x64
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f7fd f977 	bl	8002a04 <VL53L0X_WrWord>
 8005716:	4603      	mov	r3, r0
 8005718:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800571a:	e001      	b.n	8005720 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800571c:	23fc      	movs	r3, #252	; 0xfc
 800571e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005720:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d106      	bne.n	8005736 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005728:	897b      	ldrh	r3, [r7, #10]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	330c      	adds	r3, #12
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005736:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop

08005744 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	460b      	mov	r3, r1
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005752:	2300      	movs	r3, #0
 8005754:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8005756:	2300      	movs	r3, #0
 8005758:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800575a:	897b      	ldrh	r3, [r7, #10]
 800575c:	2b05      	cmp	r3, #5
 800575e:	d847      	bhi.n	80057f0 <VL53L0X_GetLimitCheckValue+0xac>
 8005760:	a201      	add	r2, pc, #4	; (adr r2, 8005768 <VL53L0X_GetLimitCheckValue+0x24>)
 8005762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005766:	bf00      	nop
 8005768:	08005781 	.word	0x08005781
 800576c:	0800578d 	.word	0x0800578d
 8005770:	080057b3 	.word	0x080057b3
 8005774:	080057bf 	.word	0x080057bf
 8005778:	080057cb 	.word	0x080057cb
 800577c:	080057cb 	.word	0x080057cb

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005784:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8005786:	2300      	movs	r3, #0
 8005788:	77bb      	strb	r3, [r7, #30]
		break;
 800578a:	e033      	b.n	80057f4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800578c:	f107 0316 	add.w	r3, r7, #22
 8005790:	461a      	mov	r2, r3
 8005792:	2144      	movs	r1, #68	; 0x44
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f7fd f9ef 	bl	8002b78 <VL53L0X_RdWord>
 800579a:	4603      	mov	r3, r0
 800579c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800579e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d102      	bne.n	80057ac <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80057a6:	8afb      	ldrh	r3, [r7, #22]
 80057a8:	025b      	lsls	r3, r3, #9
 80057aa:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80057ac:	2301      	movs	r3, #1
 80057ae:	77bb      	strb	r3, [r7, #30]
		break;
 80057b0:	e020      	b.n	80057f4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80057b8:	2300      	movs	r3, #0
 80057ba:	77bb      	strb	r3, [r7, #30]
		break;
 80057bc:	e01a      	b.n	80057f4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80057c4:	2300      	movs	r3, #0
 80057c6:	77bb      	strb	r3, [r7, #30]
		break;
 80057c8:	e014      	b.n	80057f4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80057ca:	f107 0316 	add.w	r3, r7, #22
 80057ce:	461a      	mov	r2, r3
 80057d0:	2164      	movs	r1, #100	; 0x64
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f7fd f9d0 	bl	8002b78 <VL53L0X_RdWord>
 80057d8:	4603      	mov	r3, r0
 80057da:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80057dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d102      	bne.n	80057ea <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80057e4:	8afb      	ldrh	r3, [r7, #22]
 80057e6:	025b      	lsls	r3, r3, #9
 80057e8:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	77bb      	strb	r3, [r7, #30]
		break;
 80057ee:	e001      	b.n	80057f4 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80057f0:	23fc      	movs	r3, #252	; 0xfc
 80057f2:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80057f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d12a      	bne.n	8005852 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80057fc:	7fbb      	ldrb	r3, [r7, #30]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d124      	bne.n	800584c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d110      	bne.n	800582a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8005808:	897b      	ldrh	r3, [r7, #10]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	330c      	adds	r3, #12
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800581c:	897b      	ldrh	r3, [r7, #10]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4413      	add	r3, r2
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005828:	e013      	b.n	8005852 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005830:	897b      	ldrh	r3, [r7, #10]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	330c      	adds	r3, #12
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	4413      	add	r3, r2
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800583e:	897b      	ldrh	r3, [r7, #10]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4413      	add	r3, r2
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800584a:	e002      	b.n	8005852 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005852:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8005856:	4618      	mov	r0, r3
 8005858:	3720      	adds	r7, #32
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop

08005860 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800586a:	2300      	movs	r3, #0
 800586c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800586e:	f107 030e 	add.w	r3, r7, #14
 8005872:	461a      	mov	r2, r3
 8005874:	2101      	movs	r1, #1
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fd f954 	bl	8002b24 <VL53L0X_RdByte>
 800587c:	4603      	mov	r3, r0
 800587e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8005880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10e      	bne.n	80058a6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8005888:	7bba      	ldrb	r2, [r7, #14]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8005890:	7bbb      	ldrb	r3, [r7, #14]
 8005892:	b25b      	sxtb	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	da03      	bge.n	80058a0 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	2201      	movs	r2, #1
 800589c:	701a      	strb	r2, [r3, #0]
 800589e:	e002      	b.n	80058a6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2200      	movs	r2, #0
 80058a4:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80058a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d104      	bne.n	80058b8 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781a      	ldrb	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80058b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058cc:	2300      	movs	r3, #0
 80058ce:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80058d0:	f107 030e 	add.w	r3, r7, #14
 80058d4:	4619      	mov	r1, r3
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7ff fbb6 	bl	8005048 <VL53L0X_GetDeviceMode>
 80058dc:	4603      	mov	r3, r0
 80058de:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80058e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d107      	bne.n	80058f8 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80058e8:	7bbb      	ldrb	r3, [r7, #14]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d104      	bne.n	80058f8 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f898 	bl	8005a24 <VL53L0X_StartMeasurement>
 80058f4:	4603      	mov	r3, r0
 80058f6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80058f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d104      	bne.n	800590a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f001 fb3f 	bl	8006f84 <VL53L0X_measurement_poll_for_completion>
 8005906:	4603      	mov	r3, r0
 8005908:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800590a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d106      	bne.n	8005920 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005912:	7bbb      	ldrb	r3, [r7, #14]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d103      	bne.n	8005920 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2203      	movs	r2, #3
 800591c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8005920:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005938:	2300      	movs	r3, #0
 800593a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800593c:	2301      	movs	r3, #1
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	68b9      	ldr	r1, [r7, #8]
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f001 fae1 	bl	8006f0a <VL53L0X_perform_ref_calibration>
 8005948:	4603      	mov	r3, r0
 800594a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800594c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3718      	adds	r7, #24
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005964:	2300      	movs	r3, #0
 8005966:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800596e:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8005970:	7dbb      	ldrb	r3, [r7, #22]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d005      	beq.n	8005982 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8005976:	7dbb      	ldrb	r3, [r7, #22]
 8005978:	2b02      	cmp	r3, #2
 800597a:	d002      	beq.n	8005982 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800597c:	7dbb      	ldrb	r3, [r7, #22]
 800597e:	2b03      	cmp	r3, #3
 8005980:	d147      	bne.n	8005a12 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005982:	f107 030c 	add.w	r3, r7, #12
 8005986:	f107 0210 	add.w	r2, r7, #16
 800598a:	2101      	movs	r1, #1
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fbc3 	bl	8006118 <VL53L0X_GetInterruptThresholds>
 8005992:	4603      	mov	r3, r0
 8005994:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800599c:	d803      	bhi.n	80059a6 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800599e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 80059a0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80059a4:	d935      	bls.n	8005a12 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 80059a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d131      	bne.n	8005a12 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80059ae:	78fb      	ldrb	r3, [r7, #3]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d006      	beq.n	80059c2 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 80059b4:	491a      	ldr	r1, [pc, #104]	; (8005a20 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f002 fcbc 	bl	8008334 <VL53L0X_load_tuning_settings>
 80059bc:	4603      	mov	r3, r0
 80059be:	75fb      	strb	r3, [r7, #23]
 80059c0:	e027      	b.n	8005a12 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80059c2:	2204      	movs	r2, #4
 80059c4:	21ff      	movs	r1, #255	; 0xff
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fc fff8 	bl	80029bc <VL53L0X_WrByte>
 80059cc:	4603      	mov	r3, r0
 80059ce:	461a      	mov	r2, r3
 80059d0:	7dfb      	ldrb	r3, [r7, #23]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80059d6:	2200      	movs	r2, #0
 80059d8:	2170      	movs	r1, #112	; 0x70
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fc ffee 	bl	80029bc <VL53L0X_WrByte>
 80059e0:	4603      	mov	r3, r0
 80059e2:	461a      	mov	r2, r3
 80059e4:	7dfb      	ldrb	r3, [r7, #23]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80059ea:	2200      	movs	r2, #0
 80059ec:	21ff      	movs	r1, #255	; 0xff
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7fc ffe4 	bl	80029bc <VL53L0X_WrByte>
 80059f4:	4603      	mov	r3, r0
 80059f6:	461a      	mov	r2, r3
 80059f8:	7dfb      	ldrb	r3, [r7, #23]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80059fe:	2200      	movs	r2, #0
 8005a00:	2180      	movs	r1, #128	; 0x80
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7fc ffda 	bl	80029bc <VL53L0X_WrByte>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	7dfb      	ldrb	r3, [r7, #23]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8005a12:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000364 	.word	0x20000364

08005a24 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8005a30:	2301      	movs	r3, #1
 8005a32:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005a34:	f107 030e 	add.w	r3, r7, #14
 8005a38:	4619      	mov	r1, r3
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7ff fb04 	bl	8005048 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005a40:	2201      	movs	r2, #1
 8005a42:	2180      	movs	r1, #128	; 0x80
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7fc ffb9 	bl	80029bc <VL53L0X_WrByte>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005a4e:	2201      	movs	r2, #1
 8005a50:	21ff      	movs	r1, #255	; 0xff
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fc ffb2 	bl	80029bc <VL53L0X_WrByte>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2100      	movs	r1, #0
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7fc ffab 	bl	80029bc <VL53L0X_WrByte>
 8005a66:	4603      	mov	r3, r0
 8005a68:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8005a70:	461a      	mov	r2, r3
 8005a72:	2191      	movs	r1, #145	; 0x91
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7fc ffa1 	bl	80029bc <VL53L0X_WrByte>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005a7e:	2201      	movs	r2, #1
 8005a80:	2100      	movs	r1, #0
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7fc ff9a 	bl	80029bc <VL53L0X_WrByte>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	21ff      	movs	r1, #255	; 0xff
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7fc ff93 	bl	80029bc <VL53L0X_WrByte>
 8005a96:	4603      	mov	r3, r0
 8005a98:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	2180      	movs	r1, #128	; 0x80
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fc ff8c 	bl	80029bc <VL53L0X_WrByte>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8005aa8:	7bbb      	ldrb	r3, [r7, #14]
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d054      	beq.n	8005b58 <VL53L0X_StartMeasurement+0x134>
 8005aae:	2b03      	cmp	r3, #3
 8005ab0:	dc6c      	bgt.n	8005b8c <VL53L0X_StartMeasurement+0x168>
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <VL53L0X_StartMeasurement+0x98>
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d034      	beq.n	8005b24 <VL53L0X_StartMeasurement+0x100>
 8005aba:	e067      	b.n	8005b8c <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8005abc:	2201      	movs	r2, #1
 8005abe:	2100      	movs	r1, #0
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7fc ff7b 	bl	80029bc <VL53L0X_WrByte>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8005aca:	7bfb      	ldrb	r3, [r7, #15]
 8005acc:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8005ace:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d15d      	bne.n	8005b92 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d008      	beq.n	8005af2 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8005ae0:	f107 030d 	add.w	r3, r7, #13
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	2100      	movs	r1, #0
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7fd f81b 	bl	8002b24 <VL53L0X_RdByte>
 8005aee:	4603      	mov	r3, r0
 8005af0:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	3301      	adds	r3, #1
 8005af6:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8005af8:	7b7a      	ldrb	r2, [r7, #13]
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
 8005afc:	4013      	ands	r3, r2
 8005afe:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005b00:	7bfa      	ldrb	r2, [r7, #15]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d107      	bne.n	8005b16 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8005b06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d103      	bne.n	8005b16 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005b14:	d3e1      	bcc.n	8005ada <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005b1c:	d339      	bcc.n	8005b92 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8005b1e:	23f9      	movs	r3, #249	; 0xf9
 8005b20:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8005b22:	e036      	b.n	8005b92 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005b24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d105      	bne.n	8005b38 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7ff ff12 	bl	8005958 <VL53L0X_CheckAndLoadInterruptSettings>
 8005b34:	4603      	mov	r3, r0
 8005b36:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005b38:	2202      	movs	r2, #2
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7fc ff3d 	bl	80029bc <VL53L0X_WrByte>
 8005b42:	4603      	mov	r3, r0
 8005b44:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8005b46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d123      	bne.n	8005b96 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2204      	movs	r2, #4
 8005b52:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005b56:	e01e      	b.n	8005b96 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005b58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d105      	bne.n	8005b6c <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005b60:	2101      	movs	r1, #1
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff fef8 	bl	8005958 <VL53L0X_CheckAndLoadInterruptSettings>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005b6c:	2204      	movs	r2, #4
 8005b6e:	2100      	movs	r1, #0
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7fc ff23 	bl	80029bc <VL53L0X_WrByte>
 8005b76:	4603      	mov	r3, r0
 8005b78:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8005b7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10b      	bne.n	8005b9a <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2204      	movs	r2, #4
 8005b86:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005b8a:	e006      	b.n	8005b9a <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005b8c:	23f8      	movs	r3, #248	; 0xf8
 8005b8e:	75fb      	strb	r3, [r7, #23]
 8005b90:	e004      	b.n	8005b9c <VL53L0X_StartMeasurement+0x178>
		break;
 8005b92:	bf00      	nop
 8005b94:	e002      	b.n	8005b9c <VL53L0X_StartMeasurement+0x178>
		break;
 8005b96:	bf00      	nop
 8005b98:	e000      	b.n	8005b9c <VL53L0X_StartMeasurement+0x178>
		break;
 8005b9a:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8005b9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3718      	adds	r7, #24
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8005bbc:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8005bbe:	7bbb      	ldrb	r3, [r7, #14]
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d112      	bne.n	8005bea <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8005bc4:	f107 0308 	add.w	r3, r7, #8
 8005bc8:	4619      	mov	r1, r3
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fb1a 	bl	8006204 <VL53L0X_GetInterruptMaskStatus>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d103      	bne.n	8005be2 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	701a      	strb	r2, [r3, #0]
 8005be0:	e01c      	b.n	8005c1c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2200      	movs	r2, #0
 8005be6:	701a      	strb	r2, [r3, #0]
 8005be8:	e018      	b.n	8005c1c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8005bea:	f107 030d 	add.w	r3, r7, #13
 8005bee:	461a      	mov	r2, r3
 8005bf0:	2114      	movs	r1, #20
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fc ff96 	bl	8002b24 <VL53L0X_RdByte>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8005bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10b      	bne.n	8005c1c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8005c04:	7b7b      	ldrb	r3, [r7, #13]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2201      	movs	r2, #1
 8005c12:	701a      	strb	r2, [r3, #0]
 8005c14:	e002      	b.n	8005c1c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005c28:	b5b0      	push	{r4, r5, r7, lr}
 8005c2a:	b096      	sub	sp, #88	; 0x58
 8005c2c:	af02      	add	r7, sp, #8
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c32:	2300      	movs	r3, #0
 8005c34:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005c38:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005c3c:	230c      	movs	r3, #12
 8005c3e:	2114      	movs	r1, #20
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7fc fe8f 	bl	8002964 <VL53L0X_ReadMulti>
 8005c46:	4603      	mov	r3, r0
 8005c48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8005c4c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f040 80d1 	bne.w	8005df8 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005c62:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	021b      	lsls	r3, r3, #8
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	4413      	add	r3, r2
 8005c74:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005c7e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	021b      	lsls	r3, r3, #8
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	4413      	add	r3, r2
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	025b      	lsls	r3, r3, #9
 8005c94:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c9a:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005c9c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	021b      	lsls	r3, r3, #8
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	4413      	add	r3, r2
 8005cae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8005cb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005cb6:	025b      	lsls	r3, r3, #9
 8005cb8:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005cbe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	021b      	lsls	r3, r3, #8
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	4413      	add	r3, r2
 8005cd0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005cda:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8005cdc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ce0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8005cea:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8005cf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8005cf6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005cf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cfc:	d046      	beq.n	8005d8c <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8005cfe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005d00:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005d04:	fb02 f303 	mul.w	r3, r2, r3
 8005d08:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005d0c:	4a57      	ldr	r2, [pc, #348]	; (8005e6c <VL53L0X_GetRangingMeasurementData+0x244>)
 8005d0e:	fb82 1203 	smull	r1, r2, r2, r3
 8005d12:	1192      	asrs	r2, r2, #6
 8005d14:	17db      	asrs	r3, r3, #31
 8005d16:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8005d18:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	7f1b      	ldrb	r3, [r3, #28]
 8005d26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8005d2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d02c      	beq.n	8005d8c <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8005d32:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d34:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005d38:	fb02 f303 	mul.w	r3, r2, r3
 8005d3c:	121a      	asrs	r2, r3, #8
					<= 0) {
 8005d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d10d      	bne.n	8005d60 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8005d44:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d004      	beq.n	8005d56 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8005d4c:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8005d50:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005d54:	e016      	b.n	8005d84 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8005d56:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8005d5a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005d5e:	e011      	b.n	8005d84 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8005d60:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005d64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d66:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8005d6a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005d6c:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8005d70:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8005d74:	121b      	asrs	r3, r3, #8
 8005d76:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8005d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d7a:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8005d7c:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8005d80:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8005d84:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005d88:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8005d8c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00d      	beq.n	8005db0 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8005d94:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005d98:	089b      	lsrs	r3, r3, #2
 8005d9a:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8005da0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	019b      	lsls	r3, r3, #6
 8005da8:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	75da      	strb	r2, [r3, #23]
 8005dae:	e006      	b.n	8005dbe <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005db6:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8005dbe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005dc2:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8005dc6:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8005dca:	9301      	str	r3, [sp, #4]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f002 ff4b 	bl	8008c70 <VL53L0X_get_pal_range_status>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	461a      	mov	r2, r3
 8005dde:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8005de8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d103      	bne.n	8005df8 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8005df0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005df8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d12f      	bne.n	8005e60 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f107 040c 	add.w	r4, r7, #12
 8005e06:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8005e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005e12:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8005e1a:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8005e20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8005e28:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8005e2e:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8005e34:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8005e3a:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8005e40:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8005e46:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8005e50:	f107 050c 	add.w	r5, r7, #12
 8005e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005e5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005e60:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3750      	adds	r7, #80	; 0x50
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bdb0      	pop	{r4, r5, r7, pc}
 8005e6c:	10624dd3 	.word	0x10624dd3

08005e70 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8005e7e:	2100      	movs	r1, #0
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7ff f8b5 	bl	8004ff0 <VL53L0X_SetDeviceMode>
 8005e86:	4603      	mov	r3, r0
 8005e88:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d104      	bne.n	8005e9c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff fd16 	bl	80058c4 <VL53L0X_PerformSingleMeasurement>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d105      	bne.n	8005eb0 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f7ff febe 	bl	8005c28 <VL53L0X_GetRangingMeasurementData>
 8005eac:	4603      	mov	r3, r0
 8005eae:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8005eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d105      	bne.n	8005ec4 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005eb8:	2100      	movs	r1, #0
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f962 	bl	8006184 <VL53L0X_ClearInterruptMask>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8005ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	4608      	mov	r0, r1
 8005eda:	4611      	mov	r1, r2
 8005edc:	461a      	mov	r2, r3
 8005ede:	4603      	mov	r3, r0
 8005ee0:	70fb      	strb	r3, [r7, #3]
 8005ee2:	460b      	mov	r3, r1
 8005ee4:	70bb      	strb	r3, [r7, #2]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005eea:	2300      	movs	r3, #0
 8005eec:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8005eee:	78fb      	ldrb	r3, [r7, #3]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8005ef4:	23f6      	movs	r3, #246	; 0xf6
 8005ef6:	73fb      	strb	r3, [r7, #15]
 8005ef8:	e107      	b.n	800610a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8005efa:	78bb      	ldrb	r3, [r7, #2]
 8005efc:	2b14      	cmp	r3, #20
 8005efe:	d110      	bne.n	8005f22 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8005f00:	7e3b      	ldrb	r3, [r7, #24]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d102      	bne.n	8005f0c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8005f06:	2310      	movs	r3, #16
 8005f08:	73bb      	strb	r3, [r7, #14]
 8005f0a:	e001      	b.n	8005f10 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8005f10:	7bbb      	ldrb	r3, [r7, #14]
 8005f12:	461a      	mov	r2, r3
 8005f14:	2184      	movs	r1, #132	; 0x84
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7fc fd50 	bl	80029bc <VL53L0X_WrByte>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	73fb      	strb	r3, [r7, #15]
 8005f20:	e0f3      	b.n	800610a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8005f22:	78bb      	ldrb	r3, [r7, #2]
 8005f24:	2b15      	cmp	r3, #21
 8005f26:	f040 8097 	bne.w	8006058 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	21ff      	movs	r1, #255	; 0xff
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7fc fd44 	bl	80029bc <VL53L0X_WrByte>
 8005f34:	4603      	mov	r3, r0
 8005f36:	461a      	mov	r2, r3
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005f3e:	2200      	movs	r2, #0
 8005f40:	2100      	movs	r1, #0
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fc fd3a 	bl	80029bc <VL53L0X_WrByte>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005f52:	2200      	movs	r2, #0
 8005f54:	21ff      	movs	r1, #255	; 0xff
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7fc fd30 	bl	80029bc <VL53L0X_WrByte>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	461a      	mov	r2, r3
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005f66:	2201      	movs	r2, #1
 8005f68:	2180      	movs	r1, #128	; 0x80
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7fc fd26 	bl	80029bc <VL53L0X_WrByte>
 8005f70:	4603      	mov	r3, r0
 8005f72:	461a      	mov	r2, r3
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	2185      	movs	r1, #133	; 0x85
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fc fd1c 	bl	80029bc <VL53L0X_WrByte>
 8005f84:	4603      	mov	r3, r0
 8005f86:	461a      	mov	r2, r3
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8005f8e:	2204      	movs	r2, #4
 8005f90:	21ff      	movs	r1, #255	; 0xff
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fc fd12 	bl	80029bc <VL53L0X_WrByte>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	7bfb      	ldrb	r3, [r7, #15]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	21cd      	movs	r1, #205	; 0xcd
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7fc fd08 	bl	80029bc <VL53L0X_WrByte>
 8005fac:	4603      	mov	r3, r0
 8005fae:	461a      	mov	r2, r3
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8005fb6:	2211      	movs	r2, #17
 8005fb8:	21cc      	movs	r1, #204	; 0xcc
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7fc fcfe 	bl	80029bc <VL53L0X_WrByte>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8005fca:	2207      	movs	r2, #7
 8005fcc:	21ff      	movs	r1, #255	; 0xff
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fc fcf4 	bl	80029bc <VL53L0X_WrByte>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8005fde:	2200      	movs	r2, #0
 8005fe0:	21be      	movs	r1, #190	; 0xbe
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fc fcea 	bl	80029bc <VL53L0X_WrByte>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	461a      	mov	r2, r3
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8005ff2:	2206      	movs	r2, #6
 8005ff4:	21ff      	movs	r1, #255	; 0xff
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7fc fce0 	bl	80029bc <VL53L0X_WrByte>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	461a      	mov	r2, r3
 8006000:	7bfb      	ldrb	r3, [r7, #15]
 8006002:	4313      	orrs	r3, r2
 8006004:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8006006:	2209      	movs	r2, #9
 8006008:	21cc      	movs	r1, #204	; 0xcc
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7fc fcd6 	bl	80029bc <VL53L0X_WrByte>
 8006010:	4603      	mov	r3, r0
 8006012:	461a      	mov	r2, r3
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	4313      	orrs	r3, r2
 8006018:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800601a:	2200      	movs	r2, #0
 800601c:	21ff      	movs	r1, #255	; 0xff
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7fc fccc 	bl	80029bc <VL53L0X_WrByte>
 8006024:	4603      	mov	r3, r0
 8006026:	461a      	mov	r2, r3
 8006028:	7bfb      	ldrb	r3, [r7, #15]
 800602a:	4313      	orrs	r3, r2
 800602c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800602e:	2201      	movs	r2, #1
 8006030:	21ff      	movs	r1, #255	; 0xff
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7fc fcc2 	bl	80029bc <VL53L0X_WrByte>
 8006038:	4603      	mov	r3, r0
 800603a:	461a      	mov	r2, r3
 800603c:	7bfb      	ldrb	r3, [r7, #15]
 800603e:	4313      	orrs	r3, r2
 8006040:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006042:	2200      	movs	r2, #0
 8006044:	2100      	movs	r1, #0
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7fc fcb8 	bl	80029bc <VL53L0X_WrByte>
 800604c:	4603      	mov	r3, r0
 800604e:	461a      	mov	r2, r3
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	4313      	orrs	r3, r2
 8006054:	73fb      	strb	r3, [r7, #15]
 8006056:	e058      	b.n	800610a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8006058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d121      	bne.n	80060a4 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8006060:	787b      	ldrb	r3, [r7, #1]
 8006062:	2b04      	cmp	r3, #4
 8006064:	d81b      	bhi.n	800609e <VL53L0X_SetGpioConfig+0x1ce>
 8006066:	a201      	add	r2, pc, #4	; (adr r2, 800606c <VL53L0X_SetGpioConfig+0x19c>)
 8006068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606c:	08006081 	.word	0x08006081
 8006070:	08006087 	.word	0x08006087
 8006074:	0800608d 	.word	0x0800608d
 8006078:	08006093 	.word	0x08006093
 800607c:	08006099 	.word	0x08006099
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8006080:	2300      	movs	r3, #0
 8006082:	73bb      	strb	r3, [r7, #14]
				break;
 8006084:	e00f      	b.n	80060a6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8006086:	2301      	movs	r3, #1
 8006088:	73bb      	strb	r3, [r7, #14]
				break;
 800608a:	e00c      	b.n	80060a6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800608c:	2302      	movs	r3, #2
 800608e:	73bb      	strb	r3, [r7, #14]
				break;
 8006090:	e009      	b.n	80060a6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8006092:	2303      	movs	r3, #3
 8006094:	73bb      	strb	r3, [r7, #14]
				break;
 8006096:	e006      	b.n	80060a6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8006098:	2304      	movs	r3, #4
 800609a:	73bb      	strb	r3, [r7, #14]
				break;
 800609c:	e003      	b.n	80060a6 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800609e:	23f5      	movs	r3, #245	; 0xf5
 80060a0:	73fb      	strb	r3, [r7, #15]
 80060a2:	e000      	b.n	80060a6 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80060a4:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80060a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d107      	bne.n	80060be <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80060ae:	7bbb      	ldrb	r3, [r7, #14]
 80060b0:	461a      	mov	r2, r3
 80060b2:	210a      	movs	r1, #10
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7fc fc81 	bl	80029bc <VL53L0X_WrByte>
 80060ba:	4603      	mov	r3, r0
 80060bc:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80060be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10f      	bne.n	80060e6 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80060c6:	7e3b      	ldrb	r3, [r7, #24]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d102      	bne.n	80060d2 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80060cc:	2300      	movs	r3, #0
 80060ce:	73bb      	strb	r3, [r7, #14]
 80060d0:	e001      	b.n	80060d6 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80060d2:	2310      	movs	r3, #16
 80060d4:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80060d6:	7bbb      	ldrb	r3, [r7, #14]
 80060d8:	22ef      	movs	r2, #239	; 0xef
 80060da:	2184      	movs	r1, #132	; 0x84
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7fc fced 	bl	8002abc <VL53L0X_UpdateByte>
 80060e2:	4603      	mov	r3, r0
 80060e4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80060e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d103      	bne.n	80060f6 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	787a      	ldrb	r2, [r7, #1]
 80060f2:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80060f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d105      	bne.n	800610a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80060fe:	2100      	movs	r1, #0
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f83f 	bl	8006184 <VL53L0X_ClearInterruptMask>
 8006106:	4603      	mov	r3, r0
 8006108:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800610a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop

08006118 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	607a      	str	r2, [r7, #4]
 8006122:	603b      	str	r3, [r7, #0]
 8006124:	460b      	mov	r3, r1
 8006126:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006128:	2300      	movs	r3, #0
 800612a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800612c:	f107 0314 	add.w	r3, r7, #20
 8006130:	461a      	mov	r2, r3
 8006132:	210e      	movs	r1, #14
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f7fc fd1f 	bl	8002b78 <VL53L0X_RdWord>
 800613a:	4603      	mov	r3, r0
 800613c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800613e:	8abb      	ldrh	r3, [r7, #20]
 8006140:	045b      	lsls	r3, r3, #17
 8006142:	461a      	mov	r2, r3
 8006144:	4b0e      	ldr	r3, [pc, #56]	; (8006180 <VL53L0X_GetInterruptThresholds+0x68>)
 8006146:	4013      	ands	r3, r2
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800614c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10f      	bne.n	8006174 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8006154:	f107 0314 	add.w	r3, r7, #20
 8006158:	461a      	mov	r2, r3
 800615a:	210c      	movs	r1, #12
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f7fc fd0b 	bl	8002b78 <VL53L0X_RdWord>
 8006162:	4603      	mov	r3, r0
 8006164:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8006166:	8abb      	ldrh	r3, [r7, #20]
 8006168:	045b      	lsls	r3, r3, #17
 800616a:	461a      	mov	r2, r3
 800616c:	4b04      	ldr	r3, [pc, #16]	; (8006180 <VL53L0X_GetInterruptThresholds+0x68>)
 800616e:	4013      	ands	r3, r2
		*pThresholdHigh =
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006174:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3718      	adds	r7, #24
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	1ffe0000 	.word	0x1ffe0000

08006184 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800618e:	2300      	movs	r3, #0
 8006190:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8006192:	2300      	movs	r3, #0
 8006194:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8006196:	2201      	movs	r2, #1
 8006198:	210b      	movs	r1, #11
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7fc fc0e 	bl	80029bc <VL53L0X_WrByte>
 80061a0:	4603      	mov	r3, r0
 80061a2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80061a4:	2200      	movs	r2, #0
 80061a6:	210b      	movs	r1, #11
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7fc fc07 	bl	80029bc <VL53L0X_WrByte>
 80061ae:	4603      	mov	r3, r0
 80061b0:	461a      	mov	r2, r3
 80061b2:	7bfb      	ldrb	r3, [r7, #15]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80061b8:	f107 030d 	add.w	r3, r7, #13
 80061bc:	461a      	mov	r2, r3
 80061be:	2113      	movs	r1, #19
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7fc fcaf 	bl	8002b24 <VL53L0X_RdByte>
 80061c6:	4603      	mov	r3, r0
 80061c8:	461a      	mov	r2, r3
 80061ca:	7bfb      	ldrb	r3, [r7, #15]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80061d0:	7bbb      	ldrb	r3, [r7, #14]
 80061d2:	3301      	adds	r3, #1
 80061d4:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80061d6:	7b7b      	ldrb	r3, [r7, #13]
 80061d8:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d006      	beq.n	80061ee <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80061e0:	7bbb      	ldrb	r3, [r7, #14]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d803      	bhi.n	80061ee <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80061e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d0d3      	beq.n	8006196 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80061ee:	7bbb      	ldrb	r3, [r7, #14]
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d901      	bls.n	80061f8 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80061f4:	23f4      	movs	r3, #244	; 0xf4
 80061f6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80061f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800620e:	2300      	movs	r3, #0
 8006210:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8006212:	f107 030e 	add.w	r3, r7, #14
 8006216:	461a      	mov	r2, r3
 8006218:	2113      	movs	r1, #19
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7fc fc82 	bl	8002b24 <VL53L0X_RdByte>
 8006220:	4603      	mov	r3, r0
 8006222:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8006224:	7bbb      	ldrb	r3, [r7, #14]
 8006226:	f003 0207 	and.w	r2, r3, #7
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800622e:	7bbb      	ldrb	r3, [r7, #14]
 8006230:	f003 0318 	and.w	r3, r3, #24
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8006238:	23fa      	movs	r3, #250	; 0xfa
 800623a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800623c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006254:	2300      	movs	r3, #0
 8006256:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	68b9      	ldr	r1, [r7, #8]
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f000 fa03 	bl	8006668 <VL53L0X_perform_ref_spad_management>
 8006262:	4603      	mov	r3, r0
 8006264:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8006266:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b084      	sub	sp, #16
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800627c:	2300      	movs	r3, #0
 800627e:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8006280:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8006284:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8006286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800628a:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800628c:	f107 0308 	add.w	r3, r7, #8
 8006290:	461a      	mov	r2, r3
 8006292:	2128      	movs	r1, #40	; 0x28
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7fc fc6f 	bl	8002b78 <VL53L0X_RdWord>
 800629a:	4603      	mov	r3, r0
 800629c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800629e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d11e      	bne.n	80062e4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80062a6:	893b      	ldrh	r3, [r7, #8]
 80062a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80062b0:	893b      	ldrh	r3, [r7, #8]
 80062b2:	461a      	mov	r2, r3
 80062b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	dd0b      	ble.n	80062d4 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80062bc:	893a      	ldrh	r2, [r7, #8]
 80062be:	897b      	ldrh	r3, [r7, #10]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	b21b      	sxth	r3, r3
 80062c6:	461a      	mov	r2, r3
					* 250;
 80062c8:	23fa      	movs	r3, #250	; 0xfa
 80062ca:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	e007      	b.n	80062e4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80062d4:	893b      	ldrh	r3, [r7, #8]
 80062d6:	b21b      	sxth	r3, r3
 80062d8:	461a      	mov	r2, r3
 80062da:	23fa      	movs	r3, #250	; 0xfa
 80062dc:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80062e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b08b      	sub	sp, #44	; 0x2c
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80062fe:	2308      	movs	r3, #8
 8006300:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8006302:	2300      	movs	r3, #0
 8006304:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800630c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	fbb2 f3f3 	udiv	r3, r2, r3
 8006316:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006320:	69b9      	ldr	r1, [r7, #24]
 8006322:	fb01 f202 	mul.w	r2, r1, r2
 8006326:	1a9b      	subs	r3, r3, r2
 8006328:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
 800632e:	e030      	b.n	8006392 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8006330:	2300      	movs	r3, #0
 8006332:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	4413      	add	r3, r2
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800633e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	429a      	cmp	r2, r3
 8006344:	d11e      	bne.n	8006384 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8006346:	7ffa      	ldrb	r2, [r7, #31]
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	fa42 f303 	asr.w	r3, r2, r3
 800634e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8006354:	e016      	b.n	8006384 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8006356:	7ffb      	ldrb	r3, [r7, #31]
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00b      	beq.n	8006378 <get_next_good_spad+0x88>
				success = 1;
 8006360:	2301      	movs	r3, #1
 8006362:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8006364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	fb03 f202 	mul.w	r2, r3, r2
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	4413      	add	r3, r2
 8006370:	461a      	mov	r2, r3
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	601a      	str	r2, [r3, #0]
				break;
 8006376:	e009      	b.n	800638c <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8006378:	7ffb      	ldrb	r3, [r7, #31]
 800637a:	085b      	lsrs	r3, r3, #1
 800637c:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	3301      	adds	r3, #1
 8006382:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8006384:	6a3a      	ldr	r2, [r7, #32]
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	429a      	cmp	r2, r3
 800638a:	d3e4      	bcc.n	8006356 <get_next_good_spad+0x66>
				coarseIndex++) {
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	3301      	adds	r3, #1
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8006392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	429a      	cmp	r2, r3
 8006398:	d202      	bcs.n	80063a0 <get_next_good_spad+0xb0>
 800639a:	7fbb      	ldrb	r3, [r7, #30]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d0c7      	beq.n	8006330 <get_next_good_spad+0x40>
		}
	}
}
 80063a0:	bf00      	nop
 80063a2:	372c      	adds	r7, #44	; 0x2c
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80063b4:	2301      	movs	r3, #1
 80063b6:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	099b      	lsrs	r3, r3, #6
 80063bc:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80063be:	4a07      	ldr	r2, [pc, #28]	; (80063dc <is_aperture+0x30>)
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <is_aperture+0x22>
		isAperture = 0;
 80063ca:	2300      	movs	r3, #0
 80063cc:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	2000051c 	.word	0x2000051c

080063e0 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b089      	sub	sp, #36	; 0x24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80063ec:	2300      	movs	r3, #0
 80063ee:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80063f0:	2308      	movs	r3, #8
 80063f2:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fc:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	fbb3 f2f2 	udiv	r2, r3, r2
 8006406:	69b9      	ldr	r1, [r7, #24]
 8006408:	fb01 f202 	mul.w	r2, r1, r2
 800640c:	1a9b      	subs	r3, r3, r2
 800640e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	429a      	cmp	r2, r3
 8006416:	d302      	bcc.n	800641e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006418:	23ce      	movs	r3, #206	; 0xce
 800641a:	77fb      	strb	r3, [r7, #31]
 800641c:	e010      	b.n	8006440 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	4413      	add	r3, r2
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	b25a      	sxtb	r2, r3
 8006428:	2101      	movs	r1, #1
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	fa01 f303 	lsl.w	r3, r1, r3
 8006430:	b25b      	sxtb	r3, r3
 8006432:	4313      	orrs	r3, r2
 8006434:	b259      	sxtb	r1, r3
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	4413      	add	r3, r2
 800643c:	b2ca      	uxtb	r2, r1
 800643e:	701a      	strb	r2, [r3, #0]

	return status;
 8006440:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3724      	adds	r7, #36	; 0x24
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800645a:	2306      	movs	r3, #6
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	21b0      	movs	r1, #176	; 0xb0
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7fc fa4f 	bl	8002904 <VL53L0X_WriteMulti>
 8006466:	4603      	mov	r3, r0
 8006468:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800646a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
 800647e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8006480:	2306      	movs	r3, #6
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	21b0      	movs	r1, #176	; 0xb0
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7fc fa6c 	bl	8002964 <VL53L0X_ReadMulti>
 800648c:	4603      	mov	r3, r0
 800648e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8006490:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08c      	sub	sp, #48	; 0x30
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	607a      	str	r2, [r7, #4]
 80064a6:	603b      	str	r3, [r7, #0]
 80064a8:	460b      	mov	r3, r1
 80064aa:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80064ac:	2300      	movs	r3, #0
 80064ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80064b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064b4:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80064b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064b8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80064ba:	2300      	movs	r3, #0
 80064bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80064be:	e02b      	b.n	8006518 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80064c0:	f107 031c 	add.w	r3, r7, #28
 80064c4:	6a3a      	ldr	r2, [r7, #32]
 80064c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7ff ff11 	bl	80062f0 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064d4:	d103      	bne.n	80064de <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80064d6:	23ce      	movs	r3, #206	; 0xce
 80064d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80064dc:	e020      	b.n	8006520 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	461a      	mov	r2, r3
 80064e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e4:	4413      	add	r3, r2
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7ff ff60 	bl	80063ac <is_aperture>
 80064ec:	4603      	mov	r3, r0
 80064ee:	461a      	mov	r2, r3
 80064f0:	7afb      	ldrb	r3, [r7, #11]
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d003      	beq.n	80064fe <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80064f6:	23ce      	movs	r3, #206	; 0xce
 80064f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80064fc:	e010      	b.n	8006520 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8006502:	6a3a      	ldr	r2, [r7, #32]
 8006504:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006506:	6838      	ldr	r0, [r7, #0]
 8006508:	f7ff ff6a 	bl	80063e0 <enable_spad_bit>
		currentSpad++;
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	3301      	adds	r3, #1
 8006510:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8006512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006514:	3301      	adds	r3, #1
 8006516:	62bb      	str	r3, [r7, #40]	; 0x28
 8006518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800651a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800651c:	429a      	cmp	r2, r3
 800651e:	d3cf      	bcc.n	80064c0 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8006520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006522:	6a3a      	ldr	r2, [r7, #32]
 8006524:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8006526:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800652a:	2b00      	cmp	r3, #0
 800652c:	d106      	bne.n	800653c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f7ff ff8d 	bl	8006450 <set_ref_spad_map>
 8006536:	4603      	mov	r3, r0
 8006538:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800653c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006540:	2b00      	cmp	r3, #0
 8006542:	d121      	bne.n	8006588 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8006544:	f107 0314 	add.w	r3, r7, #20
 8006548:	4619      	mov	r1, r3
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f7ff ff93 	bl	8006476 <get_ref_spad_map>
 8006550:	4603      	mov	r3, r0
 8006552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8006556:	2300      	movs	r3, #0
 8006558:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800655a:	e011      	b.n	8006580 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	4413      	add	r3, r2
 8006562:	781a      	ldrb	r2, [r3, #0]
 8006564:	f107 0114 	add.w	r1, r7, #20
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	440b      	add	r3, r1
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	429a      	cmp	r2, r3
 8006570:	d003      	beq.n	800657a <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006572:	23ce      	movs	r3, #206	; 0xce
 8006574:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8006578:	e006      	b.n	8006588 <enable_ref_spads+0xec>
			}
			i++;
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	3301      	adds	r3, #1
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8006580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006584:	429a      	cmp	r2, r3
 8006586:	d3e9      	bcc.n	800655c <enable_ref_spads+0xc0>
		}
	}
	return status;
 8006588:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800658c:	4618      	mov	r0, r3
 800658e:	3730      	adds	r7, #48	; 0x30
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08a      	sub	sp, #40	; 0x28
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800659e:	2300      	movs	r3, #0
 80065a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80065a4:	2300      	movs	r3, #0
 80065a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80065b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80065b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d107      	bne.n	80065cc <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80065bc:	22c0      	movs	r2, #192	; 0xc0
 80065be:	2101      	movs	r1, #1
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7fc f9fb 	bl	80029bc <VL53L0X_WrByte>
 80065c6:	4603      	mov	r3, r0
 80065c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80065cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d108      	bne.n	80065e6 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80065d4:	f107 0308 	add.w	r3, r7, #8
 80065d8:	4619      	mov	r1, r3
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7ff fc48 	bl	8005e70 <VL53L0X_PerformSingleRangingMeasurement>
 80065e0:	4603      	mov	r3, r0
 80065e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80065e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d107      	bne.n	80065fe <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80065ee:	2201      	movs	r2, #1
 80065f0:	21ff      	movs	r1, #255	; 0xff
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7fc f9e2 	bl	80029bc <VL53L0X_WrByte>
 80065f8:	4603      	mov	r3, r0
 80065fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 80065fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006602:	2b00      	cmp	r3, #0
 8006604:	d107      	bne.n	8006616 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	21b6      	movs	r1, #182	; 0xb6
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7fc fab4 	bl	8002b78 <VL53L0X_RdWord>
 8006610:	4603      	mov	r3, r0
 8006612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8006616:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800661a:	2b00      	cmp	r3, #0
 800661c:	d107      	bne.n	800662e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800661e:	2200      	movs	r2, #0
 8006620:	21ff      	movs	r1, #255	; 0xff
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7fc f9ca 	bl	80029bc <VL53L0X_WrByte>
 8006628:	4603      	mov	r3, r0
 800662a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800662e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006632:	2b00      	cmp	r3, #0
 8006634:	d112      	bne.n	800665c <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006636:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800663a:	461a      	mov	r2, r3
 800663c:	2101      	movs	r1, #1
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7fc f9bc 	bl	80029bc <VL53L0X_WrByte>
 8006644:	4603      	mov	r3, r0
 8006646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800664a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800664e:	2b00      	cmp	r3, #0
 8006650:	d104      	bne.n	800665c <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8006658:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800665c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006660:	4618      	mov	r0, r3
 8006662:	3728      	adds	r7, #40	; 0x28
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8006668:	b590      	push	{r4, r7, lr}
 800666a:	b09d      	sub	sp, #116	; 0x74
 800666c:	af06      	add	r7, sp, #24
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006674:	2300      	movs	r3, #0
 8006676:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800667a:	23b4      	movs	r3, #180	; 0xb4
 800667c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8006680:	2303      	movs	r3, #3
 8006682:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8006684:	232c      	movs	r3, #44	; 0x2c
 8006686:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8006688:	2300      	movs	r3, #0
 800668a:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800668c:	2300      	movs	r3, #0
 800668e:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8006690:	2300      	movs	r3, #0
 8006692:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8006694:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006698:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800669a:	2300      	movs	r3, #0
 800669c:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800669e:	2300      	movs	r3, #0
 80066a0:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80066a2:	2306      	movs	r3, #6
 80066a4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80066a6:	2300      	movs	r3, #0
 80066a8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80066aa:	2300      	movs	r3, #0
 80066ac:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80066ae:	2300      	movs	r3, #0
 80066b0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80066b4:	2300      	movs	r3, #0
 80066b6:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80066b8:	2300      	movs	r3, #0
 80066ba:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80066bc:	2300      	movs	r3, #0
 80066be:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80066c0:	2300      	movs	r3, #0
 80066c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80066cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80066ce:	2300      	movs	r3, #0
 80066d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80066d2:	e009      	b.n	80066e8 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066d8:	4413      	add	r3, r2
 80066da:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80066de:	2200      	movs	r2, #0
 80066e0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80066e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e4:	3301      	adds	r3, #1
 80066e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80066e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d3f1      	bcc.n	80066d4 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80066f0:	2201      	movs	r2, #1
 80066f2:	21ff      	movs	r1, #255	; 0xff
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f7fc f961 	bl	80029bc <VL53L0X_WrByte>
 80066fa:	4603      	mov	r3, r0
 80066fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006700:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006704:	2b00      	cmp	r3, #0
 8006706:	d107      	bne.n	8006718 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8006708:	2200      	movs	r2, #0
 800670a:	214f      	movs	r1, #79	; 0x4f
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f7fc f955 	bl	80029bc <VL53L0X_WrByte>
 8006712:	4603      	mov	r3, r0
 8006714:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006718:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800671c:	2b00      	cmp	r3, #0
 800671e:	d107      	bne.n	8006730 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8006720:	222c      	movs	r2, #44	; 0x2c
 8006722:	214e      	movs	r1, #78	; 0x4e
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f7fc f949 	bl	80029bc <VL53L0X_WrByte>
 800672a:	4603      	mov	r3, r0
 800672c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006730:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006734:	2b00      	cmp	r3, #0
 8006736:	d107      	bne.n	8006748 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006738:	2200      	movs	r2, #0
 800673a:	21ff      	movs	r1, #255	; 0xff
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f7fc f93d 	bl	80029bc <VL53L0X_WrByte>
 8006742:	4603      	mov	r3, r0
 8006744:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006748:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800674c:	2b00      	cmp	r3, #0
 800674e:	d109      	bne.n	8006764 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8006750:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006754:	461a      	mov	r2, r3
 8006756:	21b6      	movs	r1, #182	; 0xb6
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f7fc f92f 	bl	80029bc <VL53L0X_WrByte>
 800675e:	4603      	mov	r3, r0
 8006760:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8006764:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006768:	2b00      	cmp	r3, #0
 800676a:	d107      	bne.n	800677c <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800676c:	2200      	movs	r2, #0
 800676e:	2180      	movs	r1, #128	; 0x80
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f7fc f923 	bl	80029bc <VL53L0X_WrByte>
 8006776:	4603      	mov	r3, r0
 8006778:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800677c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10a      	bne.n	800679a <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8006784:	f107 0210 	add.w	r2, r7, #16
 8006788:	f107 0111 	add.w	r1, r7, #17
 800678c:	2300      	movs	r3, #0
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f000 fbbb 	bl	8006f0a <VL53L0X_perform_ref_calibration>
 8006794:	4603      	mov	r3, r0
 8006796:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800679a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d121      	bne.n	80067e6 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80067a2:	2300      	movs	r3, #0
 80067a4:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80067a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a8:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80067aa:	2300      	movs	r3, #0
 80067ac:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80067ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80067be:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80067c2:	f107 0218 	add.w	r2, r7, #24
 80067c6:	9204      	str	r2, [sp, #16]
 80067c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067ca:	9203      	str	r2, [sp, #12]
 80067cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80067ce:	9202      	str	r2, [sp, #8]
 80067d0:	9301      	str	r3, [sp, #4]
 80067d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	4623      	mov	r3, r4
 80067d8:	4602      	mov	r2, r0
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f7ff fe5e 	bl	800649c <enable_ref_spads>
 80067e0:	4603      	mov	r3, r0
 80067e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80067e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d174      	bne.n	80068d8 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 80067f2:	f107 0312 	add.w	r3, r7, #18
 80067f6:	4619      	mov	r1, r3
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f7ff fecb 	bl	8006594 <perform_ref_signal_measurement>
 80067fe:	4603      	mov	r3, r0
 8006800:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006804:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006808:	2b00      	cmp	r3, #0
 800680a:	d161      	bne.n	80068d0 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800680c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800680e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006810:	429a      	cmp	r2, r3
 8006812:	d25d      	bcs.n	80068d0 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8006814:	2300      	movs	r3, #0
 8006816:	64bb      	str	r3, [r7, #72]	; 0x48
 8006818:	e009      	b.n	800682e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800681a:	68fa      	ldr	r2, [r7, #12]
 800681c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800681e:	4413      	add	r3, r2
 8006820:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006824:	2200      	movs	r2, #0
 8006826:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8006828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800682a:	3301      	adds	r3, #1
 800682c:	64bb      	str	r3, [r7, #72]	; 0x48
 800682e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006832:	429a      	cmp	r2, r3
 8006834:	d3f1      	bcc.n	800681a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8006836:	e002      	b.n	800683e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8006838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800683a:	3301      	adds	r3, #1
 800683c:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800683e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8006842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006844:	4413      	add	r3, r2
 8006846:	4618      	mov	r0, r3
 8006848:	f7ff fdb0 	bl	80063ac <is_aperture>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d103      	bne.n	800685a <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8006852:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006856:	429a      	cmp	r2, r3
 8006858:	d3ee      	bcc.n	8006838 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800685a:	2301      	movs	r3, #1
 800685c:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800685e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006860:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800686e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006872:	f107 0218 	add.w	r2, r7, #24
 8006876:	9204      	str	r2, [sp, #16]
 8006878:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800687a:	9203      	str	r2, [sp, #12]
 800687c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800687e:	9202      	str	r2, [sp, #8]
 8006880:	9301      	str	r3, [sp, #4]
 8006882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	4623      	mov	r3, r4
 8006888:	4602      	mov	r2, r0
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f7ff fe06 	bl	800649c <enable_ref_spads>
 8006890:	4603      	mov	r3, r0
 8006892:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006896:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800689a:	2b00      	cmp	r3, #0
 800689c:	d11b      	bne.n	80068d6 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80068a2:	f107 0312 	add.w	r3, r7, #18
 80068a6:	4619      	mov	r1, r3
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f7ff fe73 	bl	8006594 <perform_ref_signal_measurement>
 80068ae:	4603      	mov	r3, r0
 80068b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 80068b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10c      	bne.n	80068d6 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 80068bc:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 80068be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d208      	bcs.n	80068d6 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 80068c4:	2301      	movs	r3, #1
 80068c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 80068ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068cc:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 80068ce:	e002      	b.n	80068d6 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 80068d0:	2300      	movs	r3, #0
 80068d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068d4:	e000      	b.n	80068d8 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 80068d6:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80068d8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f040 80af 	bne.w	8006a40 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 80068e2:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 80068e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80068e6:	429a      	cmp	r2, r3
 80068e8:	f240 80aa 	bls.w	8006a40 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 80068ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 80068f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f4:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f503 7192 	add.w	r1, r3, #292	; 0x124
 80068fc:	f107 031c 	add.w	r3, r7, #28
 8006900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006902:	4618      	mov	r0, r3
 8006904:	f011 ff2c 	bl	8018760 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006908:	8a7b      	ldrh	r3, [r7, #18]
 800690a:	461a      	mov	r2, r3
 800690c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	bfb8      	it	lt
 8006914:	425b      	neglt	r3, r3
 8006916:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8006918:	2300      	movs	r3, #0
 800691a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800691e:	e086      	b.n	8006a2e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8006926:	f107 0314 	add.w	r3, r7, #20
 800692a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800692c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800692e:	f7ff fcdf 	bl	80062f0 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006938:	d103      	bne.n	8006942 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800693a:	23ce      	movs	r3, #206	; 0xce
 800693c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8006940:	e07e      	b.n	8006a40 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006942:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	4413      	add	r3, r2
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff fd2e 	bl	80063ac <is_aperture>
 8006950:	4603      	mov	r3, r0
 8006952:	461a      	mov	r2, r3
 8006954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006956:	4293      	cmp	r3, r2
 8006958:	d003      	beq.n	8006962 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800695a:	2301      	movs	r3, #1
 800695c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8006960:	e06e      	b.n	8006a40 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8006962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006964:	3301      	adds	r3, #1
 8006966:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8006972:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff fd32 	bl	80063e0 <enable_spad_bit>
 800697c:	4603      	mov	r3, r0
 800697e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006982:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10c      	bne.n	80069a4 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800698a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800698c:	3301      	adds	r3, #1
 800698e:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8006996:	4619      	mov	r1, r3
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f7ff fd59 	bl	8006450 <set_ref_spad_map>
 800699e:	4603      	mov	r3, r0
 80069a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80069a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d146      	bne.n	8006a3a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80069ac:	f107 0312 	add.w	r3, r7, #18
 80069b0:	4619      	mov	r1, r3
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f7ff fdee 	bl	8006594 <perform_ref_signal_measurement>
 80069b8:	4603      	mov	r3, r0
 80069ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 80069be:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d13b      	bne.n	8006a3e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80069c6:	8a7b      	ldrh	r3, [r7, #18]
 80069c8:	461a      	mov	r2, r3
 80069ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	bfb8      	it	lt
 80069d2:	425b      	neglt	r3, r3
 80069d4:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 80069d6:	8a7b      	ldrh	r3, [r7, #18]
 80069d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80069da:	429a      	cmp	r2, r3
 80069dc:	d21c      	bcs.n	8006a18 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80069de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d914      	bls.n	8006a10 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 80069e6:	f107 031c 	add.w	r3, r7, #28
 80069ea:	4619      	mov	r1, r3
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f7ff fd2f 	bl	8006450 <set_ref_spad_map>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 80069fe:	f107 011c 	add.w	r1, r7, #28
 8006a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a04:	4618      	mov	r0, r3
 8006a06:	f011 feab 	bl	8018760 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8006a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8006a10:	2301      	movs	r3, #1
 8006a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a16:	e00a      	b.n	8006a2e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8006a22:	f107 031c 	add.w	r3, r7, #28
 8006a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f011 fe99 	bl	8018760 <memcpy>
		while (!complete) {
 8006a2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f43f af74 	beq.w	8006920 <VL53L0X_perform_ref_spad_management+0x2b8>
 8006a38:	e002      	b.n	8006a40 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006a3a:	bf00      	nop
 8006a3c:	e000      	b.n	8006a40 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006a3e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006a40:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d115      	bne.n	8006a74 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a4c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8006a54:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	781a      	ldrb	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8006a74:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	375c      	adds	r7, #92	; 0x5c
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd90      	pop	{r4, r7, pc}

08006a80 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8006a80:	b590      	push	{r4, r7, lr}
 8006a82:	b093      	sub	sp, #76	; 0x4c
 8006a84:	af06      	add	r7, sp, #24
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8006a94:	2300      	movs	r3, #0
 8006a96:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8006a98:	23b4      	movs	r3, #180	; 0xb4
 8006a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8006a9e:	2306      	movs	r3, #6
 8006aa0:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8006aa2:	232c      	movs	r3, #44	; 0x2c
 8006aa4:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	21ff      	movs	r1, #255	; 0xff
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f7fb ff86 	bl	80029bc <VL53L0X_WrByte>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006ab6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d107      	bne.n	8006ace <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8006abe:	2200      	movs	r2, #0
 8006ac0:	214f      	movs	r1, #79	; 0x4f
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f7fb ff7a 	bl	80029bc <VL53L0X_WrByte>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006ace:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d107      	bne.n	8006ae6 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8006ad6:	222c      	movs	r2, #44	; 0x2c
 8006ad8:	214e      	movs	r1, #78	; 0x4e
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f7fb ff6e 	bl	80029bc <VL53L0X_WrByte>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006ae6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d107      	bne.n	8006afe <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006aee:	2200      	movs	r2, #0
 8006af0:	21ff      	movs	r1, #255	; 0xff
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f7fb ff62 	bl	80029bc <VL53L0X_WrByte>
 8006af8:	4603      	mov	r3, r0
 8006afa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006afe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d109      	bne.n	8006b1a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8006b06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	21b6      	movs	r1, #182	; 0xb6
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f7fb ff54 	bl	80029bc <VL53L0X_WrByte>
 8006b14:	4603      	mov	r3, r0
 8006b16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b1e:	e009      	b.n	8006b34 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	3301      	adds	r3, #1
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24
 8006b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d3f1      	bcc.n	8006b20 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8006b3c:	79fb      	ldrb	r3, [r7, #7]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d011      	beq.n	8006b66 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006b42:	e002      	b.n	8006b4a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8006b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b46:	3301      	adds	r3, #1
 8006b48:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006b4a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b50:	4413      	add	r3, r2
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7ff fc2a 	bl	80063ac <is_aperture>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d103      	bne.n	8006b66 <VL53L0X_set_reference_spads+0xe6>
 8006b5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d3ee      	bcc.n	8006b44 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8006b72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b76:	79f9      	ldrb	r1, [r7, #7]
 8006b78:	f107 0214 	add.w	r2, r7, #20
 8006b7c:	9204      	str	r2, [sp, #16]
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	9203      	str	r2, [sp, #12]
 8006b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b84:	9202      	str	r2, [sp, #8]
 8006b86:	9301      	str	r3, [sp, #4]
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	4623      	mov	r3, r4
 8006b8e:	4602      	mov	r2, r0
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f7ff fc83 	bl	800649c <enable_ref_spads>
 8006b96:	4603      	mov	r3, r0
 8006b98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8006b9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10c      	bne.n	8006bbe <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	79fa      	ldrb	r2, [r7, #7]
 8006bba:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8006bbe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3734      	adds	r7, #52	; 0x34
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd90      	pop	{r4, r7, pc}

08006bca <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b084      	sub	sp, #16
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10a      	bne.n	8006bf8 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8006be2:	78fb      	ldrb	r3, [r7, #3]
 8006be4:	f043 0301 	orr.w	r3, r3, #1
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	461a      	mov	r2, r3
 8006bec:	2100      	movs	r1, #0
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f7fb fee4 	bl	80029bc <VL53L0X_WrByte>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8006bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d104      	bne.n	8006c0a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 f9bf 	bl	8006f84 <VL53L0X_measurement_poll_for_completion>
 8006c06:	4603      	mov	r3, r0
 8006c08:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d105      	bne.n	8006c1e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006c12:	2100      	movs	r1, #0
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff fab5 	bl	8006184 <VL53L0X_ClearInterruptMask>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d106      	bne.n	8006c34 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8006c26:	2200      	movs	r2, #0
 8006c28:	2100      	movs	r1, #0
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7fb fec6 	bl	80029bc <VL53L0X_WrByte>
 8006c30:	4603      	mov	r3, r0
 8006c32:	73fb      	strb	r3, [r7, #15]

	return Status;
 8006c34:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	4608      	mov	r0, r1
 8006c4a:	4611      	mov	r1, r2
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	4603      	mov	r3, r0
 8006c50:	70fb      	strb	r3, [r7, #3]
 8006c52:	460b      	mov	r3, r1
 8006c54:	70bb      	strb	r3, [r7, #2]
 8006c56:	4613      	mov	r3, r2
 8006c58:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006c62:	2201      	movs	r2, #1
 8006c64:	21ff      	movs	r1, #255	; 0xff
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7fb fea8 	bl	80029bc <VL53L0X_WrByte>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	461a      	mov	r2, r3
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006c76:	2200      	movs	r2, #0
 8006c78:	2100      	movs	r1, #0
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7fb fe9e 	bl	80029bc <VL53L0X_WrByte>
 8006c80:	4603      	mov	r3, r0
 8006c82:	461a      	mov	r2, r3
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	21ff      	movs	r1, #255	; 0xff
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7fb fe94 	bl	80029bc <VL53L0X_WrByte>
 8006c94:	4603      	mov	r3, r0
 8006c96:	461a      	mov	r2, r3
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8006c9e:	78fb      	ldrb	r3, [r7, #3]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d01e      	beq.n	8006ce2 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8006ca4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d009      	beq.n	8006cc0 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	21cb      	movs	r1, #203	; 0xcb
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f7fb ff37 	bl	8002b24 <VL53L0X_RdByte>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	461a      	mov	r2, r3
 8006cba:	7bfb      	ldrb	r3, [r7, #15]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006cc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d02a      	beq.n	8006d1e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8006cc8:	f107 030e 	add.w	r3, r7, #14
 8006ccc:	461a      	mov	r2, r3
 8006cce:	21ee      	movs	r1, #238	; 0xee
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7fb ff27 	bl	8002b24 <VL53L0X_RdByte>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	461a      	mov	r2, r3
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	73fb      	strb	r3, [r7, #15]
 8006ce0:	e01d      	b.n	8006d1e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8006ce2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00a      	beq.n	8006d00 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8006cea:	78bb      	ldrb	r3, [r7, #2]
 8006cec:	461a      	mov	r2, r3
 8006cee:	21cb      	movs	r1, #203	; 0xcb
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7fb fe63 	bl	80029bc <VL53L0X_WrByte>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006d00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00a      	beq.n	8006d1e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8006d08:	787b      	ldrb	r3, [r7, #1]
 8006d0a:	2280      	movs	r2, #128	; 0x80
 8006d0c:	21ee      	movs	r1, #238	; 0xee
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7fb fed4 	bl	8002abc <VL53L0X_UpdateByte>
 8006d14:	4603      	mov	r3, r0
 8006d16:	461a      	mov	r2, r3
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006d1e:	2201      	movs	r2, #1
 8006d20:	21ff      	movs	r1, #255	; 0xff
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7fb fe4a 	bl	80029bc <VL53L0X_WrByte>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006d32:	2201      	movs	r2, #1
 8006d34:	2100      	movs	r1, #0
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7fb fe40 	bl	80029bc <VL53L0X_WrByte>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	461a      	mov	r2, r3
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006d46:	2200      	movs	r2, #0
 8006d48:	21ff      	movs	r1, #255	; 0xff
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7fb fe36 	bl	80029bc <VL53L0X_WrByte>
 8006d50:	4603      	mov	r3, r0
 8006d52:	461a      	mov	r2, r3
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8006d5a:	7bbb      	ldrb	r3, [r7, #14]
 8006d5c:	f023 0310 	bic.w	r3, r3, #16
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	701a      	strb	r2, [r3, #0]

	return Status;
 8006d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b08a      	sub	sp, #40	; 0x28
 8006d76:	af04      	add	r7, sp, #16
 8006d78:	60f8      	str	r0, [r7, #12]
 8006d7a:	60b9      	str	r1, [r7, #8]
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	461a      	mov	r2, r3
 8006d80:	460b      	mov	r3, r1
 8006d82:	71fb      	strb	r3, [r7, #7]
 8006d84:	4613      	mov	r3, r2
 8006d86:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006d94:	2300      	movs	r3, #0
 8006d96:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006d9c:	79bb      	ldrb	r3, [r7, #6]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006da8:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8006daa:	2201      	movs	r2, #1
 8006dac:	2101      	movs	r1, #1
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f7fb fe04 	bl	80029bc <VL53L0X_WrByte>
 8006db4:	4603      	mov	r3, r0
 8006db6:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006db8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d105      	bne.n	8006dcc <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8006dc0:	2140      	movs	r1, #64	; 0x40
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f7ff ff01 	bl	8006bca <VL53L0X_perform_single_ref_calibration>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006dcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d115      	bne.n	8006e00 <VL53L0X_perform_vhv_calibration+0x8e>
 8006dd4:	79fb      	ldrb	r3, [r7, #7]
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d112      	bne.n	8006e00 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006dda:	7d39      	ldrb	r1, [r7, #20]
 8006ddc:	7d7a      	ldrb	r2, [r7, #21]
 8006dde:	2300      	movs	r3, #0
 8006de0:	9303      	str	r3, [sp, #12]
 8006de2:	2301      	movs	r3, #1
 8006de4:	9302      	str	r3, [sp, #8]
 8006de6:	f107 0313 	add.w	r3, r7, #19
 8006dea:	9301      	str	r3, [sp, #4]
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	460b      	mov	r3, r1
 8006df2:	2101      	movs	r1, #1
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f7ff ff23 	bl	8006c40 <VL53L0X_ref_calibration_io>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	75fb      	strb	r3, [r7, #23]
 8006dfe:	e002      	b.n	8006e06 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	2200      	movs	r2, #0
 8006e04:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006e06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d112      	bne.n	8006e34 <VL53L0X_perform_vhv_calibration+0xc2>
 8006e0e:	79bb      	ldrb	r3, [r7, #6]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00f      	beq.n	8006e34 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006e14:	7dbb      	ldrb	r3, [r7, #22]
 8006e16:	461a      	mov	r2, r3
 8006e18:	2101      	movs	r1, #1
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f7fb fdce 	bl	80029bc <VL53L0X_WrByte>
 8006e20:	4603      	mov	r3, r0
 8006e22:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006e24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d103      	bne.n	8006e34 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	7dba      	ldrb	r2, [r7, #22]
 8006e30:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006e34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3718      	adds	r7, #24
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b08a      	sub	sp, #40	; 0x28
 8006e44:	af04      	add	r7, sp, #16
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	460b      	mov	r3, r1
 8006e50:	71fb      	strb	r3, [r7, #7]
 8006e52:	4613      	mov	r3, r2
 8006e54:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e56:	2300      	movs	r3, #0
 8006e58:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006e66:	79bb      	ldrb	r3, [r7, #6]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d003      	beq.n	8006e74 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006e72:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8006e74:	2202      	movs	r2, #2
 8006e76:	2101      	movs	r1, #1
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f7fb fd9f 	bl	80029bc <VL53L0X_WrByte>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006e82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d105      	bne.n	8006e96 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f7ff fe9c 	bl	8006bca <VL53L0X_perform_single_ref_calibration>
 8006e92:	4603      	mov	r3, r0
 8006e94:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006e96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d115      	bne.n	8006eca <VL53L0X_perform_phase_calibration+0x8a>
 8006e9e:	79fb      	ldrb	r3, [r7, #7]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d112      	bne.n	8006eca <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006ea4:	7d39      	ldrb	r1, [r7, #20]
 8006ea6:	7d7a      	ldrb	r2, [r7, #21]
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	9303      	str	r3, [sp, #12]
 8006eac:	2300      	movs	r3, #0
 8006eae:	9302      	str	r3, [sp, #8]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	9301      	str	r3, [sp, #4]
 8006eb4:	f107 0313 	add.w	r3, r7, #19
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	460b      	mov	r3, r1
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f7ff febe 	bl	8006c40 <VL53L0X_ref_calibration_io>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	75fb      	strb	r3, [r7, #23]
 8006ec8:	e002      	b.n	8006ed0 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006ed0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d112      	bne.n	8006efe <VL53L0X_perform_phase_calibration+0xbe>
 8006ed8:	79bb      	ldrb	r3, [r7, #6]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00f      	beq.n	8006efe <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006ede:	7dbb      	ldrb	r3, [r7, #22]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	2101      	movs	r1, #1
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f7fb fd69 	bl	80029bc <VL53L0X_WrByte>
 8006eea:	4603      	mov	r3, r0
 8006eec:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006eee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d103      	bne.n	8006efe <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	7dba      	ldrb	r2, [r7, #22]
 8006efa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006efe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3718      	adds	r7, #24
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b086      	sub	sp, #24
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	60f8      	str	r0, [r7, #12]
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	607a      	str	r2, [r7, #4]
 8006f16:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006f26:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8006f28:	78fa      	ldrb	r2, [r7, #3]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	68b9      	ldr	r1, [r7, #8]
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f7ff ff1f 	bl	8006d72 <VL53L0X_perform_vhv_calibration>
 8006f34:	4603      	mov	r3, r0
 8006f36:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006f38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d107      	bne.n	8006f50 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8006f40:	78fa      	ldrb	r2, [r7, #3]
 8006f42:	2300      	movs	r3, #0
 8006f44:	6879      	ldr	r1, [r7, #4]
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f7ff ff7a 	bl	8006e40 <VL53L0X_perform_phase_calibration>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8006f50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d10f      	bne.n	8006f78 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006f58:	7dbb      	ldrb	r3, [r7, #22]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	2101      	movs	r1, #1
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f7fb fd2c 	bl	80029bc <VL53L0X_WrByte>
 8006f64:	4603      	mov	r3, r0
 8006f66:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006f68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d103      	bne.n	8006f78 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	7dba      	ldrb	r2, [r7, #22]
 8006f74:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006f78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3718      	adds	r7, #24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8006f90:	2300      	movs	r3, #0
 8006f92:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8006f94:	2300      	movs	r3, #0
 8006f96:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006f98:	f107 030f 	add.w	r3, r7, #15
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7fe fe02 	bl	8005ba8 <VL53L0X_GetMeasurementDataReady>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8006fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d110      	bne.n	8006fd2 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d00f      	beq.n	8006fd6 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006fc2:	d302      	bcc.n	8006fca <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8006fc4:	23f9      	movs	r3, #249	; 0xf9
 8006fc6:	75fb      	strb	r3, [r7, #23]
			break;
 8006fc8:	e006      	b.n	8006fd8 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7fb fe48 	bl	8002c60 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8006fd0:	e7e2      	b.n	8006f98 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8006fd2:	bf00      	nop
 8006fd4:	e000      	b.n	8006fd8 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8006fd6:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8006fd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3718      	adds	r7, #24
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	4603      	mov	r3, r0
 8006fec:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8006ff2:	79fb      	ldrb	r3, [r7, #7]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	005b      	lsls	r3, r3, #1
 8006ffa:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3714      	adds	r7, #20
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr

0800700a <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800700a:	b480      	push	{r7}
 800700c:	b085      	sub	sp, #20
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8007012:	2300      	movs	r3, #0
 8007014:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8007016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800701a:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800701c:	e002      	b.n	8007024 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	089b      	lsrs	r3, r3, #2
 8007022:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	429a      	cmp	r2, r3
 800702a:	d8f8      	bhi.n	800701e <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800702c:	e017      	b.n	800705e <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	4413      	add	r3, r2
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	429a      	cmp	r2, r3
 8007038:	d30b      	bcc.n	8007052 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	4413      	add	r3, r2
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	085b      	lsrs	r3, r3, #1
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	4413      	add	r3, r2
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	e002      	b.n	8007058 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	085b      	lsrs	r3, r3, #1
 8007056:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	089b      	lsrs	r3, r3, #2
 800705c:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1e4      	bne.n	800702e <VL53L0X_isqrt+0x24>
	}

	return res;
 8007064:	68fb      	ldr	r3, [r7, #12]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b086      	sub	sp, #24
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800707a:	2300      	movs	r3, #0
 800707c:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800707e:	2200      	movs	r2, #0
 8007080:	2183      	movs	r1, #131	; 0x83
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7fb fc9a 	bl	80029bc <VL53L0X_WrByte>
 8007088:	4603      	mov	r3, r0
 800708a:	461a      	mov	r2, r3
 800708c:	7dfb      	ldrb	r3, [r7, #23]
 800708e:	4313      	orrs	r3, r2
 8007090:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8007092:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d11e      	bne.n	80070d8 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800709a:	2300      	movs	r3, #0
 800709c:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800709e:	f107 030f 	add.w	r3, r7, #15
 80070a2:	461a      	mov	r2, r3
 80070a4:	2183      	movs	r1, #131	; 0x83
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7fb fd3c 	bl	8002b24 <VL53L0X_RdByte>
 80070ac:	4603      	mov	r3, r0
 80070ae:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10a      	bne.n	80070cc <VL53L0X_device_read_strobe+0x5a>
 80070b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d106      	bne.n	80070cc <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	3301      	adds	r3, #1
 80070c2:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80070ca:	d3e8      	bcc.n	800709e <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80070d2:	d301      	bcc.n	80070d8 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80070d4:	23f9      	movs	r3, #249	; 0xf9
 80070d6:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80070d8:	2201      	movs	r2, #1
 80070da:	2183      	movs	r1, #131	; 0x83
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7fb fc6d 	bl	80029bc <VL53L0X_WrByte>
 80070e2:	4603      	mov	r3, r0
 80070e4:	461a      	mov	r2, r3
 80070e6:	7dfb      	ldrb	r3, [r7, #23]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80070ec:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3718      	adds	r7, #24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b098      	sub	sp, #96	; 0x60
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007104:	2300      	movs	r3, #0
 8007106:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800710a:	2300      	movs	r3, #0
 800710c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8007110:	2300      	movs	r3, #0
 8007112:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8007116:	2300      	movs	r3, #0
 8007118:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800711a:	2300      	movs	r3, #0
 800711c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800711e:	2300      	movs	r3, #0
 8007120:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8007122:	2300      	movs	r3, #0
 8007124:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8007128:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800712c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800712e:	2300      	movs	r3, #0
 8007130:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8007132:	2300      	movs	r3, #0
 8007134:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8007136:	2300      	movs	r3, #0
 8007138:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8007140:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8007144:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007148:	2b07      	cmp	r3, #7
 800714a:	f000 8408 	beq.w	800795e <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800714e:	2201      	movs	r2, #1
 8007150:	2180      	movs	r1, #128	; 0x80
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7fb fc32 	bl	80029bc <VL53L0X_WrByte>
 8007158:	4603      	mov	r3, r0
 800715a:	461a      	mov	r2, r3
 800715c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007160:	4313      	orrs	r3, r2
 8007162:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007166:	2201      	movs	r2, #1
 8007168:	21ff      	movs	r1, #255	; 0xff
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f7fb fc26 	bl	80029bc <VL53L0X_WrByte>
 8007170:	4603      	mov	r3, r0
 8007172:	461a      	mov	r2, r3
 8007174:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007178:	4313      	orrs	r3, r2
 800717a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800717e:	2200      	movs	r2, #0
 8007180:	2100      	movs	r1, #0
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7fb fc1a 	bl	80029bc <VL53L0X_WrByte>
 8007188:	4603      	mov	r3, r0
 800718a:	461a      	mov	r2, r3
 800718c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007190:	4313      	orrs	r3, r2
 8007192:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007196:	2206      	movs	r2, #6
 8007198:	21ff      	movs	r1, #255	; 0xff
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7fb fc0e 	bl	80029bc <VL53L0X_WrByte>
 80071a0:	4603      	mov	r3, r0
 80071a2:	461a      	mov	r2, r3
 80071a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071a8:	4313      	orrs	r3, r2
 80071aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80071ae:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80071b2:	461a      	mov	r2, r3
 80071b4:	2183      	movs	r1, #131	; 0x83
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7fb fcb4 	bl	8002b24 <VL53L0X_RdByte>
 80071bc:	4603      	mov	r3, r0
 80071be:	461a      	mov	r2, r3
 80071c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071c4:	4313      	orrs	r3, r2
 80071c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80071ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071ce:	f043 0304 	orr.w	r3, r3, #4
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	461a      	mov	r2, r3
 80071d6:	2183      	movs	r1, #131	; 0x83
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7fb fbef 	bl	80029bc <VL53L0X_WrByte>
 80071de:	4603      	mov	r3, r0
 80071e0:	461a      	mov	r2, r3
 80071e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071e6:	4313      	orrs	r3, r2
 80071e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80071ec:	2207      	movs	r2, #7
 80071ee:	21ff      	movs	r1, #255	; 0xff
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f7fb fbe3 	bl	80029bc <VL53L0X_WrByte>
 80071f6:	4603      	mov	r3, r0
 80071f8:	461a      	mov	r2, r3
 80071fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80071fe:	4313      	orrs	r3, r2
 8007200:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8007204:	2201      	movs	r2, #1
 8007206:	2181      	movs	r1, #129	; 0x81
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7fb fbd7 	bl	80029bc <VL53L0X_WrByte>
 800720e:	4603      	mov	r3, r0
 8007210:	461a      	mov	r2, r3
 8007212:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007216:	4313      	orrs	r3, r2
 8007218:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f7fb fd1f 	bl	8002c60 <VL53L0X_PollingDelay>
 8007222:	4603      	mov	r3, r0
 8007224:	461a      	mov	r2, r3
 8007226:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800722a:	4313      	orrs	r3, r2
 800722c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007230:	2201      	movs	r2, #1
 8007232:	2180      	movs	r1, #128	; 0x80
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7fb fbc1 	bl	80029bc <VL53L0X_WrByte>
 800723a:	4603      	mov	r3, r0
 800723c:	461a      	mov	r2, r3
 800723e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007242:	4313      	orrs	r3, r2
 8007244:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8007248:	78fb      	ldrb	r3, [r7, #3]
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	2b00      	cmp	r3, #0
 8007250:	f000 8098 	beq.w	8007384 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8007254:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007258:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800725c:	2b00      	cmp	r3, #0
 800725e:	f040 8091 	bne.w	8007384 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8007262:	226b      	movs	r2, #107	; 0x6b
 8007264:	2194      	movs	r1, #148	; 0x94
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f7fb fba8 	bl	80029bc <VL53L0X_WrByte>
 800726c:	4603      	mov	r3, r0
 800726e:	461a      	mov	r2, r3
 8007270:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007274:	4313      	orrs	r3, r2
 8007276:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f7ff fef9 	bl	8007072 <VL53L0X_device_read_strobe>
 8007280:	4603      	mov	r3, r0
 8007282:	461a      	mov	r2, r3
 8007284:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007288:	4313      	orrs	r3, r2
 800728a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800728e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007292:	461a      	mov	r2, r3
 8007294:	2190      	movs	r1, #144	; 0x90
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7fb fca6 	bl	8002be8 <VL53L0X_RdDWord>
 800729c:	4603      	mov	r3, r0
 800729e:	461a      	mov	r2, r3
 80072a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072a4:	4313      	orrs	r3, r2
 80072a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	0a1b      	lsrs	r3, r3, #8
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	0bdb      	lsrs	r3, r3, #15
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80072c6:	2224      	movs	r2, #36	; 0x24
 80072c8:	2194      	movs	r1, #148	; 0x94
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7fb fb76 	bl	80029bc <VL53L0X_WrByte>
 80072d0:	4603      	mov	r3, r0
 80072d2:	461a      	mov	r2, r3
 80072d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072d8:	4313      	orrs	r3, r2
 80072da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7ff fec7 	bl	8007072 <VL53L0X_device_read_strobe>
 80072e4:	4603      	mov	r3, r0
 80072e6:	461a      	mov	r2, r3
 80072e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072ec:	4313      	orrs	r3, r2
 80072ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80072f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80072f6:	461a      	mov	r2, r3
 80072f8:	2190      	movs	r1, #144	; 0x90
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f7fb fc74 	bl	8002be8 <VL53L0X_RdDWord>
 8007300:	4603      	mov	r3, r0
 8007302:	461a      	mov	r2, r3
 8007304:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007308:	4313      	orrs	r3, r2
 800730a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800730e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007310:	0e1b      	lsrs	r3, r3, #24
 8007312:	b2db      	uxtb	r3, r3
 8007314:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	0c1b      	lsrs	r3, r3, #16
 800731a:	b2db      	uxtb	r3, r3
 800731c:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007320:	0a1b      	lsrs	r3, r3, #8
 8007322:	b2db      	uxtb	r3, r3
 8007324:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8007326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007328:	b2db      	uxtb	r3, r3
 800732a:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800732c:	2225      	movs	r2, #37	; 0x25
 800732e:	2194      	movs	r1, #148	; 0x94
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f7fb fb43 	bl	80029bc <VL53L0X_WrByte>
 8007336:	4603      	mov	r3, r0
 8007338:	461a      	mov	r2, r3
 800733a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800733e:	4313      	orrs	r3, r2
 8007340:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7ff fe94 	bl	8007072 <VL53L0X_device_read_strobe>
 800734a:	4603      	mov	r3, r0
 800734c:	461a      	mov	r2, r3
 800734e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007352:	4313      	orrs	r3, r2
 8007354:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007358:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800735c:	461a      	mov	r2, r3
 800735e:	2190      	movs	r1, #144	; 0x90
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7fb fc41 	bl	8002be8 <VL53L0X_RdDWord>
 8007366:	4603      	mov	r3, r0
 8007368:	461a      	mov	r2, r3
 800736a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800736e:	4313      	orrs	r3, r2
 8007370:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8007374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007376:	0e1b      	lsrs	r3, r3, #24
 8007378:	b2db      	uxtb	r3, r3
 800737a:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800737c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737e:	0c1b      	lsrs	r3, r3, #16
 8007380:	b2db      	uxtb	r3, r3
 8007382:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8007384:	78fb      	ldrb	r3, [r7, #3]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b00      	cmp	r3, #0
 800738c:	f000 8189 	beq.w	80076a2 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8007390:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007394:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007398:	2b00      	cmp	r3, #0
 800739a:	f040 8182 	bne.w	80076a2 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800739e:	2202      	movs	r2, #2
 80073a0:	2194      	movs	r1, #148	; 0x94
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7fb fb0a 	bl	80029bc <VL53L0X_WrByte>
 80073a8:	4603      	mov	r3, r0
 80073aa:	461a      	mov	r2, r3
 80073ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073b0:	4313      	orrs	r3, r2
 80073b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7ff fe5b 	bl	8007072 <VL53L0X_device_read_strobe>
 80073bc:	4603      	mov	r3, r0
 80073be:	461a      	mov	r2, r3
 80073c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073c4:	4313      	orrs	r3, r2
 80073c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80073ca:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80073ce:	461a      	mov	r2, r3
 80073d0:	2190      	movs	r1, #144	; 0x90
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7fb fba6 	bl	8002b24 <VL53L0X_RdByte>
 80073d8:	4603      	mov	r3, r0
 80073da:	461a      	mov	r2, r3
 80073dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073e0:	4313      	orrs	r3, r2
 80073e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80073e6:	227b      	movs	r2, #123	; 0x7b
 80073e8:	2194      	movs	r1, #148	; 0x94
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7fb fae6 	bl	80029bc <VL53L0X_WrByte>
 80073f0:	4603      	mov	r3, r0
 80073f2:	461a      	mov	r2, r3
 80073f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073f8:	4313      	orrs	r3, r2
 80073fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7ff fe37 	bl	8007072 <VL53L0X_device_read_strobe>
 8007404:	4603      	mov	r3, r0
 8007406:	461a      	mov	r2, r3
 8007408:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800740c:	4313      	orrs	r3, r2
 800740e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8007412:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8007416:	461a      	mov	r2, r3
 8007418:	2190      	movs	r1, #144	; 0x90
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7fb fb82 	bl	8002b24 <VL53L0X_RdByte>
 8007420:	4603      	mov	r3, r0
 8007422:	461a      	mov	r2, r3
 8007424:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007428:	4313      	orrs	r3, r2
 800742a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800742e:	2277      	movs	r2, #119	; 0x77
 8007430:	2194      	movs	r1, #148	; 0x94
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7fb fac2 	bl	80029bc <VL53L0X_WrByte>
 8007438:	4603      	mov	r3, r0
 800743a:	461a      	mov	r2, r3
 800743c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007440:	4313      	orrs	r3, r2
 8007442:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7ff fe13 	bl	8007072 <VL53L0X_device_read_strobe>
 800744c:	4603      	mov	r3, r0
 800744e:	461a      	mov	r2, r3
 8007450:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007454:	4313      	orrs	r3, r2
 8007456:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800745a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800745e:	461a      	mov	r2, r3
 8007460:	2190      	movs	r1, #144	; 0x90
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f7fb fbc0 	bl	8002be8 <VL53L0X_RdDWord>
 8007468:	4603      	mov	r3, r0
 800746a:	461a      	mov	r2, r3
 800746c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007470:	4313      	orrs	r3, r2
 8007472:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8007476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007478:	0e5b      	lsrs	r3, r3, #25
 800747a:	b2db      	uxtb	r3, r3
 800747c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007480:	b2db      	uxtb	r3, r3
 8007482:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8007484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007486:	0c9b      	lsrs	r3, r3, #18
 8007488:	b2db      	uxtb	r3, r3
 800748a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800748e:	b2db      	uxtb	r3, r3
 8007490:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8007492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007494:	0adb      	lsrs	r3, r3, #11
 8007496:	b2db      	uxtb	r3, r3
 8007498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800749c:	b2db      	uxtb	r3, r3
 800749e:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80074a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a2:	091b      	lsrs	r3, r3, #4
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80074ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	b2db      	uxtb	r3, r3
 80074b6:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80074c0:	2278      	movs	r2, #120	; 0x78
 80074c2:	2194      	movs	r1, #148	; 0x94
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7fb fa79 	bl	80029bc <VL53L0X_WrByte>
 80074ca:	4603      	mov	r3, r0
 80074cc:	461a      	mov	r2, r3
 80074ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074d2:	4313      	orrs	r3, r2
 80074d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7ff fdca 	bl	8007072 <VL53L0X_device_read_strobe>
 80074de:	4603      	mov	r3, r0
 80074e0:	461a      	mov	r2, r3
 80074e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074e6:	4313      	orrs	r3, r2
 80074e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80074ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80074f0:	461a      	mov	r2, r3
 80074f2:	2190      	movs	r1, #144	; 0x90
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7fb fb77 	bl	8002be8 <VL53L0X_RdDWord>
 80074fa:	4603      	mov	r3, r0
 80074fc:	461a      	mov	r2, r3
 80074fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007502:	4313      	orrs	r3, r2
 8007504:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8007508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750a:	0f5b      	lsrs	r3, r3, #29
 800750c:	b2db      	uxtb	r3, r3
 800750e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007512:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8007514:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007518:	4413      	add	r3, r2
 800751a:	b2db      	uxtb	r3, r3
 800751c:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007520:	0d9b      	lsrs	r3, r3, #22
 8007522:	b2db      	uxtb	r3, r3
 8007524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007528:	b2db      	uxtb	r3, r3
 800752a:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752e:	0bdb      	lsrs	r3, r3, #15
 8007530:	b2db      	uxtb	r3, r3
 8007532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007536:	b2db      	uxtb	r3, r3
 8007538:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800753a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753c:	0a1b      	lsrs	r3, r3, #8
 800753e:	b2db      	uxtb	r3, r3
 8007540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007544:	b2db      	uxtb	r3, r3
 8007546:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8007548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754a:	085b      	lsrs	r3, r3, #1
 800754c:	b2db      	uxtb	r3, r3
 800754e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007552:	b2db      	uxtb	r3, r3
 8007554:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8007556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007558:	b2db      	uxtb	r3, r3
 800755a:	019b      	lsls	r3, r3, #6
 800755c:	b2db      	uxtb	r3, r3
 800755e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007562:	b2db      	uxtb	r3, r3
 8007564:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8007568:	2279      	movs	r2, #121	; 0x79
 800756a:	2194      	movs	r1, #148	; 0x94
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7fb fa25 	bl	80029bc <VL53L0X_WrByte>
 8007572:	4603      	mov	r3, r0
 8007574:	461a      	mov	r2, r3
 8007576:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800757a:	4313      	orrs	r3, r2
 800757c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7ff fd76 	bl	8007072 <VL53L0X_device_read_strobe>
 8007586:	4603      	mov	r3, r0
 8007588:	461a      	mov	r2, r3
 800758a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800758e:	4313      	orrs	r3, r2
 8007590:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007594:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007598:	461a      	mov	r2, r3
 800759a:	2190      	movs	r1, #144	; 0x90
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7fb fb23 	bl	8002be8 <VL53L0X_RdDWord>
 80075a2:	4603      	mov	r3, r0
 80075a4:	461a      	mov	r2, r3
 80075a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075aa:	4313      	orrs	r3, r2
 80075ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80075b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b2:	0e9b      	lsrs	r3, r3, #26
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ba:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80075bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80075c0:	4413      	add	r3, r2
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80075c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c8:	0cdb      	lsrs	r3, r3, #19
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 80075d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d6:	0b1b      	lsrs	r3, r3, #12
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	095b      	lsrs	r3, r3, #5
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 80075f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8007602:	227a      	movs	r2, #122	; 0x7a
 8007604:	2194      	movs	r1, #148	; 0x94
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7fb f9d8 	bl	80029bc <VL53L0X_WrByte>
 800760c:	4603      	mov	r3, r0
 800760e:	461a      	mov	r2, r3
 8007610:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007614:	4313      	orrs	r3, r2
 8007616:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7ff fd29 	bl	8007072 <VL53L0X_device_read_strobe>
 8007620:	4603      	mov	r3, r0
 8007622:	461a      	mov	r2, r3
 8007624:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007628:	4313      	orrs	r3, r2
 800762a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800762e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007632:	461a      	mov	r2, r3
 8007634:	2190      	movs	r1, #144	; 0x90
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7fb fad6 	bl	8002be8 <VL53L0X_RdDWord>
 800763c:	4603      	mov	r3, r0
 800763e:	461a      	mov	r2, r3
 8007640:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007644:	4313      	orrs	r3, r2
 8007646:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764c:	0f9b      	lsrs	r3, r3, #30
 800764e:	b2db      	uxtb	r3, r3
 8007650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007654:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8007656:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800765a:	4413      	add	r3, r2
 800765c:	b2db      	uxtb	r3, r3
 800765e:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8007660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007662:	0ddb      	lsrs	r3, r3, #23
 8007664:	b2db      	uxtb	r3, r3
 8007666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800766a:	b2db      	uxtb	r3, r3
 800766c:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	0c1b      	lsrs	r3, r3, #16
 8007672:	b2db      	uxtb	r3, r3
 8007674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007678:	b2db      	uxtb	r3, r3
 800767a:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800767c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767e:	0a5b      	lsrs	r3, r3, #9
 8007680:	b2db      	uxtb	r3, r3
 8007682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007686:	b2db      	uxtb	r3, r3
 8007688:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800768c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768e:	089b      	lsrs	r3, r3, #2
 8007690:	b2db      	uxtb	r3, r3
 8007692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007696:	b2db      	uxtb	r3, r3
 8007698:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800769c:	2300      	movs	r3, #0
 800769e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80076a2:	78fb      	ldrb	r3, [r7, #3]
 80076a4:	f003 0304 	and.w	r3, r3, #4
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 80f1 	beq.w	8007890 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80076ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80076b2:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f040 80ea 	bne.w	8007890 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80076bc:	227b      	movs	r2, #123	; 0x7b
 80076be:	2194      	movs	r1, #148	; 0x94
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f7fb f97b 	bl	80029bc <VL53L0X_WrByte>
 80076c6:	4603      	mov	r3, r0
 80076c8:	461a      	mov	r2, r3
 80076ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076ce:	4313      	orrs	r3, r2
 80076d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7ff fccc 	bl	8007072 <VL53L0X_device_read_strobe>
 80076da:	4603      	mov	r3, r0
 80076dc:	461a      	mov	r2, r3
 80076de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076e2:	4313      	orrs	r3, r2
 80076e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80076e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80076ec:	461a      	mov	r2, r3
 80076ee:	2190      	movs	r1, #144	; 0x90
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7fb fa79 	bl	8002be8 <VL53L0X_RdDWord>
 80076f6:	4603      	mov	r3, r0
 80076f8:	461a      	mov	r2, r3
 80076fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076fe:	4313      	orrs	r3, r2
 8007700:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8007704:	227c      	movs	r2, #124	; 0x7c
 8007706:	2194      	movs	r1, #148	; 0x94
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f7fb f957 	bl	80029bc <VL53L0X_WrByte>
 800770e:	4603      	mov	r3, r0
 8007710:	461a      	mov	r2, r3
 8007712:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007716:	4313      	orrs	r3, r2
 8007718:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7ff fca8 	bl	8007072 <VL53L0X_device_read_strobe>
 8007722:	4603      	mov	r3, r0
 8007724:	461a      	mov	r2, r3
 8007726:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800772a:	4313      	orrs	r3, r2
 800772c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8007730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007734:	461a      	mov	r2, r3
 8007736:	2190      	movs	r1, #144	; 0x90
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f7fb fa55 	bl	8002be8 <VL53L0X_RdDWord>
 800773e:	4603      	mov	r3, r0
 8007740:	461a      	mov	r2, r3
 8007742:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007746:	4313      	orrs	r3, r2
 8007748:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800774c:	2273      	movs	r2, #115	; 0x73
 800774e:	2194      	movs	r1, #148	; 0x94
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7fb f933 	bl	80029bc <VL53L0X_WrByte>
 8007756:	4603      	mov	r3, r0
 8007758:	461a      	mov	r2, r3
 800775a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800775e:	4313      	orrs	r3, r2
 8007760:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f7ff fc84 	bl	8007072 <VL53L0X_device_read_strobe>
 800776a:	4603      	mov	r3, r0
 800776c:	461a      	mov	r2, r3
 800776e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007772:	4313      	orrs	r3, r2
 8007774:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007778:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800777c:	461a      	mov	r2, r3
 800777e:	2190      	movs	r1, #144	; 0x90
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7fb fa31 	bl	8002be8 <VL53L0X_RdDWord>
 8007786:	4603      	mov	r3, r0
 8007788:	461a      	mov	r2, r3
 800778a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800778e:	4313      	orrs	r3, r2
 8007790:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8007794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007796:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8007798:	b29b      	uxth	r3, r3
 800779a:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800779c:	2274      	movs	r2, #116	; 0x74
 800779e:	2194      	movs	r1, #148	; 0x94
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7fb f90b 	bl	80029bc <VL53L0X_WrByte>
 80077a6:	4603      	mov	r3, r0
 80077a8:	461a      	mov	r2, r3
 80077aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077ae:	4313      	orrs	r3, r2
 80077b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f7ff fc5c 	bl	8007072 <VL53L0X_device_read_strobe>
 80077ba:	4603      	mov	r3, r0
 80077bc:	461a      	mov	r2, r3
 80077be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077c2:	4313      	orrs	r3, r2
 80077c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80077c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077cc:	461a      	mov	r2, r3
 80077ce:	2190      	movs	r1, #144	; 0x90
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f7fb fa09 	bl	8002be8 <VL53L0X_RdDWord>
 80077d6:	4603      	mov	r3, r0
 80077d8:	461a      	mov	r2, r3
 80077da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077de:	4313      	orrs	r3, r2
 80077e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 80077e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e6:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80077e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80077ea:	4313      	orrs	r3, r2
 80077ec:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80077ee:	2275      	movs	r2, #117	; 0x75
 80077f0:	2194      	movs	r1, #148	; 0x94
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7fb f8e2 	bl	80029bc <VL53L0X_WrByte>
 80077f8:	4603      	mov	r3, r0
 80077fa:	461a      	mov	r2, r3
 80077fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007800:	4313      	orrs	r3, r2
 8007802:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f7ff fc33 	bl	8007072 <VL53L0X_device_read_strobe>
 800780c:	4603      	mov	r3, r0
 800780e:	461a      	mov	r2, r3
 8007810:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007814:	4313      	orrs	r3, r2
 8007816:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800781a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800781e:	461a      	mov	r2, r3
 8007820:	2190      	movs	r1, #144	; 0x90
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f7fb f9e0 	bl	8002be8 <VL53L0X_RdDWord>
 8007828:	4603      	mov	r3, r0
 800782a:	461a      	mov	r2, r3
 800782c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007830:	4313      	orrs	r3, r2
 8007832:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8007836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007838:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800783a:	b29b      	uxth	r3, r3
 800783c:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800783e:	2276      	movs	r2, #118	; 0x76
 8007840:	2194      	movs	r1, #148	; 0x94
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7fb f8ba 	bl	80029bc <VL53L0X_WrByte>
 8007848:	4603      	mov	r3, r0
 800784a:	461a      	mov	r2, r3
 800784c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007850:	4313      	orrs	r3, r2
 8007852:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7ff fc0b 	bl	8007072 <VL53L0X_device_read_strobe>
 800785c:	4603      	mov	r3, r0
 800785e:	461a      	mov	r2, r3
 8007860:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007864:	4313      	orrs	r3, r2
 8007866:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800786a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800786e:	461a      	mov	r2, r3
 8007870:	2190      	movs	r1, #144	; 0x90
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f7fb f9b8 	bl	8002be8 <VL53L0X_RdDWord>
 8007878:	4603      	mov	r3, r0
 800787a:	461a      	mov	r2, r3
 800787c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007880:	4313      	orrs	r3, r2
 8007882:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8007886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007888:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800788a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800788c:	4313      	orrs	r3, r2
 800788e:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8007890:	2200      	movs	r2, #0
 8007892:	2181      	movs	r1, #129	; 0x81
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7fb f891 	bl	80029bc <VL53L0X_WrByte>
 800789a:	4603      	mov	r3, r0
 800789c:	461a      	mov	r2, r3
 800789e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078a2:	4313      	orrs	r3, r2
 80078a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80078a8:	2206      	movs	r2, #6
 80078aa:	21ff      	movs	r1, #255	; 0xff
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f7fb f885 	bl	80029bc <VL53L0X_WrByte>
 80078b2:	4603      	mov	r3, r0
 80078b4:	461a      	mov	r2, r3
 80078b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078ba:	4313      	orrs	r3, r2
 80078bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80078c0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80078c4:	461a      	mov	r2, r3
 80078c6:	2183      	movs	r1, #131	; 0x83
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7fb f92b 	bl	8002b24 <VL53L0X_RdByte>
 80078ce:	4603      	mov	r3, r0
 80078d0:	461a      	mov	r2, r3
 80078d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078d6:	4313      	orrs	r3, r2
 80078d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80078dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80078e0:	f023 0304 	bic.w	r3, r3, #4
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	461a      	mov	r2, r3
 80078e8:	2183      	movs	r1, #131	; 0x83
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7fb f866 	bl	80029bc <VL53L0X_WrByte>
 80078f0:	4603      	mov	r3, r0
 80078f2:	461a      	mov	r2, r3
 80078f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078f8:	4313      	orrs	r3, r2
 80078fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80078fe:	2201      	movs	r2, #1
 8007900:	21ff      	movs	r1, #255	; 0xff
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7fb f85a 	bl	80029bc <VL53L0X_WrByte>
 8007908:	4603      	mov	r3, r0
 800790a:	461a      	mov	r2, r3
 800790c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007910:	4313      	orrs	r3, r2
 8007912:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007916:	2201      	movs	r2, #1
 8007918:	2100      	movs	r1, #0
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f7fb f84e 	bl	80029bc <VL53L0X_WrByte>
 8007920:	4603      	mov	r3, r0
 8007922:	461a      	mov	r2, r3
 8007924:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007928:	4313      	orrs	r3, r2
 800792a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800792e:	2200      	movs	r2, #0
 8007930:	21ff      	movs	r1, #255	; 0xff
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7fb f842 	bl	80029bc <VL53L0X_WrByte>
 8007938:	4603      	mov	r3, r0
 800793a:	461a      	mov	r2, r3
 800793c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007940:	4313      	orrs	r3, r2
 8007942:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007946:	2200      	movs	r2, #0
 8007948:	2180      	movs	r1, #128	; 0x80
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7fb f836 	bl	80029bc <VL53L0X_WrByte>
 8007950:	4603      	mov	r3, r0
 8007952:	461a      	mov	r2, r3
 8007954:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007958:	4313      	orrs	r3, r2
 800795a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800795e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8007962:	2b00      	cmp	r3, #0
 8007964:	f040 808f 	bne.w	8007a86 <VL53L0X_get_info_from_device+0x98e>
 8007968:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800796c:	2b07      	cmp	r3, #7
 800796e:	f000 808a 	beq.w	8007a86 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8007972:	78fb      	ldrb	r3, [r7, #3]
 8007974:	f003 0301 	and.w	r3, r3, #1
 8007978:	2b00      	cmp	r3, #0
 800797a:	d024      	beq.n	80079c6 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800797c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007980:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007984:	2b00      	cmp	r3, #0
 8007986:	d11e      	bne.n	80079c6 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800798e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8007998:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800799c:	2300      	movs	r3, #0
 800799e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079a0:	e00e      	b.n	80079c0 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 80079a2:	f107 0208 	add.w	r2, r7, #8
 80079a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079a8:	4413      	add	r3, r2
 80079aa:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80079b6:	460a      	mov	r2, r1
 80079b8:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80079ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079bc:	3301      	adds	r3, #1
 80079be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079c2:	2b05      	cmp	r3, #5
 80079c4:	dded      	ble.n	80079a2 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 80079c6:	78fb      	ldrb	r3, [r7, #3]
 80079c8:	f003 0302 	and.w	r3, r3, #2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d018      	beq.n	8007a02 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80079d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80079d4:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d112      	bne.n	8007a02 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80079dc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80079e6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	33f3      	adds	r3, #243	; 0xf3
 80079f4:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80079f6:	f107 0310 	add.w	r3, r7, #16
 80079fa:	4619      	mov	r1, r3
 80079fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80079fe:	f011 f843 	bl	8018a88 <strcpy>

		}

		if (((option & 4) == 4) &&
 8007a02:	78fb      	ldrb	r3, [r7, #3]
 8007a04:	f003 0304 	and.w	r3, r3, #4
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d030      	beq.n	8007a6e <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007a0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007a10:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d12a      	bne.n	8007a6e <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007a18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8007a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a2a:	025b      	lsls	r3, r3, #9
 8007a2c:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a32:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8007a36:	2300      	movs	r3, #0
 8007a38:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8007a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d011      	beq.n	8007a66 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8007a42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8007a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a50:	fb02 f303 	mul.w	r3, r2, r3
 8007a54:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8007a56:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8007a5a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007a5e:	425b      	negs	r3, r3
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8007a66:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8007a6e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007a72:	78fb      	ldrb	r3, [r7, #3]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8007a7c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007a86:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3760      	adds	r7, #96	; 0x60
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b087      	sub	sp, #28
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8007a9e:	f240 6277 	movw	r2, #1655	; 0x677
 8007aa2:	f04f 0300 	mov.w	r3, #0
 8007aa6:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8007aaa:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8007aae:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8007ab0:	78fb      	ldrb	r3, [r7, #3]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	fb02 f303 	mul.w	r3, r2, r3
 8007abe:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8007ac0:	68bb      	ldr	r3, [r7, #8]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	371c      	adds	r7, #28
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b087      	sub	sp, #28
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8007ada:	2300      	movs	r3, #0
 8007adc:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d017      	beq.n	8007b18 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007aee:	e005      	b.n	8007afc <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	085b      	lsrs	r3, r3, #1
 8007af4:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8007af6:	89fb      	ldrh	r3, [r7, #14]
 8007af8:	3301      	adds	r3, #1
 8007afa:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1f4      	bne.n	8007af0 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8007b06:	89fb      	ldrh	r3, [r7, #14]
 8007b08:	021b      	lsls	r3, r3, #8
 8007b0a:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8007b14:	4413      	add	r3, r2
 8007b16:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8007b18:	8afb      	ldrh	r3, [r7, #22]

}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	371c      	adds	r7, #28
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr

08007b26 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8007b26:	b480      	push	{r7}
 8007b28:	b085      	sub	sp, #20
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8007b30:	2300      	movs	r3, #0
 8007b32:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007b34:	88fb      	ldrh	r3, [r7, #6]
 8007b36:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8007b38:	88fa      	ldrh	r2, [r7, #6]
 8007b3a:	0a12      	lsrs	r2, r2, #8
 8007b3c:	b292      	uxth	r2, r2
 8007b3e:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007b40:	3301      	adds	r3, #1
 8007b42:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8007b44:	68fb      	ldr	r3, [r7, #12]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3714      	adds	r7, #20
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
	...

08007b54 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b088      	sub	sp, #32
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8007b62:	2300      	movs	r3, #0
 8007b64:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007b66:	79fb      	ldrb	r3, [r7, #7]
 8007b68:	4619      	mov	r1, r3
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f7ff ff91 	bl	8007a92 <VL53L0X_calc_macro_period_ps>
 8007b70:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007b78:	4a0a      	ldr	r2, [pc, #40]	; (8007ba4 <VL53L0X_calc_timeout_mclks+0x50>)
 8007b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b7e:	099b      	lsrs	r3, r3, #6
 8007b80:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b88:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	085b      	lsrs	r3, r3, #1
 8007b90:	441a      	add	r2, r3
	timeout_period_mclks =
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b98:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8007b9a:	69fb      	ldr	r3, [r7, #28]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3720      	adds	r7, #32
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}
 8007ba4:	10624dd3 	.word	0x10624dd3

08007ba8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	807b      	strh	r3, [r7, #2]
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007bbc:	787b      	ldrb	r3, [r7, #1]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f7ff ff66 	bl	8007a92 <VL53L0X_calc_macro_period_ps>
 8007bc6:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007bce:	4a0a      	ldr	r2, [pc, #40]	; (8007bf8 <VL53L0X_calc_timeout_us+0x50>)
 8007bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd4:	099b      	lsrs	r3, r3, #6
 8007bd6:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8007bd8:	887b      	ldrh	r3, [r7, #2]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	fb02 f303 	mul.w	r3, r2, r3
 8007be0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8007be4:	4a04      	ldr	r2, [pc, #16]	; (8007bf8 <VL53L0X_calc_timeout_us+0x50>)
 8007be6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bea:	099b      	lsrs	r3, r3, #6
 8007bec:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8007bee:	697b      	ldr	r3, [r7, #20]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	10624dd3 	.word	0x10624dd3

08007bfc <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b08c      	sub	sp, #48	; 0x30
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	460b      	mov	r3, r1
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8007c10:	2300      	movs	r3, #0
 8007c12:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8007c16:	2300      	movs	r3, #0
 8007c18:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007c22:	7afb      	ldrb	r3, [r7, #11]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d005      	beq.n	8007c34 <get_sequence_step_timeout+0x38>
 8007c28:	7afb      	ldrb	r3, [r7, #11]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d002      	beq.n	8007c34 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007c2e:	7afb      	ldrb	r3, [r7, #11]
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d128      	bne.n	8007c86 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007c34:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007c38:	461a      	mov	r2, r3
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f7fd fa5b 	bl	80050f8 <VL53L0X_GetVcselPulsePeriod>
 8007c42:	4603      	mov	r3, r0
 8007c44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8007c48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d109      	bne.n	8007c64 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8007c50:	f107 0320 	add.w	r3, r7, #32
 8007c54:	461a      	mov	r2, r3
 8007c56:	2146      	movs	r1, #70	; 0x46
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f7fa ff63 	bl	8002b24 <VL53L0X_RdByte>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8007c64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7ff ff5b 	bl	8007b26 <VL53L0X_decode_timeout>
 8007c70:	4603      	mov	r3, r0
 8007c72:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007c74:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007c78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f7ff ff93 	bl	8007ba8 <VL53L0X_calc_timeout_us>
 8007c82:	62b8      	str	r0, [r7, #40]	; 0x28
 8007c84:	e092      	b.n	8007dac <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007c86:	7afb      	ldrb	r3, [r7, #11]
 8007c88:	2b03      	cmp	r3, #3
 8007c8a:	d135      	bne.n	8007cf8 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007c8c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007c90:	461a      	mov	r2, r3
 8007c92:	2100      	movs	r1, #0
 8007c94:	68f8      	ldr	r0, [r7, #12]
 8007c96:	f7fd fa2f 	bl	80050f8 <VL53L0X_GetVcselPulsePeriod>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007ca0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f040 8081 	bne.w	8007dac <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007caa:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007cae:	461a      	mov	r2, r3
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f7fd fa20 	bl	80050f8 <VL53L0X_GetVcselPulsePeriod>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8007cbe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d109      	bne.n	8007cda <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8007cc6:	f107 031e 	add.w	r3, r7, #30
 8007cca:	461a      	mov	r2, r3
 8007ccc:	2151      	movs	r1, #81	; 0x51
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f7fa ff52 	bl	8002b78 <VL53L0X_RdWord>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007cda:	8bfb      	ldrh	r3, [r7, #30]
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7ff ff22 	bl	8007b26 <VL53L0X_decode_timeout>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007ce6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007cea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007cec:	4619      	mov	r1, r3
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f7ff ff5a 	bl	8007ba8 <VL53L0X_calc_timeout_us>
 8007cf4:	62b8      	str	r0, [r7, #40]	; 0x28
 8007cf6:	e059      	b.n	8007dac <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007cf8:	7afb      	ldrb	r3, [r7, #11]
 8007cfa:	2b04      	cmp	r3, #4
 8007cfc:	d156      	bne.n	8007dac <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007cfe:	f107 0314 	add.w	r3, r7, #20
 8007d02:	4619      	mov	r1, r3
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	f7fd fb03 	bl	8005310 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d01d      	beq.n	8007d50 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007d14:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007d18:	461a      	mov	r2, r3
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f7fd f9eb 	bl	80050f8 <VL53L0X_GetVcselPulsePeriod>
 8007d22:	4603      	mov	r3, r0
 8007d24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8007d28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10f      	bne.n	8007d50 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8007d30:	f107 031e 	add.w	r3, r7, #30
 8007d34:	461a      	mov	r2, r3
 8007d36:	2151      	movs	r1, #81	; 0x51
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f7fa ff1d 	bl	8002b78 <VL53L0X_RdWord>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007d44:	8bfb      	ldrh	r3, [r7, #30]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7ff feed 	bl	8007b26 <VL53L0X_decode_timeout>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007d50:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d109      	bne.n	8007d6c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007d58:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	2101      	movs	r1, #1
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f7fd f9c9 	bl	80050f8 <VL53L0X_GetVcselPulsePeriod>
 8007d66:	4603      	mov	r3, r0
 8007d68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007d6c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10f      	bne.n	8007d94 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8007d74:	f107 031c 	add.w	r3, r7, #28
 8007d78:	461a      	mov	r2, r3
 8007d7a:	2171      	movs	r1, #113	; 0x71
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f7fa fefb 	bl	8002b78 <VL53L0X_RdWord>
 8007d82:	4603      	mov	r3, r0
 8007d84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007d88:	8bbb      	ldrh	r3, [r7, #28]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7ff fecb 	bl	8007b26 <VL53L0X_decode_timeout>
 8007d90:	4603      	mov	r3, r0
 8007d92:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8007d94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007d96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d98:	1ad3      	subs	r3, r2, r3
 8007d9a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007d9c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007da0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007da2:	4619      	mov	r1, r3
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f7ff feff 	bl	8007ba8 <VL53L0X_calc_timeout_us>
 8007daa:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007db0:	601a      	str	r2, [r3, #0]

	return Status;
 8007db2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3730      	adds	r7, #48	; 0x30
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b08a      	sub	sp, #40	; 0x28
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	60f8      	str	r0, [r7, #12]
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	607a      	str	r2, [r7, #4]
 8007dca:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007dd2:	7afb      	ldrb	r3, [r7, #11]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d005      	beq.n	8007de4 <set_sequence_step_timeout+0x26>
 8007dd8:	7afb      	ldrb	r3, [r7, #11]
 8007dda:	2b01      	cmp	r3, #1
 8007ddc:	d002      	beq.n	8007de4 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007dde:	7afb      	ldrb	r3, [r7, #11]
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d138      	bne.n	8007e56 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007de4:	f107 031b 	add.w	r3, r7, #27
 8007de8:	461a      	mov	r2, r3
 8007dea:	2100      	movs	r1, #0
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f7fd f983 	bl	80050f8 <VL53L0X_GetVcselPulsePeriod>
 8007df2:	4603      	mov	r3, r0
 8007df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8007df8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d11a      	bne.n	8007e36 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8007e00:	7efb      	ldrb	r3, [r7, #27]
 8007e02:	461a      	mov	r2, r3
 8007e04:	6879      	ldr	r1, [r7, #4]
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f7ff fea4 	bl	8007b54 <VL53L0X_calc_timeout_mclks>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8007e10:	8bbb      	ldrh	r3, [r7, #28]
 8007e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e16:	d903      	bls.n	8007e20 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8007e18:	23ff      	movs	r3, #255	; 0xff
 8007e1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007e1e:	e004      	b.n	8007e2a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8007e20:	8bbb      	ldrh	r3, [r7, #28]
 8007e22:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8007e24:	3b01      	subs	r3, #1
 8007e26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007e2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007e36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f040 80ab 	bne.w	8007f96 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8007e40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e44:	461a      	mov	r2, r3
 8007e46:	2146      	movs	r1, #70	; 0x46
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f7fa fdb7 	bl	80029bc <VL53L0X_WrByte>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8007e54:	e09f      	b.n	8007f96 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007e56:	7afb      	ldrb	r3, [r7, #11]
 8007e58:	2b03      	cmp	r3, #3
 8007e5a:	d135      	bne.n	8007ec8 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8007e5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d11b      	bne.n	8007e9c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007e64:	f107 031b 	add.w	r3, r7, #27
 8007e68:	461a      	mov	r2, r3
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f7fd f943 	bl	80050f8 <VL53L0X_GetVcselPulsePeriod>
 8007e72:	4603      	mov	r3, r0
 8007e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007e78:	7efb      	ldrb	r3, [r7, #27]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	6879      	ldr	r1, [r7, #4]
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f7ff fe68 	bl	8007b54 <VL53L0X_calc_timeout_mclks>
 8007e84:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8007e86:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8007e88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7ff fe1f 	bl	8007ace <VL53L0X_encode_timeout>
 8007e90:	4603      	mov	r3, r0
 8007e92:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007e94:	8b3a      	ldrh	r2, [r7, #24]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8007e9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d108      	bne.n	8007eb6 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8007ea4:	8b3b      	ldrh	r3, [r7, #24]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	2151      	movs	r1, #81	; 0x51
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f7fa fdaa 	bl	8002a04 <VL53L0X_WrWord>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8007eb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d16b      	bne.n	8007f96 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8007ec6:	e066      	b.n	8007f96 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007ec8:	7afb      	ldrb	r3, [r7, #11]
 8007eca:	2b04      	cmp	r3, #4
 8007ecc:	d160      	bne.n	8007f90 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8007ece:	f107 0310 	add.w	r3, r7, #16
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f7fd fa1b 	bl	8005310 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8007ede:	7cfb      	ldrb	r3, [r7, #19]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d01d      	beq.n	8007f20 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007ee4:	f107 031b 	add.w	r3, r7, #27
 8007ee8:	461a      	mov	r2, r3
 8007eea:	2100      	movs	r1, #0
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f7fd f903 	bl	80050f8 <VL53L0X_GetVcselPulsePeriod>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8007ef8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10f      	bne.n	8007f20 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8007f00:	f107 0318 	add.w	r3, r7, #24
 8007f04:	461a      	mov	r2, r3
 8007f06:	2151      	movs	r1, #81	; 0x51
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f7fa fe35 	bl	8002b78 <VL53L0X_RdWord>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8007f14:	8b3b      	ldrh	r3, [r7, #24]
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7ff fe05 	bl	8007b26 <VL53L0X_decode_timeout>
 8007f1c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8007f1e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007f20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d109      	bne.n	8007f3c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007f28:	f107 031b 	add.w	r3, r7, #27
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	2101      	movs	r1, #1
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f7fd f8e1 	bl	80050f8 <VL53L0X_GetVcselPulsePeriod>
 8007f36:	4603      	mov	r3, r0
 8007f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8007f3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d128      	bne.n	8007f96 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007f44:	7efb      	ldrb	r3, [r7, #27]
 8007f46:	461a      	mov	r2, r3
 8007f48:	6879      	ldr	r1, [r7, #4]
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f7ff fe02 	bl	8007b54 <VL53L0X_calc_timeout_mclks>
 8007f50:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8007f52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f54:	6a3a      	ldr	r2, [r7, #32]
 8007f56:	4413      	add	r3, r2
 8007f58:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8007f5a:	6a38      	ldr	r0, [r7, #32]
 8007f5c:	f7ff fdb7 	bl	8007ace <VL53L0X_encode_timeout>
 8007f60:	4603      	mov	r3, r0
 8007f62:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8007f64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d108      	bne.n	8007f7e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8007f6c:	8bfb      	ldrh	r3, [r7, #30]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	2171      	movs	r1, #113	; 0x71
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f7fa fd46 	bl	8002a04 <VL53L0X_WrWord>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8007f7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d107      	bne.n	8007f96 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8007f8e:	e002      	b.n	8007f96 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007f90:	23fc      	movs	r3, #252	; 0xfc
 8007f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8007f96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3728      	adds	r7, #40	; 0x28
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b086      	sub	sp, #24
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	60f8      	str	r0, [r7, #12]
 8007faa:	460b      	mov	r3, r1
 8007fac:	607a      	str	r2, [r7, #4]
 8007fae:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8007fb4:	7afb      	ldrb	r3, [r7, #11]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d002      	beq.n	8007fc0 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d00a      	beq.n	8007fd4 <VL53L0X_get_vcsel_pulse_period+0x32>
 8007fbe:	e013      	b.n	8007fe8 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007fc0:	f107 0316 	add.w	r3, r7, #22
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	2150      	movs	r1, #80	; 0x50
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f7fa fdab 	bl	8002b24 <VL53L0X_RdByte>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007fd2:	e00b      	b.n	8007fec <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007fd4:	f107 0316 	add.w	r3, r7, #22
 8007fd8:	461a      	mov	r2, r3
 8007fda:	2170      	movs	r1, #112	; 0x70
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f7fa fda1 	bl	8002b24 <VL53L0X_RdByte>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007fe6:	e001      	b.n	8007fec <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007fe8:	23fc      	movs	r3, #252	; 0xfc
 8007fea:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8007fec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d107      	bne.n	8008004 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8007ff4:	7dbb      	ldrb	r3, [r7, #22]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7fe fff4 	bl	8006fe4 <VL53L0X_decode_vcsel_period>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	701a      	strb	r2, [r3, #0]

	return Status;
 8008004:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008008:	4618      	mov	r0, r3
 800800a:	3718      	adds	r7, #24
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b092      	sub	sp, #72	; 0x48
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800801a:	2300      	movs	r3, #0
 800801c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008020:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008024:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008026:	f240 7376 	movw	r3, #1910	; 0x776
 800802a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800802c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008030:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008032:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008036:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8008038:	f240 234e 	movw	r3, #590	; 0x24e
 800803c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800803e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008042:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008044:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008048:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800804a:	f240 2326 	movw	r3, #550	; 0x226
 800804e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008050:	2300      	movs	r3, #0
 8008052:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8008054:	f644 6320 	movw	r3, #20000	; 0x4e20
 8008058:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800805a:	2300      	movs	r3, #0
 800805c:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800805e:	683a      	ldr	r2, [r7, #0]
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	429a      	cmp	r2, r3
 8008064:	d205      	bcs.n	8008072 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008066:	23fc      	movs	r3, #252	; 0xfc
 8008068:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800806c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008070:	e0aa      	b.n	80081c8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8008072:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008076:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8008078:	683a      	ldr	r2, [r7, #0]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800807e:	f107 0314 	add.w	r3, r7, #20
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7fd f943 	bl	8005310 <VL53L0X_GetSequenceStepEnables>
 800808a:	4603      	mov	r3, r0
 800808c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8008090:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008094:	2b00      	cmp	r3, #0
 8008096:	d15b      	bne.n	8008150 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8008098:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800809a:	2b00      	cmp	r3, #0
 800809c:	d105      	bne.n	80080aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800809e:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d102      	bne.n	80080aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 80080a4:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d052      	beq.n	8008150 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80080aa:	f107 0310 	add.w	r3, r7, #16
 80080ae:	461a      	mov	r2, r3
 80080b0:	2102      	movs	r1, #2
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7ff fda2 	bl	8007bfc <get_sequence_step_timeout>
 80080b8:	4603      	mov	r3, r0
 80080ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 80080be:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d002      	beq.n	80080cc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 80080c6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80080ca:	e07d      	b.n	80081c8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 80080cc:	7d3b      	ldrb	r3, [r7, #20]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00f      	beq.n	80080f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 80080d2:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 80080d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080d6:	4413      	add	r3, r2
 80080d8:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 80080da:	69fa      	ldr	r2, [r7, #28]
 80080dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080de:	429a      	cmp	r2, r3
 80080e0:	d204      	bcs.n	80080ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 80080e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	643b      	str	r3, [r7, #64]	; 0x40
 80080ea:	e002      	b.n	80080f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80080ec:	23fc      	movs	r3, #252	; 0xfc
 80080ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 80080f2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d002      	beq.n	8008100 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 80080fa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80080fe:	e063      	b.n	80081c8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8008100:	7dbb      	ldrb	r3, [r7, #22]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d011      	beq.n	800812a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810a:	4413      	add	r3, r2
 800810c:	005b      	lsls	r3, r3, #1
 800810e:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008110:	69fa      	ldr	r2, [r7, #28]
 8008112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008114:	429a      	cmp	r2, r3
 8008116:	d204      	bcs.n	8008122 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8008118:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	643b      	str	r3, [r7, #64]	; 0x40
 8008120:	e016      	b.n	8008150 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008122:	23fc      	movs	r3, #252	; 0xfc
 8008124:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008128:	e012      	b.n	8008150 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800812a:	7d7b      	ldrb	r3, [r7, #21]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00f      	beq.n	8008150 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008134:	4413      	add	r3, r2
 8008136:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008138:	69fa      	ldr	r2, [r7, #28]
 800813a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800813c:	429a      	cmp	r2, r3
 800813e:	d204      	bcs.n	800814a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8008140:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	643b      	str	r3, [r7, #64]	; 0x40
 8008148:	e002      	b.n	8008150 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800814a:	23fc      	movs	r3, #252	; 0xfc
 800814c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8008150:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008154:	2b00      	cmp	r3, #0
 8008156:	d002      	beq.n	800815e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8008158:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800815c:	e034      	b.n	80081c8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800815e:	7dfb      	ldrb	r3, [r7, #23]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d019      	beq.n	8008198 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8008164:	f107 030c 	add.w	r3, r7, #12
 8008168:	461a      	mov	r2, r3
 800816a:	2103      	movs	r1, #3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f7ff fd45 	bl	8007bfc <get_sequence_step_timeout>
 8008172:	4603      	mov	r3, r0
 8008174:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800817c:	4413      	add	r3, r2
 800817e:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008180:	69fa      	ldr	r2, [r7, #28]
 8008182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008184:	429a      	cmp	r2, r3
 8008186:	d204      	bcs.n	8008192 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8008188:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	643b      	str	r3, [r7, #64]	; 0x40
 8008190:	e002      	b.n	8008198 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008192:	23fc      	movs	r3, #252	; 0xfc
 8008194:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8008198:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800819c:	2b00      	cmp	r3, #0
 800819e:	d111      	bne.n	80081c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 80081a0:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00e      	beq.n	80081c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 80081a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 80081ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081b0:	2104      	movs	r1, #4
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7ff fe03 	bl	8007dbe <set_sequence_step_timeout>
 80081b8:	4603      	mov	r3, r0
 80081ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	683a      	ldr	r2, [r7, #0]
 80081c2:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80081c4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3748      	adds	r7, #72	; 0x48
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b090      	sub	sp, #64	; 0x40
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081da:	2300      	movs	r3, #0
 80081dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80081e0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80081e4:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80081e6:	f240 7376 	movw	r3, #1910	; 0x776
 80081ea:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 80081ec:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80081f0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80081f2:	f44f 7325 	mov.w	r3, #660	; 0x294
 80081f6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 80081f8:	f240 234e 	movw	r3, #590	; 0x24e
 80081fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 80081fe:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008202:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008204:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008208:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800820a:	f240 2326 	movw	r3, #550	; 0x226
 800820e:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008210:	2300      	movs	r3, #0
 8008212:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8008214:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008218:	441a      	add	r2, r3
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800821e:	f107 0318 	add.w	r3, r7, #24
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f7fd f873 	bl	8005310 <VL53L0X_GetSequenceStepEnables>
 800822a:	4603      	mov	r3, r0
 800822c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8008230:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008234:	2b00      	cmp	r3, #0
 8008236:	d002      	beq.n	800823e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8008238:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800823c:	e075      	b.n	800832a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800823e:	7e3b      	ldrb	r3, [r7, #24]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d105      	bne.n	8008250 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8008244:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8008246:	2b00      	cmp	r3, #0
 8008248:	d102      	bne.n	8008250 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800824a:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800824c:	2b00      	cmp	r3, #0
 800824e:	d030      	beq.n	80082b2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8008250:	f107 0310 	add.w	r3, r7, #16
 8008254:	461a      	mov	r2, r3
 8008256:	2102      	movs	r1, #2
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7ff fccf 	bl	8007bfc <get_sequence_step_timeout>
 800825e:	4603      	mov	r3, r0
 8008260:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8008264:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008268:	2b00      	cmp	r3, #0
 800826a:	d122      	bne.n	80082b2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800826c:	7e3b      	ldrb	r3, [r7, #24]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d007      	beq.n	8008282 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8008276:	6939      	ldr	r1, [r7, #16]
 8008278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827a:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800827c:	441a      	add	r2, r3
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8008282:	7ebb      	ldrb	r3, [r7, #26]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d009      	beq.n	800829c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800828c:	6939      	ldr	r1, [r7, #16]
 800828e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008290:	440b      	add	r3, r1
 8008292:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008294:	441a      	add	r2, r3
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	e00a      	b.n	80082b2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800829c:	7e7b      	ldrb	r3, [r7, #25]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d007      	beq.n	80082b2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80082a6:	6939      	ldr	r1, [r7, #16]
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80082ac:	441a      	add	r2, r3
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80082b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d114      	bne.n	80082e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80082ba:	7efb      	ldrb	r3, [r7, #27]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d011      	beq.n	80082e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 80082c0:	f107 030c 	add.w	r3, r7, #12
 80082c4:	461a      	mov	r2, r3
 80082c6:	2103      	movs	r1, #3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f7ff fc97 	bl	8007bfc <get_sequence_step_timeout>
 80082ce:	4603      	mov	r3, r0
 80082d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 80082d8:	68f9      	ldr	r1, [r7, #12]
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082dc:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80082de:	441a      	add	r2, r3
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80082e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d114      	bne.n	8008316 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 80082ec:	7f3b      	ldrb	r3, [r7, #28]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d011      	beq.n	8008316 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 80082f2:	f107 0314 	add.w	r3, r7, #20
 80082f6:	461a      	mov	r2, r3
 80082f8:	2104      	movs	r1, #4
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7ff fc7e 	bl	8007bfc <get_sequence_step_timeout>
 8008300:	4603      	mov	r3, r0
 8008302:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800830a:	6979      	ldr	r1, [r7, #20]
 800830c:	6a3b      	ldr	r3, [r7, #32]
 800830e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008310:	441a      	add	r2, r3
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008316:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800831a:	2b00      	cmp	r3, #0
 800831c:	d103      	bne.n	8008326 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008326:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800832a:	4618      	mov	r0, r3
 800832c:	3740      	adds	r7, #64	; 0x40
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
	...

08008334 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b088      	sub	sp, #32
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800833e:	2300      	movs	r3, #0
 8008340:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8008342:	2300      	movs	r3, #0
 8008344:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8008346:	e0c6      	b.n	80084d6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	683a      	ldr	r2, [r7, #0]
 800834c:	4413      	add	r3, r2
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	74fb      	strb	r3, [r7, #19]
		Index++;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	3301      	adds	r3, #1
 8008356:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8008358:	7cfb      	ldrb	r3, [r7, #19]
 800835a:	2bff      	cmp	r3, #255	; 0xff
 800835c:	f040 808d 	bne.w	800847a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	4413      	add	r3, r2
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	747b      	strb	r3, [r7, #17]
			Index++;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	3301      	adds	r3, #1
 800836e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8008370:	7c7b      	ldrb	r3, [r7, #17]
 8008372:	2b03      	cmp	r3, #3
 8008374:	d87e      	bhi.n	8008474 <VL53L0X_load_tuning_settings+0x140>
 8008376:	a201      	add	r2, pc, #4	; (adr r2, 800837c <VL53L0X_load_tuning_settings+0x48>)
 8008378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837c:	0800838d 	.word	0x0800838d
 8008380:	080083c7 	.word	0x080083c7
 8008384:	08008401 	.word	0x08008401
 8008388:	0800843b 	.word	0x0800843b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	4413      	add	r3, r2
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	743b      	strb	r3, [r7, #16]
				Index++;
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	3301      	adds	r3, #1
 800839a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	4413      	add	r3, r2
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	73fb      	strb	r3, [r7, #15]
				Index++;
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	3301      	adds	r3, #1
 80083aa:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80083ac:	7c3b      	ldrb	r3, [r7, #16]
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	021b      	lsls	r3, r3, #8
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	4413      	add	r3, r2
 80083ba:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	89ba      	ldrh	r2, [r7, #12]
 80083c0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 80083c4:	e087      	b.n	80084d6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	4413      	add	r3, r2
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	743b      	strb	r3, [r7, #16]
				Index++;
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	3301      	adds	r3, #1
 80083d4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	683a      	ldr	r2, [r7, #0]
 80083da:	4413      	add	r3, r2
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	73fb      	strb	r3, [r7, #15]
				Index++;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	3301      	adds	r3, #1
 80083e4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80083e6:	7c3b      	ldrb	r3, [r7, #16]
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	021b      	lsls	r3, r3, #8
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	7bfb      	ldrb	r3, [r7, #15]
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	4413      	add	r3, r2
 80083f4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	89ba      	ldrh	r2, [r7, #12]
 80083fa:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 80083fe:	e06a      	b.n	80084d6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	683a      	ldr	r2, [r7, #0]
 8008404:	4413      	add	r3, r2
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	743b      	strb	r3, [r7, #16]
				Index++;
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	3301      	adds	r3, #1
 800840e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	4413      	add	r3, r2
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	73fb      	strb	r3, [r7, #15]
				Index++;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	3301      	adds	r3, #1
 800841e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008420:	7c3b      	ldrb	r3, [r7, #16]
 8008422:	b29b      	uxth	r3, r3
 8008424:	021b      	lsls	r3, r3, #8
 8008426:	b29a      	uxth	r2, r3
 8008428:	7bfb      	ldrb	r3, [r7, #15]
 800842a:	b29b      	uxth	r3, r3
 800842c:	4413      	add	r3, r2
 800842e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	89ba      	ldrh	r2, [r7, #12]
 8008434:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8008438:	e04d      	b.n	80084d6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	4413      	add	r3, r2
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	743b      	strb	r3, [r7, #16]
				Index++;
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	3301      	adds	r3, #1
 8008448:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	683a      	ldr	r2, [r7, #0]
 800844e:	4413      	add	r3, r2
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	3301      	adds	r3, #1
 8008458:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800845a:	7c3b      	ldrb	r3, [r7, #16]
 800845c:	b29b      	uxth	r3, r3
 800845e:	021b      	lsls	r3, r3, #8
 8008460:	b29a      	uxth	r2, r3
 8008462:	7bfb      	ldrb	r3, [r7, #15]
 8008464:	b29b      	uxth	r3, r3
 8008466:	4413      	add	r3, r2
 8008468:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	89ba      	ldrh	r2, [r7, #12]
 800846e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 8008472:	e030      	b.n	80084d6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008474:	23fc      	movs	r3, #252	; 0xfc
 8008476:	77fb      	strb	r3, [r7, #31]
 8008478:	e02d      	b.n	80084d6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800847a:	7cfb      	ldrb	r3, [r7, #19]
 800847c:	2b04      	cmp	r3, #4
 800847e:	d828      	bhi.n	80084d2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	683a      	ldr	r2, [r7, #0]
 8008484:	4413      	add	r3, r2
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	74bb      	strb	r3, [r7, #18]
			Index++;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	3301      	adds	r3, #1
 800848e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8008490:	2300      	movs	r3, #0
 8008492:	61bb      	str	r3, [r7, #24]
 8008494:	e00f      	b.n	80084b6 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	4413      	add	r3, r2
 800849c:	7819      	ldrb	r1, [r3, #0]
 800849e:	f107 0208 	add.w	r2, r7, #8
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	4413      	add	r3, r2
 80084a6:	460a      	mov	r2, r1
 80084a8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	3301      	adds	r3, #1
 80084ae:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	3301      	adds	r3, #1
 80084b4:	61bb      	str	r3, [r7, #24]
 80084b6:	7cfb      	ldrb	r3, [r7, #19]
 80084b8:	69ba      	ldr	r2, [r7, #24]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	dbeb      	blt.n	8008496 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 80084be:	7cfb      	ldrb	r3, [r7, #19]
 80084c0:	f107 0208 	add.w	r2, r7, #8
 80084c4:	7cb9      	ldrb	r1, [r7, #18]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f7fa fa1c 	bl	8002904 <VL53L0X_WriteMulti>
 80084cc:	4603      	mov	r3, r0
 80084ce:	77fb      	strb	r3, [r7, #31]
 80084d0:	e001      	b.n	80084d6 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80084d2:	23fc      	movs	r3, #252	; 0xfc
 80084d4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	683a      	ldr	r2, [r7, #0]
 80084da:	4413      	add	r3, r2
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d004      	beq.n	80084ec <VL53L0X_load_tuning_settings+0x1b8>
 80084e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f43f af2e 	beq.w	8008348 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80084ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3720      	adds	r7, #32
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b088      	sub	sp, #32
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	60f8      	str	r0, [r7, #12]
 8008500:	60b9      	str	r1, [r7, #8]
 8008502:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008504:	2300      	movs	r3, #0
 8008506:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800850e:	f107 0313 	add.w	r3, r7, #19
 8008512:	4619      	mov	r1, r3
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f7fc ffbb 	bl	8005490 <VL53L0X_GetXTalkCompensationEnable>
 800851a:	4603      	mov	r3, r0
 800851c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800851e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d111      	bne.n	800854a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8008526:	7cfb      	ldrb	r3, [r7, #19]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00e      	beq.n	800854a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6a1b      	ldr	r3, [r3, #32]
 8008530:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	8a9b      	ldrh	r3, [r3, #20]
 8008536:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	fb02 f303 	mul.w	r3, r2, r3
 800853e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	3380      	adds	r3, #128	; 0x80
 8008544:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800854a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800854e:	4618      	mov	r0, r3
 8008550:	3720      	adds	r7, #32
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b086      	sub	sp, #24
 800855a:	af00      	add	r7, sp, #0
 800855c:	60f8      	str	r0, [r7, #12]
 800855e:	60b9      	str	r1, [r7, #8]
 8008560:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008562:	2300      	movs	r3, #0
 8008564:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800856e:	f107 0310 	add.w	r3, r7, #16
 8008572:	461a      	mov	r2, r3
 8008574:	68b9      	ldr	r1, [r7, #8]
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f7ff ffbe 	bl	80084f8 <VL53L0X_get_total_xtalk_rate>
 800857c:	4603      	mov	r3, r0
 800857e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8008580:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d105      	bne.n	8008594 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	441a      	add	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	601a      	str	r2, [r3, #0]

	return Status;
 8008594:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3718      	adds	r7, #24
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b09a      	sub	sp, #104	; 0x68
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
 80085ac:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 80085ae:	2312      	movs	r3, #18
 80085b0:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 80085b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80085b6:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 80085b8:	2342      	movs	r3, #66	; 0x42
 80085ba:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 80085bc:	2306      	movs	r3, #6
 80085be:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 80085c0:	2307      	movs	r3, #7
 80085c2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085c4:	2300      	movs	r3, #0
 80085c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 80085d0:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80085d8:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 80085da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085de:	fb02 f303 	mul.w	r3, r2, r3
 80085e2:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 80085e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e6:	3380      	adds	r3, #128	; 0x80
 80085e8:	0a1b      	lsrs	r3, r3, #8
 80085ea:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 80085ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085f0:	fb02 f303 	mul.w	r3, r2, r3
 80085f4:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 80085f6:	2300      	movs	r3, #0
 80085f8:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d01a      	beq.n	8008636 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	029b      	lsls	r3, r3, #10
 8008604:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800860a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800860c:	4413      	add	r3, r2
 800860e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8008610:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	fbb2 f3f3 	udiv	r3, r2, r3
 8008618:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800861a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800861c:	4613      	mov	r3, r2
 800861e:	005b      	lsls	r3, r3, #1
 8008620:	4413      	add	r3, r2
 8008622:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8008624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008626:	fb03 f303 	mul.w	r3, r3, r3
 800862a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800862c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800862e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008632:	0c1b      	lsrs	r3, r3, #16
 8008634:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800863a:	fb02 f303 	mul.w	r3, r2, r3
 800863e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8008640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008642:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008646:	0c1b      	lsrs	r3, r3, #16
 8008648:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800864a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864c:	fb03 f303 	mul.w	r3, r3, r3
 8008650:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8008652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008654:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008658:	0c1b      	lsrs	r3, r3, #16
 800865a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800865c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800865e:	085a      	lsrs	r2, r3, #1
 8008660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008662:	441a      	add	r2, r3
 8008664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008666:	fbb2 f3f3 	udiv	r3, r2, r3
 800866a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800866c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008670:	fb02 f303 	mul.w	r3, r2, r3
 8008674:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8008676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800867c:	d302      	bcc.n	8008684 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800867e:	4b54      	ldr	r3, [pc, #336]	; (80087d0 <VL53L0X_calc_dmax+0x230>)
 8008680:	663b      	str	r3, [r7, #96]	; 0x60
 8008682:	e015      	b.n	80086b0 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8008684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008686:	085a      	lsrs	r2, r3, #1
 8008688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800868a:	441a      	add	r2, r3
 800868c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800868e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008692:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8008694:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008696:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008698:	fb02 f303 	mul.w	r3, r2, r3
 800869c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800869e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086a0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80086a4:	0c1b      	lsrs	r3, r3, #16
 80086a6:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80086a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086aa:	fb03 f303 	mul.w	r3, r3, r3
 80086ae:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 80086b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086b2:	039b      	lsls	r3, r3, #14
 80086b4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80086b8:	4a46      	ldr	r2, [pc, #280]	; (80087d4 <VL53L0X_calc_dmax+0x234>)
 80086ba:	fba2 2303 	umull	r2, r3, r2, r3
 80086be:	099b      	lsrs	r3, r3, #6
 80086c0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	fb03 f303 	mul.w	r3, r3, r3
 80086c8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 80086ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086cc:	fb03 f303 	mul.w	r3, r3, r3
 80086d0:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 80086d2:	6a3b      	ldr	r3, [r7, #32]
 80086d4:	3308      	adds	r3, #8
 80086d6:	091b      	lsrs	r3, r3, #4
 80086d8:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 80086da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086dc:	6a3b      	ldr	r3, [r7, #32]
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 80086e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086e4:	4613      	mov	r3, r2
 80086e6:	005b      	lsls	r3, r3, #1
 80086e8:	4413      	add	r3, r2
 80086ea:	011b      	lsls	r3, r3, #4
 80086ec:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80086f4:	0b9b      	lsrs	r3, r3, #14
 80086f6:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 80086f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086fc:	4413      	add	r3, r2
 80086fe:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8008700:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008702:	085b      	lsrs	r3, r3, #1
 8008704:	69ba      	ldr	r2, [r7, #24]
 8008706:	4413      	add	r3, r2
 8008708:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800870e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008712:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	039b      	lsls	r3, r3, #14
 8008718:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	085b      	lsrs	r3, r3, #1
 800871e:	69ba      	ldr	r2, [r7, #24]
 8008720:	4413      	add	r3, r2
 8008722:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8008724:	69ba      	ldr	r2, [r7, #24]
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	fbb2 f3f3 	udiv	r3, r2, r3
 800872c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800872e:	69bb      	ldr	r3, [r7, #24]
 8008730:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008732:	fb02 f303 	mul.w	r3, r2, r3
 8008736:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800873e:	4a25      	ldr	r2, [pc, #148]	; (80087d4 <VL53L0X_calc_dmax+0x234>)
 8008740:	fba2 2303 	umull	r2, r3, r2, r3
 8008744:	099b      	lsrs	r3, r3, #6
 8008746:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	011b      	lsls	r3, r3, #4
 800874c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008754:	4a1f      	ldr	r2, [pc, #124]	; (80087d4 <VL53L0X_calc_dmax+0x234>)
 8008756:	fba2 2303 	umull	r2, r3, r2, r3
 800875a:	099b      	lsrs	r3, r3, #6
 800875c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800875e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008760:	3380      	adds	r3, #128	; 0x80
 8008762:	0a1b      	lsrs	r3, r3, #8
 8008764:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d008      	beq.n	800877e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	085a      	lsrs	r2, r3, #1
 8008770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008772:	441a      	add	r2, r3
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	fbb2 f3f3 	udiv	r3, r2, r3
 800877a:	65bb      	str	r3, [r7, #88]	; 0x58
 800877c:	e001      	b.n	8008782 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800877e:	2300      	movs	r3, #0
 8008780:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8008782:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008784:	f7fe fc41 	bl	800700a <VL53L0X_isqrt>
 8008788:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d008      	beq.n	80087a2 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	085a      	lsrs	r2, r3, #1
 8008794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008796:	441a      	add	r2, r3
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	fbb2 f3f3 	udiv	r3, r2, r3
 800879e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087a0:	e001      	b.n	80087a6 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 80087a2:	2300      	movs	r3, #0
 80087a4:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 80087a6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80087a8:	f7fe fc2f 	bl	800700a <VL53L0X_isqrt>
 80087ac:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 80087ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80087b0:	693a      	ldr	r2, [r7, #16]
 80087b2:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 80087b4:	693a      	ldr	r2, [r7, #16]
 80087b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d902      	bls.n	80087c2 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 80087bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80087be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80087c0:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 80087c2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3768      	adds	r7, #104	; 0x68
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	fff00000 	.word	0xfff00000
 80087d4:	10624dd3 	.word	0x10624dd3

080087d8 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b0b4      	sub	sp, #208	; 0xd0
 80087dc:	af04      	add	r7, sp, #16
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
 80087e4:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 80087e6:	f44f 7348 	mov.w	r3, #800	; 0x320
 80087ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 80087ee:	f44f 7316 	mov.w	r3, #600	; 0x258
 80087f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 80087f6:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 80087fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 80087fe:	f241 235c 	movw	r3, #4700	; 0x125c
 8008802:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8008806:	4b9e      	ldr	r3, [pc, #632]	; (8008a80 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8008808:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800880c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008810:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8008812:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8008816:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800881a:	fbb2 f3f3 	udiv	r3, r2, r3
 800881e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8008820:	4b98      	ldr	r3, [pc, #608]	; (8008a84 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8008822:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8008824:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008828:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800882a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800882e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8008830:	f240 6377 	movw	r3, #1655	; 0x677
 8008834:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008836:	2300      	movs	r3, #0
 8008838:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6a1b      	ldr	r3, [r3, #32]
 8008840:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800884a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800884e:	0c1b      	lsrs	r3, r3, #16
 8008850:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8008858:	f107 0310 	add.w	r3, r7, #16
 800885c:	461a      	mov	r2, r3
 800885e:	68b9      	ldr	r1, [r7, #8]
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f7ff fe78 	bl	8008556 <VL53L0X_get_total_signal_rate>
 8008866:	4603      	mov	r3, r0
 8008868:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800886c:	f107 0314 	add.w	r3, r7, #20
 8008870:	461a      	mov	r2, r3
 8008872:	68b9      	ldr	r1, [r7, #8]
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f7ff fe3f 	bl	80084f8 <VL53L0X_get_total_xtalk_rate>
 800887a:	4603      	mov	r3, r0
 800887c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008886:	fb02 f303 	mul.w	r3, r2, r3
 800888a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800888c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800888e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008892:	0c1b      	lsrs	r3, r3, #16
 8008894:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800889c:	fb02 f303 	mul.w	r3, r2, r3
 80088a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 80088a4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80088a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d902      	bls.n	80088b4 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 80088ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 80088b4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d168      	bne.n	800898e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80088c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80088cc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80088d0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80088d4:	461a      	mov	r2, r3
 80088d6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f7ff f93a 	bl	8007b54 <VL53L0X_calc_timeout_mclks>
 80088e0:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80088e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80088f2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80088f6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80088fa:	461a      	mov	r2, r3
 80088fc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f7ff f927 	bl	8007b54 <VL53L0X_calc_timeout_mclks>
 8008906:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8008908:	2303      	movs	r3, #3
 800890a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800890e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008912:	2b08      	cmp	r3, #8
 8008914:	d102      	bne.n	800891c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8008916:	2302      	movs	r3, #2
 8008918:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800891c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800891e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008920:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8008922:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008926:	fb02 f303 	mul.w	r3, r2, r3
 800892a:	02db      	lsls	r3, r3, #11
 800892c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008930:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008934:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008938:	4a53      	ldr	r2, [pc, #332]	; (8008a88 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800893a:	fba2 2303 	umull	r2, r3, r2, r3
 800893e:	099b      	lsrs	r3, r3, #6
 8008940:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8008944:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008948:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800894a:	fb02 f303 	mul.w	r3, r2, r3
 800894e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008952:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008956:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800895a:	4a4b      	ldr	r2, [pc, #300]	; (8008a88 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800895c:	fba2 2303 	umull	r2, r3, r2, r3
 8008960:	099b      	lsrs	r3, r3, #6
 8008962:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	3380      	adds	r3, #128	; 0x80
 800896a:	0a1b      	lsrs	r3, r3, #8
 800896c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800896e:	693a      	ldr	r2, [r7, #16]
 8008970:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008974:	fb02 f303 	mul.w	r3, r2, r3
 8008978:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800897c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008980:	3380      	adds	r3, #128	; 0x80
 8008982:	0a1b      	lsrs	r3, r3, #8
 8008984:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	021b      	lsls	r3, r3, #8
 800898c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800898e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008992:	2b00      	cmp	r3, #0
 8008994:	d002      	beq.n	800899c <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8008996:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800899a:	e15e      	b.n	8008c5a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800899c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d10c      	bne.n	80089bc <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80089a8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80089b0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	2200      	movs	r2, #0
 80089b8:	601a      	str	r2, [r3, #0]
 80089ba:	e14c      	b.n	8008c56 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 80089bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d102      	bne.n	80089ca <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 80089c4:	2301      	movs	r3, #1
 80089c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 80089ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80089ce:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 80089d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089d2:	041a      	lsls	r2, r3, #16
 80089d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80089da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 80089de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80089e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d902      	bls.n	80089ee <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 80089e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80089ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80089f2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80089f6:	fb02 f303 	mul.w	r3, r2, r3
 80089fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80089fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008a02:	4613      	mov	r3, r2
 8008a04:	005b      	lsls	r3, r3, #1
 8008a06:	4413      	add	r3, r2
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fe fafd 	bl	800700a <VL53L0X_isqrt>
 8008a10:	4603      	mov	r3, r0
 8008a12:	005b      	lsls	r3, r3, #1
 8008a14:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	891b      	ldrh	r3, [r3, #8]
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a1e:	fb02 f303 	mul.w	r3, r2, r3
 8008a22:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008a24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a26:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8008a28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a2c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008a2e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8008a30:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008a34:	4a14      	ldr	r2, [pc, #80]	; (8008a88 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008a36:	fba2 2303 	umull	r2, r3, r2, r3
 8008a3a:	099b      	lsrs	r3, r3, #6
 8008a3c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8008a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a40:	041b      	lsls	r3, r3, #16
 8008a42:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008a46:	4a10      	ldr	r2, [pc, #64]	; (8008a88 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008a48:	fba2 2303 	umull	r2, r3, r2, r3
 8008a4c:	099b      	lsrs	r3, r3, #6
 8008a4e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8008a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a52:	021b      	lsls	r3, r3, #8
 8008a54:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8008a56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	bfb8      	it	lt
 8008a62:	425b      	neglt	r3, r3
 8008a64:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8008a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a68:	021b      	lsls	r3, r3, #8
 8008a6a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	7e1b      	ldrb	r3, [r3, #24]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00b      	beq.n	8008a8c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8008a74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008a7c:	e033      	b.n	8008ae6 <VL53L0X_calc_sigma_estimate+0x30e>
 8008a7e:	bf00      	nop
 8008a80:	028f87ae 	.word	0x028f87ae
 8008a84:	0006999a 	.word	0x0006999a
 8008a88:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8008a8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8008a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a9c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8008aa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008aa4:	fb02 f303 	mul.w	r3, r2, r3
 8008aa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8008aac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008ab0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ab2:	4413      	add	r3, r2
 8008ab4:	0c1b      	lsrs	r3, r3, #16
 8008ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8008aba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008abe:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8008ac2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8008ac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008aca:	085b      	lsrs	r3, r3, #1
 8008acc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8008ad0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ad4:	fb03 f303 	mul.w	r3, r3, r3
 8008ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8008adc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ae0:	0b9b      	lsrs	r3, r3, #14
 8008ae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8008ae6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008aea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008aec:	fb02 f303 	mul.w	r3, r2, r3
 8008af0:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8008af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008af8:	0c1b      	lsrs	r3, r3, #16
 8008afa:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8008afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afe:	fb03 f303 	mul.w	r3, r3, r3
 8008b02:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8008b04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008b08:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8008b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008b10:	0c1b      	lsrs	r3, r3, #16
 8008b12:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8008b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b16:	fb03 f303 	mul.w	r3, r3, r3
 8008b1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8008b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b20:	4413      	add	r3, r2
 8008b22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8008b24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b26:	f7fe fa70 	bl	800700a <VL53L0X_isqrt>
 8008b2a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2e:	041b      	lsls	r3, r3, #16
 8008b30:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	3332      	adds	r3, #50	; 0x32
 8008b36:	4a4b      	ldr	r2, [pc, #300]	; (8008c64 <VL53L0X_calc_sigma_estimate+0x48c>)
 8008b38:	fba2 2303 	umull	r2, r3, r2, r3
 8008b3c:	095a      	lsrs	r2, r3, #5
 8008b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8008b48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b4c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8008b50:	fb02 f303 	mul.w	r3, r2, r3
 8008b54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8008b58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b5c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008b60:	3308      	adds	r3, #8
 8008b62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8008b66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b6a:	4a3f      	ldr	r2, [pc, #252]	; (8008c68 <VL53L0X_calc_sigma_estimate+0x490>)
 8008b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b70:	0b5b      	lsrs	r3, r3, #13
 8008b72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8008b76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008b7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d902      	bls.n	8008b86 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8008b80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8008b86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008b8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008b8e:	4413      	add	r3, r2
 8008b90:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8008b94:	4a35      	ldr	r2, [pc, #212]	; (8008c6c <VL53L0X_calc_sigma_estimate+0x494>)
 8008b96:	fba2 2303 	umull	r2, r3, r2, r3
 8008b9a:	099b      	lsrs	r3, r3, #6
 8008b9c:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8008b9e:	6a3b      	ldr	r3, [r7, #32]
 8008ba0:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8008ba2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ba6:	441a      	add	r2, r3
 8008ba8:	6a3b      	ldr	r3, [r7, #32]
 8008baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7fe fa2b 	bl	800700a <VL53L0X_isqrt>
 8008bb4:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	021b      	lsls	r3, r3, #8
 8008bba:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008bc2:	4a2a      	ldr	r2, [pc, #168]	; (8008c6c <VL53L0X_calc_sigma_estimate+0x494>)
 8008bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc8:	099b      	lsrs	r3, r3, #6
 8008bca:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8008bcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008bd0:	fb03 f303 	mul.w	r3, r3, r3
 8008bd4:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	fb03 f303 	mul.w	r3, r3, r3
 8008bdc:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8008bde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be2:	4413      	add	r3, r2
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7fe fa10 	bl	800700a <VL53L0X_isqrt>
 8008bea:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008bf2:	fb02 f303 	mul.w	r3, r2, r3
 8008bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8008bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d009      	beq.n	8008c14 <VL53L0X_calc_sigma_estimate+0x43c>
 8008c00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d005      	beq.n	8008c14 <VL53L0X_calc_sigma_estimate+0x43c>
 8008c08:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008c0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d903      	bls.n	8008c1c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8008c14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008c22:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8008c2e:	6939      	ldr	r1, [r7, #16]
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	9303      	str	r3, [sp, #12]
 8008c34:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008c38:	9302      	str	r3, [sp, #8]
 8008c3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c3e:	9301      	str	r3, [sp, #4]
 8008c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f7ff fca8 	bl	80085a0 <VL53L0X_calc_dmax>
 8008c50:	4603      	mov	r3, r0
 8008c52:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008c56:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	37c0      	adds	r7, #192	; 0xc0
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	51eb851f 	.word	0x51eb851f
 8008c68:	d1b71759 	.word	0xd1b71759
 8008c6c:	10624dd3 	.word	0x10624dd3

08008c70 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b090      	sub	sp, #64	; 0x40
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	607a      	str	r2, [r7, #4]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	72fb      	strb	r3, [r7, #11]
 8008c80:	4613      	mov	r3, r2
 8008c82:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c84:	2300      	movs	r3, #0
 8008c86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8008c90:	2300      	movs	r3, #0
 8008c92:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8008c96:	2300      	movs	r3, #0
 8008c98:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8008cc2:	7afb      	ldrb	r3, [r7, #11]
 8008cc4:	10db      	asrs	r3, r3, #3
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	f003 030f 	and.w	r3, r3, #15
 8008ccc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8008cd0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d017      	beq.n	8008d08 <VL53L0X_get_pal_range_status+0x98>
 8008cd8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008cdc:	2b05      	cmp	r3, #5
 8008cde:	d013      	beq.n	8008d08 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8008ce0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ce4:	2b07      	cmp	r3, #7
 8008ce6:	d00f      	beq.n	8008d08 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8008ce8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008cec:	2b0c      	cmp	r3, #12
 8008cee:	d00b      	beq.n	8008d08 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8008cf0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008cf4:	2b0d      	cmp	r3, #13
 8008cf6:	d007      	beq.n	8008d08 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8008cf8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008cfc:	2b0e      	cmp	r3, #14
 8008cfe:	d003      	beq.n	8008d08 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8008d00:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008d04:	2b0f      	cmp	r3, #15
 8008d06:	d103      	bne.n	8008d10 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008d0e:	e002      	b.n	8008d16 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8008d10:	2300      	movs	r3, #0
 8008d12:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008d16:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d109      	bne.n	8008d32 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008d1e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8008d22:	461a      	mov	r2, r3
 8008d24:	2100      	movs	r1, #0
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f7fc fc86 	bl	8005638 <VL53L0X_GetLimitCheckEnable>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8008d32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d02e      	beq.n	8008d98 <VL53L0X_get_pal_range_status+0x128>
 8008d3a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d12a      	bne.n	8008d98 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8008d42:	f107 0310 	add.w	r3, r7, #16
 8008d46:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008d4a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008d4c:	68f8      	ldr	r0, [r7, #12]
 8008d4e:	f7ff fd43 	bl	80087d8 <VL53L0X_calc_sigma_estimate>
 8008d52:	4603      	mov	r3, r0
 8008d54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8008d58:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d103      	bne.n	8008d68 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d66:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8008d68:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d113      	bne.n	8008d98 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8008d70:	f107 0320 	add.w	r3, r7, #32
 8008d74:	461a      	mov	r2, r3
 8008d76:	2100      	movs	r1, #0
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f7fc fce3 	bl	8005744 <VL53L0X_GetLimitCheckValue>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8008d84:	6a3b      	ldr	r3, [r7, #32]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d006      	beq.n	8008d98 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8008d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d8c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d902      	bls.n	8008d98 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8008d92:	2301      	movs	r3, #1
 8008d94:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008d98:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d109      	bne.n	8008db4 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008da0:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8008da4:	461a      	mov	r2, r3
 8008da6:	2102      	movs	r1, #2
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f7fc fc45 	bl	8005638 <VL53L0X_GetLimitCheckEnable>
 8008dae:	4603      	mov	r3, r0
 8008db0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8008db4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d044      	beq.n	8008e46 <VL53L0X_get_pal_range_status+0x1d6>
 8008dbc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d140      	bne.n	8008e46 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008dc4:	f107 031c 	add.w	r3, r7, #28
 8008dc8:	461a      	mov	r2, r3
 8008dca:	2102      	movs	r1, #2
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f7fc fcb9 	bl	8005744 <VL53L0X_GetLimitCheckValue>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8008dd8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d107      	bne.n	8008df0 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008de0:	2201      	movs	r2, #1
 8008de2:	21ff      	movs	r1, #255	; 0xff
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	f7f9 fde9 	bl	80029bc <VL53L0X_WrByte>
 8008dea:	4603      	mov	r3, r0
 8008dec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8008df0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d109      	bne.n	8008e0c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8008df8:	f107 0316 	add.w	r3, r7, #22
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	21b6      	movs	r1, #182	; 0xb6
 8008e00:	68f8      	ldr	r0, [r7, #12]
 8008e02:	f7f9 feb9 	bl	8002b78 <VL53L0X_RdWord>
 8008e06:	4603      	mov	r3, r0
 8008e08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8008e0c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d107      	bne.n	8008e24 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008e14:	2200      	movs	r2, #0
 8008e16:	21ff      	movs	r1, #255	; 0xff
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f7f9 fdcf 	bl	80029bc <VL53L0X_WrByte>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8008e24:	8afb      	ldrh	r3, [r7, #22]
 8008e26:	025b      	lsls	r3, r3, #9
 8008e28:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e2e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d006      	beq.n	8008e46 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8008e38:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8008e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d902      	bls.n	8008e46 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8008e40:	2301      	movs	r3, #1
 8008e42:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008e46:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d109      	bne.n	8008e62 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008e4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e52:	461a      	mov	r2, r3
 8008e54:	2103      	movs	r1, #3
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f7fc fbee 	bl	8005638 <VL53L0X_GetLimitCheckEnable>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8008e62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d023      	beq.n	8008eb2 <VL53L0X_get_pal_range_status+0x242>
 8008e6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d11f      	bne.n	8008eb2 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8008e72:	893b      	ldrh	r3, [r7, #8]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d102      	bne.n	8008e7e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8008e7c:	e005      	b.n	8008e8a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	021a      	lsls	r2, r3, #8
 8008e82:	893b      	ldrh	r3, [r7, #8]
 8008e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e88:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008e8a:	f107 0318 	add.w	r3, r7, #24
 8008e8e:	461a      	mov	r2, r3
 8008e90:	2103      	movs	r1, #3
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f7fc fc56 	bl	8005744 <VL53L0X_GetLimitCheckValue>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d006      	beq.n	8008eb2 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8008ea4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8008ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d202      	bcs.n	8008eb2 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8008eac:	2301      	movs	r3, #1
 8008eae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008eb2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d14a      	bne.n	8008f50 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8008eba:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d103      	bne.n	8008eca <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8008ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ec4:	22ff      	movs	r2, #255	; 0xff
 8008ec6:	701a      	strb	r2, [r3, #0]
 8008ec8:	e042      	b.n	8008f50 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8008eca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d007      	beq.n	8008ee2 <VL53L0X_get_pal_range_status+0x272>
 8008ed2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ed6:	2b02      	cmp	r3, #2
 8008ed8:	d003      	beq.n	8008ee2 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8008eda:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ede:	2b03      	cmp	r3, #3
 8008ee0:	d103      	bne.n	8008eea <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8008ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ee4:	2205      	movs	r2, #5
 8008ee6:	701a      	strb	r2, [r3, #0]
 8008ee8:	e032      	b.n	8008f50 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8008eea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008eee:	2b06      	cmp	r3, #6
 8008ef0:	d003      	beq.n	8008efa <VL53L0X_get_pal_range_status+0x28a>
 8008ef2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008ef6:	2b09      	cmp	r3, #9
 8008ef8:	d103      	bne.n	8008f02 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8008efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008efc:	2204      	movs	r2, #4
 8008efe:	701a      	strb	r2, [r3, #0]
 8008f00:	e026      	b.n	8008f50 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8008f02:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008f06:	2b08      	cmp	r3, #8
 8008f08:	d007      	beq.n	8008f1a <VL53L0X_get_pal_range_status+0x2aa>
 8008f0a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008f0e:	2b0a      	cmp	r3, #10
 8008f10:	d003      	beq.n	8008f1a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8008f12:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d103      	bne.n	8008f22 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8008f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f1c:	2203      	movs	r2, #3
 8008f1e:	701a      	strb	r2, [r3, #0]
 8008f20:	e016      	b.n	8008f50 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8008f22:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008f26:	2b04      	cmp	r3, #4
 8008f28:	d003      	beq.n	8008f32 <VL53L0X_get_pal_range_status+0x2c2>
 8008f2a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d103      	bne.n	8008f3a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8008f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f34:	2202      	movs	r2, #2
 8008f36:	701a      	strb	r2, [r3, #0]
 8008f38:	e00a      	b.n	8008f50 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8008f3a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d103      	bne.n	8008f4a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8008f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f44:	2201      	movs	r2, #1
 8008f46:	701a      	strb	r2, [r3, #0]
 8008f48:	e002      	b.n	8008f50 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8008f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8008f50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d102      	bne.n	8008f5e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8008f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008f5e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8008f62:	461a      	mov	r2, r3
 8008f64:	2101      	movs	r1, #1
 8008f66:	68f8      	ldr	r0, [r7, #12]
 8008f68:	f7fc fb66 	bl	8005638 <VL53L0X_GetLimitCheckEnable>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8008f72:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d14f      	bne.n	800901a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8008f7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d003      	beq.n	8008f8a <VL53L0X_get_pal_range_status+0x31a>
 8008f82:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d103      	bne.n	8008f92 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008f90:	e002      	b.n	8008f98 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8008f92:	2300      	movs	r3, #0
 8008f94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008f9e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8008fa2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008fa6:	2b04      	cmp	r3, #4
 8008fa8:	d003      	beq.n	8008fb2 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8008faa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d103      	bne.n	8008fba <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fb8:	e002      	b.n	8008fc0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008fc6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8008fca:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d003      	beq.n	8008fda <VL53L0X_get_pal_range_status+0x36a>
 8008fd2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d103      	bne.n	8008fe2 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008fe0:	e002      	b.n	8008fe8 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008fee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8008ff2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d003      	beq.n	8009002 <VL53L0X_get_pal_range_status+0x392>
 8008ffa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d103      	bne.n	800900a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8009002:	2301      	movs	r3, #1
 8009004:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009008:	e002      	b.n	8009010 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800900a:	2300      	movs	r3, #0
 800900c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009016:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800901a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800901e:	4618      	mov	r0, r3
 8009020:	3740      	adds	r7, #64	; 0x40
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 8009026:	b480      	push	{r7}
 8009028:	af00      	add	r7, sp, #0
  while (1);
 800902a:	e7fe      	b.n	800902a <BSP_ErrorHandler+0x4>

0800902c <BSP_LED_Init>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b088      	sub	sp, #32
 8009030:	af00      	add	r7, sp, #0
 8009032:	4603      	mov	r3, r0
 8009034:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;

  if (Led == LED2)
 8009036:	79fb      	ldrb	r3, [r7, #7]
 8009038:	2b01      	cmp	r3, #1
 800903a:	d124      	bne.n	8009086 <BSP_LED_Init+0x5a>
  {
    /* Enable the GPIO_LED clock */
    LED2_GPIO_CLK_ENABLE();
 800903c:	4b1f      	ldr	r3, [pc, #124]	; (80090bc <BSP_LED_Init+0x90>)
 800903e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009040:	4a1e      	ldr	r2, [pc, #120]	; (80090bc <BSP_LED_Init+0x90>)
 8009042:	f043 0302 	orr.w	r3, r3, #2
 8009046:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009048:	4b1c      	ldr	r3, [pc, #112]	; (80090bc <BSP_LED_Init+0x90>)
 800904a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800904c:	f003 0302 	and.w	r3, r3, #2
 8009050:	60bb      	str	r3, [r7, #8]
 8009052:	68bb      	ldr	r3, [r7, #8]

    /* Configure the GPIO_LED pin */
    GPIO_InitStructure.Pin = LED_PIN[Led];
 8009054:	79fb      	ldrb	r3, [r7, #7]
 8009056:	4a1a      	ldr	r2, [pc, #104]	; (80090c0 <BSP_LED_Init+0x94>)
 8009058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800905c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800905e:	2301      	movs	r3, #1
 8009060:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8009062:	2300      	movs	r3, #0
 8009064:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009066:	2303      	movs	r3, #3
 8009068:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStructure);
 800906a:	f107 030c 	add.w	r3, r7, #12
 800906e:	4619      	mov	r1, r3
 8009070:	4814      	ldr	r0, [pc, #80]	; (80090c4 <BSP_LED_Init+0x98>)
 8009072:	f003 f8e3 	bl	800c23c <HAL_GPIO_Init>
    /* By default, turn off LED */
    HAL_GPIO_WritePin(LED2_GPIO_PORT, GPIO_InitStructure.Pin, GPIO_PIN_SET);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	b29b      	uxth	r3, r3
 800907a:	2201      	movs	r2, #1
 800907c:	4619      	mov	r1, r3
 800907e:	4811      	ldr	r0, [pc, #68]	; (80090c4 <BSP_LED_Init+0x98>)
 8009080:	f003 fb60 	bl	800c744 <HAL_GPIO_WritePin>

    /* By default, turn off LED */
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }

}
 8009084:	e016      	b.n	80090b4 <BSP_LED_Init+0x88>
    if (BSP_IO_Init() == IO_ERROR)
 8009086:	f000 fda3 	bl	8009bd0 <BSP_IO_Init>
 800908a:	4603      	mov	r3, r0
 800908c:	2b01      	cmp	r3, #1
 800908e:	d101      	bne.n	8009094 <BSP_LED_Init+0x68>
      BSP_ErrorHandler();
 8009090:	f7ff ffc9 	bl	8009026 <BSP_ErrorHandler>
    BSP_IO_ConfigPin(LED_PIN[Led], IO_MODE_OUTPUT);
 8009094:	79fb      	ldrb	r3, [r7, #7]
 8009096:	4a0a      	ldr	r2, [pc, #40]	; (80090c0 <BSP_LED_Init+0x94>)
 8009098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800909c:	2101      	movs	r1, #1
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 fdda 	bl	8009c58 <BSP_IO_ConfigPin>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 80090a4:	79fb      	ldrb	r3, [r7, #7]
 80090a6:	4a06      	ldr	r2, [pc, #24]	; (80090c0 <BSP_LED_Init+0x94>)
 80090a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090ac:	2101      	movs	r1, #1
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 fdee 	bl	8009c90 <BSP_IO_WritePin>
}
 80090b4:	bf00      	nop
 80090b6:	3720      	adds	r7, #32
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	40021000 	.word	0x40021000
 80090c0:	08019958 	.word	0x08019958
 80090c4:	48000400 	.word	0x48000400

080090c8 <BSP_LED_On>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	4603      	mov	r3, r0
 80090d0:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 80090d2:	79fb      	ldrb	r3, [r7, #7]
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d109      	bne.n	80090ec <BSP_LED_On+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_RESET);
 80090d8:	79fb      	ldrb	r3, [r7, #7]
 80090da:	4a0a      	ldr	r2, [pc, #40]	; (8009104 <BSP_LED_On+0x3c>)
 80090dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090e0:	2200      	movs	r2, #0
 80090e2:	4619      	mov	r1, r3
 80090e4:	4808      	ldr	r0, [pc, #32]	; (8009108 <BSP_LED_On+0x40>)
 80090e6:	f003 fb2d 	bl	800c744 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
  }
}
 80090ea:	e007      	b.n	80090fc <BSP_LED_On+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
 80090ec:	79fb      	ldrb	r3, [r7, #7]
 80090ee:	4a05      	ldr	r2, [pc, #20]	; (8009104 <BSP_LED_On+0x3c>)
 80090f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090f4:	2100      	movs	r1, #0
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 fdca 	bl	8009c90 <BSP_IO_WritePin>
}
 80090fc:	bf00      	nop
 80090fe:	3708      	adds	r7, #8
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}
 8009104:	08019958 	.word	0x08019958
 8009108:	48000400 	.word	0x48000400

0800910c <BSP_LED_Off>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	4603      	mov	r3, r0
 8009114:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 8009116:	79fb      	ldrb	r3, [r7, #7]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d109      	bne.n	8009130 <BSP_LED_Off+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_SET);
 800911c:	79fb      	ldrb	r3, [r7, #7]
 800911e:	4a0a      	ldr	r2, [pc, #40]	; (8009148 <BSP_LED_Off+0x3c>)
 8009120:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009124:	2201      	movs	r2, #1
 8009126:	4619      	mov	r1, r3
 8009128:	4808      	ldr	r0, [pc, #32]	; (800914c <BSP_LED_Off+0x40>)
 800912a:	f003 fb0b 	bl	800c744 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }
}
 800912e:	e007      	b.n	8009140 <BSP_LED_Off+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 8009130:	79fb      	ldrb	r3, [r7, #7]
 8009132:	4a05      	ldr	r2, [pc, #20]	; (8009148 <BSP_LED_Off+0x3c>)
 8009134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009138:	2101      	movs	r1, #1
 800913a:	4618      	mov	r0, r3
 800913c:	f000 fda8 	bl	8009c90 <BSP_IO_WritePin>
}
 8009140:	bf00      	nop
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	08019958 	.word	0x08019958
 800914c:	48000400 	.word	0x48000400

08009150 <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 8009154:	4812      	ldr	r0, [pc, #72]	; (80091a0 <I2C2_Init+0x50>)
 8009156:	f004 f902 	bl	800d35e <HAL_I2C_GetState>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d11d      	bne.n	800919c <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 8009160:	4b0f      	ldr	r3, [pc, #60]	; (80091a0 <I2C2_Init+0x50>)
 8009162:	4a10      	ldr	r2, [pc, #64]	; (80091a4 <I2C2_Init+0x54>)
 8009164:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 8009166:	4b0e      	ldr	r3, [pc, #56]	; (80091a0 <I2C2_Init+0x50>)
 8009168:	4a0f      	ldr	r2, [pc, #60]	; (80091a8 <I2C2_Init+0x58>)
 800916a:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 800916c:	4b0c      	ldr	r3, [pc, #48]	; (80091a0 <I2C2_Init+0x50>)
 800916e:	2270      	movs	r2, #112	; 0x70
 8009170:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009172:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <I2C2_Init+0x50>)
 8009174:	2201      	movs	r2, #1
 8009176:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009178:	4b09      	ldr	r3, [pc, #36]	; (80091a0 <I2C2_Init+0x50>)
 800917a:	2200      	movs	r2, #0
 800917c:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 800917e:	4b08      	ldr	r3, [pc, #32]	; (80091a0 <I2C2_Init+0x50>)
 8009180:	22ff      	movs	r2, #255	; 0xff
 8009182:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009184:	4b06      	ldr	r3, [pc, #24]	; (80091a0 <I2C2_Init+0x50>)
 8009186:	2200      	movs	r2, #0
 8009188:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800918a:	4b05      	ldr	r3, [pc, #20]	; (80091a0 <I2C2_Init+0x50>)
 800918c:	2200      	movs	r2, #0
 800918e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 8009190:	4803      	ldr	r0, [pc, #12]	; (80091a0 <I2C2_Init+0x50>)
 8009192:	f000 f80b 	bl	80091ac <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 8009196:	4802      	ldr	r0, [pc, #8]	; (80091a0 <I2C2_Init+0x50>)
 8009198:	f003 fb04 	bl	800c7a4 <HAL_I2C_Init>
  }
}
 800919c:	bf00      	nop
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	20000fa8 	.word	0x20000fa8
 80091a4:	40005800 	.word	0x40005800
 80091a8:	40403e5d 	.word	0x40403e5d

080091ac <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b0ae      	sub	sp, #184	; 0xb8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a37      	ldr	r2, [pc, #220]	; (8009298 <I2C2_MspInit+0xec>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d168      	bne.n	8009290 <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80091be:	2380      	movs	r3, #128	; 0x80
 80091c0:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 80091c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80091c6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 80091c8:	f107 0318 	add.w	r3, r7, #24
 80091cc:	4618      	mov	r0, r3
 80091ce:	f006 fe5b 	bl	800fe88 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 80091d2:	4b32      	ldr	r3, [pc, #200]	; (800929c <I2C2_MspInit+0xf0>)
 80091d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091d6:	4a31      	ldr	r2, [pc, #196]	; (800929c <I2C2_MspInit+0xf0>)
 80091d8:	f043 0302 	orr.w	r3, r3, #2
 80091dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80091de:	4b2f      	ldr	r3, [pc, #188]	; (800929c <I2C2_MspInit+0xf0>)
 80091e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091e2:	f003 0302 	and.w	r3, r3, #2
 80091e6:	617b      	str	r3, [r7, #20]
 80091e8:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 80091ea:	4b2c      	ldr	r3, [pc, #176]	; (800929c <I2C2_MspInit+0xf0>)
 80091ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091ee:	4a2b      	ldr	r2, [pc, #172]	; (800929c <I2C2_MspInit+0xf0>)
 80091f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80091f6:	4b29      	ldr	r3, [pc, #164]	; (800929c <I2C2_MspInit+0xf0>)
 80091f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091fe:	613b      	str	r3, [r7, #16]
 8009200:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 8009202:	2310      	movs	r3, #16
 8009204:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8009208:	2312      	movs	r3, #18
 800920a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 800920e:	2301      	movs	r3, #1
 8009210:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 8009214:	2303      	movs	r3, #3
 8009216:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 800921a:	2304      	movs	r3, #4
 800921c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 8009220:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009224:	4619      	mov	r1, r3
 8009226:	481e      	ldr	r0, [pc, #120]	; (80092a0 <I2C2_MspInit+0xf4>)
 8009228:	f003 f808 	bl	800c23c <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 800922c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009230:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 8009234:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009238:	4619      	mov	r1, r3
 800923a:	481a      	ldr	r0, [pc, #104]	; (80092a4 <I2C2_MspInit+0xf8>)
 800923c:	f002 fffe 	bl	800c23c <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 8009240:	4b16      	ldr	r3, [pc, #88]	; (800929c <I2C2_MspInit+0xf0>)
 8009242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009244:	4a15      	ldr	r2, [pc, #84]	; (800929c <I2C2_MspInit+0xf0>)
 8009246:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800924a:	6593      	str	r3, [r2, #88]	; 0x58
 800924c:	4b13      	ldr	r3, [pc, #76]	; (800929c <I2C2_MspInit+0xf0>)
 800924e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009254:	60fb      	str	r3, [r7, #12]
 8009256:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 8009258:	4b10      	ldr	r3, [pc, #64]	; (800929c <I2C2_MspInit+0xf0>)
 800925a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925c:	4a0f      	ldr	r2, [pc, #60]	; (800929c <I2C2_MspInit+0xf0>)
 800925e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009262:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8009264:	4b0d      	ldr	r3, [pc, #52]	; (800929c <I2C2_MspInit+0xf0>)
 8009266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009268:	4a0c      	ldr	r2, [pc, #48]	; (800929c <I2C2_MspInit+0xf0>)
 800926a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800926e:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 8009270:	2200      	movs	r2, #0
 8009272:	2100      	movs	r1, #0
 8009274:	2021      	movs	r0, #33	; 0x21
 8009276:	f002 fe0a 	bl	800be8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 800927a:	2021      	movs	r0, #33	; 0x21
 800927c:	f002 fe23 	bl	800bec6 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 8009280:	2200      	movs	r2, #0
 8009282:	2100      	movs	r1, #0
 8009284:	2022      	movs	r0, #34	; 0x22
 8009286:	f002 fe02 	bl	800be8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 800928a:	2022      	movs	r0, #34	; 0x22
 800928c:	f002 fe1b 	bl	800bec6 <HAL_NVIC_EnableIRQ>
  }
}
 8009290:	bf00      	nop
 8009292:	37b8      	adds	r7, #184	; 0xb8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	40005800 	.word	0x40005800
 800929c:	40021000 	.word	0x40021000
 80092a0:	48001c00 	.word	0x48001c00
 80092a4:	48000400 	.word	0x48000400

080092a8 <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 80092ac:	4806      	ldr	r0, [pc, #24]	; (80092c8 <I2C2_DeInit+0x20>)
 80092ae:	f004 f856 	bl	800d35e <HAL_I2C_GetState>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d005      	beq.n	80092c4 <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 80092b8:	4803      	ldr	r0, [pc, #12]	; (80092c8 <I2C2_DeInit+0x20>)
 80092ba:	f003 fb02 	bl	800c8c2 <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 80092be:	4802      	ldr	r0, [pc, #8]	; (80092c8 <I2C2_DeInit+0x20>)
 80092c0:	f000 f804 	bl	80092cc <I2C2_MspDeInit>
  }
}
 80092c4:	bf00      	nop
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	20000fa8 	.word	0x20000fa8

080092cc <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a1f      	ldr	r2, [pc, #124]	; (8009358 <I2C2_MspDeInit+0x8c>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d138      	bne.n	8009350 <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 80092de:	4b1f      	ldr	r3, [pc, #124]	; (800935c <I2C2_MspDeInit+0x90>)
 80092e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092e2:	4a1e      	ldr	r2, [pc, #120]	; (800935c <I2C2_MspDeInit+0x90>)
 80092e4:	f043 0302 	orr.w	r3, r3, #2
 80092e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80092ea:	4b1c      	ldr	r3, [pc, #112]	; (800935c <I2C2_MspDeInit+0x90>)
 80092ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092ee:	f003 0302 	and.w	r3, r3, #2
 80092f2:	60fb      	str	r3, [r7, #12]
 80092f4:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 80092f6:	4b19      	ldr	r3, [pc, #100]	; (800935c <I2C2_MspDeInit+0x90>)
 80092f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092fa:	4a18      	ldr	r2, [pc, #96]	; (800935c <I2C2_MspDeInit+0x90>)
 80092fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009302:	4b16      	ldr	r3, [pc, #88]	; (800935c <I2C2_MspDeInit+0x90>)
 8009304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800930a:	60bb      	str	r3, [r7, #8]
 800930c:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 800930e:	2110      	movs	r1, #16
 8009310:	4813      	ldr	r0, [pc, #76]	; (8009360 <I2C2_MspDeInit+0x94>)
 8009312:	f003 f925 	bl	800c560 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 8009316:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800931a:	4812      	ldr	r0, [pc, #72]	; (8009364 <I2C2_MspDeInit+0x98>)
 800931c:	f003 f920 	bl	800c560 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 8009320:	4b0e      	ldr	r3, [pc, #56]	; (800935c <I2C2_MspDeInit+0x90>)
 8009322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009324:	4a0d      	ldr	r2, [pc, #52]	; (800935c <I2C2_MspDeInit+0x90>)
 8009326:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800932a:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 800932c:	4b0b      	ldr	r3, [pc, #44]	; (800935c <I2C2_MspDeInit+0x90>)
 800932e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009330:	4a0a      	ldr	r2, [pc, #40]	; (800935c <I2C2_MspDeInit+0x90>)
 8009332:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009336:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 8009338:	4b08      	ldr	r3, [pc, #32]	; (800935c <I2C2_MspDeInit+0x90>)
 800933a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800933c:	4a07      	ldr	r2, [pc, #28]	; (800935c <I2C2_MspDeInit+0x90>)
 800933e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009342:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8009344:	2021      	movs	r0, #33	; 0x21
 8009346:	f002 fdcc 	bl	800bee2 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 800934a:	2022      	movs	r0, #34	; 0x22
 800934c:	f002 fdc9 	bl	800bee2 <HAL_NVIC_DisableIRQ>
  }
}
 8009350:	bf00      	nop
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	40005800 	.word	0x40005800
 800935c:	40021000 	.word	0x40021000
 8009360:	48001c00 	.word	0x48001c00
 8009364:	48000400 	.word	0x48000400

08009368 <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
static void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 8009368:	b590      	push	{r4, r7, lr}
 800936a:	b089      	sub	sp, #36	; 0x24
 800936c:	af04      	add	r7, sp, #16
 800936e:	4604      	mov	r4, r0
 8009370:	4608      	mov	r0, r1
 8009372:	4611      	mov	r1, r2
 8009374:	461a      	mov	r2, r3
 8009376:	4623      	mov	r3, r4
 8009378:	80fb      	strh	r3, [r7, #6]
 800937a:	4603      	mov	r3, r0
 800937c:	80bb      	strh	r3, [r7, #4]
 800937e:	460b      	mov	r3, r1
 8009380:	807b      	strh	r3, [r7, #2]
 8009382:	4613      	mov	r3, r2
 8009384:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 800938a:	b672      	cpsid	i
}
 800938c:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 800938e:	4b0d      	ldr	r3, [pc, #52]	; (80093c4 <I2C2_WriteData+0x5c>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	8878      	ldrh	r0, [r7, #2]
 8009394:	88ba      	ldrh	r2, [r7, #4]
 8009396:	88f9      	ldrh	r1, [r7, #6]
 8009398:	9302      	str	r3, [sp, #8]
 800939a:	2301      	movs	r3, #1
 800939c:	9301      	str	r3, [sp, #4]
 800939e:	1c7b      	adds	r3, r7, #1
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	4603      	mov	r3, r0
 80093a4:	4808      	ldr	r0, [pc, #32]	; (80093c8 <I2C2_WriteData+0x60>)
 80093a6:	f003 fca5 	bl	800ccf4 <HAL_I2C_Mem_Write>
 80093aa:	4603      	mov	r3, r0
 80093ac:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80093ae:	b662      	cpsie	i
}
 80093b0:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 80093b2:	7bfb      	ldrb	r3, [r7, #15]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d001      	beq.n	80093bc <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 80093b8:	f000 f890 	bl	80094dc <I2C2_Error>
  }
}
 80093bc:	bf00      	nop
 80093be:	3714      	adds	r7, #20
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd90      	pop	{r4, r7, pc}
 80093c4:	2000052c 	.word	0x2000052c
 80093c8:	20000fa8 	.word	0x20000fa8

080093cc <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
static uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b088      	sub	sp, #32
 80093d0:	af04      	add	r7, sp, #16
 80093d2:	4603      	mov	r3, r0
 80093d4:	80fb      	strh	r3, [r7, #6]
 80093d6:	460b      	mov	r3, r1
 80093d8:	80bb      	strh	r3, [r7, #4]
 80093da:	4613      	mov	r3, r2
 80093dc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80093de:	2300      	movs	r3, #0
 80093e0:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 80093e2:	2300      	movs	r3, #0
 80093e4:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 80093e6:	b672      	cpsid	i
}
 80093e8:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 80093ea:	4b10      	ldr	r3, [pc, #64]	; (800942c <I2C2_ReadData+0x60>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	8878      	ldrh	r0, [r7, #2]
 80093f0:	88ba      	ldrh	r2, [r7, #4]
 80093f2:	88f9      	ldrh	r1, [r7, #6]
 80093f4:	9302      	str	r3, [sp, #8]
 80093f6:	2301      	movs	r3, #1
 80093f8:	9301      	str	r3, [sp, #4]
 80093fa:	f107 030e 	add.w	r3, r7, #14
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	4603      	mov	r3, r0
 8009402:	480b      	ldr	r0, [pc, #44]	; (8009430 <I2C2_ReadData+0x64>)
 8009404:	f003 fd8a 	bl	800cf1c <HAL_I2C_Mem_Read>
 8009408:	4603      	mov	r3, r0
 800940a:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 800940c:	b662      	cpsie	i
}
 800940e:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8009410:	7bfb      	ldrb	r3, [r7, #15]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d004      	beq.n	8009420 <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8009416:	f000 f861 	bl	80094dc <I2C2_Error>
    HAL_Delay(200);
 800941a:	20c8      	movs	r0, #200	; 0xc8
 800941c:	f001 fc18 	bl	800ac50 <HAL_Delay>
  }

  return value;
 8009420:	7bbb      	ldrb	r3, [r7, #14]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3710      	adds	r7, #16
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop
 800942c:	2000052c 	.word	0x2000052c
 8009430:	20000fa8 	.word	0x20000fa8

08009434 <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	4603      	mov	r3, r0
 800943c:	6039      	str	r1, [r7, #0]
 800943e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009440:	2300      	movs	r3, #0
 8009442:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8009444:	2300      	movs	r3, #0
 8009446:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8009448:	b672      	cpsid	i
}
 800944a:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 800944c:	88f9      	ldrh	r1, [r7, #6]
 800944e:	2332      	movs	r3, #50	; 0x32
 8009450:	683a      	ldr	r2, [r7, #0]
 8009452:	480a      	ldr	r0, [pc, #40]	; (800947c <I2C2_isDeviceReady+0x48>)
 8009454:	f003 fe7c 	bl	800d150 <HAL_I2C_IsDeviceReady>
 8009458:	4603      	mov	r3, r0
 800945a:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 800945c:	b662      	cpsie	i
}
 800945e:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8009460:	7bfb      	ldrb	r3, [r7, #15]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d004      	beq.n	8009470 <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8009466:	f000 f839 	bl	80094dc <I2C2_Error>
    HAL_Delay(200);
 800946a:	20c8      	movs	r0, #200	; 0xc8
 800946c:	f001 fbf0 	bl	800ac50 <HAL_Delay>
  }

  return value;
 8009470:	7bbb      	ldrb	r3, [r7, #14]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	20000fa8 	.word	0x20000fa8

08009480 <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b08a      	sub	sp, #40	; 0x28
 8009484:	af04      	add	r7, sp, #16
 8009486:	607b      	str	r3, [r7, #4]
 8009488:	4603      	mov	r3, r0
 800948a:	81fb      	strh	r3, [r7, #14]
 800948c:	460b      	mov	r3, r1
 800948e:	81bb      	strh	r3, [r7, #12]
 8009490:	4613      	mov	r3, r2
 8009492:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8009494:	2300      	movs	r3, #0
 8009496:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 8009498:	b672      	cpsid	i
}
 800949a:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 800949c:	4b0d      	ldr	r3, [pc, #52]	; (80094d4 <I2C2_ReadBuffer+0x54>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	8978      	ldrh	r0, [r7, #10]
 80094a2:	89ba      	ldrh	r2, [r7, #12]
 80094a4:	89f9      	ldrh	r1, [r7, #14]
 80094a6:	9302      	str	r3, [sp, #8]
 80094a8:	8c3b      	ldrh	r3, [r7, #32]
 80094aa:	9301      	str	r3, [sp, #4]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	4603      	mov	r3, r0
 80094b2:	4809      	ldr	r0, [pc, #36]	; (80094d8 <I2C2_ReadBuffer+0x58>)
 80094b4:	f003 fd32 	bl	800cf1c <HAL_I2C_Mem_Read>
 80094b8:	4603      	mov	r3, r0
 80094ba:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 80094bc:	b662      	cpsie	i
}
 80094be:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d001      	beq.n	80094ca <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 80094c6:	f000 f809 	bl	80094dc <I2C2_Error>
  }

  return status;
 80094ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3718      	adds	r7, #24
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	2000052c 	.word	0x2000052c
 80094d8:	20000fa8 	.word	0x20000fa8

080094dc <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 80094e0:	f7ff fda1 	bl	8009026 <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 80094e4:	4803      	ldr	r0, [pc, #12]	; (80094f4 <I2C2_Error+0x18>)
 80094e6:	f003 f9ec 	bl	800c8c2 <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 80094ea:	f7ff fe31 	bl	8009150 <I2C2_Init>
}
 80094ee:	bf00      	nop
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	20000fa8 	.word	0x20000fa8

080094f8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]

  if (HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f003 ff2c 	bl	800d35e <HAL_I2C_GetState>
 8009506:	4603      	mov	r3, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d132      	bne.n	8009572 <I2Cx_Init+0x7a>
  {
    if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cTSHandler))
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a1b      	ldr	r2, [pc, #108]	; (800957c <I2Cx_Init+0x84>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d103      	bne.n	800951c <I2Cx_Init+0x24>
    {
      /* TS (Capacitive Touch Panel) and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_TS_I2Cx;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	4a1a      	ldr	r2, [pc, #104]	; (8009580 <I2Cx_Init+0x88>)
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	e012      	b.n	8009542 <I2Cx_Init+0x4a>

      /* Need to enable MFX, and in doing so, initialize I2C at the same time */
      /* MFX_IO_Init();*/

    }
    else if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cAudioHandler))
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a19      	ldr	r2, [pc, #100]	; (8009584 <I2Cx_Init+0x8c>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d103      	bne.n	800952c <I2Cx_Init+0x34>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a18      	ldr	r2, [pc, #96]	; (8009588 <I2Cx_Init+0x90>)
 8009528:	601a      	str	r2, [r3, #0]
 800952a:	e00a      	b.n	8009542 <I2Cx_Init+0x4a>
    }
    else if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cCameraHandler))
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a17      	ldr	r2, [pc, #92]	; (800958c <I2Cx_Init+0x94>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d103      	bne.n	800953c <I2Cx_Init+0x44>
    {
      i2c_handler->Instance = DISCOVERY_CAMERA_I2Cx;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a12      	ldr	r2, [pc, #72]	; (8009580 <I2Cx_Init+0x88>)
 8009538:	601a      	str	r2, [r3, #0]
 800953a:	e002      	b.n	8009542 <I2Cx_Init+0x4a>
    }
    else
    {
      /* External, EEPROM and Arduino connector I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	4a10      	ldr	r2, [pc, #64]	; (8009580 <I2Cx_Init+0x88>)
 8009540:	601a      	str	r2, [r3, #0]
    }

    i2c_handler->Init.Timing           = DISCOVERY_I2C_TIMING;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a12      	ldr	r2, [pc, #72]	; (8009590 <I2Cx_Init+0x98>)
 8009546:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0x70;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2270      	movs	r2, #112	; 0x70
 800954c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0xFF;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	22ff      	movs	r2, #255	; 0xff
 800955e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	621a      	str	r2, [r3, #32]


    /* Init the I2C */
    HAL_I2C_Init(i2c_handler);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f003 f919 	bl	800c7a4 <HAL_I2C_Init>

  }

}
 8009572:	bf00      	nop
 8009574:	3708      	adds	r7, #8
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	20000ffc 	.word	0x20000ffc
 8009580:	40005800 	.word	0x40005800
 8009584:	20001050 	.word	0x20001050
 8009588:	40005400 	.word	0x40005400
 800958c:	200010a4 	.word	0x200010a4
 8009590:	90112626 	.word	0x90112626

08009594 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b08a      	sub	sp, #40	; 0x28
 8009598:	af04      	add	r7, sp, #16
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	4608      	mov	r0, r1
 800959e:	4611      	mov	r1, r2
 80095a0:	461a      	mov	r2, r3
 80095a2:	4603      	mov	r3, r0
 80095a4:	72fb      	strb	r3, [r7, #11]
 80095a6:	460b      	mov	r3, r1
 80095a8:	813b      	strh	r3, [r7, #8]
 80095aa:	4613      	mov	r3, r2
 80095ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80095ae:	2300      	movs	r3, #0
 80095b0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80095b2:	7afb      	ldrb	r3, [r7, #11]
 80095b4:	b299      	uxth	r1, r3
 80095b6:	88f8      	ldrh	r0, [r7, #6]
 80095b8:	893a      	ldrh	r2, [r7, #8]
 80095ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80095be:	9302      	str	r3, [sp, #8]
 80095c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80095c2:	9301      	str	r3, [sp, #4]
 80095c4:	6a3b      	ldr	r3, [r7, #32]
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	4603      	mov	r3, r0
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f003 fca6 	bl	800cf1c <HAL_I2C_Mem_Read>
 80095d0:	4603      	mov	r3, r0
 80095d2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 80095d4:	7dfb      	ldrb	r3, [r7, #23]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d004      	beq.n	80095e4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80095da:	7afb      	ldrb	r3, [r7, #11]
 80095dc:	4619      	mov	r1, r3
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f000 f832 	bl	8009648 <I2Cx_Error>
  }
  return status;
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3718      	adds	r7, #24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b08a      	sub	sp, #40	; 0x28
 80095f2:	af04      	add	r7, sp, #16
 80095f4:	60f8      	str	r0, [r7, #12]
 80095f6:	4608      	mov	r0, r1
 80095f8:	4611      	mov	r1, r2
 80095fa:	461a      	mov	r2, r3
 80095fc:	4603      	mov	r3, r0
 80095fe:	72fb      	strb	r3, [r7, #11]
 8009600:	460b      	mov	r3, r1
 8009602:	813b      	strh	r3, [r7, #8]
 8009604:	4613      	mov	r3, r2
 8009606:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009608:	2300      	movs	r3, #0
 800960a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800960c:	7afb      	ldrb	r3, [r7, #11]
 800960e:	b299      	uxth	r1, r3
 8009610:	88f8      	ldrh	r0, [r7, #6]
 8009612:	893a      	ldrh	r2, [r7, #8]
 8009614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009618:	9302      	str	r3, [sp, #8]
 800961a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800961c:	9301      	str	r3, [sp, #4]
 800961e:	6a3b      	ldr	r3, [r7, #32]
 8009620:	9300      	str	r3, [sp, #0]
 8009622:	4603      	mov	r3, r0
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f003 fb65 	bl	800ccf4 <HAL_I2C_Mem_Write>
 800962a:	4603      	mov	r3, r0
 800962c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 800962e:	7dfb      	ldrb	r3, [r7, #23]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d004      	beq.n	800963e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initialize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8009634:	7afb      	ldrb	r3, [r7, #11]
 8009636:	4619      	mov	r1, r3
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f000 f805 	bl	8009648 <I2Cx_Error>
  }
  return status;
 800963e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009640:	4618      	mov	r0, r3
 8009642:	3718      	adds	r7, #24
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	460b      	mov	r3, r1
 8009652:	70fb      	strb	r3, [r7, #3]
  BSP_ErrorHandler();
 8009654:	f7ff fce7 	bl	8009026 <BSP_ErrorHandler>

  /* De-initialize the I2C communication bus */
  if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cTSHandler))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a08      	ldr	r2, [pc, #32]	; (800967c <I2Cx_Error+0x34>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d102      	bne.n	8009666 <I2Cx_Error+0x1e>
  {
    I2C2_DeInit();
 8009660:	f7ff fe22 	bl	80092a8 <I2C2_DeInit>
 8009664:	e002      	b.n	800966c <I2Cx_Error+0x24>
  }
  else
  {
    HAL_I2C_DeInit(i2c_handler);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f003 f92b 	bl	800c8c2 <HAL_I2C_DeInit>
  }

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7ff ff43 	bl	80094f8 <I2Cx_Init>
}
 8009672:	bf00      	nop
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	20000ffc 	.word	0x20000ffc

08009680 <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 8009684:	f7ff fd64 	bl	8009150 <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 8009688:	2104      	movs	r1, #4
 800968a:	2084      	movs	r0, #132	; 0x84
 800968c:	f7ff fed2 	bl	8009434 <I2C2_isDeviceReady>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 8009696:	f7ff fcc6 	bl	8009026 <BSP_ErrorHandler>
  }
}
 800969a:	bf00      	nop
 800969c:	bd80      	pop	{r7, pc}
	...

080096a0 <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b088      	sub	sp, #32
 80096a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 80096a6:	4b19      	ldr	r3, [pc, #100]	; (800970c <MFX_IO_DeInit+0x6c>)
 80096a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096aa:	4a18      	ldr	r2, [pc, #96]	; (800970c <MFX_IO_DeInit+0x6c>)
 80096ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80096b2:	4b16      	ldr	r3, [pc, #88]	; (800970c <MFX_IO_DeInit+0x6c>)
 80096b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096ba:	60bb      	str	r3, [r7, #8]
 80096bc:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 80096be:	2340      	movs	r3, #64	; 0x40
 80096c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80096c2:	2301      	movs	r3, #1
 80096c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096c6:	2300      	movs	r3, #0
 80096c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 80096ca:	2302      	movs	r3, #2
 80096cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 80096ce:	f107 030c 	add.w	r3, r7, #12
 80096d2:	4619      	mov	r1, r3
 80096d4:	480e      	ldr	r0, [pc, #56]	; (8009710 <MFX_IO_DeInit+0x70>)
 80096d6:	f002 fdb1 	bl	800c23c <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 80096da:	2017      	movs	r0, #23
 80096dc:	f002 fc01 	bl	800bee2 <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 80096e0:	4b0a      	ldr	r3, [pc, #40]	; (800970c <MFX_IO_DeInit+0x6c>)
 80096e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096e4:	4a09      	ldr	r2, [pc, #36]	; (800970c <MFX_IO_DeInit+0x6c>)
 80096e6:	f043 0304 	orr.w	r3, r3, #4
 80096ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80096ec:	4b07      	ldr	r3, [pc, #28]	; (800970c <MFX_IO_DeInit+0x6c>)
 80096ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096f0:	f003 0304 	and.w	r3, r3, #4
 80096f4:	607b      	str	r3, [r7, #4]
 80096f6:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 80096f8:	2120      	movs	r1, #32
 80096fa:	4806      	ldr	r0, [pc, #24]	; (8009714 <MFX_IO_DeInit+0x74>)
 80096fc:	f002 ff30 	bl	800c560 <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 8009700:	f7ff fdd2 	bl	80092a8 <I2C2_DeInit>
}
 8009704:	bf00      	nop
 8009706:	3720      	adds	r7, #32
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	40021000 	.word	0x40021000
 8009710:	48001c00 	.word	0x48001c00
 8009714:	48000800 	.word	0x48000800

08009718 <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 800971e:	4b13      	ldr	r3, [pc, #76]	; (800976c <MFX_IO_ITConfig+0x54>)
 8009720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009722:	4a12      	ldr	r2, [pc, #72]	; (800976c <MFX_IO_ITConfig+0x54>)
 8009724:	f043 0304 	orr.w	r3, r3, #4
 8009728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800972a:	4b10      	ldr	r3, [pc, #64]	; (800976c <MFX_IO_ITConfig+0x54>)
 800972c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800972e:	f003 0304 	and.w	r3, r3, #4
 8009732:	603b      	str	r3, [r7, #0]
 8009734:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 8009736:	2320      	movs	r3, #32
 8009738:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800973a:	2300      	movs	r3, #0
 800973c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800973e:	2300      	movs	r3, #0
 8009740:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 8009742:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8009746:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 8009748:	1d3b      	adds	r3, r7, #4
 800974a:	4619      	mov	r1, r3
 800974c:	4808      	ldr	r0, [pc, #32]	; (8009770 <MFX_IO_ITConfig+0x58>)
 800974e:	f002 fd75 	bl	800c23c <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 8009752:	220f      	movs	r2, #15
 8009754:	210f      	movs	r1, #15
 8009756:	2017      	movs	r0, #23
 8009758:	f002 fb99 	bl	800be8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 800975c:	2017      	movs	r0, #23
 800975e:	f002 fbb2 	bl	800bec6 <HAL_NVIC_EnableIRQ>
}
 8009762:	bf00      	nop
 8009764:	3718      	adds	r7, #24
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	40021000 	.word	0x40021000
 8009770:	48000800 	.word	0x48000800

08009774 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 800977a:	4b0e      	ldr	r3, [pc, #56]	; (80097b4 <MFX_IO_EnableWakeupPin+0x40>)
 800977c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800977e:	4a0d      	ldr	r2, [pc, #52]	; (80097b4 <MFX_IO_EnableWakeupPin+0x40>)
 8009780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009786:	4b0b      	ldr	r3, [pc, #44]	; (80097b4 <MFX_IO_EnableWakeupPin+0x40>)
 8009788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800978a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800978e:	603b      	str	r3, [r7, #0]
 8009790:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8009792:	2340      	movs	r3, #64	; 0x40
 8009794:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8009796:	2301      	movs	r3, #1
 8009798:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800979a:	2302      	movs	r3, #2
 800979c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800979e:	2300      	movs	r3, #0
 80097a0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 80097a2:	1d3b      	adds	r3, r7, #4
 80097a4:	4619      	mov	r1, r3
 80097a6:	4804      	ldr	r0, [pc, #16]	; (80097b8 <MFX_IO_EnableWakeupPin+0x44>)
 80097a8:	f002 fd48 	bl	800c23c <HAL_GPIO_Init>
}
 80097ac:	bf00      	nop
 80097ae:	3718      	adds	r7, #24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}
 80097b4:	40021000 	.word	0x40021000
 80097b8:	48001c00 	.word	0x48001c00

080097bc <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 80097c0:	2201      	movs	r2, #1
 80097c2:	2140      	movs	r1, #64	; 0x40
 80097c4:	4806      	ldr	r0, [pc, #24]	; (80097e0 <MFX_IO_Wakeup+0x24>)
 80097c6:	f002 ffbd 	bl	800c744 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 80097ca:	2001      	movs	r0, #1
 80097cc:	f001 fa40 	bl	800ac50 <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 80097d0:	2200      	movs	r2, #0
 80097d2:	2140      	movs	r1, #64	; 0x40
 80097d4:	4802      	ldr	r0, [pc, #8]	; (80097e0 <MFX_IO_Wakeup+0x24>)
 80097d6:	f002 ffb5 	bl	800c744 <HAL_GPIO_WritePin>
}
 80097da:	bf00      	nop
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	48001c00 	.word	0x48001c00

080097e4 <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	4603      	mov	r3, r0
 80097ec:	80fb      	strh	r3, [r7, #6]
 80097ee:	460b      	mov	r3, r1
 80097f0:	717b      	strb	r3, [r7, #5]
 80097f2:	4613      	mov	r3, r2
 80097f4:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 80097f6:	797b      	ldrb	r3, [r7, #5]
 80097f8:	b299      	uxth	r1, r3
 80097fa:	793b      	ldrb	r3, [r7, #4]
 80097fc:	88f8      	ldrh	r0, [r7, #6]
 80097fe:	2201      	movs	r2, #1
 8009800:	f7ff fdb2 	bl	8009368 <I2C2_WriteData>
}
 8009804:	bf00      	nop
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}

0800980c <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	4603      	mov	r3, r0
 8009814:	460a      	mov	r2, r1
 8009816:	80fb      	strh	r3, [r7, #6]
 8009818:	4613      	mov	r3, r2
 800981a:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 800981c:	797b      	ldrb	r3, [r7, #5]
 800981e:	b299      	uxth	r1, r3
 8009820:	88fb      	ldrh	r3, [r7, #6]
 8009822:	2201      	movs	r2, #1
 8009824:	4618      	mov	r0, r3
 8009826:	f7ff fdd1 	bl	80093cc <I2C2_ReadData>
 800982a:	4603      	mov	r3, r0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af02      	add	r7, sp, #8
 800983a:	60ba      	str	r2, [r7, #8]
 800983c:	461a      	mov	r2, r3
 800983e:	4603      	mov	r3, r0
 8009840:	81fb      	strh	r3, [r7, #14]
 8009842:	460b      	mov	r3, r1
 8009844:	737b      	strb	r3, [r7, #13]
 8009846:	4613      	mov	r3, r2
 8009848:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800984a:	7b7b      	ldrb	r3, [r7, #13]
 800984c:	b299      	uxth	r1, r3
 800984e:	89f8      	ldrh	r0, [r7, #14]
 8009850:	88fb      	ldrh	r3, [r7, #6]
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	2201      	movs	r2, #1
 8009858:	f7ff fe12 	bl	8009480 <I2C2_ReadBuffer>
 800985c:	4603      	mov	r3, r0
 800985e:	b29b      	uxth	r3, r3
}
 8009860:	4618      	mov	r0, r3
 8009862:	3710      	adds	r7, #16
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f001 f9ed 	bl	800ac50 <HAL_Delay>
}
 8009876:	bf00      	nop
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
	...

08009880 <FMC_BANK1_MspInit>:
  * @brief  Initializes FMC_BANK1_LCD_IO MSP.
  * @param  None
  * @retval None
  */
void FMC_BANK1_MspInit(void)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b08c      	sub	sp, #48	; 0x30
 8009884:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_Init_Structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8009886:	4b38      	ldr	r3, [pc, #224]	; (8009968 <FMC_BANK1_MspInit+0xe8>)
 8009888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800988a:	4a37      	ldr	r2, [pc, #220]	; (8009968 <FMC_BANK1_MspInit+0xe8>)
 800988c:	f043 0301 	orr.w	r3, r3, #1
 8009890:	6513      	str	r3, [r2, #80]	; 0x50
 8009892:	4b35      	ldr	r3, [pc, #212]	; (8009968 <FMC_BANK1_MspInit+0xe8>)
 8009894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	61bb      	str	r3, [r7, #24]
 800989c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800989e:	4b32      	ldr	r3, [pc, #200]	; (8009968 <FMC_BANK1_MspInit+0xe8>)
 80098a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098a2:	4a31      	ldr	r2, [pc, #196]	; (8009968 <FMC_BANK1_MspInit+0xe8>)
 80098a4:	f043 0308 	orr.w	r3, r3, #8
 80098a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80098aa:	4b2f      	ldr	r3, [pc, #188]	; (8009968 <FMC_BANK1_MspInit+0xe8>)
 80098ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ae:	f003 0308 	and.w	r3, r3, #8
 80098b2:	617b      	str	r3, [r7, #20]
 80098b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80098b6:	4b2c      	ldr	r3, [pc, #176]	; (8009968 <FMC_BANK1_MspInit+0xe8>)
 80098b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ba:	4a2b      	ldr	r2, [pc, #172]	; (8009968 <FMC_BANK1_MspInit+0xe8>)
 80098bc:	f043 0310 	orr.w	r3, r3, #16
 80098c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80098c2:	4b29      	ldr	r3, [pc, #164]	; (8009968 <FMC_BANK1_MspInit+0xe8>)
 80098c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098c6:	f003 0310 	and.w	r3, r3, #16
 80098ca:	613b      	str	r3, [r7, #16]
 80098cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80098ce:	4b26      	ldr	r3, [pc, #152]	; (8009968 <FMC_BANK1_MspInit+0xe8>)
 80098d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098d2:	4a25      	ldr	r2, [pc, #148]	; (8009968 <FMC_BANK1_MspInit+0xe8>)
 80098d4:	f043 0320 	orr.w	r3, r3, #32
 80098d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80098da:	4b23      	ldr	r3, [pc, #140]	; (8009968 <FMC_BANK1_MspInit+0xe8>)
 80098dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098de:	f003 0320 	and.w	r3, r3, #32
 80098e2:	60fb      	str	r3, [r7, #12]
 80098e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80098e6:	4b20      	ldr	r3, [pc, #128]	; (8009968 <FMC_BANK1_MspInit+0xe8>)
 80098e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ea:	4a1f      	ldr	r2, [pc, #124]	; (8009968 <FMC_BANK1_MspInit+0xe8>)
 80098ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80098f2:	4b1d      	ldr	r3, [pc, #116]	; (8009968 <FMC_BANK1_MspInit+0xe8>)
 80098f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098fa:	60bb      	str	r3, [r7, #8]
 80098fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80098fe:	4b1a      	ldr	r3, [pc, #104]	; (8009968 <FMC_BANK1_MspInit+0xe8>)
 8009900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009902:	4a19      	ldr	r2, [pc, #100]	; (8009968 <FMC_BANK1_MspInit+0xe8>)
 8009904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009908:	6593      	str	r3, [r2, #88]	; 0x58
 800990a:	4b17      	ldr	r3, [pc, #92]	; (8009968 <FMC_BANK1_MspInit+0xe8>)
 800990c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800990e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009912:	607b      	str	r3, [r7, #4]
 8009914:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8009916:	f005 fb5f 	bl	800efd8 <HAL_PWREx_EnableVddIO2>

  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 800991a:	2302      	movs	r3, #2
 800991c:	623b      	str	r3, [r7, #32]
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 800991e:	2301      	movs	r3, #1
 8009920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8009922:	2303      	movs	r3, #3
 8009924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF12_FMC;
 8009926:	230c      	movs	r3, #12
 8009928:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* GPIOD configuration */ /* GPIO_PIN_7 is  FMC_NE1 */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | \
 800992a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800992e:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7;

  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8009930:	f107 031c 	add.w	r3, r7, #28
 8009934:	4619      	mov	r1, r3
 8009936:	480d      	ldr	r0, [pc, #52]	; (800996c <FMC_BANK1_MspInit+0xec>)
 8009938:	f002 fc80 	bl	800c23c <HAL_GPIO_Init>




  /* GPIOE configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_7     | \
 800993c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8009940:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | \
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 8009942:	f107 031c 	add.w	r3, r7, #28
 8009946:	4619      	mov	r1, r3
 8009948:	4809      	ldr	r0, [pc, #36]	; (8009970 <FMC_BANK1_MspInit+0xf0>)
 800994a:	f002 fc77 	bl	800c23c <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_13 ;
 800994e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009952:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8009954:	f107 031c 	add.w	r3, r7, #28
 8009958:	4619      	mov	r1, r3
 800995a:	4804      	ldr	r0, [pc, #16]	; (800996c <FMC_BANK1_MspInit+0xec>)
 800995c:	f002 fc6e 	bl	800c23c <HAL_GPIO_Init>

}
 8009960:	bf00      	nop
 8009962:	3730      	adds	r7, #48	; 0x30
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	40021000 	.word	0x40021000
 800996c:	48000c00 	.word	0x48000c00
 8009970:	48001000 	.word	0x48001000

08009974 <FMC_BANK1_Init>:
  * @brief  Initializes LCD IO.
  * @param  None
  * @retval None
  */
void FMC_BANK1_Init(void)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b0a4      	sub	sp, #144	; 0x90
 8009978:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef sram_timing;
  FMC_NORSRAM_TimingTypeDef sram_timing_write;

  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FMC_NORSRAM_DEVICE;
 800997a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800997e:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Extended  = FMC_NORSRAM_EXTENDED_DEVICE;
 8009980:	4b26      	ldr	r3, [pc, #152]	; (8009a1c <FMC_BANK1_Init+0xa8>)
 8009982:	647b      	str	r3, [r7, #68]	; 0x44


  /* Timing for READING */

  sram_timing.AddressSetupTime       = 1;
 8009984:	2301      	movs	r3, #1
 8009986:	623b      	str	r3, [r7, #32]
  sram_timing.AddressHoldTime        = 1;
 8009988:	2301      	movs	r3, #1
 800998a:	627b      	str	r3, [r7, #36]	; 0x24
  sram_timing.DataSetupTime          = 1;
 800998c:	2301      	movs	r3, #1
 800998e:	62bb      	str	r3, [r7, #40]	; 0x28
  sram_timing.BusTurnAroundDuration  = 0;
 8009990:	2300      	movs	r3, #0
 8009992:	633b      	str	r3, [r7, #48]	; 0x30
  sram_timing.CLKDivision            = 2;
 8009994:	2302      	movs	r3, #2
 8009996:	637b      	str	r3, [r7, #52]	; 0x34
  sram_timing.DataLatency            = 2;
 8009998:	2302      	movs	r3, #2
 800999a:	63bb      	str	r3, [r7, #56]	; 0x38
  sram_timing.AccessMode             = FMC_ACCESS_MODE_A;
 800999c:	2300      	movs	r3, #0
 800999e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Timing for WRITING */
  sram_timing_write.AddressSetupTime      = 5;
 80099a0:	2305      	movs	r3, #5
 80099a2:	603b      	str	r3, [r7, #0]
  sram_timing_write.AddressHoldTime       = 1;
 80099a4:	2301      	movs	r3, #1
 80099a6:	607b      	str	r3, [r7, #4]
  sram_timing_write.DataSetupTime         = 3;
 80099a8:	2303      	movs	r3, #3
 80099aa:	60bb      	str	r3, [r7, #8]
  sram_timing_write.BusTurnAroundDuration = 2;
 80099ac:	2302      	movs	r3, #2
 80099ae:	613b      	str	r3, [r7, #16]
  sram_timing_write.CLKDivision           = 2;
 80099b0:	2302      	movs	r3, #2
 80099b2:	617b      	str	r3, [r7, #20]
  sram_timing_write.DataLatency           = 2;
 80099b4:	2302      	movs	r3, #2
 80099b6:	61bb      	str	r3, [r7, #24]
  sram_timing_write.AccessMode            = FMC_ACCESS_MODE_A;
 80099b8:	2300      	movs	r3, #0
 80099ba:	61fb      	str	r3, [r7, #28]


  hsram.Init.NSBank             = FMC_NORSRAM_BANK1;
 80099bc:	2300      	movs	r3, #0
 80099be:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.DataAddressMux     = FMC_DATA_ADDRESS_MUX_DISABLE;
 80099c0:	2300      	movs	r3, #0
 80099c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.MemoryType         = FMC_MEMORY_TYPE_SRAM;
 80099c4:	2300      	movs	r3, #0
 80099c6:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.MemoryDataWidth    = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80099c8:	2310      	movs	r3, #16
 80099ca:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.BurstAccessMode    = FMC_BURST_ACCESS_MODE_DISABLE;
 80099cc:	2300      	movs	r3, #0
 80099ce:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80099d0:	2300      	movs	r3, #0
 80099d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  hsram.Init.WaitSignalActive   = FMC_WAIT_TIMING_BEFORE_WS;
 80099d4:	2300      	movs	r3, #0
 80099d6:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.WriteOperation     = FMC_WRITE_OPERATION_ENABLE;
 80099d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099dc:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.WaitSignal         = FMC_WAIT_SIGNAL_DISABLE;
 80099de:	2300      	movs	r3, #0
 80099e0:	66bb      	str	r3, [r7, #104]	; 0x68
  hsram.Init.ExtendedMode       = FMC_EXTENDED_MODE_DISABLE;
 80099e2:	2300      	movs	r3, #0
 80099e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  hsram.Init.AsynchronousWait   = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80099e6:	2300      	movs	r3, #0
 80099e8:	673b      	str	r3, [r7, #112]	; 0x70
  hsram.Init.WriteBurst         = FMC_WRITE_BURST_DISABLE;
 80099ea:	2300      	movs	r3, #0
 80099ec:	677b      	str	r3, [r7, #116]	; 0x74
  hsram.Init.PageSize           = FMC_PAGE_SIZE_NONE;
 80099ee:	2300      	movs	r3, #0
 80099f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  hsram.Init.WriteFifo          = FMC_WRITE_FIFO_DISABLE;
 80099f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80099f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  hsram.Init.ContinuousClock    = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80099fa:	2300      	movs	r3, #0
 80099fc:	67bb      	str	r3, [r7, #120]	; 0x78
  /* Initialize the SRAM controller */
  FMC_BANK1_MspInit();
 80099fe:	f7ff ff3f 	bl	8009880 <FMC_BANK1_MspInit>
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing_write);
 8009a02:	463a      	mov	r2, r7
 8009a04:	f107 0120 	add.w	r1, r7, #32
 8009a08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f008 fe10 	bl	8012632 <HAL_SRAM_Init>

}
 8009a12:	bf00      	nop
 8009a14:	3790      	adds	r7, #144	; 0x90
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	a0000104 	.word	0xa0000104

08009a20 <FMC_BANK1_WriteData>:
  * @brief  Writes register value.
  * @param  Data: Data to be written
  * @retval None
  */
static void FMC_BANK1_WriteData(uint16_t Data)
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	4603      	mov	r3, r0
 8009a28:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  LCD_ADDR->REG = Data;
 8009a2a:	4a04      	ldr	r2, [pc, #16]	; (8009a3c <FMC_BANK1_WriteData+0x1c>)
 8009a2c:	88fb      	ldrh	r3, [r7, #6]
 8009a2e:	8013      	strh	r3, [r2, #0]
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	60080000 	.word	0x60080000

08009a40 <FMC_BANK1_WriteReg>:
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  * @retval None
  */
static void FMC_BANK1_WriteReg(uint8_t Reg)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	4603      	mov	r3, r0
 8009a48:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK1_ADDR->REG = Reg;
 8009a4a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8009a4e:	79fa      	ldrb	r2, [r7, #7]
 8009a50:	b292      	uxth	r2, r2
 8009a52:	801a      	strh	r2, [r3, #0]
}
 8009a54:	bf00      	nop
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <FMC_BANK1_ReadData>:
  * @brief  Reads register value.
  * @param  None
  * @retval Read value
  */
static uint16_t FMC_BANK1_ReadData(void)
{
 8009a60:	b480      	push	{r7}
 8009a62:	af00      	add	r7, sp, #0
  return LCD_ADDR->REG;
 8009a64:	4b03      	ldr	r3, [pc, #12]	; (8009a74 <FMC_BANK1_ReadData+0x14>)
 8009a66:	881b      	ldrh	r3, [r3, #0]
 8009a68:	b29b      	uxth	r3, r3
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr
 8009a74:	60080000 	.word	0x60080000

08009a78 <LCD_IO_Init>:
  * @brief  Initializes LCD low level.
  * @param  None
  * @retval None
  */
void LCD_IO_Init(void)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	af00      	add	r7, sp, #0
  FMC_BANK1_Init();
 8009a7c:	f7ff ff7a 	bl	8009974 <FMC_BANK1_Init>
}
 8009a80:	bf00      	nop
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <LCD_IO_WriteData>:
  * @brief  Writes data on LCD data register.
  * @param  Data: Data to be written
  * @retval None
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1_WriteData(RegValue);
 8009a8e:	88fb      	ldrh	r3, [r7, #6]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f7ff ffc5 	bl	8009a20 <FMC_BANK1_WriteData>
}
 8009a96:	bf00      	nop
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <LCD_IO_WriteReg>:
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b082      	sub	sp, #8
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK1_WriteReg(Reg);
 8009aa8:	79fb      	ldrb	r3, [r7, #7]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7ff ffc8 	bl	8009a40 <FMC_BANK1_WriteReg>
}
 8009ab0:	bf00      	nop
 8009ab2:	3708      	adds	r7, #8
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <LCD_IO_ReadData>:
  * @brief  Reads data from LCD data register.
  * @param  None
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	af00      	add	r7, sp, #0
  return FMC_BANK1_ReadData();
 8009abc:	f7ff ffd0 	bl	8009a60 <FMC_BANK1_ReadData>
 8009ac0:	4603      	mov	r3, r0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <LCD_IO_Delay>:
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void LCD_IO_Delay(uint32_t Delay)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b082      	sub	sp, #8
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f001 f8be 	bl	800ac50 <HAL_Delay>
}
 8009ad4:	bf00      	nop
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cTSHandler);
 8009ae0:	4812      	ldr	r0, [pc, #72]	; (8009b2c <TS_IO_Init+0x50>)
 8009ae2:	f7ff fd09 	bl	80094f8 <I2Cx_Init>

  if (ts_io_init == 0)
 8009ae6:	4b12      	ldr	r3, [pc, #72]	; (8009b30 <TS_IO_Init+0x54>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d11b      	bne.n	8009b26 <TS_IO_Init+0x4a>
  {
    if (BSP_LCD_Init() == LCD_ERROR)
 8009aee:	f000 f8eb 	bl	8009cc8 <BSP_LCD_Init>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d101      	bne.n	8009afc <TS_IO_Init+0x20>
    {
      BSP_ErrorHandler();
 8009af8:	f7ff fa95 	bl	8009026 <BSP_ErrorHandler>
    }

    BSP_IO_ConfigPin(TS_RST_PIN, IO_MODE_OUTPUT);
 8009afc:	2101      	movs	r1, #1
 8009afe:	2002      	movs	r0, #2
 8009b00:	f000 f8aa 	bl	8009c58 <BSP_IO_ConfigPin>

    BSP_IO_WritePin(TS_RST_PIN, GPIO_PIN_RESET);
 8009b04:	2100      	movs	r1, #0
 8009b06:	2002      	movs	r0, #2
 8009b08:	f000 f8c2 	bl	8009c90 <BSP_IO_WritePin>
    HAL_Delay(10);
 8009b0c:	200a      	movs	r0, #10
 8009b0e:	f001 f89f 	bl	800ac50 <HAL_Delay>
    BSP_IO_WritePin(TS_RST_PIN, GPIO_PIN_SET);
 8009b12:	2101      	movs	r1, #1
 8009b14:	2002      	movs	r0, #2
 8009b16:	f000 f8bb 	bl	8009c90 <BSP_IO_WritePin>
    HAL_Delay(200);
 8009b1a:	20c8      	movs	r0, #200	; 0xc8
 8009b1c:	f001 f898 	bl	800ac50 <HAL_Delay>

    ts_io_init = 1;
 8009b20:	4b03      	ldr	r3, [pc, #12]	; (8009b30 <TS_IO_Init+0x54>)
 8009b22:	2201      	movs	r2, #1
 8009b24:	601a      	str	r2, [r3, #0]
  }
}
 8009b26:	bf00      	nop
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20000ffc 	.word	0x20000ffc
 8009b30:	20000fa4 	.word	0x20000fa4

08009b34 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af02      	add	r7, sp, #8
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	71fb      	strb	r3, [r7, #7]
 8009b3e:	460b      	mov	r3, r1
 8009b40:	71bb      	strb	r3, [r7, #6]
 8009b42:	4613      	mov	r3, r2
 8009b44:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cTSHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&Value, 1);
 8009b46:	79bb      	ldrb	r3, [r7, #6]
 8009b48:	b29a      	uxth	r2, r3
 8009b4a:	79f9      	ldrb	r1, [r7, #7]
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	9301      	str	r3, [sp, #4]
 8009b50:	1d7b      	adds	r3, r7, #5
 8009b52:	9300      	str	r3, [sp, #0]
 8009b54:	2301      	movs	r3, #1
 8009b56:	4803      	ldr	r0, [pc, #12]	; (8009b64 <TS_IO_Write+0x30>)
 8009b58:	f7ff fd49 	bl	80095ee <I2Cx_WriteMultiple>
}
 8009b5c:	bf00      	nop
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	20000ffc 	.word	0x20000ffc

08009b68 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	4603      	mov	r3, r0
 8009b70:	460a      	mov	r2, r1
 8009b72:	71fb      	strb	r3, [r7, #7]
 8009b74:	4613      	mov	r3, r2
 8009b76:	71bb      	strb	r3, [r7, #6]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 8009b78:	79fb      	ldrb	r3, [r7, #7]
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	79ba      	ldrb	r2, [r7, #6]
 8009b7e:	b291      	uxth	r1, r2
 8009b80:	2201      	movs	r2, #1
 8009b82:	4618      	mov	r0, r3
 8009b84:	f7ff fc22 	bl	80093cc <I2C2_ReadData>
 8009b88:	4603      	mov	r3, r0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
	...

08009b94 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af02      	add	r7, sp, #8
 8009b9a:	603a      	str	r2, [r7, #0]
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	71fb      	strb	r3, [r7, #7]
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	71bb      	strb	r3, [r7, #6]
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadMultiple(&hI2cTSHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8009baa:	79bb      	ldrb	r3, [r7, #6]
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	79f9      	ldrb	r1, [r7, #7]
 8009bb0:	88bb      	ldrh	r3, [r7, #4]
 8009bb2:	9301      	str	r3, [sp, #4]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	2301      	movs	r3, #1
 8009bba:	4804      	ldr	r0, [pc, #16]	; (8009bcc <TS_IO_ReadMultiple+0x38>)
 8009bbc:	f7ff fcea 	bl	8009594 <I2Cx_ReadMultiple>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	b29b      	uxth	r3, r3
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	20000ffc 	.word	0x20000ffc

08009bd0 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 8009bde:	4b1a      	ldr	r3, [pc, #104]	; (8009c48 <BSP_IO_Init+0x78>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d128      	bne.n	8009c38 <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 8009be6:	4b19      	ldr	r3, [pc, #100]	; (8009c4c <BSP_IO_Init+0x7c>)
 8009be8:	695b      	ldr	r3, [r3, #20]
 8009bea:	2084      	movs	r0, #132	; 0x84
 8009bec:	4798      	blx	r3

    HAL_Delay(10);
 8009bee:	200a      	movs	r0, #10
 8009bf0:	f001 f82e 	bl	800ac50 <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 8009bf4:	4b16      	ldr	r3, [pc, #88]	; (8009c50 <BSP_IO_Init+0x80>)
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	2084      	movs	r0, #132	; 0x84
 8009bfa:	4798      	blx	r3
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8009c00:	79bb      	ldrb	r3, [r7, #6]
 8009c02:	2b7b      	cmp	r3, #123	; 0x7b
 8009c04:	d002      	beq.n	8009c0c <BSP_IO_Init+0x3c>
 8009c06:	79bb      	ldrb	r3, [r7, #6]
 8009c08:	2b79      	cmp	r3, #121	; 0x79
 8009c0a:	d117      	bne.n	8009c3c <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 8009c0c:	4b0e      	ldr	r3, [pc, #56]	; (8009c48 <BSP_IO_Init+0x78>)
 8009c0e:	4a10      	ldr	r2, [pc, #64]	; (8009c50 <BSP_IO_Init+0x80>)
 8009c10:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 8009c12:	4b0d      	ldr	r3, [pc, #52]	; (8009c48 <BSP_IO_Init+0x78>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00f      	beq.n	8009c3c <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 8009c1c:	4b0a      	ldr	r3, [pc, #40]	; (8009c48 <BSP_IO_Init+0x78>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2084      	movs	r0, #132	; 0x84
 8009c24:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 8009c26:	4b08      	ldr	r3, [pc, #32]	; (8009c48 <BSP_IO_Init+0x78>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	4909      	ldr	r1, [pc, #36]	; (8009c54 <BSP_IO_Init+0x84>)
 8009c2e:	2084      	movs	r0, #132	; 0x84
 8009c30:	4798      	blx	r3

        ret = IO_OK;
 8009c32:	2300      	movs	r3, #0
 8009c34:	71fb      	strb	r3, [r7, #7]
 8009c36:	e001      	b.n	8009c3c <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 8009c38:	2303      	movs	r3, #3
 8009c3a:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 8009c3c:	79fb      	ldrb	r3, [r7, #7]
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3708      	adds	r7, #8
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	200010f8 	.word	0x200010f8
 8009c4c:	200001e8 	.word	0x200001e8
 8009c50:	200001bc 	.word	0x200001bc
 8009c54:	000301ff 	.word	0x000301ff

08009c58 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	460b      	mov	r3, r1
 8009c62:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8009c64:	2300      	movs	r3, #0
 8009c66:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	4b07      	ldr	r3, [pc, #28]	; (8009c88 <BSP_IO_ConfigPin+0x30>)
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 8009c70:	4b06      	ldr	r3, [pc, #24]	; (8009c8c <BSP_IO_ConfigPin+0x34>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	78fa      	ldrb	r2, [r7, #3]
 8009c78:	68f9      	ldr	r1, [r7, #12]
 8009c7a:	2084      	movs	r0, #132	; 0x84
 8009c7c:	4798      	blx	r3

  return IO_OK;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	000301ff 	.word	0x000301ff
 8009c8c:	200010f8 	.word	0x200010f8

08009c90 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	4b07      	ldr	r3, [pc, #28]	; (8009cc0 <BSP_IO_WritePin+0x30>)
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 8009ca8:	4b06      	ldr	r3, [pc, #24]	; (8009cc4 <BSP_IO_WritePin+0x34>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	695b      	ldr	r3, [r3, #20]
 8009cae:	78fa      	ldrb	r2, [r7, #3]
 8009cb0:	68f9      	ldr	r1, [r7, #12]
 8009cb2:	2084      	movs	r0, #132	; 0x84
 8009cb4:	4798      	blx	r3

}
 8009cb6:	bf00      	nop
 8009cb8:	3710      	adds	r7, #16
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	000301ff 	.word	0x000301ff
 8009cc4:	200010f8 	.word	0x200010f8

08009cc8 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8009ccc:	2001      	movs	r0, #1
 8009cce:	f000 f803 	bl	8009cd8 <BSP_LCD_InitEx>
 8009cd2:	4603      	mov	r3, r0
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <BSP_LCD_InitEx>:
  * @brief  Initializes the LCD with a given orientation.
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t i = 0;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	60bb      	str	r3, [r7, #8]

  if (bsp_lcd_initialized == 1)
 8009ce8:	4b33      	ldr	r3, [pc, #204]	; (8009db8 <BSP_LCD_InitEx+0xe0>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d102      	bne.n	8009cf6 <BSP_LCD_InitEx+0x1e>
  {
    ret = LCD_OK;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	73fb      	strb	r3, [r7, #15]
 8009cf4:	e05b      	b.n	8009dae <BSP_LCD_InitEx+0xd6>
  }
  else
  {
    /* Initialize the IO functionalities */
    if (BSP_IO_Init() == IO_ERROR)
 8009cf6:	f7ff ff6b 	bl	8009bd0 <BSP_IO_Init>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d101      	bne.n	8009d04 <BSP_LCD_InitEx+0x2c>
    {
      BSP_ErrorHandler();
 8009d00:	f7ff f991 	bl	8009026 <BSP_ErrorHandler>
    }

    /* Initialize LCD special pins GPIOs */
    BSP_LCD_MspInit();
 8009d04:	f000 fcd0 	bl	800a6a8 <BSP_LCD_MspInit>

    /* LCD Power On */
    HAL_GPIO_WritePin(LCD_PWR_CTRL_GPIO_PORT, LCD_PWR_CTRL_PIN, GPIO_PIN_RESET);
 8009d08:	2200      	movs	r2, #0
 8009d0a:	2101      	movs	r1, #1
 8009d0c:	482b      	ldr	r0, [pc, #172]	; (8009dbc <BSP_LCD_InitEx+0xe4>)
 8009d0e:	f002 fd19 	bl	800c744 <HAL_GPIO_WritePin>

    /* Default value for draw propriety */
    DrawProp.BackColor = 0xFFFF;
 8009d12:	4b2b      	ldr	r3, [pc, #172]	; (8009dc0 <BSP_LCD_InitEx+0xe8>)
 8009d14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d18:	605a      	str	r2, [r3, #4]
    DrawProp.pFont     = &Font24;
 8009d1a:	4b29      	ldr	r3, [pc, #164]	; (8009dc0 <BSP_LCD_InitEx+0xe8>)
 8009d1c:	4a29      	ldr	r2, [pc, #164]	; (8009dc4 <BSP_LCD_InitEx+0xec>)
 8009d1e:	609a      	str	r2, [r3, #8]
    DrawProp.TextColor = 0x0000;
 8009d20:	4b27      	ldr	r3, [pc, #156]	; (8009dc0 <BSP_LCD_InitEx+0xe8>)
 8009d22:	2200      	movs	r2, #0
 8009d24:	601a      	str	r2, [r3, #0]

    if ((WakeUpFromStandby == RESET) && (WakeUpFromShutdown == RESET))
 8009d26:	4b28      	ldr	r3, [pc, #160]	; (8009dc8 <BSP_LCD_InitEx+0xf0>)
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d108      	bne.n	8009d40 <BSP_LCD_InitEx+0x68>
 8009d2e:	4b27      	ldr	r3, [pc, #156]	; (8009dcc <BSP_LCD_InitEx+0xf4>)
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d104      	bne.n	8009d40 <BSP_LCD_InitEx+0x68>
    {
      /* Backlight control signal assertion */
      HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8009d36:	2201      	movs	r2, #1
 8009d38:	2101      	movs	r1, #1
 8009d3a:	4825      	ldr	r0, [pc, #148]	; (8009dd0 <BSP_LCD_InitEx+0xf8>)
 8009d3c:	f002 fd02 	bl	800c744 <HAL_GPIO_WritePin>
    }

    /* Reset the LCD */
    BSP_LCD_Reset();
 8009d40:	f000 f850 	bl	8009de4 <BSP_LCD_Reset>

    if (ST7789H2_drv.ReadID() == ST7789H2_ID)
 8009d44:	4b23      	ldr	r3, [pc, #140]	; (8009dd4 <BSP_LCD_InitEx+0xfc>)
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	4798      	blx	r3
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b85      	cmp	r3, #133	; 0x85
 8009d4e:	d12e      	bne.n	8009dae <BSP_LCD_InitEx+0xd6>
    {
      LcdDrv = &ST7789H2_drv;
 8009d50:	4b21      	ldr	r3, [pc, #132]	; (8009dd8 <BSP_LCD_InitEx+0x100>)
 8009d52:	4a20      	ldr	r2, [pc, #128]	; (8009dd4 <BSP_LCD_InitEx+0xfc>)
 8009d54:	601a      	str	r2, [r3, #0]

      /* LCD Init */
      LcdDrv->Init();
 8009d56:	4b20      	ldr	r3, [pc, #128]	; (8009dd8 <BSP_LCD_InitEx+0x100>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4798      	blx	r3

      /* Fill LCD frame memory with white pixels (or black pixels if INIT_BLACK_LCD is enabled) */
      ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t *)NULL, 0);  /* RAM Write Data */
 8009d5e:	2200      	movs	r2, #0
 8009d60:	2100      	movs	r1, #0
 8009d62:	202c      	movs	r0, #44	; 0x2c
 8009d64:	f7fa fb81 	bl	800446a <ST7789H2_WriteReg>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 8009d68:	2300      	movs	r3, #0
 8009d6a:	60bb      	str	r3, [r7, #8]
 8009d6c:	e006      	b.n	8009d7c <BSP_LCD_InitEx+0xa4>
      {
#if defined(INIT_BLACK_LCD)
        LCD_IO_WriteData(0x0);
#else
        LCD_IO_WriteData(0xFFFF);
 8009d6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009d72:	f7ff fe87 	bl	8009a84 <LCD_IO_WriteData>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	60bb      	str	r3, [r7, #8]
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 8009d82:	d3f4      	bcc.n	8009d6e <BSP_LCD_InitEx+0x96>
#endif
      }

      if (orientation == LCD_ORIENTATION_PORTRAIT)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d106      	bne.n	8009d98 <BSP_LCD_InitEx+0xc0>
      {
        ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT);
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	f7fa fa6b 	bl	8004266 <ST7789H2_SetOrientation>
        LCD_orientation = LCD_ORIENTATION_PORTRAIT;
 8009d90:	4b12      	ldr	r3, [pc, #72]	; (8009ddc <BSP_LCD_InitEx+0x104>)
 8009d92:	2200      	movs	r2, #0
 8009d94:	701a      	strb	r2, [r3, #0]
 8009d96:	e002      	b.n	8009d9e <BSP_LCD_InitEx+0xc6>
      }
      else
      {
        LCD_orientation = LCD_ORIENTATION_LANDSCAPE;
 8009d98:	4b10      	ldr	r3, [pc, #64]	; (8009ddc <BSP_LCD_InitEx+0x104>)
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	701a      	strb	r2, [r3, #0]
      }
      /* Initialize the font */
      BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8009d9e:	4810      	ldr	r0, [pc, #64]	; (8009de0 <BSP_LCD_InitEx+0x108>)
 8009da0:	f000 f868 	bl	8009e74 <BSP_LCD_SetFont>

      bsp_lcd_initialized = 1;
 8009da4:	4b04      	ldr	r3, [pc, #16]	; (8009db8 <BSP_LCD_InitEx+0xe0>)
 8009da6:	2201      	movs	r2, #1
 8009da8:	601a      	str	r2, [r3, #0]
      ret = LCD_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	200010fc 	.word	0x200010fc
 8009dbc:	48001c00 	.word	0x48001c00
 8009dc0:	20001170 	.word	0x20001170
 8009dc4:	20000530 	.word	0x20000530
 8009dc8:	2000116c 	.word	0x2000116c
 8009dcc:	2000116d 	.word	0x2000116d
 8009dd0:	48002000 	.word	0x48002000
 8009dd4:	20000234 	.word	0x20000234
 8009dd8:	2000117c 	.word	0x2000117c
 8009ddc:	20000540 	.word	0x20000540
 8009de0:	20000538 	.word	0x20000538

08009de4 <BSP_LCD_Reset>:
  * @brief  Reset the LCD.
  * @param  None
  * @retval LCD state
  */
void BSP_LCD_Reset(void)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	af00      	add	r7, sp, #0
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 8009de8:	2100      	movs	r1, #0
 8009dea:	2004      	movs	r0, #4
 8009dec:	f7ff ff50 	bl	8009c90 <BSP_IO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8009df0:	2005      	movs	r0, #5
 8009df2:	f000 ff2d 	bl	800ac50 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 8009df6:	2101      	movs	r1, #1
 8009df8:	2004      	movs	r0, #4
 8009dfa:	f7ff ff49 	bl	8009c90 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8009dfe:	200a      	movs	r0, #10
 8009e00:	f000 ff26 	bl	800ac50 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 8009e04:	2100      	movs	r1, #0
 8009e06:	2004      	movs	r0, #4
 8009e08:	f7ff ff42 	bl	8009c90 <BSP_IO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8009e0c:	2014      	movs	r0, #20
 8009e0e:	f000 ff1f 	bl	800ac50 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 8009e12:	2101      	movs	r1, #1
 8009e14:	2004      	movs	r0, #4
 8009e16:	f7ff ff3b 	bl	8009c90 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8009e1a:	200a      	movs	r0, #10
 8009e1c:	f000 ff18 	bl	800ac50 <HAL_Delay>
}
 8009e20:	bf00      	nop
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelWidth());
 8009e28:	4b03      	ldr	r3, [pc, #12]	; (8009e38 <BSP_LCD_GetXSize+0x14>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e2e:	4798      	blx	r3
 8009e30:	4603      	mov	r3, r0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	2000117c 	.word	0x2000117c

08009e3c <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelHeight());
 8009e40:	4b03      	ldr	r3, [pc, #12]	; (8009e50 <BSP_LCD_GetYSize+0x14>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e46:	4798      	blx	r3
 8009e48:	4603      	mov	r3, r0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	2000117c 	.word	0x2000117c

08009e54 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8009e5e:	88fb      	ldrh	r3, [r7, #6]
 8009e60:	4a03      	ldr	r2, [pc, #12]	; (8009e70 <BSP_LCD_SetTextColor+0x1c>)
 8009e62:	6013      	str	r3, [r2, #0]
}
 8009e64:	bf00      	nop
 8009e66:	370c      	adds	r7, #12
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr
 8009e70:	20001170 	.word	0x20001170

08009e74 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8009e7c:	4a04      	ldr	r2, [pc, #16]	; (8009e90 <BSP_LCD_SetFont+0x1c>)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6093      	str	r3, [r2, #8]
}
 8009e82:	bf00      	nop
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	20001170 	.word	0x20001170

08009e94 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8009e94:	b590      	push	{r4, r7, lr}
 8009e96:	b087      	sub	sp, #28
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor;
 8009ea6:	4b15      	ldr	r3, [pc, #84]	; (8009efc <BSP_LCD_Clear+0x68>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 8009eac:	88fb      	ldrh	r3, [r7, #6]
 8009eae:	4a13      	ldr	r2, [pc, #76]	; (8009efc <BSP_LCD_Clear+0x68>)
 8009eb0:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 8009eb2:	f7ff ffc3 	bl	8009e3c <BSP_LCD_GetYSize>
 8009eb6:	6138      	str	r0, [r7, #16]

  for (counter = 0; counter < y_size; counter++)
 8009eb8:	2300      	movs	r3, #0
 8009eba:	617b      	str	r3, [r7, #20]
 8009ebc:	e00d      	b.n	8009eda <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	b29c      	uxth	r4, r3
 8009ec2:	f7ff ffaf 	bl	8009e24 <BSP_LCD_GetXSize>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	461a      	mov	r2, r3
 8009ecc:	4621      	mov	r1, r4
 8009ece:	2000      	movs	r0, #0
 8009ed0:	f000 f8e8 	bl	800a0a4 <BSP_LCD_DrawHLine>
  for (counter = 0; counter < y_size; counter++)
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	617b      	str	r3, [r7, #20]
 8009eda:	697a      	ldr	r2, [r7, #20]
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d3ed      	bcc.n	8009ebe <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup;
 8009ee2:	4a06      	ldr	r2, [pc, #24]	; (8009efc <BSP_LCD_Clear+0x68>)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8009ee8:	4b04      	ldr	r3, [pc, #16]	; (8009efc <BSP_LCD_Clear+0x68>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7ff ffb0 	bl	8009e54 <BSP_LCD_SetTextColor>
}
 8009ef4:	bf00      	nop
 8009ef6:	371c      	adds	r7, #28
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd90      	pop	{r4, r7, pc}
 8009efc:	20001170 	.word	0x20001170

08009f00 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	4603      	mov	r3, r0
 8009f08:	80fb      	strh	r3, [r7, #6]
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	80bb      	strh	r3, [r7, #4]
 8009f0e:	4613      	mov	r3, r2
 8009f10:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 8009f12:	4b0f      	ldr	r3, [pc, #60]	; (8009f50 <BSP_LCD_DisplayChar+0x50>)
 8009f14:	689b      	ldr	r3, [r3, #8]
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	78fb      	ldrb	r3, [r7, #3]
 8009f1a:	3b20      	subs	r3, #32
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8009f1c:	490c      	ldr	r1, [pc, #48]	; (8009f50 <BSP_LCD_DisplayChar+0x50>)
 8009f1e:	6889      	ldr	r1, [r1, #8]
 8009f20:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 8009f22:	fb03 f101 	mul.w	r1, r3, r1
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8009f26:	4b0a      	ldr	r3, [pc, #40]	; (8009f50 <BSP_LCD_DisplayChar+0x50>)
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	889b      	ldrh	r3, [r3, #4]
 8009f2c:	3307      	adds	r3, #7
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	da00      	bge.n	8009f34 <BSP_LCD_DisplayChar+0x34>
 8009f32:	3307      	adds	r3, #7
 8009f34:	10db      	asrs	r3, r3, #3
 8009f36:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 8009f3a:	441a      	add	r2, r3
 8009f3c:	88b9      	ldrh	r1, [r7, #4]
 8009f3e:	88fb      	ldrh	r3, [r7, #6]
 8009f40:	4618      	mov	r0, r3
 8009f42:	f000 fc0d 	bl	800a760 <DrawChar>
}
 8009f46:	bf00      	nop
 8009f48:	3708      	adds	r7, #8
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	20001170 	.word	0x20001170

08009f54 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b088      	sub	sp, #32
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60ba      	str	r2, [r7, #8]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	4603      	mov	r3, r0
 8009f60:	81fb      	strh	r3, [r7, #14]
 8009f62:	460b      	mov	r3, r1
 8009f64:	81bb      	strh	r3, [r7, #12]
 8009f66:	4613      	mov	r3, r2
 8009f68:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	83fb      	strh	r3, [r7, #30]
 8009f6e:	2300      	movs	r3, #0
 8009f70:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 8009f72:	2300      	movs	r3, #0
 8009f74:	61bb      	str	r3, [r7, #24]
 8009f76:	2300      	movs	r3, #0
 8009f78:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++)
 8009f7e:	e002      	b.n	8009f86 <BSP_LCD_DisplayStringAt+0x32>
  {
    size ++ ;
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	3301      	adds	r3, #1
 8009f84:	61bb      	str	r3, [r7, #24]
  while (*ptr++)
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	1c5a      	adds	r2, r3, #1
 8009f8a:	617a      	str	r2, [r7, #20]
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1f6      	bne.n	8009f80 <BSP_LCD_DisplayStringAt+0x2c>
  }

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp.pFont->Width);
 8009f92:	f7ff ff47 	bl	8009e24 <BSP_LCD_GetXSize>
 8009f96:	4602      	mov	r2, r0
 8009f98:	4b33      	ldr	r3, [pc, #204]	; (800a068 <BSP_LCD_DisplayStringAt+0x114>)
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	889b      	ldrh	r3, [r3, #4]
 8009f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fa2:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8009fa4:	79fb      	ldrb	r3, [r7, #7]
 8009fa6:	2b03      	cmp	r3, #3
 8009fa8:	d014      	beq.n	8009fd4 <BSP_LCD_DisplayStringAt+0x80>
 8009faa:	2b03      	cmp	r3, #3
 8009fac:	dc23      	bgt.n	8009ff6 <BSP_LCD_DisplayStringAt+0xa2>
 8009fae:	2b01      	cmp	r3, #1
 8009fb0:	d002      	beq.n	8009fb8 <BSP_LCD_DisplayStringAt+0x64>
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	d011      	beq.n	8009fda <BSP_LCD_DisplayStringAt+0x86>
 8009fb6:	e01e      	b.n	8009ff6 <BSP_LCD_DisplayStringAt+0xa2>
  {
    case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size) * DrawProp.pFont->Width) / 2;
 8009fb8:	693a      	ldr	r2, [r7, #16]
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	1ad3      	subs	r3, r2, r3
 8009fbe:	4a2a      	ldr	r2, [pc, #168]	; (800a068 <BSP_LCD_DisplayStringAt+0x114>)
 8009fc0:	6892      	ldr	r2, [r2, #8]
 8009fc2:	8892      	ldrh	r2, [r2, #4]
 8009fc4:	fb02 f303 	mul.w	r3, r2, r3
 8009fc8:	085b      	lsrs	r3, r3, #1
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	89fb      	ldrh	r3, [r7, #14]
 8009fce:	4413      	add	r3, r2
 8009fd0:	83fb      	strh	r3, [r7, #30]
      break;
 8009fd2:	e013      	b.n	8009ffc <BSP_LCD_DisplayStringAt+0xa8>
    }
    case LEFT_MODE:
    {
      refcolumn = Xpos;
 8009fd4:	89fb      	ldrh	r3, [r7, #14]
 8009fd6:	83fb      	strh	r3, [r7, #30]
      break;
 8009fd8:	e010      	b.n	8009ffc <BSP_LCD_DisplayStringAt+0xa8>
    }
    case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size) * DrawProp.pFont->Width);
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	1ad3      	subs	r3, r2, r3
 8009fe0:	b29a      	uxth	r2, r3
 8009fe2:	4b21      	ldr	r3, [pc, #132]	; (800a068 <BSP_LCD_DisplayStringAt+0x114>)
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	889b      	ldrh	r3, [r3, #4]
 8009fe8:	fb12 f303 	smulbb	r3, r2, r3
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	89fb      	ldrh	r3, [r7, #14]
 8009ff0:	1ad3      	subs	r3, r2, r3
 8009ff2:	83fb      	strh	r3, [r7, #30]
      break;
 8009ff4:	e002      	b.n	8009ffc <BSP_LCD_DisplayStringAt+0xa8>
    }
    default:
    {
      refcolumn = Xpos;
 8009ff6:	89fb      	ldrh	r3, [r7, #14]
 8009ff8:	83fb      	strh	r3, [r7, #30]
      break;
 8009ffa:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8009ffc:	8bfb      	ldrh	r3, [r7, #30]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d003      	beq.n	800a00a <BSP_LCD_DisplayStringAt+0xb6>
 800a002:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a006:	2b00      	cmp	r3, #0
 800a008:	da15      	bge.n	800a036 <BSP_LCD_DisplayStringAt+0xe2>
  {
    refcolumn = 1;
 800a00a:	2301      	movs	r3, #1
 800a00c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800a00e:	e012      	b.n	800a036 <BSP_LCD_DisplayStringAt+0xe2>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	781a      	ldrb	r2, [r3, #0]
 800a014:	89b9      	ldrh	r1, [r7, #12]
 800a016:	8bfb      	ldrh	r3, [r7, #30]
 800a018:	4618      	mov	r0, r3
 800a01a:	f7ff ff71 	bl	8009f00 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 800a01e:	4b12      	ldr	r3, [pc, #72]	; (800a068 <BSP_LCD_DisplayStringAt+0x114>)
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	889a      	ldrh	r2, [r3, #4]
 800a024:	8bfb      	ldrh	r3, [r7, #30]
 800a026:	4413      	add	r3, r2
 800a028:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	3301      	adds	r3, #1
 800a02e:	60bb      	str	r3, [r7, #8]
    i++;
 800a030:	8bbb      	ldrh	r3, [r7, #28]
 800a032:	3301      	adds	r3, #1
 800a034:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00f      	beq.n	800a05e <BSP_LCD_DisplayStringAt+0x10a>
 800a03e:	f7ff fef1 	bl	8009e24 <BSP_LCD_GetXSize>
 800a042:	4601      	mov	r1, r0
 800a044:	8bbb      	ldrh	r3, [r7, #28]
 800a046:	4a08      	ldr	r2, [pc, #32]	; (800a068 <BSP_LCD_DisplayStringAt+0x114>)
 800a048:	6892      	ldr	r2, [r2, #8]
 800a04a:	8892      	ldrh	r2, [r2, #4]
 800a04c:	fb02 f303 	mul.w	r3, r2, r3
 800a050:	1acb      	subs	r3, r1, r3
 800a052:	b29b      	uxth	r3, r3
 800a054:	4a04      	ldr	r2, [pc, #16]	; (800a068 <BSP_LCD_DisplayStringAt+0x114>)
 800a056:	6892      	ldr	r2, [r2, #8]
 800a058:	8892      	ldrh	r2, [r2, #4]
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d2d8      	bcs.n	800a010 <BSP_LCD_DisplayStringAt+0xbc>
  }
}
 800a05e:	bf00      	nop
 800a060:	3720      	adds	r7, #32
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	20001170 	.word	0x20001170

0800a06c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	4603      	mov	r3, r0
 800a074:	80fb      	strh	r3, [r7, #6]
 800a076:	460b      	mov	r3, r1
 800a078:	80bb      	strh	r3, [r7, #4]
 800a07a:	4613      	mov	r3, r2
 800a07c:	807b      	strh	r3, [r7, #2]
  if (LcdDrv->WritePixel != NULL)
 800a07e:	4b08      	ldr	r3, [pc, #32]	; (800a0a0 <BSP_LCD_DrawPixel+0x34>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	695b      	ldr	r3, [r3, #20]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d006      	beq.n	800a096 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 800a088:	4b05      	ldr	r3, [pc, #20]	; (800a0a0 <BSP_LCD_DrawPixel+0x34>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	695b      	ldr	r3, [r3, #20]
 800a08e:	887a      	ldrh	r2, [r7, #2]
 800a090:	88b9      	ldrh	r1, [r7, #4]
 800a092:	88f8      	ldrh	r0, [r7, #6]
 800a094:	4798      	blx	r3
  }
}
 800a096:	bf00      	nop
 800a098:	3708      	adds	r7, #8
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}
 800a09e:	bf00      	nop
 800a0a0:	2000117c 	.word	0x2000117c

0800a0a4 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800a0a4:	b590      	push	{r4, r7, lr}
 800a0a6:	b085      	sub	sp, #20
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	80fb      	strh	r3, [r7, #6]
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	80bb      	strh	r3, [r7, #4]
 800a0b2:	4613      	mov	r3, r2
 800a0b4:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	60fb      	str	r3, [r7, #12]

  if (LcdDrv->DrawHLine != NULL)
 800a0ba:	4b15      	ldr	r3, [pc, #84]	; (800a110 <BSP_LCD_DrawHLine+0x6c>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	6a1b      	ldr	r3, [r3, #32]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d00a      	beq.n	800a0da <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 800a0c4:	4b12      	ldr	r3, [pc, #72]	; (800a110 <BSP_LCD_DrawHLine+0x6c>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	6a1c      	ldr	r4, [r3, #32]
 800a0ca:	4b12      	ldr	r3, [pc, #72]	; (800a114 <BSP_LCD_DrawHLine+0x70>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	b298      	uxth	r0, r3
 800a0d0:	887b      	ldrh	r3, [r7, #2]
 800a0d2:	88ba      	ldrh	r2, [r7, #4]
 800a0d4:	88f9      	ldrh	r1, [r7, #6]
 800a0d6:	47a0      	blx	r4
    for (index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 800a0d8:	e015      	b.n	800a106 <BSP_LCD_DrawHLine+0x62>
    for (index = 0; index < Length; index++)
 800a0da:	2300      	movs	r3, #0
 800a0dc:	60fb      	str	r3, [r7, #12]
 800a0de:	e00e      	b.n	800a0fe <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	88fb      	ldrh	r3, [r7, #6]
 800a0e6:	4413      	add	r3, r2
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	4a0a      	ldr	r2, [pc, #40]	; (800a114 <BSP_LCD_DrawHLine+0x70>)
 800a0ec:	6812      	ldr	r2, [r2, #0]
 800a0ee:	b292      	uxth	r2, r2
 800a0f0:	88b9      	ldrh	r1, [r7, #4]
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7ff ffba 	bl	800a06c <BSP_LCD_DrawPixel>
    for (index = 0; index < Length; index++)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	60fb      	str	r3, [r7, #12]
 800a0fe:	887b      	ldrh	r3, [r7, #2]
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	429a      	cmp	r2, r3
 800a104:	d3ec      	bcc.n	800a0e0 <BSP_LCD_DrawHLine+0x3c>
}
 800a106:	bf00      	nop
 800a108:	3714      	adds	r7, #20
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd90      	pop	{r4, r7, pc}
 800a10e:	bf00      	nop
 800a110:	2000117c 	.word	0x2000117c
 800a114:	20001170 	.word	0x20001170

0800a118 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	4603      	mov	r3, r0
 800a120:	80fb      	strh	r3, [r7, #6]
 800a122:	460b      	mov	r3, r1
 800a124:	80bb      	strh	r3, [r7, #4]
 800a126:	4613      	mov	r3, r2
 800a128:	807b      	strh	r3, [r7, #2]
  int32_t  decision;       /* Decision Variable */
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */

  decision = 3 - (Radius << 1);
 800a12a:	887b      	ldrh	r3, [r7, #2]
 800a12c:	005b      	lsls	r3, r3, #1
 800a12e:	f1c3 0303 	rsb	r3, r3, #3
 800a132:	617b      	str	r3, [r7, #20]
  current_x = 0;
 800a134:	2300      	movs	r3, #0
 800a136:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800a138:	887b      	ldrh	r3, [r7, #2]
 800a13a:	60fb      	str	r3, [r7, #12]

  while (current_x <= current_y)
 800a13c:	e09a      	b.n	800a274 <BSP_LCD_DrawCircle+0x15c>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp.TextColor);
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	b29a      	uxth	r2, r3
 800a142:	88fb      	ldrh	r3, [r7, #6]
 800a144:	4413      	add	r3, r2
 800a146:	b298      	uxth	r0, r3
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	88ba      	ldrh	r2, [r7, #4]
 800a14e:	1ad3      	subs	r3, r2, r3
 800a150:	b29b      	uxth	r3, r3
 800a152:	4a4d      	ldr	r2, [pc, #308]	; (800a288 <BSP_LCD_DrawCircle+0x170>)
 800a154:	6812      	ldr	r2, [r2, #0]
 800a156:	b292      	uxth	r2, r2
 800a158:	4619      	mov	r1, r3
 800a15a:	f7ff ff87 	bl	800a06c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp.TextColor);
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	b29b      	uxth	r3, r3
 800a162:	88fa      	ldrh	r2, [r7, #6]
 800a164:	1ad3      	subs	r3, r2, r3
 800a166:	b298      	uxth	r0, r3
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	88ba      	ldrh	r2, [r7, #4]
 800a16e:	1ad3      	subs	r3, r2, r3
 800a170:	b29b      	uxth	r3, r3
 800a172:	4a45      	ldr	r2, [pc, #276]	; (800a288 <BSP_LCD_DrawCircle+0x170>)
 800a174:	6812      	ldr	r2, [r2, #0]
 800a176:	b292      	uxth	r2, r2
 800a178:	4619      	mov	r1, r3
 800a17a:	f7ff ff77 	bl	800a06c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp.TextColor);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	b29a      	uxth	r2, r3
 800a182:	88fb      	ldrh	r3, [r7, #6]
 800a184:	4413      	add	r3, r2
 800a186:	b298      	uxth	r0, r3
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	88ba      	ldrh	r2, [r7, #4]
 800a18e:	1ad3      	subs	r3, r2, r3
 800a190:	b29b      	uxth	r3, r3
 800a192:	4a3d      	ldr	r2, [pc, #244]	; (800a288 <BSP_LCD_DrawCircle+0x170>)
 800a194:	6812      	ldr	r2, [r2, #0]
 800a196:	b292      	uxth	r2, r2
 800a198:	4619      	mov	r1, r3
 800a19a:	f7ff ff67 	bl	800a06c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp.TextColor);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	88fa      	ldrh	r2, [r7, #6]
 800a1a4:	1ad3      	subs	r3, r2, r3
 800a1a6:	b298      	uxth	r0, r3
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	88ba      	ldrh	r2, [r7, #4]
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	4a35      	ldr	r2, [pc, #212]	; (800a288 <BSP_LCD_DrawCircle+0x170>)
 800a1b4:	6812      	ldr	r2, [r2, #0]
 800a1b6:	b292      	uxth	r2, r2
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	f7ff ff57 	bl	800a06c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp.TextColor);
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	b29a      	uxth	r2, r3
 800a1c2:	88fb      	ldrh	r3, [r7, #6]
 800a1c4:	4413      	add	r3, r2
 800a1c6:	b298      	uxth	r0, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	88bb      	ldrh	r3, [r7, #4]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	4a2d      	ldr	r2, [pc, #180]	; (800a288 <BSP_LCD_DrawCircle+0x170>)
 800a1d4:	6812      	ldr	r2, [r2, #0]
 800a1d6:	b292      	uxth	r2, r2
 800a1d8:	4619      	mov	r1, r3
 800a1da:	f7ff ff47 	bl	800a06c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp.TextColor);
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	88fa      	ldrh	r2, [r7, #6]
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	b298      	uxth	r0, r3
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	b29a      	uxth	r2, r3
 800a1ec:	88bb      	ldrh	r3, [r7, #4]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	4a25      	ldr	r2, [pc, #148]	; (800a288 <BSP_LCD_DrawCircle+0x170>)
 800a1f4:	6812      	ldr	r2, [r2, #0]
 800a1f6:	b292      	uxth	r2, r2
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	f7ff ff37 	bl	800a06c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp.TextColor);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	b29a      	uxth	r2, r3
 800a202:	88fb      	ldrh	r3, [r7, #6]
 800a204:	4413      	add	r3, r2
 800a206:	b298      	uxth	r0, r3
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	88bb      	ldrh	r3, [r7, #4]
 800a20e:	4413      	add	r3, r2
 800a210:	b29b      	uxth	r3, r3
 800a212:	4a1d      	ldr	r2, [pc, #116]	; (800a288 <BSP_LCD_DrawCircle+0x170>)
 800a214:	6812      	ldr	r2, [r2, #0]
 800a216:	b292      	uxth	r2, r2
 800a218:	4619      	mov	r1, r3
 800a21a:	f7ff ff27 	bl	800a06c <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp.TextColor);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	b29b      	uxth	r3, r3
 800a222:	88fa      	ldrh	r2, [r7, #6]
 800a224:	1ad3      	subs	r3, r2, r3
 800a226:	b298      	uxth	r0, r3
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	88bb      	ldrh	r3, [r7, #4]
 800a22e:	4413      	add	r3, r2
 800a230:	b29b      	uxth	r3, r3
 800a232:	4a15      	ldr	r2, [pc, #84]	; (800a288 <BSP_LCD_DrawCircle+0x170>)
 800a234:	6812      	ldr	r2, [r2, #0]
 800a236:	b292      	uxth	r2, r2
 800a238:	4619      	mov	r1, r3
 800a23a:	f7ff ff17 	bl	800a06c <BSP_LCD_DrawPixel>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800a23e:	4813      	ldr	r0, [pc, #76]	; (800a28c <BSP_LCD_DrawCircle+0x174>)
 800a240:	f7ff fe18 	bl	8009e74 <BSP_LCD_SetFont>

    if (decision < 0)
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	2b00      	cmp	r3, #0
 800a248:	da06      	bge.n	800a258 <BSP_LCD_DrawCircle+0x140>
    {
      decision += (current_x << 2) + 6;
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	009a      	lsls	r2, r3, #2
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	4413      	add	r3, r2
 800a252:	3306      	adds	r3, #6
 800a254:	617b      	str	r3, [r7, #20]
 800a256:	e00a      	b.n	800a26e <BSP_LCD_DrawCircle+0x156>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800a258:	693a      	ldr	r2, [r7, #16]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	009a      	lsls	r2, r3, #2
 800a260:	697b      	ldr	r3, [r7, #20]
 800a262:	4413      	add	r3, r2
 800a264:	330a      	adds	r3, #10
 800a266:	617b      	str	r3, [r7, #20]
      current_y--;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	3b01      	subs	r3, #1
 800a26c:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	3301      	adds	r3, #1
 800a272:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800a274:	693a      	ldr	r2, [r7, #16]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	429a      	cmp	r2, r3
 800a27a:	f67f af60 	bls.w	800a13e <BSP_LCD_DrawCircle+0x26>
  }
}
 800a27e:	bf00      	nop
 800a280:	bf00      	nop
 800a282:	3718      	adds	r7, #24
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	20001170 	.word	0x20001170
 800a28c:	20000538 	.word	0x20000538

0800a290 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b086      	sub	sp, #24
 800a294:	af00      	add	r7, sp, #0
 800a296:	4603      	mov	r3, r0
 800a298:	80fb      	strh	r3, [r7, #6]
 800a29a:	460b      	mov	r3, r1
 800a29c:	80bb      	strh	r3, [r7, #4]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	807b      	strh	r3, [r7, #2]
  int32_t  decision;        /* Decision Variable */
  uint32_t  current_x;    /* Current X Value */
  uint32_t  current_y;    /* Current Y Value */

  decision = 3 - (Radius << 1);
 800a2a2:	887b      	ldrh	r3, [r7, #2]
 800a2a4:	005b      	lsls	r3, r3, #1
 800a2a6:	f1c3 0303 	rsb	r3, r3, #3
 800a2aa:	617b      	str	r3, [r7, #20]

  current_x = 0;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800a2b0:	887b      	ldrh	r3, [r7, #2]
 800a2b2:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800a2b4:	4b3e      	ldr	r3, [pc, #248]	; (800a3b0 <BSP_LCD_FillCircle+0x120>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7ff fdca 	bl	8009e54 <BSP_LCD_SetTextColor>

  while (current_x <= current_y)
 800a2c0:	e061      	b.n	800a386 <BSP_LCD_FillCircle+0xf6>
  {
    if (current_y > 0)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d021      	beq.n	800a30c <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2 * current_y);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	88fa      	ldrh	r2, [r7, #6]
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	b298      	uxth	r0, r3
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	b29a      	uxth	r2, r3
 800a2d6:	88bb      	ldrh	r3, [r7, #4]
 800a2d8:	4413      	add	r3, r2
 800a2da:	b299      	uxth	r1, r3
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	005b      	lsls	r3, r3, #1
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	f7ff fedd 	bl	800a0a4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2 * current_y);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	88fa      	ldrh	r2, [r7, #6]
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	b298      	uxth	r0, r3
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	88ba      	ldrh	r2, [r7, #4]
 800a2fa:	1ad3      	subs	r3, r2, r3
 800a2fc:	b299      	uxth	r1, r3
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	b29b      	uxth	r3, r3
 800a302:	005b      	lsls	r3, r3, #1
 800a304:	b29b      	uxth	r3, r3
 800a306:	461a      	mov	r2, r3
 800a308:	f7ff fecc 	bl	800a0a4 <BSP_LCD_DrawHLine>
    }

    if (current_x > 0)
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d021      	beq.n	800a356 <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2 * current_x);
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	b29b      	uxth	r3, r3
 800a316:	88fa      	ldrh	r2, [r7, #6]
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	b298      	uxth	r0, r3
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	b29b      	uxth	r3, r3
 800a320:	88ba      	ldrh	r2, [r7, #4]
 800a322:	1ad3      	subs	r3, r2, r3
 800a324:	b299      	uxth	r1, r3
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	b29b      	uxth	r3, r3
 800a32a:	005b      	lsls	r3, r3, #1
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	461a      	mov	r2, r3
 800a330:	f7ff feb8 	bl	800a0a4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2 * current_x);
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	b29b      	uxth	r3, r3
 800a338:	88fa      	ldrh	r2, [r7, #6]
 800a33a:	1ad3      	subs	r3, r2, r3
 800a33c:	b298      	uxth	r0, r3
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	b29a      	uxth	r2, r3
 800a342:	88bb      	ldrh	r3, [r7, #4]
 800a344:	4413      	add	r3, r2
 800a346:	b299      	uxth	r1, r3
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	005b      	lsls	r3, r3, #1
 800a34e:	b29b      	uxth	r3, r3
 800a350:	461a      	mov	r2, r3
 800a352:	f7ff fea7 	bl	800a0a4 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	da06      	bge.n	800a36a <BSP_LCD_FillCircle+0xda>
    {
      decision += (current_x << 2) + 6;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	009a      	lsls	r2, r3, #2
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	4413      	add	r3, r2
 800a364:	3306      	adds	r3, #6
 800a366:	617b      	str	r3, [r7, #20]
 800a368:	e00a      	b.n	800a380 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	1ad3      	subs	r3, r2, r3
 800a370:	009a      	lsls	r2, r3, #2
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	4413      	add	r3, r2
 800a376:	330a      	adds	r3, #10
 800a378:	617b      	str	r3, [r7, #20]
      current_y--;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	3b01      	subs	r3, #1
 800a37e:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	3301      	adds	r3, #1
 800a384:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800a386:	693a      	ldr	r2, [r7, #16]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	429a      	cmp	r2, r3
 800a38c:	d999      	bls.n	800a2c2 <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800a38e:	4b08      	ldr	r3, [pc, #32]	; (800a3b0 <BSP_LCD_FillCircle+0x120>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	b29b      	uxth	r3, r3
 800a394:	4618      	mov	r0, r3
 800a396:	f7ff fd5d 	bl	8009e54 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800a39a:	887a      	ldrh	r2, [r7, #2]
 800a39c:	88b9      	ldrh	r1, [r7, #4]
 800a39e:	88fb      	ldrh	r3, [r7, #6]
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7ff feb9 	bl	800a118 <BSP_LCD_DrawCircle>
}
 800a3a6:	bf00      	nop
 800a3a8:	3718      	adds	r7, #24
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	20001170 	.word	0x20001170

0800a3b4 <BSP_LCD_ScreenDimmingConfig>:
  * @param  step    : step value in percent
  * @param  delay   : delay in milliseconds between each step
  * @retval None
  */
void BSP_LCD_ScreenDimmingConfig(const uint8_t start, const uint8_t stop, const uint8_t step, const uint8_t delay)
{
 800a3b4:	b490      	push	{r4, r7}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	4604      	mov	r4, r0
 800a3bc:	4608      	mov	r0, r1
 800a3be:	4611      	mov	r1, r2
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	4623      	mov	r3, r4
 800a3c4:	71fb      	strb	r3, [r7, #7]
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	71bb      	strb	r3, [r7, #6]
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	717b      	strb	r3, [r7, #5]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	713b      	strb	r3, [r7, #4]
  if ((dimming_config.ongoing == 0)
 800a3d2:	4b10      	ldr	r3, [pc, #64]	; (800a414 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d117      	bne.n	800a40a <BSP_LCD_ScreenDimmingConfig+0x56>
      && (start <= 100) && (stop <= 100)
 800a3da:	79fb      	ldrb	r3, [r7, #7]
 800a3dc:	2b64      	cmp	r3, #100	; 0x64
 800a3de:	d814      	bhi.n	800a40a <BSP_LCD_ScreenDimmingConfig+0x56>
 800a3e0:	79bb      	ldrb	r3, [r7, #6]
 800a3e2:	2b64      	cmp	r3, #100	; 0x64
 800a3e4:	d811      	bhi.n	800a40a <BSP_LCD_ScreenDimmingConfig+0x56>
      && (step > 0) && (step < 100))
 800a3e6:	797b      	ldrb	r3, [r7, #5]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00e      	beq.n	800a40a <BSP_LCD_ScreenDimmingConfig+0x56>
 800a3ec:	797b      	ldrb	r3, [r7, #5]
 800a3ee:	2b63      	cmp	r3, #99	; 0x63
 800a3f0:	d80b      	bhi.n	800a40a <BSP_LCD_ScreenDimmingConfig+0x56>
  {
    dimming_config.start = start;
 800a3f2:	4a08      	ldr	r2, [pc, #32]	; (800a414 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800a3f4:	79fb      	ldrb	r3, [r7, #7]
 800a3f6:	7053      	strb	r3, [r2, #1]
    dimming_config.stop  = stop;
 800a3f8:	4a06      	ldr	r2, [pc, #24]	; (800a414 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800a3fa:	79bb      	ldrb	r3, [r7, #6]
 800a3fc:	7093      	strb	r3, [r2, #2]
    dimming_config.step  = step;
 800a3fe:	4a05      	ldr	r2, [pc, #20]	; (800a414 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800a400:	797b      	ldrb	r3, [r7, #5]
 800a402:	70d3      	strb	r3, [r2, #3]
    dimming_config.delay = delay;
 800a404:	4a03      	ldr	r2, [pc, #12]	; (800a414 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800a406:	793b      	ldrb	r3, [r7, #4]
 800a408:	7113      	strb	r3, [r2, #4]
  }
}
 800a40a:	bf00      	nop
 800a40c:	3708      	adds	r7, #8
 800a40e:	46bd      	mov	sp, r7
 800a410:	bc90      	pop	{r4, r7}
 800a412:	4770      	bx	lr
 800a414:	20000544 	.word	0x20000544

0800a418 <BSP_LCD_ScreenDimmingOn>:
  * @note   Screen brightness is gradually decreased
  * @param  None
  * @retval None
  */
void BSP_LCD_ScreenDimmingOn(void)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
  }


#else
  /* Counter Prescaler value */
  uint32_t uhPrescalerValue = 0;
 800a41e:	2300      	movs	r3, #0
 800a420:	603b      	str	r3, [r7, #0]
  int32_t   step;

  /* Reject this while ongoing dimming */
  if (dimming_config.ongoing)
 800a422:	4b71      	ldr	r3, [pc, #452]	; (800a5e8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	f040 80d9 	bne.w	800a5de <BSP_LCD_ScreenDimmingOn+0x1c6>
  {
    return;
  }

  /* Set that dim feature is active */
  dimming_on = 1;
 800a42c:	4b6f      	ldr	r3, [pc, #444]	; (800a5ec <BSP_LCD_ScreenDimmingOn+0x1d4>)
 800a42e:	2201      	movs	r2, #1
 800a430:	601a      	str	r2, [r3, #0]
  dimming_config.ongoing = 1;
 800a432:	4b6d      	ldr	r3, [pc, #436]	; (800a5e8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a434:	2201      	movs	r2, #1
 800a436:	701a      	strb	r2, [r3, #0]

  if (dimming_config.stop > dimming_config.start)
 800a438:	4b6b      	ldr	r3, [pc, #428]	; (800a5e8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a43a:	789a      	ldrb	r2, [r3, #2]
 800a43c:	4b6a      	ldr	r3, [pc, #424]	; (800a5e8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a43e:	785b      	ldrb	r3, [r3, #1]
 800a440:	429a      	cmp	r2, r3
 800a442:	d903      	bls.n	800a44c <BSP_LCD_ScreenDimmingOn+0x34>
  {
    step      = dimming_config.step;
 800a444:	4b68      	ldr	r3, [pc, #416]	; (800a5e8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a446:	78db      	ldrb	r3, [r3, #3]
 800a448:	607b      	str	r3, [r7, #4]
 800a44a:	e003      	b.n	800a454 <BSP_LCD_ScreenDimmingOn+0x3c>
  }
  else
  {
    step      = -dimming_config.step;
 800a44c:	4b66      	ldr	r3, [pc, #408]	; (800a5e8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a44e:	78db      	ldrb	r3, [r3, #3]
 800a450:	425b      	negs	r3, r3
 800a452:	607b      	str	r3, [r7, #4]

  /* Always redo the full initialization as there is no apriori knowledge
    of IO or timer settings at this point (may have been modified by application) */

  /* Compute the prescaler value to have TIM1 counter clock equal to 16000000 Hz */
  uhPrescalerValue = (uint32_t)(SystemCoreClock / 16000000) - 1;
 800a454:	4b66      	ldr	r3, [pc, #408]	; (800a5f0 <BSP_LCD_ScreenDimmingOn+0x1d8>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a66      	ldr	r2, [pc, #408]	; (800a5f4 <BSP_LCD_ScreenDimmingOn+0x1dc>)
 800a45a:	fba2 2303 	umull	r2, r3, r2, r3
 800a45e:	0d9b      	lsrs	r3, r3, #22
 800a460:	3b01      	subs	r3, #1
 800a462:	603b      	str	r3, [r7, #0]

  LCD_TimHandle.Instance = TIMx;
 800a464:	4b64      	ldr	r3, [pc, #400]	; (800a5f8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a466:	4a65      	ldr	r2, [pc, #404]	; (800a5fc <BSP_LCD_ScreenDimmingOn+0x1e4>)
 800a468:	601a      	str	r2, [r3, #0]

  __HAL_TIM_RESET_HANDLE_STATE(&LCD_TimHandle); /* to force MSP call */
 800a46a:	4b63      	ldr	r3, [pc, #396]	; (800a5f8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a46c:	2200      	movs	r2, #0
 800a46e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a472:	4b61      	ldr	r3, [pc, #388]	; (800a5f8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a474:	2200      	movs	r2, #0
 800a476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a47a:	4b5f      	ldr	r3, [pc, #380]	; (800a5f8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a47c:	2200      	movs	r2, #0
 800a47e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a482:	4b5d      	ldr	r3, [pc, #372]	; (800a5f8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a484:	2200      	movs	r2, #0
 800a486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a48a:	4b5b      	ldr	r3, [pc, #364]	; (800a5f8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a492:	4b59      	ldr	r3, [pc, #356]	; (800a5f8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a494:	2200      	movs	r2, #0
 800a496:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a49a:	4b57      	ldr	r3, [pc, #348]	; (800a5f8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a4a2:	4b55      	ldr	r3, [pc, #340]	; (800a5f8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4aa:	4b53      	ldr	r3, [pc, #332]	; (800a5f8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a4b2:	4b51      	ldr	r3, [pc, #324]	; (800a5f8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a4ba:	4b4f      	ldr	r3, [pc, #316]	; (800a5f8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800a4c2:	4b4d      	ldr	r3, [pc, #308]	; (800a5f8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  LCD_TimHandle.Init.Prescaler         = uhPrescalerValue;
 800a4ca:	4a4b      	ldr	r2, [pc, #300]	; (800a5f8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	6053      	str	r3, [r2, #4]
  LCD_TimHandle.Init.Period            = PERIOD_VALUE;
 800a4d0:	4b49      	ldr	r3, [pc, #292]	; (800a5f8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a4d2:	f240 2299 	movw	r2, #665	; 0x299
 800a4d6:	60da      	str	r2, [r3, #12]
  LCD_TimHandle.Init.ClockDivision     = 0;
 800a4d8:	4b47      	ldr	r3, [pc, #284]	; (800a5f8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a4da:	2200      	movs	r2, #0
 800a4dc:	611a      	str	r2, [r3, #16]
  LCD_TimHandle.Init.CounterMode       = (step > 0 ? TIM_COUNTERMODE_DOWN : TIM_COUNTERMODE_UP);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	dd01      	ble.n	800a4e8 <BSP_LCD_ScreenDimmingOn+0xd0>
 800a4e4:	2310      	movs	r3, #16
 800a4e6:	e000      	b.n	800a4ea <BSP_LCD_ScreenDimmingOn+0xd2>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	4a43      	ldr	r2, [pc, #268]	; (800a5f8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a4ec:	6093      	str	r3, [r2, #8]
  LCD_TimHandle.Init.RepetitionCounter = 0;
 800a4ee:	4b42      	ldr	r3, [pc, #264]	; (800a5f8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&LCD_TimHandle) != HAL_OK)
 800a4f4:	4840      	ldr	r0, [pc, #256]	; (800a5f8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a4f6:	f008 f9ab 	bl	8012850 <HAL_TIM_PWM_Init>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d001      	beq.n	800a504 <BSP_LCD_ScreenDimmingOn+0xec>
  {
    /* Initialization Error */
    BSP_ErrorHandler();
 800a500:	f7fe fd91 	bl	8009026 <BSP_ErrorHandler>
  }

  /* Common configuration for all channels */
  LCD_sConfig.OCMode       = TIM_OCMODE_PWM1;
 800a504:	4b3e      	ldr	r3, [pc, #248]	; (800a600 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a506:	2260      	movs	r2, #96	; 0x60
 800a508:	601a      	str	r2, [r3, #0]
  LCD_sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
 800a50a:	4b3d      	ldr	r3, [pc, #244]	; (800a600 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a50c:	2200      	movs	r2, #0
 800a50e:	609a      	str	r2, [r3, #8]
  LCD_sConfig.OCFastMode   = TIM_OCFAST_DISABLE;
 800a510:	4b3b      	ldr	r3, [pc, #236]	; (800a600 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a512:	2200      	movs	r2, #0
 800a514:	611a      	str	r2, [r3, #16]
  LCD_sConfig.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 800a516:	4b3a      	ldr	r3, [pc, #232]	; (800a600 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a518:	2200      	movs	r2, #0
 800a51a:	60da      	str	r2, [r3, #12]
  LCD_sConfig.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a51c:	4b38      	ldr	r3, [pc, #224]	; (800a600 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a51e:	2200      	movs	r2, #0
 800a520:	619a      	str	r2, [r3, #24]

  LCD_sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;
 800a522:	4b37      	ldr	r3, [pc, #220]	; (800a600 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a524:	2200      	movs	r2, #0
 800a526:	615a      	str	r2, [r3, #20]

  /* Set the pulse value for channel */
  LCD_sConfig.Pulse = __DIMMING_CYCLE_VALUE(dimming_config.start);
 800a528:	4b2f      	ldr	r3, [pc, #188]	; (800a5e8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a52a:	785b      	ldrb	r3, [r3, #1]
 800a52c:	461a      	mov	r2, r3
 800a52e:	f240 2399 	movw	r3, #665	; 0x299
 800a532:	fb02 f303 	mul.w	r3, r2, r3
 800a536:	4a33      	ldr	r2, [pc, #204]	; (800a604 <BSP_LCD_ScreenDimmingOn+0x1ec>)
 800a538:	fba2 2303 	umull	r2, r3, r2, r3
 800a53c:	095b      	lsrs	r3, r3, #5
 800a53e:	4a30      	ldr	r2, [pc, #192]	; (800a600 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a540:	6053      	str	r3, [r2, #4]
  if (HAL_TIM_PWM_ConfigChannel(&LCD_TimHandle, &LCD_sConfig, TIMx_CHANNEL) != HAL_OK)
 800a542:	220c      	movs	r2, #12
 800a544:	492e      	ldr	r1, [pc, #184]	; (800a600 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a546:	482c      	ldr	r0, [pc, #176]	; (800a5f8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a548:	f008 fb76 	bl	8012c38 <HAL_TIM_PWM_ConfigChannel>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d001      	beq.n	800a556 <BSP_LCD_ScreenDimmingOn+0x13e>
  {
    /* Configuration Error */
    BSP_ErrorHandler();
 800a552:	f7fe fd68 	bl	8009026 <BSP_ErrorHandler>
  }

  /* Start Timer channel */
  if (HAL_TIM_PWM_Start(&LCD_TimHandle, TIMx_CHANNEL) != HAL_OK)
 800a556:	210c      	movs	r1, #12
 800a558:	4827      	ldr	r0, [pc, #156]	; (800a5f8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a55a:	f008 f9d1 	bl	8012900 <HAL_TIM_PWM_Start>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d001      	beq.n	800a568 <BSP_LCD_ScreenDimmingOn+0x150>
  {
    /* PWM Generation Error */
    BSP_ErrorHandler();
 800a564:	f7fe fd5f 	bl	8009026 <BSP_ErrorHandler>
  }

  /* Set the pulse value for the timer channel */
  i = dimming_config.start;
 800a568:	4b1f      	ldr	r3, [pc, #124]	; (800a5e8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a56a:	785b      	ldrb	r3, [r3, #1]
 800a56c:	461a      	mov	r2, r3
 800a56e:	4b26      	ldr	r3, [pc, #152]	; (800a608 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800a570:	601a      	str	r2, [r3, #0]
  while (dimming_config.ongoing)
 800a572:	e02f      	b.n	800a5d4 <BSP_LCD_ScreenDimmingOn+0x1bc>
  {
    __HAL_TIM_SET_COMPARE(&LCD_TimHandle, TIMx_CHANNEL, __DIMMING_CYCLE_VALUE(i));
 800a574:	4b24      	ldr	r3, [pc, #144]	; (800a608 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f240 2299 	movw	r2, #665	; 0x299
 800a57c:	fb03 f202 	mul.w	r2, r3, r2
 800a580:	4b1d      	ldr	r3, [pc, #116]	; (800a5f8 <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	491f      	ldr	r1, [pc, #124]	; (800a604 <BSP_LCD_ScreenDimmingOn+0x1ec>)
 800a586:	fba1 1202 	umull	r1, r2, r1, r2
 800a58a:	0952      	lsrs	r2, r2, #5
 800a58c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Exit if stop is reached */
    if (((step > 0) && (i >= dimming_config.stop))
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	dd06      	ble.n	800a5a2 <BSP_LCD_ScreenDimmingOn+0x18a>
 800a594:	4b14      	ldr	r3, [pc, #80]	; (800a5e8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a596:	789b      	ldrb	r3, [r3, #2]
 800a598:	461a      	mov	r2, r3
 800a59a:	4b1b      	ldr	r3, [pc, #108]	; (800a608 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d909      	bls.n	800a5b6 <BSP_LCD_ScreenDimmingOn+0x19e>
        || ((step < 0) && (i <= dimming_config.stop)))
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	da0a      	bge.n	800a5be <BSP_LCD_ScreenDimmingOn+0x1a6>
 800a5a8:	4b0f      	ldr	r3, [pc, #60]	; (800a5e8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a5aa:	789b      	ldrb	r3, [r3, #2]
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	4b16      	ldr	r3, [pc, #88]	; (800a608 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d303      	bcc.n	800a5be <BSP_LCD_ScreenDimmingOn+0x1a6>
    {
      dimming_config.ongoing = 0;
 800a5b6:	4b0c      	ldr	r3, [pc, #48]	; (800a5e8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	701a      	strb	r2, [r3, #0]
 800a5bc:	e00a      	b.n	800a5d4 <BSP_LCD_ScreenDimmingOn+0x1bc>
    }
    else
    {
      HAL_Delay(dimming_config.delay);
 800a5be:	4b0a      	ldr	r3, [pc, #40]	; (800a5e8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a5c0:	791b      	ldrb	r3, [r3, #4]
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f000 fb44 	bl	800ac50 <HAL_Delay>
      i += step;
 800a5c8:	4b0f      	ldr	r3, [pc, #60]	; (800a608 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	4a0d      	ldr	r2, [pc, #52]	; (800a608 <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800a5d2:	6013      	str	r3, [r2, #0]
  while (dimming_config.ongoing)
 800a5d4:	4b04      	ldr	r3, [pc, #16]	; (800a5e8 <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a5d6:	781b      	ldrb	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d1cb      	bne.n	800a574 <BSP_LCD_ScreenDimmingOn+0x15c>
 800a5dc:	e000      	b.n	800a5e0 <BSP_LCD_ScreenDimmingOn+0x1c8>
    return;
 800a5de:	bf00      	nop
    }
  }
#endif
}
 800a5e0:	3708      	adds	r7, #8
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	20000544 	.word	0x20000544
 800a5ec:	20001100 	.word	0x20001100
 800a5f0:	20000190 	.word	0x20000190
 800a5f4:	431bde83 	.word	0x431bde83
 800a5f8:	20001104 	.word	0x20001104
 800a5fc:	40000c00 	.word	0x40000c00
 800a600:	20001150 	.word	0x20001150
 800a604:	51eb851f 	.word	0x51eb851f
 800a608:	20001180 	.word	0x20001180

0800a60c <BSP_LCD_ScreenDimmingOff>:
  * @note   Screen brightness is immediately set to its highest level
  * @param  None
  * @retval None
  */
void BSP_LCD_ScreenDimmingOff(void)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	af00      	add	r7, sp, #0
#if defined(LPTIMER_DIMMING)
  GPIO_InitTypeDef GPIO_InitStructure;
#endif

  if (dimming_on == 1)
 800a610:	4b0d      	ldr	r3, [pc, #52]	; (800a648 <BSP_LCD_ScreenDimmingOff+0x3c>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	2b01      	cmp	r3, #1
 800a616:	d114      	bne.n	800a642 <BSP_LCD_ScreenDimmingOff+0x36>
  {
    /* Stop ongoing dimming */
    dimming_config.ongoing = 0;
 800a618:	4b0c      	ldr	r3, [pc, #48]	; (800a64c <BSP_LCD_ScreenDimmingOff+0x40>)
 800a61a:	2200      	movs	r2, #0
 800a61c:	701a      	strb	r2, [r3, #0]

    /* Disable timer clock for power consumption reasons */
    __HAL_RCC_LPTIM1_CLK_DISABLE();
#else
    /* Stop Timer channel */
    if (HAL_TIM_PWM_Stop(&LCD_TimHandle, TIMx_CHANNEL) != HAL_OK)
 800a61e:	210c      	movs	r1, #12
 800a620:	480b      	ldr	r0, [pc, #44]	; (800a650 <BSP_LCD_ScreenDimmingOff+0x44>)
 800a622:	f008 fa73 	bl	8012b0c <HAL_TIM_PWM_Stop>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d001      	beq.n	800a630 <BSP_LCD_ScreenDimmingOff+0x24>
    {
      /* PWM Generation Error */
      BSP_ErrorHandler();
 800a62c:	f7fe fcfb 	bl	8009026 <BSP_ErrorHandler>
    }

    /* Disable timer clock for power consumption reasons */
    TIMx_CLK_DISABLE();
 800a630:	4b08      	ldr	r3, [pc, #32]	; (800a654 <BSP_LCD_ScreenDimmingOff+0x48>)
 800a632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a634:	4a07      	ldr	r2, [pc, #28]	; (800a654 <BSP_LCD_ScreenDimmingOff+0x48>)
 800a636:	f023 0308 	bic.w	r3, r3, #8
 800a63a:	6593      	str	r3, [r2, #88]	; 0x58
#endif

    dimming_on = 0;
 800a63c:	4b02      	ldr	r3, [pc, #8]	; (800a648 <BSP_LCD_ScreenDimmingOff+0x3c>)
 800a63e:	2200      	movs	r2, #0
 800a640:	601a      	str	r2, [r3, #0]
  }
}
 800a642:	bf00      	nop
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	20001100 	.word	0x20001100
 800a64c:	20000544 	.word	0x20000544
 800a650:	20001104 	.word	0x20001104
 800a654:	40021000 	.word	0x40021000

0800a658 <HAL_TIM_PWM_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b088      	sub	sp, #32
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStruct;

  /* TIMx Peripheral clock enable */
  TIMx_CLK_ENABLE();
 800a660:	4b0f      	ldr	r3, [pc, #60]	; (800a6a0 <HAL_TIM_PWM_MspInit+0x48>)
 800a662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a664:	4a0e      	ldr	r2, [pc, #56]	; (800a6a0 <HAL_TIM_PWM_MspInit+0x48>)
 800a666:	f043 0308 	orr.w	r3, r3, #8
 800a66a:	6593      	str	r3, [r2, #88]	; 0x58
 800a66c:	4b0c      	ldr	r3, [pc, #48]	; (800a6a0 <HAL_TIM_PWM_MspInit+0x48>)
 800a66e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a670:	f003 0308 	and.w	r3, r3, #8
 800a674:	60bb      	str	r3, [r7, #8]
 800a676:	68bb      	ldr	r3, [r7, #8]

  /* Timer channel configuration */

  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a678:	2302      	movs	r3, #2
 800a67a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a67c:	2301      	movs	r3, #1
 800a67e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a680:	2303      	movs	r3, #3
 800a682:	61bb      	str	r3, [r7, #24]

  GPIO_InitStruct.Alternate = TIMx_CHANNEl_AF;
 800a684:	2302      	movs	r3, #2
 800a686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800a688:	2301      	movs	r3, #1
 800a68a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a68c:	f107 030c 	add.w	r3, r7, #12
 800a690:	4619      	mov	r1, r3
 800a692:	4804      	ldr	r0, [pc, #16]	; (800a6a4 <HAL_TIM_PWM_MspInit+0x4c>)
 800a694:	f001 fdd2 	bl	800c23c <HAL_GPIO_Init>
}
 800a698:	bf00      	nop
 800a69a:	3720      	adds	r7, #32
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}
 800a6a0:	40021000 	.word	0x40021000
 800a6a4:	48002000 	.word	0x48002000

0800a6a8 <BSP_LCD_MspInit>:
  * @brief  Initializes the LCD GPIO special pins MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_LCD_MspInit(void)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b088      	sub	sp, #32
 800a6ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock */
  LCD_TE_GPIO_CLK_ENABLE();
 800a6ae:	4b29      	ldr	r3, [pc, #164]	; (800a754 <BSP_LCD_MspInit+0xac>)
 800a6b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6b2:	4a28      	ldr	r2, [pc, #160]	; (800a754 <BSP_LCD_MspInit+0xac>)
 800a6b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a6ba:	4b26      	ldr	r3, [pc, #152]	; (800a754 <BSP_LCD_MspInit+0xac>)
 800a6bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6c2:	60bb      	str	r3, [r7, #8]
 800a6c4:	68bb      	ldr	r3, [r7, #8]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800a6c6:	4b23      	ldr	r3, [pc, #140]	; (800a754 <BSP_LCD_MspInit+0xac>)
 800a6c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6ca:	4a22      	ldr	r2, [pc, #136]	; (800a754 <BSP_LCD_MspInit+0xac>)
 800a6cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a6d2:	4b20      	ldr	r3, [pc, #128]	; (800a754 <BSP_LCD_MspInit+0xac>)
 800a6d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6da:	607b      	str	r3, [r7, #4]
 800a6dc:	687b      	ldr	r3, [r7, #4]
  LCD_PWR_CTRL_GPIO_CLK_ENABLE();
 800a6de:	4b1d      	ldr	r3, [pc, #116]	; (800a754 <BSP_LCD_MspInit+0xac>)
 800a6e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6e2:	4a1c      	ldr	r2, [pc, #112]	; (800a754 <BSP_LCD_MspInit+0xac>)
 800a6e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a6ea:	4b1a      	ldr	r3, [pc, #104]	; (800a754 <BSP_LCD_MspInit+0xac>)
 800a6ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6f2:	603b      	str	r3, [r7, #0]
 800a6f4:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  if (BSP_IO_Init() == IO_ERROR)
 800a6f6:	f7ff fa6b 	bl	8009bd0 <BSP_IO_Init>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d101      	bne.n	800a704 <BSP_LCD_MspInit+0x5c>
  {
    BSP_ErrorHandler();
 800a700:	f7fe fc91 	bl	8009026 <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(LCD_RST_PIN, IO_MODE_OUTPUT);
 800a704:	2101      	movs	r1, #1
 800a706:	2004      	movs	r0, #4
 800a708:	f7ff faa6 	bl	8009c58 <BSP_IO_ConfigPin>

  /* LCD_BL_CTRL GPIO configuration */
  GPIO_InitStructure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 800a70c:	2301      	movs	r3, #1
 800a70e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 800a710:	2301      	movs	r3, #1
 800a712:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_NOPULL;
 800a714:	2300      	movs	r3, #0
 800a716:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 800a718:	2300      	movs	r3, #0
 800a71a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed   = GPIO_SPEED_FREQ_LOW;
 800a71c:	2300      	movs	r3, #0
 800a71e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStructure);
 800a720:	f107 030c 	add.w	r3, r7, #12
 800a724:	4619      	mov	r1, r3
 800a726:	480c      	ldr	r0, [pc, #48]	; (800a758 <BSP_LCD_MspInit+0xb0>)
 800a728:	f001 fd88 	bl	800c23c <HAL_GPIO_Init>

  /* Power on the screen (also done in Touch Screen driver ... */
  GPIO_InitStructure.Pin = LCD_PWR_CTRL_PIN;
 800a72c:	2301      	movs	r3, #1
 800a72e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP /*GPIO_MODE_OUTPUT_PP*/;
 800a730:	2301      	movs	r3, #1
 800a732:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull =   GPIO_NOPULL;
 800a734:	2300      	movs	r3, #0
 800a736:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 800a738:	2300      	movs	r3, #0
 800a73a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 800a73c:	2300      	movs	r3, #0
 800a73e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_PWR_CTRL_GPIO_PORT, &GPIO_InitStructure);
 800a740:	f107 030c 	add.w	r3, r7, #12
 800a744:	4619      	mov	r1, r3
 800a746:	4805      	ldr	r0, [pc, #20]	; (800a75c <BSP_LCD_MspInit+0xb4>)
 800a748:	f001 fd78 	bl	800c23c <HAL_GPIO_Init>
}
 800a74c:	bf00      	nop
 800a74e:	3720      	adds	r7, #32
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}
 800a754:	40021000 	.word	0x40021000
 800a758:	48002000 	.word	0x48002000
 800a75c:	48001c00 	.word	0x48001c00

0800a760 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b088      	sub	sp, #32
 800a764:	af00      	add	r7, sp, #0
 800a766:	4603      	mov	r3, r0
 800a768:	603a      	str	r2, [r7, #0]
 800a76a:	80fb      	strh	r3, [r7, #6]
 800a76c:	460b      	mov	r3, r1
 800a76e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800a770:	2300      	movs	r3, #0
 800a772:	61fb      	str	r3, [r7, #28]
 800a774:	2300      	movs	r3, #0
 800a776:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;

  height = DrawProp.pFont->Height;
 800a778:	4b45      	ldr	r3, [pc, #276]	; (800a890 <DrawChar+0x130>)
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	88db      	ldrh	r3, [r3, #6]
 800a77e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 800a780:	4b43      	ldr	r3, [pc, #268]	; (800a890 <DrawChar+0x130>)
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	889b      	ldrh	r3, [r3, #4]
 800a786:	823b      	strh	r3, [r7, #16]

  offset =  8 * ((width + 7) / 8) -  width ;
 800a788:	8a3b      	ldrh	r3, [r7, #16]
 800a78a:	3307      	adds	r3, #7
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	da00      	bge.n	800a792 <DrawChar+0x32>
 800a790:	3307      	adds	r3, #7
 800a792:	10db      	asrs	r3, r3, #3
 800a794:	b2db      	uxtb	r3, r3
 800a796:	00db      	lsls	r3, r3, #3
 800a798:	b2da      	uxtb	r2, r3
 800a79a:	8a3b      	ldrh	r3, [r7, #16]
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	1ad3      	subs	r3, r2, r3
 800a7a0:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	61fb      	str	r3, [r7, #28]
 800a7a6:	e069      	b.n	800a87c <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 800a7a8:	8a3b      	ldrh	r3, [r7, #16]
 800a7aa:	3307      	adds	r3, #7
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	da00      	bge.n	800a7b2 <DrawChar+0x52>
 800a7b0:	3307      	adds	r3, #7
 800a7b2:	10db      	asrs	r3, r3, #3
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	69fb      	ldr	r3, [r7, #28]
 800a7b8:	fb02 f303 	mul.w	r3, r2, r3
 800a7bc:	683a      	ldr	r2, [r7, #0]
 800a7be:	4413      	add	r3, r2
 800a7c0:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 800a7c2:	8a3b      	ldrh	r3, [r7, #16]
 800a7c4:	3307      	adds	r3, #7
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	da00      	bge.n	800a7cc <DrawChar+0x6c>
 800a7ca:	3307      	adds	r3, #7
 800a7cc:	10db      	asrs	r3, r3, #3
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d002      	beq.n	800a7d8 <DrawChar+0x78>
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d004      	beq.n	800a7e0 <DrawChar+0x80>
 800a7d6:	e00c      	b.n	800a7f2 <DrawChar+0x92>
    {
      case 1:
        line =  pchar[0];
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	617b      	str	r3, [r7, #20]
        break;
 800a7de:	e016      	b.n	800a80e <DrawChar+0xae>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	021b      	lsls	r3, r3, #8
 800a7e6:	68ba      	ldr	r2, [r7, #8]
 800a7e8:	3201      	adds	r2, #1
 800a7ea:	7812      	ldrb	r2, [r2, #0]
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	617b      	str	r3, [r7, #20]
        break;
 800a7f0:	e00d      	b.n	800a80e <DrawChar+0xae>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	041a      	lsls	r2, r3, #16
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	021b      	lsls	r3, r3, #8
 800a800:	4313      	orrs	r3, r2
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	3202      	adds	r2, #2
 800a806:	7812      	ldrb	r2, [r2, #0]
 800a808:	4313      	orrs	r3, r2
 800a80a:	617b      	str	r3, [r7, #20]
        break;
 800a80c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800a80e:	2300      	movs	r3, #0
 800a810:	61bb      	str	r3, [r7, #24]
 800a812:	e029      	b.n	800a868 <DrawChar+0x108>
    {
      if ((line & (1 << (width - j + offset - 1))) != 0)
 800a814:	8a3a      	ldrh	r2, [r7, #16]
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	1ad2      	subs	r2, r2, r3
 800a81a:	7bfb      	ldrb	r3, [r7, #15]
 800a81c:	4413      	add	r3, r2
 800a81e:	3b01      	subs	r3, #1
 800a820:	2201      	movs	r2, #1
 800a822:	fa02 f303 	lsl.w	r3, r2, r3
 800a826:	461a      	mov	r2, r3
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	4013      	ands	r3, r2
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d00c      	beq.n	800a84a <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	b29a      	uxth	r2, r3
 800a834:	88fb      	ldrh	r3, [r7, #6]
 800a836:	4413      	add	r3, r2
 800a838:	b29b      	uxth	r3, r3
 800a83a:	4a15      	ldr	r2, [pc, #84]	; (800a890 <DrawChar+0x130>)
 800a83c:	6812      	ldr	r2, [r2, #0]
 800a83e:	b292      	uxth	r2, r2
 800a840:	88b9      	ldrh	r1, [r7, #4]
 800a842:	4618      	mov	r0, r3
 800a844:	f7ff fc12 	bl	800a06c <BSP_LCD_DrawPixel>
 800a848:	e00b      	b.n	800a862 <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 800a84a:	69bb      	ldr	r3, [r7, #24]
 800a84c:	b29a      	uxth	r2, r3
 800a84e:	88fb      	ldrh	r3, [r7, #6]
 800a850:	4413      	add	r3, r2
 800a852:	b29b      	uxth	r3, r3
 800a854:	4a0e      	ldr	r2, [pc, #56]	; (800a890 <DrawChar+0x130>)
 800a856:	6852      	ldr	r2, [r2, #4]
 800a858:	b292      	uxth	r2, r2
 800a85a:	88b9      	ldrh	r1, [r7, #4]
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7ff fc05 	bl	800a06c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800a862:	69bb      	ldr	r3, [r7, #24]
 800a864:	3301      	adds	r3, #1
 800a866:	61bb      	str	r3, [r7, #24]
 800a868:	8a3b      	ldrh	r3, [r7, #16]
 800a86a:	69ba      	ldr	r2, [r7, #24]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d3d1      	bcc.n	800a814 <DrawChar+0xb4>
      }
    }
    Ypos++;
 800a870:	88bb      	ldrh	r3, [r7, #4]
 800a872:	3301      	adds	r3, #1
 800a874:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	3301      	adds	r3, #1
 800a87a:	61fb      	str	r3, [r7, #28]
 800a87c:	8a7b      	ldrh	r3, [r7, #18]
 800a87e:	69fa      	ldr	r2, [r7, #28]
 800a880:	429a      	cmp	r2, r3
 800a882:	d391      	bcc.n	800a7a8 <DrawChar+0x48>
  }
}
 800a884:	bf00      	nop
 800a886:	bf00      	nop
 800a888:	3720      	adds	r7, #32
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	20001170 	.word	0x20001170

0800a894 <BSP_TS_InitEx>:
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @param  orientation : TS_ORIENTATION_LANDSCAPE or TS_ORIENTATION_PORTRAIT
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_InitEx(uint16_t ts_SizeX, uint16_t ts_SizeY, uint8_t  orientation)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	4603      	mov	r3, r0
 800a89c:	80fb      	strh	r3, [r7, #6]
 800a89e:	460b      	mov	r3, r1
 800a8a0:	80bb      	strh	r3, [r7, #4]
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	70fb      	strb	r3, [r7, #3]
  uint8_t ts_status = TS_OK;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	73fb      	strb	r3, [r7, #15]
  uint16_t read_id = 0;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	81bb      	strh	r3, [r7, #12]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 800a8ae:	4b20      	ldr	r3, [pc, #128]	; (800a930 <BSP_TS_InitEx+0x9c>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a20      	ldr	r2, [pc, #128]	; (800a934 <BSP_TS_InitEx+0xa0>)
 800a8b4:	7812      	ldrb	r2, [r2, #0]
 800a8b6:	b292      	uxth	r2, r2
 800a8b8:	4610      	mov	r0, r2
 800a8ba:	4798      	blx	r3

  /* Scan FT6x36 TouchScreen IC controller ID register by I2C Read */
  /* Verify this is a FT6x36, otherwise this is an error case      */

  read_id = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 800a8bc:	4b1c      	ldr	r3, [pc, #112]	; (800a930 <BSP_TS_InitEx+0x9c>)
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	2070      	movs	r0, #112	; 0x70
 800a8c2:	4798      	blx	r3
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	81bb      	strh	r3, [r7, #12]

  if (read_id == FT6x36_ID_VALUE)
 800a8c8:	89bb      	ldrh	r3, [r7, #12]
 800a8ca:	2bcd      	cmp	r3, #205	; 0xcd
 800a8cc:	d12a      	bne.n	800a924 <BSP_TS_InitEx+0x90>
  {
    /* Found FT6x36 : Initialize the TS driver structure */
    tsDriver = &ft6x06_ts_drv;
 800a8ce:	4b1a      	ldr	r3, [pc, #104]	; (800a938 <BSP_TS_InitEx+0xa4>)
 800a8d0:	4a17      	ldr	r2, [pc, #92]	; (800a930 <BSP_TS_InitEx+0x9c>)
 800a8d2:	601a      	str	r2, [r3, #0]

    I2C_Address    = TS_I2C_ADDRESS;
 800a8d4:	4b17      	ldr	r3, [pc, #92]	; (800a934 <BSP_TS_InitEx+0xa0>)
 800a8d6:	2270      	movs	r2, #112	; 0x70
 800a8d8:	701a      	strb	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if (orientation == TS_ORIENTATION_PORTRAIT)
 800a8da:	78fb      	ldrb	r3, [r7, #3]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d106      	bne.n	800a8ee <BSP_TS_InitEx+0x5a>
    {
      tsOrientation = TS_SWAP_X | TS_SWAP_Y;
 800a8e0:	4b16      	ldr	r3, [pc, #88]	; (800a93c <BSP_TS_InitEx+0xa8>)
 800a8e2:	2206      	movs	r2, #6
 800a8e4:	701a      	strb	r2, [r3, #0]
      TS_orientation = TS_ORIENTATION_PORTRAIT;
 800a8e6:	4b16      	ldr	r3, [pc, #88]	; (800a940 <BSP_TS_InitEx+0xac>)
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	701a      	strb	r2, [r3, #0]
 800a8ec:	e005      	b.n	800a8fa <BSP_TS_InitEx+0x66>
    }
    else
    {
      tsOrientation = TS_SWAP_XY | TS_SWAP_Y;
 800a8ee:	4b13      	ldr	r3, [pc, #76]	; (800a93c <BSP_TS_InitEx+0xa8>)
 800a8f0:	220c      	movs	r2, #12
 800a8f2:	701a      	strb	r2, [r3, #0]
      TS_orientation = TS_ORIENTATION_LANDSCAPE;
 800a8f4:	4b12      	ldr	r3, [pc, #72]	; (800a940 <BSP_TS_InitEx+0xac>)
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	701a      	strb	r2, [r3, #0]
    }

    if (ts_status == TS_OK)
 800a8fa:	7bfb      	ldrb	r3, [r7, #15]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d111      	bne.n	800a924 <BSP_TS_InitEx+0x90>
    {
      /* Software reset the TouchScreen */
      tsDriver->Reset(I2C_Address);
 800a900:	4b0d      	ldr	r3, [pc, #52]	; (800a938 <BSP_TS_InitEx+0xa4>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	4a0b      	ldr	r2, [pc, #44]	; (800a934 <BSP_TS_InitEx+0xa0>)
 800a908:	7812      	ldrb	r2, [r2, #0]
 800a90a:	b292      	uxth	r2, r2
 800a90c:	4610      	mov	r0, r2
 800a90e:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      tsDriver->Start(I2C_Address);
 800a910:	4b09      	ldr	r3, [pc, #36]	; (800a938 <BSP_TS_InitEx+0xa4>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	4a07      	ldr	r2, [pc, #28]	; (800a934 <BSP_TS_InitEx+0xa0>)
 800a918:	7812      	ldrb	r2, [r2, #0]
 800a91a:	b292      	uxth	r2, r2
 800a91c:	4610      	mov	r0, r2
 800a91e:	4798      	blx	r3

      return TS_OK;
 800a920:	2300      	movs	r3, #0
 800a922:	e000      	b.n	800a926 <BSP_TS_InitEx+0x92>

    } /* of if(ts_status == TS_OK) */
  }

  return TS_DEVICE_NOT_FOUND;
 800a924:	2303      	movs	r3, #3


}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop
 800a930:	20000194 	.word	0x20000194
 800a934:	20001188 	.word	0x20001188
 800a938:	20001184 	.word	0x20001184
 800a93c:	20000549 	.word	0x20000549
 800a940:	2000054a 	.word	0x2000054a

0800a944 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800a944:	b590      	push	{r4, r7, lr}
 800a946:	b089      	sub	sp, #36	; 0x24
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800a94c:	2300      	movs	r3, #0
 800a94e:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2C_Address);
 800a950:	4b80      	ldr	r3, [pc, #512]	; (800ab54 <BSP_TS_GetState+0x210>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	691b      	ldr	r3, [r3, #16]
 800a956:	4a80      	ldr	r2, [pc, #512]	; (800ab58 <BSP_TS_GetState+0x214>)
 800a958:	7812      	ldrb	r2, [r2, #0]
 800a95a:	b292      	uxth	r2, r2
 800a95c:	4610      	mov	r0, r2
 800a95e:	4798      	blx	r3
 800a960:	4603      	mov	r3, r0
 800a962:	461a      	mov	r2, r3
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	701a      	strb	r2, [r3, #0]
  if (TS_State->touchDetected)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f000 80ec 	beq.w	800ab4a <BSP_TS_GetState+0x206>
  {
    for (index = 0; index < TS_State->touchDetected; index++)
 800a972:	2300      	movs	r3, #0
 800a974:	61fb      	str	r3, [r7, #28]
 800a976:	e0e1      	b.n	800ab3c <BSP_TS_GetState+0x1f8>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 800a978:	4b76      	ldr	r3, [pc, #472]	; (800ab54 <BSP_TS_GetState+0x210>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	4a76      	ldr	r2, [pc, #472]	; (800ab58 <BSP_TS_GetState+0x214>)
 800a980:	7812      	ldrb	r2, [r2, #0]
 800a982:	b290      	uxth	r0, r2
 800a984:	f107 0110 	add.w	r1, r7, #16
 800a988:	69fa      	ldr	r2, [r7, #28]
 800a98a:	0052      	lsls	r2, r2, #1
 800a98c:	188c      	adds	r4, r1, r2
 800a98e:	f107 010c 	add.w	r1, r7, #12
 800a992:	69fa      	ldr	r2, [r7, #28]
 800a994:	0052      	lsls	r2, r2, #1
 800a996:	440a      	add	r2, r1
 800a998:	4621      	mov	r1, r4
 800a99a:	4798      	blx	r3

      if (tsOrientation & TS_SWAP_XY)
 800a99c:	4b6f      	ldr	r3, [pc, #444]	; (800ab5c <BSP_TS_GetState+0x218>)
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	f003 0308 	and.w	r3, r3, #8
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d019      	beq.n	800a9dc <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 800a9a8:	69fb      	ldr	r3, [r7, #28]
 800a9aa:	005b      	lsls	r3, r3, #1
 800a9ac:	3320      	adds	r3, #32
 800a9ae:	443b      	add	r3, r7
 800a9b0:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800a9b4:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index];
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	005b      	lsls	r3, r3, #1
 800a9ba:	3320      	adds	r3, #32
 800a9bc:	443b      	add	r3, r7
 800a9be:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	005b      	lsls	r3, r3, #1
 800a9c6:	3320      	adds	r3, #32
 800a9c8:	443b      	add	r3, r7
 800a9ca:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	005b      	lsls	r3, r3, #1
 800a9d2:	3320      	adds	r3, #32
 800a9d4:	443b      	add	r3, r7
 800a9d6:	8b3a      	ldrh	r2, [r7, #24]
 800a9d8:	f823 2c14 	strh.w	r2, [r3, #-20]
      }

      if (tsOrientation & TS_SWAP_X)
 800a9dc:	4b5f      	ldr	r3, [pc, #380]	; (800ab5c <BSP_TS_GetState+0x218>)
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	f003 0302 	and.w	r3, r3, #2
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00e      	beq.n	800aa06 <BSP_TS_GetState+0xc2>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH_HEIGHT - 1 - Raw_x[index];
 800a9e8:	69fb      	ldr	r3, [r7, #28]
 800a9ea:	005b      	lsls	r3, r3, #1
 800a9ec:	3320      	adds	r3, #32
 800a9ee:	443b      	add	r3, r7
 800a9f0:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800a9f4:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800a9f8:	b29a      	uxth	r2, r3
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	005b      	lsls	r3, r3, #1
 800a9fe:	3320      	adds	r3, #32
 800aa00:	443b      	add	r3, r7
 800aa02:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if (tsOrientation & TS_SWAP_Y)
 800aa06:	4b55      	ldr	r3, [pc, #340]	; (800ab5c <BSP_TS_GetState+0x218>)
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	f003 0304 	and.w	r3, r3, #4
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00e      	beq.n	800aa30 <BSP_TS_GetState+0xec>
      {
        Raw_y[index] = FT_6206_MAX_WIDTH_HEIGHT - 1 - Raw_y[index];
 800aa12:	69fb      	ldr	r3, [r7, #28]
 800aa14:	005b      	lsls	r3, r3, #1
 800aa16:	3320      	adds	r3, #32
 800aa18:	443b      	add	r3, r7
 800aa1a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800aa1e:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800aa22:	b29a      	uxth	r2, r3
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	005b      	lsls	r3, r3, #1
 800aa28:	3320      	adds	r3, #32
 800aa2a:	443b      	add	r3, r7
 800aa2c:	f823 2c14 	strh.w	r2, [r3, #-20]
      }

      xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	005b      	lsls	r3, r3, #1
 800aa34:	3320      	adds	r3, #32
 800aa36:	443b      	add	r3, r7
 800aa38:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	4a48      	ldr	r2, [pc, #288]	; (800ab60 <BSP_TS_GetState+0x21c>)
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa46:	4299      	cmp	r1, r3
 800aa48:	d90d      	bls.n	800aa66 <BSP_TS_GetState+0x122>
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	005b      	lsls	r3, r3, #1
 800aa4e:	3320      	adds	r3, #32
 800aa50:	443b      	add	r3, r7
 800aa52:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800aa56:	4942      	ldr	r1, [pc, #264]	; (800ab60 <BSP_TS_GetState+0x21c>)
 800aa58:	69fb      	ldr	r3, [r7, #28]
 800aa5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	1ad3      	subs	r3, r2, r3
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	e00c      	b.n	800aa80 <BSP_TS_GetState+0x13c>
 800aa66:	4a3e      	ldr	r2, [pc, #248]	; (800ab60 <BSP_TS_GetState+0x21c>)
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa6e:	b29a      	uxth	r2, r3
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	005b      	lsls	r3, r3, #1
 800aa74:	3320      	adds	r3, #32
 800aa76:	443b      	add	r3, r7
 800aa78:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800aa7c:	1ad3      	subs	r3, r2, r3
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	005b      	lsls	r3, r3, #1
 800aa86:	3320      	adds	r3, #32
 800aa88:	443b      	add	r3, r7
 800aa8a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800aa8e:	4619      	mov	r1, r3
 800aa90:	4a34      	ldr	r2, [pc, #208]	; (800ab64 <BSP_TS_GetState+0x220>)
 800aa92:	69fb      	ldr	r3, [r7, #28]
 800aa94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa98:	4299      	cmp	r1, r3
 800aa9a:	d90d      	bls.n	800aab8 <BSP_TS_GetState+0x174>
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	005b      	lsls	r3, r3, #1
 800aaa0:	3320      	adds	r3, #32
 800aaa2:	443b      	add	r3, r7
 800aaa4:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800aaa8:	492e      	ldr	r1, [pc, #184]	; (800ab64 <BSP_TS_GetState+0x220>)
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	1ad3      	subs	r3, r2, r3
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	e00c      	b.n	800aad2 <BSP_TS_GetState+0x18e>
 800aab8:	4a2a      	ldr	r2, [pc, #168]	; (800ab64 <BSP_TS_GetState+0x220>)
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aac0:	b29a      	uxth	r2, r3
 800aac2:	69fb      	ldr	r3, [r7, #28]
 800aac4:	005b      	lsls	r3, r3, #1
 800aac6:	3320      	adds	r3, #32
 800aac8:	443b      	add	r3, r7
 800aaca:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800aace:	1ad3      	subs	r3, r2, r3
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 800aad4:	8afa      	ldrh	r2, [r7, #22]
 800aad6:	8abb      	ldrh	r3, [r7, #20]
 800aad8:	4413      	add	r3, r2
 800aada:	2b05      	cmp	r3, #5
 800aadc:	dd15      	ble.n	800ab0a <BSP_TS_GetState+0x1c6>
      {
        _x[index] = Raw_x[index];
 800aade:	69fb      	ldr	r3, [r7, #28]
 800aae0:	005b      	lsls	r3, r3, #1
 800aae2:	3320      	adds	r3, #32
 800aae4:	443b      	add	r3, r7
 800aae6:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800aaea:	4619      	mov	r1, r3
 800aaec:	4a1c      	ldr	r2, [pc, #112]	; (800ab60 <BSP_TS_GetState+0x21c>)
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	005b      	lsls	r3, r3, #1
 800aaf8:	3320      	adds	r3, #32
 800aafa:	443b      	add	r3, r7
 800aafc:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800ab00:	4619      	mov	r1, r3
 800ab02:	4a18      	ldr	r2, [pc, #96]	; (800ab64 <BSP_TS_GetState+0x220>)
 800ab04:	69fb      	ldr	r3, [r7, #28]
 800ab06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 800ab0a:	4a15      	ldr	r2, [pc, #84]	; (800ab60 <BSP_TS_GetState+0x21c>)
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab12:	b299      	uxth	r1, r3
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	69fb      	ldr	r3, [r7, #28]
 800ab18:	005b      	lsls	r3, r3, #1
 800ab1a:	4413      	add	r3, r2
 800ab1c:	460a      	mov	r2, r1
 800ab1e:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 800ab20:	4a10      	ldr	r2, [pc, #64]	; (800ab64 <BSP_TS_GetState+0x220>)
 800ab22:	69fb      	ldr	r3, [r7, #28]
 800ab24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab28:	b299      	uxth	r1, r3
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	005b      	lsls	r3, r3, #1
 800ab30:	4413      	add	r3, r2
 800ab32:	460a      	mov	r2, r1
 800ab34:	80da      	strh	r2, [r3, #6]
    for (index = 0; index < TS_State->touchDetected; index++)
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	61fb      	str	r3, [r7, #28]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	461a      	mov	r2, r3
 800ab42:	69fb      	ldr	r3, [r7, #28]
 800ab44:	4293      	cmp	r3, r2
 800ab46:	f4ff af17 	bcc.w	800a978 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800ab4a:	7efb      	ldrb	r3, [r7, #27]
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3724      	adds	r7, #36	; 0x24
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd90      	pop	{r4, r7, pc}
 800ab54:	20001184 	.word	0x20001184
 800ab58:	20001188 	.word	0x20001188
 800ab5c:	20000549 	.word	0x20000549
 800ab60:	2000118c 	.word	0x2000118c
 800ab64:	20001194 	.word	0x20001194

0800ab68 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ab72:	2003      	movs	r0, #3
 800ab74:	f001 f980 	bl	800be78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ab78:	2000      	movs	r0, #0
 800ab7a:	f000 f80d 	bl	800ab98 <HAL_InitTick>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d002      	beq.n	800ab8a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800ab84:	2301      	movs	r3, #1
 800ab86:	71fb      	strb	r3, [r7, #7]
 800ab88:	e001      	b.n	800ab8e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800ab8a:	f7f7 fb3f 	bl	800220c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800ab8e:	79fb      	ldrb	r3, [r7, #7]
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3708      	adds	r7, #8
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}

0800ab98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b084      	sub	sp, #16
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800aba0:	2300      	movs	r3, #0
 800aba2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800aba4:	4b17      	ldr	r3, [pc, #92]	; (800ac04 <HAL_InitTick+0x6c>)
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d023      	beq.n	800abf4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800abac:	4b16      	ldr	r3, [pc, #88]	; (800ac08 <HAL_InitTick+0x70>)
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	4b14      	ldr	r3, [pc, #80]	; (800ac04 <HAL_InitTick+0x6c>)
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	4619      	mov	r1, r3
 800abb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800abba:	fbb3 f3f1 	udiv	r3, r3, r1
 800abbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800abc2:	4618      	mov	r0, r3
 800abc4:	f001 f99b 	bl	800befe <HAL_SYSTICK_Config>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d10f      	bne.n	800abee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2b0f      	cmp	r3, #15
 800abd2:	d809      	bhi.n	800abe8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800abd4:	2200      	movs	r2, #0
 800abd6:	6879      	ldr	r1, [r7, #4]
 800abd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abdc:	f001 f957 	bl	800be8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800abe0:	4a0a      	ldr	r2, [pc, #40]	; (800ac0c <HAL_InitTick+0x74>)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6013      	str	r3, [r2, #0]
 800abe6:	e007      	b.n	800abf8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800abe8:	2301      	movs	r3, #1
 800abea:	73fb      	strb	r3, [r7, #15]
 800abec:	e004      	b.n	800abf8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	73fb      	strb	r3, [r7, #15]
 800abf2:	e001      	b.n	800abf8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800abf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	20000550 	.word	0x20000550
 800ac08:	20000190 	.word	0x20000190
 800ac0c:	2000054c 	.word	0x2000054c

0800ac10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ac10:	b480      	push	{r7}
 800ac12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800ac14:	4b06      	ldr	r3, [pc, #24]	; (800ac30 <HAL_IncTick+0x20>)
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	461a      	mov	r2, r3
 800ac1a:	4b06      	ldr	r3, [pc, #24]	; (800ac34 <HAL_IncTick+0x24>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4413      	add	r3, r2
 800ac20:	4a04      	ldr	r2, [pc, #16]	; (800ac34 <HAL_IncTick+0x24>)
 800ac22:	6013      	str	r3, [r2, #0]
}
 800ac24:	bf00      	nop
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	20000550 	.word	0x20000550
 800ac34:	2000119c 	.word	0x2000119c

0800ac38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	af00      	add	r7, sp, #0
  return uwTick;
 800ac3c:	4b03      	ldr	r3, [pc, #12]	; (800ac4c <HAL_GetTick+0x14>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr
 800ac4a:	bf00      	nop
 800ac4c:	2000119c 	.word	0x2000119c

0800ac50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ac58:	f7ff ffee 	bl	800ac38 <HAL_GetTick>
 800ac5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac68:	d005      	beq.n	800ac76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800ac6a:	4b0a      	ldr	r3, [pc, #40]	; (800ac94 <HAL_Delay+0x44>)
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	461a      	mov	r2, r3
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	4413      	add	r3, r2
 800ac74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800ac76:	bf00      	nop
 800ac78:	f7ff ffde 	bl	800ac38 <HAL_GetTick>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	1ad3      	subs	r3, r2, r3
 800ac82:	68fa      	ldr	r2, [r7, #12]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d8f7      	bhi.n	800ac78 <HAL_Delay+0x28>
  {
  }
}
 800ac88:	bf00      	nop
 800ac8a:	bf00      	nop
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	20000550 	.word	0x20000550

0800ac98 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800ac9c:	4b05      	ldr	r3, [pc, #20]	; (800acb4 <HAL_SuspendTick+0x1c>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a04      	ldr	r2, [pc, #16]	; (800acb4 <HAL_SuspendTick+0x1c>)
 800aca2:	f023 0302 	bic.w	r3, r3, #2
 800aca6:	6013      	str	r3, [r2, #0]
}
 800aca8:	bf00      	nop
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr
 800acb2:	bf00      	nop
 800acb4:	e000e010 	.word	0xe000e010

0800acb8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800acb8:	b480      	push	{r7}
 800acba:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800acbc:	4b05      	ldr	r3, [pc, #20]	; (800acd4 <HAL_ResumeTick+0x1c>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a04      	ldr	r2, [pc, #16]	; (800acd4 <HAL_ResumeTick+0x1c>)
 800acc2:	f043 0302 	orr.w	r3, r3, #2
 800acc6:	6013      	str	r3, [r2, #0]
}
 800acc8:	bf00      	nop
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	e000e010 	.word	0xe000e010

0800acd8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	431a      	orrs	r2, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	609a      	str	r2, [r3, #8]
}
 800acf2:	bf00      	nop
 800acf4:	370c      	adds	r7, #12
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr

0800acfe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800acfe:	b480      	push	{r7}
 800ad00:	b083      	sub	sp, #12
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
 800ad06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	689b      	ldr	r3, [r3, #8]
 800ad0c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	431a      	orrs	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	609a      	str	r2, [r3, #8]
}
 800ad18:	bf00      	nop
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr

0800ad24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	370c      	adds	r7, #12
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr

0800ad40 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b087      	sub	sp, #28
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	607a      	str	r2, [r7, #4]
 800ad4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	3360      	adds	r3, #96	; 0x60
 800ad52:	461a      	mov	r2, r3
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	4413      	add	r3, r2
 800ad5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	4b08      	ldr	r3, [pc, #32]	; (800ad84 <LL_ADC_SetOffset+0x44>)
 800ad62:	4013      	ands	r3, r2
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800ad6a:	683a      	ldr	r2, [r7, #0]
 800ad6c:	430a      	orrs	r2, r1
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800ad78:	bf00      	nop
 800ad7a:	371c      	adds	r7, #28
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad82:	4770      	bx	lr
 800ad84:	03fff000 	.word	0x03fff000

0800ad88 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	3360      	adds	r3, #96	; 0x60
 800ad96:	461a      	mov	r2, r3
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	4413      	add	r3, r2
 800ad9e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3714      	adds	r7, #20
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b087      	sub	sp, #28
 800adb8:	af00      	add	r7, sp, #0
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	60b9      	str	r1, [r7, #8]
 800adbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	3360      	adds	r3, #96	; 0x60
 800adc4:	461a      	mov	r2, r3
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	4413      	add	r3, r2
 800adcc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	431a      	orrs	r2, r3
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800adde:	bf00      	nop
 800ade0:	371c      	adds	r7, #28
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr

0800adea <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800adea:	b480      	push	{r7}
 800adec:	b083      	sub	sp, #12
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
 800adf2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	695b      	ldr	r3, [r3, #20]
 800adf8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	431a      	orrs	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	615a      	str	r2, [r3, #20]
}
 800ae04:	bf00      	nop
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b087      	sub	sp, #28
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	60f8      	str	r0, [r7, #12]
 800ae18:	60b9      	str	r1, [r7, #8]
 800ae1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	3330      	adds	r3, #48	; 0x30
 800ae20:	461a      	mov	r2, r3
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	0a1b      	lsrs	r3, r3, #8
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	f003 030c 	and.w	r3, r3, #12
 800ae2c:	4413      	add	r3, r2
 800ae2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	f003 031f 	and.w	r3, r3, #31
 800ae3a:	211f      	movs	r1, #31
 800ae3c:	fa01 f303 	lsl.w	r3, r1, r3
 800ae40:	43db      	mvns	r3, r3
 800ae42:	401a      	ands	r2, r3
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	0e9b      	lsrs	r3, r3, #26
 800ae48:	f003 011f 	and.w	r1, r3, #31
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	f003 031f 	and.w	r3, r3, #31
 800ae52:	fa01 f303 	lsl.w	r3, r1, r3
 800ae56:	431a      	orrs	r2, r3
 800ae58:	697b      	ldr	r3, [r7, #20]
 800ae5a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800ae5c:	bf00      	nop
 800ae5e:	371c      	adds	r7, #28
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b087      	sub	sp, #28
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	60f8      	str	r0, [r7, #12]
 800ae70:	60b9      	str	r1, [r7, #8]
 800ae72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	3314      	adds	r3, #20
 800ae78:	461a      	mov	r2, r3
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	0e5b      	lsrs	r3, r3, #25
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	f003 0304 	and.w	r3, r3, #4
 800ae84:	4413      	add	r3, r2
 800ae86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	0d1b      	lsrs	r3, r3, #20
 800ae90:	f003 031f 	and.w	r3, r3, #31
 800ae94:	2107      	movs	r1, #7
 800ae96:	fa01 f303 	lsl.w	r3, r1, r3
 800ae9a:	43db      	mvns	r3, r3
 800ae9c:	401a      	ands	r2, r3
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	0d1b      	lsrs	r3, r3, #20
 800aea2:	f003 031f 	and.w	r3, r3, #31
 800aea6:	6879      	ldr	r1, [r7, #4]
 800aea8:	fa01 f303 	lsl.w	r3, r1, r3
 800aeac:	431a      	orrs	r2, r3
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800aeb2:	bf00      	nop
 800aeb4:	371c      	adds	r7, #28
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
	...

0800aec0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b085      	sub	sp, #20
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	60f8      	str	r0, [r7, #12]
 800aec8:	60b9      	str	r1, [r7, #8]
 800aeca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aed8:	43db      	mvns	r3, r3
 800aeda:	401a      	ands	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f003 0318 	and.w	r3, r3, #24
 800aee2:	4908      	ldr	r1, [pc, #32]	; (800af04 <LL_ADC_SetChannelSingleDiff+0x44>)
 800aee4:	40d9      	lsrs	r1, r3
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	400b      	ands	r3, r1
 800aeea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aeee:	431a      	orrs	r2, r3
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800aef6:	bf00      	nop
 800aef8:	3714      	adds	r7, #20
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop
 800af04:	0007ffff 	.word	0x0007ffff

0800af08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800af18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	6093      	str	r3, [r2, #8]
}
 800af20:	bf00      	nop
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af40:	d101      	bne.n	800af46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800af42:	2301      	movs	r3, #1
 800af44:	e000      	b.n	800af48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800af64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800af68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800af70:	bf00      	nop
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af90:	d101      	bne.n	800af96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800af92:	2301      	movs	r3, #1
 800af94:	e000      	b.n	800af98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	370c      	adds	r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr

0800afa4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	f003 0301 	and.w	r3, r3, #1
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d101      	bne.n	800afbc <LL_ADC_IsEnabled+0x18>
 800afb8:	2301      	movs	r3, #1
 800afba:	e000      	b.n	800afbe <LL_ADC_IsEnabled+0x1a>
 800afbc:	2300      	movs	r3, #0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	370c      	adds	r7, #12
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr

0800afca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800afca:	b480      	push	{r7}
 800afcc:	b083      	sub	sp, #12
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	689b      	ldr	r3, [r3, #8]
 800afd6:	f003 0304 	and.w	r3, r3, #4
 800afda:	2b04      	cmp	r3, #4
 800afdc:	d101      	bne.n	800afe2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800afde:	2301      	movs	r3, #1
 800afe0:	e000      	b.n	800afe4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800afe2:	2300      	movs	r3, #0
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b083      	sub	sp, #12
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	f003 0308 	and.w	r3, r3, #8
 800b000:	2b08      	cmp	r3, #8
 800b002:	d101      	bne.n	800b008 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800b004:	2301      	movs	r3, #1
 800b006:	e000      	b.n	800b00a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	370c      	adds	r7, #12
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
	...

0800b018 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b018:	b590      	push	{r4, r7, lr}
 800b01a:	b089      	sub	sp, #36	; 0x24
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b020:	2300      	movs	r3, #0
 800b022:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800b024:	2300      	movs	r3, #0
 800b026:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d101      	bne.n	800b032 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800b02e:	2301      	movs	r3, #1
 800b030:	e139      	b.n	800b2a6 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	691b      	ldr	r3, [r3, #16]
 800b036:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d109      	bne.n	800b054 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f7f5 fbe5 	bl	8000810 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2200      	movs	r2, #0
 800b050:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4618      	mov	r0, r3
 800b05a:	f7ff ff67 	bl	800af2c <LL_ADC_IsDeepPowerDownEnabled>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d004      	beq.n	800b06e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4618      	mov	r0, r3
 800b06a:	f7ff ff4d 	bl	800af08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4618      	mov	r0, r3
 800b074:	f7ff ff82 	bl	800af7c <LL_ADC_IsInternalRegulatorEnabled>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d115      	bne.n	800b0aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4618      	mov	r0, r3
 800b084:	f7ff ff66 	bl	800af54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b088:	4b89      	ldr	r3, [pc, #548]	; (800b2b0 <HAL_ADC_Init+0x298>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	099b      	lsrs	r3, r3, #6
 800b08e:	4a89      	ldr	r2, [pc, #548]	; (800b2b4 <HAL_ADC_Init+0x29c>)
 800b090:	fba2 2303 	umull	r2, r3, r2, r3
 800b094:	099b      	lsrs	r3, r3, #6
 800b096:	3301      	adds	r3, #1
 800b098:	005b      	lsls	r3, r3, #1
 800b09a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800b09c:	e002      	b.n	800b0a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d1f9      	bne.n	800b09e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f7ff ff64 	bl	800af7c <LL_ADC_IsInternalRegulatorEnabled>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d10d      	bne.n	800b0d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0be:	f043 0210 	orr.w	r2, r3, #16
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0ca:	f043 0201 	orr.w	r2, r3, #1
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7ff ff75 	bl	800afca <LL_ADC_REG_IsConversionOngoing>
 800b0e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0e6:	f003 0310 	and.w	r3, r3, #16
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	f040 80d2 	bne.w	800b294 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f040 80ce 	bne.w	800b294 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800b100:	f043 0202 	orr.w	r2, r3, #2
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7ff ff49 	bl	800afa4 <LL_ADC_IsEnabled>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d115      	bne.n	800b144 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b118:	4867      	ldr	r0, [pc, #412]	; (800b2b8 <HAL_ADC_Init+0x2a0>)
 800b11a:	f7ff ff43 	bl	800afa4 <LL_ADC_IsEnabled>
 800b11e:	4604      	mov	r4, r0
 800b120:	4866      	ldr	r0, [pc, #408]	; (800b2bc <HAL_ADC_Init+0x2a4>)
 800b122:	f7ff ff3f 	bl	800afa4 <LL_ADC_IsEnabled>
 800b126:	4603      	mov	r3, r0
 800b128:	431c      	orrs	r4, r3
 800b12a:	4865      	ldr	r0, [pc, #404]	; (800b2c0 <HAL_ADC_Init+0x2a8>)
 800b12c:	f7ff ff3a 	bl	800afa4 <LL_ADC_IsEnabled>
 800b130:	4603      	mov	r3, r0
 800b132:	4323      	orrs	r3, r4
 800b134:	2b00      	cmp	r3, #0
 800b136:	d105      	bne.n	800b144 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	4619      	mov	r1, r3
 800b13e:	4861      	ldr	r0, [pc, #388]	; (800b2c4 <HAL_ADC_Init+0x2ac>)
 800b140:	f7ff fdca 	bl	800acd8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	7e5b      	ldrb	r3, [r3, #25]
 800b148:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b14e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800b154:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800b15a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b162:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b164:	4313      	orrs	r3, r2
 800b166:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d106      	bne.n	800b180 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b176:	3b01      	subs	r3, #1
 800b178:	045b      	lsls	r3, r3, #17
 800b17a:	69ba      	ldr	r2, [r7, #24]
 800b17c:	4313      	orrs	r3, r2
 800b17e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b184:	2b00      	cmp	r3, #0
 800b186:	d009      	beq.n	800b19c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b18c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b194:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b196:	69ba      	ldr	r2, [r7, #24]
 800b198:	4313      	orrs	r3, r2
 800b19a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	68da      	ldr	r2, [r3, #12]
 800b1a2:	4b49      	ldr	r3, [pc, #292]	; (800b2c8 <HAL_ADC_Init+0x2b0>)
 800b1a4:	4013      	ands	r3, r2
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	6812      	ldr	r2, [r2, #0]
 800b1aa:	69b9      	ldr	r1, [r7, #24]
 800b1ac:	430b      	orrs	r3, r1
 800b1ae:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7ff ff08 	bl	800afca <LL_ADC_REG_IsConversionOngoing>
 800b1ba:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7ff ff15 	bl	800aff0 <LL_ADC_INJ_IsConversionOngoing>
 800b1c6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d140      	bne.n	800b250 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d13d      	bne.n	800b250 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	7e1b      	ldrb	r3, [r3, #24]
 800b1dc:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800b1de:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b1e6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	68db      	ldr	r3, [r3, #12]
 800b1f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1f6:	f023 0306 	bic.w	r3, r3, #6
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	6812      	ldr	r2, [r2, #0]
 800b1fe:	69b9      	ldr	r1, [r7, #24]
 800b200:	430b      	orrs	r3, r1
 800b202:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	d118      	bne.n	800b240 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	691b      	ldr	r3, [r3, #16]
 800b214:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b218:	f023 0304 	bic.w	r3, r3, #4
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b224:	4311      	orrs	r1, r2
 800b226:	687a      	ldr	r2, [r7, #4]
 800b228:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b22a:	4311      	orrs	r1, r2
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b230:	430a      	orrs	r2, r1
 800b232:	431a      	orrs	r2, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f042 0201 	orr.w	r2, r2, #1
 800b23c:	611a      	str	r2, [r3, #16]
 800b23e:	e007      	b.n	800b250 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	691a      	ldr	r2, [r3, #16]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f022 0201 	bic.w	r2, r2, #1
 800b24e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	691b      	ldr	r3, [r3, #16]
 800b254:	2b01      	cmp	r3, #1
 800b256:	d10c      	bne.n	800b272 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b25e:	f023 010f 	bic.w	r1, r3, #15
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	69db      	ldr	r3, [r3, #28]
 800b266:	1e5a      	subs	r2, r3, #1
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	430a      	orrs	r2, r1
 800b26e:	631a      	str	r2, [r3, #48]	; 0x30
 800b270:	e007      	b.n	800b282 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f022 020f 	bic.w	r2, r2, #15
 800b280:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b286:	f023 0303 	bic.w	r3, r3, #3
 800b28a:	f043 0201 	orr.w	r2, r3, #1
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	659a      	str	r2, [r3, #88]	; 0x58
 800b292:	e007      	b.n	800b2a4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b298:	f043 0210 	orr.w	r2, r3, #16
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b2a4:	7ffb      	ldrb	r3, [r7, #31]
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3724      	adds	r7, #36	; 0x24
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd90      	pop	{r4, r7, pc}
 800b2ae:	bf00      	nop
 800b2b0:	20000190 	.word	0x20000190
 800b2b4:	053e2d63 	.word	0x053e2d63
 800b2b8:	50040000 	.word	0x50040000
 800b2bc:	50040100 	.word	0x50040100
 800b2c0:	50040200 	.word	0x50040200
 800b2c4:	50040300 	.word	0x50040300
 800b2c8:	fff0c007 	.word	0xfff0c007

0800b2cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b0b6      	sub	sp, #216	; 0xd8
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d101      	bne.n	800b2ee <HAL_ADC_ConfigChannel+0x22>
 800b2ea:	2302      	movs	r3, #2
 800b2ec:	e3e3      	b.n	800bab6 <HAL_ADC_ConfigChannel+0x7ea>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7ff fe65 	bl	800afca <LL_ADC_REG_IsConversionOngoing>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	f040 83c4 	bne.w	800ba90 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	2b05      	cmp	r3, #5
 800b30e:	d824      	bhi.n	800b35a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	3b02      	subs	r3, #2
 800b316:	2b03      	cmp	r3, #3
 800b318:	d81b      	bhi.n	800b352 <HAL_ADC_ConfigChannel+0x86>
 800b31a:	a201      	add	r2, pc, #4	; (adr r2, 800b320 <HAL_ADC_ConfigChannel+0x54>)
 800b31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b320:	0800b331 	.word	0x0800b331
 800b324:	0800b339 	.word	0x0800b339
 800b328:	0800b341 	.word	0x0800b341
 800b32c:	0800b349 	.word	0x0800b349
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	220c      	movs	r2, #12
 800b334:	605a      	str	r2, [r3, #4]
          break;
 800b336:	e011      	b.n	800b35c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	2212      	movs	r2, #18
 800b33c:	605a      	str	r2, [r3, #4]
          break;
 800b33e:	e00d      	b.n	800b35c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	2218      	movs	r2, #24
 800b344:	605a      	str	r2, [r3, #4]
          break;
 800b346:	e009      	b.n	800b35c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b34e:	605a      	str	r2, [r3, #4]
          break;
 800b350:	e004      	b.n	800b35c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	2206      	movs	r2, #6
 800b356:	605a      	str	r2, [r3, #4]
          break;
 800b358:	e000      	b.n	800b35c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800b35a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6818      	ldr	r0, [r3, #0]
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	6859      	ldr	r1, [r3, #4]
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	461a      	mov	r2, r3
 800b36a:	f7ff fd51 	bl	800ae10 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4618      	mov	r0, r3
 800b374:	f7ff fe29 	bl	800afca <LL_ADC_REG_IsConversionOngoing>
 800b378:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4618      	mov	r0, r3
 800b382:	f7ff fe35 	bl	800aff0 <LL_ADC_INJ_IsConversionOngoing>
 800b386:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b38a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f040 81c1 	bne.w	800b716 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b394:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b398:	2b00      	cmp	r3, #0
 800b39a:	f040 81bc 	bne.w	800b716 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3a6:	d10f      	bne.n	800b3c8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6818      	ldr	r0, [r3, #0]
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	f7ff fd58 	bl	800ae68 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7ff fd12 	bl	800adea <LL_ADC_SetSamplingTimeCommonConfig>
 800b3c6:	e00e      	b.n	800b3e6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6818      	ldr	r0, [r3, #0]
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	6819      	ldr	r1, [r3, #0]
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	f7ff fd47 	bl	800ae68 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2100      	movs	r1, #0
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	f7ff fd02 	bl	800adea <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	695a      	ldr	r2, [r3, #20]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	08db      	lsrs	r3, r3, #3
 800b3f2:	f003 0303 	and.w	r3, r3, #3
 800b3f6:	005b      	lsls	r3, r3, #1
 800b3f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	691b      	ldr	r3, [r3, #16]
 800b404:	2b04      	cmp	r3, #4
 800b406:	d00a      	beq.n	800b41e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6818      	ldr	r0, [r3, #0]
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	6919      	ldr	r1, [r3, #16]
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b418:	f7ff fc92 	bl	800ad40 <LL_ADC_SetOffset>
 800b41c:	e17b      	b.n	800b716 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	2100      	movs	r1, #0
 800b424:	4618      	mov	r0, r3
 800b426:	f7ff fcaf 	bl	800ad88 <LL_ADC_GetOffsetChannel>
 800b42a:	4603      	mov	r3, r0
 800b42c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b430:	2b00      	cmp	r3, #0
 800b432:	d10a      	bne.n	800b44a <HAL_ADC_ConfigChannel+0x17e>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2100      	movs	r1, #0
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7ff fca4 	bl	800ad88 <LL_ADC_GetOffsetChannel>
 800b440:	4603      	mov	r3, r0
 800b442:	0e9b      	lsrs	r3, r3, #26
 800b444:	f003 021f 	and.w	r2, r3, #31
 800b448:	e01e      	b.n	800b488 <HAL_ADC_ConfigChannel+0x1bc>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	2100      	movs	r1, #0
 800b450:	4618      	mov	r0, r3
 800b452:	f7ff fc99 	bl	800ad88 <LL_ADC_GetOffsetChannel>
 800b456:	4603      	mov	r3, r0
 800b458:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b45c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b460:	fa93 f3a3 	rbit	r3, r3
 800b464:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b468:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b46c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800b470:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b474:	2b00      	cmp	r3, #0
 800b476:	d101      	bne.n	800b47c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800b478:	2320      	movs	r3, #32
 800b47a:	e004      	b.n	800b486 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800b47c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b480:	fab3 f383 	clz	r3, r3
 800b484:	b2db      	uxtb	r3, r3
 800b486:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b490:	2b00      	cmp	r3, #0
 800b492:	d105      	bne.n	800b4a0 <HAL_ADC_ConfigChannel+0x1d4>
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	0e9b      	lsrs	r3, r3, #26
 800b49a:	f003 031f 	and.w	r3, r3, #31
 800b49e:	e018      	b.n	800b4d2 <HAL_ADC_ConfigChannel+0x206>
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b4a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b4ac:	fa93 f3a3 	rbit	r3, r3
 800b4b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800b4b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800b4bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d101      	bne.n	800b4c8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800b4c4:	2320      	movs	r3, #32
 800b4c6:	e004      	b.n	800b4d2 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800b4c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b4cc:	fab3 f383 	clz	r3, r3
 800b4d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d106      	bne.n	800b4e4 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	2100      	movs	r1, #0
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7ff fc68 	bl	800adb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2101      	movs	r1, #1
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7ff fc4c 	bl	800ad88 <LL_ADC_GetOffsetChannel>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d10a      	bne.n	800b510 <HAL_ADC_ConfigChannel+0x244>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	2101      	movs	r1, #1
 800b500:	4618      	mov	r0, r3
 800b502:	f7ff fc41 	bl	800ad88 <LL_ADC_GetOffsetChannel>
 800b506:	4603      	mov	r3, r0
 800b508:	0e9b      	lsrs	r3, r3, #26
 800b50a:	f003 021f 	and.w	r2, r3, #31
 800b50e:	e01e      	b.n	800b54e <HAL_ADC_ConfigChannel+0x282>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2101      	movs	r1, #1
 800b516:	4618      	mov	r0, r3
 800b518:	f7ff fc36 	bl	800ad88 <LL_ADC_GetOffsetChannel>
 800b51c:	4603      	mov	r3, r0
 800b51e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b522:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b526:	fa93 f3a3 	rbit	r3, r3
 800b52a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800b52e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b532:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800b536:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d101      	bne.n	800b542 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800b53e:	2320      	movs	r3, #32
 800b540:	e004      	b.n	800b54c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800b542:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b546:	fab3 f383 	clz	r3, r3
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b556:	2b00      	cmp	r3, #0
 800b558:	d105      	bne.n	800b566 <HAL_ADC_ConfigChannel+0x29a>
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	0e9b      	lsrs	r3, r3, #26
 800b560:	f003 031f 	and.w	r3, r3, #31
 800b564:	e018      	b.n	800b598 <HAL_ADC_ConfigChannel+0x2cc>
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b56e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b572:	fa93 f3a3 	rbit	r3, r3
 800b576:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800b57a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b57e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800b582:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b586:	2b00      	cmp	r3, #0
 800b588:	d101      	bne.n	800b58e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800b58a:	2320      	movs	r3, #32
 800b58c:	e004      	b.n	800b598 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800b58e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b592:	fab3 f383 	clz	r3, r3
 800b596:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b598:	429a      	cmp	r2, r3
 800b59a:	d106      	bne.n	800b5aa <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	2101      	movs	r1, #1
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7ff fc05 	bl	800adb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2102      	movs	r1, #2
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7ff fbe9 	bl	800ad88 <LL_ADC_GetOffsetChannel>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d10a      	bne.n	800b5d6 <HAL_ADC_ConfigChannel+0x30a>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2102      	movs	r1, #2
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7ff fbde 	bl	800ad88 <LL_ADC_GetOffsetChannel>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	0e9b      	lsrs	r3, r3, #26
 800b5d0:	f003 021f 	and.w	r2, r3, #31
 800b5d4:	e01e      	b.n	800b614 <HAL_ADC_ConfigChannel+0x348>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	2102      	movs	r1, #2
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7ff fbd3 	bl	800ad88 <LL_ADC_GetOffsetChannel>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b5e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5ec:	fa93 f3a3 	rbit	r3, r3
 800b5f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800b5f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b5f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800b5fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b600:	2b00      	cmp	r3, #0
 800b602:	d101      	bne.n	800b608 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800b604:	2320      	movs	r3, #32
 800b606:	e004      	b.n	800b612 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800b608:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b60c:	fab3 f383 	clz	r3, r3
 800b610:	b2db      	uxtb	r3, r3
 800b612:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d105      	bne.n	800b62c <HAL_ADC_ConfigChannel+0x360>
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	0e9b      	lsrs	r3, r3, #26
 800b626:	f003 031f 	and.w	r3, r3, #31
 800b62a:	e016      	b.n	800b65a <HAL_ADC_ConfigChannel+0x38e>
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b634:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b638:	fa93 f3a3 	rbit	r3, r3
 800b63c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800b63e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b640:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800b644:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d101      	bne.n	800b650 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800b64c:	2320      	movs	r3, #32
 800b64e:	e004      	b.n	800b65a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800b650:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b654:	fab3 f383 	clz	r3, r3
 800b658:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d106      	bne.n	800b66c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2200      	movs	r2, #0
 800b664:	2102      	movs	r1, #2
 800b666:	4618      	mov	r0, r3
 800b668:	f7ff fba4 	bl	800adb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2103      	movs	r1, #3
 800b672:	4618      	mov	r0, r3
 800b674:	f7ff fb88 	bl	800ad88 <LL_ADC_GetOffsetChannel>
 800b678:	4603      	mov	r3, r0
 800b67a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d10a      	bne.n	800b698 <HAL_ADC_ConfigChannel+0x3cc>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2103      	movs	r1, #3
 800b688:	4618      	mov	r0, r3
 800b68a:	f7ff fb7d 	bl	800ad88 <LL_ADC_GetOffsetChannel>
 800b68e:	4603      	mov	r3, r0
 800b690:	0e9b      	lsrs	r3, r3, #26
 800b692:	f003 021f 	and.w	r2, r3, #31
 800b696:	e017      	b.n	800b6c8 <HAL_ADC_ConfigChannel+0x3fc>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2103      	movs	r1, #3
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7ff fb72 	bl	800ad88 <LL_ADC_GetOffsetChannel>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6aa:	fa93 f3a3 	rbit	r3, r3
 800b6ae:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800b6b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b6b2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800b6b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d101      	bne.n	800b6be <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800b6ba:	2320      	movs	r3, #32
 800b6bc:	e003      	b.n	800b6c6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800b6be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b6c0:	fab3 f383 	clz	r3, r3
 800b6c4:	b2db      	uxtb	r3, r3
 800b6c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d105      	bne.n	800b6e0 <HAL_ADC_ConfigChannel+0x414>
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	0e9b      	lsrs	r3, r3, #26
 800b6da:	f003 031f 	and.w	r3, r3, #31
 800b6de:	e011      	b.n	800b704 <HAL_ADC_ConfigChannel+0x438>
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b6e8:	fa93 f3a3 	rbit	r3, r3
 800b6ec:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800b6ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800b6f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d101      	bne.n	800b6fc <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800b6f8:	2320      	movs	r3, #32
 800b6fa:	e003      	b.n	800b704 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800b6fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6fe:	fab3 f383 	clz	r3, r3
 800b702:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b704:	429a      	cmp	r2, r3
 800b706:	d106      	bne.n	800b716 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2200      	movs	r2, #0
 800b70e:	2103      	movs	r1, #3
 800b710:	4618      	mov	r0, r3
 800b712:	f7ff fb4f 	bl	800adb4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7ff fc42 	bl	800afa4 <LL_ADC_IsEnabled>
 800b720:	4603      	mov	r3, r0
 800b722:	2b00      	cmp	r3, #0
 800b724:	f040 8140 	bne.w	800b9a8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6818      	ldr	r0, [r3, #0]
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	6819      	ldr	r1, [r3, #0]
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	461a      	mov	r2, r3
 800b736:	f7ff fbc3 	bl	800aec0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	68db      	ldr	r3, [r3, #12]
 800b73e:	4a8f      	ldr	r2, [pc, #572]	; (800b97c <HAL_ADC_ConfigChannel+0x6b0>)
 800b740:	4293      	cmp	r3, r2
 800b742:	f040 8131 	bne.w	800b9a8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b752:	2b00      	cmp	r3, #0
 800b754:	d10b      	bne.n	800b76e <HAL_ADC_ConfigChannel+0x4a2>
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	0e9b      	lsrs	r3, r3, #26
 800b75c:	3301      	adds	r3, #1
 800b75e:	f003 031f 	and.w	r3, r3, #31
 800b762:	2b09      	cmp	r3, #9
 800b764:	bf94      	ite	ls
 800b766:	2301      	movls	r3, #1
 800b768:	2300      	movhi	r3, #0
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	e019      	b.n	800b7a2 <HAL_ADC_ConfigChannel+0x4d6>
 800b76e:	683b      	ldr	r3, [r7, #0]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b776:	fa93 f3a3 	rbit	r3, r3
 800b77a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800b77c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b77e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800b780:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b782:	2b00      	cmp	r3, #0
 800b784:	d101      	bne.n	800b78a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800b786:	2320      	movs	r3, #32
 800b788:	e003      	b.n	800b792 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800b78a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b78c:	fab3 f383 	clz	r3, r3
 800b790:	b2db      	uxtb	r3, r3
 800b792:	3301      	adds	r3, #1
 800b794:	f003 031f 	and.w	r3, r3, #31
 800b798:	2b09      	cmp	r3, #9
 800b79a:	bf94      	ite	ls
 800b79c:	2301      	movls	r3, #1
 800b79e:	2300      	movhi	r3, #0
 800b7a0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d079      	beq.n	800b89a <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d107      	bne.n	800b7c2 <HAL_ADC_ConfigChannel+0x4f6>
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	0e9b      	lsrs	r3, r3, #26
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	069b      	lsls	r3, r3, #26
 800b7bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b7c0:	e015      	b.n	800b7ee <HAL_ADC_ConfigChannel+0x522>
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7ca:	fa93 f3a3 	rbit	r3, r3
 800b7ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800b7d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7d2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800b7d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d101      	bne.n	800b7de <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800b7da:	2320      	movs	r3, #32
 800b7dc:	e003      	b.n	800b7e6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800b7de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7e0:	fab3 f383 	clz	r3, r3
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	069b      	lsls	r3, r3, #26
 800b7ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d109      	bne.n	800b80e <HAL_ADC_ConfigChannel+0x542>
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	0e9b      	lsrs	r3, r3, #26
 800b800:	3301      	adds	r3, #1
 800b802:	f003 031f 	and.w	r3, r3, #31
 800b806:	2101      	movs	r1, #1
 800b808:	fa01 f303 	lsl.w	r3, r1, r3
 800b80c:	e017      	b.n	800b83e <HAL_ADC_ConfigChannel+0x572>
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b816:	fa93 f3a3 	rbit	r3, r3
 800b81a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800b81c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b81e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800b820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b822:	2b00      	cmp	r3, #0
 800b824:	d101      	bne.n	800b82a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800b826:	2320      	movs	r3, #32
 800b828:	e003      	b.n	800b832 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800b82a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b82c:	fab3 f383 	clz	r3, r3
 800b830:	b2db      	uxtb	r3, r3
 800b832:	3301      	adds	r3, #1
 800b834:	f003 031f 	and.w	r3, r3, #31
 800b838:	2101      	movs	r1, #1
 800b83a:	fa01 f303 	lsl.w	r3, r1, r3
 800b83e:	ea42 0103 	orr.w	r1, r2, r3
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d10a      	bne.n	800b864 <HAL_ADC_ConfigChannel+0x598>
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	0e9b      	lsrs	r3, r3, #26
 800b854:	3301      	adds	r3, #1
 800b856:	f003 021f 	and.w	r2, r3, #31
 800b85a:	4613      	mov	r3, r2
 800b85c:	005b      	lsls	r3, r3, #1
 800b85e:	4413      	add	r3, r2
 800b860:	051b      	lsls	r3, r3, #20
 800b862:	e018      	b.n	800b896 <HAL_ADC_ConfigChannel+0x5ca>
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86c:	fa93 f3a3 	rbit	r3, r3
 800b870:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800b872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b874:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800b876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d101      	bne.n	800b880 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800b87c:	2320      	movs	r3, #32
 800b87e:	e003      	b.n	800b888 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800b880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b882:	fab3 f383 	clz	r3, r3
 800b886:	b2db      	uxtb	r3, r3
 800b888:	3301      	adds	r3, #1
 800b88a:	f003 021f 	and.w	r2, r3, #31
 800b88e:	4613      	mov	r3, r2
 800b890:	005b      	lsls	r3, r3, #1
 800b892:	4413      	add	r3, r2
 800b894:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b896:	430b      	orrs	r3, r1
 800b898:	e081      	b.n	800b99e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d107      	bne.n	800b8b6 <HAL_ADC_ConfigChannel+0x5ea>
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	0e9b      	lsrs	r3, r3, #26
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	069b      	lsls	r3, r3, #26
 800b8b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b8b4:	e015      	b.n	800b8e2 <HAL_ADC_ConfigChannel+0x616>
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8be:	fa93 f3a3 	rbit	r3, r3
 800b8c2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800b8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800b8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d101      	bne.n	800b8d2 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800b8ce:	2320      	movs	r3, #32
 800b8d0:	e003      	b.n	800b8da <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800b8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d4:	fab3 f383 	clz	r3, r3
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	3301      	adds	r3, #1
 800b8dc:	069b      	lsls	r3, r3, #26
 800b8de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d109      	bne.n	800b902 <HAL_ADC_ConfigChannel+0x636>
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	0e9b      	lsrs	r3, r3, #26
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	f003 031f 	and.w	r3, r3, #31
 800b8fa:	2101      	movs	r1, #1
 800b8fc:	fa01 f303 	lsl.w	r3, r1, r3
 800b900:	e017      	b.n	800b932 <HAL_ADC_ConfigChannel+0x666>
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b908:	6a3b      	ldr	r3, [r7, #32]
 800b90a:	fa93 f3a3 	rbit	r3, r3
 800b90e:	61fb      	str	r3, [r7, #28]
  return result;
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b916:	2b00      	cmp	r3, #0
 800b918:	d101      	bne.n	800b91e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800b91a:	2320      	movs	r3, #32
 800b91c:	e003      	b.n	800b926 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800b91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b920:	fab3 f383 	clz	r3, r3
 800b924:	b2db      	uxtb	r3, r3
 800b926:	3301      	adds	r3, #1
 800b928:	f003 031f 	and.w	r3, r3, #31
 800b92c:	2101      	movs	r1, #1
 800b92e:	fa01 f303 	lsl.w	r3, r1, r3
 800b932:	ea42 0103 	orr.w	r1, r2, r3
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d10d      	bne.n	800b95e <HAL_ADC_ConfigChannel+0x692>
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	0e9b      	lsrs	r3, r3, #26
 800b948:	3301      	adds	r3, #1
 800b94a:	f003 021f 	and.w	r2, r3, #31
 800b94e:	4613      	mov	r3, r2
 800b950:	005b      	lsls	r3, r3, #1
 800b952:	4413      	add	r3, r2
 800b954:	3b1e      	subs	r3, #30
 800b956:	051b      	lsls	r3, r3, #20
 800b958:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b95c:	e01e      	b.n	800b99c <HAL_ADC_ConfigChannel+0x6d0>
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	fa93 f3a3 	rbit	r3, r3
 800b96a:	613b      	str	r3, [r7, #16]
  return result;
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d104      	bne.n	800b980 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800b976:	2320      	movs	r3, #32
 800b978:	e006      	b.n	800b988 <HAL_ADC_ConfigChannel+0x6bc>
 800b97a:	bf00      	nop
 800b97c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	fab3 f383 	clz	r3, r3
 800b986:	b2db      	uxtb	r3, r3
 800b988:	3301      	adds	r3, #1
 800b98a:	f003 021f 	and.w	r2, r3, #31
 800b98e:	4613      	mov	r3, r2
 800b990:	005b      	lsls	r3, r3, #1
 800b992:	4413      	add	r3, r2
 800b994:	3b1e      	subs	r3, #30
 800b996:	051b      	lsls	r3, r3, #20
 800b998:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b99c:	430b      	orrs	r3, r1
 800b99e:	683a      	ldr	r2, [r7, #0]
 800b9a0:	6892      	ldr	r2, [r2, #8]
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	f7ff fa60 	bl	800ae68 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	4b44      	ldr	r3, [pc, #272]	; (800bac0 <HAL_ADC_ConfigChannel+0x7f4>)
 800b9ae:	4013      	ands	r3, r2
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d07a      	beq.n	800baaa <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b9b4:	4843      	ldr	r0, [pc, #268]	; (800bac4 <HAL_ADC_ConfigChannel+0x7f8>)
 800b9b6:	f7ff f9b5 	bl	800ad24 <LL_ADC_GetCommonPathInternalCh>
 800b9ba:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	4a41      	ldr	r2, [pc, #260]	; (800bac8 <HAL_ADC_ConfigChannel+0x7fc>)
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d12c      	bne.n	800ba22 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800b9c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b9cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d126      	bne.n	800ba22 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a3c      	ldr	r2, [pc, #240]	; (800bacc <HAL_ADC_ConfigChannel+0x800>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d004      	beq.n	800b9e8 <HAL_ADC_ConfigChannel+0x71c>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4a3b      	ldr	r2, [pc, #236]	; (800bad0 <HAL_ADC_ConfigChannel+0x804>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d15d      	bne.n	800baa4 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b9e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b9ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	4834      	ldr	r0, [pc, #208]	; (800bac4 <HAL_ADC_ConfigChannel+0x7f8>)
 800b9f4:	f7ff f983 	bl	800acfe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b9f8:	4b36      	ldr	r3, [pc, #216]	; (800bad4 <HAL_ADC_ConfigChannel+0x808>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	099b      	lsrs	r3, r3, #6
 800b9fe:	4a36      	ldr	r2, [pc, #216]	; (800bad8 <HAL_ADC_ConfigChannel+0x80c>)
 800ba00:	fba2 2303 	umull	r2, r3, r2, r3
 800ba04:	099b      	lsrs	r3, r3, #6
 800ba06:	1c5a      	adds	r2, r3, #1
 800ba08:	4613      	mov	r3, r2
 800ba0a:	005b      	lsls	r3, r3, #1
 800ba0c:	4413      	add	r3, r2
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800ba12:	e002      	b.n	800ba1a <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	3b01      	subs	r3, #1
 800ba18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d1f9      	bne.n	800ba14 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ba20:	e040      	b.n	800baa4 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a2d      	ldr	r2, [pc, #180]	; (800badc <HAL_ADC_ConfigChannel+0x810>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d118      	bne.n	800ba5e <HAL_ADC_ConfigChannel+0x792>
 800ba2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ba30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d112      	bne.n	800ba5e <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a23      	ldr	r2, [pc, #140]	; (800bacc <HAL_ADC_ConfigChannel+0x800>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d004      	beq.n	800ba4c <HAL_ADC_ConfigChannel+0x780>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4a22      	ldr	r2, [pc, #136]	; (800bad0 <HAL_ADC_ConfigChannel+0x804>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d12d      	bne.n	800baa8 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ba4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ba50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ba54:	4619      	mov	r1, r3
 800ba56:	481b      	ldr	r0, [pc, #108]	; (800bac4 <HAL_ADC_ConfigChannel+0x7f8>)
 800ba58:	f7ff f951 	bl	800acfe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ba5c:	e024      	b.n	800baa8 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a1f      	ldr	r2, [pc, #124]	; (800bae0 <HAL_ADC_ConfigChannel+0x814>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d120      	bne.n	800baaa <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800ba68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ba6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d11a      	bne.n	800baaa <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a14      	ldr	r2, [pc, #80]	; (800bacc <HAL_ADC_ConfigChannel+0x800>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d115      	bne.n	800baaa <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ba7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ba82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ba86:	4619      	mov	r1, r3
 800ba88:	480e      	ldr	r0, [pc, #56]	; (800bac4 <HAL_ADC_ConfigChannel+0x7f8>)
 800ba8a:	f7ff f938 	bl	800acfe <LL_ADC_SetCommonPathInternalCh>
 800ba8e:	e00c      	b.n	800baaa <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba94:	f043 0220 	orr.w	r2, r3, #32
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800baa2:	e002      	b.n	800baaa <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800baa4:	bf00      	nop
 800baa6:	e000      	b.n	800baaa <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800baa8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800bab2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	37d8      	adds	r7, #216	; 0xd8
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	80080000 	.word	0x80080000
 800bac4:	50040300 	.word	0x50040300
 800bac8:	c7520000 	.word	0xc7520000
 800bacc:	50040000 	.word	0x50040000
 800bad0:	50040200 	.word	0x50040200
 800bad4:	20000190 	.word	0x20000190
 800bad8:	053e2d63 	.word	0x053e2d63
 800badc:	cb840000 	.word	0xcb840000
 800bae0:	80000001 	.word	0x80000001

0800bae4 <LL_ADC_IsEnabled>:
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	f003 0301 	and.w	r3, r3, #1
 800baf4:	2b01      	cmp	r3, #1
 800baf6:	d101      	bne.n	800bafc <LL_ADC_IsEnabled+0x18>
 800baf8:	2301      	movs	r3, #1
 800bafa:	e000      	b.n	800bafe <LL_ADC_IsEnabled+0x1a>
 800bafc:	2300      	movs	r3, #0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	370c      	adds	r7, #12
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr

0800bb0a <LL_ADC_REG_IsConversionOngoing>:
{
 800bb0a:	b480      	push	{r7}
 800bb0c:	b083      	sub	sp, #12
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	689b      	ldr	r3, [r3, #8]
 800bb16:	f003 0304 	and.w	r3, r3, #4
 800bb1a:	2b04      	cmp	r3, #4
 800bb1c:	d101      	bne.n	800bb22 <LL_ADC_REG_IsConversionOngoing+0x18>
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e000      	b.n	800bb24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800bb22:	2300      	movs	r3, #0
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	370c      	adds	r7, #12
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800bb30:	b590      	push	{r4, r7, lr}
 800bb32:	b0a1      	sub	sp, #132	; 0x84
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d101      	bne.n	800bb4e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800bb4a:	2302      	movs	r3, #2
 800bb4c:	e093      	b.n	800bc76 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2201      	movs	r2, #1
 800bb52:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800bb56:	2300      	movs	r3, #0
 800bb58:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4a47      	ldr	r2, [pc, #284]	; (800bc80 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d102      	bne.n	800bb6e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800bb68:	4b46      	ldr	r3, [pc, #280]	; (800bc84 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800bb6a:	60fb      	str	r3, [r7, #12]
 800bb6c:	e001      	b.n	800bb72 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800bb6e:	2300      	movs	r3, #0
 800bb70:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d10b      	bne.n	800bb90 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb7c:	f043 0220 	orr.w	r2, r3, #32
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e072      	b.n	800bc76 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7ff ffb9 	bl	800bb0a <LL_ADC_REG_IsConversionOngoing>
 800bb98:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7ff ffb3 	bl	800bb0a <LL_ADC_REG_IsConversionOngoing>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d154      	bne.n	800bc54 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800bbaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d151      	bne.n	800bc54 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800bbb0:	4b35      	ldr	r3, [pc, #212]	; (800bc88 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800bbb2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d02c      	beq.n	800bc16 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800bbbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbbe:	689b      	ldr	r3, [r3, #8]
 800bbc0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	6859      	ldr	r1, [r3, #4]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bbce:	035b      	lsls	r3, r3, #13
 800bbd0:	430b      	orrs	r3, r1
 800bbd2:	431a      	orrs	r2, r3
 800bbd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbd6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800bbd8:	4829      	ldr	r0, [pc, #164]	; (800bc80 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800bbda:	f7ff ff83 	bl	800bae4 <LL_ADC_IsEnabled>
 800bbde:	4604      	mov	r4, r0
 800bbe0:	4828      	ldr	r0, [pc, #160]	; (800bc84 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800bbe2:	f7ff ff7f 	bl	800bae4 <LL_ADC_IsEnabled>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	431c      	orrs	r4, r3
 800bbea:	4828      	ldr	r0, [pc, #160]	; (800bc8c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800bbec:	f7ff ff7a 	bl	800bae4 <LL_ADC_IsEnabled>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	4323      	orrs	r3, r4
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d137      	bne.n	800bc68 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800bbf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbfa:	689b      	ldr	r3, [r3, #8]
 800bbfc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800bc00:	f023 030f 	bic.w	r3, r3, #15
 800bc04:	683a      	ldr	r2, [r7, #0]
 800bc06:	6811      	ldr	r1, [r2, #0]
 800bc08:	683a      	ldr	r2, [r7, #0]
 800bc0a:	6892      	ldr	r2, [r2, #8]
 800bc0c:	430a      	orrs	r2, r1
 800bc0e:	431a      	orrs	r2, r3
 800bc10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc12:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800bc14:	e028      	b.n	800bc68 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800bc16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc18:	689b      	ldr	r3, [r3, #8]
 800bc1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bc1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc20:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800bc22:	4817      	ldr	r0, [pc, #92]	; (800bc80 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800bc24:	f7ff ff5e 	bl	800bae4 <LL_ADC_IsEnabled>
 800bc28:	4604      	mov	r4, r0
 800bc2a:	4816      	ldr	r0, [pc, #88]	; (800bc84 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800bc2c:	f7ff ff5a 	bl	800bae4 <LL_ADC_IsEnabled>
 800bc30:	4603      	mov	r3, r0
 800bc32:	431c      	orrs	r4, r3
 800bc34:	4815      	ldr	r0, [pc, #84]	; (800bc8c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800bc36:	f7ff ff55 	bl	800bae4 <LL_ADC_IsEnabled>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	4323      	orrs	r3, r4
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d112      	bne.n	800bc68 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800bc42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800bc4a:	f023 030f 	bic.w	r3, r3, #15
 800bc4e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bc50:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800bc52:	e009      	b.n	800bc68 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc58:	f043 0220 	orr.w	r2, r3, #32
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800bc66:	e000      	b.n	800bc6a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800bc68:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800bc72:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3784      	adds	r7, #132	; 0x84
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd90      	pop	{r4, r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	50040000 	.word	0x50040000
 800bc84:	50040100 	.word	0x50040100
 800bc88:	50040300 	.word	0x50040300
 800bc8c:	50040200 	.word	0x50040200

0800bc90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b085      	sub	sp, #20
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f003 0307 	and.w	r3, r3, #7
 800bc9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bca0:	4b0c      	ldr	r3, [pc, #48]	; (800bcd4 <__NVIC_SetPriorityGrouping+0x44>)
 800bca2:	68db      	ldr	r3, [r3, #12]
 800bca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bca6:	68ba      	ldr	r2, [r7, #8]
 800bca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bcac:	4013      	ands	r3, r2
 800bcae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bcb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800bcbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bcc2:	4a04      	ldr	r2, [pc, #16]	; (800bcd4 <__NVIC_SetPriorityGrouping+0x44>)
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	60d3      	str	r3, [r2, #12]
}
 800bcc8:	bf00      	nop
 800bcca:	3714      	adds	r7, #20
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr
 800bcd4:	e000ed00 	.word	0xe000ed00

0800bcd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bcdc:	4b04      	ldr	r3, [pc, #16]	; (800bcf0 <__NVIC_GetPriorityGrouping+0x18>)
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	0a1b      	lsrs	r3, r3, #8
 800bce2:	f003 0307 	and.w	r3, r3, #7
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr
 800bcf0:	e000ed00 	.word	0xe000ed00

0800bcf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bcfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	db0b      	blt.n	800bd1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bd06:	79fb      	ldrb	r3, [r7, #7]
 800bd08:	f003 021f 	and.w	r2, r3, #31
 800bd0c:	4907      	ldr	r1, [pc, #28]	; (800bd2c <__NVIC_EnableIRQ+0x38>)
 800bd0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd12:	095b      	lsrs	r3, r3, #5
 800bd14:	2001      	movs	r0, #1
 800bd16:	fa00 f202 	lsl.w	r2, r0, r2
 800bd1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800bd1e:	bf00      	nop
 800bd20:	370c      	adds	r7, #12
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr
 800bd2a:	bf00      	nop
 800bd2c:	e000e100 	.word	0xe000e100

0800bd30 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	4603      	mov	r3, r0
 800bd38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bd3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	db12      	blt.n	800bd68 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bd42:	79fb      	ldrb	r3, [r7, #7]
 800bd44:	f003 021f 	and.w	r2, r3, #31
 800bd48:	490a      	ldr	r1, [pc, #40]	; (800bd74 <__NVIC_DisableIRQ+0x44>)
 800bd4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd4e:	095b      	lsrs	r3, r3, #5
 800bd50:	2001      	movs	r0, #1
 800bd52:	fa00 f202 	lsl.w	r2, r0, r2
 800bd56:	3320      	adds	r3, #32
 800bd58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800bd5c:	f3bf 8f4f 	dsb	sy
}
 800bd60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bd62:	f3bf 8f6f 	isb	sy
}
 800bd66:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800bd68:	bf00      	nop
 800bd6a:	370c      	adds	r7, #12
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd72:	4770      	bx	lr
 800bd74:	e000e100 	.word	0xe000e100

0800bd78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	4603      	mov	r3, r0
 800bd80:	6039      	str	r1, [r7, #0]
 800bd82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bd84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	db0a      	blt.n	800bda2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	b2da      	uxtb	r2, r3
 800bd90:	490c      	ldr	r1, [pc, #48]	; (800bdc4 <__NVIC_SetPriority+0x4c>)
 800bd92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd96:	0112      	lsls	r2, r2, #4
 800bd98:	b2d2      	uxtb	r2, r2
 800bd9a:	440b      	add	r3, r1
 800bd9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800bda0:	e00a      	b.n	800bdb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	b2da      	uxtb	r2, r3
 800bda6:	4908      	ldr	r1, [pc, #32]	; (800bdc8 <__NVIC_SetPriority+0x50>)
 800bda8:	79fb      	ldrb	r3, [r7, #7]
 800bdaa:	f003 030f 	and.w	r3, r3, #15
 800bdae:	3b04      	subs	r3, #4
 800bdb0:	0112      	lsls	r2, r2, #4
 800bdb2:	b2d2      	uxtb	r2, r2
 800bdb4:	440b      	add	r3, r1
 800bdb6:	761a      	strb	r2, [r3, #24]
}
 800bdb8:	bf00      	nop
 800bdba:	370c      	adds	r7, #12
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr
 800bdc4:	e000e100 	.word	0xe000e100
 800bdc8:	e000ed00 	.word	0xe000ed00

0800bdcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b089      	sub	sp, #36	; 0x24
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	60f8      	str	r0, [r7, #12]
 800bdd4:	60b9      	str	r1, [r7, #8]
 800bdd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f003 0307 	and.w	r3, r3, #7
 800bdde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	f1c3 0307 	rsb	r3, r3, #7
 800bde6:	2b04      	cmp	r3, #4
 800bde8:	bf28      	it	cs
 800bdea:	2304      	movcs	r3, #4
 800bdec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bdee:	69fb      	ldr	r3, [r7, #28]
 800bdf0:	3304      	adds	r3, #4
 800bdf2:	2b06      	cmp	r3, #6
 800bdf4:	d902      	bls.n	800bdfc <NVIC_EncodePriority+0x30>
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	3b03      	subs	r3, #3
 800bdfa:	e000      	b.n	800bdfe <NVIC_EncodePriority+0x32>
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800be00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be04:	69bb      	ldr	r3, [r7, #24]
 800be06:	fa02 f303 	lsl.w	r3, r2, r3
 800be0a:	43da      	mvns	r2, r3
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	401a      	ands	r2, r3
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800be14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	fa01 f303 	lsl.w	r3, r1, r3
 800be1e:	43d9      	mvns	r1, r3
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800be24:	4313      	orrs	r3, r2
         );
}
 800be26:	4618      	mov	r0, r3
 800be28:	3724      	adds	r7, #36	; 0x24
 800be2a:	46bd      	mov	sp, r7
 800be2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be30:	4770      	bx	lr
	...

0800be34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	3b01      	subs	r3, #1
 800be40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800be44:	d301      	bcc.n	800be4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800be46:	2301      	movs	r3, #1
 800be48:	e00f      	b.n	800be6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800be4a:	4a0a      	ldr	r2, [pc, #40]	; (800be74 <SysTick_Config+0x40>)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	3b01      	subs	r3, #1
 800be50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800be52:	210f      	movs	r1, #15
 800be54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be58:	f7ff ff8e 	bl	800bd78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800be5c:	4b05      	ldr	r3, [pc, #20]	; (800be74 <SysTick_Config+0x40>)
 800be5e:	2200      	movs	r2, #0
 800be60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800be62:	4b04      	ldr	r3, [pc, #16]	; (800be74 <SysTick_Config+0x40>)
 800be64:	2207      	movs	r2, #7
 800be66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800be68:	2300      	movs	r3, #0
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3708      	adds	r7, #8
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	e000e010 	.word	0xe000e010

0800be78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f7ff ff05 	bl	800bc90 <__NVIC_SetPriorityGrouping>
}
 800be86:	bf00      	nop
 800be88:	3708      	adds	r7, #8
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}

0800be8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b086      	sub	sp, #24
 800be92:	af00      	add	r7, sp, #0
 800be94:	4603      	mov	r3, r0
 800be96:	60b9      	str	r1, [r7, #8]
 800be98:	607a      	str	r2, [r7, #4]
 800be9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800be9c:	2300      	movs	r3, #0
 800be9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800bea0:	f7ff ff1a 	bl	800bcd8 <__NVIC_GetPriorityGrouping>
 800bea4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	68b9      	ldr	r1, [r7, #8]
 800beaa:	6978      	ldr	r0, [r7, #20]
 800beac:	f7ff ff8e 	bl	800bdcc <NVIC_EncodePriority>
 800beb0:	4602      	mov	r2, r0
 800beb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800beb6:	4611      	mov	r1, r2
 800beb8:	4618      	mov	r0, r3
 800beba:	f7ff ff5d 	bl	800bd78 <__NVIC_SetPriority>
}
 800bebe:	bf00      	nop
 800bec0:	3718      	adds	r7, #24
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}

0800bec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b082      	sub	sp, #8
 800beca:	af00      	add	r7, sp, #0
 800becc:	4603      	mov	r3, r0
 800bece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7ff ff0d 	bl	800bcf4 <__NVIC_EnableIRQ>
}
 800beda:	bf00      	nop
 800bedc:	3708      	adds	r7, #8
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b082      	sub	sp, #8
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	4603      	mov	r3, r0
 800beea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800beec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7ff ff1d 	bl	800bd30 <__NVIC_DisableIRQ>
}
 800bef6:	bf00      	nop
 800bef8:	3708      	adds	r7, #8
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b082      	sub	sp, #8
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f7ff ff94 	bl	800be34 <SysTick_Config>
 800bf0c:	4603      	mov	r3, r0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3708      	adds	r7, #8
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
	...

0800bf18 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d101      	bne.n	800bf2a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800bf26:	2301      	movs	r3, #1
 800bf28:	e075      	b.n	800c016 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d106      	bne.n	800bf44 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f7f4 fd6a 	bl	8000a18 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2202      	movs	r2, #2
 800bf48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	681a      	ldr	r2, [r3, #0]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bf5a:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	699b      	ldr	r3, [r3, #24]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d002      	beq.n	800bf6a <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2200      	movs	r2, #0
 800bf68:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	6819      	ldr	r1, [r3, #0]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	4b2a      	ldr	r3, [pc, #168]	; (800c020 <HAL_DCMI_Init+0x108>)
 800bf76:	400b      	ands	r3, r1
 800bf78:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	6819      	ldr	r1, [r3, #0]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	685a      	ldr	r2, [r3, #4]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	695b      	ldr	r3, [r3, #20]
 800bf88:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800bf8e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	691b      	ldr	r3, [r3, #16]
 800bf94:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800bf9a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	699b      	ldr	r3, [r3, #24]
 800bfa0:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800bfa6:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfac:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800bfb2:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb8:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800bfbe:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	430a      	orrs	r2, r1
 800bfc6:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	2b10      	cmp	r3, #16
 800bfce:	d112      	bne.n	800bff6 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	7f1b      	ldrb	r3, [r3, #28]
 800bfd4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	7f5b      	ldrb	r3, [r3, #29]
 800bfda:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800bfdc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	7f9b      	ldrb	r3, [r3, #30]
 800bfe2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800bfe4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	7fdb      	ldrb	r3, [r3, #31]
 800bfec:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800bff2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800bff4:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	68da      	ldr	r2, [r3, #12]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f042 021f 	orr.w	r2, r2, #31
 800c004:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2200      	movs	r2, #0
 800c00a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2201      	movs	r2, #1
 800c010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c014:	2300      	movs	r3, #0
}
 800c016:	4618      	mov	r0, r3
 800c018:	3708      	adds	r7, #8
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop
 800c020:	ffe0f007 	.word	0xffe0f007

0800c024 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d101      	bne.n	800c036 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800c032:	2301      	movs	r3, #1
 800c034:	e0ac      	b.n	800c190 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4618      	mov	r0, r3
 800c03c:	f000 f8b2 	bl	800c1a4 <DFSDM_GetChannelFromInstance>
 800c040:	4603      	mov	r3, r0
 800c042:	4a55      	ldr	r2, [pc, #340]	; (800c198 <HAL_DFSDM_ChannelInit+0x174>)
 800c044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d001      	beq.n	800c050 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800c04c:	2301      	movs	r3, #1
 800c04e:	e09f      	b.n	800c190 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f7f4 fdcd 	bl	8000bf0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800c056:	4b51      	ldr	r3, [pc, #324]	; (800c19c <HAL_DFSDM_ChannelInit+0x178>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	3301      	adds	r3, #1
 800c05c:	4a4f      	ldr	r2, [pc, #316]	; (800c19c <HAL_DFSDM_ChannelInit+0x178>)
 800c05e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800c060:	4b4e      	ldr	r3, [pc, #312]	; (800c19c <HAL_DFSDM_ChannelInit+0x178>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2b01      	cmp	r3, #1
 800c066:	d125      	bne.n	800c0b4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800c068:	4b4d      	ldr	r3, [pc, #308]	; (800c1a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4a4c      	ldr	r2, [pc, #304]	; (800c1a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800c06e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c072:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800c074:	4b4a      	ldr	r3, [pc, #296]	; (800c1a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	4948      	ldr	r1, [pc, #288]	; (800c1a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800c07e:	4313      	orrs	r3, r2
 800c080:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800c082:	4b47      	ldr	r3, [pc, #284]	; (800c1a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4a46      	ldr	r2, [pc, #280]	; (800c1a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800c088:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800c08c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	791b      	ldrb	r3, [r3, #4]
 800c092:	2b01      	cmp	r3, #1
 800c094:	d108      	bne.n	800c0a8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800c096:	4b42      	ldr	r3, [pc, #264]	; (800c1a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	68db      	ldr	r3, [r3, #12]
 800c09e:	3b01      	subs	r3, #1
 800c0a0:	041b      	lsls	r3, r3, #16
 800c0a2:	493f      	ldr	r1, [pc, #252]	; (800c1a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800c0a8:	4b3d      	ldr	r3, [pc, #244]	; (800c1a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a3c      	ldr	r2, [pc, #240]	; (800c1a0 <HAL_DFSDM_ChannelInit+0x17c>)
 800c0ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c0b2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800c0c2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	6819      	ldr	r1, [r3, #0]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800c0d2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800c0d8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	430a      	orrs	r2, r1
 800c0e0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f022 020f 	bic.w	r2, r2, #15
 800c0f0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	6819      	ldr	r1, [r3, #0]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800c100:	431a      	orrs	r2, r3
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	430a      	orrs	r2, r1
 800c108:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	689a      	ldr	r2, [r3, #8]
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800c118:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	6899      	ldr	r1, [r3, #8]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c128:	3b01      	subs	r3, #1
 800c12a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800c12c:	431a      	orrs	r2, r3
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	430a      	orrs	r2, r1
 800c134:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	685a      	ldr	r2, [r3, #4]
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f002 0207 	and.w	r2, r2, #7
 800c144:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	6859      	ldr	r1, [r3, #4]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c150:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c156:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800c158:	431a      	orrs	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	430a      	orrs	r2, r1
 800c160:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	681a      	ldr	r2, [r3, #0]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c170:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2201      	movs	r2, #1
 800c176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	4618      	mov	r0, r3
 800c180:	f000 f810 	bl	800c1a4 <DFSDM_GetChannelFromInstance>
 800c184:	4602      	mov	r2, r0
 800c186:	4904      	ldr	r1, [pc, #16]	; (800c198 <HAL_DFSDM_ChannelInit+0x174>)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800c18e:	2300      	movs	r3, #0
}
 800c190:	4618      	mov	r0, r3
 800c192:	3708      	adds	r7, #8
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}
 800c198:	200011a4 	.word	0x200011a4
 800c19c:	200011a0 	.word	0x200011a0
 800c1a0:	40016000 	.word	0x40016000

0800c1a4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	4a1c      	ldr	r2, [pc, #112]	; (800c220 <DFSDM_GetChannelFromInstance+0x7c>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d102      	bne.n	800c1ba <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	60fb      	str	r3, [r7, #12]
 800c1b8:	e02b      	b.n	800c212 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4a19      	ldr	r2, [pc, #100]	; (800c224 <DFSDM_GetChannelFromInstance+0x80>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d102      	bne.n	800c1c8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	60fb      	str	r3, [r7, #12]
 800c1c6:	e024      	b.n	800c212 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	4a17      	ldr	r2, [pc, #92]	; (800c228 <DFSDM_GetChannelFromInstance+0x84>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d102      	bne.n	800c1d6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800c1d0:	2302      	movs	r3, #2
 800c1d2:	60fb      	str	r3, [r7, #12]
 800c1d4:	e01d      	b.n	800c212 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	4a14      	ldr	r2, [pc, #80]	; (800c22c <DFSDM_GetChannelFromInstance+0x88>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d102      	bne.n	800c1e4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800c1de:	2304      	movs	r3, #4
 800c1e0:	60fb      	str	r3, [r7, #12]
 800c1e2:	e016      	b.n	800c212 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	4a12      	ldr	r2, [pc, #72]	; (800c230 <DFSDM_GetChannelFromInstance+0x8c>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d102      	bne.n	800c1f2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800c1ec:	2305      	movs	r3, #5
 800c1ee:	60fb      	str	r3, [r7, #12]
 800c1f0:	e00f      	b.n	800c212 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	4a0f      	ldr	r2, [pc, #60]	; (800c234 <DFSDM_GetChannelFromInstance+0x90>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d102      	bne.n	800c200 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800c1fa:	2306      	movs	r3, #6
 800c1fc:	60fb      	str	r3, [r7, #12]
 800c1fe:	e008      	b.n	800c212 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	4a0d      	ldr	r2, [pc, #52]	; (800c238 <DFSDM_GetChannelFromInstance+0x94>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d102      	bne.n	800c20e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800c208:	2307      	movs	r3, #7
 800c20a:	60fb      	str	r3, [r7, #12]
 800c20c:	e001      	b.n	800c212 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800c20e:	2303      	movs	r3, #3
 800c210:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800c212:	68fb      	ldr	r3, [r7, #12]
}
 800c214:	4618      	mov	r0, r3
 800c216:	3714      	adds	r7, #20
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr
 800c220:	40016000 	.word	0x40016000
 800c224:	40016020 	.word	0x40016020
 800c228:	40016040 	.word	0x40016040
 800c22c:	40016080 	.word	0x40016080
 800c230:	400160a0 	.word	0x400160a0
 800c234:	400160c0 	.word	0x400160c0
 800c238:	400160e0 	.word	0x400160e0

0800c23c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b087      	sub	sp, #28
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800c246:	2300      	movs	r3, #0
 800c248:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c24a:	e166      	b.n	800c51a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	2101      	movs	r1, #1
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	fa01 f303 	lsl.w	r3, r1, r3
 800c258:	4013      	ands	r3, r2
 800c25a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	f000 8158 	beq.w	800c514 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	f003 0303 	and.w	r3, r3, #3
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d005      	beq.n	800c27c <HAL_GPIO_Init+0x40>
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	f003 0303 	and.w	r3, r3, #3
 800c278:	2b02      	cmp	r3, #2
 800c27a:	d130      	bne.n	800c2de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	005b      	lsls	r3, r3, #1
 800c286:	2203      	movs	r2, #3
 800c288:	fa02 f303 	lsl.w	r3, r2, r3
 800c28c:	43db      	mvns	r3, r3
 800c28e:	693a      	ldr	r2, [r7, #16]
 800c290:	4013      	ands	r3, r2
 800c292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	68da      	ldr	r2, [r3, #12]
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	005b      	lsls	r3, r3, #1
 800c29c:	fa02 f303 	lsl.w	r3, r2, r3
 800c2a0:	693a      	ldr	r2, [r7, #16]
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	693a      	ldr	r2, [r7, #16]
 800c2aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	685b      	ldr	r3, [r3, #4]
 800c2b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	697b      	ldr	r3, [r7, #20]
 800c2b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c2ba:	43db      	mvns	r3, r3
 800c2bc:	693a      	ldr	r2, [r7, #16]
 800c2be:	4013      	ands	r3, r2
 800c2c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	091b      	lsrs	r3, r3, #4
 800c2c8:	f003 0201 	and.w	r2, r3, #1
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	fa02 f303 	lsl.w	r3, r2, r3
 800c2d2:	693a      	ldr	r2, [r7, #16]
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	693a      	ldr	r2, [r7, #16]
 800c2dc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	f003 0303 	and.w	r3, r3, #3
 800c2e6:	2b03      	cmp	r3, #3
 800c2e8:	d017      	beq.n	800c31a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	68db      	ldr	r3, [r3, #12]
 800c2ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	005b      	lsls	r3, r3, #1
 800c2f4:	2203      	movs	r2, #3
 800c2f6:	fa02 f303 	lsl.w	r3, r2, r3
 800c2fa:	43db      	mvns	r3, r3
 800c2fc:	693a      	ldr	r2, [r7, #16]
 800c2fe:	4013      	ands	r3, r2
 800c300:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	689a      	ldr	r2, [r3, #8]
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	005b      	lsls	r3, r3, #1
 800c30a:	fa02 f303 	lsl.w	r3, r2, r3
 800c30e:	693a      	ldr	r2, [r7, #16]
 800c310:	4313      	orrs	r3, r2
 800c312:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	693a      	ldr	r2, [r7, #16]
 800c318:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	f003 0303 	and.w	r3, r3, #3
 800c322:	2b02      	cmp	r3, #2
 800c324:	d123      	bne.n	800c36e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	08da      	lsrs	r2, r3, #3
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	3208      	adds	r2, #8
 800c32e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c332:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	f003 0307 	and.w	r3, r3, #7
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	220f      	movs	r2, #15
 800c33e:	fa02 f303 	lsl.w	r3, r2, r3
 800c342:	43db      	mvns	r3, r3
 800c344:	693a      	ldr	r2, [r7, #16]
 800c346:	4013      	ands	r3, r2
 800c348:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	691a      	ldr	r2, [r3, #16]
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	f003 0307 	and.w	r3, r3, #7
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	fa02 f303 	lsl.w	r3, r2, r3
 800c35a:	693a      	ldr	r2, [r7, #16]
 800c35c:	4313      	orrs	r3, r2
 800c35e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	08da      	lsrs	r2, r3, #3
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	3208      	adds	r2, #8
 800c368:	6939      	ldr	r1, [r7, #16]
 800c36a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	005b      	lsls	r3, r3, #1
 800c378:	2203      	movs	r2, #3
 800c37a:	fa02 f303 	lsl.w	r3, r2, r3
 800c37e:	43db      	mvns	r3, r3
 800c380:	693a      	ldr	r2, [r7, #16]
 800c382:	4013      	ands	r3, r2
 800c384:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	f003 0203 	and.w	r2, r3, #3
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	005b      	lsls	r3, r3, #1
 800c392:	fa02 f303 	lsl.w	r3, r2, r3
 800c396:	693a      	ldr	r2, [r7, #16]
 800c398:	4313      	orrs	r3, r2
 800c39a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	693a      	ldr	r2, [r7, #16]
 800c3a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	f000 80b2 	beq.w	800c514 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c3b0:	4b61      	ldr	r3, [pc, #388]	; (800c538 <HAL_GPIO_Init+0x2fc>)
 800c3b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3b4:	4a60      	ldr	r2, [pc, #384]	; (800c538 <HAL_GPIO_Init+0x2fc>)
 800c3b6:	f043 0301 	orr.w	r3, r3, #1
 800c3ba:	6613      	str	r3, [r2, #96]	; 0x60
 800c3bc:	4b5e      	ldr	r3, [pc, #376]	; (800c538 <HAL_GPIO_Init+0x2fc>)
 800c3be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3c0:	f003 0301 	and.w	r3, r3, #1
 800c3c4:	60bb      	str	r3, [r7, #8]
 800c3c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800c3c8:	4a5c      	ldr	r2, [pc, #368]	; (800c53c <HAL_GPIO_Init+0x300>)
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	089b      	lsrs	r3, r3, #2
 800c3ce:	3302      	adds	r3, #2
 800c3d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	f003 0303 	and.w	r3, r3, #3
 800c3dc:	009b      	lsls	r3, r3, #2
 800c3de:	220f      	movs	r2, #15
 800c3e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c3e4:	43db      	mvns	r3, r3
 800c3e6:	693a      	ldr	r2, [r7, #16]
 800c3e8:	4013      	ands	r3, r2
 800c3ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c3f2:	d02b      	beq.n	800c44c <HAL_GPIO_Init+0x210>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	4a52      	ldr	r2, [pc, #328]	; (800c540 <HAL_GPIO_Init+0x304>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d025      	beq.n	800c448 <HAL_GPIO_Init+0x20c>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	4a51      	ldr	r2, [pc, #324]	; (800c544 <HAL_GPIO_Init+0x308>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d01f      	beq.n	800c444 <HAL_GPIO_Init+0x208>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	4a50      	ldr	r2, [pc, #320]	; (800c548 <HAL_GPIO_Init+0x30c>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d019      	beq.n	800c440 <HAL_GPIO_Init+0x204>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	4a4f      	ldr	r2, [pc, #316]	; (800c54c <HAL_GPIO_Init+0x310>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d013      	beq.n	800c43c <HAL_GPIO_Init+0x200>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	4a4e      	ldr	r2, [pc, #312]	; (800c550 <HAL_GPIO_Init+0x314>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d00d      	beq.n	800c438 <HAL_GPIO_Init+0x1fc>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	4a4d      	ldr	r2, [pc, #308]	; (800c554 <HAL_GPIO_Init+0x318>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d007      	beq.n	800c434 <HAL_GPIO_Init+0x1f8>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	4a4c      	ldr	r2, [pc, #304]	; (800c558 <HAL_GPIO_Init+0x31c>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d101      	bne.n	800c430 <HAL_GPIO_Init+0x1f4>
 800c42c:	2307      	movs	r3, #7
 800c42e:	e00e      	b.n	800c44e <HAL_GPIO_Init+0x212>
 800c430:	2308      	movs	r3, #8
 800c432:	e00c      	b.n	800c44e <HAL_GPIO_Init+0x212>
 800c434:	2306      	movs	r3, #6
 800c436:	e00a      	b.n	800c44e <HAL_GPIO_Init+0x212>
 800c438:	2305      	movs	r3, #5
 800c43a:	e008      	b.n	800c44e <HAL_GPIO_Init+0x212>
 800c43c:	2304      	movs	r3, #4
 800c43e:	e006      	b.n	800c44e <HAL_GPIO_Init+0x212>
 800c440:	2303      	movs	r3, #3
 800c442:	e004      	b.n	800c44e <HAL_GPIO_Init+0x212>
 800c444:	2302      	movs	r3, #2
 800c446:	e002      	b.n	800c44e <HAL_GPIO_Init+0x212>
 800c448:	2301      	movs	r3, #1
 800c44a:	e000      	b.n	800c44e <HAL_GPIO_Init+0x212>
 800c44c:	2300      	movs	r3, #0
 800c44e:	697a      	ldr	r2, [r7, #20]
 800c450:	f002 0203 	and.w	r2, r2, #3
 800c454:	0092      	lsls	r2, r2, #2
 800c456:	4093      	lsls	r3, r2
 800c458:	693a      	ldr	r2, [r7, #16]
 800c45a:	4313      	orrs	r3, r2
 800c45c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800c45e:	4937      	ldr	r1, [pc, #220]	; (800c53c <HAL_GPIO_Init+0x300>)
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	089b      	lsrs	r3, r3, #2
 800c464:	3302      	adds	r3, #2
 800c466:	693a      	ldr	r2, [r7, #16]
 800c468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c46c:	4b3b      	ldr	r3, [pc, #236]	; (800c55c <HAL_GPIO_Init+0x320>)
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	43db      	mvns	r3, r3
 800c476:	693a      	ldr	r2, [r7, #16]
 800c478:	4013      	ands	r3, r2
 800c47a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c484:	2b00      	cmp	r3, #0
 800c486:	d003      	beq.n	800c490 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800c488:	693a      	ldr	r2, [r7, #16]
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	4313      	orrs	r3, r2
 800c48e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c490:	4a32      	ldr	r2, [pc, #200]	; (800c55c <HAL_GPIO_Init+0x320>)
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c496:	4b31      	ldr	r3, [pc, #196]	; (800c55c <HAL_GPIO_Init+0x320>)
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	43db      	mvns	r3, r3
 800c4a0:	693a      	ldr	r2, [r7, #16]
 800c4a2:	4013      	ands	r3, r2
 800c4a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d003      	beq.n	800c4ba <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800c4b2:	693a      	ldr	r2, [r7, #16]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c4ba:	4a28      	ldr	r2, [pc, #160]	; (800c55c <HAL_GPIO_Init+0x320>)
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800c4c0:	4b26      	ldr	r3, [pc, #152]	; (800c55c <HAL_GPIO_Init+0x320>)
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	43db      	mvns	r3, r3
 800c4ca:	693a      	ldr	r2, [r7, #16]
 800c4cc:	4013      	ands	r3, r2
 800c4ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d003      	beq.n	800c4e4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800c4dc:	693a      	ldr	r2, [r7, #16]
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c4e4:	4a1d      	ldr	r2, [pc, #116]	; (800c55c <HAL_GPIO_Init+0x320>)
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800c4ea:	4b1c      	ldr	r3, [pc, #112]	; (800c55c <HAL_GPIO_Init+0x320>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	43db      	mvns	r3, r3
 800c4f4:	693a      	ldr	r2, [r7, #16]
 800c4f6:	4013      	ands	r3, r2
 800c4f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c502:	2b00      	cmp	r3, #0
 800c504:	d003      	beq.n	800c50e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800c506:	693a      	ldr	r2, [r7, #16]
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	4313      	orrs	r3, r2
 800c50c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c50e:	4a13      	ldr	r2, [pc, #76]	; (800c55c <HAL_GPIO_Init+0x320>)
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	3301      	adds	r3, #1
 800c518:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	fa22 f303 	lsr.w	r3, r2, r3
 800c524:	2b00      	cmp	r3, #0
 800c526:	f47f ae91 	bne.w	800c24c <HAL_GPIO_Init+0x10>
  }
}
 800c52a:	bf00      	nop
 800c52c:	bf00      	nop
 800c52e:	371c      	adds	r7, #28
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr
 800c538:	40021000 	.word	0x40021000
 800c53c:	40010000 	.word	0x40010000
 800c540:	48000400 	.word	0x48000400
 800c544:	48000800 	.word	0x48000800
 800c548:	48000c00 	.word	0x48000c00
 800c54c:	48001000 	.word	0x48001000
 800c550:	48001400 	.word	0x48001400
 800c554:	48001800 	.word	0x48001800
 800c558:	48001c00 	.word	0x48001c00
 800c55c:	40010400 	.word	0x40010400

0800c560 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c560:	b480      	push	{r7}
 800c562:	b087      	sub	sp, #28
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800c56a:	2300      	movs	r3, #0
 800c56c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800c56e:	e0c9      	b.n	800c704 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800c570:	2201      	movs	r2, #1
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	fa02 f303 	lsl.w	r3, r2, r3
 800c578:	683a      	ldr	r2, [r7, #0]
 800c57a:	4013      	ands	r3, r2
 800c57c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	2b00      	cmp	r3, #0
 800c582:	f000 80bc 	beq.w	800c6fe <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800c586:	4a66      	ldr	r2, [pc, #408]	; (800c720 <HAL_GPIO_DeInit+0x1c0>)
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	089b      	lsrs	r3, r3, #2
 800c58c:	3302      	adds	r3, #2
 800c58e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c592:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	f003 0303 	and.w	r3, r3, #3
 800c59a:	009b      	lsls	r3, r3, #2
 800c59c:	220f      	movs	r2, #15
 800c59e:	fa02 f303 	lsl.w	r3, r2, r3
 800c5a2:	68fa      	ldr	r2, [r7, #12]
 800c5a4:	4013      	ands	r3, r2
 800c5a6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c5ae:	d02b      	beq.n	800c608 <HAL_GPIO_DeInit+0xa8>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	4a5c      	ldr	r2, [pc, #368]	; (800c724 <HAL_GPIO_DeInit+0x1c4>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d025      	beq.n	800c604 <HAL_GPIO_DeInit+0xa4>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	4a5b      	ldr	r2, [pc, #364]	; (800c728 <HAL_GPIO_DeInit+0x1c8>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d01f      	beq.n	800c600 <HAL_GPIO_DeInit+0xa0>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	4a5a      	ldr	r2, [pc, #360]	; (800c72c <HAL_GPIO_DeInit+0x1cc>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d019      	beq.n	800c5fc <HAL_GPIO_DeInit+0x9c>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	4a59      	ldr	r2, [pc, #356]	; (800c730 <HAL_GPIO_DeInit+0x1d0>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d013      	beq.n	800c5f8 <HAL_GPIO_DeInit+0x98>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	4a58      	ldr	r2, [pc, #352]	; (800c734 <HAL_GPIO_DeInit+0x1d4>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d00d      	beq.n	800c5f4 <HAL_GPIO_DeInit+0x94>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	4a57      	ldr	r2, [pc, #348]	; (800c738 <HAL_GPIO_DeInit+0x1d8>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d007      	beq.n	800c5f0 <HAL_GPIO_DeInit+0x90>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4a56      	ldr	r2, [pc, #344]	; (800c73c <HAL_GPIO_DeInit+0x1dc>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d101      	bne.n	800c5ec <HAL_GPIO_DeInit+0x8c>
 800c5e8:	2307      	movs	r3, #7
 800c5ea:	e00e      	b.n	800c60a <HAL_GPIO_DeInit+0xaa>
 800c5ec:	2308      	movs	r3, #8
 800c5ee:	e00c      	b.n	800c60a <HAL_GPIO_DeInit+0xaa>
 800c5f0:	2306      	movs	r3, #6
 800c5f2:	e00a      	b.n	800c60a <HAL_GPIO_DeInit+0xaa>
 800c5f4:	2305      	movs	r3, #5
 800c5f6:	e008      	b.n	800c60a <HAL_GPIO_DeInit+0xaa>
 800c5f8:	2304      	movs	r3, #4
 800c5fa:	e006      	b.n	800c60a <HAL_GPIO_DeInit+0xaa>
 800c5fc:	2303      	movs	r3, #3
 800c5fe:	e004      	b.n	800c60a <HAL_GPIO_DeInit+0xaa>
 800c600:	2302      	movs	r3, #2
 800c602:	e002      	b.n	800c60a <HAL_GPIO_DeInit+0xaa>
 800c604:	2301      	movs	r3, #1
 800c606:	e000      	b.n	800c60a <HAL_GPIO_DeInit+0xaa>
 800c608:	2300      	movs	r3, #0
 800c60a:	697a      	ldr	r2, [r7, #20]
 800c60c:	f002 0203 	and.w	r2, r2, #3
 800c610:	0092      	lsls	r2, r2, #2
 800c612:	4093      	lsls	r3, r2
 800c614:	68fa      	ldr	r2, [r7, #12]
 800c616:	429a      	cmp	r2, r3
 800c618:	d132      	bne.n	800c680 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800c61a:	4b49      	ldr	r3, [pc, #292]	; (800c740 <HAL_GPIO_DeInit+0x1e0>)
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	43db      	mvns	r3, r3
 800c622:	4947      	ldr	r1, [pc, #284]	; (800c740 <HAL_GPIO_DeInit+0x1e0>)
 800c624:	4013      	ands	r3, r2
 800c626:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800c628:	4b45      	ldr	r3, [pc, #276]	; (800c740 <HAL_GPIO_DeInit+0x1e0>)
 800c62a:	685a      	ldr	r2, [r3, #4]
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	43db      	mvns	r3, r3
 800c630:	4943      	ldr	r1, [pc, #268]	; (800c740 <HAL_GPIO_DeInit+0x1e0>)
 800c632:	4013      	ands	r3, r2
 800c634:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800c636:	4b42      	ldr	r3, [pc, #264]	; (800c740 <HAL_GPIO_DeInit+0x1e0>)
 800c638:	68da      	ldr	r2, [r3, #12]
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	43db      	mvns	r3, r3
 800c63e:	4940      	ldr	r1, [pc, #256]	; (800c740 <HAL_GPIO_DeInit+0x1e0>)
 800c640:	4013      	ands	r3, r2
 800c642:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800c644:	4b3e      	ldr	r3, [pc, #248]	; (800c740 <HAL_GPIO_DeInit+0x1e0>)
 800c646:	689a      	ldr	r2, [r3, #8]
 800c648:	693b      	ldr	r3, [r7, #16]
 800c64a:	43db      	mvns	r3, r3
 800c64c:	493c      	ldr	r1, [pc, #240]	; (800c740 <HAL_GPIO_DeInit+0x1e0>)
 800c64e:	4013      	ands	r3, r2
 800c650:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	f003 0303 	and.w	r3, r3, #3
 800c658:	009b      	lsls	r3, r3, #2
 800c65a:	220f      	movs	r2, #15
 800c65c:	fa02 f303 	lsl.w	r3, r2, r3
 800c660:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800c662:	4a2f      	ldr	r2, [pc, #188]	; (800c720 <HAL_GPIO_DeInit+0x1c0>)
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	089b      	lsrs	r3, r3, #2
 800c668:	3302      	adds	r3, #2
 800c66a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	43da      	mvns	r2, r3
 800c672:	482b      	ldr	r0, [pc, #172]	; (800c720 <HAL_GPIO_DeInit+0x1c0>)
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	089b      	lsrs	r3, r3, #2
 800c678:	400a      	ands	r2, r1
 800c67a:	3302      	adds	r3, #2
 800c67c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681a      	ldr	r2, [r3, #0]
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	005b      	lsls	r3, r3, #1
 800c688:	2103      	movs	r1, #3
 800c68a:	fa01 f303 	lsl.w	r3, r1, r3
 800c68e:	431a      	orrs	r2, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	08da      	lsrs	r2, r3, #3
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	3208      	adds	r2, #8
 800c69c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	f003 0307 	and.w	r3, r3, #7
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	220f      	movs	r2, #15
 800c6aa:	fa02 f303 	lsl.w	r3, r2, r3
 800c6ae:	43db      	mvns	r3, r3
 800c6b0:	697a      	ldr	r2, [r7, #20]
 800c6b2:	08d2      	lsrs	r2, r2, #3
 800c6b4:	4019      	ands	r1, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	3208      	adds	r2, #8
 800c6ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	689a      	ldr	r2, [r3, #8]
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	005b      	lsls	r3, r3, #1
 800c6c6:	2103      	movs	r1, #3
 800c6c8:	fa01 f303 	lsl.w	r3, r1, r3
 800c6cc:	43db      	mvns	r3, r3
 800c6ce:	401a      	ands	r2, r3
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	685a      	ldr	r2, [r3, #4]
 800c6d8:	2101      	movs	r1, #1
 800c6da:	697b      	ldr	r3, [r7, #20]
 800c6dc:	fa01 f303 	lsl.w	r3, r1, r3
 800c6e0:	43db      	mvns	r3, r3
 800c6e2:	401a      	ands	r2, r3
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	68da      	ldr	r2, [r3, #12]
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	005b      	lsls	r3, r3, #1
 800c6f0:	2103      	movs	r1, #3
 800c6f2:	fa01 f303 	lsl.w	r3, r1, r3
 800c6f6:	43db      	mvns	r3, r3
 800c6f8:	401a      	ands	r2, r3
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	3301      	adds	r3, #1
 800c702:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800c704:	683a      	ldr	r2, [r7, #0]
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	fa22 f303 	lsr.w	r3, r2, r3
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	f47f af2f 	bne.w	800c570 <HAL_GPIO_DeInit+0x10>
  }
}
 800c712:	bf00      	nop
 800c714:	bf00      	nop
 800c716:	371c      	adds	r7, #28
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr
 800c720:	40010000 	.word	0x40010000
 800c724:	48000400 	.word	0x48000400
 800c728:	48000800 	.word	0x48000800
 800c72c:	48000c00 	.word	0x48000c00
 800c730:	48001000 	.word	0x48001000
 800c734:	48001400 	.word	0x48001400
 800c738:	48001800 	.word	0x48001800
 800c73c:	48001c00 	.word	0x48001c00
 800c740:	40010400 	.word	0x40010400

0800c744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c744:	b480      	push	{r7}
 800c746:	b083      	sub	sp, #12
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	460b      	mov	r3, r1
 800c74e:	807b      	strh	r3, [r7, #2]
 800c750:	4613      	mov	r3, r2
 800c752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c754:	787b      	ldrb	r3, [r7, #1]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d003      	beq.n	800c762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c75a:	887a      	ldrh	r2, [r7, #2]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c760:	e002      	b.n	800c768 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c762:	887a      	ldrh	r2, [r7, #2]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c768:	bf00      	nop
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr

0800c774 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
 800c77a:	4603      	mov	r3, r0
 800c77c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800c77e:	4b08      	ldr	r3, [pc, #32]	; (800c7a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c780:	695a      	ldr	r2, [r3, #20]
 800c782:	88fb      	ldrh	r3, [r7, #6]
 800c784:	4013      	ands	r3, r2
 800c786:	2b00      	cmp	r3, #0
 800c788:	d006      	beq.n	800c798 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c78a:	4a05      	ldr	r2, [pc, #20]	; (800c7a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c78c:	88fb      	ldrh	r3, [r7, #6]
 800c78e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c790:	88fb      	ldrh	r3, [r7, #6]
 800c792:	4618      	mov	r0, r3
 800c794:	f7f5 f9a8 	bl	8001ae8 <HAL_GPIO_EXTI_Callback>
  }
}
 800c798:	bf00      	nop
 800c79a:	3708      	adds	r7, #8
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	40010400 	.word	0x40010400

0800c7a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d101      	bne.n	800c7b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	e081      	b.n	800c8ba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d106      	bne.n	800c7d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f7f4 fdfa 	bl	80013c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2224      	movs	r2, #36	; 0x24
 800c7d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	681a      	ldr	r2, [r3, #0]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f022 0201 	bic.w	r2, r2, #1
 800c7e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	685a      	ldr	r2, [r3, #4]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c7f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	689a      	ldr	r2, [r3, #8]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c804:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	d107      	bne.n	800c81e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	689a      	ldr	r2, [r3, #8]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c81a:	609a      	str	r2, [r3, #8]
 800c81c:	e006      	b.n	800c82c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	689a      	ldr	r2, [r3, #8]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800c82a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	68db      	ldr	r3, [r3, #12]
 800c830:	2b02      	cmp	r3, #2
 800c832:	d104      	bne.n	800c83e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c83c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	6812      	ldr	r2, [r2, #0]
 800c848:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c84c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c850:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	68da      	ldr	r2, [r3, #12]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c860:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	691a      	ldr	r2, [r3, #16]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	695b      	ldr	r3, [r3, #20]
 800c86a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	699b      	ldr	r3, [r3, #24]
 800c872:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	430a      	orrs	r2, r1
 800c87a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	69d9      	ldr	r1, [r3, #28]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6a1a      	ldr	r2, [r3, #32]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	430a      	orrs	r2, r1
 800c88a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	681a      	ldr	r2, [r3, #0]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f042 0201 	orr.w	r2, r2, #1
 800c89a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2220      	movs	r2, #32
 800c8a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800c8b8:	2300      	movs	r3, #0
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3708      	adds	r7, #8
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}

0800c8c2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800c8c2:	b580      	push	{r7, lr}
 800c8c4:	b082      	sub	sp, #8
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d101      	bne.n	800c8d4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	e021      	b.n	800c918 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2224      	movs	r2, #36	; 0x24
 800c8d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	681a      	ldr	r2, [r3, #0]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f022 0201 	bic.w	r2, r2, #1
 800c8ea:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f7f4 fe2f 	bl	8001550 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2200      	movs	r2, #0
 800c904:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2200      	movs	r2, #0
 800c90a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2200      	movs	r2, #0
 800c912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c916:	2300      	movs	r3, #0
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3708      	adds	r7, #8
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b088      	sub	sp, #32
 800c924:	af02      	add	r7, sp, #8
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	607a      	str	r2, [r7, #4]
 800c92a:	461a      	mov	r2, r3
 800c92c:	460b      	mov	r3, r1
 800c92e:	817b      	strh	r3, [r7, #10]
 800c930:	4613      	mov	r3, r2
 800c932:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c93a:	b2db      	uxtb	r3, r3
 800c93c:	2b20      	cmp	r3, #32
 800c93e:	f040 80da 	bne.w	800caf6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d101      	bne.n	800c950 <HAL_I2C_Master_Transmit+0x30>
 800c94c:	2302      	movs	r3, #2
 800c94e:	e0d3      	b.n	800caf8 <HAL_I2C_Master_Transmit+0x1d8>
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2201      	movs	r2, #1
 800c954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c958:	f7fe f96e 	bl	800ac38 <HAL_GetTick>
 800c95c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	9300      	str	r3, [sp, #0]
 800c962:	2319      	movs	r3, #25
 800c964:	2201      	movs	r2, #1
 800c966:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c96a:	68f8      	ldr	r0, [r7, #12]
 800c96c:	f000 fdd2 	bl	800d514 <I2C_WaitOnFlagUntilTimeout>
 800c970:	4603      	mov	r3, r0
 800c972:	2b00      	cmp	r3, #0
 800c974:	d001      	beq.n	800c97a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800c976:	2301      	movs	r3, #1
 800c978:	e0be      	b.n	800caf8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2221      	movs	r2, #33	; 0x21
 800c97e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2210      	movs	r2, #16
 800c986:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2200      	movs	r2, #0
 800c98e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	893a      	ldrh	r2, [r7, #8]
 800c99a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	2bff      	cmp	r3, #255	; 0xff
 800c9aa:	d90e      	bls.n	800c9ca <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	22ff      	movs	r2, #255	; 0xff
 800c9b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9b6:	b2da      	uxtb	r2, r3
 800c9b8:	8979      	ldrh	r1, [r7, #10]
 800c9ba:	4b51      	ldr	r3, [pc, #324]	; (800cb00 <HAL_I2C_Master_Transmit+0x1e0>)
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	f000 ffc8 	bl	800d958 <I2C_TransferConfig>
 800c9c8:	e06c      	b.n	800caa4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9d8:	b2da      	uxtb	r2, r3
 800c9da:	8979      	ldrh	r1, [r7, #10]
 800c9dc:	4b48      	ldr	r3, [pc, #288]	; (800cb00 <HAL_I2C_Master_Transmit+0x1e0>)
 800c9de:	9300      	str	r3, [sp, #0]
 800c9e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c9e4:	68f8      	ldr	r0, [r7, #12]
 800c9e6:	f000 ffb7 	bl	800d958 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800c9ea:	e05b      	b.n	800caa4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c9ec:	697a      	ldr	r2, [r7, #20]
 800c9ee:	6a39      	ldr	r1, [r7, #32]
 800c9f0:	68f8      	ldr	r0, [r7, #12]
 800c9f2:	f000 fdcf 	bl	800d594 <I2C_WaitOnTXISFlagUntilTimeout>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d001      	beq.n	800ca00 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	e07b      	b.n	800caf8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca04:	781a      	ldrb	r2, [r3, #0]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca10:	1c5a      	adds	r2, r3, #1
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	3b01      	subs	r3, #1
 800ca1e:	b29a      	uxth	r2, r3
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca28:	3b01      	subs	r3, #1
 800ca2a:	b29a      	uxth	r2, r3
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d034      	beq.n	800caa4 <HAL_I2C_Master_Transmit+0x184>
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d130      	bne.n	800caa4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	9300      	str	r3, [sp, #0]
 800ca46:	6a3b      	ldr	r3, [r7, #32]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	2180      	movs	r1, #128	; 0x80
 800ca4c:	68f8      	ldr	r0, [r7, #12]
 800ca4e:	f000 fd61 	bl	800d514 <I2C_WaitOnFlagUntilTimeout>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d001      	beq.n	800ca5c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	e04d      	b.n	800caf8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	2bff      	cmp	r3, #255	; 0xff
 800ca64:	d90e      	bls.n	800ca84 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	22ff      	movs	r2, #255	; 0xff
 800ca6a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca70:	b2da      	uxtb	r2, r3
 800ca72:	8979      	ldrh	r1, [r7, #10]
 800ca74:	2300      	movs	r3, #0
 800ca76:	9300      	str	r3, [sp, #0]
 800ca78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ca7c:	68f8      	ldr	r0, [r7, #12]
 800ca7e:	f000 ff6b 	bl	800d958 <I2C_TransferConfig>
 800ca82:	e00f      	b.n	800caa4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca88:	b29a      	uxth	r2, r3
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca92:	b2da      	uxtb	r2, r3
 800ca94:	8979      	ldrh	r1, [r7, #10]
 800ca96:	2300      	movs	r3, #0
 800ca98:	9300      	str	r3, [sp, #0]
 800ca9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ca9e:	68f8      	ldr	r0, [r7, #12]
 800caa0:	f000 ff5a 	bl	800d958 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d19e      	bne.n	800c9ec <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800caae:	697a      	ldr	r2, [r7, #20]
 800cab0:	6a39      	ldr	r1, [r7, #32]
 800cab2:	68f8      	ldr	r0, [r7, #12]
 800cab4:	f000 fdae 	bl	800d614 <I2C_WaitOnSTOPFlagUntilTimeout>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d001      	beq.n	800cac2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800cabe:	2301      	movs	r3, #1
 800cac0:	e01a      	b.n	800caf8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2220      	movs	r2, #32
 800cac8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	6859      	ldr	r1, [r3, #4]
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681a      	ldr	r2, [r3, #0]
 800cad4:	4b0b      	ldr	r3, [pc, #44]	; (800cb04 <HAL_I2C_Master_Transmit+0x1e4>)
 800cad6:	400b      	ands	r3, r1
 800cad8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	2220      	movs	r2, #32
 800cade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	2200      	movs	r2, #0
 800cae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2200      	movs	r2, #0
 800caee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800caf2:	2300      	movs	r3, #0
 800caf4:	e000      	b.n	800caf8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800caf6:	2302      	movs	r3, #2
  }
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3718      	adds	r7, #24
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}
 800cb00:	80002000 	.word	0x80002000
 800cb04:	fe00e800 	.word	0xfe00e800

0800cb08 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b088      	sub	sp, #32
 800cb0c:	af02      	add	r7, sp, #8
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	607a      	str	r2, [r7, #4]
 800cb12:	461a      	mov	r2, r3
 800cb14:	460b      	mov	r3, r1
 800cb16:	817b      	strh	r3, [r7, #10]
 800cb18:	4613      	mov	r3, r2
 800cb1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	2b20      	cmp	r3, #32
 800cb26:	f040 80db 	bne.w	800cce0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb30:	2b01      	cmp	r3, #1
 800cb32:	d101      	bne.n	800cb38 <HAL_I2C_Master_Receive+0x30>
 800cb34:	2302      	movs	r3, #2
 800cb36:	e0d4      	b.n	800cce2 <HAL_I2C_Master_Receive+0x1da>
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cb40:	f7fe f87a 	bl	800ac38 <HAL_GetTick>
 800cb44:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	9300      	str	r3, [sp, #0]
 800cb4a:	2319      	movs	r3, #25
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cb52:	68f8      	ldr	r0, [r7, #12]
 800cb54:	f000 fcde 	bl	800d514 <I2C_WaitOnFlagUntilTimeout>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d001      	beq.n	800cb62 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	e0bf      	b.n	800cce2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2222      	movs	r2, #34	; 0x22
 800cb66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	2210      	movs	r2, #16
 800cb6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2200      	movs	r2, #0
 800cb76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	893a      	ldrh	r2, [r7, #8]
 800cb82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2200      	movs	r2, #0
 800cb88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	2bff      	cmp	r3, #255	; 0xff
 800cb92:	d90e      	bls.n	800cbb2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	22ff      	movs	r2, #255	; 0xff
 800cb98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb9e:	b2da      	uxtb	r2, r3
 800cba0:	8979      	ldrh	r1, [r7, #10]
 800cba2:	4b52      	ldr	r3, [pc, #328]	; (800ccec <HAL_I2C_Master_Receive+0x1e4>)
 800cba4:	9300      	str	r3, [sp, #0]
 800cba6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cbaa:	68f8      	ldr	r0, [r7, #12]
 800cbac:	f000 fed4 	bl	800d958 <I2C_TransferConfig>
 800cbb0:	e06d      	b.n	800cc8e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbc0:	b2da      	uxtb	r2, r3
 800cbc2:	8979      	ldrh	r1, [r7, #10]
 800cbc4:	4b49      	ldr	r3, [pc, #292]	; (800ccec <HAL_I2C_Master_Receive+0x1e4>)
 800cbc6:	9300      	str	r3, [sp, #0]
 800cbc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cbcc:	68f8      	ldr	r0, [r7, #12]
 800cbce:	f000 fec3 	bl	800d958 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800cbd2:	e05c      	b.n	800cc8e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cbd4:	697a      	ldr	r2, [r7, #20]
 800cbd6:	6a39      	ldr	r1, [r7, #32]
 800cbd8:	68f8      	ldr	r0, [r7, #12]
 800cbda:	f000 fd57 	bl	800d68c <I2C_WaitOnRXNEFlagUntilTimeout>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d001      	beq.n	800cbe8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	e07c      	b.n	800cce2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf2:	b2d2      	uxtb	r2, r2
 800cbf4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbfa:	1c5a      	adds	r2, r3, #1
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc04:	3b01      	subs	r3, #1
 800cc06:	b29a      	uxth	r2, r3
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	3b01      	subs	r3, #1
 800cc14:	b29a      	uxth	r2, r3
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc1e:	b29b      	uxth	r3, r3
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d034      	beq.n	800cc8e <HAL_I2C_Master_Receive+0x186>
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d130      	bne.n	800cc8e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	9300      	str	r3, [sp, #0]
 800cc30:	6a3b      	ldr	r3, [r7, #32]
 800cc32:	2200      	movs	r2, #0
 800cc34:	2180      	movs	r1, #128	; 0x80
 800cc36:	68f8      	ldr	r0, [r7, #12]
 800cc38:	f000 fc6c 	bl	800d514 <I2C_WaitOnFlagUntilTimeout>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d001      	beq.n	800cc46 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800cc42:	2301      	movs	r3, #1
 800cc44:	e04d      	b.n	800cce2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	2bff      	cmp	r3, #255	; 0xff
 800cc4e:	d90e      	bls.n	800cc6e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	22ff      	movs	r2, #255	; 0xff
 800cc54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc5a:	b2da      	uxtb	r2, r3
 800cc5c:	8979      	ldrh	r1, [r7, #10]
 800cc5e:	2300      	movs	r3, #0
 800cc60:	9300      	str	r3, [sp, #0]
 800cc62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cc66:	68f8      	ldr	r0, [r7, #12]
 800cc68:	f000 fe76 	bl	800d958 <I2C_TransferConfig>
 800cc6c:	e00f      	b.n	800cc8e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc72:	b29a      	uxth	r2, r3
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc7c:	b2da      	uxtb	r2, r3
 800cc7e:	8979      	ldrh	r1, [r7, #10]
 800cc80:	2300      	movs	r3, #0
 800cc82:	9300      	str	r3, [sp, #0]
 800cc84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cc88:	68f8      	ldr	r0, [r7, #12]
 800cc8a:	f000 fe65 	bl	800d958 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d19d      	bne.n	800cbd4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cc98:	697a      	ldr	r2, [r7, #20]
 800cc9a:	6a39      	ldr	r1, [r7, #32]
 800cc9c:	68f8      	ldr	r0, [r7, #12]
 800cc9e:	f000 fcb9 	bl	800d614 <I2C_WaitOnSTOPFlagUntilTimeout>
 800cca2:	4603      	mov	r3, r0
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d001      	beq.n	800ccac <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e01a      	b.n	800cce2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2220      	movs	r2, #32
 800ccb2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	6859      	ldr	r1, [r3, #4]
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681a      	ldr	r2, [r3, #0]
 800ccbe:	4b0c      	ldr	r3, [pc, #48]	; (800ccf0 <HAL_I2C_Master_Receive+0x1e8>)
 800ccc0:	400b      	ands	r3, r1
 800ccc2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2220      	movs	r2, #32
 800ccc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	e000      	b.n	800cce2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800cce0:	2302      	movs	r3, #2
  }
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3718      	adds	r7, #24
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}
 800ccea:	bf00      	nop
 800ccec:	80002400 	.word	0x80002400
 800ccf0:	fe00e800 	.word	0xfe00e800

0800ccf4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b088      	sub	sp, #32
 800ccf8:	af02      	add	r7, sp, #8
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	4608      	mov	r0, r1
 800ccfe:	4611      	mov	r1, r2
 800cd00:	461a      	mov	r2, r3
 800cd02:	4603      	mov	r3, r0
 800cd04:	817b      	strh	r3, [r7, #10]
 800cd06:	460b      	mov	r3, r1
 800cd08:	813b      	strh	r3, [r7, #8]
 800cd0a:	4613      	mov	r3, r2
 800cd0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd14:	b2db      	uxtb	r3, r3
 800cd16:	2b20      	cmp	r3, #32
 800cd18:	f040 80f9 	bne.w	800cf0e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd1c:	6a3b      	ldr	r3, [r7, #32]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d002      	beq.n	800cd28 <HAL_I2C_Mem_Write+0x34>
 800cd22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d105      	bne.n	800cd34 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cd2e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800cd30:	2301      	movs	r3, #1
 800cd32:	e0ed      	b.n	800cf10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d101      	bne.n	800cd42 <HAL_I2C_Mem_Write+0x4e>
 800cd3e:	2302      	movs	r3, #2
 800cd40:	e0e6      	b.n	800cf10 <HAL_I2C_Mem_Write+0x21c>
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2201      	movs	r2, #1
 800cd46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cd4a:	f7fd ff75 	bl	800ac38 <HAL_GetTick>
 800cd4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	9300      	str	r3, [sp, #0]
 800cd54:	2319      	movs	r3, #25
 800cd56:	2201      	movs	r2, #1
 800cd58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cd5c:	68f8      	ldr	r0, [r7, #12]
 800cd5e:	f000 fbd9 	bl	800d514 <I2C_WaitOnFlagUntilTimeout>
 800cd62:	4603      	mov	r3, r0
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d001      	beq.n	800cd6c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800cd68:	2301      	movs	r3, #1
 800cd6a:	e0d1      	b.n	800cf10 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2221      	movs	r2, #33	; 0x21
 800cd70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	2240      	movs	r2, #64	; 0x40
 800cd78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	6a3a      	ldr	r2, [r7, #32]
 800cd86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cd8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2200      	movs	r2, #0
 800cd92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cd94:	88f8      	ldrh	r0, [r7, #6]
 800cd96:	893a      	ldrh	r2, [r7, #8]
 800cd98:	8979      	ldrh	r1, [r7, #10]
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	9301      	str	r3, [sp, #4]
 800cd9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda0:	9300      	str	r3, [sp, #0]
 800cda2:	4603      	mov	r3, r0
 800cda4:	68f8      	ldr	r0, [r7, #12]
 800cda6:	f000 fae9 	bl	800d37c <I2C_RequestMemoryWrite>
 800cdaa:	4603      	mov	r3, r0
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d005      	beq.n	800cdbc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800cdb8:	2301      	movs	r3, #1
 800cdba:	e0a9      	b.n	800cf10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	2bff      	cmp	r3, #255	; 0xff
 800cdc4:	d90e      	bls.n	800cde4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	22ff      	movs	r2, #255	; 0xff
 800cdca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdd0:	b2da      	uxtb	r2, r3
 800cdd2:	8979      	ldrh	r1, [r7, #10]
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	9300      	str	r3, [sp, #0]
 800cdd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cddc:	68f8      	ldr	r0, [r7, #12]
 800cdde:	f000 fdbb 	bl	800d958 <I2C_TransferConfig>
 800cde2:	e00f      	b.n	800ce04 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cde8:	b29a      	uxth	r2, r3
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdf2:	b2da      	uxtb	r2, r3
 800cdf4:	8979      	ldrh	r1, [r7, #10]
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	9300      	str	r3, [sp, #0]
 800cdfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cdfe:	68f8      	ldr	r0, [r7, #12]
 800ce00:	f000 fdaa 	bl	800d958 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ce04:	697a      	ldr	r2, [r7, #20]
 800ce06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce08:	68f8      	ldr	r0, [r7, #12]
 800ce0a:	f000 fbc3 	bl	800d594 <I2C_WaitOnTXISFlagUntilTimeout>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d001      	beq.n	800ce18 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800ce14:	2301      	movs	r3, #1
 800ce16:	e07b      	b.n	800cf10 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce1c:	781a      	ldrb	r2, [r3, #0]
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce28:	1c5a      	adds	r2, r3, #1
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce32:	b29b      	uxth	r3, r3
 800ce34:	3b01      	subs	r3, #1
 800ce36:	b29a      	uxth	r2, r3
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce40:	3b01      	subs	r3, #1
 800ce42:	b29a      	uxth	r2, r3
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce4c:	b29b      	uxth	r3, r3
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d034      	beq.n	800cebc <HAL_I2C_Mem_Write+0x1c8>
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d130      	bne.n	800cebc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	9300      	str	r3, [sp, #0]
 800ce5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce60:	2200      	movs	r2, #0
 800ce62:	2180      	movs	r1, #128	; 0x80
 800ce64:	68f8      	ldr	r0, [r7, #12]
 800ce66:	f000 fb55 	bl	800d514 <I2C_WaitOnFlagUntilTimeout>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d001      	beq.n	800ce74 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800ce70:	2301      	movs	r3, #1
 800ce72:	e04d      	b.n	800cf10 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce78:	b29b      	uxth	r3, r3
 800ce7a:	2bff      	cmp	r3, #255	; 0xff
 800ce7c:	d90e      	bls.n	800ce9c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	22ff      	movs	r2, #255	; 0xff
 800ce82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce88:	b2da      	uxtb	r2, r3
 800ce8a:	8979      	ldrh	r1, [r7, #10]
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	9300      	str	r3, [sp, #0]
 800ce90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ce94:	68f8      	ldr	r0, [r7, #12]
 800ce96:	f000 fd5f 	bl	800d958 <I2C_TransferConfig>
 800ce9a:	e00f      	b.n	800cebc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cea0:	b29a      	uxth	r2, r3
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ceaa:	b2da      	uxtb	r2, r3
 800ceac:	8979      	ldrh	r1, [r7, #10]
 800ceae:	2300      	movs	r3, #0
 800ceb0:	9300      	str	r3, [sp, #0]
 800ceb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ceb6:	68f8      	ldr	r0, [r7, #12]
 800ceb8:	f000 fd4e 	bl	800d958 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d19e      	bne.n	800ce04 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cec6:	697a      	ldr	r2, [r7, #20]
 800cec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ceca:	68f8      	ldr	r0, [r7, #12]
 800cecc:	f000 fba2 	bl	800d614 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ced0:	4603      	mov	r3, r0
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d001      	beq.n	800ceda <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800ced6:	2301      	movs	r3, #1
 800ced8:	e01a      	b.n	800cf10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	2220      	movs	r2, #32
 800cee0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	6859      	ldr	r1, [r3, #4]
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681a      	ldr	r2, [r3, #0]
 800ceec:	4b0a      	ldr	r3, [pc, #40]	; (800cf18 <HAL_I2C_Mem_Write+0x224>)
 800ceee:	400b      	ands	r3, r1
 800cef0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	2220      	movs	r2, #32
 800cef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2200      	movs	r2, #0
 800cefe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	2200      	movs	r2, #0
 800cf06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	e000      	b.n	800cf10 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800cf0e:	2302      	movs	r3, #2
  }
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3718      	adds	r7, #24
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	fe00e800 	.word	0xfe00e800

0800cf1c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b088      	sub	sp, #32
 800cf20:	af02      	add	r7, sp, #8
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	4608      	mov	r0, r1
 800cf26:	4611      	mov	r1, r2
 800cf28:	461a      	mov	r2, r3
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	817b      	strh	r3, [r7, #10]
 800cf2e:	460b      	mov	r3, r1
 800cf30:	813b      	strh	r3, [r7, #8]
 800cf32:	4613      	mov	r3, r2
 800cf34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	2b20      	cmp	r3, #32
 800cf40:	f040 80fd 	bne.w	800d13e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf44:	6a3b      	ldr	r3, [r7, #32]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d002      	beq.n	800cf50 <HAL_I2C_Mem_Read+0x34>
 800cf4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d105      	bne.n	800cf5c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800cf58:	2301      	movs	r3, #1
 800cf5a:	e0f1      	b.n	800d140 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cf62:	2b01      	cmp	r3, #1
 800cf64:	d101      	bne.n	800cf6a <HAL_I2C_Mem_Read+0x4e>
 800cf66:	2302      	movs	r3, #2
 800cf68:	e0ea      	b.n	800d140 <HAL_I2C_Mem_Read+0x224>
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cf72:	f7fd fe61 	bl	800ac38 <HAL_GetTick>
 800cf76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	9300      	str	r3, [sp, #0]
 800cf7c:	2319      	movs	r3, #25
 800cf7e:	2201      	movs	r2, #1
 800cf80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cf84:	68f8      	ldr	r0, [r7, #12]
 800cf86:	f000 fac5 	bl	800d514 <I2C_WaitOnFlagUntilTimeout>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d001      	beq.n	800cf94 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800cf90:	2301      	movs	r3, #1
 800cf92:	e0d5      	b.n	800d140 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	2222      	movs	r2, #34	; 0x22
 800cf98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2240      	movs	r2, #64	; 0x40
 800cfa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	6a3a      	ldr	r2, [r7, #32]
 800cfae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cfb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cfbc:	88f8      	ldrh	r0, [r7, #6]
 800cfbe:	893a      	ldrh	r2, [r7, #8]
 800cfc0:	8979      	ldrh	r1, [r7, #10]
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	9301      	str	r3, [sp, #4]
 800cfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc8:	9300      	str	r3, [sp, #0]
 800cfca:	4603      	mov	r3, r0
 800cfcc:	68f8      	ldr	r0, [r7, #12]
 800cfce:	f000 fa29 	bl	800d424 <I2C_RequestMemoryRead>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d005      	beq.n	800cfe4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	e0ad      	b.n	800d140 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	2bff      	cmp	r3, #255	; 0xff
 800cfec:	d90e      	bls.n	800d00c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	22ff      	movs	r2, #255	; 0xff
 800cff2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cff8:	b2da      	uxtb	r2, r3
 800cffa:	8979      	ldrh	r1, [r7, #10]
 800cffc:	4b52      	ldr	r3, [pc, #328]	; (800d148 <HAL_I2C_Mem_Read+0x22c>)
 800cffe:	9300      	str	r3, [sp, #0]
 800d000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d004:	68f8      	ldr	r0, [r7, #12]
 800d006:	f000 fca7 	bl	800d958 <I2C_TransferConfig>
 800d00a:	e00f      	b.n	800d02c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d010:	b29a      	uxth	r2, r3
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d01a:	b2da      	uxtb	r2, r3
 800d01c:	8979      	ldrh	r1, [r7, #10]
 800d01e:	4b4a      	ldr	r3, [pc, #296]	; (800d148 <HAL_I2C_Mem_Read+0x22c>)
 800d020:	9300      	str	r3, [sp, #0]
 800d022:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d026:	68f8      	ldr	r0, [r7, #12]
 800d028:	f000 fc96 	bl	800d958 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	9300      	str	r3, [sp, #0]
 800d030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d032:	2200      	movs	r2, #0
 800d034:	2104      	movs	r1, #4
 800d036:	68f8      	ldr	r0, [r7, #12]
 800d038:	f000 fa6c 	bl	800d514 <I2C_WaitOnFlagUntilTimeout>
 800d03c:	4603      	mov	r3, r0
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d001      	beq.n	800d046 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800d042:	2301      	movs	r3, #1
 800d044:	e07c      	b.n	800d140 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d050:	b2d2      	uxtb	r2, r2
 800d052:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d058:	1c5a      	adds	r2, r3, #1
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d062:	3b01      	subs	r3, #1
 800d064:	b29a      	uxth	r2, r3
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d06e:	b29b      	uxth	r3, r3
 800d070:	3b01      	subs	r3, #1
 800d072:	b29a      	uxth	r2, r3
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d034      	beq.n	800d0ec <HAL_I2C_Mem_Read+0x1d0>
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d086:	2b00      	cmp	r3, #0
 800d088:	d130      	bne.n	800d0ec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	9300      	str	r3, [sp, #0]
 800d08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d090:	2200      	movs	r2, #0
 800d092:	2180      	movs	r1, #128	; 0x80
 800d094:	68f8      	ldr	r0, [r7, #12]
 800d096:	f000 fa3d 	bl	800d514 <I2C_WaitOnFlagUntilTimeout>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d001      	beq.n	800d0a4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	e04d      	b.n	800d140 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	2bff      	cmp	r3, #255	; 0xff
 800d0ac:	d90e      	bls.n	800d0cc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	22ff      	movs	r2, #255	; 0xff
 800d0b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0b8:	b2da      	uxtb	r2, r3
 800d0ba:	8979      	ldrh	r1, [r7, #10]
 800d0bc:	2300      	movs	r3, #0
 800d0be:	9300      	str	r3, [sp, #0]
 800d0c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d0c4:	68f8      	ldr	r0, [r7, #12]
 800d0c6:	f000 fc47 	bl	800d958 <I2C_TransferConfig>
 800d0ca:	e00f      	b.n	800d0ec <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0d0:	b29a      	uxth	r2, r3
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0da:	b2da      	uxtb	r2, r3
 800d0dc:	8979      	ldrh	r1, [r7, #10]
 800d0de:	2300      	movs	r3, #0
 800d0e0:	9300      	str	r3, [sp, #0]
 800d0e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d0e6:	68f8      	ldr	r0, [r7, #12]
 800d0e8:	f000 fc36 	bl	800d958 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0f0:	b29b      	uxth	r3, r3
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d19a      	bne.n	800d02c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d0f6:	697a      	ldr	r2, [r7, #20]
 800d0f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d0fa:	68f8      	ldr	r0, [r7, #12]
 800d0fc:	f000 fa8a 	bl	800d614 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d100:	4603      	mov	r3, r0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d001      	beq.n	800d10a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800d106:	2301      	movs	r3, #1
 800d108:	e01a      	b.n	800d140 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	2220      	movs	r2, #32
 800d110:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	6859      	ldr	r1, [r3, #4]
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681a      	ldr	r2, [r3, #0]
 800d11c:	4b0b      	ldr	r3, [pc, #44]	; (800d14c <HAL_I2C_Mem_Read+0x230>)
 800d11e:	400b      	ands	r3, r1
 800d120:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2220      	movs	r2, #32
 800d126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	2200      	movs	r2, #0
 800d12e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2200      	movs	r2, #0
 800d136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d13a:	2300      	movs	r3, #0
 800d13c:	e000      	b.n	800d140 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800d13e:	2302      	movs	r3, #2
  }
}
 800d140:	4618      	mov	r0, r3
 800d142:	3718      	adds	r7, #24
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}
 800d148:	80002400 	.word	0x80002400
 800d14c:	fe00e800 	.word	0xfe00e800

0800d150 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b08a      	sub	sp, #40	; 0x28
 800d154:	af02      	add	r7, sp, #8
 800d156:	60f8      	str	r0, [r7, #12]
 800d158:	607a      	str	r2, [r7, #4]
 800d15a:	603b      	str	r3, [r7, #0]
 800d15c:	460b      	mov	r3, r1
 800d15e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800d160:	2300      	movs	r3, #0
 800d162:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d16a:	b2db      	uxtb	r3, r3
 800d16c:	2b20      	cmp	r3, #32
 800d16e:	f040 80f1 	bne.w	800d354 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	699b      	ldr	r3, [r3, #24]
 800d178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d17c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d180:	d101      	bne.n	800d186 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800d182:	2302      	movs	r3, #2
 800d184:	e0e7      	b.n	800d356 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	d101      	bne.n	800d194 <HAL_I2C_IsDeviceReady+0x44>
 800d190:	2302      	movs	r3, #2
 800d192:	e0e0      	b.n	800d356 <HAL_I2C_IsDeviceReady+0x206>
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2201      	movs	r2, #1
 800d198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2224      	movs	r2, #36	; 0x24
 800d1a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	68db      	ldr	r3, [r3, #12]
 800d1ae:	2b01      	cmp	r3, #1
 800d1b0:	d107      	bne.n	800d1c2 <HAL_I2C_IsDeviceReady+0x72>
 800d1b2:	897b      	ldrh	r3, [r7, #10]
 800d1b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d1b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d1bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d1c0:	e004      	b.n	800d1cc <HAL_I2C_IsDeviceReady+0x7c>
 800d1c2:	897b      	ldrh	r3, [r7, #10]
 800d1c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d1c8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800d1cc:	68fa      	ldr	r2, [r7, #12]
 800d1ce:	6812      	ldr	r2, [r2, #0]
 800d1d0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800d1d2:	f7fd fd31 	bl	800ac38 <HAL_GetTick>
 800d1d6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	699b      	ldr	r3, [r3, #24]
 800d1de:	f003 0320 	and.w	r3, r3, #32
 800d1e2:	2b20      	cmp	r3, #32
 800d1e4:	bf0c      	ite	eq
 800d1e6:	2301      	moveq	r3, #1
 800d1e8:	2300      	movne	r3, #0
 800d1ea:	b2db      	uxtb	r3, r3
 800d1ec:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	699b      	ldr	r3, [r3, #24]
 800d1f4:	f003 0310 	and.w	r3, r3, #16
 800d1f8:	2b10      	cmp	r3, #16
 800d1fa:	bf0c      	ite	eq
 800d1fc:	2301      	moveq	r3, #1
 800d1fe:	2300      	movne	r3, #0
 800d200:	b2db      	uxtb	r3, r3
 800d202:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800d204:	e034      	b.n	800d270 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d20c:	d01a      	beq.n	800d244 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d20e:	f7fd fd13 	bl	800ac38 <HAL_GetTick>
 800d212:	4602      	mov	r2, r0
 800d214:	69bb      	ldr	r3, [r7, #24]
 800d216:	1ad3      	subs	r3, r2, r3
 800d218:	683a      	ldr	r2, [r7, #0]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	d302      	bcc.n	800d224 <HAL_I2C_IsDeviceReady+0xd4>
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d10f      	bne.n	800d244 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	2220      	movs	r2, #32
 800d228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d230:	f043 0220 	orr.w	r2, r3, #32
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2200      	movs	r2, #0
 800d23c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800d240:	2301      	movs	r3, #1
 800d242:	e088      	b.n	800d356 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	699b      	ldr	r3, [r3, #24]
 800d24a:	f003 0320 	and.w	r3, r3, #32
 800d24e:	2b20      	cmp	r3, #32
 800d250:	bf0c      	ite	eq
 800d252:	2301      	moveq	r3, #1
 800d254:	2300      	movne	r3, #0
 800d256:	b2db      	uxtb	r3, r3
 800d258:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	699b      	ldr	r3, [r3, #24]
 800d260:	f003 0310 	and.w	r3, r3, #16
 800d264:	2b10      	cmp	r3, #16
 800d266:	bf0c      	ite	eq
 800d268:	2301      	moveq	r3, #1
 800d26a:	2300      	movne	r3, #0
 800d26c:	b2db      	uxtb	r3, r3
 800d26e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800d270:	7ffb      	ldrb	r3, [r7, #31]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d102      	bne.n	800d27c <HAL_I2C_IsDeviceReady+0x12c>
 800d276:	7fbb      	ldrb	r3, [r7, #30]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d0c4      	beq.n	800d206 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	699b      	ldr	r3, [r3, #24]
 800d282:	f003 0310 	and.w	r3, r3, #16
 800d286:	2b10      	cmp	r3, #16
 800d288:	d01a      	beq.n	800d2c0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800d28a:	69bb      	ldr	r3, [r7, #24]
 800d28c:	9300      	str	r3, [sp, #0]
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	2200      	movs	r2, #0
 800d292:	2120      	movs	r1, #32
 800d294:	68f8      	ldr	r0, [r7, #12]
 800d296:	f000 f93d 	bl	800d514 <I2C_WaitOnFlagUntilTimeout>
 800d29a:	4603      	mov	r3, r0
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d001      	beq.n	800d2a4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	e058      	b.n	800d356 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	2220      	movs	r2, #32
 800d2aa:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2220      	movs	r2, #32
 800d2b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	e04a      	b.n	800d356 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800d2c0:	69bb      	ldr	r3, [r7, #24]
 800d2c2:	9300      	str	r3, [sp, #0]
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	2120      	movs	r1, #32
 800d2ca:	68f8      	ldr	r0, [r7, #12]
 800d2cc:	f000 f922 	bl	800d514 <I2C_WaitOnFlagUntilTimeout>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d001      	beq.n	800d2da <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	e03d      	b.n	800d356 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2210      	movs	r2, #16
 800d2e0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	2220      	movs	r2, #32
 800d2e8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d118      	bne.n	800d324 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	685a      	ldr	r2, [r3, #4]
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d300:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800d302:	69bb      	ldr	r3, [r7, #24]
 800d304:	9300      	str	r3, [sp, #0]
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	2200      	movs	r2, #0
 800d30a:	2120      	movs	r1, #32
 800d30c:	68f8      	ldr	r0, [r7, #12]
 800d30e:	f000 f901 	bl	800d514 <I2C_WaitOnFlagUntilTimeout>
 800d312:	4603      	mov	r3, r0
 800d314:	2b00      	cmp	r3, #0
 800d316:	d001      	beq.n	800d31c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800d318:	2301      	movs	r3, #1
 800d31a:	e01c      	b.n	800d356 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	2220      	movs	r2, #32
 800d322:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	3301      	adds	r3, #1
 800d328:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	429a      	cmp	r2, r3
 800d330:	f63f af3b 	bhi.w	800d1aa <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2220      	movs	r2, #32
 800d338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d340:	f043 0220 	orr.w	r2, r3, #32
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2200      	movs	r2, #0
 800d34c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800d350:	2301      	movs	r3, #1
 800d352:	e000      	b.n	800d356 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800d354:	2302      	movs	r3, #2
  }
}
 800d356:	4618      	mov	r0, r3
 800d358:	3720      	adds	r7, #32
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800d35e:	b480      	push	{r7}
 800d360:	b083      	sub	sp, #12
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d36c:	b2db      	uxtb	r3, r3
}
 800d36e:	4618      	mov	r0, r3
 800d370:	370c      	adds	r7, #12
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr
	...

0800d37c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b086      	sub	sp, #24
 800d380:	af02      	add	r7, sp, #8
 800d382:	60f8      	str	r0, [r7, #12]
 800d384:	4608      	mov	r0, r1
 800d386:	4611      	mov	r1, r2
 800d388:	461a      	mov	r2, r3
 800d38a:	4603      	mov	r3, r0
 800d38c:	817b      	strh	r3, [r7, #10]
 800d38e:	460b      	mov	r3, r1
 800d390:	813b      	strh	r3, [r7, #8]
 800d392:	4613      	mov	r3, r2
 800d394:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d396:	88fb      	ldrh	r3, [r7, #6]
 800d398:	b2da      	uxtb	r2, r3
 800d39a:	8979      	ldrh	r1, [r7, #10]
 800d39c:	4b20      	ldr	r3, [pc, #128]	; (800d420 <I2C_RequestMemoryWrite+0xa4>)
 800d39e:	9300      	str	r3, [sp, #0]
 800d3a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d3a4:	68f8      	ldr	r0, [r7, #12]
 800d3a6:	f000 fad7 	bl	800d958 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d3aa:	69fa      	ldr	r2, [r7, #28]
 800d3ac:	69b9      	ldr	r1, [r7, #24]
 800d3ae:	68f8      	ldr	r0, [r7, #12]
 800d3b0:	f000 f8f0 	bl	800d594 <I2C_WaitOnTXISFlagUntilTimeout>
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d001      	beq.n	800d3be <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	e02c      	b.n	800d418 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d3be:	88fb      	ldrh	r3, [r7, #6]
 800d3c0:	2b01      	cmp	r3, #1
 800d3c2:	d105      	bne.n	800d3d0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d3c4:	893b      	ldrh	r3, [r7, #8]
 800d3c6:	b2da      	uxtb	r2, r3
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	629a      	str	r2, [r3, #40]	; 0x28
 800d3ce:	e015      	b.n	800d3fc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d3d0:	893b      	ldrh	r3, [r7, #8]
 800d3d2:	0a1b      	lsrs	r3, r3, #8
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	b2da      	uxtb	r2, r3
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d3de:	69fa      	ldr	r2, [r7, #28]
 800d3e0:	69b9      	ldr	r1, [r7, #24]
 800d3e2:	68f8      	ldr	r0, [r7, #12]
 800d3e4:	f000 f8d6 	bl	800d594 <I2C_WaitOnTXISFlagUntilTimeout>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d001      	beq.n	800d3f2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e012      	b.n	800d418 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d3f2:	893b      	ldrh	r3, [r7, #8]
 800d3f4:	b2da      	uxtb	r2, r3
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800d3fc:	69fb      	ldr	r3, [r7, #28]
 800d3fe:	9300      	str	r3, [sp, #0]
 800d400:	69bb      	ldr	r3, [r7, #24]
 800d402:	2200      	movs	r2, #0
 800d404:	2180      	movs	r1, #128	; 0x80
 800d406:	68f8      	ldr	r0, [r7, #12]
 800d408:	f000 f884 	bl	800d514 <I2C_WaitOnFlagUntilTimeout>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d001      	beq.n	800d416 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800d412:	2301      	movs	r3, #1
 800d414:	e000      	b.n	800d418 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800d416:	2300      	movs	r3, #0
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3710      	adds	r7, #16
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}
 800d420:	80002000 	.word	0x80002000

0800d424 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b086      	sub	sp, #24
 800d428:	af02      	add	r7, sp, #8
 800d42a:	60f8      	str	r0, [r7, #12]
 800d42c:	4608      	mov	r0, r1
 800d42e:	4611      	mov	r1, r2
 800d430:	461a      	mov	r2, r3
 800d432:	4603      	mov	r3, r0
 800d434:	817b      	strh	r3, [r7, #10]
 800d436:	460b      	mov	r3, r1
 800d438:	813b      	strh	r3, [r7, #8]
 800d43a:	4613      	mov	r3, r2
 800d43c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d43e:	88fb      	ldrh	r3, [r7, #6]
 800d440:	b2da      	uxtb	r2, r3
 800d442:	8979      	ldrh	r1, [r7, #10]
 800d444:	4b20      	ldr	r3, [pc, #128]	; (800d4c8 <I2C_RequestMemoryRead+0xa4>)
 800d446:	9300      	str	r3, [sp, #0]
 800d448:	2300      	movs	r3, #0
 800d44a:	68f8      	ldr	r0, [r7, #12]
 800d44c:	f000 fa84 	bl	800d958 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d450:	69fa      	ldr	r2, [r7, #28]
 800d452:	69b9      	ldr	r1, [r7, #24]
 800d454:	68f8      	ldr	r0, [r7, #12]
 800d456:	f000 f89d 	bl	800d594 <I2C_WaitOnTXISFlagUntilTimeout>
 800d45a:	4603      	mov	r3, r0
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d001      	beq.n	800d464 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800d460:	2301      	movs	r3, #1
 800d462:	e02c      	b.n	800d4be <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d464:	88fb      	ldrh	r3, [r7, #6]
 800d466:	2b01      	cmp	r3, #1
 800d468:	d105      	bne.n	800d476 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d46a:	893b      	ldrh	r3, [r7, #8]
 800d46c:	b2da      	uxtb	r2, r3
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	629a      	str	r2, [r3, #40]	; 0x28
 800d474:	e015      	b.n	800d4a2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d476:	893b      	ldrh	r3, [r7, #8]
 800d478:	0a1b      	lsrs	r3, r3, #8
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	b2da      	uxtb	r2, r3
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d484:	69fa      	ldr	r2, [r7, #28]
 800d486:	69b9      	ldr	r1, [r7, #24]
 800d488:	68f8      	ldr	r0, [r7, #12]
 800d48a:	f000 f883 	bl	800d594 <I2C_WaitOnTXISFlagUntilTimeout>
 800d48e:	4603      	mov	r3, r0
 800d490:	2b00      	cmp	r3, #0
 800d492:	d001      	beq.n	800d498 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800d494:	2301      	movs	r3, #1
 800d496:	e012      	b.n	800d4be <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d498:	893b      	ldrh	r3, [r7, #8]
 800d49a:	b2da      	uxtb	r2, r3
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	9300      	str	r3, [sp, #0]
 800d4a6:	69bb      	ldr	r3, [r7, #24]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	2140      	movs	r1, #64	; 0x40
 800d4ac:	68f8      	ldr	r0, [r7, #12]
 800d4ae:	f000 f831 	bl	800d514 <I2C_WaitOnFlagUntilTimeout>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d001      	beq.n	800d4bc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	e000      	b.n	800d4be <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800d4bc:	2300      	movs	r3, #0
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3710      	adds	r7, #16
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	80002000 	.word	0x80002000

0800d4cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	699b      	ldr	r3, [r3, #24]
 800d4da:	f003 0302 	and.w	r3, r3, #2
 800d4de:	2b02      	cmp	r3, #2
 800d4e0:	d103      	bne.n	800d4ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	699b      	ldr	r3, [r3, #24]
 800d4f0:	f003 0301 	and.w	r3, r3, #1
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d007      	beq.n	800d508 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	699a      	ldr	r2, [r3, #24]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f042 0201 	orr.w	r2, r2, #1
 800d506:	619a      	str	r2, [r3, #24]
  }
}
 800d508:	bf00      	nop
 800d50a:	370c      	adds	r7, #12
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr

0800d514 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b084      	sub	sp, #16
 800d518:	af00      	add	r7, sp, #0
 800d51a:	60f8      	str	r0, [r7, #12]
 800d51c:	60b9      	str	r1, [r7, #8]
 800d51e:	603b      	str	r3, [r7, #0]
 800d520:	4613      	mov	r3, r2
 800d522:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d524:	e022      	b.n	800d56c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d52c:	d01e      	beq.n	800d56c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d52e:	f7fd fb83 	bl	800ac38 <HAL_GetTick>
 800d532:	4602      	mov	r2, r0
 800d534:	69bb      	ldr	r3, [r7, #24]
 800d536:	1ad3      	subs	r3, r2, r3
 800d538:	683a      	ldr	r2, [r7, #0]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d302      	bcc.n	800d544 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d113      	bne.n	800d56c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d548:	f043 0220 	orr.w	r2, r3, #32
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	2220      	movs	r2, #32
 800d554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2200      	movs	r2, #0
 800d55c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	2200      	movs	r2, #0
 800d564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800d568:	2301      	movs	r3, #1
 800d56a:	e00f      	b.n	800d58c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	699a      	ldr	r2, [r3, #24]
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	4013      	ands	r3, r2
 800d576:	68ba      	ldr	r2, [r7, #8]
 800d578:	429a      	cmp	r2, r3
 800d57a:	bf0c      	ite	eq
 800d57c:	2301      	moveq	r3, #1
 800d57e:	2300      	movne	r3, #0
 800d580:	b2db      	uxtb	r3, r3
 800d582:	461a      	mov	r2, r3
 800d584:	79fb      	ldrb	r3, [r7, #7]
 800d586:	429a      	cmp	r2, r3
 800d588:	d0cd      	beq.n	800d526 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d58a:	2300      	movs	r3, #0
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	3710      	adds	r7, #16
 800d590:	46bd      	mov	sp, r7
 800d592:	bd80      	pop	{r7, pc}

0800d594 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b084      	sub	sp, #16
 800d598:	af00      	add	r7, sp, #0
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d5a0:	e02c      	b.n	800d5fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d5a2:	687a      	ldr	r2, [r7, #4]
 800d5a4:	68b9      	ldr	r1, [r7, #8]
 800d5a6:	68f8      	ldr	r0, [r7, #12]
 800d5a8:	f000 f8ea 	bl	800d780 <I2C_IsErrorOccurred>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d001      	beq.n	800d5b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	e02a      	b.n	800d60c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d5bc:	d01e      	beq.n	800d5fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d5be:	f7fd fb3b 	bl	800ac38 <HAL_GetTick>
 800d5c2:	4602      	mov	r2, r0
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	1ad3      	subs	r3, r2, r3
 800d5c8:	68ba      	ldr	r2, [r7, #8]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d302      	bcc.n	800d5d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d113      	bne.n	800d5fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5d8:	f043 0220 	orr.w	r2, r3, #32
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	2220      	movs	r2, #32
 800d5e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	e007      	b.n	800d60c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	699b      	ldr	r3, [r3, #24]
 800d602:	f003 0302 	and.w	r3, r3, #2
 800d606:	2b02      	cmp	r3, #2
 800d608:	d1cb      	bne.n	800d5a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d60a:	2300      	movs	r3, #0
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3710      	adds	r7, #16
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b084      	sub	sp, #16
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d620:	e028      	b.n	800d674 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d622:	687a      	ldr	r2, [r7, #4]
 800d624:	68b9      	ldr	r1, [r7, #8]
 800d626:	68f8      	ldr	r0, [r7, #12]
 800d628:	f000 f8aa 	bl	800d780 <I2C_IsErrorOccurred>
 800d62c:	4603      	mov	r3, r0
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d001      	beq.n	800d636 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d632:	2301      	movs	r3, #1
 800d634:	e026      	b.n	800d684 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d636:	f7fd faff 	bl	800ac38 <HAL_GetTick>
 800d63a:	4602      	mov	r2, r0
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	1ad3      	subs	r3, r2, r3
 800d640:	68ba      	ldr	r2, [r7, #8]
 800d642:	429a      	cmp	r2, r3
 800d644:	d302      	bcc.n	800d64c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d113      	bne.n	800d674 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d650:	f043 0220 	orr.w	r2, r3, #32
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2220      	movs	r2, #32
 800d65c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2200      	movs	r2, #0
 800d664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2200      	movs	r2, #0
 800d66c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800d670:	2301      	movs	r3, #1
 800d672:	e007      	b.n	800d684 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	699b      	ldr	r3, [r3, #24]
 800d67a:	f003 0320 	and.w	r3, r3, #32
 800d67e:	2b20      	cmp	r3, #32
 800d680:	d1cf      	bne.n	800d622 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d682:	2300      	movs	r3, #0
}
 800d684:	4618      	mov	r0, r3
 800d686:	3710      	adds	r7, #16
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}

0800d68c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b084      	sub	sp, #16
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d698:	e064      	b.n	800d764 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d69a:	687a      	ldr	r2, [r7, #4]
 800d69c:	68b9      	ldr	r1, [r7, #8]
 800d69e:	68f8      	ldr	r0, [r7, #12]
 800d6a0:	f000 f86e 	bl	800d780 <I2C_IsErrorOccurred>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d001      	beq.n	800d6ae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	e062      	b.n	800d774 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	699b      	ldr	r3, [r3, #24]
 800d6b4:	f003 0320 	and.w	r3, r3, #32
 800d6b8:	2b20      	cmp	r3, #32
 800d6ba:	d138      	bne.n	800d72e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	699b      	ldr	r3, [r3, #24]
 800d6c2:	f003 0304 	and.w	r3, r3, #4
 800d6c6:	2b04      	cmp	r3, #4
 800d6c8:	d105      	bne.n	800d6d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d001      	beq.n	800d6d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	e04e      	b.n	800d774 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	699b      	ldr	r3, [r3, #24]
 800d6dc:	f003 0310 	and.w	r3, r3, #16
 800d6e0:	2b10      	cmp	r3, #16
 800d6e2:	d107      	bne.n	800d6f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	2210      	movs	r2, #16
 800d6ea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	2204      	movs	r2, #4
 800d6f0:	645a      	str	r2, [r3, #68]	; 0x44
 800d6f2:	e002      	b.n	800d6fa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	2220      	movs	r2, #32
 800d700:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	6859      	ldr	r1, [r3, #4]
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	681a      	ldr	r2, [r3, #0]
 800d70c:	4b1b      	ldr	r3, [pc, #108]	; (800d77c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800d70e:	400b      	ands	r3, r1
 800d710:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	2220      	movs	r2, #32
 800d716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2200      	movs	r2, #0
 800d71e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	2200      	movs	r2, #0
 800d726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800d72a:	2301      	movs	r3, #1
 800d72c:	e022      	b.n	800d774 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d72e:	f7fd fa83 	bl	800ac38 <HAL_GetTick>
 800d732:	4602      	mov	r2, r0
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	1ad3      	subs	r3, r2, r3
 800d738:	68ba      	ldr	r2, [r7, #8]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d302      	bcc.n	800d744 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d10f      	bne.n	800d764 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d748:	f043 0220 	orr.w	r2, r3, #32
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	2220      	movs	r2, #32
 800d754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	2200      	movs	r2, #0
 800d75c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800d760:	2301      	movs	r3, #1
 800d762:	e007      	b.n	800d774 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	699b      	ldr	r3, [r3, #24]
 800d76a:	f003 0304 	and.w	r3, r3, #4
 800d76e:	2b04      	cmp	r3, #4
 800d770:	d193      	bne.n	800d69a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d772:	2300      	movs	r3, #0
}
 800d774:	4618      	mov	r0, r3
 800d776:	3710      	adds	r7, #16
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	fe00e800 	.word	0xfe00e800

0800d780 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b08a      	sub	sp, #40	; 0x28
 800d784:	af00      	add	r7, sp, #0
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	60b9      	str	r1, [r7, #8]
 800d78a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d78c:	2300      	movs	r3, #0
 800d78e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	699b      	ldr	r3, [r3, #24]
 800d798:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800d79a:	2300      	movs	r3, #0
 800d79c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d7a2:	69bb      	ldr	r3, [r7, #24]
 800d7a4:	f003 0310 	and.w	r3, r3, #16
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d075      	beq.n	800d898 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	2210      	movs	r2, #16
 800d7b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d7b4:	e056      	b.n	800d864 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d7bc:	d052      	beq.n	800d864 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d7be:	f7fd fa3b 	bl	800ac38 <HAL_GetTick>
 800d7c2:	4602      	mov	r2, r0
 800d7c4:	69fb      	ldr	r3, [r7, #28]
 800d7c6:	1ad3      	subs	r3, r2, r3
 800d7c8:	68ba      	ldr	r2, [r7, #8]
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d302      	bcc.n	800d7d4 <I2C_IsErrorOccurred+0x54>
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d147      	bne.n	800d864 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	685b      	ldr	r3, [r3, #4]
 800d7da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d7de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d7e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	699b      	ldr	r3, [r3, #24]
 800d7ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d7f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d7f6:	d12e      	bne.n	800d856 <I2C_IsErrorOccurred+0xd6>
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d7fe:	d02a      	beq.n	800d856 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800d800:	7cfb      	ldrb	r3, [r7, #19]
 800d802:	2b20      	cmp	r3, #32
 800d804:	d027      	beq.n	800d856 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	685a      	ldr	r2, [r3, #4]
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d814:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800d816:	f7fd fa0f 	bl	800ac38 <HAL_GetTick>
 800d81a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d81c:	e01b      	b.n	800d856 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d81e:	f7fd fa0b 	bl	800ac38 <HAL_GetTick>
 800d822:	4602      	mov	r2, r0
 800d824:	69fb      	ldr	r3, [r7, #28]
 800d826:	1ad3      	subs	r3, r2, r3
 800d828:	2b19      	cmp	r3, #25
 800d82a:	d914      	bls.n	800d856 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d830:	f043 0220 	orr.w	r2, r3, #32
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	2220      	movs	r2, #32
 800d83c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	2200      	movs	r2, #0
 800d844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2200      	movs	r2, #0
 800d84c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800d850:	2301      	movs	r3, #1
 800d852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	699b      	ldr	r3, [r3, #24]
 800d85c:	f003 0320 	and.w	r3, r3, #32
 800d860:	2b20      	cmp	r3, #32
 800d862:	d1dc      	bne.n	800d81e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	699b      	ldr	r3, [r3, #24]
 800d86a:	f003 0320 	and.w	r3, r3, #32
 800d86e:	2b20      	cmp	r3, #32
 800d870:	d003      	beq.n	800d87a <I2C_IsErrorOccurred+0xfa>
 800d872:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d876:	2b00      	cmp	r3, #0
 800d878:	d09d      	beq.n	800d7b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800d87a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d103      	bne.n	800d88a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	2220      	movs	r2, #32
 800d888:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800d88a:	6a3b      	ldr	r3, [r7, #32]
 800d88c:	f043 0304 	orr.w	r3, r3, #4
 800d890:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800d892:	2301      	movs	r3, #1
 800d894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	699b      	ldr	r3, [r3, #24]
 800d89e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d8a0:	69bb      	ldr	r3, [r7, #24]
 800d8a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d00b      	beq.n	800d8c2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800d8aa:	6a3b      	ldr	r3, [r7, #32]
 800d8ac:	f043 0301 	orr.w	r3, r3, #1
 800d8b0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d8ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d8bc:	2301      	movs	r3, #1
 800d8be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d00b      	beq.n	800d8e4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800d8cc:	6a3b      	ldr	r3, [r7, #32]
 800d8ce:	f043 0308 	orr.w	r3, r3, #8
 800d8d2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d8dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d8de:	2301      	movs	r3, #1
 800d8e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d8e4:	69bb      	ldr	r3, [r7, #24]
 800d8e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d00b      	beq.n	800d906 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800d8ee:	6a3b      	ldr	r3, [r7, #32]
 800d8f0:	f043 0302 	orr.w	r3, r3, #2
 800d8f4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d900:	2301      	movs	r3, #1
 800d902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800d906:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d01c      	beq.n	800d948 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d90e:	68f8      	ldr	r0, [r7, #12]
 800d910:	f7ff fddc 	bl	800d4cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	6859      	ldr	r1, [r3, #4]
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	4b0d      	ldr	r3, [pc, #52]	; (800d954 <I2C_IsErrorOccurred+0x1d4>)
 800d920:	400b      	ands	r3, r1
 800d922:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d928:	6a3b      	ldr	r3, [r7, #32]
 800d92a:	431a      	orrs	r2, r3
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2220      	movs	r2, #32
 800d934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	2200      	movs	r2, #0
 800d93c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	2200      	movs	r2, #0
 800d944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800d948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3728      	adds	r7, #40	; 0x28
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}
 800d954:	fe00e800 	.word	0xfe00e800

0800d958 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d958:	b480      	push	{r7}
 800d95a:	b087      	sub	sp, #28
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	607b      	str	r3, [r7, #4]
 800d962:	460b      	mov	r3, r1
 800d964:	817b      	strh	r3, [r7, #10]
 800d966:	4613      	mov	r3, r2
 800d968:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d96a:	897b      	ldrh	r3, [r7, #10]
 800d96c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d970:	7a7b      	ldrb	r3, [r7, #9]
 800d972:	041b      	lsls	r3, r3, #16
 800d974:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d978:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d97e:	6a3b      	ldr	r3, [r7, #32]
 800d980:	4313      	orrs	r3, r2
 800d982:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d986:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	685a      	ldr	r2, [r3, #4]
 800d98e:	6a3b      	ldr	r3, [r7, #32]
 800d990:	0d5b      	lsrs	r3, r3, #21
 800d992:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d996:	4b08      	ldr	r3, [pc, #32]	; (800d9b8 <I2C_TransferConfig+0x60>)
 800d998:	430b      	orrs	r3, r1
 800d99a:	43db      	mvns	r3, r3
 800d99c:	ea02 0103 	and.w	r1, r2, r3
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	697a      	ldr	r2, [r7, #20]
 800d9a6:	430a      	orrs	r2, r1
 800d9a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d9aa:	bf00      	nop
 800d9ac:	371c      	adds	r7, #28
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b4:	4770      	bx	lr
 800d9b6:	bf00      	nop
 800d9b8:	03ff63ff 	.word	0x03ff63ff

0800d9bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b083      	sub	sp, #12
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d9cc:	b2db      	uxtb	r3, r3
 800d9ce:	2b20      	cmp	r3, #32
 800d9d0:	d138      	bne.n	800da44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d101      	bne.n	800d9e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d9dc:	2302      	movs	r3, #2
 800d9de:	e032      	b.n	800da46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2224      	movs	r2, #36	; 0x24
 800d9ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	681a      	ldr	r2, [r3, #0]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f022 0201 	bic.w	r2, r2, #1
 800d9fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	681a      	ldr	r2, [r3, #0]
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800da0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	6819      	ldr	r1, [r3, #0]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	683a      	ldr	r2, [r7, #0]
 800da1c:	430a      	orrs	r2, r1
 800da1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	681a      	ldr	r2, [r3, #0]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f042 0201 	orr.w	r2, r2, #1
 800da2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2220      	movs	r2, #32
 800da34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800da40:	2300      	movs	r3, #0
 800da42:	e000      	b.n	800da46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800da44:	2302      	movs	r3, #2
  }
}
 800da46:	4618      	mov	r0, r3
 800da48:	370c      	adds	r7, #12
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr

0800da52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800da52:	b480      	push	{r7}
 800da54:	b085      	sub	sp, #20
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
 800da5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800da62:	b2db      	uxtb	r3, r3
 800da64:	2b20      	cmp	r3, #32
 800da66:	d139      	bne.n	800dadc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800da6e:	2b01      	cmp	r3, #1
 800da70:	d101      	bne.n	800da76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800da72:	2302      	movs	r3, #2
 800da74:	e033      	b.n	800dade <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2201      	movs	r2, #1
 800da7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2224      	movs	r2, #36	; 0x24
 800da82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	681a      	ldr	r2, [r3, #0]
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	f022 0201 	bic.w	r2, r2, #1
 800da94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800daa4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	021b      	lsls	r3, r3, #8
 800daaa:	68fa      	ldr	r2, [r7, #12]
 800daac:	4313      	orrs	r3, r2
 800daae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	68fa      	ldr	r2, [r7, #12]
 800dab6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	681a      	ldr	r2, [r3, #0]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f042 0201 	orr.w	r2, r2, #1
 800dac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2220      	movs	r2, #32
 800dacc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2200      	movs	r2, #0
 800dad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800dad8:	2300      	movs	r3, #0
 800dada:	e000      	b.n	800dade <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800dadc:	2302      	movs	r3, #2
  }
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3714      	adds	r7, #20
 800dae2:	46bd      	mov	sp, r7
 800dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae8:	4770      	bx	lr

0800daea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800daea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daec:	b08f      	sub	sp, #60	; 0x3c
 800daee:	af0a      	add	r7, sp, #40	; 0x28
 800daf0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d101      	bne.n	800dafc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800daf8:	2301      	movs	r3, #1
 800dafa:	e116      	b.n	800dd2a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800db08:	b2db      	uxtb	r3, r3
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d106      	bne.n	800db1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2200      	movs	r2, #0
 800db12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f00a f9e0 	bl	8017edc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2203      	movs	r2, #3
 800db20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d102      	bne.n	800db36 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2200      	movs	r2, #0
 800db34:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	4618      	mov	r0, r3
 800db3c:	f007 f8ef 	bl	8014d1e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	603b      	str	r3, [r7, #0]
 800db46:	687e      	ldr	r6, [r7, #4]
 800db48:	466d      	mov	r5, sp
 800db4a:	f106 0410 	add.w	r4, r6, #16
 800db4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800db50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800db52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800db54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800db56:	e894 0003 	ldmia.w	r4, {r0, r1}
 800db5a:	e885 0003 	stmia.w	r5, {r0, r1}
 800db5e:	1d33      	adds	r3, r6, #4
 800db60:	cb0e      	ldmia	r3, {r1, r2, r3}
 800db62:	6838      	ldr	r0, [r7, #0]
 800db64:	f007 f802 	bl	8014b6c <USB_CoreInit>
 800db68:	4603      	mov	r3, r0
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d005      	beq.n	800db7a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	2202      	movs	r2, #2
 800db72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800db76:	2301      	movs	r3, #1
 800db78:	e0d7      	b.n	800dd2a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	2100      	movs	r1, #0
 800db80:	4618      	mov	r0, r3
 800db82:	f007 f8dd 	bl	8014d40 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800db86:	2300      	movs	r3, #0
 800db88:	73fb      	strb	r3, [r7, #15]
 800db8a:	e04a      	b.n	800dc22 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800db8c:	7bfa      	ldrb	r2, [r7, #15]
 800db8e:	6879      	ldr	r1, [r7, #4]
 800db90:	4613      	mov	r3, r2
 800db92:	00db      	lsls	r3, r3, #3
 800db94:	4413      	add	r3, r2
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	440b      	add	r3, r1
 800db9a:	333d      	adds	r3, #61	; 0x3d
 800db9c:	2201      	movs	r2, #1
 800db9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800dba0:	7bfa      	ldrb	r2, [r7, #15]
 800dba2:	6879      	ldr	r1, [r7, #4]
 800dba4:	4613      	mov	r3, r2
 800dba6:	00db      	lsls	r3, r3, #3
 800dba8:	4413      	add	r3, r2
 800dbaa:	009b      	lsls	r3, r3, #2
 800dbac:	440b      	add	r3, r1
 800dbae:	333c      	adds	r3, #60	; 0x3c
 800dbb0:	7bfa      	ldrb	r2, [r7, #15]
 800dbb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800dbb4:	7bfa      	ldrb	r2, [r7, #15]
 800dbb6:	7bfb      	ldrb	r3, [r7, #15]
 800dbb8:	b298      	uxth	r0, r3
 800dbba:	6879      	ldr	r1, [r7, #4]
 800dbbc:	4613      	mov	r3, r2
 800dbbe:	00db      	lsls	r3, r3, #3
 800dbc0:	4413      	add	r3, r2
 800dbc2:	009b      	lsls	r3, r3, #2
 800dbc4:	440b      	add	r3, r1
 800dbc6:	3344      	adds	r3, #68	; 0x44
 800dbc8:	4602      	mov	r2, r0
 800dbca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800dbcc:	7bfa      	ldrb	r2, [r7, #15]
 800dbce:	6879      	ldr	r1, [r7, #4]
 800dbd0:	4613      	mov	r3, r2
 800dbd2:	00db      	lsls	r3, r3, #3
 800dbd4:	4413      	add	r3, r2
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	440b      	add	r3, r1
 800dbda:	3340      	adds	r3, #64	; 0x40
 800dbdc:	2200      	movs	r2, #0
 800dbde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800dbe0:	7bfa      	ldrb	r2, [r7, #15]
 800dbe2:	6879      	ldr	r1, [r7, #4]
 800dbe4:	4613      	mov	r3, r2
 800dbe6:	00db      	lsls	r3, r3, #3
 800dbe8:	4413      	add	r3, r2
 800dbea:	009b      	lsls	r3, r3, #2
 800dbec:	440b      	add	r3, r1
 800dbee:	3348      	adds	r3, #72	; 0x48
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800dbf4:	7bfa      	ldrb	r2, [r7, #15]
 800dbf6:	6879      	ldr	r1, [r7, #4]
 800dbf8:	4613      	mov	r3, r2
 800dbfa:	00db      	lsls	r3, r3, #3
 800dbfc:	4413      	add	r3, r2
 800dbfe:	009b      	lsls	r3, r3, #2
 800dc00:	440b      	add	r3, r1
 800dc02:	334c      	adds	r3, #76	; 0x4c
 800dc04:	2200      	movs	r2, #0
 800dc06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800dc08:	7bfa      	ldrb	r2, [r7, #15]
 800dc0a:	6879      	ldr	r1, [r7, #4]
 800dc0c:	4613      	mov	r3, r2
 800dc0e:	00db      	lsls	r3, r3, #3
 800dc10:	4413      	add	r3, r2
 800dc12:	009b      	lsls	r3, r3, #2
 800dc14:	440b      	add	r3, r1
 800dc16:	3354      	adds	r3, #84	; 0x54
 800dc18:	2200      	movs	r2, #0
 800dc1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc1c:	7bfb      	ldrb	r3, [r7, #15]
 800dc1e:	3301      	adds	r3, #1
 800dc20:	73fb      	strb	r3, [r7, #15]
 800dc22:	7bfa      	ldrb	r2, [r7, #15]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	429a      	cmp	r2, r3
 800dc2a:	d3af      	bcc.n	800db8c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	73fb      	strb	r3, [r7, #15]
 800dc30:	e044      	b.n	800dcbc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800dc32:	7bfa      	ldrb	r2, [r7, #15]
 800dc34:	6879      	ldr	r1, [r7, #4]
 800dc36:	4613      	mov	r3, r2
 800dc38:	00db      	lsls	r3, r3, #3
 800dc3a:	4413      	add	r3, r2
 800dc3c:	009b      	lsls	r3, r3, #2
 800dc3e:	440b      	add	r3, r1
 800dc40:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800dc44:	2200      	movs	r2, #0
 800dc46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800dc48:	7bfa      	ldrb	r2, [r7, #15]
 800dc4a:	6879      	ldr	r1, [r7, #4]
 800dc4c:	4613      	mov	r3, r2
 800dc4e:	00db      	lsls	r3, r3, #3
 800dc50:	4413      	add	r3, r2
 800dc52:	009b      	lsls	r3, r3, #2
 800dc54:	440b      	add	r3, r1
 800dc56:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800dc5a:	7bfa      	ldrb	r2, [r7, #15]
 800dc5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800dc5e:	7bfa      	ldrb	r2, [r7, #15]
 800dc60:	6879      	ldr	r1, [r7, #4]
 800dc62:	4613      	mov	r3, r2
 800dc64:	00db      	lsls	r3, r3, #3
 800dc66:	4413      	add	r3, r2
 800dc68:	009b      	lsls	r3, r3, #2
 800dc6a:	440b      	add	r3, r1
 800dc6c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800dc70:	2200      	movs	r2, #0
 800dc72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800dc74:	7bfa      	ldrb	r2, [r7, #15]
 800dc76:	6879      	ldr	r1, [r7, #4]
 800dc78:	4613      	mov	r3, r2
 800dc7a:	00db      	lsls	r3, r3, #3
 800dc7c:	4413      	add	r3, r2
 800dc7e:	009b      	lsls	r3, r3, #2
 800dc80:	440b      	add	r3, r1
 800dc82:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800dc86:	2200      	movs	r2, #0
 800dc88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800dc8a:	7bfa      	ldrb	r2, [r7, #15]
 800dc8c:	6879      	ldr	r1, [r7, #4]
 800dc8e:	4613      	mov	r3, r2
 800dc90:	00db      	lsls	r3, r3, #3
 800dc92:	4413      	add	r3, r2
 800dc94:	009b      	lsls	r3, r3, #2
 800dc96:	440b      	add	r3, r1
 800dc98:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800dca0:	7bfa      	ldrb	r2, [r7, #15]
 800dca2:	6879      	ldr	r1, [r7, #4]
 800dca4:	4613      	mov	r3, r2
 800dca6:	00db      	lsls	r3, r3, #3
 800dca8:	4413      	add	r3, r2
 800dcaa:	009b      	lsls	r3, r3, #2
 800dcac:	440b      	add	r3, r1
 800dcae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dcb6:	7bfb      	ldrb	r3, [r7, #15]
 800dcb8:	3301      	adds	r3, #1
 800dcba:	73fb      	strb	r3, [r7, #15]
 800dcbc:	7bfa      	ldrb	r2, [r7, #15]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d3b5      	bcc.n	800dc32 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	603b      	str	r3, [r7, #0]
 800dccc:	687e      	ldr	r6, [r7, #4]
 800dcce:	466d      	mov	r5, sp
 800dcd0:	f106 0410 	add.w	r4, r6, #16
 800dcd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dcd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dcd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dcda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dcdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 800dce0:	e885 0003 	stmia.w	r5, {r0, r1}
 800dce4:	1d33      	adds	r3, r6, #4
 800dce6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dce8:	6838      	ldr	r0, [r7, #0]
 800dcea:	f007 f875 	bl	8014dd8 <USB_DevInit>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d005      	beq.n	800dd00 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2202      	movs	r2, #2
 800dcf8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	e014      	b.n	800dd2a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2200      	movs	r2, #0
 800dd04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd14:	2b01      	cmp	r3, #1
 800dd16:	d102      	bne.n	800dd1e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f001 f881 	bl	800ee20 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	4618      	mov	r0, r3
 800dd24:	f008 f8fd 	bl	8015f22 <USB_DevDisconnect>

  return HAL_OK;
 800dd28:	2300      	movs	r3, #0
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3714      	adds	r7, #20
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dd32 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800dd32:	b580      	push	{r7, lr}
 800dd34:	b084      	sub	sp, #16
 800dd36:	af00      	add	r7, sp, #0
 800dd38:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800dd46:	2b01      	cmp	r3, #1
 800dd48:	d101      	bne.n	800dd4e <HAL_PCD_Start+0x1c>
 800dd4a:	2302      	movs	r3, #2
 800dd4c:	e01c      	b.n	800dd88 <HAL_PCD_Start+0x56>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2201      	movs	r2, #1
 800dd52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d105      	bne.n	800dd6a <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f006 ffc4 	bl	8014cfc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f008 f8b1 	bl	8015ee0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	2200      	movs	r2, #0
 800dd82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800dd86:	2300      	movs	r3, #0
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3710      	adds	r7, #16
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800dd90:	b590      	push	{r4, r7, lr}
 800dd92:	b08d      	sub	sp, #52	; 0x34
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd9e:	6a3b      	ldr	r3, [r7, #32]
 800dda0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	4618      	mov	r0, r3
 800dda8:	f008 f96f 	bl	801608a <USB_GetMode>
 800ddac:	4603      	mov	r3, r0
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	f040 847e 	bne.w	800e6b0 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f008 f8d3 	bl	8015f64 <USB_ReadInterrupts>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	f000 8474 	beq.w	800e6ae <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddcc:	689b      	ldr	r3, [r3, #8]
 800ddce:	0a1b      	lsrs	r3, r3, #8
 800ddd0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	4618      	mov	r0, r3
 800dde0:	f008 f8c0 	bl	8015f64 <USB_ReadInterrupts>
 800dde4:	4603      	mov	r3, r0
 800dde6:	f003 0302 	and.w	r3, r3, #2
 800ddea:	2b02      	cmp	r3, #2
 800ddec:	d107      	bne.n	800ddfe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	695a      	ldr	r2, [r3, #20]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f002 0202 	and.w	r2, r2, #2
 800ddfc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	4618      	mov	r0, r3
 800de04:	f008 f8ae 	bl	8015f64 <USB_ReadInterrupts>
 800de08:	4603      	mov	r3, r0
 800de0a:	f003 0310 	and.w	r3, r3, #16
 800de0e:	2b10      	cmp	r3, #16
 800de10:	d161      	bne.n	800ded6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	699a      	ldr	r2, [r3, #24]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f022 0210 	bic.w	r2, r2, #16
 800de20:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800de22:	6a3b      	ldr	r3, [r7, #32]
 800de24:	6a1b      	ldr	r3, [r3, #32]
 800de26:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800de28:	69bb      	ldr	r3, [r7, #24]
 800de2a:	f003 020f 	and.w	r2, r3, #15
 800de2e:	4613      	mov	r3, r2
 800de30:	00db      	lsls	r3, r3, #3
 800de32:	4413      	add	r3, r2
 800de34:	009b      	lsls	r3, r3, #2
 800de36:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800de3a:	687a      	ldr	r2, [r7, #4]
 800de3c:	4413      	add	r3, r2
 800de3e:	3304      	adds	r3, #4
 800de40:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800de42:	69bb      	ldr	r3, [r7, #24]
 800de44:	0c5b      	lsrs	r3, r3, #17
 800de46:	f003 030f 	and.w	r3, r3, #15
 800de4a:	2b02      	cmp	r3, #2
 800de4c:	d124      	bne.n	800de98 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800de4e:	69ba      	ldr	r2, [r7, #24]
 800de50:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800de54:	4013      	ands	r3, r2
 800de56:	2b00      	cmp	r3, #0
 800de58:	d035      	beq.n	800dec6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800de5e:	69bb      	ldr	r3, [r7, #24]
 800de60:	091b      	lsrs	r3, r3, #4
 800de62:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800de64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800de68:	b29b      	uxth	r3, r3
 800de6a:	461a      	mov	r2, r3
 800de6c:	6a38      	ldr	r0, [r7, #32]
 800de6e:	f007 fee5 	bl	8015c3c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	691a      	ldr	r2, [r3, #16]
 800de76:	69bb      	ldr	r3, [r7, #24]
 800de78:	091b      	lsrs	r3, r3, #4
 800de7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800de7e:	441a      	add	r2, r3
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	6a1a      	ldr	r2, [r3, #32]
 800de88:	69bb      	ldr	r3, [r7, #24]
 800de8a:	091b      	lsrs	r3, r3, #4
 800de8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800de90:	441a      	add	r2, r3
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	621a      	str	r2, [r3, #32]
 800de96:	e016      	b.n	800dec6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800de98:	69bb      	ldr	r3, [r7, #24]
 800de9a:	0c5b      	lsrs	r3, r3, #17
 800de9c:	f003 030f 	and.w	r3, r3, #15
 800dea0:	2b06      	cmp	r3, #6
 800dea2:	d110      	bne.n	800dec6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800deaa:	2208      	movs	r2, #8
 800deac:	4619      	mov	r1, r3
 800deae:	6a38      	ldr	r0, [r7, #32]
 800deb0:	f007 fec4 	bl	8015c3c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	6a1a      	ldr	r2, [r3, #32]
 800deb8:	69bb      	ldr	r3, [r7, #24]
 800deba:	091b      	lsrs	r3, r3, #4
 800debc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dec0:	441a      	add	r2, r3
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	699a      	ldr	r2, [r3, #24]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f042 0210 	orr.w	r2, r2, #16
 800ded4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	4618      	mov	r0, r3
 800dedc:	f008 f842 	bl	8015f64 <USB_ReadInterrupts>
 800dee0:	4603      	mov	r3, r0
 800dee2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dee6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800deea:	f040 80a7 	bne.w	800e03c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800deee:	2300      	movs	r3, #0
 800def0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	4618      	mov	r0, r3
 800def8:	f008 f847 	bl	8015f8a <USB_ReadDevAllOutEpInterrupt>
 800defc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800defe:	e099      	b.n	800e034 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800df00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df02:	f003 0301 	and.w	r3, r3, #1
 800df06:	2b00      	cmp	r3, #0
 800df08:	f000 808e 	beq.w	800e028 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df12:	b2d2      	uxtb	r2, r2
 800df14:	4611      	mov	r1, r2
 800df16:	4618      	mov	r0, r3
 800df18:	f008 f86b 	bl	8015ff2 <USB_ReadDevOutEPInterrupt>
 800df1c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	f003 0301 	and.w	r3, r3, #1
 800df24:	2b00      	cmp	r3, #0
 800df26:	d00c      	beq.n	800df42 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800df28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2a:	015a      	lsls	r2, r3, #5
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	4413      	add	r3, r2
 800df30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df34:	461a      	mov	r2, r3
 800df36:	2301      	movs	r3, #1
 800df38:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800df3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f000 fe95 	bl	800ec6c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800df42:	693b      	ldr	r3, [r7, #16]
 800df44:	f003 0308 	and.w	r3, r3, #8
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d00c      	beq.n	800df66 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800df4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4e:	015a      	lsls	r2, r3, #5
 800df50:	69fb      	ldr	r3, [r7, #28]
 800df52:	4413      	add	r3, r2
 800df54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df58:	461a      	mov	r2, r3
 800df5a:	2308      	movs	r3, #8
 800df5c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800df5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f000 fed1 	bl	800ed08 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800df66:	693b      	ldr	r3, [r7, #16]
 800df68:	f003 0310 	and.w	r3, r3, #16
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d008      	beq.n	800df82 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800df70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df72:	015a      	lsls	r2, r3, #5
 800df74:	69fb      	ldr	r3, [r7, #28]
 800df76:	4413      	add	r3, r2
 800df78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df7c:	461a      	mov	r2, r3
 800df7e:	2310      	movs	r3, #16
 800df80:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	f003 0302 	and.w	r3, r3, #2
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d030      	beq.n	800dfee <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800df8c:	6a3b      	ldr	r3, [r7, #32]
 800df8e:	695b      	ldr	r3, [r3, #20]
 800df90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df94:	2b80      	cmp	r3, #128	; 0x80
 800df96:	d109      	bne.n	800dfac <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800df98:	69fb      	ldr	r3, [r7, #28]
 800df9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df9e:	685b      	ldr	r3, [r3, #4]
 800dfa0:	69fa      	ldr	r2, [r7, #28]
 800dfa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dfa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dfaa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800dfac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfae:	4613      	mov	r3, r2
 800dfb0:	00db      	lsls	r3, r3, #3
 800dfb2:	4413      	add	r3, r2
 800dfb4:	009b      	lsls	r3, r3, #2
 800dfb6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	4413      	add	r3, r2
 800dfbe:	3304      	adds	r3, #4
 800dfc0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	78db      	ldrb	r3, [r3, #3]
 800dfc6:	2b01      	cmp	r3, #1
 800dfc8:	d108      	bne.n	800dfdc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800dfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd2:	b2db      	uxtb	r3, r3
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f00a f8a8 	bl	801812c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800dfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfde:	015a      	lsls	r2, r3, #5
 800dfe0:	69fb      	ldr	r3, [r7, #28]
 800dfe2:	4413      	add	r3, r2
 800dfe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfe8:	461a      	mov	r2, r3
 800dfea:	2302      	movs	r3, #2
 800dfec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800dfee:	693b      	ldr	r3, [r7, #16]
 800dff0:	f003 0320 	and.w	r3, r3, #32
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d008      	beq.n	800e00a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800dff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dffa:	015a      	lsls	r2, r3, #5
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	4413      	add	r3, r2
 800e000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e004:	461a      	mov	r2, r3
 800e006:	2320      	movs	r3, #32
 800e008:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e010:	2b00      	cmp	r3, #0
 800e012:	d009      	beq.n	800e028 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800e014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e016:	015a      	lsls	r2, r3, #5
 800e018:	69fb      	ldr	r3, [r7, #28]
 800e01a:	4413      	add	r3, r2
 800e01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e020:	461a      	mov	r2, r3
 800e022:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e026:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800e028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02a:	3301      	adds	r3, #1
 800e02c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800e02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e030:	085b      	lsrs	r3, r3, #1
 800e032:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800e034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e036:	2b00      	cmp	r3, #0
 800e038:	f47f af62 	bne.w	800df00 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4618      	mov	r0, r3
 800e042:	f007 ff8f 	bl	8015f64 <USB_ReadInterrupts>
 800e046:	4603      	mov	r3, r0
 800e048:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e04c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e050:	f040 80a4 	bne.w	800e19c <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	4618      	mov	r0, r3
 800e05a:	f007 ffb0 	bl	8015fbe <USB_ReadDevAllInEpInterrupt>
 800e05e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800e060:	2300      	movs	r3, #0
 800e062:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800e064:	e096      	b.n	800e194 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800e066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e068:	f003 0301 	and.w	r3, r3, #1
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	f000 808b 	beq.w	800e188 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e078:	b2d2      	uxtb	r2, r2
 800e07a:	4611      	mov	r1, r2
 800e07c:	4618      	mov	r0, r3
 800e07e:	f007 ffd6 	bl	801602e <USB_ReadDevInEPInterrupt>
 800e082:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	f003 0301 	and.w	r3, r3, #1
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d020      	beq.n	800e0d0 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e090:	f003 030f 	and.w	r3, r3, #15
 800e094:	2201      	movs	r2, #1
 800e096:	fa02 f303 	lsl.w	r3, r2, r3
 800e09a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e09c:	69fb      	ldr	r3, [r7, #28]
 800e09e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	43db      	mvns	r3, r3
 800e0a8:	69f9      	ldr	r1, [r7, #28]
 800e0aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e0ae:	4013      	ands	r3, r2
 800e0b0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800e0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b4:	015a      	lsls	r2, r3, #5
 800e0b6:	69fb      	ldr	r3, [r7, #28]
 800e0b8:	4413      	add	r3, r2
 800e0ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0be:	461a      	mov	r2, r3
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800e0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	4619      	mov	r1, r3
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f009 ff99 	bl	8018002 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	f003 0308 	and.w	r3, r3, #8
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d008      	beq.n	800e0ec <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800e0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0dc:	015a      	lsls	r2, r3, #5
 800e0de:	69fb      	ldr	r3, [r7, #28]
 800e0e0:	4413      	add	r3, r2
 800e0e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0e6:	461a      	mov	r2, r3
 800e0e8:	2308      	movs	r3, #8
 800e0ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800e0ec:	693b      	ldr	r3, [r7, #16]
 800e0ee:	f003 0310 	and.w	r3, r3, #16
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d008      	beq.n	800e108 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800e0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f8:	015a      	lsls	r2, r3, #5
 800e0fa:	69fb      	ldr	r3, [r7, #28]
 800e0fc:	4413      	add	r3, r2
 800e0fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e102:	461a      	mov	r2, r3
 800e104:	2310      	movs	r3, #16
 800e106:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d008      	beq.n	800e124 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800e112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e114:	015a      	lsls	r2, r3, #5
 800e116:	69fb      	ldr	r3, [r7, #28]
 800e118:	4413      	add	r3, r2
 800e11a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e11e:	461a      	mov	r2, r3
 800e120:	2340      	movs	r3, #64	; 0x40
 800e122:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	f003 0302 	and.w	r3, r3, #2
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d023      	beq.n	800e176 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800e12e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e130:	6a38      	ldr	r0, [r7, #32]
 800e132:	f006 ff9d 	bl	8015070 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800e136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e138:	4613      	mov	r3, r2
 800e13a:	00db      	lsls	r3, r3, #3
 800e13c:	4413      	add	r3, r2
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	3338      	adds	r3, #56	; 0x38
 800e142:	687a      	ldr	r2, [r7, #4]
 800e144:	4413      	add	r3, r2
 800e146:	3304      	adds	r3, #4
 800e148:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	78db      	ldrb	r3, [r3, #3]
 800e14e:	2b01      	cmp	r3, #1
 800e150:	d108      	bne.n	800e164 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	2200      	movs	r2, #0
 800e156:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800e158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e15a:	b2db      	uxtb	r3, r3
 800e15c:	4619      	mov	r1, r3
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f009 fff6 	bl	8018150 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800e164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e166:	015a      	lsls	r2, r3, #5
 800e168:	69fb      	ldr	r3, [r7, #28]
 800e16a:	4413      	add	r3, r2
 800e16c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e170:	461a      	mov	r2, r3
 800e172:	2302      	movs	r3, #2
 800e174:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d003      	beq.n	800e188 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800e180:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f000 fcea 	bl	800eb5c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800e188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18a:	3301      	adds	r3, #1
 800e18c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800e18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e190:	085b      	lsrs	r3, r3, #1
 800e192:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800e194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e196:	2b00      	cmp	r3, #0
 800e198:	f47f af65 	bne.w	800e066 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f007 fedf 	bl	8015f64 <USB_ReadInterrupts>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e1ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e1b0:	d122      	bne.n	800e1f8 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e1b2:	69fb      	ldr	r3, [r7, #28]
 800e1b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1b8:	685b      	ldr	r3, [r3, #4]
 800e1ba:	69fa      	ldr	r2, [r7, #28]
 800e1bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e1c0:	f023 0301 	bic.w	r3, r3, #1
 800e1c4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d108      	bne.n	800e1e2 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e1d8:	2100      	movs	r1, #0
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f00a fa2a 	bl	8018634 <HAL_PCDEx_LPM_Callback>
 800e1e0:	e002      	b.n	800e1e8 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f009 ff7a 	bl	80180dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	695a      	ldr	r2, [r3, #20]
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800e1f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f007 feb1 	bl	8015f64 <USB_ReadInterrupts>
 800e202:	4603      	mov	r3, r0
 800e204:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e20c:	d112      	bne.n	800e234 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800e20e:	69fb      	ldr	r3, [r7, #28]
 800e210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e214:	689b      	ldr	r3, [r3, #8]
 800e216:	f003 0301 	and.w	r3, r3, #1
 800e21a:	2b01      	cmp	r3, #1
 800e21c:	d102      	bne.n	800e224 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f009 ff36 	bl	8018090 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	695a      	ldr	r2, [r3, #20]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800e232:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	4618      	mov	r0, r3
 800e23a:	f007 fe93 	bl	8015f64 <USB_ReadInterrupts>
 800e23e:	4603      	mov	r3, r0
 800e240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e244:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e248:	d121      	bne.n	800e28e <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	695a      	ldr	r2, [r3, #20]
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800e258:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800e260:	2b00      	cmp	r3, #0
 800e262:	d111      	bne.n	800e288 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2201      	movs	r2, #1
 800e268:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e272:	089b      	lsrs	r3, r3, #2
 800e274:	f003 020f 	and.w	r2, r3, #15
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800e27e:	2101      	movs	r1, #1
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f00a f9d7 	bl	8018634 <HAL_PCDEx_LPM_Callback>
 800e286:	e002      	b.n	800e28e <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f009 ff01 	bl	8018090 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	4618      	mov	r0, r3
 800e294:	f007 fe66 	bl	8015f64 <USB_ReadInterrupts>
 800e298:	4603      	mov	r3, r0
 800e29a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e29e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e2a2:	f040 80b5 	bne.w	800e410 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e2a6:	69fb      	ldr	r3, [r7, #28]
 800e2a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2ac:	685b      	ldr	r3, [r3, #4]
 800e2ae:	69fa      	ldr	r2, [r7, #28]
 800e2b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e2b4:	f023 0301 	bic.w	r3, r3, #1
 800e2b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	2110      	movs	r1, #16
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f006 fed5 	bl	8015070 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2ca:	e046      	b.n	800e35a <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800e2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ce:	015a      	lsls	r2, r3, #5
 800e2d0:	69fb      	ldr	r3, [r7, #28]
 800e2d2:	4413      	add	r3, r2
 800e2d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2d8:	461a      	mov	r2, r3
 800e2da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e2de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e2:	015a      	lsls	r2, r3, #5
 800e2e4:	69fb      	ldr	r3, [r7, #28]
 800e2e6:	4413      	add	r3, r2
 800e2e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2f0:	0151      	lsls	r1, r2, #5
 800e2f2:	69fa      	ldr	r2, [r7, #28]
 800e2f4:	440a      	add	r2, r1
 800e2f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e2fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800e300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e302:	015a      	lsls	r2, r3, #5
 800e304:	69fb      	ldr	r3, [r7, #28]
 800e306:	4413      	add	r3, r2
 800e308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e30c:	461a      	mov	r2, r3
 800e30e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e312:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e316:	015a      	lsls	r2, r3, #5
 800e318:	69fb      	ldr	r3, [r7, #28]
 800e31a:	4413      	add	r3, r2
 800e31c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e324:	0151      	lsls	r1, r2, #5
 800e326:	69fa      	ldr	r2, [r7, #28]
 800e328:	440a      	add	r2, r1
 800e32a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e32e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e332:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e336:	015a      	lsls	r2, r3, #5
 800e338:	69fb      	ldr	r3, [r7, #28]
 800e33a:	4413      	add	r3, r2
 800e33c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e344:	0151      	lsls	r1, r2, #5
 800e346:	69fa      	ldr	r2, [r7, #28]
 800e348:	440a      	add	r2, r1
 800e34a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e34e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e352:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e356:	3301      	adds	r3, #1
 800e358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	685b      	ldr	r3, [r3, #4]
 800e35e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e360:	429a      	cmp	r2, r3
 800e362:	d3b3      	bcc.n	800e2cc <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e36a:	69db      	ldr	r3, [r3, #28]
 800e36c:	69fa      	ldr	r2, [r7, #28]
 800e36e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e372:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800e376:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d016      	beq.n	800e3ae <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800e380:	69fb      	ldr	r3, [r7, #28]
 800e382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e386:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e38a:	69fa      	ldr	r2, [r7, #28]
 800e38c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e390:	f043 030b 	orr.w	r3, r3, #11
 800e394:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800e398:	69fb      	ldr	r3, [r7, #28]
 800e39a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e39e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3a0:	69fa      	ldr	r2, [r7, #28]
 800e3a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e3a6:	f043 030b 	orr.w	r3, r3, #11
 800e3aa:	6453      	str	r3, [r2, #68]	; 0x44
 800e3ac:	e015      	b.n	800e3da <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800e3ae:	69fb      	ldr	r3, [r7, #28]
 800e3b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3b4:	695b      	ldr	r3, [r3, #20]
 800e3b6:	69fa      	ldr	r2, [r7, #28]
 800e3b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e3bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e3c0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800e3c4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800e3c6:	69fb      	ldr	r3, [r7, #28]
 800e3c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3cc:	691b      	ldr	r3, [r3, #16]
 800e3ce:	69fa      	ldr	r2, [r7, #28]
 800e3d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e3d4:	f043 030b 	orr.w	r3, r3, #11
 800e3d8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800e3da:	69fb      	ldr	r3, [r7, #28]
 800e3dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	69fa      	ldr	r2, [r7, #28]
 800e3e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e3e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e3ec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681a      	ldr	r2, [r3, #0]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	4610      	mov	r0, r2
 800e3fc:	f007 fe76 	bl	80160ec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	695a      	ldr	r2, [r3, #20]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800e40e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	4618      	mov	r0, r3
 800e416:	f007 fda5 	bl	8015f64 <USB_ReadInterrupts>
 800e41a:	4603      	mov	r3, r0
 800e41c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e424:	d124      	bne.n	800e470 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	4618      	mov	r0, r3
 800e42c:	f007 fe3b 	bl	80160a6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	4618      	mov	r0, r3
 800e436:	f006 fe98 	bl	801516a <USB_GetDevSpeed>
 800e43a:	4603      	mov	r3, r0
 800e43c:	461a      	mov	r2, r3
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681c      	ldr	r4, [r3, #0]
 800e446:	f001 fc87 	bl	800fd58 <HAL_RCC_GetHCLKFreq>
 800e44a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800e450:	b2db      	uxtb	r3, r3
 800e452:	461a      	mov	r2, r3
 800e454:	4620      	mov	r0, r4
 800e456:	f006 fbb5 	bl	8014bc4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f009 fdf9 	bl	8018052 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	695a      	ldr	r2, [r3, #20]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800e46e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4618      	mov	r0, r3
 800e476:	f007 fd75 	bl	8015f64 <USB_ReadInterrupts>
 800e47a:	4603      	mov	r3, r0
 800e47c:	f003 0308 	and.w	r3, r3, #8
 800e480:	2b08      	cmp	r3, #8
 800e482:	d10a      	bne.n	800e49a <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	f009 fdd6 	bl	8018036 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	695a      	ldr	r2, [r3, #20]
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f002 0208 	and.w	r2, r2, #8
 800e498:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f007 fd60 	bl	8015f64 <USB_ReadInterrupts>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4aa:	2b80      	cmp	r3, #128	; 0x80
 800e4ac:	d122      	bne.n	800e4f4 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800e4ae:	6a3b      	ldr	r3, [r7, #32]
 800e4b0:	699b      	ldr	r3, [r3, #24]
 800e4b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e4b6:	6a3b      	ldr	r3, [r7, #32]
 800e4b8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	627b      	str	r3, [r7, #36]	; 0x24
 800e4be:	e014      	b.n	800e4ea <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800e4c0:	6879      	ldr	r1, [r7, #4]
 800e4c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4c4:	4613      	mov	r3, r2
 800e4c6:	00db      	lsls	r3, r3, #3
 800e4c8:	4413      	add	r3, r2
 800e4ca:	009b      	lsls	r3, r3, #2
 800e4cc:	440b      	add	r3, r1
 800e4ce:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800e4d2:	781b      	ldrb	r3, [r3, #0]
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d105      	bne.n	800e4e4 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800e4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4da:	b2db      	uxtb	r3, r3
 800e4dc:	4619      	mov	r1, r3
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f000 fb0b 	bl	800eafa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	627b      	str	r3, [r7, #36]	; 0x24
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	685b      	ldr	r3, [r3, #4]
 800e4ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d3e5      	bcc.n	800e4c0 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f007 fd33 	bl	8015f64 <USB_ReadInterrupts>
 800e4fe:	4603      	mov	r3, r0
 800e500:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e504:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e508:	d13b      	bne.n	800e582 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e50a:	2301      	movs	r3, #1
 800e50c:	627b      	str	r3, [r7, #36]	; 0x24
 800e50e:	e02b      	b.n	800e568 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800e510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e512:	015a      	lsls	r2, r3, #5
 800e514:	69fb      	ldr	r3, [r7, #28]
 800e516:	4413      	add	r3, r2
 800e518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800e520:	6879      	ldr	r1, [r7, #4]
 800e522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e524:	4613      	mov	r3, r2
 800e526:	00db      	lsls	r3, r3, #3
 800e528:	4413      	add	r3, r2
 800e52a:	009b      	lsls	r3, r3, #2
 800e52c:	440b      	add	r3, r1
 800e52e:	3340      	adds	r3, #64	; 0x40
 800e530:	781b      	ldrb	r3, [r3, #0]
 800e532:	2b01      	cmp	r3, #1
 800e534:	d115      	bne.n	800e562 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800e536:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800e538:	2b00      	cmp	r3, #0
 800e53a:	da12      	bge.n	800e562 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800e53c:	6879      	ldr	r1, [r7, #4]
 800e53e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e540:	4613      	mov	r3, r2
 800e542:	00db      	lsls	r3, r3, #3
 800e544:	4413      	add	r3, r2
 800e546:	009b      	lsls	r3, r3, #2
 800e548:	440b      	add	r3, r1
 800e54a:	333f      	adds	r3, #63	; 0x3f
 800e54c:	2201      	movs	r2, #1
 800e54e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800e550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e552:	b2db      	uxtb	r3, r3
 800e554:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e558:	b2db      	uxtb	r3, r3
 800e55a:	4619      	mov	r1, r3
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f000 facc 	bl	800eafa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e564:	3301      	adds	r3, #1
 800e566:	627b      	str	r3, [r7, #36]	; 0x24
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	685b      	ldr	r3, [r3, #4]
 800e56c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e56e:	429a      	cmp	r2, r3
 800e570:	d3ce      	bcc.n	800e510 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	695a      	ldr	r2, [r3, #20]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800e580:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	4618      	mov	r0, r3
 800e588:	f007 fcec 	bl	8015f64 <USB_ReadInterrupts>
 800e58c:	4603      	mov	r3, r0
 800e58e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e592:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e596:	d155      	bne.n	800e644 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e598:	2301      	movs	r3, #1
 800e59a:	627b      	str	r3, [r7, #36]	; 0x24
 800e59c:	e045      	b.n	800e62a <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800e59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a0:	015a      	lsls	r2, r3, #5
 800e5a2:	69fb      	ldr	r3, [r7, #28]
 800e5a4:	4413      	add	r3, r2
 800e5a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800e5ae:	6879      	ldr	r1, [r7, #4]
 800e5b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5b2:	4613      	mov	r3, r2
 800e5b4:	00db      	lsls	r3, r3, #3
 800e5b6:	4413      	add	r3, r2
 800e5b8:	009b      	lsls	r3, r3, #2
 800e5ba:	440b      	add	r3, r1
 800e5bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	2b01      	cmp	r3, #1
 800e5c4:	d12e      	bne.n	800e624 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800e5c6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	da2b      	bge.n	800e624 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800e5cc:	69bb      	ldr	r3, [r7, #24]
 800e5ce:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800e5d8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d121      	bne.n	800e624 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800e5e0:	6879      	ldr	r1, [r7, #4]
 800e5e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5e4:	4613      	mov	r3, r2
 800e5e6:	00db      	lsls	r3, r3, #3
 800e5e8:	4413      	add	r3, r2
 800e5ea:	009b      	lsls	r3, r3, #2
 800e5ec:	440b      	add	r3, r1
 800e5ee:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800e5f6:	6a3b      	ldr	r3, [r7, #32]
 800e5f8:	699b      	ldr	r3, [r3, #24]
 800e5fa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e5fe:	6a3b      	ldr	r3, [r7, #32]
 800e600:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800e602:	6a3b      	ldr	r3, [r7, #32]
 800e604:	695b      	ldr	r3, [r3, #20]
 800e606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d10a      	bne.n	800e624 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800e60e:	69fb      	ldr	r3, [r7, #28]
 800e610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	69fa      	ldr	r2, [r7, #28]
 800e618:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e61c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e620:	6053      	str	r3, [r2, #4]
            break;
 800e622:	e007      	b.n	800e634 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800e624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e626:	3301      	adds	r3, #1
 800e628:	627b      	str	r3, [r7, #36]	; 0x24
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e630:	429a      	cmp	r2, r3
 800e632:	d3b4      	bcc.n	800e59e <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	695a      	ldr	r2, [r3, #20]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800e642:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	4618      	mov	r0, r3
 800e64a:	f007 fc8b 	bl	8015f64 <USB_ReadInterrupts>
 800e64e:	4603      	mov	r3, r0
 800e650:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e658:	d10a      	bne.n	800e670 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800e65a:	6878      	ldr	r0, [r7, #4]
 800e65c:	f009 fd8a 	bl	8018174 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	695a      	ldr	r2, [r3, #20]
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800e66e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	4618      	mov	r0, r3
 800e676:	f007 fc75 	bl	8015f64 <USB_ReadInterrupts>
 800e67a:	4603      	mov	r3, r0
 800e67c:	f003 0304 	and.w	r3, r3, #4
 800e680:	2b04      	cmp	r3, #4
 800e682:	d115      	bne.n	800e6b0 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	685b      	ldr	r3, [r3, #4]
 800e68a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800e68c:	69bb      	ldr	r3, [r7, #24]
 800e68e:	f003 0304 	and.w	r3, r3, #4
 800e692:	2b00      	cmp	r3, #0
 800e694:	d002      	beq.n	800e69c <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f009 fd7a 	bl	8018190 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	6859      	ldr	r1, [r3, #4]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	69ba      	ldr	r2, [r7, #24]
 800e6a8:	430a      	orrs	r2, r1
 800e6aa:	605a      	str	r2, [r3, #4]
 800e6ac:	e000      	b.n	800e6b0 <HAL_PCD_IRQHandler+0x920>
      return;
 800e6ae:	bf00      	nop
    }
  }
}
 800e6b0:	3734      	adds	r7, #52	; 0x34
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd90      	pop	{r4, r7, pc}

0800e6b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800e6b6:	b580      	push	{r7, lr}
 800e6b8:	b082      	sub	sp, #8
 800e6ba:	af00      	add	r7, sp, #0
 800e6bc:	6078      	str	r0, [r7, #4]
 800e6be:	460b      	mov	r3, r1
 800e6c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800e6c8:	2b01      	cmp	r3, #1
 800e6ca:	d101      	bne.n	800e6d0 <HAL_PCD_SetAddress+0x1a>
 800e6cc:	2302      	movs	r3, #2
 800e6ce:	e013      	b.n	800e6f8 <HAL_PCD_SetAddress+0x42>
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2201      	movs	r2, #1
 800e6d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	78fa      	ldrb	r2, [r7, #3]
 800e6dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	78fa      	ldrb	r2, [r7, #3]
 800e6e6:	4611      	mov	r1, r2
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f007 fbd3 	bl	8015e94 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800e6f6:	2300      	movs	r3, #0
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	3708      	adds	r7, #8
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}

0800e700 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b084      	sub	sp, #16
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
 800e708:	4608      	mov	r0, r1
 800e70a:	4611      	mov	r1, r2
 800e70c:	461a      	mov	r2, r3
 800e70e:	4603      	mov	r3, r0
 800e710:	70fb      	strb	r3, [r7, #3]
 800e712:	460b      	mov	r3, r1
 800e714:	803b      	strh	r3, [r7, #0]
 800e716:	4613      	mov	r3, r2
 800e718:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800e71a:	2300      	movs	r3, #0
 800e71c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e71e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e722:	2b00      	cmp	r3, #0
 800e724:	da0f      	bge.n	800e746 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e726:	78fb      	ldrb	r3, [r7, #3]
 800e728:	f003 020f 	and.w	r2, r3, #15
 800e72c:	4613      	mov	r3, r2
 800e72e:	00db      	lsls	r3, r3, #3
 800e730:	4413      	add	r3, r2
 800e732:	009b      	lsls	r3, r3, #2
 800e734:	3338      	adds	r3, #56	; 0x38
 800e736:	687a      	ldr	r2, [r7, #4]
 800e738:	4413      	add	r3, r2
 800e73a:	3304      	adds	r3, #4
 800e73c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2201      	movs	r2, #1
 800e742:	705a      	strb	r2, [r3, #1]
 800e744:	e00f      	b.n	800e766 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e746:	78fb      	ldrb	r3, [r7, #3]
 800e748:	f003 020f 	and.w	r2, r3, #15
 800e74c:	4613      	mov	r3, r2
 800e74e:	00db      	lsls	r3, r3, #3
 800e750:	4413      	add	r3, r2
 800e752:	009b      	lsls	r3, r3, #2
 800e754:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e758:	687a      	ldr	r2, [r7, #4]
 800e75a:	4413      	add	r3, r2
 800e75c:	3304      	adds	r3, #4
 800e75e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	2200      	movs	r2, #0
 800e764:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800e766:	78fb      	ldrb	r3, [r7, #3]
 800e768:	f003 030f 	and.w	r3, r3, #15
 800e76c:	b2da      	uxtb	r2, r3
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800e772:	883a      	ldrh	r2, [r7, #0]
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	78ba      	ldrb	r2, [r7, #2]
 800e77c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	785b      	ldrb	r3, [r3, #1]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d004      	beq.n	800e790 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	b29a      	uxth	r2, r3
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800e790:	78bb      	ldrb	r3, [r7, #2]
 800e792:	2b02      	cmp	r3, #2
 800e794:	d102      	bne.n	800e79c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	2200      	movs	r2, #0
 800e79a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800e7a2:	2b01      	cmp	r3, #1
 800e7a4:	d101      	bne.n	800e7aa <HAL_PCD_EP_Open+0xaa>
 800e7a6:	2302      	movs	r3, #2
 800e7a8:	e00e      	b.n	800e7c8 <HAL_PCD_EP_Open+0xc8>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2201      	movs	r2, #1
 800e7ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	68f9      	ldr	r1, [r7, #12]
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f006 fcf5 	bl	80151a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800e7c6:	7afb      	ldrb	r3, [r7, #11]
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	3710      	adds	r7, #16
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bd80      	pop	{r7, pc}

0800e7d0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e7d0:	b580      	push	{r7, lr}
 800e7d2:	b084      	sub	sp, #16
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
 800e7d8:	460b      	mov	r3, r1
 800e7da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e7dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	da0f      	bge.n	800e804 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e7e4:	78fb      	ldrb	r3, [r7, #3]
 800e7e6:	f003 020f 	and.w	r2, r3, #15
 800e7ea:	4613      	mov	r3, r2
 800e7ec:	00db      	lsls	r3, r3, #3
 800e7ee:	4413      	add	r3, r2
 800e7f0:	009b      	lsls	r3, r3, #2
 800e7f2:	3338      	adds	r3, #56	; 0x38
 800e7f4:	687a      	ldr	r2, [r7, #4]
 800e7f6:	4413      	add	r3, r2
 800e7f8:	3304      	adds	r3, #4
 800e7fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2201      	movs	r2, #1
 800e800:	705a      	strb	r2, [r3, #1]
 800e802:	e00f      	b.n	800e824 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e804:	78fb      	ldrb	r3, [r7, #3]
 800e806:	f003 020f 	and.w	r2, r3, #15
 800e80a:	4613      	mov	r3, r2
 800e80c:	00db      	lsls	r3, r3, #3
 800e80e:	4413      	add	r3, r2
 800e810:	009b      	lsls	r3, r3, #2
 800e812:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e816:	687a      	ldr	r2, [r7, #4]
 800e818:	4413      	add	r3, r2
 800e81a:	3304      	adds	r3, #4
 800e81c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	2200      	movs	r2, #0
 800e822:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800e824:	78fb      	ldrb	r3, [r7, #3]
 800e826:	f003 030f 	and.w	r3, r3, #15
 800e82a:	b2da      	uxtb	r2, r3
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800e836:	2b01      	cmp	r3, #1
 800e838:	d101      	bne.n	800e83e <HAL_PCD_EP_Close+0x6e>
 800e83a:	2302      	movs	r3, #2
 800e83c:	e00e      	b.n	800e85c <HAL_PCD_EP_Close+0x8c>
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2201      	movs	r2, #1
 800e842:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	68f9      	ldr	r1, [r7, #12]
 800e84c:	4618      	mov	r0, r3
 800e84e:	f006 fd33 	bl	80152b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2200      	movs	r2, #0
 800e856:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800e85a:	2300      	movs	r3, #0
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	3710      	adds	r7, #16
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}

0800e864 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b086      	sub	sp, #24
 800e868:	af00      	add	r7, sp, #0
 800e86a:	60f8      	str	r0, [r7, #12]
 800e86c:	607a      	str	r2, [r7, #4]
 800e86e:	603b      	str	r3, [r7, #0]
 800e870:	460b      	mov	r3, r1
 800e872:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e874:	7afb      	ldrb	r3, [r7, #11]
 800e876:	f003 020f 	and.w	r2, r3, #15
 800e87a:	4613      	mov	r3, r2
 800e87c:	00db      	lsls	r3, r3, #3
 800e87e:	4413      	add	r3, r2
 800e880:	009b      	lsls	r3, r3, #2
 800e882:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e886:	68fa      	ldr	r2, [r7, #12]
 800e888:	4413      	add	r3, r2
 800e88a:	3304      	adds	r3, #4
 800e88c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	687a      	ldr	r2, [r7, #4]
 800e892:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	683a      	ldr	r2, [r7, #0]
 800e898:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	2200      	movs	r2, #0
 800e89e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e8a6:	7afb      	ldrb	r3, [r7, #11]
 800e8a8:	f003 030f 	and.w	r3, r3, #15
 800e8ac:	b2da      	uxtb	r2, r3
 800e8ae:	697b      	ldr	r3, [r7, #20]
 800e8b0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e8b2:	7afb      	ldrb	r3, [r7, #11]
 800e8b4:	f003 030f 	and.w	r3, r3, #15
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d106      	bne.n	800e8ca <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	6979      	ldr	r1, [r7, #20]
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f006 ffb4 	bl	8015830 <USB_EP0StartXfer>
 800e8c8:	e005      	b.n	800e8d6 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	6979      	ldr	r1, [r7, #20]
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f006 fdcd 	bl	8015470 <USB_EPStartXfer>
  }

  return HAL_OK;
 800e8d6:	2300      	movs	r3, #0
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3718      	adds	r7, #24
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b083      	sub	sp, #12
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
 800e8e8:	460b      	mov	r3, r1
 800e8ea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e8ec:	78fb      	ldrb	r3, [r7, #3]
 800e8ee:	f003 020f 	and.w	r2, r3, #15
 800e8f2:	6879      	ldr	r1, [r7, #4]
 800e8f4:	4613      	mov	r3, r2
 800e8f6:	00db      	lsls	r3, r3, #3
 800e8f8:	4413      	add	r3, r2
 800e8fa:	009b      	lsls	r3, r3, #2
 800e8fc:	440b      	add	r3, r1
 800e8fe:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800e902:	681b      	ldr	r3, [r3, #0]
}
 800e904:	4618      	mov	r0, r3
 800e906:	370c      	adds	r7, #12
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr

0800e910 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b086      	sub	sp, #24
 800e914:	af00      	add	r7, sp, #0
 800e916:	60f8      	str	r0, [r7, #12]
 800e918:	607a      	str	r2, [r7, #4]
 800e91a:	603b      	str	r3, [r7, #0]
 800e91c:	460b      	mov	r3, r1
 800e91e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e920:	7afb      	ldrb	r3, [r7, #11]
 800e922:	f003 020f 	and.w	r2, r3, #15
 800e926:	4613      	mov	r3, r2
 800e928:	00db      	lsls	r3, r3, #3
 800e92a:	4413      	add	r3, r2
 800e92c:	009b      	lsls	r3, r3, #2
 800e92e:	3338      	adds	r3, #56	; 0x38
 800e930:	68fa      	ldr	r2, [r7, #12]
 800e932:	4413      	add	r3, r2
 800e934:	3304      	adds	r3, #4
 800e936:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	687a      	ldr	r2, [r7, #4]
 800e93c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	683a      	ldr	r2, [r7, #0]
 800e942:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	2200      	movs	r2, #0
 800e948:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800e94a:	697b      	ldr	r3, [r7, #20]
 800e94c:	2201      	movs	r2, #1
 800e94e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e950:	7afb      	ldrb	r3, [r7, #11]
 800e952:	f003 030f 	and.w	r3, r3, #15
 800e956:	b2da      	uxtb	r2, r3
 800e958:	697b      	ldr	r3, [r7, #20]
 800e95a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e95c:	7afb      	ldrb	r3, [r7, #11]
 800e95e:	f003 030f 	and.w	r3, r3, #15
 800e962:	2b00      	cmp	r3, #0
 800e964:	d106      	bne.n	800e974 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	6979      	ldr	r1, [r7, #20]
 800e96c:	4618      	mov	r0, r3
 800e96e:	f006 ff5f 	bl	8015830 <USB_EP0StartXfer>
 800e972:	e005      	b.n	800e980 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	6979      	ldr	r1, [r7, #20]
 800e97a:	4618      	mov	r0, r3
 800e97c:	f006 fd78 	bl	8015470 <USB_EPStartXfer>
  }

  return HAL_OK;
 800e980:	2300      	movs	r3, #0
}
 800e982:	4618      	mov	r0, r3
 800e984:	3718      	adds	r7, #24
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}

0800e98a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e98a:	b580      	push	{r7, lr}
 800e98c:	b084      	sub	sp, #16
 800e98e:	af00      	add	r7, sp, #0
 800e990:	6078      	str	r0, [r7, #4]
 800e992:	460b      	mov	r3, r1
 800e994:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e996:	78fb      	ldrb	r3, [r7, #3]
 800e998:	f003 020f 	and.w	r2, r3, #15
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	685b      	ldr	r3, [r3, #4]
 800e9a0:	429a      	cmp	r2, r3
 800e9a2:	d901      	bls.n	800e9a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	e04e      	b.n	800ea46 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e9a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	da0f      	bge.n	800e9d0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e9b0:	78fb      	ldrb	r3, [r7, #3]
 800e9b2:	f003 020f 	and.w	r2, r3, #15
 800e9b6:	4613      	mov	r3, r2
 800e9b8:	00db      	lsls	r3, r3, #3
 800e9ba:	4413      	add	r3, r2
 800e9bc:	009b      	lsls	r3, r3, #2
 800e9be:	3338      	adds	r3, #56	; 0x38
 800e9c0:	687a      	ldr	r2, [r7, #4]
 800e9c2:	4413      	add	r3, r2
 800e9c4:	3304      	adds	r3, #4
 800e9c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	705a      	strb	r2, [r3, #1]
 800e9ce:	e00d      	b.n	800e9ec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e9d0:	78fa      	ldrb	r2, [r7, #3]
 800e9d2:	4613      	mov	r3, r2
 800e9d4:	00db      	lsls	r3, r3, #3
 800e9d6:	4413      	add	r3, r2
 800e9d8:	009b      	lsls	r3, r3, #2
 800e9da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e9de:	687a      	ldr	r2, [r7, #4]
 800e9e0:	4413      	add	r3, r2
 800e9e2:	3304      	adds	r3, #4
 800e9e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e9f2:	78fb      	ldrb	r3, [r7, #3]
 800e9f4:	f003 030f 	and.w	r3, r3, #15
 800e9f8:	b2da      	uxtb	r2, r3
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	d101      	bne.n	800ea0c <HAL_PCD_EP_SetStall+0x82>
 800ea08:	2302      	movs	r3, #2
 800ea0a:	e01c      	b.n	800ea46 <HAL_PCD_EP_SetStall+0xbc>
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	2201      	movs	r2, #1
 800ea10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	68f9      	ldr	r1, [r7, #12]
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f007 f966 	bl	8015cec <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ea20:	78fb      	ldrb	r3, [r7, #3]
 800ea22:	f003 030f 	and.w	r3, r3, #15
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d108      	bne.n	800ea3c <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681a      	ldr	r2, [r3, #0]
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ea34:	4619      	mov	r1, r3
 800ea36:	4610      	mov	r0, r2
 800ea38:	f007 fb58 	bl	80160ec <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2200      	movs	r2, #0
 800ea40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800ea44:	2300      	movs	r3, #0
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3710      	adds	r7, #16
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}

0800ea4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b084      	sub	sp, #16
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
 800ea56:	460b      	mov	r3, r1
 800ea58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ea5a:	78fb      	ldrb	r3, [r7, #3]
 800ea5c:	f003 020f 	and.w	r2, r3, #15
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	685b      	ldr	r3, [r3, #4]
 800ea64:	429a      	cmp	r2, r3
 800ea66:	d901      	bls.n	800ea6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ea68:	2301      	movs	r3, #1
 800ea6a:	e042      	b.n	800eaf2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ea6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	da0f      	bge.n	800ea94 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ea74:	78fb      	ldrb	r3, [r7, #3]
 800ea76:	f003 020f 	and.w	r2, r3, #15
 800ea7a:	4613      	mov	r3, r2
 800ea7c:	00db      	lsls	r3, r3, #3
 800ea7e:	4413      	add	r3, r2
 800ea80:	009b      	lsls	r3, r3, #2
 800ea82:	3338      	adds	r3, #56	; 0x38
 800ea84:	687a      	ldr	r2, [r7, #4]
 800ea86:	4413      	add	r3, r2
 800ea88:	3304      	adds	r3, #4
 800ea8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	2201      	movs	r2, #1
 800ea90:	705a      	strb	r2, [r3, #1]
 800ea92:	e00f      	b.n	800eab4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ea94:	78fb      	ldrb	r3, [r7, #3]
 800ea96:	f003 020f 	and.w	r2, r3, #15
 800ea9a:	4613      	mov	r3, r2
 800ea9c:	00db      	lsls	r3, r3, #3
 800ea9e:	4413      	add	r3, r2
 800eaa0:	009b      	lsls	r3, r3, #2
 800eaa2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800eaa6:	687a      	ldr	r2, [r7, #4]
 800eaa8:	4413      	add	r3, r2
 800eaaa:	3304      	adds	r3, #4
 800eaac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	2200      	movs	r2, #0
 800eab2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2200      	movs	r2, #0
 800eab8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800eaba:	78fb      	ldrb	r3, [r7, #3]
 800eabc:	f003 030f 	and.w	r3, r3, #15
 800eac0:	b2da      	uxtb	r2, r3
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d101      	bne.n	800ead4 <HAL_PCD_EP_ClrStall+0x86>
 800ead0:	2302      	movs	r3, #2
 800ead2:	e00e      	b.n	800eaf2 <HAL_PCD_EP_ClrStall+0xa4>
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2201      	movs	r2, #1
 800ead8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	68f9      	ldr	r1, [r7, #12]
 800eae2:	4618      	mov	r0, r3
 800eae4:	f007 f970 	bl	8015dc8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2200      	movs	r2, #0
 800eaec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800eaf0:	2300      	movs	r3, #0
}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	3710      	adds	r7, #16
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}

0800eafa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800eafa:	b580      	push	{r7, lr}
 800eafc:	b084      	sub	sp, #16
 800eafe:	af00      	add	r7, sp, #0
 800eb00:	6078      	str	r0, [r7, #4]
 800eb02:	460b      	mov	r3, r1
 800eb04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800eb06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	da0c      	bge.n	800eb28 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800eb0e:	78fb      	ldrb	r3, [r7, #3]
 800eb10:	f003 020f 	and.w	r2, r3, #15
 800eb14:	4613      	mov	r3, r2
 800eb16:	00db      	lsls	r3, r3, #3
 800eb18:	4413      	add	r3, r2
 800eb1a:	009b      	lsls	r3, r3, #2
 800eb1c:	3338      	adds	r3, #56	; 0x38
 800eb1e:	687a      	ldr	r2, [r7, #4]
 800eb20:	4413      	add	r3, r2
 800eb22:	3304      	adds	r3, #4
 800eb24:	60fb      	str	r3, [r7, #12]
 800eb26:	e00c      	b.n	800eb42 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800eb28:	78fb      	ldrb	r3, [r7, #3]
 800eb2a:	f003 020f 	and.w	r2, r3, #15
 800eb2e:	4613      	mov	r3, r2
 800eb30:	00db      	lsls	r3, r3, #3
 800eb32:	4413      	add	r3, r2
 800eb34:	009b      	lsls	r3, r3, #2
 800eb36:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800eb3a:	687a      	ldr	r2, [r7, #4]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	3304      	adds	r3, #4
 800eb40:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	68f9      	ldr	r1, [r7, #12]
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f006 ff93 	bl	8015a74 <USB_EPStopXfer>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	72fb      	strb	r3, [r7, #11]

  return ret;
 800eb52:	7afb      	ldrb	r3, [r7, #11]
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	3710      	adds	r7, #16
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	bd80      	pop	{r7, pc}

0800eb5c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b088      	sub	sp, #32
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800eb70:	683a      	ldr	r2, [r7, #0]
 800eb72:	4613      	mov	r3, r2
 800eb74:	00db      	lsls	r3, r3, #3
 800eb76:	4413      	add	r3, r2
 800eb78:	009b      	lsls	r3, r3, #2
 800eb7a:	3338      	adds	r3, #56	; 0x38
 800eb7c:	687a      	ldr	r2, [r7, #4]
 800eb7e:	4413      	add	r3, r2
 800eb80:	3304      	adds	r3, #4
 800eb82:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	6a1a      	ldr	r2, [r3, #32]
 800eb88:	68fb      	ldr	r3, [r7, #12]
 800eb8a:	699b      	ldr	r3, [r3, #24]
 800eb8c:	429a      	cmp	r2, r3
 800eb8e:	d901      	bls.n	800eb94 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800eb90:	2301      	movs	r3, #1
 800eb92:	e067      	b.n	800ec64 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	699a      	ldr	r2, [r3, #24]
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	6a1b      	ldr	r3, [r3, #32]
 800eb9c:	1ad3      	subs	r3, r2, r3
 800eb9e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	68db      	ldr	r3, [r3, #12]
 800eba4:	69fa      	ldr	r2, [r7, #28]
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d902      	bls.n	800ebb0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	68db      	ldr	r3, [r3, #12]
 800ebae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800ebb0:	69fb      	ldr	r3, [r7, #28]
 800ebb2:	3303      	adds	r3, #3
 800ebb4:	089b      	lsrs	r3, r3, #2
 800ebb6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ebb8:	e026      	b.n	800ec08 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	699a      	ldr	r2, [r3, #24]
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	6a1b      	ldr	r3, [r3, #32]
 800ebc2:	1ad3      	subs	r3, r2, r3
 800ebc4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	68db      	ldr	r3, [r3, #12]
 800ebca:	69fa      	ldr	r2, [r7, #28]
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d902      	bls.n	800ebd6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	68db      	ldr	r3, [r3, #12]
 800ebd4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800ebd6:	69fb      	ldr	r3, [r7, #28]
 800ebd8:	3303      	adds	r3, #3
 800ebda:	089b      	lsrs	r3, r3, #2
 800ebdc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	6919      	ldr	r1, [r3, #16]
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	b2da      	uxtb	r2, r3
 800ebe6:	69fb      	ldr	r3, [r7, #28]
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	6978      	ldr	r0, [r7, #20]
 800ebec:	f006 ffec 	bl	8015bc8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	691a      	ldr	r2, [r3, #16]
 800ebf4:	69fb      	ldr	r3, [r7, #28]
 800ebf6:	441a      	add	r2, r3
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	6a1a      	ldr	r2, [r3, #32]
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	441a      	add	r2, r3
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	015a      	lsls	r2, r3, #5
 800ec0c:	693b      	ldr	r3, [r7, #16]
 800ec0e:	4413      	add	r3, r2
 800ec10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec14:	699b      	ldr	r3, [r3, #24]
 800ec16:	b29b      	uxth	r3, r3
 800ec18:	69ba      	ldr	r2, [r7, #24]
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d809      	bhi.n	800ec32 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	6a1a      	ldr	r2, [r3, #32]
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d203      	bcs.n	800ec32 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	699b      	ldr	r3, [r3, #24]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d1c3      	bne.n	800ebba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	699a      	ldr	r2, [r3, #24]
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	6a1b      	ldr	r3, [r3, #32]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d811      	bhi.n	800ec62 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	f003 030f 	and.w	r3, r3, #15
 800ec44:	2201      	movs	r2, #1
 800ec46:	fa02 f303 	lsl.w	r3, r2, r3
 800ec4a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ec4c:	693b      	ldr	r3, [r7, #16]
 800ec4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec54:	68bb      	ldr	r3, [r7, #8]
 800ec56:	43db      	mvns	r3, r3
 800ec58:	6939      	ldr	r1, [r7, #16]
 800ec5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ec5e:	4013      	ands	r3, r2
 800ec60:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800ec62:	2300      	movs	r3, #0
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3720      	adds	r7, #32
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b086      	sub	sp, #24
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	333c      	adds	r3, #60	; 0x3c
 800ec84:	3304      	adds	r3, #4
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	015a      	lsls	r2, r3, #5
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	4413      	add	r3, r2
 800ec92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec96:	689b      	ldr	r3, [r3, #8]
 800ec98:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	4a19      	ldr	r2, [pc, #100]	; (800ed04 <PCD_EP_OutXfrComplete_int+0x98>)
 800ec9e:	4293      	cmp	r3, r2
 800eca0:	d124      	bne.n	800ecec <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d00a      	beq.n	800ecc2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	015a      	lsls	r2, r3, #5
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	4413      	add	r3, r2
 800ecb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecb8:	461a      	mov	r2, r3
 800ecba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ecbe:	6093      	str	r3, [r2, #8]
 800ecc0:	e01a      	b.n	800ecf8 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	f003 0320 	and.w	r3, r3, #32
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d008      	beq.n	800ecde <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	015a      	lsls	r2, r3, #5
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	4413      	add	r3, r2
 800ecd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecd8:	461a      	mov	r2, r3
 800ecda:	2320      	movs	r3, #32
 800ecdc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ecde:	683b      	ldr	r3, [r7, #0]
 800ece0:	b2db      	uxtb	r3, r3
 800ece2:	4619      	mov	r1, r3
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f009 f971 	bl	8017fcc <HAL_PCD_DataOutStageCallback>
 800ecea:	e005      	b.n	800ecf8 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	b2db      	uxtb	r3, r3
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f009 f96a 	bl	8017fcc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800ecf8:	2300      	movs	r3, #0
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3718      	adds	r7, #24
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}
 800ed02:	bf00      	nop
 800ed04:	4f54310a 	.word	0x4f54310a

0800ed08 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b086      	sub	sp, #24
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	333c      	adds	r3, #60	; 0x3c
 800ed20:	3304      	adds	r3, #4
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	015a      	lsls	r2, r3, #5
 800ed2a:	693b      	ldr	r3, [r7, #16]
 800ed2c:	4413      	add	r3, r2
 800ed2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed32:	689b      	ldr	r3, [r3, #8]
 800ed34:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	4a0c      	ldr	r2, [pc, #48]	; (800ed6c <PCD_EP_OutSetupPacket_int+0x64>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d90e      	bls.n	800ed5c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d009      	beq.n	800ed5c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	015a      	lsls	r2, r3, #5
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	4413      	add	r3, r2
 800ed50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed54:	461a      	mov	r2, r3
 800ed56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed5a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f009 f923 	bl	8017fa8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800ed62:	2300      	movs	r3, #0
}
 800ed64:	4618      	mov	r0, r3
 800ed66:	3718      	adds	r7, #24
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}
 800ed6c:	4f54300a 	.word	0x4f54300a

0800ed70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ed70:	b480      	push	{r7}
 800ed72:	b085      	sub	sp, #20
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	460b      	mov	r3, r1
 800ed7a:	70fb      	strb	r3, [r7, #3]
 800ed7c:	4613      	mov	r3, r2
 800ed7e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed86:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800ed88:	78fb      	ldrb	r3, [r7, #3]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d107      	bne.n	800ed9e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800ed8e:	883b      	ldrh	r3, [r7, #0]
 800ed90:	0419      	lsls	r1, r3, #16
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	68ba      	ldr	r2, [r7, #8]
 800ed98:	430a      	orrs	r2, r1
 800ed9a:	629a      	str	r2, [r3, #40]	; 0x28
 800ed9c:	e028      	b.n	800edf0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eda4:	0c1b      	lsrs	r3, r3, #16
 800eda6:	68ba      	ldr	r2, [r7, #8]
 800eda8:	4413      	add	r3, r2
 800edaa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800edac:	2300      	movs	r3, #0
 800edae:	73fb      	strb	r3, [r7, #15]
 800edb0:	e00d      	b.n	800edce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681a      	ldr	r2, [r3, #0]
 800edb6:	7bfb      	ldrb	r3, [r7, #15]
 800edb8:	3340      	adds	r3, #64	; 0x40
 800edba:	009b      	lsls	r3, r3, #2
 800edbc:	4413      	add	r3, r2
 800edbe:	685b      	ldr	r3, [r3, #4]
 800edc0:	0c1b      	lsrs	r3, r3, #16
 800edc2:	68ba      	ldr	r2, [r7, #8]
 800edc4:	4413      	add	r3, r2
 800edc6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800edc8:	7bfb      	ldrb	r3, [r7, #15]
 800edca:	3301      	adds	r3, #1
 800edcc:	73fb      	strb	r3, [r7, #15]
 800edce:	7bfa      	ldrb	r2, [r7, #15]
 800edd0:	78fb      	ldrb	r3, [r7, #3]
 800edd2:	3b01      	subs	r3, #1
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d3ec      	bcc.n	800edb2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800edd8:	883b      	ldrh	r3, [r7, #0]
 800edda:	0418      	lsls	r0, r3, #16
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6819      	ldr	r1, [r3, #0]
 800ede0:	78fb      	ldrb	r3, [r7, #3]
 800ede2:	3b01      	subs	r3, #1
 800ede4:	68ba      	ldr	r2, [r7, #8]
 800ede6:	4302      	orrs	r2, r0
 800ede8:	3340      	adds	r3, #64	; 0x40
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	440b      	add	r3, r1
 800edee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800edf0:	2300      	movs	r3, #0
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	3714      	adds	r7, #20
 800edf6:	46bd      	mov	sp, r7
 800edf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfc:	4770      	bx	lr

0800edfe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800edfe:	b480      	push	{r7}
 800ee00:	b083      	sub	sp, #12
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	6078      	str	r0, [r7, #4]
 800ee06:	460b      	mov	r3, r1
 800ee08:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	887a      	ldrh	r2, [r7, #2]
 800ee10:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800ee12:	2300      	movs	r3, #0
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	370c      	adds	r7, #12
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1e:	4770      	bx	lr

0800ee20 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ee20:	b480      	push	{r7}
 800ee22:	b085      	sub	sp, #20
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2201      	movs	r2, #1
 800ee32:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2200      	movs	r2, #0
 800ee3a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	699b      	ldr	r3, [r3, #24]
 800ee42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee52:	f043 0303 	orr.w	r3, r3, #3
 800ee56:	68fa      	ldr	r2, [r7, #12]
 800ee58:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800ee5a:	2300      	movs	r3, #0
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3714      	adds	r7, #20
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr

0800ee68 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ee68:	b480      	push	{r7}
 800ee6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ee6c:	4b05      	ldr	r3, [pc, #20]	; (800ee84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	4a04      	ldr	r2, [pc, #16]	; (800ee84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ee72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ee76:	6013      	str	r3, [r2, #0]
}
 800ee78:	bf00      	nop
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee80:	4770      	bx	lr
 800ee82:	bf00      	nop
 800ee84:	40007000 	.word	0x40007000

0800ee88 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b082      	sub	sp, #8
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	460b      	mov	r3, r1
 800ee92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d10c      	bne.n	800eeb4 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800ee9a:	4b13      	ldr	r3, [pc, #76]	; (800eee8 <HAL_PWR_EnterSLEEPMode+0x60>)
 800ee9c:	695b      	ldr	r3, [r3, #20]
 800ee9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eea6:	d10e      	bne.n	800eec6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800eea8:	f000 f8b6 	bl	800f018 <HAL_PWREx_DisableLowPowerRunMode>
 800eeac:	4603      	mov	r3, r0
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d009      	beq.n	800eec6 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 800eeb2:	e016      	b.n	800eee2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 800eeb4:	4b0c      	ldr	r3, [pc, #48]	; (800eee8 <HAL_PWR_EnterSLEEPMode+0x60>)
 800eeb6:	695b      	ldr	r3, [r3, #20]
 800eeb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800eebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eec0:	d001      	beq.n	800eec6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800eec2:	f000 f899 	bl	800eff8 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800eec6:	4b09      	ldr	r3, [pc, #36]	; (800eeec <HAL_PWR_EnterSLEEPMode+0x64>)
 800eec8:	691b      	ldr	r3, [r3, #16]
 800eeca:	4a08      	ldr	r2, [pc, #32]	; (800eeec <HAL_PWR_EnterSLEEPMode+0x64>)
 800eecc:	f023 0304 	bic.w	r3, r3, #4
 800eed0:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800eed2:	78fb      	ldrb	r3, [r7, #3]
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d101      	bne.n	800eedc <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800eed8:	bf30      	wfi
 800eeda:	e002      	b.n	800eee2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800eedc:	bf40      	sev
    __WFE();
 800eede:	bf20      	wfe
    __WFE();
 800eee0:	bf20      	wfe
  }

}
 800eee2:	3708      	adds	r7, #8
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	40007000 	.word	0x40007000
 800eeec:	e000ed00 	.word	0xe000ed00

0800eef0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800eef0:	b480      	push	{r7}
 800eef2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800eef4:	4b04      	ldr	r3, [pc, #16]	; (800ef08 <HAL_PWREx_GetVoltageRange+0x18>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	46bd      	mov	sp, r7
 800ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef04:	4770      	bx	lr
 800ef06:	bf00      	nop
 800ef08:	40007000 	.word	0x40007000

0800ef0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b085      	sub	sp, #20
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef1a:	d130      	bne.n	800ef7e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800ef1c:	4b23      	ldr	r3, [pc, #140]	; (800efac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ef24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef28:	d038      	beq.n	800ef9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ef2a:	4b20      	ldr	r3, [pc, #128]	; (800efac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ef32:	4a1e      	ldr	r2, [pc, #120]	; (800efac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ef34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ef38:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ef3a:	4b1d      	ldr	r3, [pc, #116]	; (800efb0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	2232      	movs	r2, #50	; 0x32
 800ef40:	fb02 f303 	mul.w	r3, r2, r3
 800ef44:	4a1b      	ldr	r2, [pc, #108]	; (800efb4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800ef46:	fba2 2303 	umull	r2, r3, r2, r3
 800ef4a:	0c9b      	lsrs	r3, r3, #18
 800ef4c:	3301      	adds	r3, #1
 800ef4e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ef50:	e002      	b.n	800ef58 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	3b01      	subs	r3, #1
 800ef56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ef58:	4b14      	ldr	r3, [pc, #80]	; (800efac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ef5a:	695b      	ldr	r3, [r3, #20]
 800ef5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ef60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef64:	d102      	bne.n	800ef6c <HAL_PWREx_ControlVoltageScaling+0x60>
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d1f2      	bne.n	800ef52 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ef6c:	4b0f      	ldr	r3, [pc, #60]	; (800efac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ef6e:	695b      	ldr	r3, [r3, #20]
 800ef70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ef74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef78:	d110      	bne.n	800ef9c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800ef7a:	2303      	movs	r3, #3
 800ef7c:	e00f      	b.n	800ef9e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800ef7e:	4b0b      	ldr	r3, [pc, #44]	; (800efac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ef86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef8a:	d007      	beq.n	800ef9c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ef8c:	4b07      	ldr	r3, [pc, #28]	; (800efac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ef94:	4a05      	ldr	r2, [pc, #20]	; (800efac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ef96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ef9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800ef9c:	2300      	movs	r3, #0
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3714      	adds	r7, #20
 800efa2:	46bd      	mov	sp, r7
 800efa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa8:	4770      	bx	lr
 800efaa:	bf00      	nop
 800efac:	40007000 	.word	0x40007000
 800efb0:	20000190 	.word	0x20000190
 800efb4:	431bde83 	.word	0x431bde83

0800efb8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800efb8:	b480      	push	{r7}
 800efba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800efbc:	4b05      	ldr	r3, [pc, #20]	; (800efd4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800efbe:	685b      	ldr	r3, [r3, #4]
 800efc0:	4a04      	ldr	r2, [pc, #16]	; (800efd4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800efc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800efc6:	6053      	str	r3, [r2, #4]
}
 800efc8:	bf00      	nop
 800efca:	46bd      	mov	sp, r7
 800efcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd0:	4770      	bx	lr
 800efd2:	bf00      	nop
 800efd4:	40007000 	.word	0x40007000

0800efd8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800efd8:	b480      	push	{r7}
 800efda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800efdc:	4b05      	ldr	r3, [pc, #20]	; (800eff4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	4a04      	ldr	r2, [pc, #16]	; (800eff4 <HAL_PWREx_EnableVddIO2+0x1c>)
 800efe2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800efe6:	6053      	str	r3, [r2, #4]
}
 800efe8:	bf00      	nop
 800efea:	46bd      	mov	sp, r7
 800efec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff0:	4770      	bx	lr
 800eff2:	bf00      	nop
 800eff4:	40007000 	.word	0x40007000

0800eff8 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800eff8:	b480      	push	{r7}
 800effa:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800effc:	4b05      	ldr	r3, [pc, #20]	; (800f014 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	4a04      	ldr	r2, [pc, #16]	; (800f014 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800f002:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f006:	6013      	str	r3, [r2, #0]
}
 800f008:	bf00      	nop
 800f00a:	46bd      	mov	sp, r7
 800f00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f010:	4770      	bx	lr
 800f012:	bf00      	nop
 800f014:	40007000 	.word	0x40007000

0800f018 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800f018:	b480      	push	{r7}
 800f01a:	b083      	sub	sp, #12
 800f01c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800f01e:	4b17      	ldr	r3, [pc, #92]	; (800f07c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	4a16      	ldr	r2, [pc, #88]	; (800f07c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800f024:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f028:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800f02a:	4b15      	ldr	r3, [pc, #84]	; (800f080 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	2232      	movs	r2, #50	; 0x32
 800f030:	fb02 f303 	mul.w	r3, r2, r3
 800f034:	4a13      	ldr	r2, [pc, #76]	; (800f084 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 800f036:	fba2 2303 	umull	r2, r3, r2, r3
 800f03a:	0c9b      	lsrs	r3, r3, #18
 800f03c:	3301      	adds	r3, #1
 800f03e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800f040:	e002      	b.n	800f048 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	3b01      	subs	r3, #1
 800f046:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800f048:	4b0c      	ldr	r3, [pc, #48]	; (800f07c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800f04a:	695b      	ldr	r3, [r3, #20]
 800f04c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f054:	d102      	bne.n	800f05c <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d1f2      	bne.n	800f042 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800f05c:	4b07      	ldr	r3, [pc, #28]	; (800f07c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800f05e:	695b      	ldr	r3, [r3, #20]
 800f060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f068:	d101      	bne.n	800f06e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800f06a:	2303      	movs	r3, #3
 800f06c:	e000      	b.n	800f070 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800f06e:	2300      	movs	r3, #0
}
 800f070:	4618      	mov	r0, r3
 800f072:	370c      	adds	r7, #12
 800f074:	46bd      	mov	sp, r7
 800f076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07a:	4770      	bx	lr
 800f07c:	40007000 	.word	0x40007000
 800f080:	20000190 	.word	0x20000190
 800f084:	431bde83 	.word	0x431bde83

0800f088 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b086      	sub	sp, #24
 800f08c:	af02      	add	r7, sp, #8
 800f08e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f090:	f7fb fdd2 	bl	800ac38 <HAL_GetTick>
 800f094:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d101      	bne.n	800f0a0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800f09c:	2301      	movs	r3, #1
 800f09e:	e069      	b.n	800f174 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f0a6:	b2db      	uxtb	r3, r3
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d10b      	bne.n	800f0c4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f7f2 fd67 	bl	8001b88 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800f0ba:	f241 3188 	movw	r1, #5000	; 0x1388
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f000 f85e 	bl	800f180 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	689b      	ldr	r3, [r3, #8]
 800f0d2:	3b01      	subs	r3, #1
 800f0d4:	021a      	lsls	r2, r3, #8
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	430a      	orrs	r2, r1
 800f0dc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f0e2:	9300      	str	r3, [sp, #0]
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	2120      	movs	r1, #32
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f000 f856 	bl	800f19c <QSPI_WaitFlagStateUntilTimeout>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800f0f4:	7afb      	ldrb	r3, [r7, #11]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d137      	bne.n	800f16a <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f104:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800f108:	687a      	ldr	r2, [r7, #4]
 800f10a:	6852      	ldr	r2, [r2, #4]
 800f10c:	0611      	lsls	r1, r2, #24
 800f10e:	687a      	ldr	r2, [r7, #4]
 800f110:	68d2      	ldr	r2, [r2, #12]
 800f112:	4311      	orrs	r1, r2
 800f114:	687a      	ldr	r2, [r7, #4]
 800f116:	69d2      	ldr	r2, [r2, #28]
 800f118:	4311      	orrs	r1, r2
 800f11a:	687a      	ldr	r2, [r7, #4]
 800f11c:	6a12      	ldr	r2, [r2, #32]
 800f11e:	4311      	orrs	r1, r2
 800f120:	687a      	ldr	r2, [r7, #4]
 800f122:	6812      	ldr	r2, [r2, #0]
 800f124:	430b      	orrs	r3, r1
 800f126:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	685a      	ldr	r2, [r3, #4]
 800f12e:	4b13      	ldr	r3, [pc, #76]	; (800f17c <HAL_QSPI_Init+0xf4>)
 800f130:	4013      	ands	r3, r2
 800f132:	687a      	ldr	r2, [r7, #4]
 800f134:	6912      	ldr	r2, [r2, #16]
 800f136:	0411      	lsls	r1, r2, #16
 800f138:	687a      	ldr	r2, [r7, #4]
 800f13a:	6952      	ldr	r2, [r2, #20]
 800f13c:	4311      	orrs	r1, r2
 800f13e:	687a      	ldr	r2, [r7, #4]
 800f140:	6992      	ldr	r2, [r2, #24]
 800f142:	4311      	orrs	r1, r2
 800f144:	687a      	ldr	r2, [r7, #4]
 800f146:	6812      	ldr	r2, [r2, #0]
 800f148:	430b      	orrs	r3, r1
 800f14a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	681a      	ldr	r2, [r3, #0]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f042 0201 	orr.w	r2, r2, #1
 800f15a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2200      	movs	r2, #0
 800f160:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2201      	movs	r2, #1
 800f166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2200      	movs	r2, #0
 800f16e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800f172:	7afb      	ldrb	r3, [r7, #11]
}
 800f174:	4618      	mov	r0, r3
 800f176:	3710      	adds	r7, #16
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}
 800f17c:	ffe0f8fe 	.word	0xffe0f8fe

0800f180 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800f180:	b480      	push	{r7}
 800f182:	b083      	sub	sp, #12
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	683a      	ldr	r2, [r7, #0]
 800f18e:	649a      	str	r2, [r3, #72]	; 0x48
}
 800f190:	bf00      	nop
 800f192:	370c      	adds	r7, #12
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr

0800f19c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b084      	sub	sp, #16
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	60f8      	str	r0, [r7, #12]
 800f1a4:	60b9      	str	r1, [r7, #8]
 800f1a6:	603b      	str	r3, [r7, #0]
 800f1a8:	4613      	mov	r3, r2
 800f1aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f1ac:	e01a      	b.n	800f1e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f1ae:	69bb      	ldr	r3, [r7, #24]
 800f1b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f1b4:	d016      	beq.n	800f1e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f1b6:	f7fb fd3f 	bl	800ac38 <HAL_GetTick>
 800f1ba:	4602      	mov	r2, r0
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	1ad3      	subs	r3, r2, r3
 800f1c0:	69ba      	ldr	r2, [r7, #24]
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d302      	bcc.n	800f1cc <QSPI_WaitFlagStateUntilTimeout+0x30>
 800f1c6:	69bb      	ldr	r3, [r7, #24]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d10b      	bne.n	800f1e4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2204      	movs	r2, #4
 800f1d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1d8:	f043 0201 	orr.w	r2, r3, #1
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800f1e0:	2301      	movs	r3, #1
 800f1e2:	e00e      	b.n	800f202 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	689a      	ldr	r2, [r3, #8]
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	4013      	ands	r3, r2
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	bf14      	ite	ne
 800f1f2:	2301      	movne	r3, #1
 800f1f4:	2300      	moveq	r3, #0
 800f1f6:	b2db      	uxtb	r3, r3
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	79fb      	ldrb	r3, [r7, #7]
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	d1d6      	bne.n	800f1ae <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f200:	2300      	movs	r3, #0
}
 800f202:	4618      	mov	r0, r3
 800f204:	3710      	adds	r7, #16
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
	...

0800f20c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b088      	sub	sp, #32
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d102      	bne.n	800f220 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800f21a:	2301      	movs	r3, #1
 800f21c:	f000 bc08 	b.w	800fa30 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f220:	4b96      	ldr	r3, [pc, #600]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f222:	689b      	ldr	r3, [r3, #8]
 800f224:	f003 030c 	and.w	r3, r3, #12
 800f228:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f22a:	4b94      	ldr	r3, [pc, #592]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f22c:	68db      	ldr	r3, [r3, #12]
 800f22e:	f003 0303 	and.w	r3, r3, #3
 800f232:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	f003 0310 	and.w	r3, r3, #16
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	f000 80e4 	beq.w	800f40a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f242:	69bb      	ldr	r3, [r7, #24]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d007      	beq.n	800f258 <HAL_RCC_OscConfig+0x4c>
 800f248:	69bb      	ldr	r3, [r7, #24]
 800f24a:	2b0c      	cmp	r3, #12
 800f24c:	f040 808b 	bne.w	800f366 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	2b01      	cmp	r3, #1
 800f254:	f040 8087 	bne.w	800f366 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f258:	4b88      	ldr	r3, [pc, #544]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f003 0302 	and.w	r3, r3, #2
 800f260:	2b00      	cmp	r3, #0
 800f262:	d005      	beq.n	800f270 <HAL_RCC_OscConfig+0x64>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	699b      	ldr	r3, [r3, #24]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d101      	bne.n	800f270 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800f26c:	2301      	movs	r3, #1
 800f26e:	e3df      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	6a1a      	ldr	r2, [r3, #32]
 800f274:	4b81      	ldr	r3, [pc, #516]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	f003 0308 	and.w	r3, r3, #8
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d004      	beq.n	800f28a <HAL_RCC_OscConfig+0x7e>
 800f280:	4b7e      	ldr	r3, [pc, #504]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f288:	e005      	b.n	800f296 <HAL_RCC_OscConfig+0x8a>
 800f28a:	4b7c      	ldr	r3, [pc, #496]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f28c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f290:	091b      	lsrs	r3, r3, #4
 800f292:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f296:	4293      	cmp	r3, r2
 800f298:	d223      	bcs.n	800f2e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6a1b      	ldr	r3, [r3, #32]
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f000 fd92 	bl	800fdc8 <RCC_SetFlashLatencyFromMSIRange>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d001      	beq.n	800f2ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	e3c0      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f2ae:	4b73      	ldr	r3, [pc, #460]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	4a72      	ldr	r2, [pc, #456]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f2b4:	f043 0308 	orr.w	r3, r3, #8
 800f2b8:	6013      	str	r3, [r2, #0]
 800f2ba:	4b70      	ldr	r3, [pc, #448]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6a1b      	ldr	r3, [r3, #32]
 800f2c6:	496d      	ldr	r1, [pc, #436]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f2c8:	4313      	orrs	r3, r2
 800f2ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f2cc:	4b6b      	ldr	r3, [pc, #428]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f2ce:	685b      	ldr	r3, [r3, #4]
 800f2d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	69db      	ldr	r3, [r3, #28]
 800f2d8:	021b      	lsls	r3, r3, #8
 800f2da:	4968      	ldr	r1, [pc, #416]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f2dc:	4313      	orrs	r3, r2
 800f2de:	604b      	str	r3, [r1, #4]
 800f2e0:	e025      	b.n	800f32e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f2e2:	4b66      	ldr	r3, [pc, #408]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	4a65      	ldr	r2, [pc, #404]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f2e8:	f043 0308 	orr.w	r3, r3, #8
 800f2ec:	6013      	str	r3, [r2, #0]
 800f2ee:	4b63      	ldr	r3, [pc, #396]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6a1b      	ldr	r3, [r3, #32]
 800f2fa:	4960      	ldr	r1, [pc, #384]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f2fc:	4313      	orrs	r3, r2
 800f2fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f300:	4b5e      	ldr	r3, [pc, #376]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f302:	685b      	ldr	r3, [r3, #4]
 800f304:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	69db      	ldr	r3, [r3, #28]
 800f30c:	021b      	lsls	r3, r3, #8
 800f30e:	495b      	ldr	r1, [pc, #364]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f310:	4313      	orrs	r3, r2
 800f312:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f314:	69bb      	ldr	r3, [r7, #24]
 800f316:	2b00      	cmp	r3, #0
 800f318:	d109      	bne.n	800f32e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6a1b      	ldr	r3, [r3, #32]
 800f31e:	4618      	mov	r0, r3
 800f320:	f000 fd52 	bl	800fdc8 <RCC_SetFlashLatencyFromMSIRange>
 800f324:	4603      	mov	r3, r0
 800f326:	2b00      	cmp	r3, #0
 800f328:	d001      	beq.n	800f32e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800f32a:	2301      	movs	r3, #1
 800f32c:	e380      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800f32e:	f000 fc87 	bl	800fc40 <HAL_RCC_GetSysClockFreq>
 800f332:	4602      	mov	r2, r0
 800f334:	4b51      	ldr	r3, [pc, #324]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f336:	689b      	ldr	r3, [r3, #8]
 800f338:	091b      	lsrs	r3, r3, #4
 800f33a:	f003 030f 	and.w	r3, r3, #15
 800f33e:	4950      	ldr	r1, [pc, #320]	; (800f480 <HAL_RCC_OscConfig+0x274>)
 800f340:	5ccb      	ldrb	r3, [r1, r3]
 800f342:	f003 031f 	and.w	r3, r3, #31
 800f346:	fa22 f303 	lsr.w	r3, r2, r3
 800f34a:	4a4e      	ldr	r2, [pc, #312]	; (800f484 <HAL_RCC_OscConfig+0x278>)
 800f34c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800f34e:	4b4e      	ldr	r3, [pc, #312]	; (800f488 <HAL_RCC_OscConfig+0x27c>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	4618      	mov	r0, r3
 800f354:	f7fb fc20 	bl	800ab98 <HAL_InitTick>
 800f358:	4603      	mov	r3, r0
 800f35a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800f35c:	7bfb      	ldrb	r3, [r7, #15]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d052      	beq.n	800f408 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800f362:	7bfb      	ldrb	r3, [r7, #15]
 800f364:	e364      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	699b      	ldr	r3, [r3, #24]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d032      	beq.n	800f3d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800f36e:	4b43      	ldr	r3, [pc, #268]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	4a42      	ldr	r2, [pc, #264]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f374:	f043 0301 	orr.w	r3, r3, #1
 800f378:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f37a:	f7fb fc5d 	bl	800ac38 <HAL_GetTick>
 800f37e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f380:	e008      	b.n	800f394 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f382:	f7fb fc59 	bl	800ac38 <HAL_GetTick>
 800f386:	4602      	mov	r2, r0
 800f388:	693b      	ldr	r3, [r7, #16]
 800f38a:	1ad3      	subs	r3, r2, r3
 800f38c:	2b02      	cmp	r3, #2
 800f38e:	d901      	bls.n	800f394 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800f390:	2303      	movs	r3, #3
 800f392:	e34d      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f394:	4b39      	ldr	r3, [pc, #228]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	f003 0302 	and.w	r3, r3, #2
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d0f0      	beq.n	800f382 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f3a0:	4b36      	ldr	r3, [pc, #216]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	4a35      	ldr	r2, [pc, #212]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f3a6:	f043 0308 	orr.w	r3, r3, #8
 800f3aa:	6013      	str	r3, [r2, #0]
 800f3ac:	4b33      	ldr	r3, [pc, #204]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	6a1b      	ldr	r3, [r3, #32]
 800f3b8:	4930      	ldr	r1, [pc, #192]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f3ba:	4313      	orrs	r3, r2
 800f3bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f3be:	4b2f      	ldr	r3, [pc, #188]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f3c0:	685b      	ldr	r3, [r3, #4]
 800f3c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	69db      	ldr	r3, [r3, #28]
 800f3ca:	021b      	lsls	r3, r3, #8
 800f3cc:	492b      	ldr	r1, [pc, #172]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f3ce:	4313      	orrs	r3, r2
 800f3d0:	604b      	str	r3, [r1, #4]
 800f3d2:	e01a      	b.n	800f40a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800f3d4:	4b29      	ldr	r3, [pc, #164]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	4a28      	ldr	r2, [pc, #160]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f3da:	f023 0301 	bic.w	r3, r3, #1
 800f3de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f3e0:	f7fb fc2a 	bl	800ac38 <HAL_GetTick>
 800f3e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f3e6:	e008      	b.n	800f3fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f3e8:	f7fb fc26 	bl	800ac38 <HAL_GetTick>
 800f3ec:	4602      	mov	r2, r0
 800f3ee:	693b      	ldr	r3, [r7, #16]
 800f3f0:	1ad3      	subs	r3, r2, r3
 800f3f2:	2b02      	cmp	r3, #2
 800f3f4:	d901      	bls.n	800f3fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800f3f6:	2303      	movs	r3, #3
 800f3f8:	e31a      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f3fa:	4b20      	ldr	r3, [pc, #128]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	f003 0302 	and.w	r3, r3, #2
 800f402:	2b00      	cmp	r3, #0
 800f404:	d1f0      	bne.n	800f3e8 <HAL_RCC_OscConfig+0x1dc>
 800f406:	e000      	b.n	800f40a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f408:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	f003 0301 	and.w	r3, r3, #1
 800f412:	2b00      	cmp	r3, #0
 800f414:	d073      	beq.n	800f4fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800f416:	69bb      	ldr	r3, [r7, #24]
 800f418:	2b08      	cmp	r3, #8
 800f41a:	d005      	beq.n	800f428 <HAL_RCC_OscConfig+0x21c>
 800f41c:	69bb      	ldr	r3, [r7, #24]
 800f41e:	2b0c      	cmp	r3, #12
 800f420:	d10e      	bne.n	800f440 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	2b03      	cmp	r3, #3
 800f426:	d10b      	bne.n	800f440 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f428:	4b14      	ldr	r3, [pc, #80]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f430:	2b00      	cmp	r3, #0
 800f432:	d063      	beq.n	800f4fc <HAL_RCC_OscConfig+0x2f0>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	685b      	ldr	r3, [r3, #4]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d15f      	bne.n	800f4fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800f43c:	2301      	movs	r3, #1
 800f43e:	e2f7      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	685b      	ldr	r3, [r3, #4]
 800f444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f448:	d106      	bne.n	800f458 <HAL_RCC_OscConfig+0x24c>
 800f44a:	4b0c      	ldr	r3, [pc, #48]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	4a0b      	ldr	r2, [pc, #44]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f454:	6013      	str	r3, [r2, #0]
 800f456:	e025      	b.n	800f4a4 <HAL_RCC_OscConfig+0x298>
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	685b      	ldr	r3, [r3, #4]
 800f45c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f460:	d114      	bne.n	800f48c <HAL_RCC_OscConfig+0x280>
 800f462:	4b06      	ldr	r3, [pc, #24]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	4a05      	ldr	r2, [pc, #20]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f46c:	6013      	str	r3, [r2, #0]
 800f46e:	4b03      	ldr	r3, [pc, #12]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	4a02      	ldr	r2, [pc, #8]	; (800f47c <HAL_RCC_OscConfig+0x270>)
 800f474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f478:	6013      	str	r3, [r2, #0]
 800f47a:	e013      	b.n	800f4a4 <HAL_RCC_OscConfig+0x298>
 800f47c:	40021000 	.word	0x40021000
 800f480:	08019910 	.word	0x08019910
 800f484:	20000190 	.word	0x20000190
 800f488:	2000054c 	.word	0x2000054c
 800f48c:	4ba0      	ldr	r3, [pc, #640]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	4a9f      	ldr	r2, [pc, #636]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f496:	6013      	str	r3, [r2, #0]
 800f498:	4b9d      	ldr	r3, [pc, #628]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	4a9c      	ldr	r2, [pc, #624]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f49e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f4a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	685b      	ldr	r3, [r3, #4]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d013      	beq.n	800f4d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f4ac:	f7fb fbc4 	bl	800ac38 <HAL_GetTick>
 800f4b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f4b2:	e008      	b.n	800f4c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f4b4:	f7fb fbc0 	bl	800ac38 <HAL_GetTick>
 800f4b8:	4602      	mov	r2, r0
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	1ad3      	subs	r3, r2, r3
 800f4be:	2b64      	cmp	r3, #100	; 0x64
 800f4c0:	d901      	bls.n	800f4c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800f4c2:	2303      	movs	r3, #3
 800f4c4:	e2b4      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f4c6:	4b92      	ldr	r3, [pc, #584]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d0f0      	beq.n	800f4b4 <HAL_RCC_OscConfig+0x2a8>
 800f4d2:	e014      	b.n	800f4fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f4d4:	f7fb fbb0 	bl	800ac38 <HAL_GetTick>
 800f4d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f4da:	e008      	b.n	800f4ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f4dc:	f7fb fbac 	bl	800ac38 <HAL_GetTick>
 800f4e0:	4602      	mov	r2, r0
 800f4e2:	693b      	ldr	r3, [r7, #16]
 800f4e4:	1ad3      	subs	r3, r2, r3
 800f4e6:	2b64      	cmp	r3, #100	; 0x64
 800f4e8:	d901      	bls.n	800f4ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800f4ea:	2303      	movs	r3, #3
 800f4ec:	e2a0      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f4ee:	4b88      	ldr	r3, [pc, #544]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d1f0      	bne.n	800f4dc <HAL_RCC_OscConfig+0x2d0>
 800f4fa:	e000      	b.n	800f4fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f4fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	f003 0302 	and.w	r3, r3, #2
 800f506:	2b00      	cmp	r3, #0
 800f508:	d060      	beq.n	800f5cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800f50a:	69bb      	ldr	r3, [r7, #24]
 800f50c:	2b04      	cmp	r3, #4
 800f50e:	d005      	beq.n	800f51c <HAL_RCC_OscConfig+0x310>
 800f510:	69bb      	ldr	r3, [r7, #24]
 800f512:	2b0c      	cmp	r3, #12
 800f514:	d119      	bne.n	800f54a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	2b02      	cmp	r3, #2
 800f51a:	d116      	bne.n	800f54a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f51c:	4b7c      	ldr	r3, [pc, #496]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f524:	2b00      	cmp	r3, #0
 800f526:	d005      	beq.n	800f534 <HAL_RCC_OscConfig+0x328>
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	68db      	ldr	r3, [r3, #12]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d101      	bne.n	800f534 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800f530:	2301      	movs	r3, #1
 800f532:	e27d      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f534:	4b76      	ldr	r3, [pc, #472]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f536:	685b      	ldr	r3, [r3, #4]
 800f538:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	691b      	ldr	r3, [r3, #16]
 800f540:	061b      	lsls	r3, r3, #24
 800f542:	4973      	ldr	r1, [pc, #460]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f544:	4313      	orrs	r3, r2
 800f546:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f548:	e040      	b.n	800f5cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	68db      	ldr	r3, [r3, #12]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d023      	beq.n	800f59a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f552:	4b6f      	ldr	r3, [pc, #444]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	4a6e      	ldr	r2, [pc, #440]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f55c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f55e:	f7fb fb6b 	bl	800ac38 <HAL_GetTick>
 800f562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f564:	e008      	b.n	800f578 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f566:	f7fb fb67 	bl	800ac38 <HAL_GetTick>
 800f56a:	4602      	mov	r2, r0
 800f56c:	693b      	ldr	r3, [r7, #16]
 800f56e:	1ad3      	subs	r3, r2, r3
 800f570:	2b02      	cmp	r3, #2
 800f572:	d901      	bls.n	800f578 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800f574:	2303      	movs	r3, #3
 800f576:	e25b      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f578:	4b65      	ldr	r3, [pc, #404]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f580:	2b00      	cmp	r3, #0
 800f582:	d0f0      	beq.n	800f566 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f584:	4b62      	ldr	r3, [pc, #392]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f586:	685b      	ldr	r3, [r3, #4]
 800f588:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	691b      	ldr	r3, [r3, #16]
 800f590:	061b      	lsls	r3, r3, #24
 800f592:	495f      	ldr	r1, [pc, #380]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f594:	4313      	orrs	r3, r2
 800f596:	604b      	str	r3, [r1, #4]
 800f598:	e018      	b.n	800f5cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f59a:	4b5d      	ldr	r3, [pc, #372]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	4a5c      	ldr	r2, [pc, #368]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f5a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f5a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f5a6:	f7fb fb47 	bl	800ac38 <HAL_GetTick>
 800f5aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f5ac:	e008      	b.n	800f5c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f5ae:	f7fb fb43 	bl	800ac38 <HAL_GetTick>
 800f5b2:	4602      	mov	r2, r0
 800f5b4:	693b      	ldr	r3, [r7, #16]
 800f5b6:	1ad3      	subs	r3, r2, r3
 800f5b8:	2b02      	cmp	r3, #2
 800f5ba:	d901      	bls.n	800f5c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800f5bc:	2303      	movs	r3, #3
 800f5be:	e237      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f5c0:	4b53      	ldr	r3, [pc, #332]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d1f0      	bne.n	800f5ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	f003 0308 	and.w	r3, r3, #8
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d03c      	beq.n	800f652 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	695b      	ldr	r3, [r3, #20]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d01c      	beq.n	800f61a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f5e0:	4b4b      	ldr	r3, [pc, #300]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f5e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f5e6:	4a4a      	ldr	r2, [pc, #296]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f5e8:	f043 0301 	orr.w	r3, r3, #1
 800f5ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f5f0:	f7fb fb22 	bl	800ac38 <HAL_GetTick>
 800f5f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800f5f6:	e008      	b.n	800f60a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f5f8:	f7fb fb1e 	bl	800ac38 <HAL_GetTick>
 800f5fc:	4602      	mov	r2, r0
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	1ad3      	subs	r3, r2, r3
 800f602:	2b02      	cmp	r3, #2
 800f604:	d901      	bls.n	800f60a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800f606:	2303      	movs	r3, #3
 800f608:	e212      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800f60a:	4b41      	ldr	r3, [pc, #260]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f60c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f610:	f003 0302 	and.w	r3, r3, #2
 800f614:	2b00      	cmp	r3, #0
 800f616:	d0ef      	beq.n	800f5f8 <HAL_RCC_OscConfig+0x3ec>
 800f618:	e01b      	b.n	800f652 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f61a:	4b3d      	ldr	r3, [pc, #244]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f61c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f620:	4a3b      	ldr	r2, [pc, #236]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f622:	f023 0301 	bic.w	r3, r3, #1
 800f626:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f62a:	f7fb fb05 	bl	800ac38 <HAL_GetTick>
 800f62e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f630:	e008      	b.n	800f644 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f632:	f7fb fb01 	bl	800ac38 <HAL_GetTick>
 800f636:	4602      	mov	r2, r0
 800f638:	693b      	ldr	r3, [r7, #16]
 800f63a:	1ad3      	subs	r3, r2, r3
 800f63c:	2b02      	cmp	r3, #2
 800f63e:	d901      	bls.n	800f644 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800f640:	2303      	movs	r3, #3
 800f642:	e1f5      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f644:	4b32      	ldr	r3, [pc, #200]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f64a:	f003 0302 	and.w	r3, r3, #2
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d1ef      	bne.n	800f632 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	f003 0304 	and.w	r3, r3, #4
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	f000 80a6 	beq.w	800f7ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f660:	2300      	movs	r3, #0
 800f662:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800f664:	4b2a      	ldr	r3, [pc, #168]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d10d      	bne.n	800f68c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f670:	4b27      	ldr	r3, [pc, #156]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f674:	4a26      	ldr	r2, [pc, #152]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f67a:	6593      	str	r3, [r2, #88]	; 0x58
 800f67c:	4b24      	ldr	r3, [pc, #144]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f67e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f684:	60bb      	str	r3, [r7, #8]
 800f686:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f688:	2301      	movs	r3, #1
 800f68a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f68c:	4b21      	ldr	r3, [pc, #132]	; (800f714 <HAL_RCC_OscConfig+0x508>)
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f694:	2b00      	cmp	r3, #0
 800f696:	d118      	bne.n	800f6ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f698:	4b1e      	ldr	r3, [pc, #120]	; (800f714 <HAL_RCC_OscConfig+0x508>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	4a1d      	ldr	r2, [pc, #116]	; (800f714 <HAL_RCC_OscConfig+0x508>)
 800f69e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f6a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f6a4:	f7fb fac8 	bl	800ac38 <HAL_GetTick>
 800f6a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f6aa:	e008      	b.n	800f6be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f6ac:	f7fb fac4 	bl	800ac38 <HAL_GetTick>
 800f6b0:	4602      	mov	r2, r0
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	1ad3      	subs	r3, r2, r3
 800f6b6:	2b02      	cmp	r3, #2
 800f6b8:	d901      	bls.n	800f6be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800f6ba:	2303      	movs	r3, #3
 800f6bc:	e1b8      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f6be:	4b15      	ldr	r3, [pc, #84]	; (800f714 <HAL_RCC_OscConfig+0x508>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d0f0      	beq.n	800f6ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	689b      	ldr	r3, [r3, #8]
 800f6ce:	2b01      	cmp	r3, #1
 800f6d0:	d108      	bne.n	800f6e4 <HAL_RCC_OscConfig+0x4d8>
 800f6d2:	4b0f      	ldr	r3, [pc, #60]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f6d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f6d8:	4a0d      	ldr	r2, [pc, #52]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f6da:	f043 0301 	orr.w	r3, r3, #1
 800f6de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f6e2:	e029      	b.n	800f738 <HAL_RCC_OscConfig+0x52c>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	689b      	ldr	r3, [r3, #8]
 800f6e8:	2b05      	cmp	r3, #5
 800f6ea:	d115      	bne.n	800f718 <HAL_RCC_OscConfig+0x50c>
 800f6ec:	4b08      	ldr	r3, [pc, #32]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f6ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f6f2:	4a07      	ldr	r2, [pc, #28]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f6f4:	f043 0304 	orr.w	r3, r3, #4
 800f6f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f6fc:	4b04      	ldr	r3, [pc, #16]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f6fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f702:	4a03      	ldr	r2, [pc, #12]	; (800f710 <HAL_RCC_OscConfig+0x504>)
 800f704:	f043 0301 	orr.w	r3, r3, #1
 800f708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f70c:	e014      	b.n	800f738 <HAL_RCC_OscConfig+0x52c>
 800f70e:	bf00      	nop
 800f710:	40021000 	.word	0x40021000
 800f714:	40007000 	.word	0x40007000
 800f718:	4b9d      	ldr	r3, [pc, #628]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f71a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f71e:	4a9c      	ldr	r2, [pc, #624]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f720:	f023 0301 	bic.w	r3, r3, #1
 800f724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f728:	4b99      	ldr	r3, [pc, #612]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f72a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f72e:	4a98      	ldr	r2, [pc, #608]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f730:	f023 0304 	bic.w	r3, r3, #4
 800f734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	689b      	ldr	r3, [r3, #8]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d016      	beq.n	800f76e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f740:	f7fb fa7a 	bl	800ac38 <HAL_GetTick>
 800f744:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f746:	e00a      	b.n	800f75e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f748:	f7fb fa76 	bl	800ac38 <HAL_GetTick>
 800f74c:	4602      	mov	r2, r0
 800f74e:	693b      	ldr	r3, [r7, #16]
 800f750:	1ad3      	subs	r3, r2, r3
 800f752:	f241 3288 	movw	r2, #5000	; 0x1388
 800f756:	4293      	cmp	r3, r2
 800f758:	d901      	bls.n	800f75e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800f75a:	2303      	movs	r3, #3
 800f75c:	e168      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f75e:	4b8c      	ldr	r3, [pc, #560]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f764:	f003 0302 	and.w	r3, r3, #2
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d0ed      	beq.n	800f748 <HAL_RCC_OscConfig+0x53c>
 800f76c:	e015      	b.n	800f79a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f76e:	f7fb fa63 	bl	800ac38 <HAL_GetTick>
 800f772:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800f774:	e00a      	b.n	800f78c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f776:	f7fb fa5f 	bl	800ac38 <HAL_GetTick>
 800f77a:	4602      	mov	r2, r0
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	1ad3      	subs	r3, r2, r3
 800f780:	f241 3288 	movw	r2, #5000	; 0x1388
 800f784:	4293      	cmp	r3, r2
 800f786:	d901      	bls.n	800f78c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800f788:	2303      	movs	r3, #3
 800f78a:	e151      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800f78c:	4b80      	ldr	r3, [pc, #512]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f78e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f792:	f003 0302 	and.w	r3, r3, #2
 800f796:	2b00      	cmp	r3, #0
 800f798:	d1ed      	bne.n	800f776 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f79a:	7ffb      	ldrb	r3, [r7, #31]
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	d105      	bne.n	800f7ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f7a0:	4b7b      	ldr	r3, [pc, #492]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f7a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7a4:	4a7a      	ldr	r2, [pc, #488]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f7a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f7aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	f003 0320 	and.w	r3, r3, #32
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d03c      	beq.n	800f832 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d01c      	beq.n	800f7fa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800f7c0:	4b73      	ldr	r3, [pc, #460]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f7c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f7c6:	4a72      	ldr	r2, [pc, #456]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f7c8:	f043 0301 	orr.w	r3, r3, #1
 800f7cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f7d0:	f7fb fa32 	bl	800ac38 <HAL_GetTick>
 800f7d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800f7d6:	e008      	b.n	800f7ea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f7d8:	f7fb fa2e 	bl	800ac38 <HAL_GetTick>
 800f7dc:	4602      	mov	r2, r0
 800f7de:	693b      	ldr	r3, [r7, #16]
 800f7e0:	1ad3      	subs	r3, r2, r3
 800f7e2:	2b02      	cmp	r3, #2
 800f7e4:	d901      	bls.n	800f7ea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800f7e6:	2303      	movs	r3, #3
 800f7e8:	e122      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800f7ea:	4b69      	ldr	r3, [pc, #420]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f7ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f7f0:	f003 0302 	and.w	r3, r3, #2
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d0ef      	beq.n	800f7d8 <HAL_RCC_OscConfig+0x5cc>
 800f7f8:	e01b      	b.n	800f832 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800f7fa:	4b65      	ldr	r3, [pc, #404]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f7fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f800:	4a63      	ldr	r2, [pc, #396]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f802:	f023 0301 	bic.w	r3, r3, #1
 800f806:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f80a:	f7fb fa15 	bl	800ac38 <HAL_GetTick>
 800f80e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800f810:	e008      	b.n	800f824 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f812:	f7fb fa11 	bl	800ac38 <HAL_GetTick>
 800f816:	4602      	mov	r2, r0
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	1ad3      	subs	r3, r2, r3
 800f81c:	2b02      	cmp	r3, #2
 800f81e:	d901      	bls.n	800f824 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800f820:	2303      	movs	r3, #3
 800f822:	e105      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800f824:	4b5a      	ldr	r3, [pc, #360]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f826:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f82a:	f003 0302 	and.w	r3, r3, #2
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d1ef      	bne.n	800f812 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f836:	2b00      	cmp	r3, #0
 800f838:	f000 80f9 	beq.w	800fa2e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f840:	2b02      	cmp	r3, #2
 800f842:	f040 80cf 	bne.w	800f9e4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800f846:	4b52      	ldr	r3, [pc, #328]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f848:	68db      	ldr	r3, [r3, #12]
 800f84a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800f84c:	697b      	ldr	r3, [r7, #20]
 800f84e:	f003 0203 	and.w	r2, r3, #3
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f856:	429a      	cmp	r2, r3
 800f858:	d12c      	bne.n	800f8b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f864:	3b01      	subs	r3, #1
 800f866:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800f868:	429a      	cmp	r2, r3
 800f86a:	d123      	bne.n	800f8b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f876:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800f878:	429a      	cmp	r2, r3
 800f87a:	d11b      	bne.n	800f8b4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f886:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f888:	429a      	cmp	r2, r3
 800f88a:	d113      	bne.n	800f8b4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f896:	085b      	lsrs	r3, r3, #1
 800f898:	3b01      	subs	r3, #1
 800f89a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800f89c:	429a      	cmp	r2, r3
 800f89e:	d109      	bne.n	800f8b4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8aa:	085b      	lsrs	r3, r3, #1
 800f8ac:	3b01      	subs	r3, #1
 800f8ae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d071      	beq.n	800f998 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800f8b4:	69bb      	ldr	r3, [r7, #24]
 800f8b6:	2b0c      	cmp	r3, #12
 800f8b8:	d068      	beq.n	800f98c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800f8ba:	4b35      	ldr	r3, [pc, #212]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d105      	bne.n	800f8d2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800f8c6:	4b32      	ldr	r3, [pc, #200]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d001      	beq.n	800f8d6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	e0ac      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800f8d6:	4b2e      	ldr	r3, [pc, #184]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	4a2d      	ldr	r2, [pc, #180]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f8dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f8e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800f8e2:	f7fb f9a9 	bl	800ac38 <HAL_GetTick>
 800f8e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f8e8:	e008      	b.n	800f8fc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f8ea:	f7fb f9a5 	bl	800ac38 <HAL_GetTick>
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	1ad3      	subs	r3, r2, r3
 800f8f4:	2b02      	cmp	r3, #2
 800f8f6:	d901      	bls.n	800f8fc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800f8f8:	2303      	movs	r3, #3
 800f8fa:	e099      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f8fc:	4b24      	ldr	r3, [pc, #144]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f904:	2b00      	cmp	r3, #0
 800f906:	d1f0      	bne.n	800f8ea <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f908:	4b21      	ldr	r3, [pc, #132]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f90a:	68da      	ldr	r2, [r3, #12]
 800f90c:	4b21      	ldr	r3, [pc, #132]	; (800f994 <HAL_RCC_OscConfig+0x788>)
 800f90e:	4013      	ands	r3, r2
 800f910:	687a      	ldr	r2, [r7, #4]
 800f912:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800f914:	687a      	ldr	r2, [r7, #4]
 800f916:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f918:	3a01      	subs	r2, #1
 800f91a:	0112      	lsls	r2, r2, #4
 800f91c:	4311      	orrs	r1, r2
 800f91e:	687a      	ldr	r2, [r7, #4]
 800f920:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f922:	0212      	lsls	r2, r2, #8
 800f924:	4311      	orrs	r1, r2
 800f926:	687a      	ldr	r2, [r7, #4]
 800f928:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800f92a:	0852      	lsrs	r2, r2, #1
 800f92c:	3a01      	subs	r2, #1
 800f92e:	0552      	lsls	r2, r2, #21
 800f930:	4311      	orrs	r1, r2
 800f932:	687a      	ldr	r2, [r7, #4]
 800f934:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f936:	0852      	lsrs	r2, r2, #1
 800f938:	3a01      	subs	r2, #1
 800f93a:	0652      	lsls	r2, r2, #25
 800f93c:	4311      	orrs	r1, r2
 800f93e:	687a      	ldr	r2, [r7, #4]
 800f940:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f942:	06d2      	lsls	r2, r2, #27
 800f944:	430a      	orrs	r2, r1
 800f946:	4912      	ldr	r1, [pc, #72]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f948:	4313      	orrs	r3, r2
 800f94a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800f94c:	4b10      	ldr	r3, [pc, #64]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	4a0f      	ldr	r2, [pc, #60]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f956:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f958:	4b0d      	ldr	r3, [pc, #52]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f95a:	68db      	ldr	r3, [r3, #12]
 800f95c:	4a0c      	ldr	r2, [pc, #48]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f95e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f962:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800f964:	f7fb f968 	bl	800ac38 <HAL_GetTick>
 800f968:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f96a:	e008      	b.n	800f97e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f96c:	f7fb f964 	bl	800ac38 <HAL_GetTick>
 800f970:	4602      	mov	r2, r0
 800f972:	693b      	ldr	r3, [r7, #16]
 800f974:	1ad3      	subs	r3, r2, r3
 800f976:	2b02      	cmp	r3, #2
 800f978:	d901      	bls.n	800f97e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800f97a:	2303      	movs	r3, #3
 800f97c:	e058      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f97e:	4b04      	ldr	r3, [pc, #16]	; (800f990 <HAL_RCC_OscConfig+0x784>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f986:	2b00      	cmp	r3, #0
 800f988:	d0f0      	beq.n	800f96c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800f98a:	e050      	b.n	800fa2e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800f98c:	2301      	movs	r3, #1
 800f98e:	e04f      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
 800f990:	40021000 	.word	0x40021000
 800f994:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f998:	4b27      	ldr	r3, [pc, #156]	; (800fa38 <HAL_RCC_OscConfig+0x82c>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d144      	bne.n	800fa2e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800f9a4:	4b24      	ldr	r3, [pc, #144]	; (800fa38 <HAL_RCC_OscConfig+0x82c>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	4a23      	ldr	r2, [pc, #140]	; (800fa38 <HAL_RCC_OscConfig+0x82c>)
 800f9aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f9ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f9b0:	4b21      	ldr	r3, [pc, #132]	; (800fa38 <HAL_RCC_OscConfig+0x82c>)
 800f9b2:	68db      	ldr	r3, [r3, #12]
 800f9b4:	4a20      	ldr	r2, [pc, #128]	; (800fa38 <HAL_RCC_OscConfig+0x82c>)
 800f9b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f9ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f9bc:	f7fb f93c 	bl	800ac38 <HAL_GetTick>
 800f9c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f9c2:	e008      	b.n	800f9d6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f9c4:	f7fb f938 	bl	800ac38 <HAL_GetTick>
 800f9c8:	4602      	mov	r2, r0
 800f9ca:	693b      	ldr	r3, [r7, #16]
 800f9cc:	1ad3      	subs	r3, r2, r3
 800f9ce:	2b02      	cmp	r3, #2
 800f9d0:	d901      	bls.n	800f9d6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800f9d2:	2303      	movs	r3, #3
 800f9d4:	e02c      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f9d6:	4b18      	ldr	r3, [pc, #96]	; (800fa38 <HAL_RCC_OscConfig+0x82c>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d0f0      	beq.n	800f9c4 <HAL_RCC_OscConfig+0x7b8>
 800f9e2:	e024      	b.n	800fa2e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800f9e4:	69bb      	ldr	r3, [r7, #24]
 800f9e6:	2b0c      	cmp	r3, #12
 800f9e8:	d01f      	beq.n	800fa2a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f9ea:	4b13      	ldr	r3, [pc, #76]	; (800fa38 <HAL_RCC_OscConfig+0x82c>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	4a12      	ldr	r2, [pc, #72]	; (800fa38 <HAL_RCC_OscConfig+0x82c>)
 800f9f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f9f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f9f6:	f7fb f91f 	bl	800ac38 <HAL_GetTick>
 800f9fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f9fc:	e008      	b.n	800fa10 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f9fe:	f7fb f91b 	bl	800ac38 <HAL_GetTick>
 800fa02:	4602      	mov	r2, r0
 800fa04:	693b      	ldr	r3, [r7, #16]
 800fa06:	1ad3      	subs	r3, r2, r3
 800fa08:	2b02      	cmp	r3, #2
 800fa0a:	d901      	bls.n	800fa10 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800fa0c:	2303      	movs	r3, #3
 800fa0e:	e00f      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fa10:	4b09      	ldr	r3, [pc, #36]	; (800fa38 <HAL_RCC_OscConfig+0x82c>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d1f0      	bne.n	800f9fe <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800fa1c:	4b06      	ldr	r3, [pc, #24]	; (800fa38 <HAL_RCC_OscConfig+0x82c>)
 800fa1e:	68da      	ldr	r2, [r3, #12]
 800fa20:	4905      	ldr	r1, [pc, #20]	; (800fa38 <HAL_RCC_OscConfig+0x82c>)
 800fa22:	4b06      	ldr	r3, [pc, #24]	; (800fa3c <HAL_RCC_OscConfig+0x830>)
 800fa24:	4013      	ands	r3, r2
 800fa26:	60cb      	str	r3, [r1, #12]
 800fa28:	e001      	b.n	800fa2e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	e000      	b.n	800fa30 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800fa2e:	2300      	movs	r3, #0
}
 800fa30:	4618      	mov	r0, r3
 800fa32:	3720      	adds	r7, #32
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}
 800fa38:	40021000 	.word	0x40021000
 800fa3c:	feeefffc 	.word	0xfeeefffc

0800fa40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b084      	sub	sp, #16
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d101      	bne.n	800fa54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fa50:	2301      	movs	r3, #1
 800fa52:	e0e7      	b.n	800fc24 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800fa54:	4b75      	ldr	r3, [pc, #468]	; (800fc2c <HAL_RCC_ClockConfig+0x1ec>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	f003 0307 	and.w	r3, r3, #7
 800fa5c:	683a      	ldr	r2, [r7, #0]
 800fa5e:	429a      	cmp	r2, r3
 800fa60:	d910      	bls.n	800fa84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fa62:	4b72      	ldr	r3, [pc, #456]	; (800fc2c <HAL_RCC_ClockConfig+0x1ec>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	f023 0207 	bic.w	r2, r3, #7
 800fa6a:	4970      	ldr	r1, [pc, #448]	; (800fc2c <HAL_RCC_ClockConfig+0x1ec>)
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	4313      	orrs	r3, r2
 800fa70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fa72:	4b6e      	ldr	r3, [pc, #440]	; (800fc2c <HAL_RCC_ClockConfig+0x1ec>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	f003 0307 	and.w	r3, r3, #7
 800fa7a:	683a      	ldr	r2, [r7, #0]
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	d001      	beq.n	800fa84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800fa80:	2301      	movs	r3, #1
 800fa82:	e0cf      	b.n	800fc24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	f003 0302 	and.w	r3, r3, #2
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d010      	beq.n	800fab2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	689a      	ldr	r2, [r3, #8]
 800fa94:	4b66      	ldr	r3, [pc, #408]	; (800fc30 <HAL_RCC_ClockConfig+0x1f0>)
 800fa96:	689b      	ldr	r3, [r3, #8]
 800fa98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d908      	bls.n	800fab2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800faa0:	4b63      	ldr	r3, [pc, #396]	; (800fc30 <HAL_RCC_ClockConfig+0x1f0>)
 800faa2:	689b      	ldr	r3, [r3, #8]
 800faa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	689b      	ldr	r3, [r3, #8]
 800faac:	4960      	ldr	r1, [pc, #384]	; (800fc30 <HAL_RCC_ClockConfig+0x1f0>)
 800faae:	4313      	orrs	r3, r2
 800fab0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	f003 0301 	and.w	r3, r3, #1
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d04c      	beq.n	800fb58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	685b      	ldr	r3, [r3, #4]
 800fac2:	2b03      	cmp	r3, #3
 800fac4:	d107      	bne.n	800fad6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fac6:	4b5a      	ldr	r3, [pc, #360]	; (800fc30 <HAL_RCC_ClockConfig+0x1f0>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800face:	2b00      	cmp	r3, #0
 800fad0:	d121      	bne.n	800fb16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800fad2:	2301      	movs	r3, #1
 800fad4:	e0a6      	b.n	800fc24 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	685b      	ldr	r3, [r3, #4]
 800fada:	2b02      	cmp	r3, #2
 800fadc:	d107      	bne.n	800faee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800fade:	4b54      	ldr	r3, [pc, #336]	; (800fc30 <HAL_RCC_ClockConfig+0x1f0>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d115      	bne.n	800fb16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800faea:	2301      	movs	r3, #1
 800faec:	e09a      	b.n	800fc24 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d107      	bne.n	800fb06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800faf6:	4b4e      	ldr	r3, [pc, #312]	; (800fc30 <HAL_RCC_ClockConfig+0x1f0>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	f003 0302 	and.w	r3, r3, #2
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d109      	bne.n	800fb16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800fb02:	2301      	movs	r3, #1
 800fb04:	e08e      	b.n	800fc24 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800fb06:	4b4a      	ldr	r3, [pc, #296]	; (800fc30 <HAL_RCC_ClockConfig+0x1f0>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d101      	bne.n	800fb16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800fb12:	2301      	movs	r3, #1
 800fb14:	e086      	b.n	800fc24 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800fb16:	4b46      	ldr	r3, [pc, #280]	; (800fc30 <HAL_RCC_ClockConfig+0x1f0>)
 800fb18:	689b      	ldr	r3, [r3, #8]
 800fb1a:	f023 0203 	bic.w	r2, r3, #3
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	685b      	ldr	r3, [r3, #4]
 800fb22:	4943      	ldr	r1, [pc, #268]	; (800fc30 <HAL_RCC_ClockConfig+0x1f0>)
 800fb24:	4313      	orrs	r3, r2
 800fb26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fb28:	f7fb f886 	bl	800ac38 <HAL_GetTick>
 800fb2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fb2e:	e00a      	b.n	800fb46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fb30:	f7fb f882 	bl	800ac38 <HAL_GetTick>
 800fb34:	4602      	mov	r2, r0
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	1ad3      	subs	r3, r2, r3
 800fb3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	d901      	bls.n	800fb46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800fb42:	2303      	movs	r3, #3
 800fb44:	e06e      	b.n	800fc24 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fb46:	4b3a      	ldr	r3, [pc, #232]	; (800fc30 <HAL_RCC_ClockConfig+0x1f0>)
 800fb48:	689b      	ldr	r3, [r3, #8]
 800fb4a:	f003 020c 	and.w	r2, r3, #12
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	685b      	ldr	r3, [r3, #4]
 800fb52:	009b      	lsls	r3, r3, #2
 800fb54:	429a      	cmp	r2, r3
 800fb56:	d1eb      	bne.n	800fb30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	f003 0302 	and.w	r3, r3, #2
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d010      	beq.n	800fb86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	689a      	ldr	r2, [r3, #8]
 800fb68:	4b31      	ldr	r3, [pc, #196]	; (800fc30 <HAL_RCC_ClockConfig+0x1f0>)
 800fb6a:	689b      	ldr	r3, [r3, #8]
 800fb6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb70:	429a      	cmp	r2, r3
 800fb72:	d208      	bcs.n	800fb86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fb74:	4b2e      	ldr	r3, [pc, #184]	; (800fc30 <HAL_RCC_ClockConfig+0x1f0>)
 800fb76:	689b      	ldr	r3, [r3, #8]
 800fb78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	689b      	ldr	r3, [r3, #8]
 800fb80:	492b      	ldr	r1, [pc, #172]	; (800fc30 <HAL_RCC_ClockConfig+0x1f0>)
 800fb82:	4313      	orrs	r3, r2
 800fb84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800fb86:	4b29      	ldr	r3, [pc, #164]	; (800fc2c <HAL_RCC_ClockConfig+0x1ec>)
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	f003 0307 	and.w	r3, r3, #7
 800fb8e:	683a      	ldr	r2, [r7, #0]
 800fb90:	429a      	cmp	r2, r3
 800fb92:	d210      	bcs.n	800fbb6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fb94:	4b25      	ldr	r3, [pc, #148]	; (800fc2c <HAL_RCC_ClockConfig+0x1ec>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	f023 0207 	bic.w	r2, r3, #7
 800fb9c:	4923      	ldr	r1, [pc, #140]	; (800fc2c <HAL_RCC_ClockConfig+0x1ec>)
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	4313      	orrs	r3, r2
 800fba2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fba4:	4b21      	ldr	r3, [pc, #132]	; (800fc2c <HAL_RCC_ClockConfig+0x1ec>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	f003 0307 	and.w	r3, r3, #7
 800fbac:	683a      	ldr	r2, [r7, #0]
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	d001      	beq.n	800fbb6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	e036      	b.n	800fc24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	f003 0304 	and.w	r3, r3, #4
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d008      	beq.n	800fbd4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800fbc2:	4b1b      	ldr	r3, [pc, #108]	; (800fc30 <HAL_RCC_ClockConfig+0x1f0>)
 800fbc4:	689b      	ldr	r3, [r3, #8]
 800fbc6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	68db      	ldr	r3, [r3, #12]
 800fbce:	4918      	ldr	r1, [pc, #96]	; (800fc30 <HAL_RCC_ClockConfig+0x1f0>)
 800fbd0:	4313      	orrs	r3, r2
 800fbd2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	f003 0308 	and.w	r3, r3, #8
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d009      	beq.n	800fbf4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800fbe0:	4b13      	ldr	r3, [pc, #76]	; (800fc30 <HAL_RCC_ClockConfig+0x1f0>)
 800fbe2:	689b      	ldr	r3, [r3, #8]
 800fbe4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	691b      	ldr	r3, [r3, #16]
 800fbec:	00db      	lsls	r3, r3, #3
 800fbee:	4910      	ldr	r1, [pc, #64]	; (800fc30 <HAL_RCC_ClockConfig+0x1f0>)
 800fbf0:	4313      	orrs	r3, r2
 800fbf2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800fbf4:	f000 f824 	bl	800fc40 <HAL_RCC_GetSysClockFreq>
 800fbf8:	4602      	mov	r2, r0
 800fbfa:	4b0d      	ldr	r3, [pc, #52]	; (800fc30 <HAL_RCC_ClockConfig+0x1f0>)
 800fbfc:	689b      	ldr	r3, [r3, #8]
 800fbfe:	091b      	lsrs	r3, r3, #4
 800fc00:	f003 030f 	and.w	r3, r3, #15
 800fc04:	490b      	ldr	r1, [pc, #44]	; (800fc34 <HAL_RCC_ClockConfig+0x1f4>)
 800fc06:	5ccb      	ldrb	r3, [r1, r3]
 800fc08:	f003 031f 	and.w	r3, r3, #31
 800fc0c:	fa22 f303 	lsr.w	r3, r2, r3
 800fc10:	4a09      	ldr	r2, [pc, #36]	; (800fc38 <HAL_RCC_ClockConfig+0x1f8>)
 800fc12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800fc14:	4b09      	ldr	r3, [pc, #36]	; (800fc3c <HAL_RCC_ClockConfig+0x1fc>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f7fa ffbd 	bl	800ab98 <HAL_InitTick>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	72fb      	strb	r3, [r7, #11]

  return status;
 800fc22:	7afb      	ldrb	r3, [r7, #11]
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3710      	adds	r7, #16
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}
 800fc2c:	40022000 	.word	0x40022000
 800fc30:	40021000 	.word	0x40021000
 800fc34:	08019910 	.word	0x08019910
 800fc38:	20000190 	.word	0x20000190
 800fc3c:	2000054c 	.word	0x2000054c

0800fc40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fc40:	b480      	push	{r7}
 800fc42:	b089      	sub	sp, #36	; 0x24
 800fc44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800fc46:	2300      	movs	r3, #0
 800fc48:	61fb      	str	r3, [r7, #28]
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fc4e:	4b3e      	ldr	r3, [pc, #248]	; (800fd48 <HAL_RCC_GetSysClockFreq+0x108>)
 800fc50:	689b      	ldr	r3, [r3, #8]
 800fc52:	f003 030c 	and.w	r3, r3, #12
 800fc56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fc58:	4b3b      	ldr	r3, [pc, #236]	; (800fd48 <HAL_RCC_GetSysClockFreq+0x108>)
 800fc5a:	68db      	ldr	r3, [r3, #12]
 800fc5c:	f003 0303 	and.w	r3, r3, #3
 800fc60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800fc62:	693b      	ldr	r3, [r7, #16]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d005      	beq.n	800fc74 <HAL_RCC_GetSysClockFreq+0x34>
 800fc68:	693b      	ldr	r3, [r7, #16]
 800fc6a:	2b0c      	cmp	r3, #12
 800fc6c:	d121      	bne.n	800fcb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d11e      	bne.n	800fcb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800fc74:	4b34      	ldr	r3, [pc, #208]	; (800fd48 <HAL_RCC_GetSysClockFreq+0x108>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	f003 0308 	and.w	r3, r3, #8
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d107      	bne.n	800fc90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800fc80:	4b31      	ldr	r3, [pc, #196]	; (800fd48 <HAL_RCC_GetSysClockFreq+0x108>)
 800fc82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fc86:	0a1b      	lsrs	r3, r3, #8
 800fc88:	f003 030f 	and.w	r3, r3, #15
 800fc8c:	61fb      	str	r3, [r7, #28]
 800fc8e:	e005      	b.n	800fc9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800fc90:	4b2d      	ldr	r3, [pc, #180]	; (800fd48 <HAL_RCC_GetSysClockFreq+0x108>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	091b      	lsrs	r3, r3, #4
 800fc96:	f003 030f 	and.w	r3, r3, #15
 800fc9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800fc9c:	4a2b      	ldr	r2, [pc, #172]	; (800fd4c <HAL_RCC_GetSysClockFreq+0x10c>)
 800fc9e:	69fb      	ldr	r3, [r7, #28]
 800fca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fca4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800fca6:	693b      	ldr	r3, [r7, #16]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d10d      	bne.n	800fcc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800fcac:	69fb      	ldr	r3, [r7, #28]
 800fcae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800fcb0:	e00a      	b.n	800fcc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800fcb2:	693b      	ldr	r3, [r7, #16]
 800fcb4:	2b04      	cmp	r3, #4
 800fcb6:	d102      	bne.n	800fcbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800fcb8:	4b25      	ldr	r3, [pc, #148]	; (800fd50 <HAL_RCC_GetSysClockFreq+0x110>)
 800fcba:	61bb      	str	r3, [r7, #24]
 800fcbc:	e004      	b.n	800fcc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	2b08      	cmp	r3, #8
 800fcc2:	d101      	bne.n	800fcc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800fcc4:	4b23      	ldr	r3, [pc, #140]	; (800fd54 <HAL_RCC_GetSysClockFreq+0x114>)
 800fcc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800fcc8:	693b      	ldr	r3, [r7, #16]
 800fcca:	2b0c      	cmp	r3, #12
 800fccc:	d134      	bne.n	800fd38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800fcce:	4b1e      	ldr	r3, [pc, #120]	; (800fd48 <HAL_RCC_GetSysClockFreq+0x108>)
 800fcd0:	68db      	ldr	r3, [r3, #12]
 800fcd2:	f003 0303 	and.w	r3, r3, #3
 800fcd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	2b02      	cmp	r3, #2
 800fcdc:	d003      	beq.n	800fce6 <HAL_RCC_GetSysClockFreq+0xa6>
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	2b03      	cmp	r3, #3
 800fce2:	d003      	beq.n	800fcec <HAL_RCC_GetSysClockFreq+0xac>
 800fce4:	e005      	b.n	800fcf2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800fce6:	4b1a      	ldr	r3, [pc, #104]	; (800fd50 <HAL_RCC_GetSysClockFreq+0x110>)
 800fce8:	617b      	str	r3, [r7, #20]
      break;
 800fcea:	e005      	b.n	800fcf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800fcec:	4b19      	ldr	r3, [pc, #100]	; (800fd54 <HAL_RCC_GetSysClockFreq+0x114>)
 800fcee:	617b      	str	r3, [r7, #20]
      break;
 800fcf0:	e002      	b.n	800fcf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800fcf2:	69fb      	ldr	r3, [r7, #28]
 800fcf4:	617b      	str	r3, [r7, #20]
      break;
 800fcf6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800fcf8:	4b13      	ldr	r3, [pc, #76]	; (800fd48 <HAL_RCC_GetSysClockFreq+0x108>)
 800fcfa:	68db      	ldr	r3, [r3, #12]
 800fcfc:	091b      	lsrs	r3, r3, #4
 800fcfe:	f003 0307 	and.w	r3, r3, #7
 800fd02:	3301      	adds	r3, #1
 800fd04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800fd06:	4b10      	ldr	r3, [pc, #64]	; (800fd48 <HAL_RCC_GetSysClockFreq+0x108>)
 800fd08:	68db      	ldr	r3, [r3, #12]
 800fd0a:	0a1b      	lsrs	r3, r3, #8
 800fd0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd10:	697a      	ldr	r2, [r7, #20]
 800fd12:	fb03 f202 	mul.w	r2, r3, r2
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800fd1e:	4b0a      	ldr	r3, [pc, #40]	; (800fd48 <HAL_RCC_GetSysClockFreq+0x108>)
 800fd20:	68db      	ldr	r3, [r3, #12]
 800fd22:	0e5b      	lsrs	r3, r3, #25
 800fd24:	f003 0303 	and.w	r3, r3, #3
 800fd28:	3301      	adds	r3, #1
 800fd2a:	005b      	lsls	r3, r3, #1
 800fd2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800fd2e:	697a      	ldr	r2, [r7, #20]
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800fd38:	69bb      	ldr	r3, [r7, #24]
}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	3724      	adds	r7, #36	; 0x24
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd44:	4770      	bx	lr
 800fd46:	bf00      	nop
 800fd48:	40021000 	.word	0x40021000
 800fd4c:	08019928 	.word	0x08019928
 800fd50:	00f42400 	.word	0x00f42400
 800fd54:	007a1200 	.word	0x007a1200

0800fd58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800fd5c:	4b03      	ldr	r3, [pc, #12]	; (800fd6c <HAL_RCC_GetHCLKFreq+0x14>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	46bd      	mov	sp, r7
 800fd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd68:	4770      	bx	lr
 800fd6a:	bf00      	nop
 800fd6c:	20000190 	.word	0x20000190

0800fd70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800fd74:	f7ff fff0 	bl	800fd58 <HAL_RCC_GetHCLKFreq>
 800fd78:	4602      	mov	r2, r0
 800fd7a:	4b06      	ldr	r3, [pc, #24]	; (800fd94 <HAL_RCC_GetPCLK1Freq+0x24>)
 800fd7c:	689b      	ldr	r3, [r3, #8]
 800fd7e:	0a1b      	lsrs	r3, r3, #8
 800fd80:	f003 0307 	and.w	r3, r3, #7
 800fd84:	4904      	ldr	r1, [pc, #16]	; (800fd98 <HAL_RCC_GetPCLK1Freq+0x28>)
 800fd86:	5ccb      	ldrb	r3, [r1, r3]
 800fd88:	f003 031f 	and.w	r3, r3, #31
 800fd8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fd90:	4618      	mov	r0, r3
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	40021000 	.word	0x40021000
 800fd98:	08019920 	.word	0x08019920

0800fd9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800fda0:	f7ff ffda 	bl	800fd58 <HAL_RCC_GetHCLKFreq>
 800fda4:	4602      	mov	r2, r0
 800fda6:	4b06      	ldr	r3, [pc, #24]	; (800fdc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800fda8:	689b      	ldr	r3, [r3, #8]
 800fdaa:	0adb      	lsrs	r3, r3, #11
 800fdac:	f003 0307 	and.w	r3, r3, #7
 800fdb0:	4904      	ldr	r1, [pc, #16]	; (800fdc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800fdb2:	5ccb      	ldrb	r3, [r1, r3]
 800fdb4:	f003 031f 	and.w	r3, r3, #31
 800fdb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	40021000 	.word	0x40021000
 800fdc4:	08019920 	.word	0x08019920

0800fdc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b086      	sub	sp, #24
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800fdd4:	4b2a      	ldr	r3, [pc, #168]	; (800fe80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800fdd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fdd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d003      	beq.n	800fde8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800fde0:	f7ff f886 	bl	800eef0 <HAL_PWREx_GetVoltageRange>
 800fde4:	6178      	str	r0, [r7, #20]
 800fde6:	e014      	b.n	800fe12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800fde8:	4b25      	ldr	r3, [pc, #148]	; (800fe80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800fdea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fdec:	4a24      	ldr	r2, [pc, #144]	; (800fe80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800fdee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fdf2:	6593      	str	r3, [r2, #88]	; 0x58
 800fdf4:	4b22      	ldr	r3, [pc, #136]	; (800fe80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800fdf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fdf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fdfc:	60fb      	str	r3, [r7, #12]
 800fdfe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800fe00:	f7ff f876 	bl	800eef0 <HAL_PWREx_GetVoltageRange>
 800fe04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800fe06:	4b1e      	ldr	r3, [pc, #120]	; (800fe80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800fe08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe0a:	4a1d      	ldr	r2, [pc, #116]	; (800fe80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800fe0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fe10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800fe12:	697b      	ldr	r3, [r7, #20]
 800fe14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe18:	d10b      	bne.n	800fe32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	2b80      	cmp	r3, #128	; 0x80
 800fe1e:	d919      	bls.n	800fe54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2ba0      	cmp	r3, #160	; 0xa0
 800fe24:	d902      	bls.n	800fe2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800fe26:	2302      	movs	r3, #2
 800fe28:	613b      	str	r3, [r7, #16]
 800fe2a:	e013      	b.n	800fe54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	613b      	str	r3, [r7, #16]
 800fe30:	e010      	b.n	800fe54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	2b80      	cmp	r3, #128	; 0x80
 800fe36:	d902      	bls.n	800fe3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800fe38:	2303      	movs	r3, #3
 800fe3a:	613b      	str	r3, [r7, #16]
 800fe3c:	e00a      	b.n	800fe54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2b80      	cmp	r3, #128	; 0x80
 800fe42:	d102      	bne.n	800fe4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800fe44:	2302      	movs	r3, #2
 800fe46:	613b      	str	r3, [r7, #16]
 800fe48:	e004      	b.n	800fe54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2b70      	cmp	r3, #112	; 0x70
 800fe4e:	d101      	bne.n	800fe54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800fe50:	2301      	movs	r3, #1
 800fe52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800fe54:	4b0b      	ldr	r3, [pc, #44]	; (800fe84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	f023 0207 	bic.w	r2, r3, #7
 800fe5c:	4909      	ldr	r1, [pc, #36]	; (800fe84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800fe5e:	693b      	ldr	r3, [r7, #16]
 800fe60:	4313      	orrs	r3, r2
 800fe62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800fe64:	4b07      	ldr	r3, [pc, #28]	; (800fe84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	f003 0307 	and.w	r3, r3, #7
 800fe6c:	693a      	ldr	r2, [r7, #16]
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	d001      	beq.n	800fe76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800fe72:	2301      	movs	r3, #1
 800fe74:	e000      	b.n	800fe78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800fe76:	2300      	movs	r3, #0
}
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3718      	adds	r7, #24
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	bd80      	pop	{r7, pc}
 800fe80:	40021000 	.word	0x40021000
 800fe84:	40022000 	.word	0x40022000

0800fe88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b086      	sub	sp, #24
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800fe90:	2300      	movs	r3, #0
 800fe92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800fe94:	2300      	movs	r3, #0
 800fe96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d041      	beq.n	800ff28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fea8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800feac:	d02a      	beq.n	800ff04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800feae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800feb2:	d824      	bhi.n	800fefe <HAL_RCCEx_PeriphCLKConfig+0x76>
 800feb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800feb8:	d008      	beq.n	800fecc <HAL_RCCEx_PeriphCLKConfig+0x44>
 800feba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800febe:	d81e      	bhi.n	800fefe <HAL_RCCEx_PeriphCLKConfig+0x76>
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d00a      	beq.n	800feda <HAL_RCCEx_PeriphCLKConfig+0x52>
 800fec4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fec8:	d010      	beq.n	800feec <HAL_RCCEx_PeriphCLKConfig+0x64>
 800feca:	e018      	b.n	800fefe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800fecc:	4b86      	ldr	r3, [pc, #536]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800fece:	68db      	ldr	r3, [r3, #12]
 800fed0:	4a85      	ldr	r2, [pc, #532]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800fed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fed6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800fed8:	e015      	b.n	800ff06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	3304      	adds	r3, #4
 800fede:	2100      	movs	r1, #0
 800fee0:	4618      	mov	r0, r3
 800fee2:	f001 f895 	bl	8011010 <RCCEx_PLLSAI1_Config>
 800fee6:	4603      	mov	r3, r0
 800fee8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800feea:	e00c      	b.n	800ff06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	3320      	adds	r3, #32
 800fef0:	2100      	movs	r1, #0
 800fef2:	4618      	mov	r0, r3
 800fef4:	f001 f97e 	bl	80111f4 <RCCEx_PLLSAI2_Config>
 800fef8:	4603      	mov	r3, r0
 800fefa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800fefc:	e003      	b.n	800ff06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fefe:	2301      	movs	r3, #1
 800ff00:	74fb      	strb	r3, [r7, #19]
      break;
 800ff02:	e000      	b.n	800ff06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800ff04:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ff06:	7cfb      	ldrb	r3, [r7, #19]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d10b      	bne.n	800ff24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ff0c:	4b76      	ldr	r3, [pc, #472]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ff0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ff1a:	4973      	ldr	r1, [pc, #460]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ff1c:	4313      	orrs	r3, r2
 800ff1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ff22:	e001      	b.n	800ff28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff24:	7cfb      	ldrb	r3, [r7, #19]
 800ff26:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d041      	beq.n	800ffb8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ff3c:	d02a      	beq.n	800ff94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800ff3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ff42:	d824      	bhi.n	800ff8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800ff44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ff48:	d008      	beq.n	800ff5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800ff4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ff4e:	d81e      	bhi.n	800ff8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d00a      	beq.n	800ff6a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800ff54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ff58:	d010      	beq.n	800ff7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800ff5a:	e018      	b.n	800ff8e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800ff5c:	4b62      	ldr	r3, [pc, #392]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ff5e:	68db      	ldr	r3, [r3, #12]
 800ff60:	4a61      	ldr	r2, [pc, #388]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ff62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ff66:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ff68:	e015      	b.n	800ff96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	3304      	adds	r3, #4
 800ff6e:	2100      	movs	r1, #0
 800ff70:	4618      	mov	r0, r3
 800ff72:	f001 f84d 	bl	8011010 <RCCEx_PLLSAI1_Config>
 800ff76:	4603      	mov	r3, r0
 800ff78:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ff7a:	e00c      	b.n	800ff96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	3320      	adds	r3, #32
 800ff80:	2100      	movs	r1, #0
 800ff82:	4618      	mov	r0, r3
 800ff84:	f001 f936 	bl	80111f4 <RCCEx_PLLSAI2_Config>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800ff8c:	e003      	b.n	800ff96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ff8e:	2301      	movs	r3, #1
 800ff90:	74fb      	strb	r3, [r7, #19]
      break;
 800ff92:	e000      	b.n	800ff96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800ff94:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ff96:	7cfb      	ldrb	r3, [r7, #19]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d10b      	bne.n	800ffb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ff9c:	4b52      	ldr	r3, [pc, #328]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ff9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ffa2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffaa:	494f      	ldr	r1, [pc, #316]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ffac:	4313      	orrs	r3, r2
 800ffae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ffb2:	e001      	b.n	800ffb8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ffb4:	7cfb      	ldrb	r3, [r7, #19]
 800ffb6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	f000 80a0 	beq.w	8010106 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800ffca:	4b47      	ldr	r3, [pc, #284]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ffcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d101      	bne.n	800ffda <HAL_RCCEx_PeriphCLKConfig+0x152>
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	e000      	b.n	800ffdc <HAL_RCCEx_PeriphCLKConfig+0x154>
 800ffda:	2300      	movs	r3, #0
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d00d      	beq.n	800fffc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ffe0:	4b41      	ldr	r3, [pc, #260]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ffe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffe4:	4a40      	ldr	r2, [pc, #256]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ffe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ffea:	6593      	str	r3, [r2, #88]	; 0x58
 800ffec:	4b3e      	ldr	r3, [pc, #248]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800ffee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fff4:	60bb      	str	r3, [r7, #8]
 800fff6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800fff8:	2301      	movs	r3, #1
 800fffa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fffc:	4b3b      	ldr	r3, [pc, #236]	; (80100ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	4a3a      	ldr	r2, [pc, #232]	; (80100ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8010002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010006:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010008:	f7fa fe16 	bl	800ac38 <HAL_GetTick>
 801000c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801000e:	e009      	b.n	8010024 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010010:	f7fa fe12 	bl	800ac38 <HAL_GetTick>
 8010014:	4602      	mov	r2, r0
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	1ad3      	subs	r3, r2, r3
 801001a:	2b02      	cmp	r3, #2
 801001c:	d902      	bls.n	8010024 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 801001e:	2303      	movs	r3, #3
 8010020:	74fb      	strb	r3, [r7, #19]
        break;
 8010022:	e005      	b.n	8010030 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8010024:	4b31      	ldr	r3, [pc, #196]	; (80100ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801002c:	2b00      	cmp	r3, #0
 801002e:	d0ef      	beq.n	8010010 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8010030:	7cfb      	ldrb	r3, [r7, #19]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d15c      	bne.n	80100f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8010036:	4b2c      	ldr	r3, [pc, #176]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801003c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010040:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d01f      	beq.n	8010088 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801004e:	697a      	ldr	r2, [r7, #20]
 8010050:	429a      	cmp	r2, r3
 8010052:	d019      	beq.n	8010088 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8010054:	4b24      	ldr	r3, [pc, #144]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801005a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801005e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010060:	4b21      	ldr	r3, [pc, #132]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010066:	4a20      	ldr	r2, [pc, #128]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801006c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010070:	4b1d      	ldr	r3, [pc, #116]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010076:	4a1c      	ldr	r2, [pc, #112]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801007c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8010080:	4a19      	ldr	r2, [pc, #100]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	f003 0301 	and.w	r3, r3, #1
 801008e:	2b00      	cmp	r3, #0
 8010090:	d016      	beq.n	80100c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010092:	f7fa fdd1 	bl	800ac38 <HAL_GetTick>
 8010096:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010098:	e00b      	b.n	80100b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801009a:	f7fa fdcd 	bl	800ac38 <HAL_GetTick>
 801009e:	4602      	mov	r2, r0
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	1ad3      	subs	r3, r2, r3
 80100a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80100a8:	4293      	cmp	r3, r2
 80100aa:	d902      	bls.n	80100b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80100ac:	2303      	movs	r3, #3
 80100ae:	74fb      	strb	r3, [r7, #19]
            break;
 80100b0:	e006      	b.n	80100c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80100b2:	4b0d      	ldr	r3, [pc, #52]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80100b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80100b8:	f003 0302 	and.w	r3, r3, #2
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d0ec      	beq.n	801009a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80100c0:	7cfb      	ldrb	r3, [r7, #19]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d10c      	bne.n	80100e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80100c6:	4b08      	ldr	r3, [pc, #32]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80100c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80100cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100d6:	4904      	ldr	r1, [pc, #16]	; (80100e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80100d8:	4313      	orrs	r3, r2
 80100da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80100de:	e009      	b.n	80100f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80100e0:	7cfb      	ldrb	r3, [r7, #19]
 80100e2:	74bb      	strb	r3, [r7, #18]
 80100e4:	e006      	b.n	80100f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80100e6:	bf00      	nop
 80100e8:	40021000 	.word	0x40021000
 80100ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80100f0:	7cfb      	ldrb	r3, [r7, #19]
 80100f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80100f4:	7c7b      	ldrb	r3, [r7, #17]
 80100f6:	2b01      	cmp	r3, #1
 80100f8:	d105      	bne.n	8010106 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80100fa:	4ba6      	ldr	r3, [pc, #664]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80100fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100fe:	4aa5      	ldr	r2, [pc, #660]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010104:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	f003 0301 	and.w	r3, r3, #1
 801010e:	2b00      	cmp	r3, #0
 8010110:	d00a      	beq.n	8010128 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8010112:	4ba0      	ldr	r3, [pc, #640]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010118:	f023 0203 	bic.w	r2, r3, #3
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010120:	499c      	ldr	r1, [pc, #624]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010122:	4313      	orrs	r3, r2
 8010124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	f003 0302 	and.w	r3, r3, #2
 8010130:	2b00      	cmp	r3, #0
 8010132:	d00a      	beq.n	801014a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010134:	4b97      	ldr	r3, [pc, #604]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801013a:	f023 020c 	bic.w	r2, r3, #12
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010142:	4994      	ldr	r1, [pc, #592]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010144:	4313      	orrs	r3, r2
 8010146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	f003 0304 	and.w	r3, r3, #4
 8010152:	2b00      	cmp	r3, #0
 8010154:	d00a      	beq.n	801016c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8010156:	4b8f      	ldr	r3, [pc, #572]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801015c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010164:	498b      	ldr	r1, [pc, #556]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010166:	4313      	orrs	r3, r2
 8010168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	f003 0308 	and.w	r3, r3, #8
 8010174:	2b00      	cmp	r3, #0
 8010176:	d00a      	beq.n	801018e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8010178:	4b86      	ldr	r3, [pc, #536]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801017a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801017e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010186:	4983      	ldr	r1, [pc, #524]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010188:	4313      	orrs	r3, r2
 801018a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	f003 0310 	and.w	r3, r3, #16
 8010196:	2b00      	cmp	r3, #0
 8010198:	d00a      	beq.n	80101b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801019a:	4b7e      	ldr	r3, [pc, #504]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801019c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80101a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80101a8:	497a      	ldr	r1, [pc, #488]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80101aa:	4313      	orrs	r3, r2
 80101ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	f003 0320 	and.w	r3, r3, #32
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d00a      	beq.n	80101d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80101bc:	4b75      	ldr	r3, [pc, #468]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80101be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80101c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80101ca:	4972      	ldr	r1, [pc, #456]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80101cc:	4313      	orrs	r3, r2
 80101ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d00a      	beq.n	80101f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80101de:	4b6d      	ldr	r3, [pc, #436]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80101e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80101e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80101ec:	4969      	ldr	r1, [pc, #420]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80101ee:	4313      	orrs	r3, r2
 80101f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d00a      	beq.n	8010216 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010200:	4b64      	ldr	r3, [pc, #400]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010206:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801020e:	4961      	ldr	r1, [pc, #388]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010210:	4313      	orrs	r3, r2
 8010212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801021e:	2b00      	cmp	r3, #0
 8010220:	d00a      	beq.n	8010238 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010222:	4b5c      	ldr	r3, [pc, #368]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010228:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010230:	4958      	ldr	r1, [pc, #352]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010232:	4313      	orrs	r3, r2
 8010234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010240:	2b00      	cmp	r3, #0
 8010242:	d00a      	beq.n	801025a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8010244:	4b53      	ldr	r3, [pc, #332]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801024a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010252:	4950      	ldr	r1, [pc, #320]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010254:	4313      	orrs	r3, r2
 8010256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010262:	2b00      	cmp	r3, #0
 8010264:	d00a      	beq.n	801027c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8010266:	4b4b      	ldr	r3, [pc, #300]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801026c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010274:	4947      	ldr	r1, [pc, #284]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010276:	4313      	orrs	r3, r2
 8010278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010284:	2b00      	cmp	r3, #0
 8010286:	d00a      	beq.n	801029e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8010288:	4b42      	ldr	r3, [pc, #264]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801028a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801028e:	f023 0203 	bic.w	r2, r3, #3
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010296:	493f      	ldr	r1, [pc, #252]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010298:	4313      	orrs	r3, r2
 801029a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d028      	beq.n	80102fc <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80102aa:	4b3a      	ldr	r3, [pc, #232]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80102ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80102b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102b8:	4936      	ldr	r1, [pc, #216]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80102ba:	4313      	orrs	r3, r2
 80102bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80102c8:	d106      	bne.n	80102d8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80102ca:	4b32      	ldr	r3, [pc, #200]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80102cc:	68db      	ldr	r3, [r3, #12]
 80102ce:	4a31      	ldr	r2, [pc, #196]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80102d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80102d4:	60d3      	str	r3, [r2, #12]
 80102d6:	e011      	b.n	80102fc <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80102e0:	d10c      	bne.n	80102fc <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	3304      	adds	r3, #4
 80102e6:	2101      	movs	r1, #1
 80102e8:	4618      	mov	r0, r3
 80102ea:	f000 fe91 	bl	8011010 <RCCEx_PLLSAI1_Config>
 80102ee:	4603      	mov	r3, r0
 80102f0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80102f2:	7cfb      	ldrb	r3, [r7, #19]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d001      	beq.n	80102fc <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80102f8:	7cfb      	ldrb	r3, [r7, #19]
 80102fa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010304:	2b00      	cmp	r3, #0
 8010306:	d028      	beq.n	801035a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8010308:	4b22      	ldr	r3, [pc, #136]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801030a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801030e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010316:	491f      	ldr	r1, [pc, #124]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010318:	4313      	orrs	r3, r2
 801031a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010322:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010326:	d106      	bne.n	8010336 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010328:	4b1a      	ldr	r3, [pc, #104]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801032a:	68db      	ldr	r3, [r3, #12]
 801032c:	4a19      	ldr	r2, [pc, #100]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801032e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010332:	60d3      	str	r3, [r2, #12]
 8010334:	e011      	b.n	801035a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801033a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801033e:	d10c      	bne.n	801035a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	3304      	adds	r3, #4
 8010344:	2101      	movs	r1, #1
 8010346:	4618      	mov	r0, r3
 8010348:	f000 fe62 	bl	8011010 <RCCEx_PLLSAI1_Config>
 801034c:	4603      	mov	r3, r0
 801034e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010350:	7cfb      	ldrb	r3, [r7, #19]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d001      	beq.n	801035a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8010356:	7cfb      	ldrb	r3, [r7, #19]
 8010358:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010362:	2b00      	cmp	r3, #0
 8010364:	d02a      	beq.n	80103bc <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010366:	4b0b      	ldr	r3, [pc, #44]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801036c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010374:	4907      	ldr	r1, [pc, #28]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010376:	4313      	orrs	r3, r2
 8010378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010380:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010384:	d108      	bne.n	8010398 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010386:	4b03      	ldr	r3, [pc, #12]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010388:	68db      	ldr	r3, [r3, #12]
 801038a:	4a02      	ldr	r2, [pc, #8]	; (8010394 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801038c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010390:	60d3      	str	r3, [r2, #12]
 8010392:	e013      	b.n	80103bc <HAL_RCCEx_PeriphCLKConfig+0x534>
 8010394:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801039c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80103a0:	d10c      	bne.n	80103bc <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	3304      	adds	r3, #4
 80103a6:	2101      	movs	r1, #1
 80103a8:	4618      	mov	r0, r3
 80103aa:	f000 fe31 	bl	8011010 <RCCEx_PLLSAI1_Config>
 80103ae:	4603      	mov	r3, r0
 80103b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80103b2:	7cfb      	ldrb	r3, [r7, #19]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d001      	beq.n	80103bc <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80103b8:	7cfb      	ldrb	r3, [r7, #19]
 80103ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d02f      	beq.n	8010428 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80103c8:	4b2c      	ldr	r3, [pc, #176]	; (801047c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80103ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80103d6:	4929      	ldr	r1, [pc, #164]	; (801047c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80103d8:	4313      	orrs	r3, r2
 80103da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80103e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80103e6:	d10d      	bne.n	8010404 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	3304      	adds	r3, #4
 80103ec:	2102      	movs	r1, #2
 80103ee:	4618      	mov	r0, r3
 80103f0:	f000 fe0e 	bl	8011010 <RCCEx_PLLSAI1_Config>
 80103f4:	4603      	mov	r3, r0
 80103f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80103f8:	7cfb      	ldrb	r3, [r7, #19]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d014      	beq.n	8010428 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80103fe:	7cfb      	ldrb	r3, [r7, #19]
 8010400:	74bb      	strb	r3, [r7, #18]
 8010402:	e011      	b.n	8010428 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801040c:	d10c      	bne.n	8010428 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	3320      	adds	r3, #32
 8010412:	2102      	movs	r1, #2
 8010414:	4618      	mov	r0, r3
 8010416:	f000 feed 	bl	80111f4 <RCCEx_PLLSAI2_Config>
 801041a:	4603      	mov	r3, r0
 801041c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801041e:	7cfb      	ldrb	r3, [r7, #19]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d001      	beq.n	8010428 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8010424:	7cfb      	ldrb	r3, [r7, #19]
 8010426:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010430:	2b00      	cmp	r3, #0
 8010432:	d00b      	beq.n	801044c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010434:	4b11      	ldr	r3, [pc, #68]	; (801047c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8010436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801043a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010444:	490d      	ldr	r1, [pc, #52]	; (801047c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8010446:	4313      	orrs	r3, r2
 8010448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010454:	2b00      	cmp	r3, #0
 8010456:	d00b      	beq.n	8010470 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010458:	4b08      	ldr	r3, [pc, #32]	; (801047c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 801045a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801045e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010468:	4904      	ldr	r1, [pc, #16]	; (801047c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 801046a:	4313      	orrs	r3, r2
 801046c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8010470:	7cbb      	ldrb	r3, [r7, #18]
}
 8010472:	4618      	mov	r0, r3
 8010474:	3718      	adds	r7, #24
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}
 801047a:	bf00      	nop
 801047c:	40021000 	.word	0x40021000

08010480 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b088      	sub	sp, #32
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8010488:	2300      	movs	r3, #0
 801048a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010492:	d13e      	bne.n	8010512 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8010494:	4bb4      	ldr	r3, [pc, #720]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801049a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801049e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80104a0:	693b      	ldr	r3, [r7, #16]
 80104a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80104a6:	d028      	beq.n	80104fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80104a8:	693b      	ldr	r3, [r7, #16]
 80104aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80104ae:	f200 858c 	bhi.w	8010fca <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104b8:	d005      	beq.n	80104c6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80104ba:	693b      	ldr	r3, [r7, #16]
 80104bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80104c0:	d00e      	beq.n	80104e0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80104c2:	f000 bd82 	b.w	8010fca <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80104c6:	4ba8      	ldr	r3, [pc, #672]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80104c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80104cc:	f003 0302 	and.w	r3, r3, #2
 80104d0:	2b02      	cmp	r3, #2
 80104d2:	f040 857c 	bne.w	8010fce <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 80104d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80104da:	61fb      	str	r3, [r7, #28]
      break;
 80104dc:	f000 bd77 	b.w	8010fce <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80104e0:	4ba1      	ldr	r3, [pc, #644]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80104e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80104e6:	f003 0302 	and.w	r3, r3, #2
 80104ea:	2b02      	cmp	r3, #2
 80104ec:	f040 8571 	bne.w	8010fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 80104f0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80104f4:	61fb      	str	r3, [r7, #28]
      break;
 80104f6:	f000 bd6c 	b.w	8010fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80104fa:	4b9b      	ldr	r3, [pc, #620]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010502:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010506:	f040 8566 	bne.w	8010fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 801050a:	4b98      	ldr	r3, [pc, #608]	; (801076c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 801050c:	61fb      	str	r3, [r7, #28]
      break;
 801050e:	f000 bd62 	b.w	8010fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010512:	4b95      	ldr	r3, [pc, #596]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010514:	68db      	ldr	r3, [r3, #12]
 8010516:	f003 0303 	and.w	r3, r3, #3
 801051a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 801051c:	697b      	ldr	r3, [r7, #20]
 801051e:	2b03      	cmp	r3, #3
 8010520:	d036      	beq.n	8010590 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8010522:	697b      	ldr	r3, [r7, #20]
 8010524:	2b03      	cmp	r3, #3
 8010526:	d840      	bhi.n	80105aa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8010528:	697b      	ldr	r3, [r7, #20]
 801052a:	2b01      	cmp	r3, #1
 801052c:	d003      	beq.n	8010536 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 801052e:	697b      	ldr	r3, [r7, #20]
 8010530:	2b02      	cmp	r3, #2
 8010532:	d020      	beq.n	8010576 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8010534:	e039      	b.n	80105aa <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8010536:	4b8c      	ldr	r3, [pc, #560]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	f003 0302 	and.w	r3, r3, #2
 801053e:	2b02      	cmp	r3, #2
 8010540:	d116      	bne.n	8010570 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8010542:	4b89      	ldr	r3, [pc, #548]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	f003 0308 	and.w	r3, r3, #8
 801054a:	2b00      	cmp	r3, #0
 801054c:	d005      	beq.n	801055a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 801054e:	4b86      	ldr	r3, [pc, #536]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	091b      	lsrs	r3, r3, #4
 8010554:	f003 030f 	and.w	r3, r3, #15
 8010558:	e005      	b.n	8010566 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 801055a:	4b83      	ldr	r3, [pc, #524]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 801055c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010560:	0a1b      	lsrs	r3, r3, #8
 8010562:	f003 030f 	and.w	r3, r3, #15
 8010566:	4a82      	ldr	r2, [pc, #520]	; (8010770 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8010568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801056c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 801056e:	e01f      	b.n	80105b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8010570:	2300      	movs	r3, #0
 8010572:	61bb      	str	r3, [r7, #24]
      break;
 8010574:	e01c      	b.n	80105b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010576:	4b7c      	ldr	r3, [pc, #496]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801057e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010582:	d102      	bne.n	801058a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8010584:	4b7b      	ldr	r3, [pc, #492]	; (8010774 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8010586:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8010588:	e012      	b.n	80105b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 801058a:	2300      	movs	r3, #0
 801058c:	61bb      	str	r3, [r7, #24]
      break;
 801058e:	e00f      	b.n	80105b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010590:	4b75      	ldr	r3, [pc, #468]	; (8010768 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010598:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801059c:	d102      	bne.n	80105a4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 801059e:	4b76      	ldr	r3, [pc, #472]	; (8010778 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80105a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80105a2:	e005      	b.n	80105b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80105a4:	2300      	movs	r3, #0
 80105a6:	61bb      	str	r3, [r7, #24]
      break;
 80105a8:	e002      	b.n	80105b0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80105aa:	2300      	movs	r3, #0
 80105ac:	61bb      	str	r3, [r7, #24]
      break;
 80105ae:	bf00      	nop
    }

    switch(PeriphClk)
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80105b6:	f000 842a 	beq.w	8010e0e <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80105c0:	f200 850b 	bhi.w	8010fda <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80105ca:	f000 80df 	beq.w	801078c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80105d4:	f200 8501 	bhi.w	8010fda <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80105de:	f000 80d5 	beq.w	801078c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80105e8:	f200 84f7 	bhi.w	8010fda <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105f2:	f000 8377 	beq.w	8010ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80105fc:	f200 84ed 	bhi.w	8010fda <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010606:	f000 84c3 	beq.w	8010f90 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010610:	f200 84e3 	bhi.w	8010fda <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801061a:	f000 82e6 	beq.w	8010bea <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010624:	f200 84d9 	bhi.w	8010fda <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801062e:	f000 80ad 	beq.w	801078c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010638:	f200 84cf 	bhi.w	8010fda <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010642:	f000 809b 	beq.w	801077c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801064c:	f200 84c5 	bhi.w	8010fda <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010656:	d07f      	beq.n	8010758 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801065e:	f200 84bc 	bhi.w	8010fda <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010668:	f000 8448 	beq.w	8010efc <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010672:	f200 84b2 	bhi.w	8010fda <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801067c:	f000 83f0 	beq.w	8010e60 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010686:	f200 84a8 	bhi.w	8010fda <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010690:	f000 8391 	beq.w	8010db6 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801069a:	f200 849e 	bhi.w	8010fda <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2b80      	cmp	r3, #128	; 0x80
 80106a2:	f000 835c 	beq.w	8010d5e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2b80      	cmp	r3, #128	; 0x80
 80106aa:	f200 8496 	bhi.w	8010fda <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2b20      	cmp	r3, #32
 80106b2:	d84b      	bhi.n	801074c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	f000 848f 	beq.w	8010fda <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	3b01      	subs	r3, #1
 80106c0:	2b1f      	cmp	r3, #31
 80106c2:	f200 848a 	bhi.w	8010fda <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80106c6:	a201      	add	r2, pc, #4	; (adr r2, 80106cc <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 80106c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106cc:	080108e3 	.word	0x080108e3
 80106d0:	08010953 	.word	0x08010953
 80106d4:	08010fdb 	.word	0x08010fdb
 80106d8:	080109e7 	.word	0x080109e7
 80106dc:	08010fdb 	.word	0x08010fdb
 80106e0:	08010fdb 	.word	0x08010fdb
 80106e4:	08010fdb 	.word	0x08010fdb
 80106e8:	08010a6f 	.word	0x08010a6f
 80106ec:	08010fdb 	.word	0x08010fdb
 80106f0:	08010fdb 	.word	0x08010fdb
 80106f4:	08010fdb 	.word	0x08010fdb
 80106f8:	08010fdb 	.word	0x08010fdb
 80106fc:	08010fdb 	.word	0x08010fdb
 8010700:	08010fdb 	.word	0x08010fdb
 8010704:	08010fdb 	.word	0x08010fdb
 8010708:	08010ae7 	.word	0x08010ae7
 801070c:	08010fdb 	.word	0x08010fdb
 8010710:	08010fdb 	.word	0x08010fdb
 8010714:	08010fdb 	.word	0x08010fdb
 8010718:	08010fdb 	.word	0x08010fdb
 801071c:	08010fdb 	.word	0x08010fdb
 8010720:	08010fdb 	.word	0x08010fdb
 8010724:	08010fdb 	.word	0x08010fdb
 8010728:	08010fdb 	.word	0x08010fdb
 801072c:	08010fdb 	.word	0x08010fdb
 8010730:	08010fdb 	.word	0x08010fdb
 8010734:	08010fdb 	.word	0x08010fdb
 8010738:	08010fdb 	.word	0x08010fdb
 801073c:	08010fdb 	.word	0x08010fdb
 8010740:	08010fdb 	.word	0x08010fdb
 8010744:	08010fdb 	.word	0x08010fdb
 8010748:	08010b69 	.word	0x08010b69
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2b40      	cmp	r3, #64	; 0x40
 8010750:	f000 82d9 	beq.w	8010d06 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8010754:	f000 bc41 	b.w	8010fda <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8010758:	69b9      	ldr	r1, [r7, #24]
 801075a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801075e:	f000 fe25 	bl	80113ac <RCCEx_GetSAIxPeriphCLKFreq>
 8010762:	61f8      	str	r0, [r7, #28]
      break;
 8010764:	f000 bc3a 	b.w	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8010768:	40021000 	.word	0x40021000
 801076c:	0003d090 	.word	0x0003d090
 8010770:	08019928 	.word	0x08019928
 8010774:	00f42400 	.word	0x00f42400
 8010778:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 801077c:	69b9      	ldr	r1, [r7, #24]
 801077e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8010782:	f000 fe13 	bl	80113ac <RCCEx_GetSAIxPeriphCLKFreq>
 8010786:	61f8      	str	r0, [r7, #28]
      break;
 8010788:	f000 bc28 	b.w	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 801078c:	4ba6      	ldr	r3, [pc, #664]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 801078e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010792:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8010796:	613b      	str	r3, [r7, #16]
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 801079e:	d015      	beq.n	80107cc <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80107a6:	f200 8092 	bhi.w	80108ce <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80107aa:	693b      	ldr	r3, [r7, #16]
 80107ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80107b0:	d029      	beq.n	8010806 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 80107b2:	693b      	ldr	r3, [r7, #16]
 80107b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80107b8:	f200 8089 	bhi.w	80108ce <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80107bc:	693b      	ldr	r3, [r7, #16]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d07b      	beq.n	80108ba <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80107c8:	d04a      	beq.n	8010860 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 80107ca:	e080      	b.n	80108ce <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80107cc:	4b96      	ldr	r3, [pc, #600]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	f003 0302 	and.w	r3, r3, #2
 80107d4:	2b02      	cmp	r3, #2
 80107d6:	d17c      	bne.n	80108d2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80107d8:	4b93      	ldr	r3, [pc, #588]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	f003 0308 	and.w	r3, r3, #8
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d005      	beq.n	80107f0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80107e4:	4b90      	ldr	r3, [pc, #576]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	091b      	lsrs	r3, r3, #4
 80107ea:	f003 030f 	and.w	r3, r3, #15
 80107ee:	e005      	b.n	80107fc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80107f0:	4b8d      	ldr	r3, [pc, #564]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80107f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80107f6:	0a1b      	lsrs	r3, r3, #8
 80107f8:	f003 030f 	and.w	r3, r3, #15
 80107fc:	4a8b      	ldr	r2, [pc, #556]	; (8010a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80107fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010802:	61fb      	str	r3, [r7, #28]
          break;
 8010804:	e065      	b.n	80108d2 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8010806:	4b88      	ldr	r3, [pc, #544]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801080e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010812:	d160      	bne.n	80108d6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8010814:	4b84      	ldr	r3, [pc, #528]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010816:	68db      	ldr	r3, [r3, #12]
 8010818:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801081c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010820:	d159      	bne.n	80108d6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8010822:	4b81      	ldr	r3, [pc, #516]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010824:	68db      	ldr	r3, [r3, #12]
 8010826:	0a1b      	lsrs	r3, r3, #8
 8010828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801082c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 801082e:	69bb      	ldr	r3, [r7, #24]
 8010830:	68fa      	ldr	r2, [r7, #12]
 8010832:	fb03 f202 	mul.w	r2, r3, r2
 8010836:	4b7c      	ldr	r3, [pc, #496]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010838:	68db      	ldr	r3, [r3, #12]
 801083a:	091b      	lsrs	r3, r3, #4
 801083c:	f003 0307 	and.w	r3, r3, #7
 8010840:	3301      	adds	r3, #1
 8010842:	fbb2 f3f3 	udiv	r3, r2, r3
 8010846:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8010848:	4b77      	ldr	r3, [pc, #476]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 801084a:	68db      	ldr	r3, [r3, #12]
 801084c:	0d5b      	lsrs	r3, r3, #21
 801084e:	f003 0303 	and.w	r3, r3, #3
 8010852:	3301      	adds	r3, #1
 8010854:	005b      	lsls	r3, r3, #1
 8010856:	69ba      	ldr	r2, [r7, #24]
 8010858:	fbb2 f3f3 	udiv	r3, r2, r3
 801085c:	61fb      	str	r3, [r7, #28]
          break;
 801085e:	e03a      	b.n	80108d6 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8010860:	4b71      	ldr	r3, [pc, #452]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010868:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801086c:	d135      	bne.n	80108da <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 801086e:	4b6e      	ldr	r3, [pc, #440]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010870:	691b      	ldr	r3, [r3, #16]
 8010872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801087a:	d12e      	bne.n	80108da <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 801087c:	4b6a      	ldr	r3, [pc, #424]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 801087e:	691b      	ldr	r3, [r3, #16]
 8010880:	0a1b      	lsrs	r3, r3, #8
 8010882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010886:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8010888:	69bb      	ldr	r3, [r7, #24]
 801088a:	68fa      	ldr	r2, [r7, #12]
 801088c:	fb03 f202 	mul.w	r2, r3, r2
 8010890:	4b65      	ldr	r3, [pc, #404]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010892:	68db      	ldr	r3, [r3, #12]
 8010894:	091b      	lsrs	r3, r3, #4
 8010896:	f003 0307 	and.w	r3, r3, #7
 801089a:	3301      	adds	r3, #1
 801089c:	fbb2 f3f3 	udiv	r3, r2, r3
 80108a0:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80108a2:	4b61      	ldr	r3, [pc, #388]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80108a4:	691b      	ldr	r3, [r3, #16]
 80108a6:	0d5b      	lsrs	r3, r3, #21
 80108a8:	f003 0303 	and.w	r3, r3, #3
 80108ac:	3301      	adds	r3, #1
 80108ae:	005b      	lsls	r3, r3, #1
 80108b0:	69ba      	ldr	r2, [r7, #24]
 80108b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80108b6:	61fb      	str	r3, [r7, #28]
          break;
 80108b8:	e00f      	b.n	80108da <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80108ba:	4b5b      	ldr	r3, [pc, #364]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80108bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80108c0:	f003 0302 	and.w	r3, r3, #2
 80108c4:	2b02      	cmp	r3, #2
 80108c6:	d10a      	bne.n	80108de <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 80108c8:	4b59      	ldr	r3, [pc, #356]	; (8010a30 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 80108ca:	61fb      	str	r3, [r7, #28]
          break;
 80108cc:	e007      	b.n	80108de <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 80108ce:	bf00      	nop
 80108d0:	e384      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80108d2:	bf00      	nop
 80108d4:	e382      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80108d6:	bf00      	nop
 80108d8:	e380      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80108da:	bf00      	nop
 80108dc:	e37e      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80108de:	bf00      	nop
        break;
 80108e0:	e37c      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80108e2:	4b51      	ldr	r3, [pc, #324]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80108e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80108e8:	f003 0303 	and.w	r3, r3, #3
 80108ec:	613b      	str	r3, [r7, #16]
 80108ee:	693b      	ldr	r3, [r7, #16]
 80108f0:	2b03      	cmp	r3, #3
 80108f2:	d828      	bhi.n	8010946 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 80108f4:	a201      	add	r2, pc, #4	; (adr r2, 80108fc <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 80108f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108fa:	bf00      	nop
 80108fc:	0801090d 	.word	0x0801090d
 8010900:	08010915 	.word	0x08010915
 8010904:	0801091d 	.word	0x0801091d
 8010908:	08010931 	.word	0x08010931
          frequency = HAL_RCC_GetPCLK2Freq();
 801090c:	f7ff fa46 	bl	800fd9c <HAL_RCC_GetPCLK2Freq>
 8010910:	61f8      	str	r0, [r7, #28]
          break;
 8010912:	e01d      	b.n	8010950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 8010914:	f7ff f994 	bl	800fc40 <HAL_RCC_GetSysClockFreq>
 8010918:	61f8      	str	r0, [r7, #28]
          break;
 801091a:	e019      	b.n	8010950 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801091c:	4b42      	ldr	r3, [pc, #264]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010928:	d10f      	bne.n	801094a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 801092a:	4b42      	ldr	r3, [pc, #264]	; (8010a34 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 801092c:	61fb      	str	r3, [r7, #28]
          break;
 801092e:	e00c      	b.n	801094a <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010930:	4b3d      	ldr	r3, [pc, #244]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010936:	f003 0302 	and.w	r3, r3, #2
 801093a:	2b02      	cmp	r3, #2
 801093c:	d107      	bne.n	801094e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 801093e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010942:	61fb      	str	r3, [r7, #28]
          break;
 8010944:	e003      	b.n	801094e <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 8010946:	bf00      	nop
 8010948:	e348      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801094a:	bf00      	nop
 801094c:	e346      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801094e:	bf00      	nop
        break;
 8010950:	e344      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8010952:	4b35      	ldr	r3, [pc, #212]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010958:	f003 030c 	and.w	r3, r3, #12
 801095c:	613b      	str	r3, [r7, #16]
 801095e:	693b      	ldr	r3, [r7, #16]
 8010960:	2b0c      	cmp	r3, #12
 8010962:	d83a      	bhi.n	80109da <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 8010964:	a201      	add	r2, pc, #4	; (adr r2, 801096c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8010966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801096a:	bf00      	nop
 801096c:	080109a1 	.word	0x080109a1
 8010970:	080109db 	.word	0x080109db
 8010974:	080109db 	.word	0x080109db
 8010978:	080109db 	.word	0x080109db
 801097c:	080109a9 	.word	0x080109a9
 8010980:	080109db 	.word	0x080109db
 8010984:	080109db 	.word	0x080109db
 8010988:	080109db 	.word	0x080109db
 801098c:	080109b1 	.word	0x080109b1
 8010990:	080109db 	.word	0x080109db
 8010994:	080109db 	.word	0x080109db
 8010998:	080109db 	.word	0x080109db
 801099c:	080109c5 	.word	0x080109c5
          frequency = HAL_RCC_GetPCLK1Freq();
 80109a0:	f7ff f9e6 	bl	800fd70 <HAL_RCC_GetPCLK1Freq>
 80109a4:	61f8      	str	r0, [r7, #28]
          break;
 80109a6:	e01d      	b.n	80109e4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 80109a8:	f7ff f94a 	bl	800fc40 <HAL_RCC_GetSysClockFreq>
 80109ac:	61f8      	str	r0, [r7, #28]
          break;
 80109ae:	e019      	b.n	80109e4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80109b0:	4b1d      	ldr	r3, [pc, #116]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80109b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80109bc:	d10f      	bne.n	80109de <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 80109be:	4b1d      	ldr	r3, [pc, #116]	; (8010a34 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80109c0:	61fb      	str	r3, [r7, #28]
          break;
 80109c2:	e00c      	b.n	80109de <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80109c4:	4b18      	ldr	r3, [pc, #96]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80109c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80109ca:	f003 0302 	and.w	r3, r3, #2
 80109ce:	2b02      	cmp	r3, #2
 80109d0:	d107      	bne.n	80109e2 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 80109d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80109d6:	61fb      	str	r3, [r7, #28]
          break;
 80109d8:	e003      	b.n	80109e2 <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 80109da:	bf00      	nop
 80109dc:	e2fe      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80109de:	bf00      	nop
 80109e0:	e2fc      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80109e2:	bf00      	nop
        break;
 80109e4:	e2fa      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80109e6:	4b10      	ldr	r3, [pc, #64]	; (8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 80109e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80109f0:	613b      	str	r3, [r7, #16]
 80109f2:	693b      	ldr	r3, [r7, #16]
 80109f4:	2b30      	cmp	r3, #48	; 0x30
 80109f6:	d029      	beq.n	8010a4c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80109f8:	693b      	ldr	r3, [r7, #16]
 80109fa:	2b30      	cmp	r3, #48	; 0x30
 80109fc:	d831      	bhi.n	8010a62 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 80109fe:	693b      	ldr	r3, [r7, #16]
 8010a00:	2b20      	cmp	r3, #32
 8010a02:	d019      	beq.n	8010a38 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8010a04:	693b      	ldr	r3, [r7, #16]
 8010a06:	2b20      	cmp	r3, #32
 8010a08:	d82b      	bhi.n	8010a62 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8010a0a:	693b      	ldr	r3, [r7, #16]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d003      	beq.n	8010a18 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8010a10:	693b      	ldr	r3, [r7, #16]
 8010a12:	2b10      	cmp	r3, #16
 8010a14:	d004      	beq.n	8010a20 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 8010a16:	e024      	b.n	8010a62 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8010a18:	f7ff f9aa 	bl	800fd70 <HAL_RCC_GetPCLK1Freq>
 8010a1c:	61f8      	str	r0, [r7, #28]
          break;
 8010a1e:	e025      	b.n	8010a6c <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8010a20:	f7ff f90e 	bl	800fc40 <HAL_RCC_GetSysClockFreq>
 8010a24:	61f8      	str	r0, [r7, #28]
          break;
 8010a26:	e021      	b.n	8010a6c <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8010a28:	40021000 	.word	0x40021000
 8010a2c:	08019928 	.word	0x08019928
 8010a30:	02dc6c00 	.word	0x02dc6c00
 8010a34:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010a38:	4b8f      	ldr	r3, [pc, #572]	; (8010c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a44:	d10f      	bne.n	8010a66 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 8010a46:	4b8d      	ldr	r3, [pc, #564]	; (8010c7c <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8010a48:	61fb      	str	r3, [r7, #28]
          break;
 8010a4a:	e00c      	b.n	8010a66 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010a4c:	4b8a      	ldr	r3, [pc, #552]	; (8010c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010a52:	f003 0302 	and.w	r3, r3, #2
 8010a56:	2b02      	cmp	r3, #2
 8010a58:	d107      	bne.n	8010a6a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 8010a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010a5e:	61fb      	str	r3, [r7, #28]
          break;
 8010a60:	e003      	b.n	8010a6a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 8010a62:	bf00      	nop
 8010a64:	e2ba      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010a66:	bf00      	nop
 8010a68:	e2b8      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010a6a:	bf00      	nop
        break;
 8010a6c:	e2b6      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8010a6e:	4b82      	ldr	r3, [pc, #520]	; (8010c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010a78:	613b      	str	r3, [r7, #16]
 8010a7a:	693b      	ldr	r3, [r7, #16]
 8010a7c:	2bc0      	cmp	r3, #192	; 0xc0
 8010a7e:	d021      	beq.n	8010ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8010a80:	693b      	ldr	r3, [r7, #16]
 8010a82:	2bc0      	cmp	r3, #192	; 0xc0
 8010a84:	d829      	bhi.n	8010ada <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8010a86:	693b      	ldr	r3, [r7, #16]
 8010a88:	2b80      	cmp	r3, #128	; 0x80
 8010a8a:	d011      	beq.n	8010ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8010a8c:	693b      	ldr	r3, [r7, #16]
 8010a8e:	2b80      	cmp	r3, #128	; 0x80
 8010a90:	d823      	bhi.n	8010ada <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8010a92:	693b      	ldr	r3, [r7, #16]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d003      	beq.n	8010aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8010a98:	693b      	ldr	r3, [r7, #16]
 8010a9a:	2b40      	cmp	r3, #64	; 0x40
 8010a9c:	d004      	beq.n	8010aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 8010a9e:	e01c      	b.n	8010ada <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8010aa0:	f7ff f966 	bl	800fd70 <HAL_RCC_GetPCLK1Freq>
 8010aa4:	61f8      	str	r0, [r7, #28]
          break;
 8010aa6:	e01d      	b.n	8010ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 8010aa8:	f7ff f8ca 	bl	800fc40 <HAL_RCC_GetSysClockFreq>
 8010aac:	61f8      	str	r0, [r7, #28]
          break;
 8010aae:	e019      	b.n	8010ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010ab0:	4b71      	ldr	r3, [pc, #452]	; (8010c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010abc:	d10f      	bne.n	8010ade <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 8010abe:	4b6f      	ldr	r3, [pc, #444]	; (8010c7c <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8010ac0:	61fb      	str	r3, [r7, #28]
          break;
 8010ac2:	e00c      	b.n	8010ade <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010ac4:	4b6c      	ldr	r3, [pc, #432]	; (8010c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010aca:	f003 0302 	and.w	r3, r3, #2
 8010ace:	2b02      	cmp	r3, #2
 8010ad0:	d107      	bne.n	8010ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 8010ad2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010ad6:	61fb      	str	r3, [r7, #28]
          break;
 8010ad8:	e003      	b.n	8010ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 8010ada:	bf00      	nop
 8010adc:	e27e      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010ade:	bf00      	nop
 8010ae0:	e27c      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010ae2:	bf00      	nop
        break;
 8010ae4:	e27a      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8010ae6:	4b64      	ldr	r3, [pc, #400]	; (8010c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010af0:	613b      	str	r3, [r7, #16]
 8010af2:	693b      	ldr	r3, [r7, #16]
 8010af4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010af8:	d025      	beq.n	8010b46 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 8010afa:	693b      	ldr	r3, [r7, #16]
 8010afc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010b00:	d82c      	bhi.n	8010b5c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8010b02:	693b      	ldr	r3, [r7, #16]
 8010b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b08:	d013      	beq.n	8010b32 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8010b0a:	693b      	ldr	r3, [r7, #16]
 8010b0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b10:	d824      	bhi.n	8010b5c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d004      	beq.n	8010b22 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8010b18:	693b      	ldr	r3, [r7, #16]
 8010b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b1e:	d004      	beq.n	8010b2a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 8010b20:	e01c      	b.n	8010b5c <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8010b22:	f7ff f925 	bl	800fd70 <HAL_RCC_GetPCLK1Freq>
 8010b26:	61f8      	str	r0, [r7, #28]
          break;
 8010b28:	e01d      	b.n	8010b66 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 8010b2a:	f7ff f889 	bl	800fc40 <HAL_RCC_GetSysClockFreq>
 8010b2e:	61f8      	str	r0, [r7, #28]
          break;
 8010b30:	e019      	b.n	8010b66 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010b32:	4b51      	ldr	r3, [pc, #324]	; (8010c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010b3e:	d10f      	bne.n	8010b60 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 8010b40:	4b4e      	ldr	r3, [pc, #312]	; (8010c7c <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8010b42:	61fb      	str	r3, [r7, #28]
          break;
 8010b44:	e00c      	b.n	8010b60 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010b46:	4b4c      	ldr	r3, [pc, #304]	; (8010c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b4c:	f003 0302 	and.w	r3, r3, #2
 8010b50:	2b02      	cmp	r3, #2
 8010b52:	d107      	bne.n	8010b64 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 8010b54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010b58:	61fb      	str	r3, [r7, #28]
          break;
 8010b5a:	e003      	b.n	8010b64 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 8010b5c:	bf00      	nop
 8010b5e:	e23d      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010b60:	bf00      	nop
 8010b62:	e23b      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010b64:	bf00      	nop
        break;
 8010b66:	e239      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8010b68:	4b43      	ldr	r3, [pc, #268]	; (8010c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b6e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010b72:	613b      	str	r3, [r7, #16]
 8010b74:	693b      	ldr	r3, [r7, #16]
 8010b76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010b7a:	d025      	beq.n	8010bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8010b7c:	693b      	ldr	r3, [r7, #16]
 8010b7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010b82:	d82c      	bhi.n	8010bde <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8010b84:	693b      	ldr	r3, [r7, #16]
 8010b86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010b8a:	d013      	beq.n	8010bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010b92:	d824      	bhi.n	8010bde <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8010b94:	693b      	ldr	r3, [r7, #16]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d004      	beq.n	8010ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8010b9a:	693b      	ldr	r3, [r7, #16]
 8010b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ba0:	d004      	beq.n	8010bac <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 8010ba2:	e01c      	b.n	8010bde <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8010ba4:	f7ff f8e4 	bl	800fd70 <HAL_RCC_GetPCLK1Freq>
 8010ba8:	61f8      	str	r0, [r7, #28]
          break;
 8010baa:	e01d      	b.n	8010be8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 8010bac:	f7ff f848 	bl	800fc40 <HAL_RCC_GetSysClockFreq>
 8010bb0:	61f8      	str	r0, [r7, #28]
          break;
 8010bb2:	e019      	b.n	8010be8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010bb4:	4b30      	ldr	r3, [pc, #192]	; (8010c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010bc0:	d10f      	bne.n	8010be2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 8010bc2:	4b2e      	ldr	r3, [pc, #184]	; (8010c7c <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8010bc4:	61fb      	str	r3, [r7, #28]
          break;
 8010bc6:	e00c      	b.n	8010be2 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010bc8:	4b2b      	ldr	r3, [pc, #172]	; (8010c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010bce:	f003 0302 	and.w	r3, r3, #2
 8010bd2:	2b02      	cmp	r3, #2
 8010bd4:	d107      	bne.n	8010be6 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 8010bd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010bda:	61fb      	str	r3, [r7, #28]
          break;
 8010bdc:	e003      	b.n	8010be6 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 8010bde:	bf00      	nop
 8010be0:	e1fc      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010be2:	bf00      	nop
 8010be4:	e1fa      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010be6:	bf00      	nop
        break;
 8010be8:	e1f8      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8010bea:	4b23      	ldr	r3, [pc, #140]	; (8010c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010bf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010bf4:	613b      	str	r3, [r7, #16]
 8010bf6:	693b      	ldr	r3, [r7, #16]
 8010bf8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010bfc:	d00c      	beq.n	8010c18 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010c04:	d868      	bhi.n	8010cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 8010c06:	693b      	ldr	r3, [r7, #16]
 8010c08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010c0c:	d008      	beq.n	8010c20 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8010c0e:	693b      	ldr	r3, [r7, #16]
 8010c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010c14:	d034      	beq.n	8010c80 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 8010c16:	e05f      	b.n	8010cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 8010c18:	f7ff f812 	bl	800fc40 <HAL_RCC_GetSysClockFreq>
 8010c1c:	61f8      	str	r0, [r7, #28]
          break;
 8010c1e:	e060      	b.n	8010ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8010c20:	4b15      	ldr	r3, [pc, #84]	; (8010c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010c28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010c2c:	d156      	bne.n	8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8010c2e:	4b12      	ldr	r3, [pc, #72]	; (8010c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010c30:	691b      	ldr	r3, [r3, #16]
 8010c32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d050      	beq.n	8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8010c3a:	4b0f      	ldr	r3, [pc, #60]	; (8010c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010c3c:	691b      	ldr	r3, [r3, #16]
 8010c3e:	0a1b      	lsrs	r3, r3, #8
 8010c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c44:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8010c46:	69bb      	ldr	r3, [r7, #24]
 8010c48:	68fa      	ldr	r2, [r7, #12]
 8010c4a:	fb03 f202 	mul.w	r2, r3, r2
 8010c4e:	4b0a      	ldr	r3, [pc, #40]	; (8010c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010c50:	68db      	ldr	r3, [r3, #12]
 8010c52:	091b      	lsrs	r3, r3, #4
 8010c54:	f003 0307 	and.w	r3, r3, #7
 8010c58:	3301      	adds	r3, #1
 8010c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c5e:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8010c60:	4b05      	ldr	r3, [pc, #20]	; (8010c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8010c62:	691b      	ldr	r3, [r3, #16]
 8010c64:	0e5b      	lsrs	r3, r3, #25
 8010c66:	f003 0303 	and.w	r3, r3, #3
 8010c6a:	3301      	adds	r3, #1
 8010c6c:	005b      	lsls	r3, r3, #1
 8010c6e:	69ba      	ldr	r2, [r7, #24]
 8010c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c74:	61fb      	str	r3, [r7, #28]
          break;
 8010c76:	e031      	b.n	8010cdc <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8010c78:	40021000 	.word	0x40021000
 8010c7c:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8010c80:	4b9c      	ldr	r3, [pc, #624]	; (8010ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010c88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010c8c:	d128      	bne.n	8010ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 8010c8e:	4b99      	ldr	r3, [pc, #612]	; (8010ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010c90:	695b      	ldr	r3, [r3, #20]
 8010c92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d022      	beq.n	8010ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8010c9a:	4b96      	ldr	r3, [pc, #600]	; (8010ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010c9c:	695b      	ldr	r3, [r3, #20]
 8010c9e:	0a1b      	lsrs	r3, r3, #8
 8010ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ca4:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8010ca6:	69bb      	ldr	r3, [r7, #24]
 8010ca8:	68fa      	ldr	r2, [r7, #12]
 8010caa:	fb03 f202 	mul.w	r2, r3, r2
 8010cae:	4b91      	ldr	r3, [pc, #580]	; (8010ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010cb0:	68db      	ldr	r3, [r3, #12]
 8010cb2:	091b      	lsrs	r3, r3, #4
 8010cb4:	f003 0307 	and.w	r3, r3, #7
 8010cb8:	3301      	adds	r3, #1
 8010cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8010cbe:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8010cc0:	4b8c      	ldr	r3, [pc, #560]	; (8010ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010cc2:	695b      	ldr	r3, [r3, #20]
 8010cc4:	0e5b      	lsrs	r3, r3, #25
 8010cc6:	f003 0303 	and.w	r3, r3, #3
 8010cca:	3301      	adds	r3, #1
 8010ccc:	005b      	lsls	r3, r3, #1
 8010cce:	69ba      	ldr	r2, [r7, #24]
 8010cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8010cd4:	61fb      	str	r3, [r7, #28]
          break;
 8010cd6:	e003      	b.n	8010ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 8010cd8:	bf00      	nop
 8010cda:	e17f      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010cdc:	bf00      	nop
 8010cde:	e17d      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010ce0:	bf00      	nop
        break;
 8010ce2:	e17b      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8010ce4:	4b83      	ldr	r3, [pc, #524]	; (8010ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010cea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010cee:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d103      	bne.n	8010cfe <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 8010cf6:	f7ff f851 	bl	800fd9c <HAL_RCC_GetPCLK2Freq>
 8010cfa:	61f8      	str	r0, [r7, #28]
        break;
 8010cfc:	e16e      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 8010cfe:	f7fe ff9f 	bl	800fc40 <HAL_RCC_GetSysClockFreq>
 8010d02:	61f8      	str	r0, [r7, #28]
        break;
 8010d04:	e16a      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8010d06:	4b7b      	ldr	r3, [pc, #492]	; (8010ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010d0c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8010d10:	613b      	str	r3, [r7, #16]
 8010d12:	693b      	ldr	r3, [r7, #16]
 8010d14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010d18:	d013      	beq.n	8010d42 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010d20:	d819      	bhi.n	8010d56 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8010d22:	693b      	ldr	r3, [r7, #16]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d004      	beq.n	8010d32 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8010d28:	693b      	ldr	r3, [r7, #16]
 8010d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010d2e:	d004      	beq.n	8010d3a <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 8010d30:	e011      	b.n	8010d56 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 8010d32:	f7ff f81d 	bl	800fd70 <HAL_RCC_GetPCLK1Freq>
 8010d36:	61f8      	str	r0, [r7, #28]
          break;
 8010d38:	e010      	b.n	8010d5c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8010d3a:	f7fe ff81 	bl	800fc40 <HAL_RCC_GetSysClockFreq>
 8010d3e:	61f8      	str	r0, [r7, #28]
          break;
 8010d40:	e00c      	b.n	8010d5c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010d42:	4b6c      	ldr	r3, [pc, #432]	; (8010ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010d4e:	d104      	bne.n	8010d5a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 8010d50:	4b69      	ldr	r3, [pc, #420]	; (8010ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8010d52:	61fb      	str	r3, [r7, #28]
          break;
 8010d54:	e001      	b.n	8010d5a <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 8010d56:	bf00      	nop
 8010d58:	e140      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010d5a:	bf00      	nop
        break;
 8010d5c:	e13e      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8010d5e:	4b65      	ldr	r3, [pc, #404]	; (8010ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010d64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010d68:	613b      	str	r3, [r7, #16]
 8010d6a:	693b      	ldr	r3, [r7, #16]
 8010d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010d70:	d013      	beq.n	8010d9a <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 8010d72:	693b      	ldr	r3, [r7, #16]
 8010d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010d78:	d819      	bhi.n	8010dae <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8010d7a:	693b      	ldr	r3, [r7, #16]
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d004      	beq.n	8010d8a <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 8010d80:	693b      	ldr	r3, [r7, #16]
 8010d82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010d86:	d004      	beq.n	8010d92 <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 8010d88:	e011      	b.n	8010dae <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8010d8a:	f7fe fff1 	bl	800fd70 <HAL_RCC_GetPCLK1Freq>
 8010d8e:	61f8      	str	r0, [r7, #28]
          break;
 8010d90:	e010      	b.n	8010db4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 8010d92:	f7fe ff55 	bl	800fc40 <HAL_RCC_GetSysClockFreq>
 8010d96:	61f8      	str	r0, [r7, #28]
          break;
 8010d98:	e00c      	b.n	8010db4 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010d9a:	4b56      	ldr	r3, [pc, #344]	; (8010ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010da2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010da6:	d104      	bne.n	8010db2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 8010da8:	4b53      	ldr	r3, [pc, #332]	; (8010ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8010daa:	61fb      	str	r3, [r7, #28]
          break;
 8010dac:	e001      	b.n	8010db2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 8010dae:	bf00      	nop
 8010db0:	e114      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010db2:	bf00      	nop
        break;
 8010db4:	e112      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8010db6:	4b4f      	ldr	r3, [pc, #316]	; (8010ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010dbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010dc0:	613b      	str	r3, [r7, #16]
 8010dc2:	693b      	ldr	r3, [r7, #16]
 8010dc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010dc8:	d013      	beq.n	8010df2 <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 8010dca:	693b      	ldr	r3, [r7, #16]
 8010dcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010dd0:	d819      	bhi.n	8010e06 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8010dd2:	693b      	ldr	r3, [r7, #16]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d004      	beq.n	8010de2 <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 8010dd8:	693b      	ldr	r3, [r7, #16]
 8010dda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010dde:	d004      	beq.n	8010dea <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 8010de0:	e011      	b.n	8010e06 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 8010de2:	f7fe ffc5 	bl	800fd70 <HAL_RCC_GetPCLK1Freq>
 8010de6:	61f8      	str	r0, [r7, #28]
          break;
 8010de8:	e010      	b.n	8010e0c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 8010dea:	f7fe ff29 	bl	800fc40 <HAL_RCC_GetSysClockFreq>
 8010dee:	61f8      	str	r0, [r7, #28]
          break;
 8010df0:	e00c      	b.n	8010e0c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010df2:	4b40      	ldr	r3, [pc, #256]	; (8010ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010dfe:	d104      	bne.n	8010e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 8010e00:	4b3d      	ldr	r3, [pc, #244]	; (8010ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8010e02:	61fb      	str	r3, [r7, #28]
          break;
 8010e04:	e001      	b.n	8010e0a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 8010e06:	bf00      	nop
 8010e08:	e0e8      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010e0a:	bf00      	nop
        break;
 8010e0c:	e0e6      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8010e0e:	4b39      	ldr	r3, [pc, #228]	; (8010ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010e10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010e14:	f003 0303 	and.w	r3, r3, #3
 8010e18:	613b      	str	r3, [r7, #16]
 8010e1a:	693b      	ldr	r3, [r7, #16]
 8010e1c:	2b02      	cmp	r3, #2
 8010e1e:	d011      	beq.n	8010e44 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8010e20:	693b      	ldr	r3, [r7, #16]
 8010e22:	2b02      	cmp	r3, #2
 8010e24:	d818      	bhi.n	8010e58 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 8010e26:	693b      	ldr	r3, [r7, #16]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d003      	beq.n	8010e34 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8010e2c:	693b      	ldr	r3, [r7, #16]
 8010e2e:	2b01      	cmp	r3, #1
 8010e30:	d004      	beq.n	8010e3c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 8010e32:	e011      	b.n	8010e58 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8010e34:	f7fe ff9c 	bl	800fd70 <HAL_RCC_GetPCLK1Freq>
 8010e38:	61f8      	str	r0, [r7, #28]
          break;
 8010e3a:	e010      	b.n	8010e5e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 8010e3c:	f7fe ff00 	bl	800fc40 <HAL_RCC_GetSysClockFreq>
 8010e40:	61f8      	str	r0, [r7, #28]
          break;
 8010e42:	e00c      	b.n	8010e5e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010e44:	4b2b      	ldr	r3, [pc, #172]	; (8010ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010e50:	d104      	bne.n	8010e5c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 8010e52:	4b29      	ldr	r3, [pc, #164]	; (8010ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8010e54:	61fb      	str	r3, [r7, #28]
          break;
 8010e56:	e001      	b.n	8010e5c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 8010e58:	bf00      	nop
 8010e5a:	e0bf      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010e5c:	bf00      	nop
        break;
 8010e5e:	e0bd      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8010e60:	4b24      	ldr	r3, [pc, #144]	; (8010ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e66:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8010e6a:	613b      	str	r3, [r7, #16]
 8010e6c:	693b      	ldr	r3, [r7, #16]
 8010e6e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8010e72:	d02c      	beq.n	8010ece <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8010e74:	693b      	ldr	r3, [r7, #16]
 8010e76:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8010e7a:	d833      	bhi.n	8010ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8010e7c:	693b      	ldr	r3, [r7, #16]
 8010e7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8010e82:	d01a      	beq.n	8010eba <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8010e84:	693b      	ldr	r3, [r7, #16]
 8010e86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8010e8a:	d82b      	bhi.n	8010ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8010e8c:	693b      	ldr	r3, [r7, #16]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d004      	beq.n	8010e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010e98:	d004      	beq.n	8010ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 8010e9a:	e023      	b.n	8010ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8010e9c:	f7fe ff68 	bl	800fd70 <HAL_RCC_GetPCLK1Freq>
 8010ea0:	61f8      	str	r0, [r7, #28]
          break;
 8010ea2:	e026      	b.n	8010ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8010ea4:	4b13      	ldr	r3, [pc, #76]	; (8010ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010eaa:	f003 0302 	and.w	r3, r3, #2
 8010eae:	2b02      	cmp	r3, #2
 8010eb0:	d11a      	bne.n	8010ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 8010eb2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8010eb6:	61fb      	str	r3, [r7, #28]
          break;
 8010eb8:	e016      	b.n	8010ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010eba:	4b0e      	ldr	r3, [pc, #56]	; (8010ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ec6:	d111      	bne.n	8010eec <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8010ec8:	4b0b      	ldr	r3, [pc, #44]	; (8010ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8010eca:	61fb      	str	r3, [r7, #28]
          break;
 8010ecc:	e00e      	b.n	8010eec <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010ece:	4b09      	ldr	r3, [pc, #36]	; (8010ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8010ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ed4:	f003 0302 	and.w	r3, r3, #2
 8010ed8:	2b02      	cmp	r3, #2
 8010eda:	d109      	bne.n	8010ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 8010edc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010ee0:	61fb      	str	r3, [r7, #28]
          break;
 8010ee2:	e005      	b.n	8010ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 8010ee4:	bf00      	nop
 8010ee6:	e079      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010ee8:	bf00      	nop
 8010eea:	e077      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010eec:	bf00      	nop
 8010eee:	e075      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010ef0:	bf00      	nop
        break;
 8010ef2:	e073      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8010ef4:	40021000 	.word	0x40021000
 8010ef8:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8010efc:	4b3a      	ldr	r3, [pc, #232]	; (8010fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8010efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f02:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8010f06:	613b      	str	r3, [r7, #16]
 8010f08:	693b      	ldr	r3, [r7, #16]
 8010f0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010f0e:	d02c      	beq.n	8010f6a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 8010f10:	693b      	ldr	r3, [r7, #16]
 8010f12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010f16:	d833      	bhi.n	8010f80 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010f1e:	d01a      	beq.n	8010f56 <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 8010f20:	693b      	ldr	r3, [r7, #16]
 8010f22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010f26:	d82b      	bhi.n	8010f80 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8010f28:	693b      	ldr	r3, [r7, #16]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d004      	beq.n	8010f38 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 8010f2e:	693b      	ldr	r3, [r7, #16]
 8010f30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010f34:	d004      	beq.n	8010f40 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8010f36:	e023      	b.n	8010f80 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 8010f38:	f7fe ff1a 	bl	800fd70 <HAL_RCC_GetPCLK1Freq>
 8010f3c:	61f8      	str	r0, [r7, #28]
          break;
 8010f3e:	e026      	b.n	8010f8e <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8010f40:	4b29      	ldr	r3, [pc, #164]	; (8010fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8010f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010f46:	f003 0302 	and.w	r3, r3, #2
 8010f4a:	2b02      	cmp	r3, #2
 8010f4c:	d11a      	bne.n	8010f84 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 8010f4e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8010f52:	61fb      	str	r3, [r7, #28]
          break;
 8010f54:	e016      	b.n	8010f84 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010f56:	4b24      	ldr	r3, [pc, #144]	; (8010fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010f62:	d111      	bne.n	8010f88 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 8010f64:	4b21      	ldr	r3, [pc, #132]	; (8010fec <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 8010f66:	61fb      	str	r3, [r7, #28]
          break;
 8010f68:	e00e      	b.n	8010f88 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010f6a:	4b1f      	ldr	r3, [pc, #124]	; (8010fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8010f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010f70:	f003 0302 	and.w	r3, r3, #2
 8010f74:	2b02      	cmp	r3, #2
 8010f76:	d109      	bne.n	8010f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 8010f78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f7c:	61fb      	str	r3, [r7, #28]
          break;
 8010f7e:	e005      	b.n	8010f8c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8010f80:	bf00      	nop
 8010f82:	e02b      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010f84:	bf00      	nop
 8010f86:	e029      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010f88:	bf00      	nop
 8010f8a:	e027      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010f8c:	bf00      	nop
        break;
 8010f8e:	e025      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8010f90:	4b15      	ldr	r3, [pc, #84]	; (8010fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8010f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010f9a:	613b      	str	r3, [r7, #16]
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d004      	beq.n	8010fac <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 8010fa2:	693b      	ldr	r3, [r7, #16]
 8010fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010fa8:	d004      	beq.n	8010fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 8010faa:	e00d      	b.n	8010fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 8010fac:	f7fe fee0 	bl	800fd70 <HAL_RCC_GetPCLK1Freq>
 8010fb0:	61f8      	str	r0, [r7, #28]
          break;
 8010fb2:	e009      	b.n	8010fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010fb4:	4b0c      	ldr	r3, [pc, #48]	; (8010fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010fc0:	d101      	bne.n	8010fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 8010fc2:	4b0a      	ldr	r3, [pc, #40]	; (8010fec <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 8010fc4:	61fb      	str	r3, [r7, #28]
          break;
 8010fc6:	bf00      	nop
        break;
 8010fc8:	e008      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8010fca:	bf00      	nop
 8010fcc:	e006      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8010fce:	bf00      	nop
 8010fd0:	e004      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8010fd2:	bf00      	nop
 8010fd4:	e002      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8010fd6:	bf00      	nop
 8010fd8:	e000      	b.n	8010fdc <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8010fda:	bf00      	nop
    }
  }

  return(frequency);
 8010fdc:	69fb      	ldr	r3, [r7, #28]
}
 8010fde:	4618      	mov	r0, r3
 8010fe0:	3720      	adds	r7, #32
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	bd80      	pop	{r7, pc}
 8010fe6:	bf00      	nop
 8010fe8:	40021000 	.word	0x40021000
 8010fec:	00f42400 	.word	0x00f42400

08010ff0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8010ff0:	b480      	push	{r7}
 8010ff2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8010ff4:	4b05      	ldr	r3, [pc, #20]	; (801100c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	4a04      	ldr	r2, [pc, #16]	; (801100c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8010ffa:	f043 0304 	orr.w	r3, r3, #4
 8010ffe:	6013      	str	r3, [r2, #0]
}
 8011000:	bf00      	nop
 8011002:	46bd      	mov	sp, r7
 8011004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011008:	4770      	bx	lr
 801100a:	bf00      	nop
 801100c:	40021000 	.word	0x40021000

08011010 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b084      	sub	sp, #16
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
 8011018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801101a:	2300      	movs	r3, #0
 801101c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801101e:	4b74      	ldr	r3, [pc, #464]	; (80111f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011020:	68db      	ldr	r3, [r3, #12]
 8011022:	f003 0303 	and.w	r3, r3, #3
 8011026:	2b00      	cmp	r3, #0
 8011028:	d018      	beq.n	801105c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 801102a:	4b71      	ldr	r3, [pc, #452]	; (80111f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 801102c:	68db      	ldr	r3, [r3, #12]
 801102e:	f003 0203 	and.w	r2, r3, #3
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	429a      	cmp	r2, r3
 8011038:	d10d      	bne.n	8011056 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
       ||
 801103e:	2b00      	cmp	r3, #0
 8011040:	d009      	beq.n	8011056 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8011042:	4b6b      	ldr	r3, [pc, #428]	; (80111f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011044:	68db      	ldr	r3, [r3, #12]
 8011046:	091b      	lsrs	r3, r3, #4
 8011048:	f003 0307 	and.w	r3, r3, #7
 801104c:	1c5a      	adds	r2, r3, #1
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	685b      	ldr	r3, [r3, #4]
       ||
 8011052:	429a      	cmp	r2, r3
 8011054:	d047      	beq.n	80110e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8011056:	2301      	movs	r3, #1
 8011058:	73fb      	strb	r3, [r7, #15]
 801105a:	e044      	b.n	80110e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	2b03      	cmp	r3, #3
 8011062:	d018      	beq.n	8011096 <RCCEx_PLLSAI1_Config+0x86>
 8011064:	2b03      	cmp	r3, #3
 8011066:	d825      	bhi.n	80110b4 <RCCEx_PLLSAI1_Config+0xa4>
 8011068:	2b01      	cmp	r3, #1
 801106a:	d002      	beq.n	8011072 <RCCEx_PLLSAI1_Config+0x62>
 801106c:	2b02      	cmp	r3, #2
 801106e:	d009      	beq.n	8011084 <RCCEx_PLLSAI1_Config+0x74>
 8011070:	e020      	b.n	80110b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8011072:	4b5f      	ldr	r3, [pc, #380]	; (80111f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	f003 0302 	and.w	r3, r3, #2
 801107a:	2b00      	cmp	r3, #0
 801107c:	d11d      	bne.n	80110ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 801107e:	2301      	movs	r3, #1
 8011080:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011082:	e01a      	b.n	80110ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8011084:	4b5a      	ldr	r3, [pc, #360]	; (80111f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801108c:	2b00      	cmp	r3, #0
 801108e:	d116      	bne.n	80110be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8011090:	2301      	movs	r3, #1
 8011092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011094:	e013      	b.n	80110be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8011096:	4b56      	ldr	r3, [pc, #344]	; (80111f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d10f      	bne.n	80110c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80110a2:	4b53      	ldr	r3, [pc, #332]	; (80111f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d109      	bne.n	80110c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80110ae:	2301      	movs	r3, #1
 80110b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80110b2:	e006      	b.n	80110c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80110b4:	2301      	movs	r3, #1
 80110b6:	73fb      	strb	r3, [r7, #15]
      break;
 80110b8:	e004      	b.n	80110c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80110ba:	bf00      	nop
 80110bc:	e002      	b.n	80110c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80110be:	bf00      	nop
 80110c0:	e000      	b.n	80110c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80110c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80110c4:	7bfb      	ldrb	r3, [r7, #15]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d10d      	bne.n	80110e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80110ca:	4b49      	ldr	r3, [pc, #292]	; (80111f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80110cc:	68db      	ldr	r3, [r3, #12]
 80110ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	6819      	ldr	r1, [r3, #0]
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	685b      	ldr	r3, [r3, #4]
 80110da:	3b01      	subs	r3, #1
 80110dc:	011b      	lsls	r3, r3, #4
 80110de:	430b      	orrs	r3, r1
 80110e0:	4943      	ldr	r1, [pc, #268]	; (80111f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80110e2:	4313      	orrs	r3, r2
 80110e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80110e6:	7bfb      	ldrb	r3, [r7, #15]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d17c      	bne.n	80111e6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80110ec:	4b40      	ldr	r3, [pc, #256]	; (80111f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	4a3f      	ldr	r2, [pc, #252]	; (80111f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80110f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80110f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80110f8:	f7f9 fd9e 	bl	800ac38 <HAL_GetTick>
 80110fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80110fe:	e009      	b.n	8011114 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8011100:	f7f9 fd9a 	bl	800ac38 <HAL_GetTick>
 8011104:	4602      	mov	r2, r0
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	1ad3      	subs	r3, r2, r3
 801110a:	2b02      	cmp	r3, #2
 801110c:	d902      	bls.n	8011114 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 801110e:	2303      	movs	r3, #3
 8011110:	73fb      	strb	r3, [r7, #15]
        break;
 8011112:	e005      	b.n	8011120 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8011114:	4b36      	ldr	r3, [pc, #216]	; (80111f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801111c:	2b00      	cmp	r3, #0
 801111e:	d1ef      	bne.n	8011100 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8011120:	7bfb      	ldrb	r3, [r7, #15]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d15f      	bne.n	80111e6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8011126:	683b      	ldr	r3, [r7, #0]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d110      	bne.n	801114e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801112c:	4b30      	ldr	r3, [pc, #192]	; (80111f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 801112e:	691b      	ldr	r3, [r3, #16]
 8011130:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8011134:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8011138:	687a      	ldr	r2, [r7, #4]
 801113a:	6892      	ldr	r2, [r2, #8]
 801113c:	0211      	lsls	r1, r2, #8
 801113e:	687a      	ldr	r2, [r7, #4]
 8011140:	68d2      	ldr	r2, [r2, #12]
 8011142:	06d2      	lsls	r2, r2, #27
 8011144:	430a      	orrs	r2, r1
 8011146:	492a      	ldr	r1, [pc, #168]	; (80111f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011148:	4313      	orrs	r3, r2
 801114a:	610b      	str	r3, [r1, #16]
 801114c:	e027      	b.n	801119e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	2b01      	cmp	r3, #1
 8011152:	d112      	bne.n	801117a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8011154:	4b26      	ldr	r3, [pc, #152]	; (80111f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011156:	691b      	ldr	r3, [r3, #16]
 8011158:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 801115c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8011160:	687a      	ldr	r2, [r7, #4]
 8011162:	6892      	ldr	r2, [r2, #8]
 8011164:	0211      	lsls	r1, r2, #8
 8011166:	687a      	ldr	r2, [r7, #4]
 8011168:	6912      	ldr	r2, [r2, #16]
 801116a:	0852      	lsrs	r2, r2, #1
 801116c:	3a01      	subs	r2, #1
 801116e:	0552      	lsls	r2, r2, #21
 8011170:	430a      	orrs	r2, r1
 8011172:	491f      	ldr	r1, [pc, #124]	; (80111f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8011174:	4313      	orrs	r3, r2
 8011176:	610b      	str	r3, [r1, #16]
 8011178:	e011      	b.n	801119e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801117a:	4b1d      	ldr	r3, [pc, #116]	; (80111f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 801117c:	691b      	ldr	r3, [r3, #16]
 801117e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8011182:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8011186:	687a      	ldr	r2, [r7, #4]
 8011188:	6892      	ldr	r2, [r2, #8]
 801118a:	0211      	lsls	r1, r2, #8
 801118c:	687a      	ldr	r2, [r7, #4]
 801118e:	6952      	ldr	r2, [r2, #20]
 8011190:	0852      	lsrs	r2, r2, #1
 8011192:	3a01      	subs	r2, #1
 8011194:	0652      	lsls	r2, r2, #25
 8011196:	430a      	orrs	r2, r1
 8011198:	4915      	ldr	r1, [pc, #84]	; (80111f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 801119a:	4313      	orrs	r3, r2
 801119c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 801119e:	4b14      	ldr	r3, [pc, #80]	; (80111f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80111a0:	681b      	ldr	r3, [r3, #0]
 80111a2:	4a13      	ldr	r2, [pc, #76]	; (80111f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80111a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80111a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80111aa:	f7f9 fd45 	bl	800ac38 <HAL_GetTick>
 80111ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80111b0:	e009      	b.n	80111c6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80111b2:	f7f9 fd41 	bl	800ac38 <HAL_GetTick>
 80111b6:	4602      	mov	r2, r0
 80111b8:	68bb      	ldr	r3, [r7, #8]
 80111ba:	1ad3      	subs	r3, r2, r3
 80111bc:	2b02      	cmp	r3, #2
 80111be:	d902      	bls.n	80111c6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80111c0:	2303      	movs	r3, #3
 80111c2:	73fb      	strb	r3, [r7, #15]
          break;
 80111c4:	e005      	b.n	80111d2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80111c6:	4b0a      	ldr	r3, [pc, #40]	; (80111f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d0ef      	beq.n	80111b2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80111d2:	7bfb      	ldrb	r3, [r7, #15]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d106      	bne.n	80111e6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80111d8:	4b05      	ldr	r3, [pc, #20]	; (80111f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80111da:	691a      	ldr	r2, [r3, #16]
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	699b      	ldr	r3, [r3, #24]
 80111e0:	4903      	ldr	r1, [pc, #12]	; (80111f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80111e2:	4313      	orrs	r3, r2
 80111e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80111e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80111e8:	4618      	mov	r0, r3
 80111ea:	3710      	adds	r7, #16
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}
 80111f0:	40021000 	.word	0x40021000

080111f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b084      	sub	sp, #16
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
 80111fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80111fe:	2300      	movs	r3, #0
 8011200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8011202:	4b69      	ldr	r3, [pc, #420]	; (80113a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011204:	68db      	ldr	r3, [r3, #12]
 8011206:	f003 0303 	and.w	r3, r3, #3
 801120a:	2b00      	cmp	r3, #0
 801120c:	d018      	beq.n	8011240 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 801120e:	4b66      	ldr	r3, [pc, #408]	; (80113a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011210:	68db      	ldr	r3, [r3, #12]
 8011212:	f003 0203 	and.w	r2, r3, #3
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	429a      	cmp	r2, r3
 801121c:	d10d      	bne.n	801123a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	681b      	ldr	r3, [r3, #0]
       ||
 8011222:	2b00      	cmp	r3, #0
 8011224:	d009      	beq.n	801123a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8011226:	4b60      	ldr	r3, [pc, #384]	; (80113a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011228:	68db      	ldr	r3, [r3, #12]
 801122a:	091b      	lsrs	r3, r3, #4
 801122c:	f003 0307 	and.w	r3, r3, #7
 8011230:	1c5a      	adds	r2, r3, #1
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	685b      	ldr	r3, [r3, #4]
       ||
 8011236:	429a      	cmp	r2, r3
 8011238:	d047      	beq.n	80112ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 801123a:	2301      	movs	r3, #1
 801123c:	73fb      	strb	r3, [r7, #15]
 801123e:	e044      	b.n	80112ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	2b03      	cmp	r3, #3
 8011246:	d018      	beq.n	801127a <RCCEx_PLLSAI2_Config+0x86>
 8011248:	2b03      	cmp	r3, #3
 801124a:	d825      	bhi.n	8011298 <RCCEx_PLLSAI2_Config+0xa4>
 801124c:	2b01      	cmp	r3, #1
 801124e:	d002      	beq.n	8011256 <RCCEx_PLLSAI2_Config+0x62>
 8011250:	2b02      	cmp	r3, #2
 8011252:	d009      	beq.n	8011268 <RCCEx_PLLSAI2_Config+0x74>
 8011254:	e020      	b.n	8011298 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8011256:	4b54      	ldr	r3, [pc, #336]	; (80113a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	f003 0302 	and.w	r3, r3, #2
 801125e:	2b00      	cmp	r3, #0
 8011260:	d11d      	bne.n	801129e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8011262:	2301      	movs	r3, #1
 8011264:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011266:	e01a      	b.n	801129e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8011268:	4b4f      	ldr	r3, [pc, #316]	; (80113a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011270:	2b00      	cmp	r3, #0
 8011272:	d116      	bne.n	80112a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8011274:	2301      	movs	r3, #1
 8011276:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8011278:	e013      	b.n	80112a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801127a:	4b4b      	ldr	r3, [pc, #300]	; (80113a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011282:	2b00      	cmp	r3, #0
 8011284:	d10f      	bne.n	80112a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8011286:	4b48      	ldr	r3, [pc, #288]	; (80113a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801128e:	2b00      	cmp	r3, #0
 8011290:	d109      	bne.n	80112a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8011292:	2301      	movs	r3, #1
 8011294:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011296:	e006      	b.n	80112a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8011298:	2301      	movs	r3, #1
 801129a:	73fb      	strb	r3, [r7, #15]
      break;
 801129c:	e004      	b.n	80112a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 801129e:	bf00      	nop
 80112a0:	e002      	b.n	80112a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80112a2:	bf00      	nop
 80112a4:	e000      	b.n	80112a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80112a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80112a8:	7bfb      	ldrb	r3, [r7, #15]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d10d      	bne.n	80112ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80112ae:	4b3e      	ldr	r3, [pc, #248]	; (80113a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80112b0:	68db      	ldr	r3, [r3, #12]
 80112b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	6819      	ldr	r1, [r3, #0]
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	685b      	ldr	r3, [r3, #4]
 80112be:	3b01      	subs	r3, #1
 80112c0:	011b      	lsls	r3, r3, #4
 80112c2:	430b      	orrs	r3, r1
 80112c4:	4938      	ldr	r1, [pc, #224]	; (80113a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80112c6:	4313      	orrs	r3, r2
 80112c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80112ca:	7bfb      	ldrb	r3, [r7, #15]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d166      	bne.n	801139e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80112d0:	4b35      	ldr	r3, [pc, #212]	; (80113a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	4a34      	ldr	r2, [pc, #208]	; (80113a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80112d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80112da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80112dc:	f7f9 fcac 	bl	800ac38 <HAL_GetTick>
 80112e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80112e2:	e009      	b.n	80112f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80112e4:	f7f9 fca8 	bl	800ac38 <HAL_GetTick>
 80112e8:	4602      	mov	r2, r0
 80112ea:	68bb      	ldr	r3, [r7, #8]
 80112ec:	1ad3      	subs	r3, r2, r3
 80112ee:	2b02      	cmp	r3, #2
 80112f0:	d902      	bls.n	80112f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80112f2:	2303      	movs	r3, #3
 80112f4:	73fb      	strb	r3, [r7, #15]
        break;
 80112f6:	e005      	b.n	8011304 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80112f8:	4b2b      	ldr	r3, [pc, #172]	; (80113a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011300:	2b00      	cmp	r3, #0
 8011302:	d1ef      	bne.n	80112e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8011304:	7bfb      	ldrb	r3, [r7, #15]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d149      	bne.n	801139e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d110      	bne.n	8011332 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8011310:	4b25      	ldr	r3, [pc, #148]	; (80113a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011312:	695b      	ldr	r3, [r3, #20]
 8011314:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8011318:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801131c:	687a      	ldr	r2, [r7, #4]
 801131e:	6892      	ldr	r2, [r2, #8]
 8011320:	0211      	lsls	r1, r2, #8
 8011322:	687a      	ldr	r2, [r7, #4]
 8011324:	68d2      	ldr	r2, [r2, #12]
 8011326:	06d2      	lsls	r2, r2, #27
 8011328:	430a      	orrs	r2, r1
 801132a:	491f      	ldr	r1, [pc, #124]	; (80113a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 801132c:	4313      	orrs	r3, r2
 801132e:	614b      	str	r3, [r1, #20]
 8011330:	e011      	b.n	8011356 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8011332:	4b1d      	ldr	r3, [pc, #116]	; (80113a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011334:	695b      	ldr	r3, [r3, #20]
 8011336:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 801133a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801133e:	687a      	ldr	r2, [r7, #4]
 8011340:	6892      	ldr	r2, [r2, #8]
 8011342:	0211      	lsls	r1, r2, #8
 8011344:	687a      	ldr	r2, [r7, #4]
 8011346:	6912      	ldr	r2, [r2, #16]
 8011348:	0852      	lsrs	r2, r2, #1
 801134a:	3a01      	subs	r2, #1
 801134c:	0652      	lsls	r2, r2, #25
 801134e:	430a      	orrs	r2, r1
 8011350:	4915      	ldr	r1, [pc, #84]	; (80113a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011352:	4313      	orrs	r3, r2
 8011354:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8011356:	4b14      	ldr	r3, [pc, #80]	; (80113a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	4a13      	ldr	r2, [pc, #76]	; (80113a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 801135c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011360:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011362:	f7f9 fc69 	bl	800ac38 <HAL_GetTick>
 8011366:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8011368:	e009      	b.n	801137e <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 801136a:	f7f9 fc65 	bl	800ac38 <HAL_GetTick>
 801136e:	4602      	mov	r2, r0
 8011370:	68bb      	ldr	r3, [r7, #8]
 8011372:	1ad3      	subs	r3, r2, r3
 8011374:	2b02      	cmp	r3, #2
 8011376:	d902      	bls.n	801137e <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8011378:	2303      	movs	r3, #3
 801137a:	73fb      	strb	r3, [r7, #15]
          break;
 801137c:	e005      	b.n	801138a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 801137e:	4b0a      	ldr	r3, [pc, #40]	; (80113a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011386:	2b00      	cmp	r3, #0
 8011388:	d0ef      	beq.n	801136a <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 801138a:	7bfb      	ldrb	r3, [r7, #15]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d106      	bne.n	801139e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8011390:	4b05      	ldr	r3, [pc, #20]	; (80113a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011392:	695a      	ldr	r2, [r3, #20]
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	695b      	ldr	r3, [r3, #20]
 8011398:	4903      	ldr	r1, [pc, #12]	; (80113a8 <RCCEx_PLLSAI2_Config+0x1b4>)
 801139a:	4313      	orrs	r3, r2
 801139c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 801139e:	7bfb      	ldrb	r3, [r7, #15]
}
 80113a0:	4618      	mov	r0, r3
 80113a2:	3710      	adds	r7, #16
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}
 80113a8:	40021000 	.word	0x40021000

080113ac <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80113ac:	b480      	push	{r7}
 80113ae:	b089      	sub	sp, #36	; 0x24
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80113b6:	2300      	movs	r3, #0
 80113b8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80113ba:	2300      	movs	r3, #0
 80113bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80113be:	2300      	movs	r3, #0
 80113c0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80113c8:	d10c      	bne.n	80113e4 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80113ca:	4b77      	ldr	r3, [pc, #476]	; (80115a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80113cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80113d0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80113d4:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80113d6:	69bb      	ldr	r3, [r7, #24]
 80113d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80113dc:	d112      	bne.n	8011404 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80113de:	4b73      	ldr	r3, [pc, #460]	; (80115ac <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 80113e0:	61fb      	str	r3, [r7, #28]
 80113e2:	e00f      	b.n	8011404 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80113ea:	d10b      	bne.n	8011404 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80113ec:	4b6e      	ldr	r3, [pc, #440]	; (80115a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80113ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80113f2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80113f6:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80113f8:	69bb      	ldr	r3, [r7, #24]
 80113fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80113fe:	d101      	bne.n	8011404 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8011400:	4b6a      	ldr	r3, [pc, #424]	; (80115ac <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8011402:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8011404:	69fb      	ldr	r3, [r7, #28]
 8011406:	2b00      	cmp	r3, #0
 8011408:	f040 80c6 	bne.w	8011598 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8011410:	69bb      	ldr	r3, [r7, #24]
 8011412:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011416:	d003      	beq.n	8011420 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8011418:	69bb      	ldr	r3, [r7, #24]
 801141a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801141e:	d13b      	bne.n	8011498 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8011420:	4b61      	ldr	r3, [pc, #388]	; (80115a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011428:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801142c:	f040 80b3 	bne.w	8011596 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 8011430:	4b5d      	ldr	r3, [pc, #372]	; (80115a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011432:	68db      	ldr	r3, [r3, #12]
 8011434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011438:	2b00      	cmp	r3, #0
 801143a:	f000 80ac 	beq.w	8011596 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 801143e:	4b5a      	ldr	r3, [pc, #360]	; (80115a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011440:	68db      	ldr	r3, [r3, #12]
 8011442:	091b      	lsrs	r3, r3, #4
 8011444:	f003 0307 	and.w	r3, r3, #7
 8011448:	3301      	adds	r3, #1
 801144a:	693a      	ldr	r2, [r7, #16]
 801144c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011450:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8011452:	4b55      	ldr	r3, [pc, #340]	; (80115a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011454:	68db      	ldr	r3, [r3, #12]
 8011456:	0a1b      	lsrs	r3, r3, #8
 8011458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801145c:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 801145e:	4b52      	ldr	r3, [pc, #328]	; (80115a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011460:	68db      	ldr	r3, [r3, #12]
 8011462:	0edb      	lsrs	r3, r3, #27
 8011464:	f003 031f 	and.w	r3, r3, #31
 8011468:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 801146a:	697b      	ldr	r3, [r7, #20]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d10a      	bne.n	8011486 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8011470:	4b4d      	ldr	r3, [pc, #308]	; (80115a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011472:	68db      	ldr	r3, [r3, #12]
 8011474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011478:	2b00      	cmp	r3, #0
 801147a:	d002      	beq.n	8011482 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 801147c:	2311      	movs	r3, #17
 801147e:	617b      	str	r3, [r7, #20]
 8011480:	e001      	b.n	8011486 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 8011482:	2307      	movs	r3, #7
 8011484:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8011486:	693b      	ldr	r3, [r7, #16]
 8011488:	68fa      	ldr	r2, [r7, #12]
 801148a:	fb03 f202 	mul.w	r2, r3, r2
 801148e:	697b      	ldr	r3, [r7, #20]
 8011490:	fbb2 f3f3 	udiv	r3, r2, r3
 8011494:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8011496:	e07e      	b.n	8011596 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8011498:	69bb      	ldr	r3, [r7, #24]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d139      	bne.n	8011512 <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 801149e:	4b42      	ldr	r3, [pc, #264]	; (80115a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80114a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80114aa:	d175      	bne.n	8011598 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 80114ac:	4b3e      	ldr	r3, [pc, #248]	; (80115a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80114ae:	691b      	ldr	r3, [r3, #16]
 80114b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d06f      	beq.n	8011598 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80114b8:	4b3b      	ldr	r3, [pc, #236]	; (80115a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80114ba:	68db      	ldr	r3, [r3, #12]
 80114bc:	091b      	lsrs	r3, r3, #4
 80114be:	f003 0307 	and.w	r3, r3, #7
 80114c2:	3301      	adds	r3, #1
 80114c4:	693a      	ldr	r2, [r7, #16]
 80114c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80114ca:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80114cc:	4b36      	ldr	r3, [pc, #216]	; (80115a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80114ce:	691b      	ldr	r3, [r3, #16]
 80114d0:	0a1b      	lsrs	r3, r3, #8
 80114d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80114d6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80114d8:	4b33      	ldr	r3, [pc, #204]	; (80115a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80114da:	691b      	ldr	r3, [r3, #16]
 80114dc:	0edb      	lsrs	r3, r3, #27
 80114de:	f003 031f 	and.w	r3, r3, #31
 80114e2:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80114e4:	697b      	ldr	r3, [r7, #20]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d10a      	bne.n	8011500 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80114ea:	4b2f      	ldr	r3, [pc, #188]	; (80115a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80114ec:	691b      	ldr	r3, [r3, #16]
 80114ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d002      	beq.n	80114fc <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 80114f6:	2311      	movs	r3, #17
 80114f8:	617b      	str	r3, [r7, #20]
 80114fa:	e001      	b.n	8011500 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 80114fc:	2307      	movs	r3, #7
 80114fe:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8011500:	693b      	ldr	r3, [r7, #16]
 8011502:	68fa      	ldr	r2, [r7, #12]
 8011504:	fb03 f202 	mul.w	r2, r3, r2
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	fbb2 f3f3 	udiv	r3, r2, r3
 801150e:	61fb      	str	r3, [r7, #28]
 8011510:	e042      	b.n	8011598 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8011512:	69bb      	ldr	r3, [r7, #24]
 8011514:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011518:	d003      	beq.n	8011522 <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 801151a:	69bb      	ldr	r3, [r7, #24]
 801151c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011520:	d13a      	bne.n	8011598 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8011522:	4b21      	ldr	r3, [pc, #132]	; (80115a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801152a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801152e:	d133      	bne.n	8011598 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8011530:	4b1d      	ldr	r3, [pc, #116]	; (80115a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011532:	695b      	ldr	r3, [r3, #20]
 8011534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011538:	2b00      	cmp	r3, #0
 801153a:	d02d      	beq.n	8011598 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 801153c:	4b1a      	ldr	r3, [pc, #104]	; (80115a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 801153e:	68db      	ldr	r3, [r3, #12]
 8011540:	091b      	lsrs	r3, r3, #4
 8011542:	f003 0307 	and.w	r3, r3, #7
 8011546:	3301      	adds	r3, #1
 8011548:	693a      	ldr	r2, [r7, #16]
 801154a:	fbb2 f3f3 	udiv	r3, r2, r3
 801154e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8011550:	4b15      	ldr	r3, [pc, #84]	; (80115a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011552:	695b      	ldr	r3, [r3, #20]
 8011554:	0a1b      	lsrs	r3, r3, #8
 8011556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801155a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 801155c:	4b12      	ldr	r3, [pc, #72]	; (80115a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 801155e:	695b      	ldr	r3, [r3, #20]
 8011560:	0edb      	lsrs	r3, r3, #27
 8011562:	f003 031f 	and.w	r3, r3, #31
 8011566:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8011568:	697b      	ldr	r3, [r7, #20]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d10a      	bne.n	8011584 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 801156e:	4b0e      	ldr	r3, [pc, #56]	; (80115a8 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011570:	695b      	ldr	r3, [r3, #20]
 8011572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011576:	2b00      	cmp	r3, #0
 8011578:	d002      	beq.n	8011580 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 801157a:	2311      	movs	r3, #17
 801157c:	617b      	str	r3, [r7, #20]
 801157e:	e001      	b.n	8011584 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8011580:	2307      	movs	r3, #7
 8011582:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8011584:	693b      	ldr	r3, [r7, #16]
 8011586:	68fa      	ldr	r2, [r7, #12]
 8011588:	fb03 f202 	mul.w	r2, r3, r2
 801158c:	697b      	ldr	r3, [r7, #20]
 801158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011592:	61fb      	str	r3, [r7, #28]
 8011594:	e000      	b.n	8011598 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8011596:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8011598:	69fb      	ldr	r3, [r7, #28]
}
 801159a:	4618      	mov	r0, r3
 801159c:	3724      	adds	r7, #36	; 0x24
 801159e:	46bd      	mov	sp, r7
 80115a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a4:	4770      	bx	lr
 80115a6:	bf00      	nop
 80115a8:	40021000 	.word	0x40021000
 80115ac:	001fff68 	.word	0x001fff68

080115b0 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b088      	sub	sp, #32
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d101      	bne.n	80115c2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80115be:	2301      	movs	r3, #1
 80115c0:	e155      	b.n	801186e <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80115c8:	b2db      	uxtb	r3, r3
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d106      	bne.n	80115dc <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	2200      	movs	r2, #0
 80115d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	f7f0 fbe0 	bl	8001d9c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80115dc:	6878      	ldr	r0, [r7, #4]
 80115de:	f000 f959 	bl	8011894 <SAI_Disable>
 80115e2:	4603      	mov	r3, r0
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d001      	beq.n	80115ec <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 80115e8:	2301      	movs	r3, #1
 80115ea:	e140      	b.n	801186e <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2202      	movs	r2, #2
 80115f0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	68db      	ldr	r3, [r3, #12]
 80115f8:	2b02      	cmp	r3, #2
 80115fa:	d00c      	beq.n	8011616 <HAL_SAI_Init+0x66>
 80115fc:	2b02      	cmp	r3, #2
 80115fe:	d80d      	bhi.n	801161c <HAL_SAI_Init+0x6c>
 8011600:	2b00      	cmp	r3, #0
 8011602:	d002      	beq.n	801160a <HAL_SAI_Init+0x5a>
 8011604:	2b01      	cmp	r3, #1
 8011606:	d003      	beq.n	8011610 <HAL_SAI_Init+0x60>
 8011608:	e008      	b.n	801161c <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 801160a:	2300      	movs	r3, #0
 801160c:	61fb      	str	r3, [r7, #28]
      break;
 801160e:	e008      	b.n	8011622 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8011610:	2310      	movs	r3, #16
 8011612:	61fb      	str	r3, [r7, #28]
      break;
 8011614:	e005      	b.n	8011622 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8011616:	2320      	movs	r3, #32
 8011618:	61fb      	str	r3, [r7, #28]
      break;
 801161a:	e002      	b.n	8011622 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 801161c:	2300      	movs	r3, #0
 801161e:	61fb      	str	r3, [r7, #28]
      break;
 8011620:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	689b      	ldr	r3, [r3, #8]
 8011626:	2b03      	cmp	r3, #3
 8011628:	d81d      	bhi.n	8011666 <HAL_SAI_Init+0xb6>
 801162a:	a201      	add	r2, pc, #4	; (adr r2, 8011630 <HAL_SAI_Init+0x80>)
 801162c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011630:	08011641 	.word	0x08011641
 8011634:	08011647 	.word	0x08011647
 8011638:	0801164f 	.word	0x0801164f
 801163c:	08011657 	.word	0x08011657
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8011640:	2300      	movs	r3, #0
 8011642:	617b      	str	r3, [r7, #20]
      break;
 8011644:	e012      	b.n	801166c <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8011646:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801164a:	617b      	str	r3, [r7, #20]
      break;
 801164c:	e00e      	b.n	801166c <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 801164e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011652:	617b      	str	r3, [r7, #20]
      break;
 8011654:	e00a      	b.n	801166c <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8011656:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801165a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 801165c:	69fb      	ldr	r3, [r7, #28]
 801165e:	f043 0301 	orr.w	r3, r3, #1
 8011662:	61fb      	str	r3, [r7, #28]
      break;
 8011664:	e002      	b.n	801166c <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8011666:	2300      	movs	r3, #0
 8011668:	617b      	str	r3, [r7, #20]
      break;
 801166a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	4a81      	ldr	r2, [pc, #516]	; (8011878 <HAL_SAI_Init+0x2c8>)
 8011672:	4293      	cmp	r3, r2
 8011674:	d004      	beq.n	8011680 <HAL_SAI_Init+0xd0>
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	4a80      	ldr	r2, [pc, #512]	; (801187c <HAL_SAI_Init+0x2cc>)
 801167c:	4293      	cmp	r3, r2
 801167e:	d103      	bne.n	8011688 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8011680:	4a7f      	ldr	r2, [pc, #508]	; (8011880 <HAL_SAI_Init+0x2d0>)
 8011682:	69fb      	ldr	r3, [r7, #28]
 8011684:	6013      	str	r3, [r2, #0]
 8011686:	e002      	b.n	801168e <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8011688:	4a7e      	ldr	r2, [pc, #504]	; (8011884 <HAL_SAI_Init+0x2d4>)
 801168a:	69fb      	ldr	r3, [r7, #28]
 801168c:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	69db      	ldr	r3, [r3, #28]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d041      	beq.n	801171a <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	4a77      	ldr	r2, [pc, #476]	; (8011878 <HAL_SAI_Init+0x2c8>)
 801169c:	4293      	cmp	r3, r2
 801169e:	d004      	beq.n	80116aa <HAL_SAI_Init+0xfa>
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	4a75      	ldr	r2, [pc, #468]	; (801187c <HAL_SAI_Init+0x2cc>)
 80116a6:	4293      	cmp	r3, r2
 80116a8:	d105      	bne.n	80116b6 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80116aa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80116ae:	f7fe fee7 	bl	8010480 <HAL_RCCEx_GetPeriphCLKFreq>
 80116b2:	6138      	str	r0, [r7, #16]
 80116b4:	e004      	b.n	80116c0 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80116b6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80116ba:	f7fe fee1 	bl	8010480 <HAL_RCCEx_GetPeriphCLKFreq>
 80116be:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80116c0:	693a      	ldr	r2, [r7, #16]
 80116c2:	4613      	mov	r3, r2
 80116c4:	009b      	lsls	r3, r3, #2
 80116c6:	4413      	add	r3, r2
 80116c8:	005b      	lsls	r3, r3, #1
 80116ca:	461a      	mov	r2, r3
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	69db      	ldr	r3, [r3, #28]
 80116d0:	025b      	lsls	r3, r3, #9
 80116d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80116d6:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	4a6b      	ldr	r2, [pc, #428]	; (8011888 <HAL_SAI_Init+0x2d8>)
 80116dc:	fba2 2303 	umull	r2, r3, r2, r3
 80116e0:	08da      	lsrs	r2, r3, #3
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80116e6:	68f9      	ldr	r1, [r7, #12]
 80116e8:	4b67      	ldr	r3, [pc, #412]	; (8011888 <HAL_SAI_Init+0x2d8>)
 80116ea:	fba3 2301 	umull	r2, r3, r3, r1
 80116ee:	08da      	lsrs	r2, r3, #3
 80116f0:	4613      	mov	r3, r2
 80116f2:	009b      	lsls	r3, r3, #2
 80116f4:	4413      	add	r3, r2
 80116f6:	005b      	lsls	r3, r3, #1
 80116f8:	1aca      	subs	r2, r1, r3
 80116fa:	2a08      	cmp	r2, #8
 80116fc:	d904      	bls.n	8011708 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	6a1b      	ldr	r3, [r3, #32]
 8011702:	1c5a      	adds	r2, r3, #1
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801170c:	2b04      	cmp	r3, #4
 801170e:	d104      	bne.n	801171a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	6a1b      	ldr	r3, [r3, #32]
 8011714:	085a      	lsrs	r2, r3, #1
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	685b      	ldr	r3, [r3, #4]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d003      	beq.n	801172a <HAL_SAI_Init+0x17a>
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	685b      	ldr	r3, [r3, #4]
 8011726:	2b02      	cmp	r3, #2
 8011728:	d109      	bne.n	801173e <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801172e:	2b01      	cmp	r3, #1
 8011730:	d101      	bne.n	8011736 <HAL_SAI_Init+0x186>
 8011732:	2300      	movs	r3, #0
 8011734:	e001      	b.n	801173a <HAL_SAI_Init+0x18a>
 8011736:	f44f 7300 	mov.w	r3, #512	; 0x200
 801173a:	61bb      	str	r3, [r7, #24]
 801173c:	e008      	b.n	8011750 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011742:	2b01      	cmp	r3, #1
 8011744:	d102      	bne.n	801174c <HAL_SAI_Init+0x19c>
 8011746:	f44f 7300 	mov.w	r3, #512	; 0x200
 801174a:	e000      	b.n	801174e <HAL_SAI_Init+0x19e>
 801174c:	2300      	movs	r3, #0
 801174e:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	6819      	ldr	r1, [r3, #0]
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	681a      	ldr	r2, [r3, #0]
 801175a:	4b4c      	ldr	r3, [pc, #304]	; (801188c <HAL_SAI_Init+0x2dc>)
 801175c:	400b      	ands	r3, r1
 801175e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	6819      	ldr	r1, [r3, #0]
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	685a      	ldr	r2, [r3, #4]
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801176e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8011774:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801177a:	431a      	orrs	r2, r3
 801177c:	69bb      	ldr	r3, [r7, #24]
 801177e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8011788:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	691b      	ldr	r3, [r3, #16]
 801178e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8011794:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	6a1b      	ldr	r3, [r3, #32]
 801179a:	051b      	lsls	r3, r3, #20
 801179c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	430a      	orrs	r2, r1
 80117a4:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	685b      	ldr	r3, [r3, #4]
 80117ac:	687a      	ldr	r2, [r7, #4]
 80117ae:	6812      	ldr	r2, [r2, #0]
 80117b0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80117b4:	f023 030f 	bic.w	r3, r3, #15
 80117b8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	6859      	ldr	r1, [r3, #4]
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	699a      	ldr	r2, [r3, #24]
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117c8:	431a      	orrs	r2, r3
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117ce:	431a      	orrs	r2, r3
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	430a      	orrs	r2, r1
 80117d6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	6899      	ldr	r1, [r3, #8]
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681a      	ldr	r2, [r3, #0]
 80117e2:	4b2b      	ldr	r3, [pc, #172]	; (8011890 <HAL_SAI_Init+0x2e0>)
 80117e4:	400b      	ands	r3, r1
 80117e6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	6899      	ldr	r1, [r3, #8]
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117f2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80117f8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 80117fe:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8011804:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801180a:	3b01      	subs	r3, #1
 801180c:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 801180e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	430a      	orrs	r2, r1
 8011816:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	68d9      	ldr	r1, [r3, #12]
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681a      	ldr	r2, [r3, #0]
 8011822:	f24f 0320 	movw	r3, #61472	; 0xf020
 8011826:	400b      	ands	r3, r1
 8011828:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	68d9      	ldr	r1, [r3, #12]
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011838:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801183e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8011840:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011846:	3b01      	subs	r3, #1
 8011848:	021b      	lsls	r3, r3, #8
 801184a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	430a      	orrs	r2, r1
 8011852:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	2200      	movs	r2, #0
 8011858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	2201      	movs	r2, #1
 8011860:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2200      	movs	r2, #0
 8011868:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801186c:	2300      	movs	r3, #0
}
 801186e:	4618      	mov	r0, r3
 8011870:	3720      	adds	r7, #32
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}
 8011876:	bf00      	nop
 8011878:	40015404 	.word	0x40015404
 801187c:	40015424 	.word	0x40015424
 8011880:	40015400 	.word	0x40015400
 8011884:	40015800 	.word	0x40015800
 8011888:	cccccccd 	.word	0xcccccccd
 801188c:	ff05c010 	.word	0xff05c010
 8011890:	fff88000 	.word	0xfff88000

08011894 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8011894:	b480      	push	{r7}
 8011896:	b085      	sub	sp, #20
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 801189c:	4b18      	ldr	r3, [pc, #96]	; (8011900 <SAI_Disable+0x6c>)
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	4a18      	ldr	r2, [pc, #96]	; (8011904 <SAI_Disable+0x70>)
 80118a2:	fba2 2303 	umull	r2, r3, r2, r3
 80118a6:	0b1b      	lsrs	r3, r3, #12
 80118a8:	009b      	lsls	r3, r3, #2
 80118aa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80118ac:	2300      	movs	r3, #0
 80118ae:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	681a      	ldr	r2, [r3, #0]
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80118be:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d10a      	bne.n	80118dc <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80118cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80118d6:	2303      	movs	r3, #3
 80118d8:	72fb      	strb	r3, [r7, #11]
      break;
 80118da:	e009      	b.n	80118f0 <SAI_Disable+0x5c>
    }
    count--;
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	3b01      	subs	r3, #1
 80118e0:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d1e7      	bne.n	80118c0 <SAI_Disable+0x2c>

  return status;
 80118f0:	7afb      	ldrb	r3, [r7, #11]
}
 80118f2:	4618      	mov	r0, r3
 80118f4:	3714      	adds	r7, #20
 80118f6:	46bd      	mov	sp, r7
 80118f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fc:	4770      	bx	lr
 80118fe:	bf00      	nop
 8011900:	20000190 	.word	0x20000190
 8011904:	95cbec1b 	.word	0x95cbec1b

08011908 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b082      	sub	sp, #8
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d101      	bne.n	801191a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8011916:	2301      	movs	r3, #1
 8011918:	e022      	b.n	8011960 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011920:	b2db      	uxtb	r3, r3
 8011922:	2b00      	cmp	r3, #0
 8011924:	d105      	bne.n	8011932 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	2200      	movs	r2, #0
 801192a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 801192c:	6878      	ldr	r0, [r7, #4]
 801192e:	f7f0 fadf 	bl	8001ef0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	2203      	movs	r2, #3
 8011936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 801193a:	6878      	ldr	r0, [r7, #4]
 801193c:	f000 f814 	bl	8011968 <HAL_SD_InitCard>
 8011940:	4603      	mov	r3, r0
 8011942:	2b00      	cmp	r3, #0
 8011944:	d001      	beq.n	801194a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8011946:	2301      	movs	r3, #1
 8011948:	e00a      	b.n	8011960 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	2200      	movs	r2, #0
 801194e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	2200      	movs	r2, #0
 8011954:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	2201      	movs	r2, #1
 801195a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 801195e:	2300      	movs	r3, #0
}
 8011960:	4618      	mov	r0, r3
 8011962:	3708      	adds	r7, #8
 8011964:	46bd      	mov	sp, r7
 8011966:	bd80      	pop	{r7, pc}

08011968 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8011968:	b5b0      	push	{r4, r5, r7, lr}
 801196a:	b08e      	sub	sp, #56	; 0x38
 801196c:	af04      	add	r7, sp, #16
 801196e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8011970:	2300      	movs	r3, #0
 8011972:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8011974:	2300      	movs	r3, #0
 8011976:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8011978:	2300      	movs	r3, #0
 801197a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 801197c:	2300      	movs	r3, #0
 801197e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8011980:	2300      	movs	r3, #0
 8011982:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8011984:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8011988:	f7fe fd7a 	bl	8010480 <HAL_RCCEx_GetPeriphCLKFreq>
 801198c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 801198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011990:	2b00      	cmp	r3, #0
 8011992:	d109      	bne.n	80119a8 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2201      	movs	r2, #1
 8011998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80119a2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80119a4:	2301      	movs	r3, #1
 80119a6:	e07b      	b.n	8011aa0 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 80119a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119aa:	09db      	lsrs	r3, r3, #7
 80119ac:	4a3e      	ldr	r2, [pc, #248]	; (8011aa8 <HAL_SD_InitCard+0x140>)
 80119ae:	fba2 2303 	umull	r2, r3, r2, r3
 80119b2:	091b      	lsrs	r3, r3, #4
 80119b4:	3b02      	subs	r3, #2
 80119b6:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681d      	ldr	r5, [r3, #0]
 80119bc:	466c      	mov	r4, sp
 80119be:	f107 0314 	add.w	r3, r7, #20
 80119c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80119c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80119ca:	f107 0308 	add.w	r3, r7, #8
 80119ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80119d0:	4628      	mov	r0, r5
 80119d2:	f002 fc31 	bl	8014238 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	685a      	ldr	r2, [r3, #4]
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80119e4:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	4618      	mov	r0, r3
 80119ec:	f002 fc5e 	bl	80142ac <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	685a      	ldr	r2, [r3, #4]
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80119fe:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8011a00:	69fb      	ldr	r3, [r7, #28]
 8011a02:	3302      	adds	r3, #2
 8011a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a0a:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8011a0c:	4a27      	ldr	r2, [pc, #156]	; (8011aac <HAL_SD_InitCard+0x144>)
 8011a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8011a14:	3301      	adds	r3, #1
 8011a16:	4618      	mov	r0, r3
 8011a18:	f7f9 f91a 	bl	800ac50 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8011a1c:	6878      	ldr	r0, [r7, #4]
 8011a1e:	f000 fb77 	bl	8012110 <SD_PowerON>
 8011a22:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8011a24:	6a3b      	ldr	r3, [r7, #32]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d00b      	beq.n	8011a42 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	2201      	movs	r2, #1
 8011a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011a36:	6a3b      	ldr	r3, [r7, #32]
 8011a38:	431a      	orrs	r2, r3
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8011a3e:	2301      	movs	r3, #1
 8011a40:	e02e      	b.n	8011aa0 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f000 fa96 	bl	8011f74 <SD_InitCard>
 8011a48:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8011a4a:	6a3b      	ldr	r3, [r7, #32]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d00b      	beq.n	8011a68 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2201      	movs	r2, #1
 8011a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011a5c:	6a3b      	ldr	r3, [r7, #32]
 8011a5e:	431a      	orrs	r2, r3
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8011a64:	2301      	movs	r3, #1
 8011a66:	e01b      	b.n	8011aa0 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011a70:	4618      	mov	r0, r3
 8011a72:	f002 fcae 	bl	80143d2 <SDMMC_CmdBlockLength>
 8011a76:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8011a78:	6a3b      	ldr	r3, [r7, #32]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d00f      	beq.n	8011a9e <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	4a0b      	ldr	r2, [pc, #44]	; (8011ab0 <HAL_SD_InitCard+0x148>)
 8011a84:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011a8a:	6a3b      	ldr	r3, [r7, #32]
 8011a8c:	431a      	orrs	r2, r3
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	2201      	movs	r2, #1
 8011a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8011a9a:	2301      	movs	r3, #1
 8011a9c:	e000      	b.n	8011aa0 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8011a9e:	2300      	movs	r3, #0
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	3728      	adds	r7, #40	; 0x28
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bdb0      	pop	{r4, r5, r7, pc}
 8011aa8:	014f8b59 	.word	0x014f8b59
 8011aac:	00012110 	.word	0x00012110
 8011ab0:	004005ff 	.word	0x004005ff

08011ab4 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8011ab4:	b480      	push	{r7}
 8011ab6:	b083      	sub	sp, #12
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
 8011abc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ac2:	0f9b      	lsrs	r3, r3, #30
 8011ac4:	b2da      	uxtb	r2, r3
 8011ac6:	683b      	ldr	r3, [r7, #0]
 8011ac8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ace:	0e9b      	lsrs	r3, r3, #26
 8011ad0:	b2db      	uxtb	r3, r3
 8011ad2:	f003 030f 	and.w	r3, r3, #15
 8011ad6:	b2da      	uxtb	r2, r3
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ae0:	0e1b      	lsrs	r3, r3, #24
 8011ae2:	b2db      	uxtb	r3, r3
 8011ae4:	f003 0303 	and.w	r3, r3, #3
 8011ae8:	b2da      	uxtb	r2, r3
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011af2:	0c1b      	lsrs	r3, r3, #16
 8011af4:	b2da      	uxtb	r2, r3
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011afe:	0a1b      	lsrs	r3, r3, #8
 8011b00:	b2da      	uxtb	r2, r3
 8011b02:	683b      	ldr	r3, [r7, #0]
 8011b04:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011b0a:	b2da      	uxtb	r2, r3
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b14:	0d1b      	lsrs	r3, r3, #20
 8011b16:	b29a      	uxth	r2, r3
 8011b18:	683b      	ldr	r3, [r7, #0]
 8011b1a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b20:	0c1b      	lsrs	r3, r3, #16
 8011b22:	b2db      	uxtb	r3, r3
 8011b24:	f003 030f 	and.w	r3, r3, #15
 8011b28:	b2da      	uxtb	r2, r3
 8011b2a:	683b      	ldr	r3, [r7, #0]
 8011b2c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b32:	0bdb      	lsrs	r3, r3, #15
 8011b34:	b2db      	uxtb	r3, r3
 8011b36:	f003 0301 	and.w	r3, r3, #1
 8011b3a:	b2da      	uxtb	r2, r3
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b44:	0b9b      	lsrs	r3, r3, #14
 8011b46:	b2db      	uxtb	r3, r3
 8011b48:	f003 0301 	and.w	r3, r3, #1
 8011b4c:	b2da      	uxtb	r2, r3
 8011b4e:	683b      	ldr	r3, [r7, #0]
 8011b50:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b56:	0b5b      	lsrs	r3, r3, #13
 8011b58:	b2db      	uxtb	r3, r3
 8011b5a:	f003 0301 	and.w	r3, r3, #1
 8011b5e:	b2da      	uxtb	r2, r3
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b68:	0b1b      	lsrs	r3, r3, #12
 8011b6a:	b2db      	uxtb	r3, r3
 8011b6c:	f003 0301 	and.w	r3, r3, #1
 8011b70:	b2da      	uxtb	r2, r3
 8011b72:	683b      	ldr	r3, [r7, #0]
 8011b74:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	2200      	movs	r2, #0
 8011b7a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d163      	bne.n	8011c4c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b88:	009a      	lsls	r2, r3, #2
 8011b8a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8011b8e:	4013      	ands	r3, r2
 8011b90:	687a      	ldr	r2, [r7, #4]
 8011b92:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8011b94:	0f92      	lsrs	r2, r2, #30
 8011b96:	431a      	orrs	r2, r3
 8011b98:	683b      	ldr	r3, [r7, #0]
 8011b9a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ba0:	0edb      	lsrs	r3, r3, #27
 8011ba2:	b2db      	uxtb	r3, r3
 8011ba4:	f003 0307 	and.w	r3, r3, #7
 8011ba8:	b2da      	uxtb	r2, r3
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bb2:	0e1b      	lsrs	r3, r3, #24
 8011bb4:	b2db      	uxtb	r3, r3
 8011bb6:	f003 0307 	and.w	r3, r3, #7
 8011bba:	b2da      	uxtb	r2, r3
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bc4:	0d5b      	lsrs	r3, r3, #21
 8011bc6:	b2db      	uxtb	r3, r3
 8011bc8:	f003 0307 	and.w	r3, r3, #7
 8011bcc:	b2da      	uxtb	r2, r3
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bd6:	0c9b      	lsrs	r3, r3, #18
 8011bd8:	b2db      	uxtb	r3, r3
 8011bda:	f003 0307 	and.w	r3, r3, #7
 8011bde:	b2da      	uxtb	r2, r3
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011be8:	0bdb      	lsrs	r3, r3, #15
 8011bea:	b2db      	uxtb	r3, r3
 8011bec:	f003 0307 	and.w	r3, r3, #7
 8011bf0:	b2da      	uxtb	r2, r3
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	691b      	ldr	r3, [r3, #16]
 8011bfa:	1c5a      	adds	r2, r3, #1
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8011c00:	683b      	ldr	r3, [r7, #0]
 8011c02:	7e1b      	ldrb	r3, [r3, #24]
 8011c04:	b2db      	uxtb	r3, r3
 8011c06:	f003 0307 	and.w	r3, r3, #7
 8011c0a:	3302      	adds	r3, #2
 8011c0c:	2201      	movs	r2, #1
 8011c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8011c12:	687a      	ldr	r2, [r7, #4]
 8011c14:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8011c16:	fb03 f202 	mul.w	r2, r3, r2
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	7a1b      	ldrb	r3, [r3, #8]
 8011c22:	b2db      	uxtb	r3, r3
 8011c24:	f003 030f 	and.w	r3, r3, #15
 8011c28:	2201      	movs	r2, #1
 8011c2a:	409a      	lsls	r2, r3
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c34:	687a      	ldr	r2, [r7, #4]
 8011c36:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8011c38:	0a52      	lsrs	r2, r2, #9
 8011c3a:	fb03 f202 	mul.w	r2, r3, r2
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c48:	661a      	str	r2, [r3, #96]	; 0x60
 8011c4a:	e031      	b.n	8011cb0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c50:	2b01      	cmp	r3, #1
 8011c52:	d11d      	bne.n	8011c90 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011c58:	041b      	lsls	r3, r3, #16
 8011c5a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c62:	0c1b      	lsrs	r3, r3, #16
 8011c64:	431a      	orrs	r2, r3
 8011c66:	683b      	ldr	r3, [r7, #0]
 8011c68:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	691b      	ldr	r3, [r3, #16]
 8011c6e:	3301      	adds	r3, #1
 8011c70:	029a      	lsls	r2, r3, #10
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c84:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	661a      	str	r2, [r3, #96]	; 0x60
 8011c8e:	e00f      	b.n	8011cb0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	4a58      	ldr	r2, [pc, #352]	; (8011df8 <HAL_SD_GetCardCSD+0x344>)
 8011c96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c9c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	2201      	movs	r2, #1
 8011ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8011cac:	2301      	movs	r3, #1
 8011cae:	e09d      	b.n	8011dec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cb4:	0b9b      	lsrs	r3, r3, #14
 8011cb6:	b2db      	uxtb	r3, r3
 8011cb8:	f003 0301 	and.w	r3, r3, #1
 8011cbc:	b2da      	uxtb	r2, r3
 8011cbe:	683b      	ldr	r3, [r7, #0]
 8011cc0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cc6:	09db      	lsrs	r3, r3, #7
 8011cc8:	b2db      	uxtb	r3, r3
 8011cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011cce:	b2da      	uxtb	r2, r3
 8011cd0:	683b      	ldr	r3, [r7, #0]
 8011cd2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cd8:	b2db      	uxtb	r3, r3
 8011cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011cde:	b2da      	uxtb	r2, r3
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ce8:	0fdb      	lsrs	r3, r3, #31
 8011cea:	b2da      	uxtb	r2, r3
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cf4:	0f5b      	lsrs	r3, r3, #29
 8011cf6:	b2db      	uxtb	r3, r3
 8011cf8:	f003 0303 	and.w	r3, r3, #3
 8011cfc:	b2da      	uxtb	r2, r3
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d06:	0e9b      	lsrs	r3, r3, #26
 8011d08:	b2db      	uxtb	r3, r3
 8011d0a:	f003 0307 	and.w	r3, r3, #7
 8011d0e:	b2da      	uxtb	r2, r3
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d18:	0d9b      	lsrs	r3, r3, #22
 8011d1a:	b2db      	uxtb	r3, r3
 8011d1c:	f003 030f 	and.w	r3, r3, #15
 8011d20:	b2da      	uxtb	r2, r3
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d2a:	0d5b      	lsrs	r3, r3, #21
 8011d2c:	b2db      	uxtb	r3, r3
 8011d2e:	f003 0301 	and.w	r3, r3, #1
 8011d32:	b2da      	uxtb	r2, r3
 8011d34:	683b      	ldr	r3, [r7, #0]
 8011d36:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d46:	0c1b      	lsrs	r3, r3, #16
 8011d48:	b2db      	uxtb	r3, r3
 8011d4a:	f003 0301 	and.w	r3, r3, #1
 8011d4e:	b2da      	uxtb	r2, r3
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d5a:	0bdb      	lsrs	r3, r3, #15
 8011d5c:	b2db      	uxtb	r3, r3
 8011d5e:	f003 0301 	and.w	r3, r3, #1
 8011d62:	b2da      	uxtb	r2, r3
 8011d64:	683b      	ldr	r3, [r7, #0]
 8011d66:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d6e:	0b9b      	lsrs	r3, r3, #14
 8011d70:	b2db      	uxtb	r3, r3
 8011d72:	f003 0301 	and.w	r3, r3, #1
 8011d76:	b2da      	uxtb	r2, r3
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d82:	0b5b      	lsrs	r3, r3, #13
 8011d84:	b2db      	uxtb	r3, r3
 8011d86:	f003 0301 	and.w	r3, r3, #1
 8011d8a:	b2da      	uxtb	r2, r3
 8011d8c:	683b      	ldr	r3, [r7, #0]
 8011d8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d96:	0b1b      	lsrs	r3, r3, #12
 8011d98:	b2db      	uxtb	r3, r3
 8011d9a:	f003 0301 	and.w	r3, r3, #1
 8011d9e:	b2da      	uxtb	r2, r3
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011daa:	0a9b      	lsrs	r3, r3, #10
 8011dac:	b2db      	uxtb	r3, r3
 8011dae:	f003 0303 	and.w	r3, r3, #3
 8011db2:	b2da      	uxtb	r2, r3
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dbe:	0a1b      	lsrs	r3, r3, #8
 8011dc0:	b2db      	uxtb	r3, r3
 8011dc2:	f003 0303 	and.w	r3, r3, #3
 8011dc6:	b2da      	uxtb	r2, r3
 8011dc8:	683b      	ldr	r3, [r7, #0]
 8011dca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dd2:	085b      	lsrs	r3, r3, #1
 8011dd4:	b2db      	uxtb	r3, r3
 8011dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011dda:	b2da      	uxtb	r2, r3
 8011ddc:	683b      	ldr	r3, [r7, #0]
 8011dde:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8011de2:	683b      	ldr	r3, [r7, #0]
 8011de4:	2201      	movs	r2, #1
 8011de6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8011dea:	2300      	movs	r3, #0
}
 8011dec:	4618      	mov	r0, r3
 8011dee:	370c      	adds	r7, #12
 8011df0:	46bd      	mov	sp, r7
 8011df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df6:	4770      	bx	lr
 8011df8:	004005ff 	.word	0x004005ff

08011dfc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8011dfc:	b5b0      	push	{r4, r5, r7, lr}
 8011dfe:	b090      	sub	sp, #64	; 0x40
 8011e00:	af04      	add	r7, sp, #16
 8011e02:	6078      	str	r0, [r7, #4]
 8011e04:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8011e06:	2300      	movs	r3, #0
 8011e08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	2203      	movs	r2, #3
 8011e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e18:	2b03      	cmp	r3, #3
 8011e1a:	d02e      	beq.n	8011e7a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e22:	d106      	bne.n	8011e32 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	639a      	str	r2, [r3, #56]	; 0x38
 8011e30:	e029      	b.n	8011e86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011e38:	d10a      	bne.n	8011e50 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f000 f9f6 	bl	801222c <SD_WideBus_Enable>
 8011e40:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e48:	431a      	orrs	r2, r3
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	639a      	str	r2, [r3, #56]	; 0x38
 8011e4e:	e01a      	b.n	8011e86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8011e50:	683b      	ldr	r3, [r7, #0]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d10a      	bne.n	8011e6c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8011e56:	6878      	ldr	r0, [r7, #4]
 8011e58:	f000 fa33 	bl	80122c2 <SD_WideBus_Disable>
 8011e5c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e64:	431a      	orrs	r2, r3
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	639a      	str	r2, [r3, #56]	; 0x38
 8011e6a:	e00c      	b.n	8011e86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e70:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	639a      	str	r2, [r3, #56]	; 0x38
 8011e78:	e005      	b.n	8011e86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e7e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d007      	beq.n	8011e9e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	4a35      	ldr	r2, [pc, #212]	; (8011f68 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8011e94:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8011e96:	2301      	movs	r3, #1
 8011e98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011e9c:	e042      	b.n	8011f24 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8011e9e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8011ea2:	f7fe faed 	bl	8010480 <HAL_RCCEx_GetPeriphCLKFreq>
 8011ea6:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8011ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d031      	beq.n	8011f12 <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	685b      	ldr	r3, [r3, #4]
 8011eb2:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	689b      	ldr	r3, [r3, #8]
 8011eb8:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	68db      	ldr	r3, [r3, #12]
 8011ebe:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	695b      	ldr	r3, [r3, #20]
 8011ec8:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	699b      	ldr	r3, [r3, #24]
 8011ece:	3302      	adds	r3, #2
 8011ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8011ed6:	4a25      	ldr	r2, [pc, #148]	; (8011f6c <HAL_SD_ConfigWideBusOperation+0x170>)
 8011ed8:	4293      	cmp	r3, r2
 8011eda:	d907      	bls.n	8011eec <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8011edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ede:	4a24      	ldr	r2, [pc, #144]	; (8011f70 <HAL_SD_ConfigWideBusOperation+0x174>)
 8011ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8011ee4:	0ddb      	lsrs	r3, r3, #23
 8011ee6:	3b02      	subs	r3, #2
 8011ee8:	623b      	str	r3, [r7, #32]
 8011eea:	e002      	b.n	8011ef2 <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	699b      	ldr	r3, [r3, #24]
 8011ef0:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	681d      	ldr	r5, [r3, #0]
 8011ef6:	466c      	mov	r4, sp
 8011ef8:	f107 0318 	add.w	r3, r7, #24
 8011efc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011f00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011f04:	f107 030c 	add.w	r3, r7, #12
 8011f08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011f0a:	4628      	mov	r0, r5
 8011f0c:	f002 f994 	bl	8014238 <SDMMC_Init>
 8011f10:	e008      	b.n	8011f24 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f16:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 8011f1e:	2301      	movs	r3, #1
 8011f20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f002 fa50 	bl	80143d2 <SDMMC_CmdBlockLength>
 8011f32:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8011f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d00c      	beq.n	8011f54 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	4a0a      	ldr	r2, [pc, #40]	; (8011f68 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8011f40:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f48:	431a      	orrs	r2, r3
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8011f4e:	2301      	movs	r3, #1
 8011f50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	2201      	movs	r2, #1
 8011f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8011f5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011f60:	4618      	mov	r0, r3
 8011f62:	3730      	adds	r7, #48	; 0x30
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bdb0      	pop	{r4, r5, r7, pc}
 8011f68:	004005ff 	.word	0x004005ff
 8011f6c:	017d7840 	.word	0x017d7840
 8011f70:	55e63b89 	.word	0x55e63b89

08011f74 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8011f74:	b5b0      	push	{r4, r5, r7, lr}
 8011f76:	b094      	sub	sp, #80	; 0x50
 8011f78:	af04      	add	r7, sp, #16
 8011f7a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8011f7c:	2301      	movs	r3, #1
 8011f7e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	4618      	mov	r0, r3
 8011f86:	f002 f9a0 	bl	80142ca <SDMMC_GetPowerState>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d102      	bne.n	8011f96 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011f90:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8011f94:	e0b8      	b.n	8012108 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f9a:	2b03      	cmp	r3, #3
 8011f9c:	d02f      	beq.n	8011ffe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f002 fb1f 	bl	80145e6 <SDMMC_CmdSendCID>
 8011fa8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8011faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d001      	beq.n	8011fb4 <SD_InitCard+0x40>
    {
      return errorstate;
 8011fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011fb2:	e0a9      	b.n	8012108 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	2100      	movs	r1, #0
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f002 f9ca 	bl	8014354 <SDMMC_GetResponse>
 8011fc0:	4602      	mov	r2, r0
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	2104      	movs	r1, #4
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f002 f9c1 	bl	8014354 <SDMMC_GetResponse>
 8011fd2:	4602      	mov	r2, r0
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	2108      	movs	r1, #8
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f002 f9b8 	bl	8014354 <SDMMC_GetResponse>
 8011fe4:	4602      	mov	r2, r0
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	210c      	movs	r1, #12
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f002 f9af 	bl	8014354 <SDMMC_GetResponse>
 8011ff6:	4602      	mov	r2, r0
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012002:	2b03      	cmp	r3, #3
 8012004:	d00d      	beq.n	8012022 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	f107 020e 	add.w	r2, r7, #14
 801200e:	4611      	mov	r1, r2
 8012010:	4618      	mov	r0, r3
 8012012:	f002 fb25 	bl	8014660 <SDMMC_CmdSetRelAdd>
 8012016:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8012018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801201a:	2b00      	cmp	r3, #0
 801201c:	d001      	beq.n	8012022 <SD_InitCard+0xae>
    {
      return errorstate;
 801201e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012020:	e072      	b.n	8012108 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012026:	2b03      	cmp	r3, #3
 8012028:	d036      	beq.n	8012098 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 801202a:	89fb      	ldrh	r3, [r7, #14]
 801202c:	461a      	mov	r2, r3
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	681a      	ldr	r2, [r3, #0]
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801203a:	041b      	lsls	r3, r3, #16
 801203c:	4619      	mov	r1, r3
 801203e:	4610      	mov	r0, r2
 8012040:	f002 faef 	bl	8014622 <SDMMC_CmdSendCSD>
 8012044:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8012046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012048:	2b00      	cmp	r3, #0
 801204a:	d001      	beq.n	8012050 <SD_InitCard+0xdc>
    {
      return errorstate;
 801204c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801204e:	e05b      	b.n	8012108 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	2100      	movs	r1, #0
 8012056:	4618      	mov	r0, r3
 8012058:	f002 f97c 	bl	8014354 <SDMMC_GetResponse>
 801205c:	4602      	mov	r2, r0
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	2104      	movs	r1, #4
 8012068:	4618      	mov	r0, r3
 801206a:	f002 f973 	bl	8014354 <SDMMC_GetResponse>
 801206e:	4602      	mov	r2, r0
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	2108      	movs	r1, #8
 801207a:	4618      	mov	r0, r3
 801207c:	f002 f96a 	bl	8014354 <SDMMC_GetResponse>
 8012080:	4602      	mov	r2, r0
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	210c      	movs	r1, #12
 801208c:	4618      	mov	r0, r3
 801208e:	f002 f961 	bl	8014354 <SDMMC_GetResponse>
 8012092:	4602      	mov	r2, r0
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	2104      	movs	r1, #4
 801209e:	4618      	mov	r0, r3
 80120a0:	f002 f958 	bl	8014354 <SDMMC_GetResponse>
 80120a4:	4603      	mov	r3, r0
 80120a6:	0d1a      	lsrs	r2, r3, #20
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80120ac:	f107 0310 	add.w	r3, r7, #16
 80120b0:	4619      	mov	r1, r3
 80120b2:	6878      	ldr	r0, [r7, #4]
 80120b4:	f7ff fcfe 	bl	8011ab4 <HAL_SD_GetCardCSD>
 80120b8:	4603      	mov	r3, r0
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d002      	beq.n	80120c4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80120be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80120c2:	e021      	b.n	8012108 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	6819      	ldr	r1, [r3, #0]
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80120cc:	041b      	lsls	r3, r3, #16
 80120ce:	2200      	movs	r2, #0
 80120d0:	461c      	mov	r4, r3
 80120d2:	4615      	mov	r5, r2
 80120d4:	4622      	mov	r2, r4
 80120d6:	462b      	mov	r3, r5
 80120d8:	4608      	mov	r0, r1
 80120da:	f002 f99c 	bl	8014416 <SDMMC_CmdSelDesel>
 80120de:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80120e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d001      	beq.n	80120ea <SD_InitCard+0x176>
  {
    return errorstate;
 80120e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120e8:	e00e      	b.n	8012108 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681d      	ldr	r5, [r3, #0]
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	466c      	mov	r4, sp
 80120f2:	f103 0210 	add.w	r2, r3, #16
 80120f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80120f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80120fc:	3304      	adds	r3, #4
 80120fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012100:	4628      	mov	r0, r5
 8012102:	f002 f899 	bl	8014238 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8012106:	2300      	movs	r3, #0
}
 8012108:	4618      	mov	r0, r3
 801210a:	3740      	adds	r7, #64	; 0x40
 801210c:	46bd      	mov	sp, r7
 801210e:	bdb0      	pop	{r4, r5, r7, pc}

08012110 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b086      	sub	sp, #24
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012118:	2300      	movs	r3, #0
 801211a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 801211c:	2300      	movs	r3, #0
 801211e:	617b      	str	r3, [r7, #20]
 8012120:	2300      	movs	r3, #0
 8012122:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	4618      	mov	r0, r3
 801212a:	f002 f997 	bl	801445c <SDMMC_CmdGoIdleState>
 801212e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d001      	beq.n	801213a <SD_PowerON+0x2a>
  {
    return errorstate;
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	e072      	b.n	8012220 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	4618      	mov	r0, r3
 8012140:	f002 f9aa 	bl	8014498 <SDMMC_CmdOperCond>
 8012144:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d00d      	beq.n	8012168 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2200      	movs	r2, #0
 8012150:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	4618      	mov	r0, r3
 8012158:	f002 f980 	bl	801445c <SDMMC_CmdGoIdleState>
 801215c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d004      	beq.n	801216e <SD_PowerON+0x5e>
    {
      return errorstate;
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	e05b      	b.n	8012220 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2201      	movs	r2, #1
 801216c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012172:	2b01      	cmp	r3, #1
 8012174:	d137      	bne.n	80121e6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	2100      	movs	r1, #0
 801217c:	4618      	mov	r0, r3
 801217e:	f002 f9aa 	bl	80144d6 <SDMMC_CmdAppCommand>
 8012182:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d02d      	beq.n	80121e6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801218a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801218e:	e047      	b.n	8012220 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	2100      	movs	r1, #0
 8012196:	4618      	mov	r0, r3
 8012198:	f002 f99d 	bl	80144d6 <SDMMC_CmdAppCommand>
 801219c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d001      	beq.n	80121a8 <SD_PowerON+0x98>
    {
      return errorstate;
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	e03b      	b.n	8012220 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	491e      	ldr	r1, [pc, #120]	; (8012228 <SD_PowerON+0x118>)
 80121ae:	4618      	mov	r0, r3
 80121b0:	f002 f9b3 	bl	801451a <SDMMC_CmdAppOperCommand>
 80121b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d002      	beq.n	80121c2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80121bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80121c0:	e02e      	b.n	8012220 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	2100      	movs	r1, #0
 80121c8:	4618      	mov	r0, r3
 80121ca:	f002 f8c3 	bl	8014354 <SDMMC_GetResponse>
 80121ce:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80121d0:	697b      	ldr	r3, [r7, #20]
 80121d2:	0fdb      	lsrs	r3, r3, #31
 80121d4:	2b01      	cmp	r3, #1
 80121d6:	d101      	bne.n	80121dc <SD_PowerON+0xcc>
 80121d8:	2301      	movs	r3, #1
 80121da:	e000      	b.n	80121de <SD_PowerON+0xce>
 80121dc:	2300      	movs	r3, #0
 80121de:	613b      	str	r3, [r7, #16]

    count++;
 80121e0:	68bb      	ldr	r3, [r7, #8]
 80121e2:	3301      	adds	r3, #1
 80121e4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80121ec:	4293      	cmp	r3, r2
 80121ee:	d802      	bhi.n	80121f6 <SD_PowerON+0xe6>
 80121f0:	693b      	ldr	r3, [r7, #16]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d0cc      	beq.n	8012190 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80121fc:	4293      	cmp	r3, r2
 80121fe:	d902      	bls.n	8012206 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8012200:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8012204:	e00c      	b.n	8012220 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8012206:	697b      	ldr	r3, [r7, #20]
 8012208:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801220c:	2b00      	cmp	r3, #0
 801220e:	d003      	beq.n	8012218 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	2201      	movs	r2, #1
 8012214:	645a      	str	r2, [r3, #68]	; 0x44
 8012216:	e002      	b.n	801221e <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	2200      	movs	r2, #0
 801221c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 801221e:	2300      	movs	r3, #0
}
 8012220:	4618      	mov	r0, r3
 8012222:	3718      	adds	r7, #24
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}
 8012228:	c1100000 	.word	0xc1100000

0801222c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b086      	sub	sp, #24
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8012234:	2300      	movs	r3, #0
 8012236:	60fb      	str	r3, [r7, #12]
 8012238:	2300      	movs	r3, #0
 801223a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	2100      	movs	r1, #0
 8012242:	4618      	mov	r0, r3
 8012244:	f002 f886 	bl	8014354 <SDMMC_GetResponse>
 8012248:	4603      	mov	r3, r0
 801224a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801224e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012252:	d102      	bne.n	801225a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8012254:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012258:	e02f      	b.n	80122ba <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801225a:	f107 030c 	add.w	r3, r7, #12
 801225e:	4619      	mov	r1, r3
 8012260:	6878      	ldr	r0, [r7, #4]
 8012262:	f000 f879 	bl	8012358 <SD_FindSCR>
 8012266:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8012268:	697b      	ldr	r3, [r7, #20]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d001      	beq.n	8012272 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 801226e:	697b      	ldr	r3, [r7, #20]
 8012270:	e023      	b.n	80122ba <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8012272:	693b      	ldr	r3, [r7, #16]
 8012274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012278:	2b00      	cmp	r3, #0
 801227a:	d01c      	beq.n	80122b6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	681a      	ldr	r2, [r3, #0]
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012284:	041b      	lsls	r3, r3, #16
 8012286:	4619      	mov	r1, r3
 8012288:	4610      	mov	r0, r2
 801228a:	f002 f924 	bl	80144d6 <SDMMC_CmdAppCommand>
 801228e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8012290:	697b      	ldr	r3, [r7, #20]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d001      	beq.n	801229a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8012296:	697b      	ldr	r3, [r7, #20]
 8012298:	e00f      	b.n	80122ba <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	2102      	movs	r1, #2
 80122a0:	4618      	mov	r0, r3
 80122a2:	f002 f95d 	bl	8014560 <SDMMC_CmdBusWidth>
 80122a6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80122a8:	697b      	ldr	r3, [r7, #20]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d001      	beq.n	80122b2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80122ae:	697b      	ldr	r3, [r7, #20]
 80122b0:	e003      	b.n	80122ba <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80122b2:	2300      	movs	r3, #0
 80122b4:	e001      	b.n	80122ba <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80122b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80122ba:	4618      	mov	r0, r3
 80122bc:	3718      	adds	r7, #24
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd80      	pop	{r7, pc}

080122c2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80122c2:	b580      	push	{r7, lr}
 80122c4:	b086      	sub	sp, #24
 80122c6:	af00      	add	r7, sp, #0
 80122c8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80122ca:	2300      	movs	r3, #0
 80122cc:	60fb      	str	r3, [r7, #12]
 80122ce:	2300      	movs	r3, #0
 80122d0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	2100      	movs	r1, #0
 80122d8:	4618      	mov	r0, r3
 80122da:	f002 f83b 	bl	8014354 <SDMMC_GetResponse>
 80122de:	4603      	mov	r3, r0
 80122e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80122e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80122e8:	d102      	bne.n	80122f0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80122ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80122ee:	e02f      	b.n	8012350 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80122f0:	f107 030c 	add.w	r3, r7, #12
 80122f4:	4619      	mov	r1, r3
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f000 f82e 	bl	8012358 <SD_FindSCR>
 80122fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80122fe:	697b      	ldr	r3, [r7, #20]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d001      	beq.n	8012308 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8012304:	697b      	ldr	r3, [r7, #20]
 8012306:	e023      	b.n	8012350 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8012308:	693b      	ldr	r3, [r7, #16]
 801230a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801230e:	2b00      	cmp	r3, #0
 8012310:	d01c      	beq.n	801234c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	681a      	ldr	r2, [r3, #0]
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801231a:	041b      	lsls	r3, r3, #16
 801231c:	4619      	mov	r1, r3
 801231e:	4610      	mov	r0, r2
 8012320:	f002 f8d9 	bl	80144d6 <SDMMC_CmdAppCommand>
 8012324:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8012326:	697b      	ldr	r3, [r7, #20]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d001      	beq.n	8012330 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 801232c:	697b      	ldr	r3, [r7, #20]
 801232e:	e00f      	b.n	8012350 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	2100      	movs	r1, #0
 8012336:	4618      	mov	r0, r3
 8012338:	f002 f912 	bl	8014560 <SDMMC_CmdBusWidth>
 801233c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d001      	beq.n	8012348 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8012344:	697b      	ldr	r3, [r7, #20]
 8012346:	e003      	b.n	8012350 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8012348:	2300      	movs	r3, #0
 801234a:	e001      	b.n	8012350 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801234c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8012350:	4618      	mov	r0, r3
 8012352:	3718      	adds	r7, #24
 8012354:	46bd      	mov	sp, r7
 8012356:	bd80      	pop	{r7, pc}

08012358 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8012358:	b590      	push	{r4, r7, lr}
 801235a:	b08f      	sub	sp, #60	; 0x3c
 801235c:	af00      	add	r7, sp, #0
 801235e:	6078      	str	r0, [r7, #4]
 8012360:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8012362:	f7f8 fc69 	bl	800ac38 <HAL_GetTick>
 8012366:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8012368:	2300      	movs	r3, #0
 801236a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 801236c:	2300      	movs	r3, #0
 801236e:	60bb      	str	r3, [r7, #8]
 8012370:	2300      	movs	r3, #0
 8012372:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	2108      	movs	r1, #8
 801237e:	4618      	mov	r0, r3
 8012380:	f002 f827 	bl	80143d2 <SDMMC_CmdBlockLength>
 8012384:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8012386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012388:	2b00      	cmp	r3, #0
 801238a:	d001      	beq.n	8012390 <SD_FindSCR+0x38>
  {
    return errorstate;
 801238c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801238e:	e0a9      	b.n	80124e4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	681a      	ldr	r2, [r3, #0]
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012398:	041b      	lsls	r3, r3, #16
 801239a:	4619      	mov	r1, r3
 801239c:	4610      	mov	r0, r2
 801239e:	f002 f89a 	bl	80144d6 <SDMMC_CmdAppCommand>
 80123a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80123a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d001      	beq.n	80123ae <SD_FindSCR+0x56>
  {
    return errorstate;
 80123aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123ac:	e09a      	b.n	80124e4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80123ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80123b2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80123b4:	2308      	movs	r3, #8
 80123b6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80123b8:	2330      	movs	r3, #48	; 0x30
 80123ba:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80123bc:	2302      	movs	r3, #2
 80123be:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80123c0:	2300      	movs	r3, #0
 80123c2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80123c4:	2301      	movs	r3, #1
 80123c6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	f107 0210 	add.w	r2, r7, #16
 80123d0:	4611      	mov	r1, r2
 80123d2:	4618      	mov	r0, r3
 80123d4:	f001 ffd1 	bl	801437a <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	4618      	mov	r0, r3
 80123de:	f002 f8e1 	bl	80145a4 <SDMMC_CmdSendSCR>
 80123e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80123e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d022      	beq.n	8012430 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80123ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123ec:	e07a      	b.n	80124e4 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d00e      	beq.n	801241a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	6819      	ldr	r1, [r3, #0]
 8012400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012402:	009b      	lsls	r3, r3, #2
 8012404:	f107 0208 	add.w	r2, r7, #8
 8012408:	18d4      	adds	r4, r2, r3
 801240a:	4608      	mov	r0, r1
 801240c:	f001 ff41 	bl	8014292 <SDMMC_ReadFIFO>
 8012410:	4603      	mov	r3, r0
 8012412:	6023      	str	r3, [r4, #0]
      index++;
 8012414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012416:	3301      	adds	r3, #1
 8012418:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 801241a:	f7f8 fc0d 	bl	800ac38 <HAL_GetTick>
 801241e:	4602      	mov	r2, r0
 8012420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012422:	1ad3      	subs	r3, r2, r3
 8012424:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012428:	d102      	bne.n	8012430 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 801242a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801242e:	e059      	b.n	80124e4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012436:	f240 432a 	movw	r3, #1066	; 0x42a
 801243a:	4013      	ands	r3, r2
 801243c:	2b00      	cmp	r3, #0
 801243e:	d0d6      	beq.n	80123ee <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012446:	f003 0308 	and.w	r3, r3, #8
 801244a:	2b00      	cmp	r3, #0
 801244c:	d005      	beq.n	801245a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	2208      	movs	r2, #8
 8012454:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8012456:	2308      	movs	r3, #8
 8012458:	e044      	b.n	80124e4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012460:	f003 0302 	and.w	r3, r3, #2
 8012464:	2b00      	cmp	r3, #0
 8012466:	d005      	beq.n	8012474 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	2202      	movs	r2, #2
 801246e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8012470:	2302      	movs	r3, #2
 8012472:	e037      	b.n	80124e4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801247a:	f003 0320 	and.w	r3, r3, #32
 801247e:	2b00      	cmp	r3, #0
 8012480:	d005      	beq.n	801248e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	2220      	movs	r2, #32
 8012488:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 801248a:	2320      	movs	r3, #32
 801248c:	e02a      	b.n	80124e4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	f240 523a 	movw	r2, #1338	; 0x53a
 8012496:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	061a      	lsls	r2, r3, #24
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	021b      	lsls	r3, r3, #8
 80124a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80124a4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	0a1b      	lsrs	r3, r3, #8
 80124aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80124ae:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	0e1b      	lsrs	r3, r3, #24
 80124b4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80124b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124b8:	601a      	str	r2, [r3, #0]
    scr++;
 80124ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124bc:	3304      	adds	r3, #4
 80124be:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80124c0:	68bb      	ldr	r3, [r7, #8]
 80124c2:	061a      	lsls	r2, r3, #24
 80124c4:	68bb      	ldr	r3, [r7, #8]
 80124c6:	021b      	lsls	r3, r3, #8
 80124c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80124cc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80124ce:	68bb      	ldr	r3, [r7, #8]
 80124d0:	0a1b      	lsrs	r3, r3, #8
 80124d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80124d6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	0e1b      	lsrs	r3, r3, #24
 80124dc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80124de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124e0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80124e2:	2300      	movs	r3, #0
}
 80124e4:	4618      	mov	r0, r3
 80124e6:	373c      	adds	r7, #60	; 0x3c
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd90      	pop	{r4, r7, pc}

080124ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b084      	sub	sp, #16
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d101      	bne.n	80124fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80124fa:	2301      	movs	r3, #1
 80124fc:	e095      	b.n	801262a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012502:	2b00      	cmp	r3, #0
 8012504:	d108      	bne.n	8012518 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	685b      	ldr	r3, [r3, #4]
 801250a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801250e:	d009      	beq.n	8012524 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	2200      	movs	r2, #0
 8012514:	61da      	str	r2, [r3, #28]
 8012516:	e005      	b.n	8012524 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2200      	movs	r2, #0
 801251c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	2200      	movs	r2, #0
 8012522:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2200      	movs	r2, #0
 8012528:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012530:	b2db      	uxtb	r3, r3
 8012532:	2b00      	cmp	r3, #0
 8012534:	d106      	bne.n	8012544 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	2200      	movs	r2, #0
 801253a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801253e:	6878      	ldr	r0, [r7, #4]
 8012540:	f7ef fdb4 	bl	80020ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	2202      	movs	r2, #2
 8012548:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	681a      	ldr	r2, [r3, #0]
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801255a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	68db      	ldr	r3, [r3, #12]
 8012560:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8012564:	d902      	bls.n	801256c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8012566:	2300      	movs	r3, #0
 8012568:	60fb      	str	r3, [r7, #12]
 801256a:	e002      	b.n	8012572 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801256c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012570:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	68db      	ldr	r3, [r3, #12]
 8012576:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801257a:	d007      	beq.n	801258c <HAL_SPI_Init+0xa0>
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	68db      	ldr	r3, [r3, #12]
 8012580:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8012584:	d002      	beq.n	801258c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2200      	movs	r2, #0
 801258a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	685b      	ldr	r3, [r3, #4]
 8012590:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	689b      	ldr	r3, [r3, #8]
 8012598:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801259c:	431a      	orrs	r2, r3
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	691b      	ldr	r3, [r3, #16]
 80125a2:	f003 0302 	and.w	r3, r3, #2
 80125a6:	431a      	orrs	r2, r3
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	695b      	ldr	r3, [r3, #20]
 80125ac:	f003 0301 	and.w	r3, r3, #1
 80125b0:	431a      	orrs	r2, r3
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	699b      	ldr	r3, [r3, #24]
 80125b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80125ba:	431a      	orrs	r2, r3
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	69db      	ldr	r3, [r3, #28]
 80125c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80125c4:	431a      	orrs	r2, r3
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	6a1b      	ldr	r3, [r3, #32]
 80125ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80125ce:	ea42 0103 	orr.w	r1, r2, r3
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	430a      	orrs	r2, r1
 80125e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	699b      	ldr	r3, [r3, #24]
 80125e6:	0c1b      	lsrs	r3, r3, #16
 80125e8:	f003 0204 	and.w	r2, r3, #4
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125f0:	f003 0310 	and.w	r3, r3, #16
 80125f4:	431a      	orrs	r2, r3
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125fa:	f003 0308 	and.w	r3, r3, #8
 80125fe:	431a      	orrs	r2, r3
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	68db      	ldr	r3, [r3, #12]
 8012604:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8012608:	ea42 0103 	orr.w	r1, r2, r3
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	430a      	orrs	r2, r1
 8012618:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	2200      	movs	r2, #0
 801261e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	2201      	movs	r2, #1
 8012624:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8012628:	2300      	movs	r3, #0
}
 801262a:	4618      	mov	r0, r3
 801262c:	3710      	adds	r7, #16
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}

08012632 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8012632:	b580      	push	{r7, lr}
 8012634:	b084      	sub	sp, #16
 8012636:	af00      	add	r7, sp, #0
 8012638:	60f8      	str	r0, [r7, #12]
 801263a:	60b9      	str	r1, [r7, #8]
 801263c:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d101      	bne.n	8012648 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8012644:	2301      	movs	r3, #1
 8012646:	e038      	b.n	80126ba <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801264e:	b2db      	uxtb	r3, r3
 8012650:	2b00      	cmp	r3, #0
 8012652:	d106      	bne.n	8012662 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	2200      	movs	r2, #0
 8012658:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 801265c:	68f8      	ldr	r0, [r7, #12]
 801265e:	f7ee fc6b 	bl	8000f38 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	681a      	ldr	r2, [r3, #0]
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	3308      	adds	r3, #8
 801266a:	4619      	mov	r1, r3
 801266c:	4610      	mov	r0, r2
 801266e:	f001 fccb 	bl	8014008 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	6818      	ldr	r0, [r3, #0]
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	689b      	ldr	r3, [r3, #8]
 801267a:	461a      	mov	r2, r3
 801267c:	68b9      	ldr	r1, [r7, #8]
 801267e:	f001 fd53 	bl	8014128 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	6858      	ldr	r0, [r3, #4]
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	689a      	ldr	r2, [r3, #8]
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801268e:	6879      	ldr	r1, [r7, #4]
 8012690:	f001 fd9a 	bl	80141c8 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	68fa      	ldr	r2, [r7, #12]
 801269a:	6892      	ldr	r2, [r2, #8]
 801269c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	68fa      	ldr	r2, [r7, #12]
 80126a6:	6892      	ldr	r2, [r2, #8]
 80126a8:	f041 0101 	orr.w	r1, r1, #1
 80126ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	2201      	movs	r2, #1
 80126b4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 80126b8:	2300      	movs	r3, #0
}
 80126ba:	4618      	mov	r0, r3
 80126bc:	3710      	adds	r7, #16
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}

080126c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80126c2:	b580      	push	{r7, lr}
 80126c4:	b082      	sub	sp, #8
 80126c6:	af00      	add	r7, sp, #0
 80126c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d101      	bne.n	80126d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80126d0:	2301      	movs	r3, #1
 80126d2:	e049      	b.n	8012768 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80126da:	b2db      	uxtb	r3, r3
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d106      	bne.n	80126ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2200      	movs	r2, #0
 80126e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80126e8:	6878      	ldr	r0, [r7, #4]
 80126ea:	f7ef feeb 	bl	80024c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	2202      	movs	r2, #2
 80126f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681a      	ldr	r2, [r3, #0]
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	3304      	adds	r3, #4
 80126fe:	4619      	mov	r1, r3
 8012700:	4610      	mov	r0, r2
 8012702:	f000 fbad 	bl	8012e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	2201      	movs	r2, #1
 801270a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	2201      	movs	r2, #1
 8012712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	2201      	movs	r2, #1
 801271a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	2201      	movs	r2, #1
 8012722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	2201      	movs	r2, #1
 801272a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	2201      	movs	r2, #1
 8012732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	2201      	movs	r2, #1
 801273a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	2201      	movs	r2, #1
 8012742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	2201      	movs	r2, #1
 801274a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	2201      	movs	r2, #1
 8012752:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	2201      	movs	r2, #1
 801275a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	2201      	movs	r2, #1
 8012762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012766:	2300      	movs	r3, #0
}
 8012768:	4618      	mov	r0, r3
 801276a:	3708      	adds	r7, #8
 801276c:	46bd      	mov	sp, r7
 801276e:	bd80      	pop	{r7, pc}

08012770 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012770:	b480      	push	{r7}
 8012772:	b085      	sub	sp, #20
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801277e:	b2db      	uxtb	r3, r3
 8012780:	2b01      	cmp	r3, #1
 8012782:	d001      	beq.n	8012788 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012784:	2301      	movs	r3, #1
 8012786:	e04f      	b.n	8012828 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2202      	movs	r2, #2
 801278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	68da      	ldr	r2, [r3, #12]
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	f042 0201 	orr.w	r2, r2, #1
 801279e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	4a23      	ldr	r2, [pc, #140]	; (8012834 <HAL_TIM_Base_Start_IT+0xc4>)
 80127a6:	4293      	cmp	r3, r2
 80127a8:	d01d      	beq.n	80127e6 <HAL_TIM_Base_Start_IT+0x76>
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80127b2:	d018      	beq.n	80127e6 <HAL_TIM_Base_Start_IT+0x76>
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	4a1f      	ldr	r2, [pc, #124]	; (8012838 <HAL_TIM_Base_Start_IT+0xc8>)
 80127ba:	4293      	cmp	r3, r2
 80127bc:	d013      	beq.n	80127e6 <HAL_TIM_Base_Start_IT+0x76>
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	4a1e      	ldr	r2, [pc, #120]	; (801283c <HAL_TIM_Base_Start_IT+0xcc>)
 80127c4:	4293      	cmp	r3, r2
 80127c6:	d00e      	beq.n	80127e6 <HAL_TIM_Base_Start_IT+0x76>
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	4a1c      	ldr	r2, [pc, #112]	; (8012840 <HAL_TIM_Base_Start_IT+0xd0>)
 80127ce:	4293      	cmp	r3, r2
 80127d0:	d009      	beq.n	80127e6 <HAL_TIM_Base_Start_IT+0x76>
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	4a1b      	ldr	r2, [pc, #108]	; (8012844 <HAL_TIM_Base_Start_IT+0xd4>)
 80127d8:	4293      	cmp	r3, r2
 80127da:	d004      	beq.n	80127e6 <HAL_TIM_Base_Start_IT+0x76>
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	4a19      	ldr	r2, [pc, #100]	; (8012848 <HAL_TIM_Base_Start_IT+0xd8>)
 80127e2:	4293      	cmp	r3, r2
 80127e4:	d115      	bne.n	8012812 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	689a      	ldr	r2, [r3, #8]
 80127ec:	4b17      	ldr	r3, [pc, #92]	; (801284c <HAL_TIM_Base_Start_IT+0xdc>)
 80127ee:	4013      	ands	r3, r2
 80127f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	2b06      	cmp	r3, #6
 80127f6:	d015      	beq.n	8012824 <HAL_TIM_Base_Start_IT+0xb4>
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80127fe:	d011      	beq.n	8012824 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	681a      	ldr	r2, [r3, #0]
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	f042 0201 	orr.w	r2, r2, #1
 801280e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012810:	e008      	b.n	8012824 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	681a      	ldr	r2, [r3, #0]
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	f042 0201 	orr.w	r2, r2, #1
 8012820:	601a      	str	r2, [r3, #0]
 8012822:	e000      	b.n	8012826 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012824:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012826:	2300      	movs	r3, #0
}
 8012828:	4618      	mov	r0, r3
 801282a:	3714      	adds	r7, #20
 801282c:	46bd      	mov	sp, r7
 801282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012832:	4770      	bx	lr
 8012834:	40012c00 	.word	0x40012c00
 8012838:	40000400 	.word	0x40000400
 801283c:	40000800 	.word	0x40000800
 8012840:	40000c00 	.word	0x40000c00
 8012844:	40013400 	.word	0x40013400
 8012848:	40014000 	.word	0x40014000
 801284c:	00010007 	.word	0x00010007

08012850 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b082      	sub	sp, #8
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d101      	bne.n	8012862 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801285e:	2301      	movs	r3, #1
 8012860:	e049      	b.n	80128f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012868:	b2db      	uxtb	r3, r3
 801286a:	2b00      	cmp	r3, #0
 801286c:	d106      	bne.n	801287c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	2200      	movs	r2, #0
 8012872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012876:	6878      	ldr	r0, [r7, #4]
 8012878:	f7f7 feee 	bl	800a658 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	2202      	movs	r2, #2
 8012880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	681a      	ldr	r2, [r3, #0]
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	3304      	adds	r3, #4
 801288c:	4619      	mov	r1, r3
 801288e:	4610      	mov	r0, r2
 8012890:	f000 fae6 	bl	8012e60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2201      	movs	r2, #1
 8012898:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	2201      	movs	r2, #1
 80128a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	2201      	movs	r2, #1
 80128a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	2201      	movs	r2, #1
 80128b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	2201      	movs	r2, #1
 80128b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	2201      	movs	r2, #1
 80128c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	2201      	movs	r2, #1
 80128c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2201      	movs	r2, #1
 80128d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	2201      	movs	r2, #1
 80128d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	2201      	movs	r2, #1
 80128e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	2201      	movs	r2, #1
 80128e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2201      	movs	r2, #1
 80128f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80128f4:	2300      	movs	r3, #0
}
 80128f6:	4618      	mov	r0, r3
 80128f8:	3708      	adds	r7, #8
 80128fa:	46bd      	mov	sp, r7
 80128fc:	bd80      	pop	{r7, pc}
	...

08012900 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b084      	sub	sp, #16
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
 8012908:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d109      	bne.n	8012924 <HAL_TIM_PWM_Start+0x24>
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012916:	b2db      	uxtb	r3, r3
 8012918:	2b01      	cmp	r3, #1
 801291a:	bf14      	ite	ne
 801291c:	2301      	movne	r3, #1
 801291e:	2300      	moveq	r3, #0
 8012920:	b2db      	uxtb	r3, r3
 8012922:	e03c      	b.n	801299e <HAL_TIM_PWM_Start+0x9e>
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	2b04      	cmp	r3, #4
 8012928:	d109      	bne.n	801293e <HAL_TIM_PWM_Start+0x3e>
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012930:	b2db      	uxtb	r3, r3
 8012932:	2b01      	cmp	r3, #1
 8012934:	bf14      	ite	ne
 8012936:	2301      	movne	r3, #1
 8012938:	2300      	moveq	r3, #0
 801293a:	b2db      	uxtb	r3, r3
 801293c:	e02f      	b.n	801299e <HAL_TIM_PWM_Start+0x9e>
 801293e:	683b      	ldr	r3, [r7, #0]
 8012940:	2b08      	cmp	r3, #8
 8012942:	d109      	bne.n	8012958 <HAL_TIM_PWM_Start+0x58>
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801294a:	b2db      	uxtb	r3, r3
 801294c:	2b01      	cmp	r3, #1
 801294e:	bf14      	ite	ne
 8012950:	2301      	movne	r3, #1
 8012952:	2300      	moveq	r3, #0
 8012954:	b2db      	uxtb	r3, r3
 8012956:	e022      	b.n	801299e <HAL_TIM_PWM_Start+0x9e>
 8012958:	683b      	ldr	r3, [r7, #0]
 801295a:	2b0c      	cmp	r3, #12
 801295c:	d109      	bne.n	8012972 <HAL_TIM_PWM_Start+0x72>
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012964:	b2db      	uxtb	r3, r3
 8012966:	2b01      	cmp	r3, #1
 8012968:	bf14      	ite	ne
 801296a:	2301      	movne	r3, #1
 801296c:	2300      	moveq	r3, #0
 801296e:	b2db      	uxtb	r3, r3
 8012970:	e015      	b.n	801299e <HAL_TIM_PWM_Start+0x9e>
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	2b10      	cmp	r3, #16
 8012976:	d109      	bne.n	801298c <HAL_TIM_PWM_Start+0x8c>
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801297e:	b2db      	uxtb	r3, r3
 8012980:	2b01      	cmp	r3, #1
 8012982:	bf14      	ite	ne
 8012984:	2301      	movne	r3, #1
 8012986:	2300      	moveq	r3, #0
 8012988:	b2db      	uxtb	r3, r3
 801298a:	e008      	b.n	801299e <HAL_TIM_PWM_Start+0x9e>
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012992:	b2db      	uxtb	r3, r3
 8012994:	2b01      	cmp	r3, #1
 8012996:	bf14      	ite	ne
 8012998:	2301      	movne	r3, #1
 801299a:	2300      	moveq	r3, #0
 801299c:	b2db      	uxtb	r3, r3
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d001      	beq.n	80129a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80129a2:	2301      	movs	r3, #1
 80129a4:	e09c      	b.n	8012ae0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80129a6:	683b      	ldr	r3, [r7, #0]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d104      	bne.n	80129b6 <HAL_TIM_PWM_Start+0xb6>
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	2202      	movs	r2, #2
 80129b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80129b4:	e023      	b.n	80129fe <HAL_TIM_PWM_Start+0xfe>
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	2b04      	cmp	r3, #4
 80129ba:	d104      	bne.n	80129c6 <HAL_TIM_PWM_Start+0xc6>
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	2202      	movs	r2, #2
 80129c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80129c4:	e01b      	b.n	80129fe <HAL_TIM_PWM_Start+0xfe>
 80129c6:	683b      	ldr	r3, [r7, #0]
 80129c8:	2b08      	cmp	r3, #8
 80129ca:	d104      	bne.n	80129d6 <HAL_TIM_PWM_Start+0xd6>
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2202      	movs	r2, #2
 80129d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80129d4:	e013      	b.n	80129fe <HAL_TIM_PWM_Start+0xfe>
 80129d6:	683b      	ldr	r3, [r7, #0]
 80129d8:	2b0c      	cmp	r3, #12
 80129da:	d104      	bne.n	80129e6 <HAL_TIM_PWM_Start+0xe6>
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2202      	movs	r2, #2
 80129e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80129e4:	e00b      	b.n	80129fe <HAL_TIM_PWM_Start+0xfe>
 80129e6:	683b      	ldr	r3, [r7, #0]
 80129e8:	2b10      	cmp	r3, #16
 80129ea:	d104      	bne.n	80129f6 <HAL_TIM_PWM_Start+0xf6>
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2202      	movs	r2, #2
 80129f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80129f4:	e003      	b.n	80129fe <HAL_TIM_PWM_Start+0xfe>
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	2202      	movs	r2, #2
 80129fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	2201      	movs	r2, #1
 8012a04:	6839      	ldr	r1, [r7, #0]
 8012a06:	4618      	mov	r0, r3
 8012a08:	f000 fd9a 	bl	8013540 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	4a35      	ldr	r2, [pc, #212]	; (8012ae8 <HAL_TIM_PWM_Start+0x1e8>)
 8012a12:	4293      	cmp	r3, r2
 8012a14:	d013      	beq.n	8012a3e <HAL_TIM_PWM_Start+0x13e>
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	4a34      	ldr	r2, [pc, #208]	; (8012aec <HAL_TIM_PWM_Start+0x1ec>)
 8012a1c:	4293      	cmp	r3, r2
 8012a1e:	d00e      	beq.n	8012a3e <HAL_TIM_PWM_Start+0x13e>
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	4a32      	ldr	r2, [pc, #200]	; (8012af0 <HAL_TIM_PWM_Start+0x1f0>)
 8012a26:	4293      	cmp	r3, r2
 8012a28:	d009      	beq.n	8012a3e <HAL_TIM_PWM_Start+0x13e>
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	4a31      	ldr	r2, [pc, #196]	; (8012af4 <HAL_TIM_PWM_Start+0x1f4>)
 8012a30:	4293      	cmp	r3, r2
 8012a32:	d004      	beq.n	8012a3e <HAL_TIM_PWM_Start+0x13e>
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	4a2f      	ldr	r2, [pc, #188]	; (8012af8 <HAL_TIM_PWM_Start+0x1f8>)
 8012a3a:	4293      	cmp	r3, r2
 8012a3c:	d101      	bne.n	8012a42 <HAL_TIM_PWM_Start+0x142>
 8012a3e:	2301      	movs	r3, #1
 8012a40:	e000      	b.n	8012a44 <HAL_TIM_PWM_Start+0x144>
 8012a42:	2300      	movs	r3, #0
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d007      	beq.n	8012a58 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012a56:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	4a22      	ldr	r2, [pc, #136]	; (8012ae8 <HAL_TIM_PWM_Start+0x1e8>)
 8012a5e:	4293      	cmp	r3, r2
 8012a60:	d01d      	beq.n	8012a9e <HAL_TIM_PWM_Start+0x19e>
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	681b      	ldr	r3, [r3, #0]
 8012a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012a6a:	d018      	beq.n	8012a9e <HAL_TIM_PWM_Start+0x19e>
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	4a22      	ldr	r2, [pc, #136]	; (8012afc <HAL_TIM_PWM_Start+0x1fc>)
 8012a72:	4293      	cmp	r3, r2
 8012a74:	d013      	beq.n	8012a9e <HAL_TIM_PWM_Start+0x19e>
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	4a21      	ldr	r2, [pc, #132]	; (8012b00 <HAL_TIM_PWM_Start+0x200>)
 8012a7c:	4293      	cmp	r3, r2
 8012a7e:	d00e      	beq.n	8012a9e <HAL_TIM_PWM_Start+0x19e>
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	4a1f      	ldr	r2, [pc, #124]	; (8012b04 <HAL_TIM_PWM_Start+0x204>)
 8012a86:	4293      	cmp	r3, r2
 8012a88:	d009      	beq.n	8012a9e <HAL_TIM_PWM_Start+0x19e>
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	4a17      	ldr	r2, [pc, #92]	; (8012aec <HAL_TIM_PWM_Start+0x1ec>)
 8012a90:	4293      	cmp	r3, r2
 8012a92:	d004      	beq.n	8012a9e <HAL_TIM_PWM_Start+0x19e>
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	4a15      	ldr	r2, [pc, #84]	; (8012af0 <HAL_TIM_PWM_Start+0x1f0>)
 8012a9a:	4293      	cmp	r3, r2
 8012a9c:	d115      	bne.n	8012aca <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	689a      	ldr	r2, [r3, #8]
 8012aa4:	4b18      	ldr	r3, [pc, #96]	; (8012b08 <HAL_TIM_PWM_Start+0x208>)
 8012aa6:	4013      	ands	r3, r2
 8012aa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	2b06      	cmp	r3, #6
 8012aae:	d015      	beq.n	8012adc <HAL_TIM_PWM_Start+0x1dc>
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012ab6:	d011      	beq.n	8012adc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	681a      	ldr	r2, [r3, #0]
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	f042 0201 	orr.w	r2, r2, #1
 8012ac6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012ac8:	e008      	b.n	8012adc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	681a      	ldr	r2, [r3, #0]
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	f042 0201 	orr.w	r2, r2, #1
 8012ad8:	601a      	str	r2, [r3, #0]
 8012ada:	e000      	b.n	8012ade <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012adc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012ade:	2300      	movs	r3, #0
}
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	3710      	adds	r7, #16
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}
 8012ae8:	40012c00 	.word	0x40012c00
 8012aec:	40013400 	.word	0x40013400
 8012af0:	40014000 	.word	0x40014000
 8012af4:	40014400 	.word	0x40014400
 8012af8:	40014800 	.word	0x40014800
 8012afc:	40000400 	.word	0x40000400
 8012b00:	40000800 	.word	0x40000800
 8012b04:	40000c00 	.word	0x40000c00
 8012b08:	00010007 	.word	0x00010007

08012b0c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b082      	sub	sp, #8
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
 8012b14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	2200      	movs	r2, #0
 8012b1c:	6839      	ldr	r1, [r7, #0]
 8012b1e:	4618      	mov	r0, r3
 8012b20:	f000 fd0e 	bl	8013540 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	4a3e      	ldr	r2, [pc, #248]	; (8012c24 <HAL_TIM_PWM_Stop+0x118>)
 8012b2a:	4293      	cmp	r3, r2
 8012b2c:	d013      	beq.n	8012b56 <HAL_TIM_PWM_Stop+0x4a>
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	4a3d      	ldr	r2, [pc, #244]	; (8012c28 <HAL_TIM_PWM_Stop+0x11c>)
 8012b34:	4293      	cmp	r3, r2
 8012b36:	d00e      	beq.n	8012b56 <HAL_TIM_PWM_Stop+0x4a>
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	4a3b      	ldr	r2, [pc, #236]	; (8012c2c <HAL_TIM_PWM_Stop+0x120>)
 8012b3e:	4293      	cmp	r3, r2
 8012b40:	d009      	beq.n	8012b56 <HAL_TIM_PWM_Stop+0x4a>
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	4a3a      	ldr	r2, [pc, #232]	; (8012c30 <HAL_TIM_PWM_Stop+0x124>)
 8012b48:	4293      	cmp	r3, r2
 8012b4a:	d004      	beq.n	8012b56 <HAL_TIM_PWM_Stop+0x4a>
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	4a38      	ldr	r2, [pc, #224]	; (8012c34 <HAL_TIM_PWM_Stop+0x128>)
 8012b52:	4293      	cmp	r3, r2
 8012b54:	d101      	bne.n	8012b5a <HAL_TIM_PWM_Stop+0x4e>
 8012b56:	2301      	movs	r3, #1
 8012b58:	e000      	b.n	8012b5c <HAL_TIM_PWM_Stop+0x50>
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d017      	beq.n	8012b90 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	6a1a      	ldr	r2, [r3, #32]
 8012b66:	f241 1311 	movw	r3, #4369	; 0x1111
 8012b6a:	4013      	ands	r3, r2
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d10f      	bne.n	8012b90 <HAL_TIM_PWM_Stop+0x84>
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	6a1a      	ldr	r2, [r3, #32]
 8012b76:	f240 4344 	movw	r3, #1092	; 0x444
 8012b7a:	4013      	ands	r3, r2
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d107      	bne.n	8012b90 <HAL_TIM_PWM_Stop+0x84>
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012b8e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	6a1a      	ldr	r2, [r3, #32]
 8012b96:	f241 1311 	movw	r3, #4369	; 0x1111
 8012b9a:	4013      	ands	r3, r2
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d10f      	bne.n	8012bc0 <HAL_TIM_PWM_Stop+0xb4>
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	6a1a      	ldr	r2, [r3, #32]
 8012ba6:	f240 4344 	movw	r3, #1092	; 0x444
 8012baa:	4013      	ands	r3, r2
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d107      	bne.n	8012bc0 <HAL_TIM_PWM_Stop+0xb4>
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	681a      	ldr	r2, [r3, #0]
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	f022 0201 	bic.w	r2, r2, #1
 8012bbe:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d104      	bne.n	8012bd0 <HAL_TIM_PWM_Stop+0xc4>
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	2201      	movs	r2, #1
 8012bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012bce:	e023      	b.n	8012c18 <HAL_TIM_PWM_Stop+0x10c>
 8012bd0:	683b      	ldr	r3, [r7, #0]
 8012bd2:	2b04      	cmp	r3, #4
 8012bd4:	d104      	bne.n	8012be0 <HAL_TIM_PWM_Stop+0xd4>
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	2201      	movs	r2, #1
 8012bda:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012bde:	e01b      	b.n	8012c18 <HAL_TIM_PWM_Stop+0x10c>
 8012be0:	683b      	ldr	r3, [r7, #0]
 8012be2:	2b08      	cmp	r3, #8
 8012be4:	d104      	bne.n	8012bf0 <HAL_TIM_PWM_Stop+0xe4>
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	2201      	movs	r2, #1
 8012bea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012bee:	e013      	b.n	8012c18 <HAL_TIM_PWM_Stop+0x10c>
 8012bf0:	683b      	ldr	r3, [r7, #0]
 8012bf2:	2b0c      	cmp	r3, #12
 8012bf4:	d104      	bne.n	8012c00 <HAL_TIM_PWM_Stop+0xf4>
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	2201      	movs	r2, #1
 8012bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012bfe:	e00b      	b.n	8012c18 <HAL_TIM_PWM_Stop+0x10c>
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	2b10      	cmp	r3, #16
 8012c04:	d104      	bne.n	8012c10 <HAL_TIM_PWM_Stop+0x104>
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	2201      	movs	r2, #1
 8012c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012c0e:	e003      	b.n	8012c18 <HAL_TIM_PWM_Stop+0x10c>
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2201      	movs	r2, #1
 8012c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8012c18:	2300      	movs	r3, #0
}
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	3708      	adds	r7, #8
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}
 8012c22:	bf00      	nop
 8012c24:	40012c00 	.word	0x40012c00
 8012c28:	40013400 	.word	0x40013400
 8012c2c:	40014000 	.word	0x40014000
 8012c30:	40014400 	.word	0x40014400
 8012c34:	40014800 	.word	0x40014800

08012c38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b086      	sub	sp, #24
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	60f8      	str	r0, [r7, #12]
 8012c40:	60b9      	str	r1, [r7, #8]
 8012c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012c44:	2300      	movs	r3, #0
 8012c46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012c4e:	2b01      	cmp	r3, #1
 8012c50:	d101      	bne.n	8012c56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8012c52:	2302      	movs	r3, #2
 8012c54:	e0ff      	b.n	8012e56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	2201      	movs	r2, #1
 8012c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	2b14      	cmp	r3, #20
 8012c62:	f200 80f0 	bhi.w	8012e46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8012c66:	a201      	add	r2, pc, #4	; (adr r2, 8012c6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c6c:	08012cc1 	.word	0x08012cc1
 8012c70:	08012e47 	.word	0x08012e47
 8012c74:	08012e47 	.word	0x08012e47
 8012c78:	08012e47 	.word	0x08012e47
 8012c7c:	08012d01 	.word	0x08012d01
 8012c80:	08012e47 	.word	0x08012e47
 8012c84:	08012e47 	.word	0x08012e47
 8012c88:	08012e47 	.word	0x08012e47
 8012c8c:	08012d43 	.word	0x08012d43
 8012c90:	08012e47 	.word	0x08012e47
 8012c94:	08012e47 	.word	0x08012e47
 8012c98:	08012e47 	.word	0x08012e47
 8012c9c:	08012d83 	.word	0x08012d83
 8012ca0:	08012e47 	.word	0x08012e47
 8012ca4:	08012e47 	.word	0x08012e47
 8012ca8:	08012e47 	.word	0x08012e47
 8012cac:	08012dc5 	.word	0x08012dc5
 8012cb0:	08012e47 	.word	0x08012e47
 8012cb4:	08012e47 	.word	0x08012e47
 8012cb8:	08012e47 	.word	0x08012e47
 8012cbc:	08012e05 	.word	0x08012e05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	68b9      	ldr	r1, [r7, #8]
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	f000 f964 	bl	8012f94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	699a      	ldr	r2, [r3, #24]
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	f042 0208 	orr.w	r2, r2, #8
 8012cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	699a      	ldr	r2, [r3, #24]
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	f022 0204 	bic.w	r2, r2, #4
 8012cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	6999      	ldr	r1, [r3, #24]
 8012cf2:	68bb      	ldr	r3, [r7, #8]
 8012cf4:	691a      	ldr	r2, [r3, #16]
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	430a      	orrs	r2, r1
 8012cfc:	619a      	str	r2, [r3, #24]
      break;
 8012cfe:	e0a5      	b.n	8012e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	68b9      	ldr	r1, [r7, #8]
 8012d06:	4618      	mov	r0, r3
 8012d08:	f000 f9d4 	bl	80130b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	699a      	ldr	r2, [r3, #24]
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	699a      	ldr	r2, [r3, #24]
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	6999      	ldr	r1, [r3, #24]
 8012d32:	68bb      	ldr	r3, [r7, #8]
 8012d34:	691b      	ldr	r3, [r3, #16]
 8012d36:	021a      	lsls	r2, r3, #8
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	430a      	orrs	r2, r1
 8012d3e:	619a      	str	r2, [r3, #24]
      break;
 8012d40:	e084      	b.n	8012e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	68b9      	ldr	r1, [r7, #8]
 8012d48:	4618      	mov	r0, r3
 8012d4a:	f000 fa3d 	bl	80131c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	69da      	ldr	r2, [r3, #28]
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	f042 0208 	orr.w	r2, r2, #8
 8012d5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	69da      	ldr	r2, [r3, #28]
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	f022 0204 	bic.w	r2, r2, #4
 8012d6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	69d9      	ldr	r1, [r3, #28]
 8012d74:	68bb      	ldr	r3, [r7, #8]
 8012d76:	691a      	ldr	r2, [r3, #16]
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	430a      	orrs	r2, r1
 8012d7e:	61da      	str	r2, [r3, #28]
      break;
 8012d80:	e064      	b.n	8012e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	68b9      	ldr	r1, [r7, #8]
 8012d88:	4618      	mov	r0, r3
 8012d8a:	f000 faa5 	bl	80132d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	69da      	ldr	r2, [r3, #28]
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	69da      	ldr	r2, [r3, #28]
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	69d9      	ldr	r1, [r3, #28]
 8012db4:	68bb      	ldr	r3, [r7, #8]
 8012db6:	691b      	ldr	r3, [r3, #16]
 8012db8:	021a      	lsls	r2, r3, #8
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	430a      	orrs	r2, r1
 8012dc0:	61da      	str	r2, [r3, #28]
      break;
 8012dc2:	e043      	b.n	8012e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	68b9      	ldr	r1, [r7, #8]
 8012dca:	4618      	mov	r0, r3
 8012dcc:	f000 faee 	bl	80133ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	f042 0208 	orr.w	r2, r2, #8
 8012dde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	f022 0204 	bic.w	r2, r2, #4
 8012dee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012df6:	68bb      	ldr	r3, [r7, #8]
 8012df8:	691a      	ldr	r2, [r3, #16]
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	430a      	orrs	r2, r1
 8012e00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012e02:	e023      	b.n	8012e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	68b9      	ldr	r1, [r7, #8]
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	f000 fb32 	bl	8013474 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012e1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012e2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012e36:	68bb      	ldr	r3, [r7, #8]
 8012e38:	691b      	ldr	r3, [r3, #16]
 8012e3a:	021a      	lsls	r2, r3, #8
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	430a      	orrs	r2, r1
 8012e42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8012e44:	e002      	b.n	8012e4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8012e46:	2301      	movs	r3, #1
 8012e48:	75fb      	strb	r3, [r7, #23]
      break;
 8012e4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	2200      	movs	r2, #0
 8012e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8012e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e56:	4618      	mov	r0, r3
 8012e58:	3718      	adds	r7, #24
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}
 8012e5e:	bf00      	nop

08012e60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012e60:	b480      	push	{r7}
 8012e62:	b085      	sub	sp, #20
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
 8012e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	4a40      	ldr	r2, [pc, #256]	; (8012f74 <TIM_Base_SetConfig+0x114>)
 8012e74:	4293      	cmp	r3, r2
 8012e76:	d013      	beq.n	8012ea0 <TIM_Base_SetConfig+0x40>
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012e7e:	d00f      	beq.n	8012ea0 <TIM_Base_SetConfig+0x40>
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	4a3d      	ldr	r2, [pc, #244]	; (8012f78 <TIM_Base_SetConfig+0x118>)
 8012e84:	4293      	cmp	r3, r2
 8012e86:	d00b      	beq.n	8012ea0 <TIM_Base_SetConfig+0x40>
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	4a3c      	ldr	r2, [pc, #240]	; (8012f7c <TIM_Base_SetConfig+0x11c>)
 8012e8c:	4293      	cmp	r3, r2
 8012e8e:	d007      	beq.n	8012ea0 <TIM_Base_SetConfig+0x40>
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	4a3b      	ldr	r2, [pc, #236]	; (8012f80 <TIM_Base_SetConfig+0x120>)
 8012e94:	4293      	cmp	r3, r2
 8012e96:	d003      	beq.n	8012ea0 <TIM_Base_SetConfig+0x40>
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	4a3a      	ldr	r2, [pc, #232]	; (8012f84 <TIM_Base_SetConfig+0x124>)
 8012e9c:	4293      	cmp	r3, r2
 8012e9e:	d108      	bne.n	8012eb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ea6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012ea8:	683b      	ldr	r3, [r7, #0]
 8012eaa:	685b      	ldr	r3, [r3, #4]
 8012eac:	68fa      	ldr	r2, [r7, #12]
 8012eae:	4313      	orrs	r3, r2
 8012eb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	4a2f      	ldr	r2, [pc, #188]	; (8012f74 <TIM_Base_SetConfig+0x114>)
 8012eb6:	4293      	cmp	r3, r2
 8012eb8:	d01f      	beq.n	8012efa <TIM_Base_SetConfig+0x9a>
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012ec0:	d01b      	beq.n	8012efa <TIM_Base_SetConfig+0x9a>
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	4a2c      	ldr	r2, [pc, #176]	; (8012f78 <TIM_Base_SetConfig+0x118>)
 8012ec6:	4293      	cmp	r3, r2
 8012ec8:	d017      	beq.n	8012efa <TIM_Base_SetConfig+0x9a>
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	4a2b      	ldr	r2, [pc, #172]	; (8012f7c <TIM_Base_SetConfig+0x11c>)
 8012ece:	4293      	cmp	r3, r2
 8012ed0:	d013      	beq.n	8012efa <TIM_Base_SetConfig+0x9a>
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	4a2a      	ldr	r2, [pc, #168]	; (8012f80 <TIM_Base_SetConfig+0x120>)
 8012ed6:	4293      	cmp	r3, r2
 8012ed8:	d00f      	beq.n	8012efa <TIM_Base_SetConfig+0x9a>
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	4a29      	ldr	r2, [pc, #164]	; (8012f84 <TIM_Base_SetConfig+0x124>)
 8012ede:	4293      	cmp	r3, r2
 8012ee0:	d00b      	beq.n	8012efa <TIM_Base_SetConfig+0x9a>
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	4a28      	ldr	r2, [pc, #160]	; (8012f88 <TIM_Base_SetConfig+0x128>)
 8012ee6:	4293      	cmp	r3, r2
 8012ee8:	d007      	beq.n	8012efa <TIM_Base_SetConfig+0x9a>
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	4a27      	ldr	r2, [pc, #156]	; (8012f8c <TIM_Base_SetConfig+0x12c>)
 8012eee:	4293      	cmp	r3, r2
 8012ef0:	d003      	beq.n	8012efa <TIM_Base_SetConfig+0x9a>
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	4a26      	ldr	r2, [pc, #152]	; (8012f90 <TIM_Base_SetConfig+0x130>)
 8012ef6:	4293      	cmp	r3, r2
 8012ef8:	d108      	bne.n	8012f0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012f02:	683b      	ldr	r3, [r7, #0]
 8012f04:	68db      	ldr	r3, [r3, #12]
 8012f06:	68fa      	ldr	r2, [r7, #12]
 8012f08:	4313      	orrs	r3, r2
 8012f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012f12:	683b      	ldr	r3, [r7, #0]
 8012f14:	695b      	ldr	r3, [r3, #20]
 8012f16:	4313      	orrs	r3, r2
 8012f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	68fa      	ldr	r2, [r7, #12]
 8012f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	689a      	ldr	r2, [r3, #8]
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012f28:	683b      	ldr	r3, [r7, #0]
 8012f2a:	681a      	ldr	r2, [r3, #0]
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	4a10      	ldr	r2, [pc, #64]	; (8012f74 <TIM_Base_SetConfig+0x114>)
 8012f34:	4293      	cmp	r3, r2
 8012f36:	d00f      	beq.n	8012f58 <TIM_Base_SetConfig+0xf8>
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	4a12      	ldr	r2, [pc, #72]	; (8012f84 <TIM_Base_SetConfig+0x124>)
 8012f3c:	4293      	cmp	r3, r2
 8012f3e:	d00b      	beq.n	8012f58 <TIM_Base_SetConfig+0xf8>
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	4a11      	ldr	r2, [pc, #68]	; (8012f88 <TIM_Base_SetConfig+0x128>)
 8012f44:	4293      	cmp	r3, r2
 8012f46:	d007      	beq.n	8012f58 <TIM_Base_SetConfig+0xf8>
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	4a10      	ldr	r2, [pc, #64]	; (8012f8c <TIM_Base_SetConfig+0x12c>)
 8012f4c:	4293      	cmp	r3, r2
 8012f4e:	d003      	beq.n	8012f58 <TIM_Base_SetConfig+0xf8>
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	4a0f      	ldr	r2, [pc, #60]	; (8012f90 <TIM_Base_SetConfig+0x130>)
 8012f54:	4293      	cmp	r3, r2
 8012f56:	d103      	bne.n	8012f60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012f58:	683b      	ldr	r3, [r7, #0]
 8012f5a:	691a      	ldr	r2, [r3, #16]
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	2201      	movs	r2, #1
 8012f64:	615a      	str	r2, [r3, #20]
}
 8012f66:	bf00      	nop
 8012f68:	3714      	adds	r7, #20
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f70:	4770      	bx	lr
 8012f72:	bf00      	nop
 8012f74:	40012c00 	.word	0x40012c00
 8012f78:	40000400 	.word	0x40000400
 8012f7c:	40000800 	.word	0x40000800
 8012f80:	40000c00 	.word	0x40000c00
 8012f84:	40013400 	.word	0x40013400
 8012f88:	40014000 	.word	0x40014000
 8012f8c:	40014400 	.word	0x40014400
 8012f90:	40014800 	.word	0x40014800

08012f94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8012f94:	b480      	push	{r7}
 8012f96:	b087      	sub	sp, #28
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
 8012f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	6a1b      	ldr	r3, [r3, #32]
 8012fa2:	f023 0201 	bic.w	r2, r3, #1
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	6a1b      	ldr	r3, [r3, #32]
 8012fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	685b      	ldr	r3, [r3, #4]
 8012fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	699b      	ldr	r3, [r3, #24]
 8012fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	f023 0303 	bic.w	r3, r3, #3
 8012fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012fd0:	683b      	ldr	r3, [r7, #0]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	68fa      	ldr	r2, [r7, #12]
 8012fd6:	4313      	orrs	r3, r2
 8012fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8012fda:	697b      	ldr	r3, [r7, #20]
 8012fdc:	f023 0302 	bic.w	r3, r3, #2
 8012fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012fe2:	683b      	ldr	r3, [r7, #0]
 8012fe4:	689b      	ldr	r3, [r3, #8]
 8012fe6:	697a      	ldr	r2, [r7, #20]
 8012fe8:	4313      	orrs	r3, r2
 8012fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	4a2c      	ldr	r2, [pc, #176]	; (80130a0 <TIM_OC1_SetConfig+0x10c>)
 8012ff0:	4293      	cmp	r3, r2
 8012ff2:	d00f      	beq.n	8013014 <TIM_OC1_SetConfig+0x80>
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	4a2b      	ldr	r2, [pc, #172]	; (80130a4 <TIM_OC1_SetConfig+0x110>)
 8012ff8:	4293      	cmp	r3, r2
 8012ffa:	d00b      	beq.n	8013014 <TIM_OC1_SetConfig+0x80>
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	4a2a      	ldr	r2, [pc, #168]	; (80130a8 <TIM_OC1_SetConfig+0x114>)
 8013000:	4293      	cmp	r3, r2
 8013002:	d007      	beq.n	8013014 <TIM_OC1_SetConfig+0x80>
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	4a29      	ldr	r2, [pc, #164]	; (80130ac <TIM_OC1_SetConfig+0x118>)
 8013008:	4293      	cmp	r3, r2
 801300a:	d003      	beq.n	8013014 <TIM_OC1_SetConfig+0x80>
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	4a28      	ldr	r2, [pc, #160]	; (80130b0 <TIM_OC1_SetConfig+0x11c>)
 8013010:	4293      	cmp	r3, r2
 8013012:	d10c      	bne.n	801302e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013014:	697b      	ldr	r3, [r7, #20]
 8013016:	f023 0308 	bic.w	r3, r3, #8
 801301a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	68db      	ldr	r3, [r3, #12]
 8013020:	697a      	ldr	r2, [r7, #20]
 8013022:	4313      	orrs	r3, r2
 8013024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013026:	697b      	ldr	r3, [r7, #20]
 8013028:	f023 0304 	bic.w	r3, r3, #4
 801302c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	4a1b      	ldr	r2, [pc, #108]	; (80130a0 <TIM_OC1_SetConfig+0x10c>)
 8013032:	4293      	cmp	r3, r2
 8013034:	d00f      	beq.n	8013056 <TIM_OC1_SetConfig+0xc2>
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	4a1a      	ldr	r2, [pc, #104]	; (80130a4 <TIM_OC1_SetConfig+0x110>)
 801303a:	4293      	cmp	r3, r2
 801303c:	d00b      	beq.n	8013056 <TIM_OC1_SetConfig+0xc2>
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	4a19      	ldr	r2, [pc, #100]	; (80130a8 <TIM_OC1_SetConfig+0x114>)
 8013042:	4293      	cmp	r3, r2
 8013044:	d007      	beq.n	8013056 <TIM_OC1_SetConfig+0xc2>
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	4a18      	ldr	r2, [pc, #96]	; (80130ac <TIM_OC1_SetConfig+0x118>)
 801304a:	4293      	cmp	r3, r2
 801304c:	d003      	beq.n	8013056 <TIM_OC1_SetConfig+0xc2>
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	4a17      	ldr	r2, [pc, #92]	; (80130b0 <TIM_OC1_SetConfig+0x11c>)
 8013052:	4293      	cmp	r3, r2
 8013054:	d111      	bne.n	801307a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013056:	693b      	ldr	r3, [r7, #16]
 8013058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801305c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801305e:	693b      	ldr	r3, [r7, #16]
 8013060:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013066:	683b      	ldr	r3, [r7, #0]
 8013068:	695b      	ldr	r3, [r3, #20]
 801306a:	693a      	ldr	r2, [r7, #16]
 801306c:	4313      	orrs	r3, r2
 801306e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013070:	683b      	ldr	r3, [r7, #0]
 8013072:	699b      	ldr	r3, [r3, #24]
 8013074:	693a      	ldr	r2, [r7, #16]
 8013076:	4313      	orrs	r3, r2
 8013078:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	693a      	ldr	r2, [r7, #16]
 801307e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	68fa      	ldr	r2, [r7, #12]
 8013084:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013086:	683b      	ldr	r3, [r7, #0]
 8013088:	685a      	ldr	r2, [r3, #4]
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	697a      	ldr	r2, [r7, #20]
 8013092:	621a      	str	r2, [r3, #32]
}
 8013094:	bf00      	nop
 8013096:	371c      	adds	r7, #28
 8013098:	46bd      	mov	sp, r7
 801309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801309e:	4770      	bx	lr
 80130a0:	40012c00 	.word	0x40012c00
 80130a4:	40013400 	.word	0x40013400
 80130a8:	40014000 	.word	0x40014000
 80130ac:	40014400 	.word	0x40014400
 80130b0:	40014800 	.word	0x40014800

080130b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80130b4:	b480      	push	{r7}
 80130b6:	b087      	sub	sp, #28
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
 80130bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	6a1b      	ldr	r3, [r3, #32]
 80130c2:	f023 0210 	bic.w	r2, r3, #16
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	6a1b      	ldr	r3, [r3, #32]
 80130ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	685b      	ldr	r3, [r3, #4]
 80130d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	699b      	ldr	r3, [r3, #24]
 80130da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80130e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80130e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80130ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80130f0:	683b      	ldr	r3, [r7, #0]
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	021b      	lsls	r3, r3, #8
 80130f6:	68fa      	ldr	r2, [r7, #12]
 80130f8:	4313      	orrs	r3, r2
 80130fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80130fc:	697b      	ldr	r3, [r7, #20]
 80130fe:	f023 0320 	bic.w	r3, r3, #32
 8013102:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013104:	683b      	ldr	r3, [r7, #0]
 8013106:	689b      	ldr	r3, [r3, #8]
 8013108:	011b      	lsls	r3, r3, #4
 801310a:	697a      	ldr	r2, [r7, #20]
 801310c:	4313      	orrs	r3, r2
 801310e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	4a28      	ldr	r2, [pc, #160]	; (80131b4 <TIM_OC2_SetConfig+0x100>)
 8013114:	4293      	cmp	r3, r2
 8013116:	d003      	beq.n	8013120 <TIM_OC2_SetConfig+0x6c>
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	4a27      	ldr	r2, [pc, #156]	; (80131b8 <TIM_OC2_SetConfig+0x104>)
 801311c:	4293      	cmp	r3, r2
 801311e:	d10d      	bne.n	801313c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013120:	697b      	ldr	r3, [r7, #20]
 8013122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013128:	683b      	ldr	r3, [r7, #0]
 801312a:	68db      	ldr	r3, [r3, #12]
 801312c:	011b      	lsls	r3, r3, #4
 801312e:	697a      	ldr	r2, [r7, #20]
 8013130:	4313      	orrs	r3, r2
 8013132:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013134:	697b      	ldr	r3, [r7, #20]
 8013136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801313a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	4a1d      	ldr	r2, [pc, #116]	; (80131b4 <TIM_OC2_SetConfig+0x100>)
 8013140:	4293      	cmp	r3, r2
 8013142:	d00f      	beq.n	8013164 <TIM_OC2_SetConfig+0xb0>
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	4a1c      	ldr	r2, [pc, #112]	; (80131b8 <TIM_OC2_SetConfig+0x104>)
 8013148:	4293      	cmp	r3, r2
 801314a:	d00b      	beq.n	8013164 <TIM_OC2_SetConfig+0xb0>
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	4a1b      	ldr	r2, [pc, #108]	; (80131bc <TIM_OC2_SetConfig+0x108>)
 8013150:	4293      	cmp	r3, r2
 8013152:	d007      	beq.n	8013164 <TIM_OC2_SetConfig+0xb0>
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	4a1a      	ldr	r2, [pc, #104]	; (80131c0 <TIM_OC2_SetConfig+0x10c>)
 8013158:	4293      	cmp	r3, r2
 801315a:	d003      	beq.n	8013164 <TIM_OC2_SetConfig+0xb0>
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	4a19      	ldr	r2, [pc, #100]	; (80131c4 <TIM_OC2_SetConfig+0x110>)
 8013160:	4293      	cmp	r3, r2
 8013162:	d113      	bne.n	801318c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013164:	693b      	ldr	r3, [r7, #16]
 8013166:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801316a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801316c:	693b      	ldr	r3, [r7, #16]
 801316e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013172:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013174:	683b      	ldr	r3, [r7, #0]
 8013176:	695b      	ldr	r3, [r3, #20]
 8013178:	009b      	lsls	r3, r3, #2
 801317a:	693a      	ldr	r2, [r7, #16]
 801317c:	4313      	orrs	r3, r2
 801317e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013180:	683b      	ldr	r3, [r7, #0]
 8013182:	699b      	ldr	r3, [r3, #24]
 8013184:	009b      	lsls	r3, r3, #2
 8013186:	693a      	ldr	r2, [r7, #16]
 8013188:	4313      	orrs	r3, r2
 801318a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	693a      	ldr	r2, [r7, #16]
 8013190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	68fa      	ldr	r2, [r7, #12]
 8013196:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013198:	683b      	ldr	r3, [r7, #0]
 801319a:	685a      	ldr	r2, [r3, #4]
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	697a      	ldr	r2, [r7, #20]
 80131a4:	621a      	str	r2, [r3, #32]
}
 80131a6:	bf00      	nop
 80131a8:	371c      	adds	r7, #28
 80131aa:	46bd      	mov	sp, r7
 80131ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b0:	4770      	bx	lr
 80131b2:	bf00      	nop
 80131b4:	40012c00 	.word	0x40012c00
 80131b8:	40013400 	.word	0x40013400
 80131bc:	40014000 	.word	0x40014000
 80131c0:	40014400 	.word	0x40014400
 80131c4:	40014800 	.word	0x40014800

080131c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80131c8:	b480      	push	{r7}
 80131ca:	b087      	sub	sp, #28
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	6078      	str	r0, [r7, #4]
 80131d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	6a1b      	ldr	r3, [r3, #32]
 80131d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	6a1b      	ldr	r3, [r3, #32]
 80131e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	685b      	ldr	r3, [r3, #4]
 80131e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	69db      	ldr	r3, [r3, #28]
 80131ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80131f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80131fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	f023 0303 	bic.w	r3, r3, #3
 8013202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	68fa      	ldr	r2, [r7, #12]
 801320a:	4313      	orrs	r3, r2
 801320c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013216:	683b      	ldr	r3, [r7, #0]
 8013218:	689b      	ldr	r3, [r3, #8]
 801321a:	021b      	lsls	r3, r3, #8
 801321c:	697a      	ldr	r2, [r7, #20]
 801321e:	4313      	orrs	r3, r2
 8013220:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	4a27      	ldr	r2, [pc, #156]	; (80132c4 <TIM_OC3_SetConfig+0xfc>)
 8013226:	4293      	cmp	r3, r2
 8013228:	d003      	beq.n	8013232 <TIM_OC3_SetConfig+0x6a>
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	4a26      	ldr	r2, [pc, #152]	; (80132c8 <TIM_OC3_SetConfig+0x100>)
 801322e:	4293      	cmp	r3, r2
 8013230:	d10d      	bne.n	801324e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013232:	697b      	ldr	r3, [r7, #20]
 8013234:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013238:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801323a:	683b      	ldr	r3, [r7, #0]
 801323c:	68db      	ldr	r3, [r3, #12]
 801323e:	021b      	lsls	r3, r3, #8
 8013240:	697a      	ldr	r2, [r7, #20]
 8013242:	4313      	orrs	r3, r2
 8013244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013246:	697b      	ldr	r3, [r7, #20]
 8013248:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801324c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	4a1c      	ldr	r2, [pc, #112]	; (80132c4 <TIM_OC3_SetConfig+0xfc>)
 8013252:	4293      	cmp	r3, r2
 8013254:	d00f      	beq.n	8013276 <TIM_OC3_SetConfig+0xae>
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	4a1b      	ldr	r2, [pc, #108]	; (80132c8 <TIM_OC3_SetConfig+0x100>)
 801325a:	4293      	cmp	r3, r2
 801325c:	d00b      	beq.n	8013276 <TIM_OC3_SetConfig+0xae>
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	4a1a      	ldr	r2, [pc, #104]	; (80132cc <TIM_OC3_SetConfig+0x104>)
 8013262:	4293      	cmp	r3, r2
 8013264:	d007      	beq.n	8013276 <TIM_OC3_SetConfig+0xae>
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	4a19      	ldr	r2, [pc, #100]	; (80132d0 <TIM_OC3_SetConfig+0x108>)
 801326a:	4293      	cmp	r3, r2
 801326c:	d003      	beq.n	8013276 <TIM_OC3_SetConfig+0xae>
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	4a18      	ldr	r2, [pc, #96]	; (80132d4 <TIM_OC3_SetConfig+0x10c>)
 8013272:	4293      	cmp	r3, r2
 8013274:	d113      	bne.n	801329e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013276:	693b      	ldr	r3, [r7, #16]
 8013278:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801327c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801327e:	693b      	ldr	r3, [r7, #16]
 8013280:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013286:	683b      	ldr	r3, [r7, #0]
 8013288:	695b      	ldr	r3, [r3, #20]
 801328a:	011b      	lsls	r3, r3, #4
 801328c:	693a      	ldr	r2, [r7, #16]
 801328e:	4313      	orrs	r3, r2
 8013290:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013292:	683b      	ldr	r3, [r7, #0]
 8013294:	699b      	ldr	r3, [r3, #24]
 8013296:	011b      	lsls	r3, r3, #4
 8013298:	693a      	ldr	r2, [r7, #16]
 801329a:	4313      	orrs	r3, r2
 801329c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	693a      	ldr	r2, [r7, #16]
 80132a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	68fa      	ldr	r2, [r7, #12]
 80132a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80132aa:	683b      	ldr	r3, [r7, #0]
 80132ac:	685a      	ldr	r2, [r3, #4]
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	697a      	ldr	r2, [r7, #20]
 80132b6:	621a      	str	r2, [r3, #32]
}
 80132b8:	bf00      	nop
 80132ba:	371c      	adds	r7, #28
 80132bc:	46bd      	mov	sp, r7
 80132be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c2:	4770      	bx	lr
 80132c4:	40012c00 	.word	0x40012c00
 80132c8:	40013400 	.word	0x40013400
 80132cc:	40014000 	.word	0x40014000
 80132d0:	40014400 	.word	0x40014400
 80132d4:	40014800 	.word	0x40014800

080132d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80132d8:	b480      	push	{r7}
 80132da:	b087      	sub	sp, #28
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
 80132e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	6a1b      	ldr	r3, [r3, #32]
 80132e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	6a1b      	ldr	r3, [r3, #32]
 80132f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	685b      	ldr	r3, [r3, #4]
 80132f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	69db      	ldr	r3, [r3, #28]
 80132fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801330a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013314:	683b      	ldr	r3, [r7, #0]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	021b      	lsls	r3, r3, #8
 801331a:	68fa      	ldr	r2, [r7, #12]
 801331c:	4313      	orrs	r3, r2
 801331e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8013320:	693b      	ldr	r3, [r7, #16]
 8013322:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013326:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013328:	683b      	ldr	r3, [r7, #0]
 801332a:	689b      	ldr	r3, [r3, #8]
 801332c:	031b      	lsls	r3, r3, #12
 801332e:	693a      	ldr	r2, [r7, #16]
 8013330:	4313      	orrs	r3, r2
 8013332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	4a18      	ldr	r2, [pc, #96]	; (8013398 <TIM_OC4_SetConfig+0xc0>)
 8013338:	4293      	cmp	r3, r2
 801333a:	d00f      	beq.n	801335c <TIM_OC4_SetConfig+0x84>
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	4a17      	ldr	r2, [pc, #92]	; (801339c <TIM_OC4_SetConfig+0xc4>)
 8013340:	4293      	cmp	r3, r2
 8013342:	d00b      	beq.n	801335c <TIM_OC4_SetConfig+0x84>
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	4a16      	ldr	r2, [pc, #88]	; (80133a0 <TIM_OC4_SetConfig+0xc8>)
 8013348:	4293      	cmp	r3, r2
 801334a:	d007      	beq.n	801335c <TIM_OC4_SetConfig+0x84>
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	4a15      	ldr	r2, [pc, #84]	; (80133a4 <TIM_OC4_SetConfig+0xcc>)
 8013350:	4293      	cmp	r3, r2
 8013352:	d003      	beq.n	801335c <TIM_OC4_SetConfig+0x84>
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	4a14      	ldr	r2, [pc, #80]	; (80133a8 <TIM_OC4_SetConfig+0xd0>)
 8013358:	4293      	cmp	r3, r2
 801335a:	d109      	bne.n	8013370 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801335c:	697b      	ldr	r3, [r7, #20]
 801335e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013362:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8013364:	683b      	ldr	r3, [r7, #0]
 8013366:	695b      	ldr	r3, [r3, #20]
 8013368:	019b      	lsls	r3, r3, #6
 801336a:	697a      	ldr	r2, [r7, #20]
 801336c:	4313      	orrs	r3, r2
 801336e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	697a      	ldr	r2, [r7, #20]
 8013374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	68fa      	ldr	r2, [r7, #12]
 801337a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801337c:	683b      	ldr	r3, [r7, #0]
 801337e:	685a      	ldr	r2, [r3, #4]
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	693a      	ldr	r2, [r7, #16]
 8013388:	621a      	str	r2, [r3, #32]
}
 801338a:	bf00      	nop
 801338c:	371c      	adds	r7, #28
 801338e:	46bd      	mov	sp, r7
 8013390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013394:	4770      	bx	lr
 8013396:	bf00      	nop
 8013398:	40012c00 	.word	0x40012c00
 801339c:	40013400 	.word	0x40013400
 80133a0:	40014000 	.word	0x40014000
 80133a4:	40014400 	.word	0x40014400
 80133a8:	40014800 	.word	0x40014800

080133ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80133ac:	b480      	push	{r7}
 80133ae:	b087      	sub	sp, #28
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
 80133b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	6a1b      	ldr	r3, [r3, #32]
 80133ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	6a1b      	ldr	r3, [r3, #32]
 80133c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	685b      	ldr	r3, [r3, #4]
 80133cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80133d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80133da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80133de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	68fa      	ldr	r2, [r7, #12]
 80133e6:	4313      	orrs	r3, r2
 80133e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80133ea:	693b      	ldr	r3, [r7, #16]
 80133ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80133f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	689b      	ldr	r3, [r3, #8]
 80133f6:	041b      	lsls	r3, r3, #16
 80133f8:	693a      	ldr	r2, [r7, #16]
 80133fa:	4313      	orrs	r3, r2
 80133fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	4a17      	ldr	r2, [pc, #92]	; (8013460 <TIM_OC5_SetConfig+0xb4>)
 8013402:	4293      	cmp	r3, r2
 8013404:	d00f      	beq.n	8013426 <TIM_OC5_SetConfig+0x7a>
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	4a16      	ldr	r2, [pc, #88]	; (8013464 <TIM_OC5_SetConfig+0xb8>)
 801340a:	4293      	cmp	r3, r2
 801340c:	d00b      	beq.n	8013426 <TIM_OC5_SetConfig+0x7a>
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	4a15      	ldr	r2, [pc, #84]	; (8013468 <TIM_OC5_SetConfig+0xbc>)
 8013412:	4293      	cmp	r3, r2
 8013414:	d007      	beq.n	8013426 <TIM_OC5_SetConfig+0x7a>
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	4a14      	ldr	r2, [pc, #80]	; (801346c <TIM_OC5_SetConfig+0xc0>)
 801341a:	4293      	cmp	r3, r2
 801341c:	d003      	beq.n	8013426 <TIM_OC5_SetConfig+0x7a>
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	4a13      	ldr	r2, [pc, #76]	; (8013470 <TIM_OC5_SetConfig+0xc4>)
 8013422:	4293      	cmp	r3, r2
 8013424:	d109      	bne.n	801343a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013426:	697b      	ldr	r3, [r7, #20]
 8013428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801342c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801342e:	683b      	ldr	r3, [r7, #0]
 8013430:	695b      	ldr	r3, [r3, #20]
 8013432:	021b      	lsls	r3, r3, #8
 8013434:	697a      	ldr	r2, [r7, #20]
 8013436:	4313      	orrs	r3, r2
 8013438:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	697a      	ldr	r2, [r7, #20]
 801343e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	68fa      	ldr	r2, [r7, #12]
 8013444:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013446:	683b      	ldr	r3, [r7, #0]
 8013448:	685a      	ldr	r2, [r3, #4]
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	693a      	ldr	r2, [r7, #16]
 8013452:	621a      	str	r2, [r3, #32]
}
 8013454:	bf00      	nop
 8013456:	371c      	adds	r7, #28
 8013458:	46bd      	mov	sp, r7
 801345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345e:	4770      	bx	lr
 8013460:	40012c00 	.word	0x40012c00
 8013464:	40013400 	.word	0x40013400
 8013468:	40014000 	.word	0x40014000
 801346c:	40014400 	.word	0x40014400
 8013470:	40014800 	.word	0x40014800

08013474 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013474:	b480      	push	{r7}
 8013476:	b087      	sub	sp, #28
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
 801347c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	6a1b      	ldr	r3, [r3, #32]
 8013482:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	6a1b      	ldr	r3, [r3, #32]
 801348e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	685b      	ldr	r3, [r3, #4]
 8013494:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801349a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80134a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80134a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80134a8:	683b      	ldr	r3, [r7, #0]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	021b      	lsls	r3, r3, #8
 80134ae:	68fa      	ldr	r2, [r7, #12]
 80134b0:	4313      	orrs	r3, r2
 80134b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80134b4:	693b      	ldr	r3, [r7, #16]
 80134b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80134ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	689b      	ldr	r3, [r3, #8]
 80134c0:	051b      	lsls	r3, r3, #20
 80134c2:	693a      	ldr	r2, [r7, #16]
 80134c4:	4313      	orrs	r3, r2
 80134c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	4a18      	ldr	r2, [pc, #96]	; (801352c <TIM_OC6_SetConfig+0xb8>)
 80134cc:	4293      	cmp	r3, r2
 80134ce:	d00f      	beq.n	80134f0 <TIM_OC6_SetConfig+0x7c>
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	4a17      	ldr	r2, [pc, #92]	; (8013530 <TIM_OC6_SetConfig+0xbc>)
 80134d4:	4293      	cmp	r3, r2
 80134d6:	d00b      	beq.n	80134f0 <TIM_OC6_SetConfig+0x7c>
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	4a16      	ldr	r2, [pc, #88]	; (8013534 <TIM_OC6_SetConfig+0xc0>)
 80134dc:	4293      	cmp	r3, r2
 80134de:	d007      	beq.n	80134f0 <TIM_OC6_SetConfig+0x7c>
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	4a15      	ldr	r2, [pc, #84]	; (8013538 <TIM_OC6_SetConfig+0xc4>)
 80134e4:	4293      	cmp	r3, r2
 80134e6:	d003      	beq.n	80134f0 <TIM_OC6_SetConfig+0x7c>
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	4a14      	ldr	r2, [pc, #80]	; (801353c <TIM_OC6_SetConfig+0xc8>)
 80134ec:	4293      	cmp	r3, r2
 80134ee:	d109      	bne.n	8013504 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80134f0:	697b      	ldr	r3, [r7, #20]
 80134f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80134f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80134f8:	683b      	ldr	r3, [r7, #0]
 80134fa:	695b      	ldr	r3, [r3, #20]
 80134fc:	029b      	lsls	r3, r3, #10
 80134fe:	697a      	ldr	r2, [r7, #20]
 8013500:	4313      	orrs	r3, r2
 8013502:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	697a      	ldr	r2, [r7, #20]
 8013508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	68fa      	ldr	r2, [r7, #12]
 801350e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013510:	683b      	ldr	r3, [r7, #0]
 8013512:	685a      	ldr	r2, [r3, #4]
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	693a      	ldr	r2, [r7, #16]
 801351c:	621a      	str	r2, [r3, #32]
}
 801351e:	bf00      	nop
 8013520:	371c      	adds	r7, #28
 8013522:	46bd      	mov	sp, r7
 8013524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013528:	4770      	bx	lr
 801352a:	bf00      	nop
 801352c:	40012c00 	.word	0x40012c00
 8013530:	40013400 	.word	0x40013400
 8013534:	40014000 	.word	0x40014000
 8013538:	40014400 	.word	0x40014400
 801353c:	40014800 	.word	0x40014800

08013540 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013540:	b480      	push	{r7}
 8013542:	b087      	sub	sp, #28
 8013544:	af00      	add	r7, sp, #0
 8013546:	60f8      	str	r0, [r7, #12]
 8013548:	60b9      	str	r1, [r7, #8]
 801354a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	f003 031f 	and.w	r3, r3, #31
 8013552:	2201      	movs	r2, #1
 8013554:	fa02 f303 	lsl.w	r3, r2, r3
 8013558:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	6a1a      	ldr	r2, [r3, #32]
 801355e:	697b      	ldr	r3, [r7, #20]
 8013560:	43db      	mvns	r3, r3
 8013562:	401a      	ands	r2, r3
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	6a1a      	ldr	r2, [r3, #32]
 801356c:	68bb      	ldr	r3, [r7, #8]
 801356e:	f003 031f 	and.w	r3, r3, #31
 8013572:	6879      	ldr	r1, [r7, #4]
 8013574:	fa01 f303 	lsl.w	r3, r1, r3
 8013578:	431a      	orrs	r2, r3
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	621a      	str	r2, [r3, #32]
}
 801357e:	bf00      	nop
 8013580:	371c      	adds	r7, #28
 8013582:	46bd      	mov	sp, r7
 8013584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013588:	4770      	bx	lr
	...

0801358c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801358c:	b480      	push	{r7}
 801358e:	b085      	sub	sp, #20
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
 8013594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801359c:	2b01      	cmp	r3, #1
 801359e:	d101      	bne.n	80135a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80135a0:	2302      	movs	r3, #2
 80135a2:	e068      	b.n	8013676 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	2201      	movs	r2, #1
 80135a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	2202      	movs	r2, #2
 80135b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	685b      	ldr	r3, [r3, #4]
 80135ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	689b      	ldr	r3, [r3, #8]
 80135c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	4a2e      	ldr	r2, [pc, #184]	; (8013684 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80135ca:	4293      	cmp	r3, r2
 80135cc:	d004      	beq.n	80135d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	4a2d      	ldr	r2, [pc, #180]	; (8013688 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80135d4:	4293      	cmp	r3, r2
 80135d6:	d108      	bne.n	80135ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80135de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80135e0:	683b      	ldr	r3, [r7, #0]
 80135e2:	685b      	ldr	r3, [r3, #4]
 80135e4:	68fa      	ldr	r2, [r7, #12]
 80135e6:	4313      	orrs	r3, r2
 80135e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80135f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	68fa      	ldr	r2, [r7, #12]
 80135f8:	4313      	orrs	r3, r2
 80135fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	68fa      	ldr	r2, [r7, #12]
 8013602:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	4a1e      	ldr	r2, [pc, #120]	; (8013684 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 801360a:	4293      	cmp	r3, r2
 801360c:	d01d      	beq.n	801364a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013616:	d018      	beq.n	801364a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	4a1b      	ldr	r2, [pc, #108]	; (801368c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801361e:	4293      	cmp	r3, r2
 8013620:	d013      	beq.n	801364a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	4a1a      	ldr	r2, [pc, #104]	; (8013690 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013628:	4293      	cmp	r3, r2
 801362a:	d00e      	beq.n	801364a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	4a18      	ldr	r2, [pc, #96]	; (8013694 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8013632:	4293      	cmp	r3, r2
 8013634:	d009      	beq.n	801364a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	4a13      	ldr	r2, [pc, #76]	; (8013688 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 801363c:	4293      	cmp	r3, r2
 801363e:	d004      	beq.n	801364a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	4a14      	ldr	r2, [pc, #80]	; (8013698 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013646:	4293      	cmp	r3, r2
 8013648:	d10c      	bne.n	8013664 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801364a:	68bb      	ldr	r3, [r7, #8]
 801364c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013650:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013652:	683b      	ldr	r3, [r7, #0]
 8013654:	689b      	ldr	r3, [r3, #8]
 8013656:	68ba      	ldr	r2, [r7, #8]
 8013658:	4313      	orrs	r3, r2
 801365a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	68ba      	ldr	r2, [r7, #8]
 8013662:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	2201      	movs	r2, #1
 8013668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2200      	movs	r2, #0
 8013670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013674:	2300      	movs	r3, #0
}
 8013676:	4618      	mov	r0, r3
 8013678:	3714      	adds	r7, #20
 801367a:	46bd      	mov	sp, r7
 801367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013680:	4770      	bx	lr
 8013682:	bf00      	nop
 8013684:	40012c00 	.word	0x40012c00
 8013688:	40013400 	.word	0x40013400
 801368c:	40000400 	.word	0x40000400
 8013690:	40000800 	.word	0x40000800
 8013694:	40000c00 	.word	0x40000c00
 8013698:	40014000 	.word	0x40014000

0801369c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801369c:	b580      	push	{r7, lr}
 801369e:	b082      	sub	sp, #8
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d101      	bne.n	80136ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80136aa:	2301      	movs	r3, #1
 80136ac:	e040      	b.n	8013730 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d106      	bne.n	80136c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2200      	movs	r2, #0
 80136ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80136be:	6878      	ldr	r0, [r7, #4]
 80136c0:	f7ee ffae 	bl	8002620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	2224      	movs	r2, #36	; 0x24
 80136c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	681a      	ldr	r2, [r3, #0]
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	f022 0201 	bic.w	r2, r2, #1
 80136d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80136da:	6878      	ldr	r0, [r7, #4]
 80136dc:	f000 f82c 	bl	8013738 <UART_SetConfig>
 80136e0:	4603      	mov	r3, r0
 80136e2:	2b01      	cmp	r3, #1
 80136e4:	d101      	bne.n	80136ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80136e6:	2301      	movs	r3, #1
 80136e8:	e022      	b.n	8013730 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d002      	beq.n	80136f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80136f2:	6878      	ldr	r0, [r7, #4]
 80136f4:	f000 fad8 	bl	8013ca8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	681b      	ldr	r3, [r3, #0]
 80136fc:	685a      	ldr	r2, [r3, #4]
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013706:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	689a      	ldr	r2, [r3, #8]
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013716:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	681a      	ldr	r2, [r3, #0]
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	f042 0201 	orr.w	r2, r2, #1
 8013726:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013728:	6878      	ldr	r0, [r7, #4]
 801372a:	f000 fb5f 	bl	8013dec <UART_CheckIdleState>
 801372e:	4603      	mov	r3, r0
}
 8013730:	4618      	mov	r0, r3
 8013732:	3708      	adds	r7, #8
 8013734:	46bd      	mov	sp, r7
 8013736:	bd80      	pop	{r7, pc}

08013738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801373c:	b08a      	sub	sp, #40	; 0x28
 801373e:	af00      	add	r7, sp, #0
 8013740:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013742:	2300      	movs	r3, #0
 8013744:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	689a      	ldr	r2, [r3, #8]
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	691b      	ldr	r3, [r3, #16]
 8013750:	431a      	orrs	r2, r3
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	695b      	ldr	r3, [r3, #20]
 8013756:	431a      	orrs	r2, r3
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	69db      	ldr	r3, [r3, #28]
 801375c:	4313      	orrs	r3, r2
 801375e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	681a      	ldr	r2, [r3, #0]
 8013766:	4ba4      	ldr	r3, [pc, #656]	; (80139f8 <UART_SetConfig+0x2c0>)
 8013768:	4013      	ands	r3, r2
 801376a:	68fa      	ldr	r2, [r7, #12]
 801376c:	6812      	ldr	r2, [r2, #0]
 801376e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013770:	430b      	orrs	r3, r1
 8013772:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	685b      	ldr	r3, [r3, #4]
 801377a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	68da      	ldr	r2, [r3, #12]
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	430a      	orrs	r2, r1
 8013788:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	699b      	ldr	r3, [r3, #24]
 801378e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	4a99      	ldr	r2, [pc, #612]	; (80139fc <UART_SetConfig+0x2c4>)
 8013796:	4293      	cmp	r3, r2
 8013798:	d004      	beq.n	80137a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	6a1b      	ldr	r3, [r3, #32]
 801379e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137a0:	4313      	orrs	r3, r2
 80137a2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	689b      	ldr	r3, [r3, #8]
 80137aa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137b4:	430a      	orrs	r2, r1
 80137b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	4a90      	ldr	r2, [pc, #576]	; (8013a00 <UART_SetConfig+0x2c8>)
 80137be:	4293      	cmp	r3, r2
 80137c0:	d126      	bne.n	8013810 <UART_SetConfig+0xd8>
 80137c2:	4b90      	ldr	r3, [pc, #576]	; (8013a04 <UART_SetConfig+0x2cc>)
 80137c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80137c8:	f003 0303 	and.w	r3, r3, #3
 80137cc:	2b03      	cmp	r3, #3
 80137ce:	d81b      	bhi.n	8013808 <UART_SetConfig+0xd0>
 80137d0:	a201      	add	r2, pc, #4	; (adr r2, 80137d8 <UART_SetConfig+0xa0>)
 80137d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137d6:	bf00      	nop
 80137d8:	080137e9 	.word	0x080137e9
 80137dc:	080137f9 	.word	0x080137f9
 80137e0:	080137f1 	.word	0x080137f1
 80137e4:	08013801 	.word	0x08013801
 80137e8:	2301      	movs	r3, #1
 80137ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80137ee:	e116      	b.n	8013a1e <UART_SetConfig+0x2e6>
 80137f0:	2302      	movs	r3, #2
 80137f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80137f6:	e112      	b.n	8013a1e <UART_SetConfig+0x2e6>
 80137f8:	2304      	movs	r3, #4
 80137fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80137fe:	e10e      	b.n	8013a1e <UART_SetConfig+0x2e6>
 8013800:	2308      	movs	r3, #8
 8013802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013806:	e10a      	b.n	8013a1e <UART_SetConfig+0x2e6>
 8013808:	2310      	movs	r3, #16
 801380a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801380e:	e106      	b.n	8013a1e <UART_SetConfig+0x2e6>
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	4a7c      	ldr	r2, [pc, #496]	; (8013a08 <UART_SetConfig+0x2d0>)
 8013816:	4293      	cmp	r3, r2
 8013818:	d138      	bne.n	801388c <UART_SetConfig+0x154>
 801381a:	4b7a      	ldr	r3, [pc, #488]	; (8013a04 <UART_SetConfig+0x2cc>)
 801381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013820:	f003 030c 	and.w	r3, r3, #12
 8013824:	2b0c      	cmp	r3, #12
 8013826:	d82d      	bhi.n	8013884 <UART_SetConfig+0x14c>
 8013828:	a201      	add	r2, pc, #4	; (adr r2, 8013830 <UART_SetConfig+0xf8>)
 801382a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801382e:	bf00      	nop
 8013830:	08013865 	.word	0x08013865
 8013834:	08013885 	.word	0x08013885
 8013838:	08013885 	.word	0x08013885
 801383c:	08013885 	.word	0x08013885
 8013840:	08013875 	.word	0x08013875
 8013844:	08013885 	.word	0x08013885
 8013848:	08013885 	.word	0x08013885
 801384c:	08013885 	.word	0x08013885
 8013850:	0801386d 	.word	0x0801386d
 8013854:	08013885 	.word	0x08013885
 8013858:	08013885 	.word	0x08013885
 801385c:	08013885 	.word	0x08013885
 8013860:	0801387d 	.word	0x0801387d
 8013864:	2300      	movs	r3, #0
 8013866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801386a:	e0d8      	b.n	8013a1e <UART_SetConfig+0x2e6>
 801386c:	2302      	movs	r3, #2
 801386e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013872:	e0d4      	b.n	8013a1e <UART_SetConfig+0x2e6>
 8013874:	2304      	movs	r3, #4
 8013876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801387a:	e0d0      	b.n	8013a1e <UART_SetConfig+0x2e6>
 801387c:	2308      	movs	r3, #8
 801387e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013882:	e0cc      	b.n	8013a1e <UART_SetConfig+0x2e6>
 8013884:	2310      	movs	r3, #16
 8013886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801388a:	e0c8      	b.n	8013a1e <UART_SetConfig+0x2e6>
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	4a5e      	ldr	r2, [pc, #376]	; (8013a0c <UART_SetConfig+0x2d4>)
 8013892:	4293      	cmp	r3, r2
 8013894:	d125      	bne.n	80138e2 <UART_SetConfig+0x1aa>
 8013896:	4b5b      	ldr	r3, [pc, #364]	; (8013a04 <UART_SetConfig+0x2cc>)
 8013898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801389c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80138a0:	2b30      	cmp	r3, #48	; 0x30
 80138a2:	d016      	beq.n	80138d2 <UART_SetConfig+0x19a>
 80138a4:	2b30      	cmp	r3, #48	; 0x30
 80138a6:	d818      	bhi.n	80138da <UART_SetConfig+0x1a2>
 80138a8:	2b20      	cmp	r3, #32
 80138aa:	d00a      	beq.n	80138c2 <UART_SetConfig+0x18a>
 80138ac:	2b20      	cmp	r3, #32
 80138ae:	d814      	bhi.n	80138da <UART_SetConfig+0x1a2>
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d002      	beq.n	80138ba <UART_SetConfig+0x182>
 80138b4:	2b10      	cmp	r3, #16
 80138b6:	d008      	beq.n	80138ca <UART_SetConfig+0x192>
 80138b8:	e00f      	b.n	80138da <UART_SetConfig+0x1a2>
 80138ba:	2300      	movs	r3, #0
 80138bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80138c0:	e0ad      	b.n	8013a1e <UART_SetConfig+0x2e6>
 80138c2:	2302      	movs	r3, #2
 80138c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80138c8:	e0a9      	b.n	8013a1e <UART_SetConfig+0x2e6>
 80138ca:	2304      	movs	r3, #4
 80138cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80138d0:	e0a5      	b.n	8013a1e <UART_SetConfig+0x2e6>
 80138d2:	2308      	movs	r3, #8
 80138d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80138d8:	e0a1      	b.n	8013a1e <UART_SetConfig+0x2e6>
 80138da:	2310      	movs	r3, #16
 80138dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80138e0:	e09d      	b.n	8013a1e <UART_SetConfig+0x2e6>
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	4a4a      	ldr	r2, [pc, #296]	; (8013a10 <UART_SetConfig+0x2d8>)
 80138e8:	4293      	cmp	r3, r2
 80138ea:	d125      	bne.n	8013938 <UART_SetConfig+0x200>
 80138ec:	4b45      	ldr	r3, [pc, #276]	; (8013a04 <UART_SetConfig+0x2cc>)
 80138ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80138f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80138f6:	2bc0      	cmp	r3, #192	; 0xc0
 80138f8:	d016      	beq.n	8013928 <UART_SetConfig+0x1f0>
 80138fa:	2bc0      	cmp	r3, #192	; 0xc0
 80138fc:	d818      	bhi.n	8013930 <UART_SetConfig+0x1f8>
 80138fe:	2b80      	cmp	r3, #128	; 0x80
 8013900:	d00a      	beq.n	8013918 <UART_SetConfig+0x1e0>
 8013902:	2b80      	cmp	r3, #128	; 0x80
 8013904:	d814      	bhi.n	8013930 <UART_SetConfig+0x1f8>
 8013906:	2b00      	cmp	r3, #0
 8013908:	d002      	beq.n	8013910 <UART_SetConfig+0x1d8>
 801390a:	2b40      	cmp	r3, #64	; 0x40
 801390c:	d008      	beq.n	8013920 <UART_SetConfig+0x1e8>
 801390e:	e00f      	b.n	8013930 <UART_SetConfig+0x1f8>
 8013910:	2300      	movs	r3, #0
 8013912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013916:	e082      	b.n	8013a1e <UART_SetConfig+0x2e6>
 8013918:	2302      	movs	r3, #2
 801391a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801391e:	e07e      	b.n	8013a1e <UART_SetConfig+0x2e6>
 8013920:	2304      	movs	r3, #4
 8013922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013926:	e07a      	b.n	8013a1e <UART_SetConfig+0x2e6>
 8013928:	2308      	movs	r3, #8
 801392a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801392e:	e076      	b.n	8013a1e <UART_SetConfig+0x2e6>
 8013930:	2310      	movs	r3, #16
 8013932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013936:	e072      	b.n	8013a1e <UART_SetConfig+0x2e6>
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	4a35      	ldr	r2, [pc, #212]	; (8013a14 <UART_SetConfig+0x2dc>)
 801393e:	4293      	cmp	r3, r2
 8013940:	d12a      	bne.n	8013998 <UART_SetConfig+0x260>
 8013942:	4b30      	ldr	r3, [pc, #192]	; (8013a04 <UART_SetConfig+0x2cc>)
 8013944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013948:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801394c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013950:	d01a      	beq.n	8013988 <UART_SetConfig+0x250>
 8013952:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013956:	d81b      	bhi.n	8013990 <UART_SetConfig+0x258>
 8013958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801395c:	d00c      	beq.n	8013978 <UART_SetConfig+0x240>
 801395e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013962:	d815      	bhi.n	8013990 <UART_SetConfig+0x258>
 8013964:	2b00      	cmp	r3, #0
 8013966:	d003      	beq.n	8013970 <UART_SetConfig+0x238>
 8013968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801396c:	d008      	beq.n	8013980 <UART_SetConfig+0x248>
 801396e:	e00f      	b.n	8013990 <UART_SetConfig+0x258>
 8013970:	2300      	movs	r3, #0
 8013972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013976:	e052      	b.n	8013a1e <UART_SetConfig+0x2e6>
 8013978:	2302      	movs	r3, #2
 801397a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801397e:	e04e      	b.n	8013a1e <UART_SetConfig+0x2e6>
 8013980:	2304      	movs	r3, #4
 8013982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013986:	e04a      	b.n	8013a1e <UART_SetConfig+0x2e6>
 8013988:	2308      	movs	r3, #8
 801398a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801398e:	e046      	b.n	8013a1e <UART_SetConfig+0x2e6>
 8013990:	2310      	movs	r3, #16
 8013992:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013996:	e042      	b.n	8013a1e <UART_SetConfig+0x2e6>
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	4a17      	ldr	r2, [pc, #92]	; (80139fc <UART_SetConfig+0x2c4>)
 801399e:	4293      	cmp	r3, r2
 80139a0:	d13a      	bne.n	8013a18 <UART_SetConfig+0x2e0>
 80139a2:	4b18      	ldr	r3, [pc, #96]	; (8013a04 <UART_SetConfig+0x2cc>)
 80139a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80139a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80139ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80139b0:	d01a      	beq.n	80139e8 <UART_SetConfig+0x2b0>
 80139b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80139b6:	d81b      	bhi.n	80139f0 <UART_SetConfig+0x2b8>
 80139b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80139bc:	d00c      	beq.n	80139d8 <UART_SetConfig+0x2a0>
 80139be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80139c2:	d815      	bhi.n	80139f0 <UART_SetConfig+0x2b8>
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d003      	beq.n	80139d0 <UART_SetConfig+0x298>
 80139c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80139cc:	d008      	beq.n	80139e0 <UART_SetConfig+0x2a8>
 80139ce:	e00f      	b.n	80139f0 <UART_SetConfig+0x2b8>
 80139d0:	2300      	movs	r3, #0
 80139d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80139d6:	e022      	b.n	8013a1e <UART_SetConfig+0x2e6>
 80139d8:	2302      	movs	r3, #2
 80139da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80139de:	e01e      	b.n	8013a1e <UART_SetConfig+0x2e6>
 80139e0:	2304      	movs	r3, #4
 80139e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80139e6:	e01a      	b.n	8013a1e <UART_SetConfig+0x2e6>
 80139e8:	2308      	movs	r3, #8
 80139ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80139ee:	e016      	b.n	8013a1e <UART_SetConfig+0x2e6>
 80139f0:	2310      	movs	r3, #16
 80139f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80139f6:	e012      	b.n	8013a1e <UART_SetConfig+0x2e6>
 80139f8:	efff69f3 	.word	0xefff69f3
 80139fc:	40008000 	.word	0x40008000
 8013a00:	40013800 	.word	0x40013800
 8013a04:	40021000 	.word	0x40021000
 8013a08:	40004400 	.word	0x40004400
 8013a0c:	40004800 	.word	0x40004800
 8013a10:	40004c00 	.word	0x40004c00
 8013a14:	40005000 	.word	0x40005000
 8013a18:	2310      	movs	r3, #16
 8013a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	4a9f      	ldr	r2, [pc, #636]	; (8013ca0 <UART_SetConfig+0x568>)
 8013a24:	4293      	cmp	r3, r2
 8013a26:	d17a      	bne.n	8013b1e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013a28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013a2c:	2b08      	cmp	r3, #8
 8013a2e:	d824      	bhi.n	8013a7a <UART_SetConfig+0x342>
 8013a30:	a201      	add	r2, pc, #4	; (adr r2, 8013a38 <UART_SetConfig+0x300>)
 8013a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a36:	bf00      	nop
 8013a38:	08013a5d 	.word	0x08013a5d
 8013a3c:	08013a7b 	.word	0x08013a7b
 8013a40:	08013a65 	.word	0x08013a65
 8013a44:	08013a7b 	.word	0x08013a7b
 8013a48:	08013a6b 	.word	0x08013a6b
 8013a4c:	08013a7b 	.word	0x08013a7b
 8013a50:	08013a7b 	.word	0x08013a7b
 8013a54:	08013a7b 	.word	0x08013a7b
 8013a58:	08013a73 	.word	0x08013a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013a5c:	f7fc f988 	bl	800fd70 <HAL_RCC_GetPCLK1Freq>
 8013a60:	61f8      	str	r0, [r7, #28]
        break;
 8013a62:	e010      	b.n	8013a86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013a64:	4b8f      	ldr	r3, [pc, #572]	; (8013ca4 <UART_SetConfig+0x56c>)
 8013a66:	61fb      	str	r3, [r7, #28]
        break;
 8013a68:	e00d      	b.n	8013a86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013a6a:	f7fc f8e9 	bl	800fc40 <HAL_RCC_GetSysClockFreq>
 8013a6e:	61f8      	str	r0, [r7, #28]
        break;
 8013a70:	e009      	b.n	8013a86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013a76:	61fb      	str	r3, [r7, #28]
        break;
 8013a78:	e005      	b.n	8013a86 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8013a7e:	2301      	movs	r3, #1
 8013a80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8013a84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013a86:	69fb      	ldr	r3, [r7, #28]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	f000 80fb 	beq.w	8013c84 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	685a      	ldr	r2, [r3, #4]
 8013a92:	4613      	mov	r3, r2
 8013a94:	005b      	lsls	r3, r3, #1
 8013a96:	4413      	add	r3, r2
 8013a98:	69fa      	ldr	r2, [r7, #28]
 8013a9a:	429a      	cmp	r2, r3
 8013a9c:	d305      	bcc.n	8013aaa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	685b      	ldr	r3, [r3, #4]
 8013aa2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8013aa4:	69fa      	ldr	r2, [r7, #28]
 8013aa6:	429a      	cmp	r2, r3
 8013aa8:	d903      	bls.n	8013ab2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8013aaa:	2301      	movs	r3, #1
 8013aac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8013ab0:	e0e8      	b.n	8013c84 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8013ab2:	69fb      	ldr	r3, [r7, #28]
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	461c      	mov	r4, r3
 8013ab8:	4615      	mov	r5, r2
 8013aba:	f04f 0200 	mov.w	r2, #0
 8013abe:	f04f 0300 	mov.w	r3, #0
 8013ac2:	022b      	lsls	r3, r5, #8
 8013ac4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8013ac8:	0222      	lsls	r2, r4, #8
 8013aca:	68f9      	ldr	r1, [r7, #12]
 8013acc:	6849      	ldr	r1, [r1, #4]
 8013ace:	0849      	lsrs	r1, r1, #1
 8013ad0:	2000      	movs	r0, #0
 8013ad2:	4688      	mov	r8, r1
 8013ad4:	4681      	mov	r9, r0
 8013ad6:	eb12 0a08 	adds.w	sl, r2, r8
 8013ada:	eb43 0b09 	adc.w	fp, r3, r9
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	685b      	ldr	r3, [r3, #4]
 8013ae2:	2200      	movs	r2, #0
 8013ae4:	603b      	str	r3, [r7, #0]
 8013ae6:	607a      	str	r2, [r7, #4]
 8013ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013aec:	4650      	mov	r0, sl
 8013aee:	4659      	mov	r1, fp
 8013af0:	f7ec fbce 	bl	8000290 <__aeabi_uldivmod>
 8013af4:	4602      	mov	r2, r0
 8013af6:	460b      	mov	r3, r1
 8013af8:	4613      	mov	r3, r2
 8013afa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013afc:	69bb      	ldr	r3, [r7, #24]
 8013afe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013b02:	d308      	bcc.n	8013b16 <UART_SetConfig+0x3de>
 8013b04:	69bb      	ldr	r3, [r7, #24]
 8013b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013b0a:	d204      	bcs.n	8013b16 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	69ba      	ldr	r2, [r7, #24]
 8013b12:	60da      	str	r2, [r3, #12]
 8013b14:	e0b6      	b.n	8013c84 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8013b16:	2301      	movs	r3, #1
 8013b18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8013b1c:	e0b2      	b.n	8013c84 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	69db      	ldr	r3, [r3, #28]
 8013b22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013b26:	d15e      	bne.n	8013be6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8013b28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013b2c:	2b08      	cmp	r3, #8
 8013b2e:	d828      	bhi.n	8013b82 <UART_SetConfig+0x44a>
 8013b30:	a201      	add	r2, pc, #4	; (adr r2, 8013b38 <UART_SetConfig+0x400>)
 8013b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b36:	bf00      	nop
 8013b38:	08013b5d 	.word	0x08013b5d
 8013b3c:	08013b65 	.word	0x08013b65
 8013b40:	08013b6d 	.word	0x08013b6d
 8013b44:	08013b83 	.word	0x08013b83
 8013b48:	08013b73 	.word	0x08013b73
 8013b4c:	08013b83 	.word	0x08013b83
 8013b50:	08013b83 	.word	0x08013b83
 8013b54:	08013b83 	.word	0x08013b83
 8013b58:	08013b7b 	.word	0x08013b7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013b5c:	f7fc f908 	bl	800fd70 <HAL_RCC_GetPCLK1Freq>
 8013b60:	61f8      	str	r0, [r7, #28]
        break;
 8013b62:	e014      	b.n	8013b8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013b64:	f7fc f91a 	bl	800fd9c <HAL_RCC_GetPCLK2Freq>
 8013b68:	61f8      	str	r0, [r7, #28]
        break;
 8013b6a:	e010      	b.n	8013b8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013b6c:	4b4d      	ldr	r3, [pc, #308]	; (8013ca4 <UART_SetConfig+0x56c>)
 8013b6e:	61fb      	str	r3, [r7, #28]
        break;
 8013b70:	e00d      	b.n	8013b8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013b72:	f7fc f865 	bl	800fc40 <HAL_RCC_GetSysClockFreq>
 8013b76:	61f8      	str	r0, [r7, #28]
        break;
 8013b78:	e009      	b.n	8013b8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013b7e:	61fb      	str	r3, [r7, #28]
        break;
 8013b80:	e005      	b.n	8013b8e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8013b82:	2300      	movs	r3, #0
 8013b84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8013b86:	2301      	movs	r3, #1
 8013b88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8013b8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013b8e:	69fb      	ldr	r3, [r7, #28]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d077      	beq.n	8013c84 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8013b94:	69fb      	ldr	r3, [r7, #28]
 8013b96:	005a      	lsls	r2, r3, #1
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	685b      	ldr	r3, [r3, #4]
 8013b9c:	085b      	lsrs	r3, r3, #1
 8013b9e:	441a      	add	r2, r3
 8013ba0:	68fb      	ldr	r3, [r7, #12]
 8013ba2:	685b      	ldr	r3, [r3, #4]
 8013ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ba8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013baa:	69bb      	ldr	r3, [r7, #24]
 8013bac:	2b0f      	cmp	r3, #15
 8013bae:	d916      	bls.n	8013bde <UART_SetConfig+0x4a6>
 8013bb0:	69bb      	ldr	r3, [r7, #24]
 8013bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013bb6:	d212      	bcs.n	8013bde <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013bb8:	69bb      	ldr	r3, [r7, #24]
 8013bba:	b29b      	uxth	r3, r3
 8013bbc:	f023 030f 	bic.w	r3, r3, #15
 8013bc0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013bc2:	69bb      	ldr	r3, [r7, #24]
 8013bc4:	085b      	lsrs	r3, r3, #1
 8013bc6:	b29b      	uxth	r3, r3
 8013bc8:	f003 0307 	and.w	r3, r3, #7
 8013bcc:	b29a      	uxth	r2, r3
 8013bce:	8afb      	ldrh	r3, [r7, #22]
 8013bd0:	4313      	orrs	r3, r2
 8013bd2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	8afa      	ldrh	r2, [r7, #22]
 8013bda:	60da      	str	r2, [r3, #12]
 8013bdc:	e052      	b.n	8013c84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8013bde:	2301      	movs	r3, #1
 8013be0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8013be4:	e04e      	b.n	8013c84 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8013be6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013bea:	2b08      	cmp	r3, #8
 8013bec:	d827      	bhi.n	8013c3e <UART_SetConfig+0x506>
 8013bee:	a201      	add	r2, pc, #4	; (adr r2, 8013bf4 <UART_SetConfig+0x4bc>)
 8013bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bf4:	08013c19 	.word	0x08013c19
 8013bf8:	08013c21 	.word	0x08013c21
 8013bfc:	08013c29 	.word	0x08013c29
 8013c00:	08013c3f 	.word	0x08013c3f
 8013c04:	08013c2f 	.word	0x08013c2f
 8013c08:	08013c3f 	.word	0x08013c3f
 8013c0c:	08013c3f 	.word	0x08013c3f
 8013c10:	08013c3f 	.word	0x08013c3f
 8013c14:	08013c37 	.word	0x08013c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013c18:	f7fc f8aa 	bl	800fd70 <HAL_RCC_GetPCLK1Freq>
 8013c1c:	61f8      	str	r0, [r7, #28]
        break;
 8013c1e:	e014      	b.n	8013c4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013c20:	f7fc f8bc 	bl	800fd9c <HAL_RCC_GetPCLK2Freq>
 8013c24:	61f8      	str	r0, [r7, #28]
        break;
 8013c26:	e010      	b.n	8013c4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8013c28:	4b1e      	ldr	r3, [pc, #120]	; (8013ca4 <UART_SetConfig+0x56c>)
 8013c2a:	61fb      	str	r3, [r7, #28]
        break;
 8013c2c:	e00d      	b.n	8013c4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8013c2e:	f7fc f807 	bl	800fc40 <HAL_RCC_GetSysClockFreq>
 8013c32:	61f8      	str	r0, [r7, #28]
        break;
 8013c34:	e009      	b.n	8013c4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013c3a:	61fb      	str	r3, [r7, #28]
        break;
 8013c3c:	e005      	b.n	8013c4a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8013c3e:	2300      	movs	r3, #0
 8013c40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8013c42:	2301      	movs	r3, #1
 8013c44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8013c48:	bf00      	nop
    }

    if (pclk != 0U)
 8013c4a:	69fb      	ldr	r3, [r7, #28]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d019      	beq.n	8013c84 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	685b      	ldr	r3, [r3, #4]
 8013c54:	085a      	lsrs	r2, r3, #1
 8013c56:	69fb      	ldr	r3, [r7, #28]
 8013c58:	441a      	add	r2, r3
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	685b      	ldr	r3, [r3, #4]
 8013c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013c62:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013c64:	69bb      	ldr	r3, [r7, #24]
 8013c66:	2b0f      	cmp	r3, #15
 8013c68:	d909      	bls.n	8013c7e <UART_SetConfig+0x546>
 8013c6a:	69bb      	ldr	r3, [r7, #24]
 8013c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013c70:	d205      	bcs.n	8013c7e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013c72:	69bb      	ldr	r3, [r7, #24]
 8013c74:	b29a      	uxth	r2, r3
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	60da      	str	r2, [r3, #12]
 8013c7c:	e002      	b.n	8013c84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8013c7e:	2301      	movs	r3, #1
 8013c80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	2200      	movs	r2, #0
 8013c88:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	2200      	movs	r2, #0
 8013c8e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8013c90:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8013c94:	4618      	mov	r0, r3
 8013c96:	3728      	adds	r7, #40	; 0x28
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013c9e:	bf00      	nop
 8013ca0:	40008000 	.word	0x40008000
 8013ca4:	00f42400 	.word	0x00f42400

08013ca8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013ca8:	b480      	push	{r7}
 8013caa:	b083      	sub	sp, #12
 8013cac:	af00      	add	r7, sp, #0
 8013cae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cb4:	f003 0301 	and.w	r3, r3, #1
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d00a      	beq.n	8013cd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	685b      	ldr	r3, [r3, #4]
 8013cc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	430a      	orrs	r2, r1
 8013cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cd6:	f003 0302 	and.w	r3, r3, #2
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d00a      	beq.n	8013cf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	685b      	ldr	r3, [r3, #4]
 8013ce4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	430a      	orrs	r2, r1
 8013cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cf8:	f003 0304 	and.w	r3, r3, #4
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d00a      	beq.n	8013d16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	685b      	ldr	r3, [r3, #4]
 8013d06:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	430a      	orrs	r2, r1
 8013d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d1a:	f003 0308 	and.w	r3, r3, #8
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d00a      	beq.n	8013d38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	685b      	ldr	r3, [r3, #4]
 8013d28:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	681b      	ldr	r3, [r3, #0]
 8013d34:	430a      	orrs	r2, r1
 8013d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d3c:	f003 0310 	and.w	r3, r3, #16
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d00a      	beq.n	8013d5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	689b      	ldr	r3, [r3, #8]
 8013d4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	430a      	orrs	r2, r1
 8013d58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d5e:	f003 0320 	and.w	r3, r3, #32
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d00a      	beq.n	8013d7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	689b      	ldr	r3, [r3, #8]
 8013d6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	430a      	orrs	r2, r1
 8013d7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d01a      	beq.n	8013dbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	685b      	ldr	r3, [r3, #4]
 8013d8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	430a      	orrs	r2, r1
 8013d9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013da6:	d10a      	bne.n	8013dbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	685b      	ldr	r3, [r3, #4]
 8013dae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	430a      	orrs	r2, r1
 8013dbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d00a      	beq.n	8013de0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	685b      	ldr	r3, [r3, #4]
 8013dd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	430a      	orrs	r2, r1
 8013dde:	605a      	str	r2, [r3, #4]
  }
}
 8013de0:	bf00      	nop
 8013de2:	370c      	adds	r7, #12
 8013de4:	46bd      	mov	sp, r7
 8013de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dea:	4770      	bx	lr

08013dec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b086      	sub	sp, #24
 8013df0:	af02      	add	r7, sp, #8
 8013df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	2200      	movs	r2, #0
 8013df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013dfc:	f7f6 ff1c 	bl	800ac38 <HAL_GetTick>
 8013e00:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	f003 0308 	and.w	r3, r3, #8
 8013e0c:	2b08      	cmp	r3, #8
 8013e0e:	d10e      	bne.n	8013e2e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013e10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013e14:	9300      	str	r3, [sp, #0]
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	2200      	movs	r2, #0
 8013e1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013e1e:	6878      	ldr	r0, [r7, #4]
 8013e20:	f000 f82d 	bl	8013e7e <UART_WaitOnFlagUntilTimeout>
 8013e24:	4603      	mov	r3, r0
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d001      	beq.n	8013e2e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013e2a:	2303      	movs	r3, #3
 8013e2c:	e023      	b.n	8013e76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	f003 0304 	and.w	r3, r3, #4
 8013e38:	2b04      	cmp	r3, #4
 8013e3a:	d10e      	bne.n	8013e5a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013e3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013e40:	9300      	str	r3, [sp, #0]
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	2200      	movs	r2, #0
 8013e46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013e4a:	6878      	ldr	r0, [r7, #4]
 8013e4c:	f000 f817 	bl	8013e7e <UART_WaitOnFlagUntilTimeout>
 8013e50:	4603      	mov	r3, r0
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d001      	beq.n	8013e5a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013e56:	2303      	movs	r3, #3
 8013e58:	e00d      	b.n	8013e76 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	2220      	movs	r2, #32
 8013e5e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	2220      	movs	r2, #32
 8013e64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	2200      	movs	r2, #0
 8013e6a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	2200      	movs	r2, #0
 8013e70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8013e74:	2300      	movs	r3, #0
}
 8013e76:	4618      	mov	r0, r3
 8013e78:	3710      	adds	r7, #16
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	bd80      	pop	{r7, pc}

08013e7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013e7e:	b580      	push	{r7, lr}
 8013e80:	b09c      	sub	sp, #112	; 0x70
 8013e82:	af00      	add	r7, sp, #0
 8013e84:	60f8      	str	r0, [r7, #12]
 8013e86:	60b9      	str	r1, [r7, #8]
 8013e88:	603b      	str	r3, [r7, #0]
 8013e8a:	4613      	mov	r3, r2
 8013e8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013e8e:	e0a5      	b.n	8013fdc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013e92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e96:	f000 80a1 	beq.w	8013fdc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013e9a:	f7f6 fecd 	bl	800ac38 <HAL_GetTick>
 8013e9e:	4602      	mov	r2, r0
 8013ea0:	683b      	ldr	r3, [r7, #0]
 8013ea2:	1ad3      	subs	r3, r2, r3
 8013ea4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013ea6:	429a      	cmp	r2, r3
 8013ea8:	d302      	bcc.n	8013eb0 <UART_WaitOnFlagUntilTimeout+0x32>
 8013eaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d13e      	bne.n	8013f2e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013eb8:	e853 3f00 	ldrex	r3, [r3]
 8013ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ec0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013ec4:	667b      	str	r3, [r7, #100]	; 0x64
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	461a      	mov	r2, r3
 8013ecc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013ece:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013ed0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ed2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013ed4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013ed6:	e841 2300 	strex	r3, r2, [r1]
 8013eda:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8013edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d1e6      	bne.n	8013eb0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	3308      	adds	r3, #8
 8013ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013eec:	e853 3f00 	ldrex	r3, [r3]
 8013ef0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ef4:	f023 0301 	bic.w	r3, r3, #1
 8013ef8:	663b      	str	r3, [r7, #96]	; 0x60
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	3308      	adds	r3, #8
 8013f00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013f02:	64ba      	str	r2, [r7, #72]	; 0x48
 8013f04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013f08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013f0a:	e841 2300 	strex	r3, r2, [r1]
 8013f0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d1e5      	bne.n	8013ee2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	2220      	movs	r2, #32
 8013f1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	2220      	movs	r2, #32
 8013f20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	2200      	movs	r2, #0
 8013f26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8013f2a:	2303      	movs	r3, #3
 8013f2c:	e067      	b.n	8013ffe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	f003 0304 	and.w	r3, r3, #4
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d04f      	beq.n	8013fdc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	69db      	ldr	r3, [r3, #28]
 8013f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013f4a:	d147      	bne.n	8013fdc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013f54:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f5e:	e853 3f00 	ldrex	r3, [r3]
 8013f62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013f6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	461a      	mov	r2, r3
 8013f72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013f74:	637b      	str	r3, [r7, #52]	; 0x34
 8013f76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f7c:	e841 2300 	strex	r3, r2, [r1]
 8013f80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d1e6      	bne.n	8013f56 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	3308      	adds	r3, #8
 8013f8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f90:	697b      	ldr	r3, [r7, #20]
 8013f92:	e853 3f00 	ldrex	r3, [r3]
 8013f96:	613b      	str	r3, [r7, #16]
   return(result);
 8013f98:	693b      	ldr	r3, [r7, #16]
 8013f9a:	f023 0301 	bic.w	r3, r3, #1
 8013f9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	3308      	adds	r3, #8
 8013fa6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013fa8:	623a      	str	r2, [r7, #32]
 8013faa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fac:	69f9      	ldr	r1, [r7, #28]
 8013fae:	6a3a      	ldr	r2, [r7, #32]
 8013fb0:	e841 2300 	strex	r3, r2, [r1]
 8013fb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8013fb6:	69bb      	ldr	r3, [r7, #24]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d1e5      	bne.n	8013f88 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	2220      	movs	r2, #32
 8013fc0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	2220      	movs	r2, #32
 8013fc6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	2220      	movs	r2, #32
 8013fcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8013fd8:	2303      	movs	r3, #3
 8013fda:	e010      	b.n	8013ffe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	69da      	ldr	r2, [r3, #28]
 8013fe2:	68bb      	ldr	r3, [r7, #8]
 8013fe4:	4013      	ands	r3, r2
 8013fe6:	68ba      	ldr	r2, [r7, #8]
 8013fe8:	429a      	cmp	r2, r3
 8013fea:	bf0c      	ite	eq
 8013fec:	2301      	moveq	r3, #1
 8013fee:	2300      	movne	r3, #0
 8013ff0:	b2db      	uxtb	r3, r3
 8013ff2:	461a      	mov	r2, r3
 8013ff4:	79fb      	ldrb	r3, [r7, #7]
 8013ff6:	429a      	cmp	r2, r3
 8013ff8:	f43f af4a 	beq.w	8013e90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013ffc:	2300      	movs	r3, #0
}
 8013ffe:	4618      	mov	r0, r3
 8014000:	3770      	adds	r7, #112	; 0x70
 8014002:	46bd      	mov	sp, r7
 8014004:	bd80      	pop	{r7, pc}
	...

08014008 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8014008:	b480      	push	{r7}
 801400a:	b087      	sub	sp, #28
 801400c:	af00      	add	r7, sp, #0
 801400e:	6078      	str	r0, [r7, #4]
 8014010:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8014012:	683b      	ldr	r3, [r7, #0]
 8014014:	681a      	ldr	r2, [r3, #0]
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801401c:	683a      	ldr	r2, [r7, #0]
 801401e:	6812      	ldr	r2, [r2, #0]
 8014020:	f023 0101 	bic.w	r1, r3, #1
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 801402a:	683b      	ldr	r3, [r7, #0]
 801402c:	689b      	ldr	r3, [r3, #8]
 801402e:	2b08      	cmp	r3, #8
 8014030:	d102      	bne.n	8014038 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8014032:	2340      	movs	r3, #64	; 0x40
 8014034:	617b      	str	r3, [r7, #20]
 8014036:	e001      	b.n	801403c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8014038:	2300      	movs	r3, #0
 801403a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 801403c:	683b      	ldr	r3, [r7, #0]
 801403e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8014044:	683b      	ldr	r3, [r7, #0]
 8014046:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8014048:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 801404a:	683b      	ldr	r3, [r7, #0]
 801404c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 801404e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8014050:	683b      	ldr	r3, [r7, #0]
 8014052:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8014054:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8014056:	683b      	ldr	r3, [r7, #0]
 8014058:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 801405a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 801405c:	683b      	ldr	r3, [r7, #0]
 801405e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8014060:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8014062:	683b      	ldr	r3, [r7, #0]
 8014064:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8014066:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8014068:	683b      	ldr	r3, [r7, #0]
 801406a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 801406c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 801406e:	683b      	ldr	r3, [r7, #0]
 8014070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8014072:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8014074:	683b      	ldr	r3, [r7, #0]
 8014076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8014078:	431a      	orrs	r2, r3
              Init->WriteBurst);
 801407a:	683b      	ldr	r3, [r7, #0]
 801407c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 801407e:	4313      	orrs	r3, r2
 8014080:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8014082:	683b      	ldr	r3, [r7, #0]
 8014084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014086:	693a      	ldr	r2, [r7, #16]
 8014088:	4313      	orrs	r3, r2
 801408a:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 801408c:	683b      	ldr	r3, [r7, #0]
 801408e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014090:	693a      	ldr	r2, [r7, #16]
 8014092:	4313      	orrs	r3, r2
 8014094:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8014096:	683b      	ldr	r3, [r7, #0]
 8014098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801409a:	693a      	ldr	r2, [r7, #16]
 801409c:	4313      	orrs	r3, r2
 801409e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80140a0:	4b20      	ldr	r3, [pc, #128]	; (8014124 <FMC_NORSRAM_Init+0x11c>)
 80140a2:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80140a4:	68fb      	ldr	r3, [r7, #12]
 80140a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80140aa:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80140b2:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 80140b4:	68fb      	ldr	r3, [r7, #12]
 80140b6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80140ba:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80140bc:	683b      	ldr	r3, [r7, #0]
 80140be:	681a      	ldr	r2, [r3, #0]
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	43db      	mvns	r3, r3
 80140ca:	ea02 0103 	and.w	r1, r2, r3
 80140ce:	683b      	ldr	r3, [r7, #0]
 80140d0:	681a      	ldr	r2, [r3, #0]
 80140d2:	693b      	ldr	r3, [r7, #16]
 80140d4:	4319      	orrs	r1, r3
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80140dc:	683b      	ldr	r3, [r7, #0]
 80140de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80140e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80140e4:	d10c      	bne.n	8014100 <FMC_NORSRAM_Init+0xf8>
 80140e6:	683b      	ldr	r3, [r7, #0]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d008      	beq.n	8014100 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80140fa:	431a      	orrs	r2, r3
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8014100:	683b      	ldr	r3, [r7, #0]
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d006      	beq.n	8014116 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	681a      	ldr	r2, [r3, #0]
 801410c:	683b      	ldr	r3, [r7, #0]
 801410e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014110:	431a      	orrs	r2, r3
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 8014116:	2300      	movs	r3, #0
}
 8014118:	4618      	mov	r0, r3
 801411a:	371c      	adds	r7, #28
 801411c:	46bd      	mov	sp, r7
 801411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014122:	4770      	bx	lr
 8014124:	0008fb7f 	.word	0x0008fb7f

08014128 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8014128:	b480      	push	{r7}
 801412a:	b087      	sub	sp, #28
 801412c:	af00      	add	r7, sp, #0
 801412e:	60f8      	str	r0, [r7, #12]
 8014130:	60b9      	str	r1, [r7, #8]
 8014132:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	1c5a      	adds	r2, r3, #1
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801413e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8014142:	68bb      	ldr	r3, [r7, #8]
 8014144:	681a      	ldr	r2, [r3, #0]
 8014146:	68bb      	ldr	r3, [r7, #8]
 8014148:	685b      	ldr	r3, [r3, #4]
 801414a:	011b      	lsls	r3, r3, #4
 801414c:	431a      	orrs	r2, r3
 801414e:	68bb      	ldr	r3, [r7, #8]
 8014150:	689b      	ldr	r3, [r3, #8]
 8014152:	021b      	lsls	r3, r3, #8
 8014154:	431a      	orrs	r2, r3
 8014156:	68bb      	ldr	r3, [r7, #8]
 8014158:	691b      	ldr	r3, [r3, #16]
 801415a:	041b      	lsls	r3, r3, #16
 801415c:	431a      	orrs	r2, r3
 801415e:	68bb      	ldr	r3, [r7, #8]
 8014160:	695b      	ldr	r3, [r3, #20]
 8014162:	3b01      	subs	r3, #1
 8014164:	051b      	lsls	r3, r3, #20
 8014166:	431a      	orrs	r2, r3
 8014168:	68bb      	ldr	r3, [r7, #8]
 801416a:	699b      	ldr	r3, [r3, #24]
 801416c:	3b02      	subs	r3, #2
 801416e:	061b      	lsls	r3, r3, #24
 8014170:	431a      	orrs	r2, r3
 8014172:	68bb      	ldr	r3, [r7, #8]
 8014174:	69db      	ldr	r3, [r3, #28]
 8014176:	4313      	orrs	r3, r2
 8014178:	687a      	ldr	r2, [r7, #4]
 801417a:	3201      	adds	r2, #1
 801417c:	4319      	orrs	r1, r3
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801418c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014190:	d113      	bne.n	80141ba <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	685b      	ldr	r3, [r3, #4]
 8014196:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801419a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 801419c:	68bb      	ldr	r3, [r7, #8]
 801419e:	695b      	ldr	r3, [r3, #20]
 80141a0:	3b01      	subs	r3, #1
 80141a2:	051b      	lsls	r3, r3, #20
 80141a4:	697a      	ldr	r2, [r7, #20]
 80141a6:	4313      	orrs	r3, r2
 80141a8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	685b      	ldr	r3, [r3, #4]
 80141ae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80141b2:	697b      	ldr	r3, [r7, #20]
 80141b4:	431a      	orrs	r2, r3
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80141ba:	2300      	movs	r3, #0
}
 80141bc:	4618      	mov	r0, r3
 80141be:	371c      	adds	r7, #28
 80141c0:	46bd      	mov	sp, r7
 80141c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141c6:	4770      	bx	lr

080141c8 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80141c8:	b480      	push	{r7}
 80141ca:	b085      	sub	sp, #20
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	60f8      	str	r0, [r7, #12]
 80141d0:	60b9      	str	r1, [r7, #8]
 80141d2:	607a      	str	r2, [r7, #4]
 80141d4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80141d6:	683b      	ldr	r3, [r7, #0]
 80141d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80141dc:	d11d      	bne.n	801421a <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	687a      	ldr	r2, [r7, #4]
 80141e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80141e6:	4b13      	ldr	r3, [pc, #76]	; (8014234 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80141e8:	4013      	ands	r3, r2
 80141ea:	68ba      	ldr	r2, [r7, #8]
 80141ec:	6811      	ldr	r1, [r2, #0]
 80141ee:	68ba      	ldr	r2, [r7, #8]
 80141f0:	6852      	ldr	r2, [r2, #4]
 80141f2:	0112      	lsls	r2, r2, #4
 80141f4:	4311      	orrs	r1, r2
 80141f6:	68ba      	ldr	r2, [r7, #8]
 80141f8:	6892      	ldr	r2, [r2, #8]
 80141fa:	0212      	lsls	r2, r2, #8
 80141fc:	4311      	orrs	r1, r2
 80141fe:	68ba      	ldr	r2, [r7, #8]
 8014200:	69d2      	ldr	r2, [r2, #28]
 8014202:	4311      	orrs	r1, r2
 8014204:	68ba      	ldr	r2, [r7, #8]
 8014206:	6912      	ldr	r2, [r2, #16]
 8014208:	0412      	lsls	r2, r2, #16
 801420a:	430a      	orrs	r2, r1
 801420c:	ea43 0102 	orr.w	r1, r3, r2
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	687a      	ldr	r2, [r7, #4]
 8014214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8014218:	e005      	b.n	8014226 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	687a      	ldr	r2, [r7, #4]
 801421e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8014222:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8014226:	2300      	movs	r3, #0
}
 8014228:	4618      	mov	r0, r3
 801422a:	3714      	adds	r7, #20
 801422c:	46bd      	mov	sp, r7
 801422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014232:	4770      	bx	lr
 8014234:	cff00000 	.word	0xcff00000

08014238 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8014238:	b084      	sub	sp, #16
 801423a:	b480      	push	{r7}
 801423c:	b085      	sub	sp, #20
 801423e:	af00      	add	r7, sp, #0
 8014240:	6078      	str	r0, [r7, #4]
 8014242:	f107 001c 	add.w	r0, r7, #28
 8014246:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801424a:	2300      	movs	r3, #0
 801424c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 801424e:	6a3b      	ldr	r3, [r7, #32]
 8014250:	68fa      	ldr	r2, [r7, #12]
 8014252:	4313      	orrs	r3, r2
 8014254:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 8014256:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8014258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 801425a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 801425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 801425e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8014260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8014262:	431a      	orrs	r2, r3
             Init.ClockDiv
 8014264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8014266:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8014268:	68fa      	ldr	r2, [r7, #12]
 801426a:	4313      	orrs	r3, r2
 801426c:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	685b      	ldr	r3, [r3, #4]
 8014272:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8014276:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801427a:	68fa      	ldr	r2, [r7, #12]
 801427c:	431a      	orrs	r2, r3
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8014282:	2300      	movs	r3, #0
}
 8014284:	4618      	mov	r0, r3
 8014286:	3714      	adds	r7, #20
 8014288:	46bd      	mov	sp, r7
 801428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428e:	b004      	add	sp, #16
 8014290:	4770      	bx	lr

08014292 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8014292:	b480      	push	{r7}
 8014294:	b083      	sub	sp, #12
 8014296:	af00      	add	r7, sp, #0
 8014298:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80142a0:	4618      	mov	r0, r3
 80142a2:	370c      	adds	r7, #12
 80142a4:	46bd      	mov	sp, r7
 80142a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142aa:	4770      	bx	lr

080142ac <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	b082      	sub	sp, #8
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2203      	movs	r2, #3
 80142b8:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80142ba:	2002      	movs	r0, #2
 80142bc:	f7f6 fcc8 	bl	800ac50 <HAL_Delay>

  return HAL_OK;
 80142c0:	2300      	movs	r3, #0
}
 80142c2:	4618      	mov	r0, r3
 80142c4:	3708      	adds	r7, #8
 80142c6:	46bd      	mov	sp, r7
 80142c8:	bd80      	pop	{r7, pc}

080142ca <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80142ca:	b480      	push	{r7}
 80142cc:	b083      	sub	sp, #12
 80142ce:	af00      	add	r7, sp, #0
 80142d0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	f003 0303 	and.w	r3, r3, #3
}
 80142da:	4618      	mov	r0, r3
 80142dc:	370c      	adds	r7, #12
 80142de:	46bd      	mov	sp, r7
 80142e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142e4:	4770      	bx	lr

080142e6 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80142e6:	b480      	push	{r7}
 80142e8:	b085      	sub	sp, #20
 80142ea:	af00      	add	r7, sp, #0
 80142ec:	6078      	str	r0, [r7, #4]
 80142ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80142f0:	2300      	movs	r3, #0
 80142f2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80142f4:	683b      	ldr	r3, [r7, #0]
 80142f6:	681a      	ldr	r2, [r3, #0]
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80142fc:	683b      	ldr	r3, [r7, #0]
 80142fe:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8014300:	683b      	ldr	r3, [r7, #0]
 8014302:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8014304:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8014306:	683b      	ldr	r3, [r7, #0]
 8014308:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 801430a:	431a      	orrs	r2, r3
                       Command->CPSM);
 801430c:	683b      	ldr	r3, [r7, #0]
 801430e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8014310:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8014312:	68fa      	ldr	r2, [r7, #12]
 8014314:	4313      	orrs	r3, r2
 8014316:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	68db      	ldr	r3, [r3, #12]
 801431c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014320:	f023 030f 	bic.w	r3, r3, #15
 8014324:	68fa      	ldr	r2, [r7, #12]
 8014326:	431a      	orrs	r2, r3
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801432c:	2300      	movs	r3, #0
}
 801432e:	4618      	mov	r0, r3
 8014330:	3714      	adds	r7, #20
 8014332:	46bd      	mov	sp, r7
 8014334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014338:	4770      	bx	lr

0801433a <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 801433a:	b480      	push	{r7}
 801433c:	b083      	sub	sp, #12
 801433e:	af00      	add	r7, sp, #0
 8014340:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	691b      	ldr	r3, [r3, #16]
 8014346:	b2db      	uxtb	r3, r3
}
 8014348:	4618      	mov	r0, r3
 801434a:	370c      	adds	r7, #12
 801434c:	46bd      	mov	sp, r7
 801434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014352:	4770      	bx	lr

08014354 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8014354:	b480      	push	{r7}
 8014356:	b085      	sub	sp, #20
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
 801435c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	3314      	adds	r3, #20
 8014362:	461a      	mov	r2, r3
 8014364:	683b      	ldr	r3, [r7, #0]
 8014366:	4413      	add	r3, r2
 8014368:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	681b      	ldr	r3, [r3, #0]
}
 801436e:	4618      	mov	r0, r3
 8014370:	3714      	adds	r7, #20
 8014372:	46bd      	mov	sp, r7
 8014374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014378:	4770      	bx	lr

0801437a <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 801437a:	b480      	push	{r7}
 801437c:	b085      	sub	sp, #20
 801437e:	af00      	add	r7, sp, #0
 8014380:	6078      	str	r0, [r7, #4]
 8014382:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8014384:	2300      	movs	r3, #0
 8014386:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8014388:	683b      	ldr	r3, [r7, #0]
 801438a:	681a      	ldr	r2, [r3, #0]
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8014390:	683b      	ldr	r3, [r7, #0]
 8014392:	685a      	ldr	r2, [r3, #4]
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8014398:	683b      	ldr	r3, [r7, #0]
 801439a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801439c:	683b      	ldr	r3, [r7, #0]
 801439e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80143a0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80143a2:	683b      	ldr	r3, [r7, #0]
 80143a4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80143a6:	431a      	orrs	r2, r3
                       Data->DPSM);
 80143a8:	683b      	ldr	r3, [r7, #0]
 80143aa:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80143ac:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80143ae:	68fa      	ldr	r2, [r7, #12]
 80143b0:	4313      	orrs	r3, r2
 80143b2:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143b8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	431a      	orrs	r2, r3
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80143c4:	2300      	movs	r3, #0

}
 80143c6:	4618      	mov	r0, r3
 80143c8:	3714      	adds	r7, #20
 80143ca:	46bd      	mov	sp, r7
 80143cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d0:	4770      	bx	lr

080143d2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80143d2:	b580      	push	{r7, lr}
 80143d4:	b088      	sub	sp, #32
 80143d6:	af00      	add	r7, sp, #0
 80143d8:	6078      	str	r0, [r7, #4]
 80143da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80143dc:	683b      	ldr	r3, [r7, #0]
 80143de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80143e0:	2310      	movs	r3, #16
 80143e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80143e4:	2340      	movs	r3, #64	; 0x40
 80143e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80143e8:	2300      	movs	r3, #0
 80143ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80143ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80143f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80143f2:	f107 0308 	add.w	r3, r7, #8
 80143f6:	4619      	mov	r1, r3
 80143f8:	6878      	ldr	r0, [r7, #4]
 80143fa:	f7ff ff74 	bl	80142e6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80143fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8014402:	2110      	movs	r1, #16
 8014404:	6878      	ldr	r0, [r7, #4]
 8014406:	f000 f94d 	bl	80146a4 <SDMMC_GetCmdResp1>
 801440a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801440c:	69fb      	ldr	r3, [r7, #28]
}
 801440e:	4618      	mov	r0, r3
 8014410:	3720      	adds	r7, #32
 8014412:	46bd      	mov	sp, r7
 8014414:	bd80      	pop	{r7, pc}

08014416 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8014416:	b580      	push	{r7, lr}
 8014418:	b08a      	sub	sp, #40	; 0x28
 801441a:	af00      	add	r7, sp, #0
 801441c:	60f8      	str	r0, [r7, #12]
 801441e:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8014422:	683b      	ldr	r3, [r7, #0]
 8014424:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8014426:	2307      	movs	r3, #7
 8014428:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801442a:	2340      	movs	r3, #64	; 0x40
 801442c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801442e:	2300      	movs	r3, #0
 8014430:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014432:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014436:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014438:	f107 0310 	add.w	r3, r7, #16
 801443c:	4619      	mov	r1, r3
 801443e:	68f8      	ldr	r0, [r7, #12]
 8014440:	f7ff ff51 	bl	80142e6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8014444:	f241 3288 	movw	r2, #5000	; 0x1388
 8014448:	2107      	movs	r1, #7
 801444a:	68f8      	ldr	r0, [r7, #12]
 801444c:	f000 f92a 	bl	80146a4 <SDMMC_GetCmdResp1>
 8014450:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8014452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014454:	4618      	mov	r0, r3
 8014456:	3728      	adds	r7, #40	; 0x28
 8014458:	46bd      	mov	sp, r7
 801445a:	bd80      	pop	{r7, pc}

0801445c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b088      	sub	sp, #32
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8014464:	2300      	movs	r3, #0
 8014466:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8014468:	2300      	movs	r3, #0
 801446a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801446c:	2300      	movs	r3, #0
 801446e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014470:	2300      	movs	r3, #0
 8014472:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014474:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014478:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801447a:	f107 0308 	add.w	r3, r7, #8
 801447e:	4619      	mov	r1, r3
 8014480:	6878      	ldr	r0, [r7, #4]
 8014482:	f7ff ff30 	bl	80142e6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8014486:	6878      	ldr	r0, [r7, #4]
 8014488:	f000 fb44 	bl	8014b14 <SDMMC_GetCmdError>
 801448c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801448e:	69fb      	ldr	r3, [r7, #28]
}
 8014490:	4618      	mov	r0, r3
 8014492:	3720      	adds	r7, #32
 8014494:	46bd      	mov	sp, r7
 8014496:	bd80      	pop	{r7, pc}

08014498 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8014498:	b580      	push	{r7, lr}
 801449a:	b088      	sub	sp, #32
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80144a0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80144a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80144a6:	2308      	movs	r3, #8
 80144a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80144aa:	2340      	movs	r3, #64	; 0x40
 80144ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80144ae:	2300      	movs	r3, #0
 80144b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80144b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80144b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80144b8:	f107 0308 	add.w	r3, r7, #8
 80144bc:	4619      	mov	r1, r3
 80144be:	6878      	ldr	r0, [r7, #4]
 80144c0:	f7ff ff11 	bl	80142e6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80144c4:	6878      	ldr	r0, [r7, #4]
 80144c6:	f000 fad7 	bl	8014a78 <SDMMC_GetCmdResp7>
 80144ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80144cc:	69fb      	ldr	r3, [r7, #28]
}
 80144ce:	4618      	mov	r0, r3
 80144d0:	3720      	adds	r7, #32
 80144d2:	46bd      	mov	sp, r7
 80144d4:	bd80      	pop	{r7, pc}

080144d6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80144d6:	b580      	push	{r7, lr}
 80144d8:	b088      	sub	sp, #32
 80144da:	af00      	add	r7, sp, #0
 80144dc:	6078      	str	r0, [r7, #4]
 80144de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80144e0:	683b      	ldr	r3, [r7, #0]
 80144e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80144e4:	2337      	movs	r3, #55	; 0x37
 80144e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80144e8:	2340      	movs	r3, #64	; 0x40
 80144ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80144ec:	2300      	movs	r3, #0
 80144ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80144f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80144f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80144f6:	f107 0308 	add.w	r3, r7, #8
 80144fa:	4619      	mov	r1, r3
 80144fc:	6878      	ldr	r0, [r7, #4]
 80144fe:	f7ff fef2 	bl	80142e6 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8014502:	f241 3288 	movw	r2, #5000	; 0x1388
 8014506:	2137      	movs	r1, #55	; 0x37
 8014508:	6878      	ldr	r0, [r7, #4]
 801450a:	f000 f8cb 	bl	80146a4 <SDMMC_GetCmdResp1>
 801450e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014510:	69fb      	ldr	r3, [r7, #28]
}
 8014512:	4618      	mov	r0, r3
 8014514:	3720      	adds	r7, #32
 8014516:	46bd      	mov	sp, r7
 8014518:	bd80      	pop	{r7, pc}

0801451a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801451a:	b580      	push	{r7, lr}
 801451c:	b088      	sub	sp, #32
 801451e:	af00      	add	r7, sp, #0
 8014520:	6078      	str	r0, [r7, #4]
 8014522:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8014524:	683b      	ldr	r3, [r7, #0]
 8014526:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801452a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801452e:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8014530:	2329      	movs	r3, #41	; 0x29
 8014532:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014534:	2340      	movs	r3, #64	; 0x40
 8014536:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014538:	2300      	movs	r3, #0
 801453a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801453c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014540:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014542:	f107 0308 	add.w	r3, r7, #8
 8014546:	4619      	mov	r1, r3
 8014548:	6878      	ldr	r0, [r7, #4]
 801454a:	f7ff fecc 	bl	80142e6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801454e:	6878      	ldr	r0, [r7, #4]
 8014550:	f000 f9de 	bl	8014910 <SDMMC_GetCmdResp3>
 8014554:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014556:	69fb      	ldr	r3, [r7, #28]
}
 8014558:	4618      	mov	r0, r3
 801455a:	3720      	adds	r7, #32
 801455c:	46bd      	mov	sp, r7
 801455e:	bd80      	pop	{r7, pc}

08014560 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b088      	sub	sp, #32
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
 8014568:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801456a:	683b      	ldr	r3, [r7, #0]
 801456c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801456e:	2306      	movs	r3, #6
 8014570:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014572:	2340      	movs	r3, #64	; 0x40
 8014574:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014576:	2300      	movs	r3, #0
 8014578:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801457a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801457e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014580:	f107 0308 	add.w	r3, r7, #8
 8014584:	4619      	mov	r1, r3
 8014586:	6878      	ldr	r0, [r7, #4]
 8014588:	f7ff fead 	bl	80142e6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801458c:	f241 3288 	movw	r2, #5000	; 0x1388
 8014590:	2106      	movs	r1, #6
 8014592:	6878      	ldr	r0, [r7, #4]
 8014594:	f000 f886 	bl	80146a4 <SDMMC_GetCmdResp1>
 8014598:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801459a:	69fb      	ldr	r3, [r7, #28]
}
 801459c:	4618      	mov	r0, r3
 801459e:	3720      	adds	r7, #32
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bd80      	pop	{r7, pc}

080145a4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b088      	sub	sp, #32
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80145ac:	2300      	movs	r3, #0
 80145ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80145b0:	2333      	movs	r3, #51	; 0x33
 80145b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80145b4:	2340      	movs	r3, #64	; 0x40
 80145b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80145b8:	2300      	movs	r3, #0
 80145ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80145bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80145c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80145c2:	f107 0308 	add.w	r3, r7, #8
 80145c6:	4619      	mov	r1, r3
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f7ff fe8c 	bl	80142e6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80145ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80145d2:	2133      	movs	r1, #51	; 0x33
 80145d4:	6878      	ldr	r0, [r7, #4]
 80145d6:	f000 f865 	bl	80146a4 <SDMMC_GetCmdResp1>
 80145da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80145dc:	69fb      	ldr	r3, [r7, #28]
}
 80145de:	4618      	mov	r0, r3
 80145e0:	3720      	adds	r7, #32
 80145e2:	46bd      	mov	sp, r7
 80145e4:	bd80      	pop	{r7, pc}

080145e6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80145e6:	b580      	push	{r7, lr}
 80145e8:	b088      	sub	sp, #32
 80145ea:	af00      	add	r7, sp, #0
 80145ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80145ee:	2300      	movs	r3, #0
 80145f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80145f2:	2302      	movs	r3, #2
 80145f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80145f6:	23c0      	movs	r3, #192	; 0xc0
 80145f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80145fa:	2300      	movs	r3, #0
 80145fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80145fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014602:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014604:	f107 0308 	add.w	r3, r7, #8
 8014608:	4619      	mov	r1, r3
 801460a:	6878      	ldr	r0, [r7, #4]
 801460c:	f7ff fe6b 	bl	80142e6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8014610:	6878      	ldr	r0, [r7, #4]
 8014612:	f000 f935 	bl	8014880 <SDMMC_GetCmdResp2>
 8014616:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014618:	69fb      	ldr	r3, [r7, #28]
}
 801461a:	4618      	mov	r0, r3
 801461c:	3720      	adds	r7, #32
 801461e:	46bd      	mov	sp, r7
 8014620:	bd80      	pop	{r7, pc}

08014622 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8014622:	b580      	push	{r7, lr}
 8014624:	b088      	sub	sp, #32
 8014626:	af00      	add	r7, sp, #0
 8014628:	6078      	str	r0, [r7, #4]
 801462a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801462c:	683b      	ldr	r3, [r7, #0]
 801462e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8014630:	2309      	movs	r3, #9
 8014632:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8014634:	23c0      	movs	r3, #192	; 0xc0
 8014636:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014638:	2300      	movs	r3, #0
 801463a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801463c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014640:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014642:	f107 0308 	add.w	r3, r7, #8
 8014646:	4619      	mov	r1, r3
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	f7ff fe4c 	bl	80142e6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	f000 f916 	bl	8014880 <SDMMC_GetCmdResp2>
 8014654:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014656:	69fb      	ldr	r3, [r7, #28]
}
 8014658:	4618      	mov	r0, r3
 801465a:	3720      	adds	r7, #32
 801465c:	46bd      	mov	sp, r7
 801465e:	bd80      	pop	{r7, pc}

08014660 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8014660:	b580      	push	{r7, lr}
 8014662:	b088      	sub	sp, #32
 8014664:	af00      	add	r7, sp, #0
 8014666:	6078      	str	r0, [r7, #4]
 8014668:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801466a:	2300      	movs	r3, #0
 801466c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801466e:	2303      	movs	r3, #3
 8014670:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014672:	2340      	movs	r3, #64	; 0x40
 8014674:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014676:	2300      	movs	r3, #0
 8014678:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801467a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801467e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014680:	f107 0308 	add.w	r3, r7, #8
 8014684:	4619      	mov	r1, r3
 8014686:	6878      	ldr	r0, [r7, #4]
 8014688:	f7ff fe2d 	bl	80142e6 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801468c:	683a      	ldr	r2, [r7, #0]
 801468e:	2103      	movs	r1, #3
 8014690:	6878      	ldr	r0, [r7, #4]
 8014692:	f000 f97b 	bl	801498c <SDMMC_GetCmdResp6>
 8014696:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014698:	69fb      	ldr	r3, [r7, #28]
}
 801469a:	4618      	mov	r0, r3
 801469c:	3720      	adds	r7, #32
 801469e:	46bd      	mov	sp, r7
 80146a0:	bd80      	pop	{r7, pc}
	...

080146a4 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b088      	sub	sp, #32
 80146a8:	af00      	add	r7, sp, #0
 80146aa:	60f8      	str	r0, [r7, #12]
 80146ac:	460b      	mov	r3, r1
 80146ae:	607a      	str	r2, [r7, #4]
 80146b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80146b2:	4b70      	ldr	r3, [pc, #448]	; (8014874 <SDMMC_GetCmdResp1+0x1d0>)
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	4a70      	ldr	r2, [pc, #448]	; (8014878 <SDMMC_GetCmdResp1+0x1d4>)
 80146b8:	fba2 2303 	umull	r2, r3, r2, r3
 80146bc:	0a5a      	lsrs	r2, r3, #9
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	fb02 f303 	mul.w	r3, r2, r3
 80146c4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80146c6:	69fb      	ldr	r3, [r7, #28]
 80146c8:	1e5a      	subs	r2, r3, #1
 80146ca:	61fa      	str	r2, [r7, #28]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d102      	bne.n	80146d6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80146d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80146d4:	e0c9      	b.n	801486a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146da:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80146dc:	69bb      	ldr	r3, [r7, #24]
 80146de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d0ef      	beq.n	80146c6 <SDMMC_GetCmdResp1+0x22>
 80146e6:	69bb      	ldr	r3, [r7, #24]
 80146e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d1ea      	bne.n	80146c6 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80146f4:	f003 0304 	and.w	r3, r3, #4
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d004      	beq.n	8014706 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	2204      	movs	r2, #4
 8014700:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014702:	2304      	movs	r3, #4
 8014704:	e0b1      	b.n	801486a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801470a:	f003 0301 	and.w	r3, r3, #1
 801470e:	2b00      	cmp	r3, #0
 8014710:	d004      	beq.n	801471c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	2201      	movs	r2, #1
 8014716:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014718:	2301      	movs	r3, #1
 801471a:	e0a6      	b.n	801486a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	22c5      	movs	r2, #197	; 0xc5
 8014720:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014722:	68f8      	ldr	r0, [r7, #12]
 8014724:	f7ff fe09 	bl	801433a <SDMMC_GetCommandResponse>
 8014728:	4603      	mov	r3, r0
 801472a:	461a      	mov	r2, r3
 801472c:	7afb      	ldrb	r3, [r7, #11]
 801472e:	4293      	cmp	r3, r2
 8014730:	d001      	beq.n	8014736 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014732:	2301      	movs	r3, #1
 8014734:	e099      	b.n	801486a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8014736:	2100      	movs	r1, #0
 8014738:	68f8      	ldr	r0, [r7, #12]
 801473a:	f7ff fe0b 	bl	8014354 <SDMMC_GetResponse>
 801473e:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8014740:	697a      	ldr	r2, [r7, #20]
 8014742:	4b4e      	ldr	r3, [pc, #312]	; (801487c <SDMMC_GetCmdResp1+0x1d8>)
 8014744:	4013      	ands	r3, r2
 8014746:	2b00      	cmp	r3, #0
 8014748:	d101      	bne.n	801474e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801474a:	2300      	movs	r3, #0
 801474c:	e08d      	b.n	801486a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801474e:	697b      	ldr	r3, [r7, #20]
 8014750:	2b00      	cmp	r3, #0
 8014752:	da02      	bge.n	801475a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8014754:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8014758:	e087      	b.n	801486a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801475a:	697b      	ldr	r3, [r7, #20]
 801475c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014760:	2b00      	cmp	r3, #0
 8014762:	d001      	beq.n	8014768 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8014764:	2340      	movs	r3, #64	; 0x40
 8014766:	e080      	b.n	801486a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8014768:	697b      	ldr	r3, [r7, #20]
 801476a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801476e:	2b00      	cmp	r3, #0
 8014770:	d001      	beq.n	8014776 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8014772:	2380      	movs	r3, #128	; 0x80
 8014774:	e079      	b.n	801486a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8014776:	697b      	ldr	r3, [r7, #20]
 8014778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801477c:	2b00      	cmp	r3, #0
 801477e:	d002      	beq.n	8014786 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8014780:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014784:	e071      	b.n	801486a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8014786:	697b      	ldr	r3, [r7, #20]
 8014788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801478c:	2b00      	cmp	r3, #0
 801478e:	d002      	beq.n	8014796 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8014790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014794:	e069      	b.n	801486a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8014796:	697b      	ldr	r3, [r7, #20]
 8014798:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801479c:	2b00      	cmp	r3, #0
 801479e:	d002      	beq.n	80147a6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80147a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80147a4:	e061      	b.n	801486a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80147a6:	697b      	ldr	r3, [r7, #20]
 80147a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d002      	beq.n	80147b6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80147b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80147b4:	e059      	b.n	801486a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80147b6:	697b      	ldr	r3, [r7, #20]
 80147b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d002      	beq.n	80147c6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80147c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80147c4:	e051      	b.n	801486a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80147c6:	697b      	ldr	r3, [r7, #20]
 80147c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d002      	beq.n	80147d6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80147d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80147d4:	e049      	b.n	801486a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80147d6:	697b      	ldr	r3, [r7, #20]
 80147d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d002      	beq.n	80147e6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80147e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80147e4:	e041      	b.n	801486a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80147e6:	697b      	ldr	r3, [r7, #20]
 80147e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d002      	beq.n	80147f6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80147f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80147f4:	e039      	b.n	801486a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80147f6:	697b      	ldr	r3, [r7, #20]
 80147f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d002      	beq.n	8014806 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8014800:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014804:	e031      	b.n	801486a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8014806:	697b      	ldr	r3, [r7, #20]
 8014808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801480c:	2b00      	cmp	r3, #0
 801480e:	d002      	beq.n	8014816 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8014810:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8014814:	e029      	b.n	801486a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8014816:	697b      	ldr	r3, [r7, #20]
 8014818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801481c:	2b00      	cmp	r3, #0
 801481e:	d002      	beq.n	8014826 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8014820:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014824:	e021      	b.n	801486a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8014826:	697b      	ldr	r3, [r7, #20]
 8014828:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801482c:	2b00      	cmp	r3, #0
 801482e:	d002      	beq.n	8014836 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8014830:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8014834:	e019      	b.n	801486a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8014836:	697b      	ldr	r3, [r7, #20]
 8014838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801483c:	2b00      	cmp	r3, #0
 801483e:	d002      	beq.n	8014846 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8014840:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8014844:	e011      	b.n	801486a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8014846:	697b      	ldr	r3, [r7, #20]
 8014848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801484c:	2b00      	cmp	r3, #0
 801484e:	d002      	beq.n	8014856 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8014850:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8014854:	e009      	b.n	801486a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8014856:	697b      	ldr	r3, [r7, #20]
 8014858:	f003 0308 	and.w	r3, r3, #8
 801485c:	2b00      	cmp	r3, #0
 801485e:	d002      	beq.n	8014866 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8014860:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8014864:	e001      	b.n	801486a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014866:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801486a:	4618      	mov	r0, r3
 801486c:	3720      	adds	r7, #32
 801486e:	46bd      	mov	sp, r7
 8014870:	bd80      	pop	{r7, pc}
 8014872:	bf00      	nop
 8014874:	20000190 	.word	0x20000190
 8014878:	10624dd3 	.word	0x10624dd3
 801487c:	fdffe008 	.word	0xfdffe008

08014880 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8014880:	b480      	push	{r7}
 8014882:	b085      	sub	sp, #20
 8014884:	af00      	add	r7, sp, #0
 8014886:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014888:	4b1f      	ldr	r3, [pc, #124]	; (8014908 <SDMMC_GetCmdResp2+0x88>)
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	4a1f      	ldr	r2, [pc, #124]	; (801490c <SDMMC_GetCmdResp2+0x8c>)
 801488e:	fba2 2303 	umull	r2, r3, r2, r3
 8014892:	0a5b      	lsrs	r3, r3, #9
 8014894:	f241 3288 	movw	r2, #5000	; 0x1388
 8014898:	fb02 f303 	mul.w	r3, r2, r3
 801489c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	1e5a      	subs	r2, r3, #1
 80148a2:	60fa      	str	r2, [r7, #12]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d102      	bne.n	80148ae <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80148a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80148ac:	e026      	b.n	80148fc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148b2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80148b4:	68bb      	ldr	r3, [r7, #8]
 80148b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d0ef      	beq.n	801489e <SDMMC_GetCmdResp2+0x1e>
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d1ea      	bne.n	801489e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148cc:	f003 0304 	and.w	r3, r3, #4
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d004      	beq.n	80148de <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	2204      	movs	r2, #4
 80148d8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80148da:	2304      	movs	r3, #4
 80148dc:	e00e      	b.n	80148fc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148e2:	f003 0301 	and.w	r3, r3, #1
 80148e6:	2b00      	cmp	r3, #0
 80148e8:	d004      	beq.n	80148f4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	2201      	movs	r2, #1
 80148ee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80148f0:	2301      	movs	r3, #1
 80148f2:	e003      	b.n	80148fc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	22c5      	movs	r2, #197	; 0xc5
 80148f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80148fa:	2300      	movs	r3, #0
}
 80148fc:	4618      	mov	r0, r3
 80148fe:	3714      	adds	r7, #20
 8014900:	46bd      	mov	sp, r7
 8014902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014906:	4770      	bx	lr
 8014908:	20000190 	.word	0x20000190
 801490c:	10624dd3 	.word	0x10624dd3

08014910 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8014910:	b480      	push	{r7}
 8014912:	b085      	sub	sp, #20
 8014914:	af00      	add	r7, sp, #0
 8014916:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014918:	4b1a      	ldr	r3, [pc, #104]	; (8014984 <SDMMC_GetCmdResp3+0x74>)
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	4a1a      	ldr	r2, [pc, #104]	; (8014988 <SDMMC_GetCmdResp3+0x78>)
 801491e:	fba2 2303 	umull	r2, r3, r2, r3
 8014922:	0a5b      	lsrs	r3, r3, #9
 8014924:	f241 3288 	movw	r2, #5000	; 0x1388
 8014928:	fb02 f303 	mul.w	r3, r2, r3
 801492c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	1e5a      	subs	r2, r3, #1
 8014932:	60fa      	str	r2, [r7, #12]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d102      	bne.n	801493e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014938:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801493c:	e01b      	b.n	8014976 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014942:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014944:	68bb      	ldr	r3, [r7, #8]
 8014946:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801494a:	2b00      	cmp	r3, #0
 801494c:	d0ef      	beq.n	801492e <SDMMC_GetCmdResp3+0x1e>
 801494e:	68bb      	ldr	r3, [r7, #8]
 8014950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014954:	2b00      	cmp	r3, #0
 8014956:	d1ea      	bne.n	801492e <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801495c:	f003 0304 	and.w	r3, r3, #4
 8014960:	2b00      	cmp	r3, #0
 8014962:	d004      	beq.n	801496e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	2204      	movs	r2, #4
 8014968:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801496a:	2304      	movs	r3, #4
 801496c:	e003      	b.n	8014976 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	22c5      	movs	r2, #197	; 0xc5
 8014972:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8014974:	2300      	movs	r3, #0
}
 8014976:	4618      	mov	r0, r3
 8014978:	3714      	adds	r7, #20
 801497a:	46bd      	mov	sp, r7
 801497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014980:	4770      	bx	lr
 8014982:	bf00      	nop
 8014984:	20000190 	.word	0x20000190
 8014988:	10624dd3 	.word	0x10624dd3

0801498c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b088      	sub	sp, #32
 8014990:	af00      	add	r7, sp, #0
 8014992:	60f8      	str	r0, [r7, #12]
 8014994:	460b      	mov	r3, r1
 8014996:	607a      	str	r2, [r7, #4]
 8014998:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801499a:	4b35      	ldr	r3, [pc, #212]	; (8014a70 <SDMMC_GetCmdResp6+0xe4>)
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	4a35      	ldr	r2, [pc, #212]	; (8014a74 <SDMMC_GetCmdResp6+0xe8>)
 80149a0:	fba2 2303 	umull	r2, r3, r2, r3
 80149a4:	0a5b      	lsrs	r3, r3, #9
 80149a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80149aa:	fb02 f303 	mul.w	r3, r2, r3
 80149ae:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80149b0:	69fb      	ldr	r3, [r7, #28]
 80149b2:	1e5a      	subs	r2, r3, #1
 80149b4:	61fa      	str	r2, [r7, #28]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d102      	bne.n	80149c0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80149ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80149be:	e052      	b.n	8014a66 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149c4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80149c6:	69bb      	ldr	r3, [r7, #24]
 80149c8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d0ef      	beq.n	80149b0 <SDMMC_GetCmdResp6+0x24>
 80149d0:	69bb      	ldr	r3, [r7, #24]
 80149d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d1ea      	bne.n	80149b0 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80149da:	68fb      	ldr	r3, [r7, #12]
 80149dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149de:	f003 0304 	and.w	r3, r3, #4
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d004      	beq.n	80149f0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	2204      	movs	r2, #4
 80149ea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80149ec:	2304      	movs	r3, #4
 80149ee:	e03a      	b.n	8014a66 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80149f4:	f003 0301 	and.w	r3, r3, #1
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d004      	beq.n	8014a06 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	2201      	movs	r2, #1
 8014a00:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014a02:	2301      	movs	r3, #1
 8014a04:	e02f      	b.n	8014a66 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014a06:	68f8      	ldr	r0, [r7, #12]
 8014a08:	f7ff fc97 	bl	801433a <SDMMC_GetCommandResponse>
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	461a      	mov	r2, r3
 8014a10:	7afb      	ldrb	r3, [r7, #11]
 8014a12:	4293      	cmp	r3, r2
 8014a14:	d001      	beq.n	8014a1a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014a16:	2301      	movs	r3, #1
 8014a18:	e025      	b.n	8014a66 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	22c5      	movs	r2, #197	; 0xc5
 8014a1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8014a20:	2100      	movs	r1, #0
 8014a22:	68f8      	ldr	r0, [r7, #12]
 8014a24:	f7ff fc96 	bl	8014354 <SDMMC_GetResponse>
 8014a28:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8014a2a:	697b      	ldr	r3, [r7, #20]
 8014a2c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d106      	bne.n	8014a42 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8014a34:	697b      	ldr	r3, [r7, #20]
 8014a36:	0c1b      	lsrs	r3, r3, #16
 8014a38:	b29a      	uxth	r2, r3
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8014a3e:	2300      	movs	r3, #0
 8014a40:	e011      	b.n	8014a66 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8014a42:	697b      	ldr	r3, [r7, #20]
 8014a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d002      	beq.n	8014a52 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014a50:	e009      	b.n	8014a66 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8014a52:	697b      	ldr	r3, [r7, #20]
 8014a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	d002      	beq.n	8014a62 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014a60:	e001      	b.n	8014a66 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014a62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8014a66:	4618      	mov	r0, r3
 8014a68:	3720      	adds	r7, #32
 8014a6a:	46bd      	mov	sp, r7
 8014a6c:	bd80      	pop	{r7, pc}
 8014a6e:	bf00      	nop
 8014a70:	20000190 	.word	0x20000190
 8014a74:	10624dd3 	.word	0x10624dd3

08014a78 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8014a78:	b480      	push	{r7}
 8014a7a:	b085      	sub	sp, #20
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014a80:	4b22      	ldr	r3, [pc, #136]	; (8014b0c <SDMMC_GetCmdResp7+0x94>)
 8014a82:	681b      	ldr	r3, [r3, #0]
 8014a84:	4a22      	ldr	r2, [pc, #136]	; (8014b10 <SDMMC_GetCmdResp7+0x98>)
 8014a86:	fba2 2303 	umull	r2, r3, r2, r3
 8014a8a:	0a5b      	lsrs	r3, r3, #9
 8014a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8014a90:	fb02 f303 	mul.w	r3, r2, r3
 8014a94:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	1e5a      	subs	r2, r3, #1
 8014a9a:	60fa      	str	r2, [r7, #12]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d102      	bne.n	8014aa6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014aa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014aa4:	e02c      	b.n	8014b00 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014aaa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014aac:	68bb      	ldr	r3, [r7, #8]
 8014aae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d0ef      	beq.n	8014a96 <SDMMC_GetCmdResp7+0x1e>
 8014ab6:	68bb      	ldr	r3, [r7, #8]
 8014ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d1ea      	bne.n	8014a96 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ac4:	f003 0304 	and.w	r3, r3, #4
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d004      	beq.n	8014ad6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	2204      	movs	r2, #4
 8014ad0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014ad2:	2304      	movs	r3, #4
 8014ad4:	e014      	b.n	8014b00 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ada:	f003 0301 	and.w	r3, r3, #1
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d004      	beq.n	8014aec <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	2201      	movs	r2, #1
 8014ae6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014ae8:	2301      	movs	r3, #1
 8014aea:	e009      	b.n	8014b00 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d002      	beq.n	8014afe <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	2240      	movs	r2, #64	; 0x40
 8014afc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8014afe:	2300      	movs	r3, #0

}
 8014b00:	4618      	mov	r0, r3
 8014b02:	3714      	adds	r7, #20
 8014b04:	46bd      	mov	sp, r7
 8014b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b0a:	4770      	bx	lr
 8014b0c:	20000190 	.word	0x20000190
 8014b10:	10624dd3 	.word	0x10624dd3

08014b14 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8014b14:	b480      	push	{r7}
 8014b16:	b085      	sub	sp, #20
 8014b18:	af00      	add	r7, sp, #0
 8014b1a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8014b1c:	4b11      	ldr	r3, [pc, #68]	; (8014b64 <SDMMC_GetCmdError+0x50>)
 8014b1e:	681b      	ldr	r3, [r3, #0]
 8014b20:	4a11      	ldr	r2, [pc, #68]	; (8014b68 <SDMMC_GetCmdError+0x54>)
 8014b22:	fba2 2303 	umull	r2, r3, r2, r3
 8014b26:	0a5b      	lsrs	r3, r3, #9
 8014b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8014b2c:	fb02 f303 	mul.w	r3, r2, r3
 8014b30:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	1e5a      	subs	r2, r3, #1
 8014b36:	60fa      	str	r2, [r7, #12]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d102      	bne.n	8014b42 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014b3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014b40:	e009      	b.n	8014b56 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d0f1      	beq.n	8014b32 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	22c5      	movs	r2, #197	; 0xc5
 8014b52:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8014b54:	2300      	movs	r3, #0
}
 8014b56:	4618      	mov	r0, r3
 8014b58:	3714      	adds	r7, #20
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b60:	4770      	bx	lr
 8014b62:	bf00      	nop
 8014b64:	20000190 	.word	0x20000190
 8014b68:	10624dd3 	.word	0x10624dd3

08014b6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014b6c:	b084      	sub	sp, #16
 8014b6e:	b580      	push	{r7, lr}
 8014b70:	b084      	sub	sp, #16
 8014b72:	af00      	add	r7, sp, #0
 8014b74:	6078      	str	r0, [r7, #4]
 8014b76:	f107 001c 	add.w	r0, r7, #28
 8014b7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	68db      	ldr	r3, [r3, #12]
 8014b82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8014b8a:	6878      	ldr	r0, [r7, #4]
 8014b8c:	f001 faf6 	bl	801617c <USB_CoreReset>
 8014b90:	4603      	mov	r3, r0
 8014b92:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8014b94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d106      	bne.n	8014ba8 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b9e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	639a      	str	r2, [r3, #56]	; 0x38
 8014ba6:	e005      	b.n	8014bb4 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8014bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bb6:	4618      	mov	r0, r3
 8014bb8:	3710      	adds	r7, #16
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014bc0:	b004      	add	sp, #16
 8014bc2:	4770      	bx	lr

08014bc4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8014bc4:	b480      	push	{r7}
 8014bc6:	b087      	sub	sp, #28
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	60f8      	str	r0, [r7, #12]
 8014bcc:	60b9      	str	r1, [r7, #8]
 8014bce:	4613      	mov	r3, r2
 8014bd0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8014bd2:	79fb      	ldrb	r3, [r7, #7]
 8014bd4:	2b02      	cmp	r3, #2
 8014bd6:	d165      	bne.n	8014ca4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8014bd8:	68bb      	ldr	r3, [r7, #8]
 8014bda:	4a3e      	ldr	r2, [pc, #248]	; (8014cd4 <USB_SetTurnaroundTime+0x110>)
 8014bdc:	4293      	cmp	r3, r2
 8014bde:	d906      	bls.n	8014bee <USB_SetTurnaroundTime+0x2a>
 8014be0:	68bb      	ldr	r3, [r7, #8]
 8014be2:	4a3d      	ldr	r2, [pc, #244]	; (8014cd8 <USB_SetTurnaroundTime+0x114>)
 8014be4:	4293      	cmp	r3, r2
 8014be6:	d202      	bcs.n	8014bee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8014be8:	230f      	movs	r3, #15
 8014bea:	617b      	str	r3, [r7, #20]
 8014bec:	e05c      	b.n	8014ca8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8014bee:	68bb      	ldr	r3, [r7, #8]
 8014bf0:	4a39      	ldr	r2, [pc, #228]	; (8014cd8 <USB_SetTurnaroundTime+0x114>)
 8014bf2:	4293      	cmp	r3, r2
 8014bf4:	d306      	bcc.n	8014c04 <USB_SetTurnaroundTime+0x40>
 8014bf6:	68bb      	ldr	r3, [r7, #8]
 8014bf8:	4a38      	ldr	r2, [pc, #224]	; (8014cdc <USB_SetTurnaroundTime+0x118>)
 8014bfa:	4293      	cmp	r3, r2
 8014bfc:	d202      	bcs.n	8014c04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8014bfe:	230e      	movs	r3, #14
 8014c00:	617b      	str	r3, [r7, #20]
 8014c02:	e051      	b.n	8014ca8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8014c04:	68bb      	ldr	r3, [r7, #8]
 8014c06:	4a35      	ldr	r2, [pc, #212]	; (8014cdc <USB_SetTurnaroundTime+0x118>)
 8014c08:	4293      	cmp	r3, r2
 8014c0a:	d306      	bcc.n	8014c1a <USB_SetTurnaroundTime+0x56>
 8014c0c:	68bb      	ldr	r3, [r7, #8]
 8014c0e:	4a34      	ldr	r2, [pc, #208]	; (8014ce0 <USB_SetTurnaroundTime+0x11c>)
 8014c10:	4293      	cmp	r3, r2
 8014c12:	d202      	bcs.n	8014c1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8014c14:	230d      	movs	r3, #13
 8014c16:	617b      	str	r3, [r7, #20]
 8014c18:	e046      	b.n	8014ca8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8014c1a:	68bb      	ldr	r3, [r7, #8]
 8014c1c:	4a30      	ldr	r2, [pc, #192]	; (8014ce0 <USB_SetTurnaroundTime+0x11c>)
 8014c1e:	4293      	cmp	r3, r2
 8014c20:	d306      	bcc.n	8014c30 <USB_SetTurnaroundTime+0x6c>
 8014c22:	68bb      	ldr	r3, [r7, #8]
 8014c24:	4a2f      	ldr	r2, [pc, #188]	; (8014ce4 <USB_SetTurnaroundTime+0x120>)
 8014c26:	4293      	cmp	r3, r2
 8014c28:	d802      	bhi.n	8014c30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8014c2a:	230c      	movs	r3, #12
 8014c2c:	617b      	str	r3, [r7, #20]
 8014c2e:	e03b      	b.n	8014ca8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8014c30:	68bb      	ldr	r3, [r7, #8]
 8014c32:	4a2c      	ldr	r2, [pc, #176]	; (8014ce4 <USB_SetTurnaroundTime+0x120>)
 8014c34:	4293      	cmp	r3, r2
 8014c36:	d906      	bls.n	8014c46 <USB_SetTurnaroundTime+0x82>
 8014c38:	68bb      	ldr	r3, [r7, #8]
 8014c3a:	4a2b      	ldr	r2, [pc, #172]	; (8014ce8 <USB_SetTurnaroundTime+0x124>)
 8014c3c:	4293      	cmp	r3, r2
 8014c3e:	d802      	bhi.n	8014c46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8014c40:	230b      	movs	r3, #11
 8014c42:	617b      	str	r3, [r7, #20]
 8014c44:	e030      	b.n	8014ca8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8014c46:	68bb      	ldr	r3, [r7, #8]
 8014c48:	4a27      	ldr	r2, [pc, #156]	; (8014ce8 <USB_SetTurnaroundTime+0x124>)
 8014c4a:	4293      	cmp	r3, r2
 8014c4c:	d906      	bls.n	8014c5c <USB_SetTurnaroundTime+0x98>
 8014c4e:	68bb      	ldr	r3, [r7, #8]
 8014c50:	4a26      	ldr	r2, [pc, #152]	; (8014cec <USB_SetTurnaroundTime+0x128>)
 8014c52:	4293      	cmp	r3, r2
 8014c54:	d802      	bhi.n	8014c5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8014c56:	230a      	movs	r3, #10
 8014c58:	617b      	str	r3, [r7, #20]
 8014c5a:	e025      	b.n	8014ca8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8014c5c:	68bb      	ldr	r3, [r7, #8]
 8014c5e:	4a23      	ldr	r2, [pc, #140]	; (8014cec <USB_SetTurnaroundTime+0x128>)
 8014c60:	4293      	cmp	r3, r2
 8014c62:	d906      	bls.n	8014c72 <USB_SetTurnaroundTime+0xae>
 8014c64:	68bb      	ldr	r3, [r7, #8]
 8014c66:	4a22      	ldr	r2, [pc, #136]	; (8014cf0 <USB_SetTurnaroundTime+0x12c>)
 8014c68:	4293      	cmp	r3, r2
 8014c6a:	d202      	bcs.n	8014c72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8014c6c:	2309      	movs	r3, #9
 8014c6e:	617b      	str	r3, [r7, #20]
 8014c70:	e01a      	b.n	8014ca8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8014c72:	68bb      	ldr	r3, [r7, #8]
 8014c74:	4a1e      	ldr	r2, [pc, #120]	; (8014cf0 <USB_SetTurnaroundTime+0x12c>)
 8014c76:	4293      	cmp	r3, r2
 8014c78:	d306      	bcc.n	8014c88 <USB_SetTurnaroundTime+0xc4>
 8014c7a:	68bb      	ldr	r3, [r7, #8]
 8014c7c:	4a1d      	ldr	r2, [pc, #116]	; (8014cf4 <USB_SetTurnaroundTime+0x130>)
 8014c7e:	4293      	cmp	r3, r2
 8014c80:	d802      	bhi.n	8014c88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8014c82:	2308      	movs	r3, #8
 8014c84:	617b      	str	r3, [r7, #20]
 8014c86:	e00f      	b.n	8014ca8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8014c88:	68bb      	ldr	r3, [r7, #8]
 8014c8a:	4a1a      	ldr	r2, [pc, #104]	; (8014cf4 <USB_SetTurnaroundTime+0x130>)
 8014c8c:	4293      	cmp	r3, r2
 8014c8e:	d906      	bls.n	8014c9e <USB_SetTurnaroundTime+0xda>
 8014c90:	68bb      	ldr	r3, [r7, #8]
 8014c92:	4a19      	ldr	r2, [pc, #100]	; (8014cf8 <USB_SetTurnaroundTime+0x134>)
 8014c94:	4293      	cmp	r3, r2
 8014c96:	d202      	bcs.n	8014c9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8014c98:	2307      	movs	r3, #7
 8014c9a:	617b      	str	r3, [r7, #20]
 8014c9c:	e004      	b.n	8014ca8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8014c9e:	2306      	movs	r3, #6
 8014ca0:	617b      	str	r3, [r7, #20]
 8014ca2:	e001      	b.n	8014ca8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8014ca4:	2309      	movs	r3, #9
 8014ca6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	68db      	ldr	r3, [r3, #12]
 8014cac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	68da      	ldr	r2, [r3, #12]
 8014cb8:	697b      	ldr	r3, [r7, #20]
 8014cba:	029b      	lsls	r3, r3, #10
 8014cbc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8014cc0:	431a      	orrs	r2, r3
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8014cc6:	2300      	movs	r3, #0
}
 8014cc8:	4618      	mov	r0, r3
 8014cca:	371c      	adds	r7, #28
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd2:	4770      	bx	lr
 8014cd4:	00d8acbf 	.word	0x00d8acbf
 8014cd8:	00e4e1c0 	.word	0x00e4e1c0
 8014cdc:	00f42400 	.word	0x00f42400
 8014ce0:	01067380 	.word	0x01067380
 8014ce4:	011a499f 	.word	0x011a499f
 8014ce8:	01312cff 	.word	0x01312cff
 8014cec:	014ca43f 	.word	0x014ca43f
 8014cf0:	016e3600 	.word	0x016e3600
 8014cf4:	01a6ab1f 	.word	0x01a6ab1f
 8014cf8:	01e84800 	.word	0x01e84800

08014cfc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014cfc:	b480      	push	{r7}
 8014cfe:	b083      	sub	sp, #12
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	689b      	ldr	r3, [r3, #8]
 8014d08:	f043 0201 	orr.w	r2, r3, #1
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014d10:	2300      	movs	r3, #0
}
 8014d12:	4618      	mov	r0, r3
 8014d14:	370c      	adds	r7, #12
 8014d16:	46bd      	mov	sp, r7
 8014d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d1c:	4770      	bx	lr

08014d1e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8014d1e:	b480      	push	{r7}
 8014d20:	b083      	sub	sp, #12
 8014d22:	af00      	add	r7, sp, #0
 8014d24:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	689b      	ldr	r3, [r3, #8]
 8014d2a:	f023 0201 	bic.w	r2, r3, #1
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8014d32:	2300      	movs	r3, #0
}
 8014d34:	4618      	mov	r0, r3
 8014d36:	370c      	adds	r7, #12
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d3e:	4770      	bx	lr

08014d40 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b084      	sub	sp, #16
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	6078      	str	r0, [r7, #4]
 8014d48:	460b      	mov	r3, r1
 8014d4a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8014d4c:	2300      	movs	r3, #0
 8014d4e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	68db      	ldr	r3, [r3, #12]
 8014d54:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8014d5c:	78fb      	ldrb	r3, [r7, #3]
 8014d5e:	2b01      	cmp	r3, #1
 8014d60:	d115      	bne.n	8014d8e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	68db      	ldr	r3, [r3, #12]
 8014d66:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8014d6e:	2001      	movs	r0, #1
 8014d70:	f7f5 ff6e 	bl	800ac50 <HAL_Delay>
      ms++;
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	3301      	adds	r3, #1
 8014d78:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8014d7a:	6878      	ldr	r0, [r7, #4]
 8014d7c:	f001 f985 	bl	801608a <USB_GetMode>
 8014d80:	4603      	mov	r3, r0
 8014d82:	2b01      	cmp	r3, #1
 8014d84:	d01e      	beq.n	8014dc4 <USB_SetCurrentMode+0x84>
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	2b31      	cmp	r3, #49	; 0x31
 8014d8a:	d9f0      	bls.n	8014d6e <USB_SetCurrentMode+0x2e>
 8014d8c:	e01a      	b.n	8014dc4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8014d8e:	78fb      	ldrb	r3, [r7, #3]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d115      	bne.n	8014dc0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	68db      	ldr	r3, [r3, #12]
 8014d98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8014da0:	2001      	movs	r0, #1
 8014da2:	f7f5 ff55 	bl	800ac50 <HAL_Delay>
      ms++;
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	3301      	adds	r3, #1
 8014daa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8014dac:	6878      	ldr	r0, [r7, #4]
 8014dae:	f001 f96c 	bl	801608a <USB_GetMode>
 8014db2:	4603      	mov	r3, r0
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d005      	beq.n	8014dc4 <USB_SetCurrentMode+0x84>
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	2b31      	cmp	r3, #49	; 0x31
 8014dbc:	d9f0      	bls.n	8014da0 <USB_SetCurrentMode+0x60>
 8014dbe:	e001      	b.n	8014dc4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8014dc0:	2301      	movs	r3, #1
 8014dc2:	e005      	b.n	8014dd0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	2b32      	cmp	r3, #50	; 0x32
 8014dc8:	d101      	bne.n	8014dce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8014dca:	2301      	movs	r3, #1
 8014dcc:	e000      	b.n	8014dd0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8014dce:	2300      	movs	r3, #0
}
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	3710      	adds	r7, #16
 8014dd4:	46bd      	mov	sp, r7
 8014dd6:	bd80      	pop	{r7, pc}

08014dd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8014dd8:	b084      	sub	sp, #16
 8014dda:	b580      	push	{r7, lr}
 8014ddc:	b086      	sub	sp, #24
 8014dde:	af00      	add	r7, sp, #0
 8014de0:	6078      	str	r0, [r7, #4]
 8014de2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8014de6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8014dea:	2300      	movs	r3, #0
 8014dec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8014df2:	2300      	movs	r3, #0
 8014df4:	613b      	str	r3, [r7, #16]
 8014df6:	e009      	b.n	8014e0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8014df8:	687a      	ldr	r2, [r7, #4]
 8014dfa:	693b      	ldr	r3, [r7, #16]
 8014dfc:	3340      	adds	r3, #64	; 0x40
 8014dfe:	009b      	lsls	r3, r3, #2
 8014e00:	4413      	add	r3, r2
 8014e02:	2200      	movs	r2, #0
 8014e04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8014e06:	693b      	ldr	r3, [r7, #16]
 8014e08:	3301      	adds	r3, #1
 8014e0a:	613b      	str	r3, [r7, #16]
 8014e0c:	693b      	ldr	r3, [r7, #16]
 8014e0e:	2b0e      	cmp	r3, #14
 8014e10:	d9f2      	bls.n	8014df8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8014e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d11c      	bne.n	8014e52 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e1e:	685b      	ldr	r3, [r3, #4]
 8014e20:	68fa      	ldr	r2, [r7, #12]
 8014e22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014e26:	f043 0302 	orr.w	r3, r3, #2
 8014e2a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e30:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	601a      	str	r2, [r3, #0]
 8014e50:	e005      	b.n	8014e5e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014e64:	461a      	mov	r2, r3
 8014e66:	2300      	movs	r3, #0
 8014e68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e70:	4619      	mov	r1, r3
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e78:	461a      	mov	r2, r3
 8014e7a:	680b      	ldr	r3, [r1, #0]
 8014e7c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8014e7e:	2103      	movs	r1, #3
 8014e80:	6878      	ldr	r0, [r7, #4]
 8014e82:	f000 f959 	bl	8015138 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8014e86:	2110      	movs	r1, #16
 8014e88:	6878      	ldr	r0, [r7, #4]
 8014e8a:	f000 f8f1 	bl	8015070 <USB_FlushTxFifo>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d001      	beq.n	8014e98 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8014e94:	2301      	movs	r3, #1
 8014e96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8014e98:	6878      	ldr	r0, [r7, #4]
 8014e9a:	f000 f91d 	bl	80150d8 <USB_FlushRxFifo>
 8014e9e:	4603      	mov	r3, r0
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d001      	beq.n	8014ea8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8014ea4:	2301      	movs	r3, #1
 8014ea6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014eae:	461a      	mov	r2, r3
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014eba:	461a      	mov	r2, r3
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ec6:	461a      	mov	r2, r3
 8014ec8:	2300      	movs	r3, #0
 8014eca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014ecc:	2300      	movs	r3, #0
 8014ece:	613b      	str	r3, [r7, #16]
 8014ed0:	e043      	b.n	8014f5a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014ed2:	693b      	ldr	r3, [r7, #16]
 8014ed4:	015a      	lsls	r2, r3, #5
 8014ed6:	68fb      	ldr	r3, [r7, #12]
 8014ed8:	4413      	add	r3, r2
 8014eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014ee8:	d118      	bne.n	8014f1c <USB_DevInit+0x144>
    {
      if (i == 0U)
 8014eea:	693b      	ldr	r3, [r7, #16]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d10a      	bne.n	8014f06 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8014ef0:	693b      	ldr	r3, [r7, #16]
 8014ef2:	015a      	lsls	r2, r3, #5
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	4413      	add	r3, r2
 8014ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014efc:	461a      	mov	r2, r3
 8014efe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8014f02:	6013      	str	r3, [r2, #0]
 8014f04:	e013      	b.n	8014f2e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8014f06:	693b      	ldr	r3, [r7, #16]
 8014f08:	015a      	lsls	r2, r3, #5
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	4413      	add	r3, r2
 8014f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f12:	461a      	mov	r2, r3
 8014f14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8014f18:	6013      	str	r3, [r2, #0]
 8014f1a:	e008      	b.n	8014f2e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8014f1c:	693b      	ldr	r3, [r7, #16]
 8014f1e:	015a      	lsls	r2, r3, #5
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	4413      	add	r3, r2
 8014f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f28:	461a      	mov	r2, r3
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8014f2e:	693b      	ldr	r3, [r7, #16]
 8014f30:	015a      	lsls	r2, r3, #5
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	4413      	add	r3, r2
 8014f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f3a:	461a      	mov	r2, r3
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8014f40:	693b      	ldr	r3, [r7, #16]
 8014f42:	015a      	lsls	r2, r3, #5
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	4413      	add	r3, r2
 8014f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014f4c:	461a      	mov	r2, r3
 8014f4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8014f52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014f54:	693b      	ldr	r3, [r7, #16]
 8014f56:	3301      	adds	r3, #1
 8014f58:	613b      	str	r3, [r7, #16]
 8014f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f5c:	693a      	ldr	r2, [r7, #16]
 8014f5e:	429a      	cmp	r2, r3
 8014f60:	d3b7      	bcc.n	8014ed2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014f62:	2300      	movs	r3, #0
 8014f64:	613b      	str	r3, [r7, #16]
 8014f66:	e043      	b.n	8014ff0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014f68:	693b      	ldr	r3, [r7, #16]
 8014f6a:	015a      	lsls	r2, r3, #5
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	4413      	add	r3, r2
 8014f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014f7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014f7e:	d118      	bne.n	8014fb2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8014f80:	693b      	ldr	r3, [r7, #16]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d10a      	bne.n	8014f9c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8014f86:	693b      	ldr	r3, [r7, #16]
 8014f88:	015a      	lsls	r2, r3, #5
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	4413      	add	r3, r2
 8014f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f92:	461a      	mov	r2, r3
 8014f94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8014f98:	6013      	str	r3, [r2, #0]
 8014f9a:	e013      	b.n	8014fc4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8014f9c:	693b      	ldr	r3, [r7, #16]
 8014f9e:	015a      	lsls	r2, r3, #5
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	4413      	add	r3, r2
 8014fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014fa8:	461a      	mov	r2, r3
 8014faa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8014fae:	6013      	str	r3, [r2, #0]
 8014fb0:	e008      	b.n	8014fc4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8014fb2:	693b      	ldr	r3, [r7, #16]
 8014fb4:	015a      	lsls	r2, r3, #5
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	4413      	add	r3, r2
 8014fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014fbe:	461a      	mov	r2, r3
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8014fc4:	693b      	ldr	r3, [r7, #16]
 8014fc6:	015a      	lsls	r2, r3, #5
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	4413      	add	r3, r2
 8014fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014fd0:	461a      	mov	r2, r3
 8014fd2:	2300      	movs	r3, #0
 8014fd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8014fd6:	693b      	ldr	r3, [r7, #16]
 8014fd8:	015a      	lsls	r2, r3, #5
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	4413      	add	r3, r2
 8014fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014fe2:	461a      	mov	r2, r3
 8014fe4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8014fe8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8014fea:	693b      	ldr	r3, [r7, #16]
 8014fec:	3301      	adds	r3, #1
 8014fee:	613b      	str	r3, [r7, #16]
 8014ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ff2:	693a      	ldr	r2, [r7, #16]
 8014ff4:	429a      	cmp	r2, r3
 8014ff6:	d3b7      	bcc.n	8014f68 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ffe:	691b      	ldr	r3, [r3, #16]
 8015000:	68fa      	ldr	r2, [r7, #12]
 8015002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015006:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801500a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	2200      	movs	r2, #0
 8015010:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8015018:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	699b      	ldr	r3, [r3, #24]
 801501e:	f043 0210 	orr.w	r2, r3, #16
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	699a      	ldr	r2, [r3, #24]
 801502a:	4b10      	ldr	r3, [pc, #64]	; (801506c <USB_DevInit+0x294>)
 801502c:	4313      	orrs	r3, r2
 801502e:	687a      	ldr	r2, [r7, #4]
 8015030:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8015032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015034:	2b00      	cmp	r3, #0
 8015036:	d005      	beq.n	8015044 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	699b      	ldr	r3, [r3, #24]
 801503c:	f043 0208 	orr.w	r2, r3, #8
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8015044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015046:	2b01      	cmp	r3, #1
 8015048:	d107      	bne.n	801505a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	699b      	ldr	r3, [r3, #24]
 801504e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015052:	f043 0304 	orr.w	r3, r3, #4
 8015056:	687a      	ldr	r2, [r7, #4]
 8015058:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801505a:	7dfb      	ldrb	r3, [r7, #23]
}
 801505c:	4618      	mov	r0, r3
 801505e:	3718      	adds	r7, #24
 8015060:	46bd      	mov	sp, r7
 8015062:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015066:	b004      	add	sp, #16
 8015068:	4770      	bx	lr
 801506a:	bf00      	nop
 801506c:	803c3800 	.word	0x803c3800

08015070 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8015070:	b480      	push	{r7}
 8015072:	b085      	sub	sp, #20
 8015074:	af00      	add	r7, sp, #0
 8015076:	6078      	str	r0, [r7, #4]
 8015078:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801507a:	2300      	movs	r3, #0
 801507c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	3301      	adds	r3, #1
 8015082:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	4a13      	ldr	r2, [pc, #76]	; (80150d4 <USB_FlushTxFifo+0x64>)
 8015088:	4293      	cmp	r3, r2
 801508a:	d901      	bls.n	8015090 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801508c:	2303      	movs	r3, #3
 801508e:	e01b      	b.n	80150c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	691b      	ldr	r3, [r3, #16]
 8015094:	2b00      	cmp	r3, #0
 8015096:	daf2      	bge.n	801507e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8015098:	2300      	movs	r3, #0
 801509a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801509c:	683b      	ldr	r3, [r7, #0]
 801509e:	019b      	lsls	r3, r3, #6
 80150a0:	f043 0220 	orr.w	r2, r3, #32
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	3301      	adds	r3, #1
 80150ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	4a08      	ldr	r2, [pc, #32]	; (80150d4 <USB_FlushTxFifo+0x64>)
 80150b2:	4293      	cmp	r3, r2
 80150b4:	d901      	bls.n	80150ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80150b6:	2303      	movs	r3, #3
 80150b8:	e006      	b.n	80150c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	691b      	ldr	r3, [r3, #16]
 80150be:	f003 0320 	and.w	r3, r3, #32
 80150c2:	2b20      	cmp	r3, #32
 80150c4:	d0f0      	beq.n	80150a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80150c6:	2300      	movs	r3, #0
}
 80150c8:	4618      	mov	r0, r3
 80150ca:	3714      	adds	r7, #20
 80150cc:	46bd      	mov	sp, r7
 80150ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d2:	4770      	bx	lr
 80150d4:	00030d40 	.word	0x00030d40

080150d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80150d8:	b480      	push	{r7}
 80150da:	b085      	sub	sp, #20
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80150e0:	2300      	movs	r3, #0
 80150e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	3301      	adds	r3, #1
 80150e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	4a11      	ldr	r2, [pc, #68]	; (8015134 <USB_FlushRxFifo+0x5c>)
 80150ee:	4293      	cmp	r3, r2
 80150f0:	d901      	bls.n	80150f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80150f2:	2303      	movs	r3, #3
 80150f4:	e018      	b.n	8015128 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	691b      	ldr	r3, [r3, #16]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	daf2      	bge.n	80150e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80150fe:	2300      	movs	r3, #0
 8015100:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	2210      	movs	r2, #16
 8015106:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	3301      	adds	r3, #1
 801510c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	4a08      	ldr	r2, [pc, #32]	; (8015134 <USB_FlushRxFifo+0x5c>)
 8015112:	4293      	cmp	r3, r2
 8015114:	d901      	bls.n	801511a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8015116:	2303      	movs	r3, #3
 8015118:	e006      	b.n	8015128 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	691b      	ldr	r3, [r3, #16]
 801511e:	f003 0310 	and.w	r3, r3, #16
 8015122:	2b10      	cmp	r3, #16
 8015124:	d0f0      	beq.n	8015108 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8015126:	2300      	movs	r3, #0
}
 8015128:	4618      	mov	r0, r3
 801512a:	3714      	adds	r7, #20
 801512c:	46bd      	mov	sp, r7
 801512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015132:	4770      	bx	lr
 8015134:	00030d40 	.word	0x00030d40

08015138 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8015138:	b480      	push	{r7}
 801513a:	b085      	sub	sp, #20
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
 8015140:	460b      	mov	r3, r1
 8015142:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801514e:	681a      	ldr	r2, [r3, #0]
 8015150:	78fb      	ldrb	r3, [r7, #3]
 8015152:	68f9      	ldr	r1, [r7, #12]
 8015154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015158:	4313      	orrs	r3, r2
 801515a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801515c:	2300      	movs	r3, #0
}
 801515e:	4618      	mov	r0, r3
 8015160:	3714      	adds	r7, #20
 8015162:	46bd      	mov	sp, r7
 8015164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015168:	4770      	bx	lr

0801516a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801516a:	b480      	push	{r7}
 801516c:	b087      	sub	sp, #28
 801516e:	af00      	add	r7, sp, #0
 8015170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8015176:	693b      	ldr	r3, [r7, #16]
 8015178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801517c:	689b      	ldr	r3, [r3, #8]
 801517e:	f003 0306 	and.w	r3, r3, #6
 8015182:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	2b02      	cmp	r3, #2
 8015188:	d002      	beq.n	8015190 <USB_GetDevSpeed+0x26>
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	2b06      	cmp	r3, #6
 801518e:	d102      	bne.n	8015196 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8015190:	2302      	movs	r3, #2
 8015192:	75fb      	strb	r3, [r7, #23]
 8015194:	e001      	b.n	801519a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8015196:	230f      	movs	r3, #15
 8015198:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801519a:	7dfb      	ldrb	r3, [r7, #23]
}
 801519c:	4618      	mov	r0, r3
 801519e:	371c      	adds	r7, #28
 80151a0:	46bd      	mov	sp, r7
 80151a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151a6:	4770      	bx	lr

080151a8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80151a8:	b480      	push	{r7}
 80151aa:	b085      	sub	sp, #20
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	6078      	str	r0, [r7, #4]
 80151b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80151b6:	683b      	ldr	r3, [r7, #0]
 80151b8:	781b      	ldrb	r3, [r3, #0]
 80151ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80151bc:	683b      	ldr	r3, [r7, #0]
 80151be:	785b      	ldrb	r3, [r3, #1]
 80151c0:	2b01      	cmp	r3, #1
 80151c2:	d13a      	bne.n	801523a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80151ca:	69da      	ldr	r2, [r3, #28]
 80151cc:	683b      	ldr	r3, [r7, #0]
 80151ce:	781b      	ldrb	r3, [r3, #0]
 80151d0:	f003 030f 	and.w	r3, r3, #15
 80151d4:	2101      	movs	r1, #1
 80151d6:	fa01 f303 	lsl.w	r3, r1, r3
 80151da:	b29b      	uxth	r3, r3
 80151dc:	68f9      	ldr	r1, [r7, #12]
 80151de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80151e2:	4313      	orrs	r3, r2
 80151e4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80151e6:	68bb      	ldr	r3, [r7, #8]
 80151e8:	015a      	lsls	r2, r3, #5
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	4413      	add	r3, r2
 80151ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d155      	bne.n	80152a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80151fc:	68bb      	ldr	r3, [r7, #8]
 80151fe:	015a      	lsls	r2, r3, #5
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	4413      	add	r3, r2
 8015204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015208:	681a      	ldr	r2, [r3, #0]
 801520a:	683b      	ldr	r3, [r7, #0]
 801520c:	68db      	ldr	r3, [r3, #12]
 801520e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8015212:	683b      	ldr	r3, [r7, #0]
 8015214:	791b      	ldrb	r3, [r3, #4]
 8015216:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015218:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801521a:	68bb      	ldr	r3, [r7, #8]
 801521c:	059b      	lsls	r3, r3, #22
 801521e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015220:	4313      	orrs	r3, r2
 8015222:	68ba      	ldr	r2, [r7, #8]
 8015224:	0151      	lsls	r1, r2, #5
 8015226:	68fa      	ldr	r2, [r7, #12]
 8015228:	440a      	add	r2, r1
 801522a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801522e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015232:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015236:	6013      	str	r3, [r2, #0]
 8015238:	e036      	b.n	80152a8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015240:	69da      	ldr	r2, [r3, #28]
 8015242:	683b      	ldr	r3, [r7, #0]
 8015244:	781b      	ldrb	r3, [r3, #0]
 8015246:	f003 030f 	and.w	r3, r3, #15
 801524a:	2101      	movs	r1, #1
 801524c:	fa01 f303 	lsl.w	r3, r1, r3
 8015250:	041b      	lsls	r3, r3, #16
 8015252:	68f9      	ldr	r1, [r7, #12]
 8015254:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015258:	4313      	orrs	r3, r2
 801525a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801525c:	68bb      	ldr	r3, [r7, #8]
 801525e:	015a      	lsls	r2, r3, #5
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	4413      	add	r3, r2
 8015264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801526e:	2b00      	cmp	r3, #0
 8015270:	d11a      	bne.n	80152a8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8015272:	68bb      	ldr	r3, [r7, #8]
 8015274:	015a      	lsls	r2, r3, #5
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	4413      	add	r3, r2
 801527a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801527e:	681a      	ldr	r2, [r3, #0]
 8015280:	683b      	ldr	r3, [r7, #0]
 8015282:	68db      	ldr	r3, [r3, #12]
 8015284:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8015288:	683b      	ldr	r3, [r7, #0]
 801528a:	791b      	ldrb	r3, [r3, #4]
 801528c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801528e:	430b      	orrs	r3, r1
 8015290:	4313      	orrs	r3, r2
 8015292:	68ba      	ldr	r2, [r7, #8]
 8015294:	0151      	lsls	r1, r2, #5
 8015296:	68fa      	ldr	r2, [r7, #12]
 8015298:	440a      	add	r2, r1
 801529a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801529e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80152a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80152a6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80152a8:	2300      	movs	r3, #0
}
 80152aa:	4618      	mov	r0, r3
 80152ac:	3714      	adds	r7, #20
 80152ae:	46bd      	mov	sp, r7
 80152b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b4:	4770      	bx	lr
	...

080152b8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80152b8:	b480      	push	{r7}
 80152ba:	b085      	sub	sp, #20
 80152bc:	af00      	add	r7, sp, #0
 80152be:	6078      	str	r0, [r7, #4]
 80152c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80152c6:	683b      	ldr	r3, [r7, #0]
 80152c8:	781b      	ldrb	r3, [r3, #0]
 80152ca:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80152cc:	683b      	ldr	r3, [r7, #0]
 80152ce:	785b      	ldrb	r3, [r3, #1]
 80152d0:	2b01      	cmp	r3, #1
 80152d2:	d161      	bne.n	8015398 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80152d4:	68bb      	ldr	r3, [r7, #8]
 80152d6:	015a      	lsls	r2, r3, #5
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	4413      	add	r3, r2
 80152dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80152e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80152ea:	d11f      	bne.n	801532c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80152ec:	68bb      	ldr	r3, [r7, #8]
 80152ee:	015a      	lsls	r2, r3, #5
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	4413      	add	r3, r2
 80152f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	68ba      	ldr	r2, [r7, #8]
 80152fc:	0151      	lsls	r1, r2, #5
 80152fe:	68fa      	ldr	r2, [r7, #12]
 8015300:	440a      	add	r2, r1
 8015302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015306:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801530a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801530c:	68bb      	ldr	r3, [r7, #8]
 801530e:	015a      	lsls	r2, r3, #5
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	4413      	add	r3, r2
 8015314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	68ba      	ldr	r2, [r7, #8]
 801531c:	0151      	lsls	r1, r2, #5
 801531e:	68fa      	ldr	r2, [r7, #12]
 8015320:	440a      	add	r2, r1
 8015322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015326:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801532a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801532c:	68fb      	ldr	r3, [r7, #12]
 801532e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015334:	683b      	ldr	r3, [r7, #0]
 8015336:	781b      	ldrb	r3, [r3, #0]
 8015338:	f003 030f 	and.w	r3, r3, #15
 801533c:	2101      	movs	r1, #1
 801533e:	fa01 f303 	lsl.w	r3, r1, r3
 8015342:	b29b      	uxth	r3, r3
 8015344:	43db      	mvns	r3, r3
 8015346:	68f9      	ldr	r1, [r7, #12]
 8015348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801534c:	4013      	ands	r3, r2
 801534e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015356:	69da      	ldr	r2, [r3, #28]
 8015358:	683b      	ldr	r3, [r7, #0]
 801535a:	781b      	ldrb	r3, [r3, #0]
 801535c:	f003 030f 	and.w	r3, r3, #15
 8015360:	2101      	movs	r1, #1
 8015362:	fa01 f303 	lsl.w	r3, r1, r3
 8015366:	b29b      	uxth	r3, r3
 8015368:	43db      	mvns	r3, r3
 801536a:	68f9      	ldr	r1, [r7, #12]
 801536c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015370:	4013      	ands	r3, r2
 8015372:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8015374:	68bb      	ldr	r3, [r7, #8]
 8015376:	015a      	lsls	r2, r3, #5
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	4413      	add	r3, r2
 801537c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015380:	681a      	ldr	r2, [r3, #0]
 8015382:	68bb      	ldr	r3, [r7, #8]
 8015384:	0159      	lsls	r1, r3, #5
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	440b      	add	r3, r1
 801538a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801538e:	4619      	mov	r1, r3
 8015390:	4b35      	ldr	r3, [pc, #212]	; (8015468 <USB_DeactivateEndpoint+0x1b0>)
 8015392:	4013      	ands	r3, r2
 8015394:	600b      	str	r3, [r1, #0]
 8015396:	e060      	b.n	801545a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015398:	68bb      	ldr	r3, [r7, #8]
 801539a:	015a      	lsls	r2, r3, #5
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	4413      	add	r3, r2
 80153a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80153aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80153ae:	d11f      	bne.n	80153f0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80153b0:	68bb      	ldr	r3, [r7, #8]
 80153b2:	015a      	lsls	r2, r3, #5
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	4413      	add	r3, r2
 80153b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	68ba      	ldr	r2, [r7, #8]
 80153c0:	0151      	lsls	r1, r2, #5
 80153c2:	68fa      	ldr	r2, [r7, #12]
 80153c4:	440a      	add	r2, r1
 80153c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80153ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80153ce:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80153d0:	68bb      	ldr	r3, [r7, #8]
 80153d2:	015a      	lsls	r2, r3, #5
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	4413      	add	r3, r2
 80153d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	68ba      	ldr	r2, [r7, #8]
 80153e0:	0151      	lsls	r1, r2, #5
 80153e2:	68fa      	ldr	r2, [r7, #12]
 80153e4:	440a      	add	r2, r1
 80153e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80153ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80153ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80153f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80153f8:	683b      	ldr	r3, [r7, #0]
 80153fa:	781b      	ldrb	r3, [r3, #0]
 80153fc:	f003 030f 	and.w	r3, r3, #15
 8015400:	2101      	movs	r1, #1
 8015402:	fa01 f303 	lsl.w	r3, r1, r3
 8015406:	041b      	lsls	r3, r3, #16
 8015408:	43db      	mvns	r3, r3
 801540a:	68f9      	ldr	r1, [r7, #12]
 801540c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015410:	4013      	ands	r3, r2
 8015412:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801541a:	69da      	ldr	r2, [r3, #28]
 801541c:	683b      	ldr	r3, [r7, #0]
 801541e:	781b      	ldrb	r3, [r3, #0]
 8015420:	f003 030f 	and.w	r3, r3, #15
 8015424:	2101      	movs	r1, #1
 8015426:	fa01 f303 	lsl.w	r3, r1, r3
 801542a:	041b      	lsls	r3, r3, #16
 801542c:	43db      	mvns	r3, r3
 801542e:	68f9      	ldr	r1, [r7, #12]
 8015430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015434:	4013      	ands	r3, r2
 8015436:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8015438:	68bb      	ldr	r3, [r7, #8]
 801543a:	015a      	lsls	r2, r3, #5
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	4413      	add	r3, r2
 8015440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015444:	681a      	ldr	r2, [r3, #0]
 8015446:	68bb      	ldr	r3, [r7, #8]
 8015448:	0159      	lsls	r1, r3, #5
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	440b      	add	r3, r1
 801544e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015452:	4619      	mov	r1, r3
 8015454:	4b05      	ldr	r3, [pc, #20]	; (801546c <USB_DeactivateEndpoint+0x1b4>)
 8015456:	4013      	ands	r3, r2
 8015458:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801545a:	2300      	movs	r3, #0
}
 801545c:	4618      	mov	r0, r3
 801545e:	3714      	adds	r7, #20
 8015460:	46bd      	mov	sp, r7
 8015462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015466:	4770      	bx	lr
 8015468:	ec337800 	.word	0xec337800
 801546c:	eff37800 	.word	0xeff37800

08015470 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b086      	sub	sp, #24
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
 8015478:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801547e:	683b      	ldr	r3, [r7, #0]
 8015480:	781b      	ldrb	r3, [r3, #0]
 8015482:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015484:	683b      	ldr	r3, [r7, #0]
 8015486:	785b      	ldrb	r3, [r3, #1]
 8015488:	2b01      	cmp	r3, #1
 801548a:	f040 810a 	bne.w	80156a2 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801548e:	683b      	ldr	r3, [r7, #0]
 8015490:	699b      	ldr	r3, [r3, #24]
 8015492:	2b00      	cmp	r3, #0
 8015494:	d132      	bne.n	80154fc <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015496:	693b      	ldr	r3, [r7, #16]
 8015498:	015a      	lsls	r2, r3, #5
 801549a:	697b      	ldr	r3, [r7, #20]
 801549c:	4413      	add	r3, r2
 801549e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80154a2:	691b      	ldr	r3, [r3, #16]
 80154a4:	693a      	ldr	r2, [r7, #16]
 80154a6:	0151      	lsls	r1, r2, #5
 80154a8:	697a      	ldr	r2, [r7, #20]
 80154aa:	440a      	add	r2, r1
 80154ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80154b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80154b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80154b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80154ba:	693b      	ldr	r3, [r7, #16]
 80154bc:	015a      	lsls	r2, r3, #5
 80154be:	697b      	ldr	r3, [r7, #20]
 80154c0:	4413      	add	r3, r2
 80154c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80154c6:	691b      	ldr	r3, [r3, #16]
 80154c8:	693a      	ldr	r2, [r7, #16]
 80154ca:	0151      	lsls	r1, r2, #5
 80154cc:	697a      	ldr	r2, [r7, #20]
 80154ce:	440a      	add	r2, r1
 80154d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80154d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80154d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80154da:	693b      	ldr	r3, [r7, #16]
 80154dc:	015a      	lsls	r2, r3, #5
 80154de:	697b      	ldr	r3, [r7, #20]
 80154e0:	4413      	add	r3, r2
 80154e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80154e6:	691b      	ldr	r3, [r3, #16]
 80154e8:	693a      	ldr	r2, [r7, #16]
 80154ea:	0151      	lsls	r1, r2, #5
 80154ec:	697a      	ldr	r2, [r7, #20]
 80154ee:	440a      	add	r2, r1
 80154f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80154f4:	0cdb      	lsrs	r3, r3, #19
 80154f6:	04db      	lsls	r3, r3, #19
 80154f8:	6113      	str	r3, [r2, #16]
 80154fa:	e074      	b.n	80155e6 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80154fc:	693b      	ldr	r3, [r7, #16]
 80154fe:	015a      	lsls	r2, r3, #5
 8015500:	697b      	ldr	r3, [r7, #20]
 8015502:	4413      	add	r3, r2
 8015504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015508:	691b      	ldr	r3, [r3, #16]
 801550a:	693a      	ldr	r2, [r7, #16]
 801550c:	0151      	lsls	r1, r2, #5
 801550e:	697a      	ldr	r2, [r7, #20]
 8015510:	440a      	add	r2, r1
 8015512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015516:	0cdb      	lsrs	r3, r3, #19
 8015518:	04db      	lsls	r3, r3, #19
 801551a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801551c:	693b      	ldr	r3, [r7, #16]
 801551e:	015a      	lsls	r2, r3, #5
 8015520:	697b      	ldr	r3, [r7, #20]
 8015522:	4413      	add	r3, r2
 8015524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015528:	691b      	ldr	r3, [r3, #16]
 801552a:	693a      	ldr	r2, [r7, #16]
 801552c:	0151      	lsls	r1, r2, #5
 801552e:	697a      	ldr	r2, [r7, #20]
 8015530:	440a      	add	r2, r1
 8015532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015536:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801553a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801553e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8015540:	693b      	ldr	r3, [r7, #16]
 8015542:	015a      	lsls	r2, r3, #5
 8015544:	697b      	ldr	r3, [r7, #20]
 8015546:	4413      	add	r3, r2
 8015548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801554c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801554e:	683b      	ldr	r3, [r7, #0]
 8015550:	6999      	ldr	r1, [r3, #24]
 8015552:	683b      	ldr	r3, [r7, #0]
 8015554:	68db      	ldr	r3, [r3, #12]
 8015556:	440b      	add	r3, r1
 8015558:	1e59      	subs	r1, r3, #1
 801555a:	683b      	ldr	r3, [r7, #0]
 801555c:	68db      	ldr	r3, [r3, #12]
 801555e:	fbb1 f3f3 	udiv	r3, r1, r3
 8015562:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8015564:	4b9e      	ldr	r3, [pc, #632]	; (80157e0 <USB_EPStartXfer+0x370>)
 8015566:	400b      	ands	r3, r1
 8015568:	6939      	ldr	r1, [r7, #16]
 801556a:	0148      	lsls	r0, r1, #5
 801556c:	6979      	ldr	r1, [r7, #20]
 801556e:	4401      	add	r1, r0
 8015570:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8015574:	4313      	orrs	r3, r2
 8015576:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8015578:	693b      	ldr	r3, [r7, #16]
 801557a:	015a      	lsls	r2, r3, #5
 801557c:	697b      	ldr	r3, [r7, #20]
 801557e:	4413      	add	r3, r2
 8015580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015584:	691a      	ldr	r2, [r3, #16]
 8015586:	683b      	ldr	r3, [r7, #0]
 8015588:	699b      	ldr	r3, [r3, #24]
 801558a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801558e:	6939      	ldr	r1, [r7, #16]
 8015590:	0148      	lsls	r0, r1, #5
 8015592:	6979      	ldr	r1, [r7, #20]
 8015594:	4401      	add	r1, r0
 8015596:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801559a:	4313      	orrs	r3, r2
 801559c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801559e:	683b      	ldr	r3, [r7, #0]
 80155a0:	791b      	ldrb	r3, [r3, #4]
 80155a2:	2b01      	cmp	r3, #1
 80155a4:	d11f      	bne.n	80155e6 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80155a6:	693b      	ldr	r3, [r7, #16]
 80155a8:	015a      	lsls	r2, r3, #5
 80155aa:	697b      	ldr	r3, [r7, #20]
 80155ac:	4413      	add	r3, r2
 80155ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80155b2:	691b      	ldr	r3, [r3, #16]
 80155b4:	693a      	ldr	r2, [r7, #16]
 80155b6:	0151      	lsls	r1, r2, #5
 80155b8:	697a      	ldr	r2, [r7, #20]
 80155ba:	440a      	add	r2, r1
 80155bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80155c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80155c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80155c6:	693b      	ldr	r3, [r7, #16]
 80155c8:	015a      	lsls	r2, r3, #5
 80155ca:	697b      	ldr	r3, [r7, #20]
 80155cc:	4413      	add	r3, r2
 80155ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80155d2:	691b      	ldr	r3, [r3, #16]
 80155d4:	693a      	ldr	r2, [r7, #16]
 80155d6:	0151      	lsls	r1, r2, #5
 80155d8:	697a      	ldr	r2, [r7, #20]
 80155da:	440a      	add	r2, r1
 80155dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80155e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80155e4:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80155e6:	693b      	ldr	r3, [r7, #16]
 80155e8:	015a      	lsls	r2, r3, #5
 80155ea:	697b      	ldr	r3, [r7, #20]
 80155ec:	4413      	add	r3, r2
 80155ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80155f2:	681b      	ldr	r3, [r3, #0]
 80155f4:	693a      	ldr	r2, [r7, #16]
 80155f6:	0151      	lsls	r1, r2, #5
 80155f8:	697a      	ldr	r2, [r7, #20]
 80155fa:	440a      	add	r2, r1
 80155fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015600:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015604:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8015606:	683b      	ldr	r3, [r7, #0]
 8015608:	791b      	ldrb	r3, [r3, #4]
 801560a:	2b01      	cmp	r3, #1
 801560c:	d015      	beq.n	801563a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801560e:	683b      	ldr	r3, [r7, #0]
 8015610:	699b      	ldr	r3, [r3, #24]
 8015612:	2b00      	cmp	r3, #0
 8015614:	f000 8106 	beq.w	8015824 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8015618:	697b      	ldr	r3, [r7, #20]
 801561a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801561e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015620:	683b      	ldr	r3, [r7, #0]
 8015622:	781b      	ldrb	r3, [r3, #0]
 8015624:	f003 030f 	and.w	r3, r3, #15
 8015628:	2101      	movs	r1, #1
 801562a:	fa01 f303 	lsl.w	r3, r1, r3
 801562e:	6979      	ldr	r1, [r7, #20]
 8015630:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015634:	4313      	orrs	r3, r2
 8015636:	634b      	str	r3, [r1, #52]	; 0x34
 8015638:	e0f4      	b.n	8015824 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801563a:	697b      	ldr	r3, [r7, #20]
 801563c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015640:	689b      	ldr	r3, [r3, #8]
 8015642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015646:	2b00      	cmp	r3, #0
 8015648:	d110      	bne.n	801566c <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801564a:	693b      	ldr	r3, [r7, #16]
 801564c:	015a      	lsls	r2, r3, #5
 801564e:	697b      	ldr	r3, [r7, #20]
 8015650:	4413      	add	r3, r2
 8015652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	693a      	ldr	r2, [r7, #16]
 801565a:	0151      	lsls	r1, r2, #5
 801565c:	697a      	ldr	r2, [r7, #20]
 801565e:	440a      	add	r2, r1
 8015660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015664:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015668:	6013      	str	r3, [r2, #0]
 801566a:	e00f      	b.n	801568c <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801566c:	693b      	ldr	r3, [r7, #16]
 801566e:	015a      	lsls	r2, r3, #5
 8015670:	697b      	ldr	r3, [r7, #20]
 8015672:	4413      	add	r3, r2
 8015674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	693a      	ldr	r2, [r7, #16]
 801567c:	0151      	lsls	r1, r2, #5
 801567e:	697a      	ldr	r2, [r7, #20]
 8015680:	440a      	add	r2, r1
 8015682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801568a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 801568c:	683b      	ldr	r3, [r7, #0]
 801568e:	6919      	ldr	r1, [r3, #16]
 8015690:	683b      	ldr	r3, [r7, #0]
 8015692:	781a      	ldrb	r2, [r3, #0]
 8015694:	683b      	ldr	r3, [r7, #0]
 8015696:	699b      	ldr	r3, [r3, #24]
 8015698:	b29b      	uxth	r3, r3
 801569a:	6878      	ldr	r0, [r7, #4]
 801569c:	f000 fa94 	bl	8015bc8 <USB_WritePacket>
 80156a0:	e0c0      	b.n	8015824 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80156a2:	693b      	ldr	r3, [r7, #16]
 80156a4:	015a      	lsls	r2, r3, #5
 80156a6:	697b      	ldr	r3, [r7, #20]
 80156a8:	4413      	add	r3, r2
 80156aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80156ae:	691b      	ldr	r3, [r3, #16]
 80156b0:	693a      	ldr	r2, [r7, #16]
 80156b2:	0151      	lsls	r1, r2, #5
 80156b4:	697a      	ldr	r2, [r7, #20]
 80156b6:	440a      	add	r2, r1
 80156b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80156bc:	0cdb      	lsrs	r3, r3, #19
 80156be:	04db      	lsls	r3, r3, #19
 80156c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80156c2:	693b      	ldr	r3, [r7, #16]
 80156c4:	015a      	lsls	r2, r3, #5
 80156c6:	697b      	ldr	r3, [r7, #20]
 80156c8:	4413      	add	r3, r2
 80156ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80156ce:	691b      	ldr	r3, [r3, #16]
 80156d0:	693a      	ldr	r2, [r7, #16]
 80156d2:	0151      	lsls	r1, r2, #5
 80156d4:	697a      	ldr	r2, [r7, #20]
 80156d6:	440a      	add	r2, r1
 80156d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80156dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80156e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80156e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80156e6:	683b      	ldr	r3, [r7, #0]
 80156e8:	699b      	ldr	r3, [r3, #24]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d123      	bne.n	8015736 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80156ee:	693b      	ldr	r3, [r7, #16]
 80156f0:	015a      	lsls	r2, r3, #5
 80156f2:	697b      	ldr	r3, [r7, #20]
 80156f4:	4413      	add	r3, r2
 80156f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80156fa:	691a      	ldr	r2, [r3, #16]
 80156fc:	683b      	ldr	r3, [r7, #0]
 80156fe:	68db      	ldr	r3, [r3, #12]
 8015700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015704:	6939      	ldr	r1, [r7, #16]
 8015706:	0148      	lsls	r0, r1, #5
 8015708:	6979      	ldr	r1, [r7, #20]
 801570a:	4401      	add	r1, r0
 801570c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015710:	4313      	orrs	r3, r2
 8015712:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015714:	693b      	ldr	r3, [r7, #16]
 8015716:	015a      	lsls	r2, r3, #5
 8015718:	697b      	ldr	r3, [r7, #20]
 801571a:	4413      	add	r3, r2
 801571c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015720:	691b      	ldr	r3, [r3, #16]
 8015722:	693a      	ldr	r2, [r7, #16]
 8015724:	0151      	lsls	r1, r2, #5
 8015726:	697a      	ldr	r2, [r7, #20]
 8015728:	440a      	add	r2, r1
 801572a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801572e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015732:	6113      	str	r3, [r2, #16]
 8015734:	e037      	b.n	80157a6 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8015736:	683b      	ldr	r3, [r7, #0]
 8015738:	699a      	ldr	r2, [r3, #24]
 801573a:	683b      	ldr	r3, [r7, #0]
 801573c:	68db      	ldr	r3, [r3, #12]
 801573e:	4413      	add	r3, r2
 8015740:	1e5a      	subs	r2, r3, #1
 8015742:	683b      	ldr	r3, [r7, #0]
 8015744:	68db      	ldr	r3, [r3, #12]
 8015746:	fbb2 f3f3 	udiv	r3, r2, r3
 801574a:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 801574c:	683b      	ldr	r3, [r7, #0]
 801574e:	68db      	ldr	r3, [r3, #12]
 8015750:	89fa      	ldrh	r2, [r7, #14]
 8015752:	fb03 f202 	mul.w	r2, r3, r2
 8015756:	683b      	ldr	r3, [r7, #0]
 8015758:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801575a:	693b      	ldr	r3, [r7, #16]
 801575c:	015a      	lsls	r2, r3, #5
 801575e:	697b      	ldr	r3, [r7, #20]
 8015760:	4413      	add	r3, r2
 8015762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015766:	691a      	ldr	r2, [r3, #16]
 8015768:	89fb      	ldrh	r3, [r7, #14]
 801576a:	04d9      	lsls	r1, r3, #19
 801576c:	4b1c      	ldr	r3, [pc, #112]	; (80157e0 <USB_EPStartXfer+0x370>)
 801576e:	400b      	ands	r3, r1
 8015770:	6939      	ldr	r1, [r7, #16]
 8015772:	0148      	lsls	r0, r1, #5
 8015774:	6979      	ldr	r1, [r7, #20]
 8015776:	4401      	add	r1, r0
 8015778:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801577c:	4313      	orrs	r3, r2
 801577e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8015780:	693b      	ldr	r3, [r7, #16]
 8015782:	015a      	lsls	r2, r3, #5
 8015784:	697b      	ldr	r3, [r7, #20]
 8015786:	4413      	add	r3, r2
 8015788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801578c:	691a      	ldr	r2, [r3, #16]
 801578e:	683b      	ldr	r3, [r7, #0]
 8015790:	69db      	ldr	r3, [r3, #28]
 8015792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015796:	6939      	ldr	r1, [r7, #16]
 8015798:	0148      	lsls	r0, r1, #5
 801579a:	6979      	ldr	r1, [r7, #20]
 801579c:	4401      	add	r1, r0
 801579e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80157a2:	4313      	orrs	r3, r2
 80157a4:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80157a6:	683b      	ldr	r3, [r7, #0]
 80157a8:	791b      	ldrb	r3, [r3, #4]
 80157aa:	2b01      	cmp	r3, #1
 80157ac:	d12a      	bne.n	8015804 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80157ae:	697b      	ldr	r3, [r7, #20]
 80157b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80157b4:	689b      	ldr	r3, [r3, #8]
 80157b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d112      	bne.n	80157e4 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80157be:	693b      	ldr	r3, [r7, #16]
 80157c0:	015a      	lsls	r2, r3, #5
 80157c2:	697b      	ldr	r3, [r7, #20]
 80157c4:	4413      	add	r3, r2
 80157c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	693a      	ldr	r2, [r7, #16]
 80157ce:	0151      	lsls	r1, r2, #5
 80157d0:	697a      	ldr	r2, [r7, #20]
 80157d2:	440a      	add	r2, r1
 80157d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80157d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80157dc:	6013      	str	r3, [r2, #0]
 80157de:	e011      	b.n	8015804 <USB_EPStartXfer+0x394>
 80157e0:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80157e4:	693b      	ldr	r3, [r7, #16]
 80157e6:	015a      	lsls	r2, r3, #5
 80157e8:	697b      	ldr	r3, [r7, #20]
 80157ea:	4413      	add	r3, r2
 80157ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	693a      	ldr	r2, [r7, #16]
 80157f4:	0151      	lsls	r1, r2, #5
 80157f6:	697a      	ldr	r2, [r7, #20]
 80157f8:	440a      	add	r2, r1
 80157fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80157fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015802:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8015804:	693b      	ldr	r3, [r7, #16]
 8015806:	015a      	lsls	r2, r3, #5
 8015808:	697b      	ldr	r3, [r7, #20]
 801580a:	4413      	add	r3, r2
 801580c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	693a      	ldr	r2, [r7, #16]
 8015814:	0151      	lsls	r1, r2, #5
 8015816:	697a      	ldr	r2, [r7, #20]
 8015818:	440a      	add	r2, r1
 801581a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801581e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015822:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015824:	2300      	movs	r3, #0
}
 8015826:	4618      	mov	r0, r3
 8015828:	3718      	adds	r7, #24
 801582a:	46bd      	mov	sp, r7
 801582c:	bd80      	pop	{r7, pc}
 801582e:	bf00      	nop

08015830 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015830:	b480      	push	{r7}
 8015832:	b085      	sub	sp, #20
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
 8015838:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801583e:	683b      	ldr	r3, [r7, #0]
 8015840:	781b      	ldrb	r3, [r3, #0]
 8015842:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015844:	683b      	ldr	r3, [r7, #0]
 8015846:	785b      	ldrb	r3, [r3, #1]
 8015848:	2b01      	cmp	r3, #1
 801584a:	f040 80ab 	bne.w	80159a4 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801584e:	683b      	ldr	r3, [r7, #0]
 8015850:	699b      	ldr	r3, [r3, #24]
 8015852:	2b00      	cmp	r3, #0
 8015854:	d132      	bne.n	80158bc <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015856:	68bb      	ldr	r3, [r7, #8]
 8015858:	015a      	lsls	r2, r3, #5
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	4413      	add	r3, r2
 801585e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015862:	691b      	ldr	r3, [r3, #16]
 8015864:	68ba      	ldr	r2, [r7, #8]
 8015866:	0151      	lsls	r1, r2, #5
 8015868:	68fa      	ldr	r2, [r7, #12]
 801586a:	440a      	add	r2, r1
 801586c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015870:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015874:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8015878:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801587a:	68bb      	ldr	r3, [r7, #8]
 801587c:	015a      	lsls	r2, r3, #5
 801587e:	68fb      	ldr	r3, [r7, #12]
 8015880:	4413      	add	r3, r2
 8015882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015886:	691b      	ldr	r3, [r3, #16]
 8015888:	68ba      	ldr	r2, [r7, #8]
 801588a:	0151      	lsls	r1, r2, #5
 801588c:	68fa      	ldr	r2, [r7, #12]
 801588e:	440a      	add	r2, r1
 8015890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015894:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015898:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801589a:	68bb      	ldr	r3, [r7, #8]
 801589c:	015a      	lsls	r2, r3, #5
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	4413      	add	r3, r2
 80158a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80158a6:	691b      	ldr	r3, [r3, #16]
 80158a8:	68ba      	ldr	r2, [r7, #8]
 80158aa:	0151      	lsls	r1, r2, #5
 80158ac:	68fa      	ldr	r2, [r7, #12]
 80158ae:	440a      	add	r2, r1
 80158b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80158b4:	0cdb      	lsrs	r3, r3, #19
 80158b6:	04db      	lsls	r3, r3, #19
 80158b8:	6113      	str	r3, [r2, #16]
 80158ba:	e04e      	b.n	801595a <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80158bc:	68bb      	ldr	r3, [r7, #8]
 80158be:	015a      	lsls	r2, r3, #5
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	4413      	add	r3, r2
 80158c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80158c8:	691b      	ldr	r3, [r3, #16]
 80158ca:	68ba      	ldr	r2, [r7, #8]
 80158cc:	0151      	lsls	r1, r2, #5
 80158ce:	68fa      	ldr	r2, [r7, #12]
 80158d0:	440a      	add	r2, r1
 80158d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80158d6:	0cdb      	lsrs	r3, r3, #19
 80158d8:	04db      	lsls	r3, r3, #19
 80158da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80158dc:	68bb      	ldr	r3, [r7, #8]
 80158de:	015a      	lsls	r2, r3, #5
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	4413      	add	r3, r2
 80158e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80158e8:	691b      	ldr	r3, [r3, #16]
 80158ea:	68ba      	ldr	r2, [r7, #8]
 80158ec:	0151      	lsls	r1, r2, #5
 80158ee:	68fa      	ldr	r2, [r7, #12]
 80158f0:	440a      	add	r2, r1
 80158f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80158f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80158fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80158fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	699a      	ldr	r2, [r3, #24]
 8015904:	683b      	ldr	r3, [r7, #0]
 8015906:	68db      	ldr	r3, [r3, #12]
 8015908:	429a      	cmp	r2, r3
 801590a:	d903      	bls.n	8015914 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 801590c:	683b      	ldr	r3, [r7, #0]
 801590e:	68da      	ldr	r2, [r3, #12]
 8015910:	683b      	ldr	r3, [r7, #0]
 8015912:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015914:	68bb      	ldr	r3, [r7, #8]
 8015916:	015a      	lsls	r2, r3, #5
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	4413      	add	r3, r2
 801591c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015920:	691b      	ldr	r3, [r3, #16]
 8015922:	68ba      	ldr	r2, [r7, #8]
 8015924:	0151      	lsls	r1, r2, #5
 8015926:	68fa      	ldr	r2, [r7, #12]
 8015928:	440a      	add	r2, r1
 801592a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801592e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015932:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8015934:	68bb      	ldr	r3, [r7, #8]
 8015936:	015a      	lsls	r2, r3, #5
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	4413      	add	r3, r2
 801593c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015940:	691a      	ldr	r2, [r3, #16]
 8015942:	683b      	ldr	r3, [r7, #0]
 8015944:	699b      	ldr	r3, [r3, #24]
 8015946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801594a:	68b9      	ldr	r1, [r7, #8]
 801594c:	0148      	lsls	r0, r1, #5
 801594e:	68f9      	ldr	r1, [r7, #12]
 8015950:	4401      	add	r1, r0
 8015952:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8015956:	4313      	orrs	r3, r2
 8015958:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801595a:	68bb      	ldr	r3, [r7, #8]
 801595c:	015a      	lsls	r2, r3, #5
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	4413      	add	r3, r2
 8015962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	68ba      	ldr	r2, [r7, #8]
 801596a:	0151      	lsls	r1, r2, #5
 801596c:	68fa      	ldr	r2, [r7, #12]
 801596e:	440a      	add	r2, r1
 8015970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015974:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015978:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 801597a:	683b      	ldr	r3, [r7, #0]
 801597c:	699b      	ldr	r3, [r3, #24]
 801597e:	2b00      	cmp	r3, #0
 8015980:	d071      	beq.n	8015a66 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801598a:	683b      	ldr	r3, [r7, #0]
 801598c:	781b      	ldrb	r3, [r3, #0]
 801598e:	f003 030f 	and.w	r3, r3, #15
 8015992:	2101      	movs	r1, #1
 8015994:	fa01 f303 	lsl.w	r3, r1, r3
 8015998:	68f9      	ldr	r1, [r7, #12]
 801599a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801599e:	4313      	orrs	r3, r2
 80159a0:	634b      	str	r3, [r1, #52]	; 0x34
 80159a2:	e060      	b.n	8015a66 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80159a4:	68bb      	ldr	r3, [r7, #8]
 80159a6:	015a      	lsls	r2, r3, #5
 80159a8:	68fb      	ldr	r3, [r7, #12]
 80159aa:	4413      	add	r3, r2
 80159ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80159b0:	691b      	ldr	r3, [r3, #16]
 80159b2:	68ba      	ldr	r2, [r7, #8]
 80159b4:	0151      	lsls	r1, r2, #5
 80159b6:	68fa      	ldr	r2, [r7, #12]
 80159b8:	440a      	add	r2, r1
 80159ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80159be:	0cdb      	lsrs	r3, r3, #19
 80159c0:	04db      	lsls	r3, r3, #19
 80159c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80159c4:	68bb      	ldr	r3, [r7, #8]
 80159c6:	015a      	lsls	r2, r3, #5
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	4413      	add	r3, r2
 80159cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80159d0:	691b      	ldr	r3, [r3, #16]
 80159d2:	68ba      	ldr	r2, [r7, #8]
 80159d4:	0151      	lsls	r1, r2, #5
 80159d6:	68fa      	ldr	r2, [r7, #12]
 80159d8:	440a      	add	r2, r1
 80159da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80159de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80159e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80159e6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80159e8:	683b      	ldr	r3, [r7, #0]
 80159ea:	699b      	ldr	r3, [r3, #24]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d003      	beq.n	80159f8 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 80159f0:	683b      	ldr	r3, [r7, #0]
 80159f2:	68da      	ldr	r2, [r3, #12]
 80159f4:	683b      	ldr	r3, [r7, #0]
 80159f6:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80159f8:	683b      	ldr	r3, [r7, #0]
 80159fa:	68da      	ldr	r2, [r3, #12]
 80159fc:	683b      	ldr	r3, [r7, #0]
 80159fe:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015a00:	68bb      	ldr	r3, [r7, #8]
 8015a02:	015a      	lsls	r2, r3, #5
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	4413      	add	r3, r2
 8015a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015a0c:	691b      	ldr	r3, [r3, #16]
 8015a0e:	68ba      	ldr	r2, [r7, #8]
 8015a10:	0151      	lsls	r1, r2, #5
 8015a12:	68fa      	ldr	r2, [r7, #12]
 8015a14:	440a      	add	r2, r1
 8015a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015a1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015a1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8015a20:	68bb      	ldr	r3, [r7, #8]
 8015a22:	015a      	lsls	r2, r3, #5
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	4413      	add	r3, r2
 8015a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015a2c:	691a      	ldr	r2, [r3, #16]
 8015a2e:	683b      	ldr	r3, [r7, #0]
 8015a30:	69db      	ldr	r3, [r3, #28]
 8015a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015a36:	68b9      	ldr	r1, [r7, #8]
 8015a38:	0148      	lsls	r0, r1, #5
 8015a3a:	68f9      	ldr	r1, [r7, #12]
 8015a3c:	4401      	add	r1, r0
 8015a3e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015a42:	4313      	orrs	r3, r2
 8015a44:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8015a46:	68bb      	ldr	r3, [r7, #8]
 8015a48:	015a      	lsls	r2, r3, #5
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	4413      	add	r3, r2
 8015a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	68ba      	ldr	r2, [r7, #8]
 8015a56:	0151      	lsls	r1, r2, #5
 8015a58:	68fa      	ldr	r2, [r7, #12]
 8015a5a:	440a      	add	r2, r1
 8015a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015a60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015a64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015a66:	2300      	movs	r3, #0
}
 8015a68:	4618      	mov	r0, r3
 8015a6a:	3714      	adds	r7, #20
 8015a6c:	46bd      	mov	sp, r7
 8015a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a72:	4770      	bx	lr

08015a74 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015a74:	b480      	push	{r7}
 8015a76:	b087      	sub	sp, #28
 8015a78:	af00      	add	r7, sp, #0
 8015a7a:	6078      	str	r0, [r7, #4]
 8015a7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8015a7e:	2300      	movs	r3, #0
 8015a80:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8015a82:	2300      	movs	r3, #0
 8015a84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015a8a:	683b      	ldr	r3, [r7, #0]
 8015a8c:	785b      	ldrb	r3, [r3, #1]
 8015a8e:	2b01      	cmp	r3, #1
 8015a90:	d14a      	bne.n	8015b28 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015a92:	683b      	ldr	r3, [r7, #0]
 8015a94:	781b      	ldrb	r3, [r3, #0]
 8015a96:	015a      	lsls	r2, r3, #5
 8015a98:	693b      	ldr	r3, [r7, #16]
 8015a9a:	4413      	add	r3, r2
 8015a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015aa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015aaa:	f040 8086 	bne.w	8015bba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8015aae:	683b      	ldr	r3, [r7, #0]
 8015ab0:	781b      	ldrb	r3, [r3, #0]
 8015ab2:	015a      	lsls	r2, r3, #5
 8015ab4:	693b      	ldr	r3, [r7, #16]
 8015ab6:	4413      	add	r3, r2
 8015ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	683a      	ldr	r2, [r7, #0]
 8015ac0:	7812      	ldrb	r2, [r2, #0]
 8015ac2:	0151      	lsls	r1, r2, #5
 8015ac4:	693a      	ldr	r2, [r7, #16]
 8015ac6:	440a      	add	r2, r1
 8015ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015acc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015ad0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8015ad2:	683b      	ldr	r3, [r7, #0]
 8015ad4:	781b      	ldrb	r3, [r3, #0]
 8015ad6:	015a      	lsls	r2, r3, #5
 8015ad8:	693b      	ldr	r3, [r7, #16]
 8015ada:	4413      	add	r3, r2
 8015adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	683a      	ldr	r2, [r7, #0]
 8015ae4:	7812      	ldrb	r2, [r2, #0]
 8015ae6:	0151      	lsls	r1, r2, #5
 8015ae8:	693a      	ldr	r2, [r7, #16]
 8015aea:	440a      	add	r2, r1
 8015aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015af0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015af4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	3301      	adds	r3, #1
 8015afa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	f242 7210 	movw	r2, #10000	; 0x2710
 8015b02:	4293      	cmp	r3, r2
 8015b04:	d902      	bls.n	8015b0c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8015b06:	2301      	movs	r3, #1
 8015b08:	75fb      	strb	r3, [r7, #23]
          break;
 8015b0a:	e056      	b.n	8015bba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8015b0c:	683b      	ldr	r3, [r7, #0]
 8015b0e:	781b      	ldrb	r3, [r3, #0]
 8015b10:	015a      	lsls	r2, r3, #5
 8015b12:	693b      	ldr	r3, [r7, #16]
 8015b14:	4413      	add	r3, r2
 8015b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015b20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015b24:	d0e7      	beq.n	8015af6 <USB_EPStopXfer+0x82>
 8015b26:	e048      	b.n	8015bba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015b28:	683b      	ldr	r3, [r7, #0]
 8015b2a:	781b      	ldrb	r3, [r3, #0]
 8015b2c:	015a      	lsls	r2, r3, #5
 8015b2e:	693b      	ldr	r3, [r7, #16]
 8015b30:	4413      	add	r3, r2
 8015b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015b40:	d13b      	bne.n	8015bba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8015b42:	683b      	ldr	r3, [r7, #0]
 8015b44:	781b      	ldrb	r3, [r3, #0]
 8015b46:	015a      	lsls	r2, r3, #5
 8015b48:	693b      	ldr	r3, [r7, #16]
 8015b4a:	4413      	add	r3, r2
 8015b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	683a      	ldr	r2, [r7, #0]
 8015b54:	7812      	ldrb	r2, [r2, #0]
 8015b56:	0151      	lsls	r1, r2, #5
 8015b58:	693a      	ldr	r2, [r7, #16]
 8015b5a:	440a      	add	r2, r1
 8015b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015b60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015b64:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8015b66:	683b      	ldr	r3, [r7, #0]
 8015b68:	781b      	ldrb	r3, [r3, #0]
 8015b6a:	015a      	lsls	r2, r3, #5
 8015b6c:	693b      	ldr	r3, [r7, #16]
 8015b6e:	4413      	add	r3, r2
 8015b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	683a      	ldr	r2, [r7, #0]
 8015b78:	7812      	ldrb	r2, [r2, #0]
 8015b7a:	0151      	lsls	r1, r2, #5
 8015b7c:	693a      	ldr	r2, [r7, #16]
 8015b7e:	440a      	add	r2, r1
 8015b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015b84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015b88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	3301      	adds	r3, #1
 8015b8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	f242 7210 	movw	r2, #10000	; 0x2710
 8015b96:	4293      	cmp	r3, r2
 8015b98:	d902      	bls.n	8015ba0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8015b9a:	2301      	movs	r3, #1
 8015b9c:	75fb      	strb	r3, [r7, #23]
          break;
 8015b9e:	e00c      	b.n	8015bba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8015ba0:	683b      	ldr	r3, [r7, #0]
 8015ba2:	781b      	ldrb	r3, [r3, #0]
 8015ba4:	015a      	lsls	r2, r3, #5
 8015ba6:	693b      	ldr	r3, [r7, #16]
 8015ba8:	4413      	add	r3, r2
 8015baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015bae:	681b      	ldr	r3, [r3, #0]
 8015bb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015bb8:	d0e7      	beq.n	8015b8a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8015bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8015bbc:	4618      	mov	r0, r3
 8015bbe:	371c      	adds	r7, #28
 8015bc0:	46bd      	mov	sp, r7
 8015bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc6:	4770      	bx	lr

08015bc8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8015bc8:	b480      	push	{r7}
 8015bca:	b089      	sub	sp, #36	; 0x24
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	60f8      	str	r0, [r7, #12]
 8015bd0:	60b9      	str	r1, [r7, #8]
 8015bd2:	4611      	mov	r1, r2
 8015bd4:	461a      	mov	r2, r3
 8015bd6:	460b      	mov	r3, r1
 8015bd8:	71fb      	strb	r3, [r7, #7]
 8015bda:	4613      	mov	r3, r2
 8015bdc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8015be2:	68bb      	ldr	r3, [r7, #8]
 8015be4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8015be6:	88bb      	ldrh	r3, [r7, #4]
 8015be8:	3303      	adds	r3, #3
 8015bea:	089b      	lsrs	r3, r3, #2
 8015bec:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8015bee:	2300      	movs	r3, #0
 8015bf0:	61bb      	str	r3, [r7, #24]
 8015bf2:	e018      	b.n	8015c26 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8015bf4:	79fb      	ldrb	r3, [r7, #7]
 8015bf6:	031a      	lsls	r2, r3, #12
 8015bf8:	697b      	ldr	r3, [r7, #20]
 8015bfa:	4413      	add	r3, r2
 8015bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c00:	461a      	mov	r2, r3
 8015c02:	69fb      	ldr	r3, [r7, #28]
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	6013      	str	r3, [r2, #0]
    pSrc++;
 8015c08:	69fb      	ldr	r3, [r7, #28]
 8015c0a:	3301      	adds	r3, #1
 8015c0c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8015c0e:	69fb      	ldr	r3, [r7, #28]
 8015c10:	3301      	adds	r3, #1
 8015c12:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8015c14:	69fb      	ldr	r3, [r7, #28]
 8015c16:	3301      	adds	r3, #1
 8015c18:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8015c1a:	69fb      	ldr	r3, [r7, #28]
 8015c1c:	3301      	adds	r3, #1
 8015c1e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8015c20:	69bb      	ldr	r3, [r7, #24]
 8015c22:	3301      	adds	r3, #1
 8015c24:	61bb      	str	r3, [r7, #24]
 8015c26:	69ba      	ldr	r2, [r7, #24]
 8015c28:	693b      	ldr	r3, [r7, #16]
 8015c2a:	429a      	cmp	r2, r3
 8015c2c:	d3e2      	bcc.n	8015bf4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8015c2e:	2300      	movs	r3, #0
}
 8015c30:	4618      	mov	r0, r3
 8015c32:	3724      	adds	r7, #36	; 0x24
 8015c34:	46bd      	mov	sp, r7
 8015c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c3a:	4770      	bx	lr

08015c3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8015c3c:	b480      	push	{r7}
 8015c3e:	b08b      	sub	sp, #44	; 0x2c
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	60f8      	str	r0, [r7, #12]
 8015c44:	60b9      	str	r1, [r7, #8]
 8015c46:	4613      	mov	r3, r2
 8015c48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8015c4e:	68bb      	ldr	r3, [r7, #8]
 8015c50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8015c52:	88fb      	ldrh	r3, [r7, #6]
 8015c54:	089b      	lsrs	r3, r3, #2
 8015c56:	b29b      	uxth	r3, r3
 8015c58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8015c5a:	88fb      	ldrh	r3, [r7, #6]
 8015c5c:	f003 0303 	and.w	r3, r3, #3
 8015c60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8015c62:	2300      	movs	r3, #0
 8015c64:	623b      	str	r3, [r7, #32]
 8015c66:	e014      	b.n	8015c92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8015c68:	69bb      	ldr	r3, [r7, #24]
 8015c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c6e:	681a      	ldr	r2, [r3, #0]
 8015c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c72:	601a      	str	r2, [r3, #0]
    pDest++;
 8015c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c76:	3301      	adds	r3, #1
 8015c78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c7c:	3301      	adds	r3, #1
 8015c7e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c82:	3301      	adds	r3, #1
 8015c84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8015c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c88:	3301      	adds	r3, #1
 8015c8a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8015c8c:	6a3b      	ldr	r3, [r7, #32]
 8015c8e:	3301      	adds	r3, #1
 8015c90:	623b      	str	r3, [r7, #32]
 8015c92:	6a3a      	ldr	r2, [r7, #32]
 8015c94:	697b      	ldr	r3, [r7, #20]
 8015c96:	429a      	cmp	r2, r3
 8015c98:	d3e6      	bcc.n	8015c68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8015c9a:	8bfb      	ldrh	r3, [r7, #30]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d01e      	beq.n	8015cde <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8015ca0:	2300      	movs	r3, #0
 8015ca2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8015ca4:	69bb      	ldr	r3, [r7, #24]
 8015ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015caa:	461a      	mov	r2, r3
 8015cac:	f107 0310 	add.w	r3, r7, #16
 8015cb0:	6812      	ldr	r2, [r2, #0]
 8015cb2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8015cb4:	693a      	ldr	r2, [r7, #16]
 8015cb6:	6a3b      	ldr	r3, [r7, #32]
 8015cb8:	b2db      	uxtb	r3, r3
 8015cba:	00db      	lsls	r3, r3, #3
 8015cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8015cc0:	b2da      	uxtb	r2, r3
 8015cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cc4:	701a      	strb	r2, [r3, #0]
      i++;
 8015cc6:	6a3b      	ldr	r3, [r7, #32]
 8015cc8:	3301      	adds	r3, #1
 8015cca:	623b      	str	r3, [r7, #32]
      pDest++;
 8015ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cce:	3301      	adds	r3, #1
 8015cd0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8015cd2:	8bfb      	ldrh	r3, [r7, #30]
 8015cd4:	3b01      	subs	r3, #1
 8015cd6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8015cd8:	8bfb      	ldrh	r3, [r7, #30]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d1ea      	bne.n	8015cb4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8015cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	372c      	adds	r7, #44	; 0x2c
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cea:	4770      	bx	lr

08015cec <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015cec:	b480      	push	{r7}
 8015cee:	b085      	sub	sp, #20
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	6078      	str	r0, [r7, #4]
 8015cf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015cfa:	683b      	ldr	r3, [r7, #0]
 8015cfc:	781b      	ldrb	r3, [r3, #0]
 8015cfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015d00:	683b      	ldr	r3, [r7, #0]
 8015d02:	785b      	ldrb	r3, [r3, #1]
 8015d04:	2b01      	cmp	r3, #1
 8015d06:	d12c      	bne.n	8015d62 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015d08:	68bb      	ldr	r3, [r7, #8]
 8015d0a:	015a      	lsls	r2, r3, #5
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	4413      	add	r3, r2
 8015d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	db12      	blt.n	8015d40 <USB_EPSetStall+0x54>
 8015d1a:	68bb      	ldr	r3, [r7, #8]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d00f      	beq.n	8015d40 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8015d20:	68bb      	ldr	r3, [r7, #8]
 8015d22:	015a      	lsls	r2, r3, #5
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	4413      	add	r3, r2
 8015d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	68ba      	ldr	r2, [r7, #8]
 8015d30:	0151      	lsls	r1, r2, #5
 8015d32:	68fa      	ldr	r2, [r7, #12]
 8015d34:	440a      	add	r2, r1
 8015d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015d3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015d3e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8015d40:	68bb      	ldr	r3, [r7, #8]
 8015d42:	015a      	lsls	r2, r3, #5
 8015d44:	68fb      	ldr	r3, [r7, #12]
 8015d46:	4413      	add	r3, r2
 8015d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	68ba      	ldr	r2, [r7, #8]
 8015d50:	0151      	lsls	r1, r2, #5
 8015d52:	68fa      	ldr	r2, [r7, #12]
 8015d54:	440a      	add	r2, r1
 8015d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015d5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015d5e:	6013      	str	r3, [r2, #0]
 8015d60:	e02b      	b.n	8015dba <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8015d62:	68bb      	ldr	r3, [r7, #8]
 8015d64:	015a      	lsls	r2, r3, #5
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	4413      	add	r3, r2
 8015d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	db12      	blt.n	8015d9a <USB_EPSetStall+0xae>
 8015d74:	68bb      	ldr	r3, [r7, #8]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d00f      	beq.n	8015d9a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8015d7a:	68bb      	ldr	r3, [r7, #8]
 8015d7c:	015a      	lsls	r2, r3, #5
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	4413      	add	r3, r2
 8015d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	68ba      	ldr	r2, [r7, #8]
 8015d8a:	0151      	lsls	r1, r2, #5
 8015d8c:	68fa      	ldr	r2, [r7, #12]
 8015d8e:	440a      	add	r2, r1
 8015d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015d94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8015d98:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8015d9a:	68bb      	ldr	r3, [r7, #8]
 8015d9c:	015a      	lsls	r2, r3, #5
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	4413      	add	r3, r2
 8015da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	68ba      	ldr	r2, [r7, #8]
 8015daa:	0151      	lsls	r1, r2, #5
 8015dac:	68fa      	ldr	r2, [r7, #12]
 8015dae:	440a      	add	r2, r1
 8015db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015db4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015db8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015dba:	2300      	movs	r3, #0
}
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	3714      	adds	r7, #20
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc6:	4770      	bx	lr

08015dc8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015dc8:	b480      	push	{r7}
 8015dca:	b085      	sub	sp, #20
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
 8015dd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015dd6:	683b      	ldr	r3, [r7, #0]
 8015dd8:	781b      	ldrb	r3, [r3, #0]
 8015dda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015ddc:	683b      	ldr	r3, [r7, #0]
 8015dde:	785b      	ldrb	r3, [r3, #1]
 8015de0:	2b01      	cmp	r3, #1
 8015de2:	d128      	bne.n	8015e36 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8015de4:	68bb      	ldr	r3, [r7, #8]
 8015de6:	015a      	lsls	r2, r3, #5
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	4413      	add	r3, r2
 8015dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	68ba      	ldr	r2, [r7, #8]
 8015df4:	0151      	lsls	r1, r2, #5
 8015df6:	68fa      	ldr	r2, [r7, #12]
 8015df8:	440a      	add	r2, r1
 8015dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015dfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8015e02:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015e04:	683b      	ldr	r3, [r7, #0]
 8015e06:	791b      	ldrb	r3, [r3, #4]
 8015e08:	2b03      	cmp	r3, #3
 8015e0a:	d003      	beq.n	8015e14 <USB_EPClearStall+0x4c>
 8015e0c:	683b      	ldr	r3, [r7, #0]
 8015e0e:	791b      	ldrb	r3, [r3, #4]
 8015e10:	2b02      	cmp	r3, #2
 8015e12:	d138      	bne.n	8015e86 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015e14:	68bb      	ldr	r3, [r7, #8]
 8015e16:	015a      	lsls	r2, r3, #5
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	4413      	add	r3, r2
 8015e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	68ba      	ldr	r2, [r7, #8]
 8015e24:	0151      	lsls	r1, r2, #5
 8015e26:	68fa      	ldr	r2, [r7, #12]
 8015e28:	440a      	add	r2, r1
 8015e2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015e32:	6013      	str	r3, [r2, #0]
 8015e34:	e027      	b.n	8015e86 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8015e36:	68bb      	ldr	r3, [r7, #8]
 8015e38:	015a      	lsls	r2, r3, #5
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	4413      	add	r3, r2
 8015e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	68ba      	ldr	r2, [r7, #8]
 8015e46:	0151      	lsls	r1, r2, #5
 8015e48:	68fa      	ldr	r2, [r7, #12]
 8015e4a:	440a      	add	r2, r1
 8015e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015e50:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8015e54:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8015e56:	683b      	ldr	r3, [r7, #0]
 8015e58:	791b      	ldrb	r3, [r3, #4]
 8015e5a:	2b03      	cmp	r3, #3
 8015e5c:	d003      	beq.n	8015e66 <USB_EPClearStall+0x9e>
 8015e5e:	683b      	ldr	r3, [r7, #0]
 8015e60:	791b      	ldrb	r3, [r3, #4]
 8015e62:	2b02      	cmp	r3, #2
 8015e64:	d10f      	bne.n	8015e86 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8015e66:	68bb      	ldr	r3, [r7, #8]
 8015e68:	015a      	lsls	r2, r3, #5
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	4413      	add	r3, r2
 8015e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	68ba      	ldr	r2, [r7, #8]
 8015e76:	0151      	lsls	r1, r2, #5
 8015e78:	68fa      	ldr	r2, [r7, #12]
 8015e7a:	440a      	add	r2, r1
 8015e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015e84:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8015e86:	2300      	movs	r3, #0
}
 8015e88:	4618      	mov	r0, r3
 8015e8a:	3714      	adds	r7, #20
 8015e8c:	46bd      	mov	sp, r7
 8015e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e92:	4770      	bx	lr

08015e94 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8015e94:	b480      	push	{r7}
 8015e96:	b085      	sub	sp, #20
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	6078      	str	r0, [r7, #4]
 8015e9c:	460b      	mov	r3, r1
 8015e9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	68fa      	ldr	r2, [r7, #12]
 8015eae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015eb2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8015eb6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015ebe:	681a      	ldr	r2, [r3, #0]
 8015ec0:	78fb      	ldrb	r3, [r7, #3]
 8015ec2:	011b      	lsls	r3, r3, #4
 8015ec4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8015ec8:	68f9      	ldr	r1, [r7, #12]
 8015eca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015ece:	4313      	orrs	r3, r2
 8015ed0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8015ed2:	2300      	movs	r3, #0
}
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	3714      	adds	r7, #20
 8015ed8:	46bd      	mov	sp, r7
 8015eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ede:	4770      	bx	lr

08015ee0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8015ee0:	b480      	push	{r7}
 8015ee2:	b085      	sub	sp, #20
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	68fa      	ldr	r2, [r7, #12]
 8015ef6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015efa:	f023 0303 	bic.w	r3, r3, #3
 8015efe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015f06:	685b      	ldr	r3, [r3, #4]
 8015f08:	68fa      	ldr	r2, [r7, #12]
 8015f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015f0e:	f023 0302 	bic.w	r3, r3, #2
 8015f12:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015f14:	2300      	movs	r3, #0
}
 8015f16:	4618      	mov	r0, r3
 8015f18:	3714      	adds	r7, #20
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f20:	4770      	bx	lr

08015f22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8015f22:	b480      	push	{r7}
 8015f24:	b085      	sub	sp, #20
 8015f26:	af00      	add	r7, sp, #0
 8015f28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	68fa      	ldr	r2, [r7, #12]
 8015f38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015f3c:	f023 0303 	bic.w	r3, r3, #3
 8015f40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015f48:	685b      	ldr	r3, [r3, #4]
 8015f4a:	68fa      	ldr	r2, [r7, #12]
 8015f4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8015f50:	f043 0302 	orr.w	r3, r3, #2
 8015f54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8015f56:	2300      	movs	r3, #0
}
 8015f58:	4618      	mov	r0, r3
 8015f5a:	3714      	adds	r7, #20
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f62:	4770      	bx	lr

08015f64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8015f64:	b480      	push	{r7}
 8015f66:	b085      	sub	sp, #20
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	695b      	ldr	r3, [r3, #20]
 8015f70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	699b      	ldr	r3, [r3, #24]
 8015f76:	68fa      	ldr	r2, [r7, #12]
 8015f78:	4013      	ands	r3, r2
 8015f7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8015f7c:	68fb      	ldr	r3, [r7, #12]
}
 8015f7e:	4618      	mov	r0, r3
 8015f80:	3714      	adds	r7, #20
 8015f82:	46bd      	mov	sp, r7
 8015f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f88:	4770      	bx	lr

08015f8a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8015f8a:	b480      	push	{r7}
 8015f8c:	b085      	sub	sp, #20
 8015f8e:	af00      	add	r7, sp, #0
 8015f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015f96:	68fb      	ldr	r3, [r7, #12]
 8015f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015f9c:	699b      	ldr	r3, [r3, #24]
 8015f9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015fa6:	69db      	ldr	r3, [r3, #28]
 8015fa8:	68ba      	ldr	r2, [r7, #8]
 8015faa:	4013      	ands	r3, r2
 8015fac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8015fae:	68bb      	ldr	r3, [r7, #8]
 8015fb0:	0c1b      	lsrs	r3, r3, #16
}
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	3714      	adds	r7, #20
 8015fb6:	46bd      	mov	sp, r7
 8015fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fbc:	4770      	bx	lr

08015fbe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8015fbe:	b480      	push	{r7}
 8015fc0:	b085      	sub	sp, #20
 8015fc2:	af00      	add	r7, sp, #0
 8015fc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015fd0:	699b      	ldr	r3, [r3, #24]
 8015fd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015fda:	69db      	ldr	r3, [r3, #28]
 8015fdc:	68ba      	ldr	r2, [r7, #8]
 8015fde:	4013      	ands	r3, r2
 8015fe0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8015fe2:	68bb      	ldr	r3, [r7, #8]
 8015fe4:	b29b      	uxth	r3, r3
}
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	3714      	adds	r7, #20
 8015fea:	46bd      	mov	sp, r7
 8015fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ff0:	4770      	bx	lr

08015ff2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8015ff2:	b480      	push	{r7}
 8015ff4:	b085      	sub	sp, #20
 8015ff6:	af00      	add	r7, sp, #0
 8015ff8:	6078      	str	r0, [r7, #4]
 8015ffa:	460b      	mov	r3, r1
 8015ffc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8016002:	78fb      	ldrb	r3, [r7, #3]
 8016004:	015a      	lsls	r2, r3, #5
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	4413      	add	r3, r2
 801600a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801600e:	689b      	ldr	r3, [r3, #8]
 8016010:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016018:	695b      	ldr	r3, [r3, #20]
 801601a:	68ba      	ldr	r2, [r7, #8]
 801601c:	4013      	ands	r3, r2
 801601e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8016020:	68bb      	ldr	r3, [r7, #8]
}
 8016022:	4618      	mov	r0, r3
 8016024:	3714      	adds	r7, #20
 8016026:	46bd      	mov	sp, r7
 8016028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801602c:	4770      	bx	lr

0801602e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801602e:	b480      	push	{r7}
 8016030:	b087      	sub	sp, #28
 8016032:	af00      	add	r7, sp, #0
 8016034:	6078      	str	r0, [r7, #4]
 8016036:	460b      	mov	r3, r1
 8016038:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801603e:	697b      	ldr	r3, [r7, #20]
 8016040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016044:	691b      	ldr	r3, [r3, #16]
 8016046:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8016048:	697b      	ldr	r3, [r7, #20]
 801604a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801604e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016050:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8016052:	78fb      	ldrb	r3, [r7, #3]
 8016054:	f003 030f 	and.w	r3, r3, #15
 8016058:	68fa      	ldr	r2, [r7, #12]
 801605a:	fa22 f303 	lsr.w	r3, r2, r3
 801605e:	01db      	lsls	r3, r3, #7
 8016060:	b2db      	uxtb	r3, r3
 8016062:	693a      	ldr	r2, [r7, #16]
 8016064:	4313      	orrs	r3, r2
 8016066:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8016068:	78fb      	ldrb	r3, [r7, #3]
 801606a:	015a      	lsls	r2, r3, #5
 801606c:	697b      	ldr	r3, [r7, #20]
 801606e:	4413      	add	r3, r2
 8016070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016074:	689b      	ldr	r3, [r3, #8]
 8016076:	693a      	ldr	r2, [r7, #16]
 8016078:	4013      	ands	r3, r2
 801607a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801607c:	68bb      	ldr	r3, [r7, #8]
}
 801607e:	4618      	mov	r0, r3
 8016080:	371c      	adds	r7, #28
 8016082:	46bd      	mov	sp, r7
 8016084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016088:	4770      	bx	lr

0801608a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801608a:	b480      	push	{r7}
 801608c:	b083      	sub	sp, #12
 801608e:	af00      	add	r7, sp, #0
 8016090:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	695b      	ldr	r3, [r3, #20]
 8016096:	f003 0301 	and.w	r3, r3, #1
}
 801609a:	4618      	mov	r0, r3
 801609c:	370c      	adds	r7, #12
 801609e:	46bd      	mov	sp, r7
 80160a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a4:	4770      	bx	lr

080160a6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80160a6:	b480      	push	{r7}
 80160a8:	b085      	sub	sp, #20
 80160aa:	af00      	add	r7, sp, #0
 80160ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	68fa      	ldr	r2, [r7, #12]
 80160bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80160c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80160c4:	f023 0307 	bic.w	r3, r3, #7
 80160c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80160d0:	685b      	ldr	r3, [r3, #4]
 80160d2:	68fa      	ldr	r2, [r7, #12]
 80160d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80160d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80160dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80160de:	2300      	movs	r3, #0
}
 80160e0:	4618      	mov	r0, r3
 80160e2:	3714      	adds	r7, #20
 80160e4:	46bd      	mov	sp, r7
 80160e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ea:	4770      	bx	lr

080160ec <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80160ec:	b480      	push	{r7}
 80160ee:	b085      	sub	sp, #20
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
 80160f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	333c      	adds	r3, #60	; 0x3c
 80160fe:	3304      	adds	r3, #4
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8016104:	68bb      	ldr	r3, [r7, #8]
 8016106:	4a1c      	ldr	r2, [pc, #112]	; (8016178 <USB_EP0_OutStart+0x8c>)
 8016108:	4293      	cmp	r3, r2
 801610a:	d90a      	bls.n	8016122 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016118:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801611c:	d101      	bne.n	8016122 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 801611e:	2300      	movs	r3, #0
 8016120:	e024      	b.n	801616c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016128:	461a      	mov	r2, r3
 801612a:	2300      	movs	r3, #0
 801612c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016134:	691b      	ldr	r3, [r3, #16]
 8016136:	68fa      	ldr	r2, [r7, #12]
 8016138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801613c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016140:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016148:	691b      	ldr	r3, [r3, #16]
 801614a:	68fa      	ldr	r2, [r7, #12]
 801614c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016150:	f043 0318 	orr.w	r3, r3, #24
 8016154:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801615c:	691b      	ldr	r3, [r3, #16]
 801615e:	68fa      	ldr	r2, [r7, #12]
 8016160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016164:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8016168:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 801616a:	2300      	movs	r3, #0
}
 801616c:	4618      	mov	r0, r3
 801616e:	3714      	adds	r7, #20
 8016170:	46bd      	mov	sp, r7
 8016172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016176:	4770      	bx	lr
 8016178:	4f54300a 	.word	0x4f54300a

0801617c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801617c:	b480      	push	{r7}
 801617e:	b085      	sub	sp, #20
 8016180:	af00      	add	r7, sp, #0
 8016182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8016184:	2300      	movs	r3, #0
 8016186:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	3301      	adds	r3, #1
 801618c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	4a13      	ldr	r2, [pc, #76]	; (80161e0 <USB_CoreReset+0x64>)
 8016192:	4293      	cmp	r3, r2
 8016194:	d901      	bls.n	801619a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8016196:	2303      	movs	r3, #3
 8016198:	e01b      	b.n	80161d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	691b      	ldr	r3, [r3, #16]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	daf2      	bge.n	8016188 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80161a2:	2300      	movs	r3, #0
 80161a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	691b      	ldr	r3, [r3, #16]
 80161aa:	f043 0201 	orr.w	r2, r3, #1
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	3301      	adds	r3, #1
 80161b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	4a09      	ldr	r2, [pc, #36]	; (80161e0 <USB_CoreReset+0x64>)
 80161bc:	4293      	cmp	r3, r2
 80161be:	d901      	bls.n	80161c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80161c0:	2303      	movs	r3, #3
 80161c2:	e006      	b.n	80161d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	691b      	ldr	r3, [r3, #16]
 80161c8:	f003 0301 	and.w	r3, r3, #1
 80161cc:	2b01      	cmp	r3, #1
 80161ce:	d0f0      	beq.n	80161b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80161d0:	2300      	movs	r3, #0
}
 80161d2:	4618      	mov	r0, r3
 80161d4:	3714      	adds	r7, #20
 80161d6:	46bd      	mov	sp, r7
 80161d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161dc:	4770      	bx	lr
 80161de:	bf00      	nop
 80161e0:	00030d40 	.word	0x00030d40

080161e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b084      	sub	sp, #16
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	6078      	str	r0, [r7, #4]
 80161ec:	460b      	mov	r3, r1
 80161ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80161f0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80161f4:	f002 fa6c 	bl	80186d0 <USBD_static_malloc>
 80161f8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d105      	bne.n	801620c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	2200      	movs	r2, #0
 8016204:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8016208:	2302      	movs	r3, #2
 801620a:	e066      	b.n	80162da <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	68fa      	ldr	r2, [r7, #12]
 8016210:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	7c1b      	ldrb	r3, [r3, #16]
 8016218:	2b00      	cmp	r3, #0
 801621a:	d119      	bne.n	8016250 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801621c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016220:	2202      	movs	r2, #2
 8016222:	2181      	movs	r1, #129	; 0x81
 8016224:	6878      	ldr	r0, [r7, #4]
 8016226:	f002 f83f 	bl	80182a8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	2201      	movs	r2, #1
 801622e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8016230:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016234:	2202      	movs	r2, #2
 8016236:	2101      	movs	r1, #1
 8016238:	6878      	ldr	r0, [r7, #4]
 801623a:	f002 f835 	bl	80182a8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	2201      	movs	r2, #1
 8016242:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	2210      	movs	r2, #16
 801624a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 801624e:	e016      	b.n	801627e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8016250:	2340      	movs	r3, #64	; 0x40
 8016252:	2202      	movs	r2, #2
 8016254:	2181      	movs	r1, #129	; 0x81
 8016256:	6878      	ldr	r0, [r7, #4]
 8016258:	f002 f826 	bl	80182a8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	2201      	movs	r2, #1
 8016260:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8016262:	2340      	movs	r3, #64	; 0x40
 8016264:	2202      	movs	r2, #2
 8016266:	2101      	movs	r1, #1
 8016268:	6878      	ldr	r0, [r7, #4]
 801626a:	f002 f81d 	bl	80182a8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	2201      	movs	r2, #1
 8016272:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	2210      	movs	r2, #16
 801627a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801627e:	2308      	movs	r3, #8
 8016280:	2203      	movs	r2, #3
 8016282:	2182      	movs	r1, #130	; 0x82
 8016284:	6878      	ldr	r0, [r7, #4]
 8016286:	f002 f80f 	bl	80182a8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	2201      	movs	r2, #1
 801628e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016298:	681b      	ldr	r3, [r3, #0]
 801629a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	2200      	movs	r2, #0
 80162a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	2200      	movs	r2, #0
 80162a8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	7c1b      	ldrb	r3, [r3, #16]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d109      	bne.n	80162c8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80162ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80162be:	2101      	movs	r1, #1
 80162c0:	6878      	ldr	r0, [r7, #4]
 80162c2:	f002 f96b 	bl	801859c <USBD_LL_PrepareReceive>
 80162c6:	e007      	b.n	80162d8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80162ce:	2340      	movs	r3, #64	; 0x40
 80162d0:	2101      	movs	r1, #1
 80162d2:	6878      	ldr	r0, [r7, #4]
 80162d4:	f002 f962 	bl	801859c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80162d8:	2300      	movs	r3, #0
}
 80162da:	4618      	mov	r0, r3
 80162dc:	3710      	adds	r7, #16
 80162de:	46bd      	mov	sp, r7
 80162e0:	bd80      	pop	{r7, pc}

080162e2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80162e2:	b580      	push	{r7, lr}
 80162e4:	b082      	sub	sp, #8
 80162e6:	af00      	add	r7, sp, #0
 80162e8:	6078      	str	r0, [r7, #4]
 80162ea:	460b      	mov	r3, r1
 80162ec:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80162ee:	2181      	movs	r1, #129	; 0x81
 80162f0:	6878      	ldr	r0, [r7, #4]
 80162f2:	f002 f817 	bl	8018324 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	2200      	movs	r2, #0
 80162fa:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80162fc:	2101      	movs	r1, #1
 80162fe:	6878      	ldr	r0, [r7, #4]
 8016300:	f002 f810 	bl	8018324 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	2200      	movs	r2, #0
 8016308:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801630c:	2182      	movs	r1, #130	; 0x82
 801630e:	6878      	ldr	r0, [r7, #4]
 8016310:	f002 f808 	bl	8018324 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	2200      	movs	r2, #0
 8016318:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	2200      	movs	r2, #0
 8016320:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801632a:	2b00      	cmp	r3, #0
 801632c:	d00e      	beq.n	801634c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016334:	685b      	ldr	r3, [r3, #4]
 8016336:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801633e:	4618      	mov	r0, r3
 8016340:	f002 f9d4 	bl	80186ec <USBD_static_free>
    pdev->pClassData = NULL;
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	2200      	movs	r2, #0
 8016348:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801634c:	2300      	movs	r3, #0
}
 801634e:	4618      	mov	r0, r3
 8016350:	3708      	adds	r7, #8
 8016352:	46bd      	mov	sp, r7
 8016354:	bd80      	pop	{r7, pc}
	...

08016358 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8016358:	b580      	push	{r7, lr}
 801635a:	b086      	sub	sp, #24
 801635c:	af00      	add	r7, sp, #0
 801635e:	6078      	str	r0, [r7, #4]
 8016360:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016368:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801636a:	2300      	movs	r3, #0
 801636c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801636e:	2300      	movs	r3, #0
 8016370:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8016372:	2300      	movs	r3, #0
 8016374:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8016376:	693b      	ldr	r3, [r7, #16]
 8016378:	2b00      	cmp	r3, #0
 801637a:	d101      	bne.n	8016380 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 801637c:	2303      	movs	r3, #3
 801637e:	e0af      	b.n	80164e0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016380:	683b      	ldr	r3, [r7, #0]
 8016382:	781b      	ldrb	r3, [r3, #0]
 8016384:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016388:	2b00      	cmp	r3, #0
 801638a:	d03f      	beq.n	801640c <USBD_CDC_Setup+0xb4>
 801638c:	2b20      	cmp	r3, #32
 801638e:	f040 809f 	bne.w	80164d0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8016392:	683b      	ldr	r3, [r7, #0]
 8016394:	88db      	ldrh	r3, [r3, #6]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d02e      	beq.n	80163f8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801639a:	683b      	ldr	r3, [r7, #0]
 801639c:	781b      	ldrb	r3, [r3, #0]
 801639e:	b25b      	sxtb	r3, r3
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	da16      	bge.n	80163d2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80163aa:	689b      	ldr	r3, [r3, #8]
 80163ac:	683a      	ldr	r2, [r7, #0]
 80163ae:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80163b0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80163b2:	683a      	ldr	r2, [r7, #0]
 80163b4:	88d2      	ldrh	r2, [r2, #6]
 80163b6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80163b8:	683b      	ldr	r3, [r7, #0]
 80163ba:	88db      	ldrh	r3, [r3, #6]
 80163bc:	2b07      	cmp	r3, #7
 80163be:	bf28      	it	cs
 80163c0:	2307      	movcs	r3, #7
 80163c2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80163c4:	693b      	ldr	r3, [r7, #16]
 80163c6:	89fa      	ldrh	r2, [r7, #14]
 80163c8:	4619      	mov	r1, r3
 80163ca:	6878      	ldr	r0, [r7, #4]
 80163cc:	f001 fb13 	bl	80179f6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80163d0:	e085      	b.n	80164de <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80163d2:	683b      	ldr	r3, [r7, #0]
 80163d4:	785a      	ldrb	r2, [r3, #1]
 80163d6:	693b      	ldr	r3, [r7, #16]
 80163d8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80163dc:	683b      	ldr	r3, [r7, #0]
 80163de:	88db      	ldrh	r3, [r3, #6]
 80163e0:	b2da      	uxtb	r2, r3
 80163e2:	693b      	ldr	r3, [r7, #16]
 80163e4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80163e8:	6939      	ldr	r1, [r7, #16]
 80163ea:	683b      	ldr	r3, [r7, #0]
 80163ec:	88db      	ldrh	r3, [r3, #6]
 80163ee:	461a      	mov	r2, r3
 80163f0:	6878      	ldr	r0, [r7, #4]
 80163f2:	f001 fb2c 	bl	8017a4e <USBD_CtlPrepareRx>
      break;
 80163f6:	e072      	b.n	80164de <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80163fe:	689b      	ldr	r3, [r3, #8]
 8016400:	683a      	ldr	r2, [r7, #0]
 8016402:	7850      	ldrb	r0, [r2, #1]
 8016404:	2200      	movs	r2, #0
 8016406:	6839      	ldr	r1, [r7, #0]
 8016408:	4798      	blx	r3
      break;
 801640a:	e068      	b.n	80164de <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801640c:	683b      	ldr	r3, [r7, #0]
 801640e:	785b      	ldrb	r3, [r3, #1]
 8016410:	2b0b      	cmp	r3, #11
 8016412:	d852      	bhi.n	80164ba <USBD_CDC_Setup+0x162>
 8016414:	a201      	add	r2, pc, #4	; (adr r2, 801641c <USBD_CDC_Setup+0xc4>)
 8016416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801641a:	bf00      	nop
 801641c:	0801644d 	.word	0x0801644d
 8016420:	080164c9 	.word	0x080164c9
 8016424:	080164bb 	.word	0x080164bb
 8016428:	080164bb 	.word	0x080164bb
 801642c:	080164bb 	.word	0x080164bb
 8016430:	080164bb 	.word	0x080164bb
 8016434:	080164bb 	.word	0x080164bb
 8016438:	080164bb 	.word	0x080164bb
 801643c:	080164bb 	.word	0x080164bb
 8016440:	080164bb 	.word	0x080164bb
 8016444:	08016477 	.word	0x08016477
 8016448:	080164a1 	.word	0x080164a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016452:	b2db      	uxtb	r3, r3
 8016454:	2b03      	cmp	r3, #3
 8016456:	d107      	bne.n	8016468 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8016458:	f107 030a 	add.w	r3, r7, #10
 801645c:	2202      	movs	r2, #2
 801645e:	4619      	mov	r1, r3
 8016460:	6878      	ldr	r0, [r7, #4]
 8016462:	f001 fac8 	bl	80179f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016466:	e032      	b.n	80164ce <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8016468:	6839      	ldr	r1, [r7, #0]
 801646a:	6878      	ldr	r0, [r7, #4]
 801646c:	f001 fa52 	bl	8017914 <USBD_CtlError>
            ret = USBD_FAIL;
 8016470:	2303      	movs	r3, #3
 8016472:	75fb      	strb	r3, [r7, #23]
          break;
 8016474:	e02b      	b.n	80164ce <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801647c:	b2db      	uxtb	r3, r3
 801647e:	2b03      	cmp	r3, #3
 8016480:	d107      	bne.n	8016492 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8016482:	f107 030d 	add.w	r3, r7, #13
 8016486:	2201      	movs	r2, #1
 8016488:	4619      	mov	r1, r3
 801648a:	6878      	ldr	r0, [r7, #4]
 801648c:	f001 fab3 	bl	80179f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016490:	e01d      	b.n	80164ce <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8016492:	6839      	ldr	r1, [r7, #0]
 8016494:	6878      	ldr	r0, [r7, #4]
 8016496:	f001 fa3d 	bl	8017914 <USBD_CtlError>
            ret = USBD_FAIL;
 801649a:	2303      	movs	r3, #3
 801649c:	75fb      	strb	r3, [r7, #23]
          break;
 801649e:	e016      	b.n	80164ce <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80164a6:	b2db      	uxtb	r3, r3
 80164a8:	2b03      	cmp	r3, #3
 80164aa:	d00f      	beq.n	80164cc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80164ac:	6839      	ldr	r1, [r7, #0]
 80164ae:	6878      	ldr	r0, [r7, #4]
 80164b0:	f001 fa30 	bl	8017914 <USBD_CtlError>
            ret = USBD_FAIL;
 80164b4:	2303      	movs	r3, #3
 80164b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80164b8:	e008      	b.n	80164cc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80164ba:	6839      	ldr	r1, [r7, #0]
 80164bc:	6878      	ldr	r0, [r7, #4]
 80164be:	f001 fa29 	bl	8017914 <USBD_CtlError>
          ret = USBD_FAIL;
 80164c2:	2303      	movs	r3, #3
 80164c4:	75fb      	strb	r3, [r7, #23]
          break;
 80164c6:	e002      	b.n	80164ce <USBD_CDC_Setup+0x176>
          break;
 80164c8:	bf00      	nop
 80164ca:	e008      	b.n	80164de <USBD_CDC_Setup+0x186>
          break;
 80164cc:	bf00      	nop
      }
      break;
 80164ce:	e006      	b.n	80164de <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80164d0:	6839      	ldr	r1, [r7, #0]
 80164d2:	6878      	ldr	r0, [r7, #4]
 80164d4:	f001 fa1e 	bl	8017914 <USBD_CtlError>
      ret = USBD_FAIL;
 80164d8:	2303      	movs	r3, #3
 80164da:	75fb      	strb	r3, [r7, #23]
      break;
 80164dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80164de:	7dfb      	ldrb	r3, [r7, #23]
}
 80164e0:	4618      	mov	r0, r3
 80164e2:	3718      	adds	r7, #24
 80164e4:	46bd      	mov	sp, r7
 80164e6:	bd80      	pop	{r7, pc}

080164e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b084      	sub	sp, #16
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	6078      	str	r0, [r7, #4]
 80164f0:	460b      	mov	r3, r1
 80164f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80164fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016502:	2b00      	cmp	r3, #0
 8016504:	d101      	bne.n	801650a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8016506:	2303      	movs	r3, #3
 8016508:	e04f      	b.n	80165aa <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016510:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8016512:	78fa      	ldrb	r2, [r7, #3]
 8016514:	6879      	ldr	r1, [r7, #4]
 8016516:	4613      	mov	r3, r2
 8016518:	009b      	lsls	r3, r3, #2
 801651a:	4413      	add	r3, r2
 801651c:	009b      	lsls	r3, r3, #2
 801651e:	440b      	add	r3, r1
 8016520:	3318      	adds	r3, #24
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d029      	beq.n	801657c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8016528:	78fa      	ldrb	r2, [r7, #3]
 801652a:	6879      	ldr	r1, [r7, #4]
 801652c:	4613      	mov	r3, r2
 801652e:	009b      	lsls	r3, r3, #2
 8016530:	4413      	add	r3, r2
 8016532:	009b      	lsls	r3, r3, #2
 8016534:	440b      	add	r3, r1
 8016536:	3318      	adds	r3, #24
 8016538:	681a      	ldr	r2, [r3, #0]
 801653a:	78f9      	ldrb	r1, [r7, #3]
 801653c:	68f8      	ldr	r0, [r7, #12]
 801653e:	460b      	mov	r3, r1
 8016540:	00db      	lsls	r3, r3, #3
 8016542:	440b      	add	r3, r1
 8016544:	009b      	lsls	r3, r3, #2
 8016546:	4403      	add	r3, r0
 8016548:	3348      	adds	r3, #72	; 0x48
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	fbb2 f1f3 	udiv	r1, r2, r3
 8016550:	fb01 f303 	mul.w	r3, r1, r3
 8016554:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8016556:	2b00      	cmp	r3, #0
 8016558:	d110      	bne.n	801657c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801655a:	78fa      	ldrb	r2, [r7, #3]
 801655c:	6879      	ldr	r1, [r7, #4]
 801655e:	4613      	mov	r3, r2
 8016560:	009b      	lsls	r3, r3, #2
 8016562:	4413      	add	r3, r2
 8016564:	009b      	lsls	r3, r3, #2
 8016566:	440b      	add	r3, r1
 8016568:	3318      	adds	r3, #24
 801656a:	2200      	movs	r2, #0
 801656c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801656e:	78f9      	ldrb	r1, [r7, #3]
 8016570:	2300      	movs	r3, #0
 8016572:	2200      	movs	r2, #0
 8016574:	6878      	ldr	r0, [r7, #4]
 8016576:	f001 ffd9 	bl	801852c <USBD_LL_Transmit>
 801657a:	e015      	b.n	80165a8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 801657c:	68bb      	ldr	r3, [r7, #8]
 801657e:	2200      	movs	r2, #0
 8016580:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801658a:	691b      	ldr	r3, [r3, #16]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d00b      	beq.n	80165a8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016596:	691b      	ldr	r3, [r3, #16]
 8016598:	68ba      	ldr	r2, [r7, #8]
 801659a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801659e:	68ba      	ldr	r2, [r7, #8]
 80165a0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80165a4:	78fa      	ldrb	r2, [r7, #3]
 80165a6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80165a8:	2300      	movs	r3, #0
}
 80165aa:	4618      	mov	r0, r3
 80165ac:	3710      	adds	r7, #16
 80165ae:	46bd      	mov	sp, r7
 80165b0:	bd80      	pop	{r7, pc}

080165b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80165b2:	b580      	push	{r7, lr}
 80165b4:	b084      	sub	sp, #16
 80165b6:	af00      	add	r7, sp, #0
 80165b8:	6078      	str	r0, [r7, #4]
 80165ba:	460b      	mov	r3, r1
 80165bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80165c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d101      	bne.n	80165d4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80165d0:	2303      	movs	r3, #3
 80165d2:	e015      	b.n	8016600 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80165d4:	78fb      	ldrb	r3, [r7, #3]
 80165d6:	4619      	mov	r1, r3
 80165d8:	6878      	ldr	r0, [r7, #4]
 80165da:	f002 f817 	bl	801860c <USBD_LL_GetRxDataSize>
 80165de:	4602      	mov	r2, r0
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80165ec:	68db      	ldr	r3, [r3, #12]
 80165ee:	68fa      	ldr	r2, [r7, #12]
 80165f0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80165f4:	68fa      	ldr	r2, [r7, #12]
 80165f6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80165fa:	4611      	mov	r1, r2
 80165fc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80165fe:	2300      	movs	r3, #0
}
 8016600:	4618      	mov	r0, r3
 8016602:	3710      	adds	r7, #16
 8016604:	46bd      	mov	sp, r7
 8016606:	bd80      	pop	{r7, pc}

08016608 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8016608:	b580      	push	{r7, lr}
 801660a:	b084      	sub	sp, #16
 801660c:	af00      	add	r7, sp, #0
 801660e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016616:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	2b00      	cmp	r3, #0
 801661c:	d101      	bne.n	8016622 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 801661e:	2303      	movs	r3, #3
 8016620:	e01b      	b.n	801665a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016628:	2b00      	cmp	r3, #0
 801662a:	d015      	beq.n	8016658 <USBD_CDC_EP0_RxReady+0x50>
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8016632:	2bff      	cmp	r3, #255	; 0xff
 8016634:	d010      	beq.n	8016658 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801663c:	689b      	ldr	r3, [r3, #8]
 801663e:	68fa      	ldr	r2, [r7, #12]
 8016640:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8016644:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8016646:	68fa      	ldr	r2, [r7, #12]
 8016648:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801664c:	b292      	uxth	r2, r2
 801664e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	22ff      	movs	r2, #255	; 0xff
 8016654:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8016658:	2300      	movs	r3, #0
}
 801665a:	4618      	mov	r0, r3
 801665c:	3710      	adds	r7, #16
 801665e:	46bd      	mov	sp, r7
 8016660:	bd80      	pop	{r7, pc}
	...

08016664 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016664:	b480      	push	{r7}
 8016666:	b083      	sub	sp, #12
 8016668:	af00      	add	r7, sp, #0
 801666a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	2243      	movs	r2, #67	; 0x43
 8016670:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8016672:	4b03      	ldr	r3, [pc, #12]	; (8016680 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8016674:	4618      	mov	r0, r3
 8016676:	370c      	adds	r7, #12
 8016678:	46bd      	mov	sp, r7
 801667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667e:	4770      	bx	lr
 8016680:	200005dc 	.word	0x200005dc

08016684 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016684:	b480      	push	{r7}
 8016686:	b083      	sub	sp, #12
 8016688:	af00      	add	r7, sp, #0
 801668a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	2243      	movs	r2, #67	; 0x43
 8016690:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8016692:	4b03      	ldr	r3, [pc, #12]	; (80166a0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8016694:	4618      	mov	r0, r3
 8016696:	370c      	adds	r7, #12
 8016698:	46bd      	mov	sp, r7
 801669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801669e:	4770      	bx	lr
 80166a0:	20000598 	.word	0x20000598

080166a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80166a4:	b480      	push	{r7}
 80166a6:	b083      	sub	sp, #12
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	2243      	movs	r2, #67	; 0x43
 80166b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80166b2:	4b03      	ldr	r3, [pc, #12]	; (80166c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80166b4:	4618      	mov	r0, r3
 80166b6:	370c      	adds	r7, #12
 80166b8:	46bd      	mov	sp, r7
 80166ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166be:	4770      	bx	lr
 80166c0:	20000620 	.word	0x20000620

080166c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80166c4:	b480      	push	{r7}
 80166c6:	b083      	sub	sp, #12
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	220a      	movs	r2, #10
 80166d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80166d2:	4b03      	ldr	r3, [pc, #12]	; (80166e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80166d4:	4618      	mov	r0, r3
 80166d6:	370c      	adds	r7, #12
 80166d8:	46bd      	mov	sp, r7
 80166da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166de:	4770      	bx	lr
 80166e0:	20000554 	.word	0x20000554

080166e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80166e4:	b480      	push	{r7}
 80166e6:	b083      	sub	sp, #12
 80166e8:	af00      	add	r7, sp, #0
 80166ea:	6078      	str	r0, [r7, #4]
 80166ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80166ee:	683b      	ldr	r3, [r7, #0]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d101      	bne.n	80166f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80166f4:	2303      	movs	r3, #3
 80166f6:	e004      	b.n	8016702 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	683a      	ldr	r2, [r7, #0]
 80166fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8016700:	2300      	movs	r3, #0
}
 8016702:	4618      	mov	r0, r3
 8016704:	370c      	adds	r7, #12
 8016706:	46bd      	mov	sp, r7
 8016708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801670c:	4770      	bx	lr

0801670e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801670e:	b480      	push	{r7}
 8016710:	b087      	sub	sp, #28
 8016712:	af00      	add	r7, sp, #0
 8016714:	60f8      	str	r0, [r7, #12]
 8016716:	60b9      	str	r1, [r7, #8]
 8016718:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016720:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8016722:	697b      	ldr	r3, [r7, #20]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d101      	bne.n	801672c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8016728:	2303      	movs	r3, #3
 801672a:	e008      	b.n	801673e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 801672c:	697b      	ldr	r3, [r7, #20]
 801672e:	68ba      	ldr	r2, [r7, #8]
 8016730:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8016734:	697b      	ldr	r3, [r7, #20]
 8016736:	687a      	ldr	r2, [r7, #4]
 8016738:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801673c:	2300      	movs	r3, #0
}
 801673e:	4618      	mov	r0, r3
 8016740:	371c      	adds	r7, #28
 8016742:	46bd      	mov	sp, r7
 8016744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016748:	4770      	bx	lr

0801674a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801674a:	b480      	push	{r7}
 801674c:	b085      	sub	sp, #20
 801674e:	af00      	add	r7, sp, #0
 8016750:	6078      	str	r0, [r7, #4]
 8016752:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801675a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d101      	bne.n	8016766 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8016762:	2303      	movs	r3, #3
 8016764:	e004      	b.n	8016770 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	683a      	ldr	r2, [r7, #0]
 801676a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801676e:	2300      	movs	r3, #0
}
 8016770:	4618      	mov	r0, r3
 8016772:	3714      	adds	r7, #20
 8016774:	46bd      	mov	sp, r7
 8016776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801677a:	4770      	bx	lr

0801677c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801677c:	b580      	push	{r7, lr}
 801677e:	b084      	sub	sp, #16
 8016780:	af00      	add	r7, sp, #0
 8016782:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801678a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016792:	2b00      	cmp	r3, #0
 8016794:	d101      	bne.n	801679a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8016796:	2303      	movs	r3, #3
 8016798:	e016      	b.n	80167c8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	7c1b      	ldrb	r3, [r3, #16]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d109      	bne.n	80167b6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80167a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80167ac:	2101      	movs	r1, #1
 80167ae:	6878      	ldr	r0, [r7, #4]
 80167b0:	f001 fef4 	bl	801859c <USBD_LL_PrepareReceive>
 80167b4:	e007      	b.n	80167c6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80167b6:	68fb      	ldr	r3, [r7, #12]
 80167b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80167bc:	2340      	movs	r3, #64	; 0x40
 80167be:	2101      	movs	r1, #1
 80167c0:	6878      	ldr	r0, [r7, #4]
 80167c2:	f001 feeb 	bl	801859c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80167c6:	2300      	movs	r3, #0
}
 80167c8:	4618      	mov	r0, r3
 80167ca:	3710      	adds	r7, #16
 80167cc:	46bd      	mov	sp, r7
 80167ce:	bd80      	pop	{r7, pc}

080167d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b086      	sub	sp, #24
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	60f8      	str	r0, [r7, #12]
 80167d8:	60b9      	str	r1, [r7, #8]
 80167da:	4613      	mov	r3, r2
 80167dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80167de:	68fb      	ldr	r3, [r7, #12]
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d101      	bne.n	80167e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80167e4:	2303      	movs	r3, #3
 80167e6:	e01f      	b.n	8016828 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	2200      	movs	r2, #0
 80167ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	2200      	movs	r2, #0
 80167f4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	2200      	movs	r2, #0
 80167fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016800:	68bb      	ldr	r3, [r7, #8]
 8016802:	2b00      	cmp	r3, #0
 8016804:	d003      	beq.n	801680e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	68ba      	ldr	r2, [r7, #8]
 801680a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	2201      	movs	r2, #1
 8016812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	79fa      	ldrb	r2, [r7, #7]
 801681a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801681c:	68f8      	ldr	r0, [r7, #12]
 801681e:	f001 fcc5 	bl	80181ac <USBD_LL_Init>
 8016822:	4603      	mov	r3, r0
 8016824:	75fb      	strb	r3, [r7, #23]

  return ret;
 8016826:	7dfb      	ldrb	r3, [r7, #23]
}
 8016828:	4618      	mov	r0, r3
 801682a:	3718      	adds	r7, #24
 801682c:	46bd      	mov	sp, r7
 801682e:	bd80      	pop	{r7, pc}

08016830 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016830:	b580      	push	{r7, lr}
 8016832:	b084      	sub	sp, #16
 8016834:	af00      	add	r7, sp, #0
 8016836:	6078      	str	r0, [r7, #4]
 8016838:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801683a:	2300      	movs	r3, #0
 801683c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801683e:	683b      	ldr	r3, [r7, #0]
 8016840:	2b00      	cmp	r3, #0
 8016842:	d101      	bne.n	8016848 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8016844:	2303      	movs	r3, #3
 8016846:	e016      	b.n	8016876 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	683a      	ldr	r2, [r7, #0]
 801684c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016858:	2b00      	cmp	r3, #0
 801685a:	d00b      	beq.n	8016874 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 801685c:	687b      	ldr	r3, [r7, #4]
 801685e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016864:	f107 020e 	add.w	r2, r7, #14
 8016868:	4610      	mov	r0, r2
 801686a:	4798      	blx	r3
 801686c:	4602      	mov	r2, r0
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8016874:	2300      	movs	r3, #0
}
 8016876:	4618      	mov	r0, r3
 8016878:	3710      	adds	r7, #16
 801687a:	46bd      	mov	sp, r7
 801687c:	bd80      	pop	{r7, pc}

0801687e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801687e:	b580      	push	{r7, lr}
 8016880:	b082      	sub	sp, #8
 8016882:	af00      	add	r7, sp, #0
 8016884:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8016886:	6878      	ldr	r0, [r7, #4]
 8016888:	f001 fcdc 	bl	8018244 <USBD_LL_Start>
 801688c:	4603      	mov	r3, r0
}
 801688e:	4618      	mov	r0, r3
 8016890:	3708      	adds	r7, #8
 8016892:	46bd      	mov	sp, r7
 8016894:	bd80      	pop	{r7, pc}

08016896 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8016896:	b480      	push	{r7}
 8016898:	b083      	sub	sp, #12
 801689a:	af00      	add	r7, sp, #0
 801689c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801689e:	2300      	movs	r3, #0
}
 80168a0:	4618      	mov	r0, r3
 80168a2:	370c      	adds	r7, #12
 80168a4:	46bd      	mov	sp, r7
 80168a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168aa:	4770      	bx	lr

080168ac <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b084      	sub	sp, #16
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	6078      	str	r0, [r7, #4]
 80168b4:	460b      	mov	r3, r1
 80168b6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80168b8:	2303      	movs	r3, #3
 80168ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d009      	beq.n	80168da <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	78fa      	ldrb	r2, [r7, #3]
 80168d0:	4611      	mov	r1, r2
 80168d2:	6878      	ldr	r0, [r7, #4]
 80168d4:	4798      	blx	r3
 80168d6:	4603      	mov	r3, r0
 80168d8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80168da:	7bfb      	ldrb	r3, [r7, #15]
}
 80168dc:	4618      	mov	r0, r3
 80168de:	3710      	adds	r7, #16
 80168e0:	46bd      	mov	sp, r7
 80168e2:	bd80      	pop	{r7, pc}

080168e4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80168e4:	b580      	push	{r7, lr}
 80168e6:	b082      	sub	sp, #8
 80168e8:	af00      	add	r7, sp, #0
 80168ea:	6078      	str	r0, [r7, #4]
 80168ec:	460b      	mov	r3, r1
 80168ee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d007      	beq.n	801690a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016900:	685b      	ldr	r3, [r3, #4]
 8016902:	78fa      	ldrb	r2, [r7, #3]
 8016904:	4611      	mov	r1, r2
 8016906:	6878      	ldr	r0, [r7, #4]
 8016908:	4798      	blx	r3
  }

  return USBD_OK;
 801690a:	2300      	movs	r3, #0
}
 801690c:	4618      	mov	r0, r3
 801690e:	3708      	adds	r7, #8
 8016910:	46bd      	mov	sp, r7
 8016912:	bd80      	pop	{r7, pc}

08016914 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8016914:	b580      	push	{r7, lr}
 8016916:	b084      	sub	sp, #16
 8016918:	af00      	add	r7, sp, #0
 801691a:	6078      	str	r0, [r7, #4]
 801691c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016924:	6839      	ldr	r1, [r7, #0]
 8016926:	4618      	mov	r0, r3
 8016928:	f000 ffba 	bl	80178a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	2201      	movs	r2, #1
 8016930:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801693a:	461a      	mov	r2, r3
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8016948:	f003 031f 	and.w	r3, r3, #31
 801694c:	2b02      	cmp	r3, #2
 801694e:	d01a      	beq.n	8016986 <USBD_LL_SetupStage+0x72>
 8016950:	2b02      	cmp	r3, #2
 8016952:	d822      	bhi.n	801699a <USBD_LL_SetupStage+0x86>
 8016954:	2b00      	cmp	r3, #0
 8016956:	d002      	beq.n	801695e <USBD_LL_SetupStage+0x4a>
 8016958:	2b01      	cmp	r3, #1
 801695a:	d00a      	beq.n	8016972 <USBD_LL_SetupStage+0x5e>
 801695c:	e01d      	b.n	801699a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016964:	4619      	mov	r1, r3
 8016966:	6878      	ldr	r0, [r7, #4]
 8016968:	f000 fa62 	bl	8016e30 <USBD_StdDevReq>
 801696c:	4603      	mov	r3, r0
 801696e:	73fb      	strb	r3, [r7, #15]
      break;
 8016970:	e020      	b.n	80169b4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016978:	4619      	mov	r1, r3
 801697a:	6878      	ldr	r0, [r7, #4]
 801697c:	f000 fac6 	bl	8016f0c <USBD_StdItfReq>
 8016980:	4603      	mov	r3, r0
 8016982:	73fb      	strb	r3, [r7, #15]
      break;
 8016984:	e016      	b.n	80169b4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801698c:	4619      	mov	r1, r3
 801698e:	6878      	ldr	r0, [r7, #4]
 8016990:	f000 fb05 	bl	8016f9e <USBD_StdEPReq>
 8016994:	4603      	mov	r3, r0
 8016996:	73fb      	strb	r3, [r7, #15]
      break;
 8016998:	e00c      	b.n	80169b4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80169a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80169a4:	b2db      	uxtb	r3, r3
 80169a6:	4619      	mov	r1, r3
 80169a8:	6878      	ldr	r0, [r7, #4]
 80169aa:	f001 fcf1 	bl	8018390 <USBD_LL_StallEP>
 80169ae:	4603      	mov	r3, r0
 80169b0:	73fb      	strb	r3, [r7, #15]
      break;
 80169b2:	bf00      	nop
  }

  return ret;
 80169b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80169b6:	4618      	mov	r0, r3
 80169b8:	3710      	adds	r7, #16
 80169ba:	46bd      	mov	sp, r7
 80169bc:	bd80      	pop	{r7, pc}

080169be <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80169be:	b580      	push	{r7, lr}
 80169c0:	b086      	sub	sp, #24
 80169c2:	af00      	add	r7, sp, #0
 80169c4:	60f8      	str	r0, [r7, #12]
 80169c6:	460b      	mov	r3, r1
 80169c8:	607a      	str	r2, [r7, #4]
 80169ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80169cc:	7afb      	ldrb	r3, [r7, #11]
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d138      	bne.n	8016a44 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80169d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80169e0:	2b03      	cmp	r3, #3
 80169e2:	d14a      	bne.n	8016a7a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80169e4:	693b      	ldr	r3, [r7, #16]
 80169e6:	689a      	ldr	r2, [r3, #8]
 80169e8:	693b      	ldr	r3, [r7, #16]
 80169ea:	68db      	ldr	r3, [r3, #12]
 80169ec:	429a      	cmp	r2, r3
 80169ee:	d913      	bls.n	8016a18 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80169f0:	693b      	ldr	r3, [r7, #16]
 80169f2:	689a      	ldr	r2, [r3, #8]
 80169f4:	693b      	ldr	r3, [r7, #16]
 80169f6:	68db      	ldr	r3, [r3, #12]
 80169f8:	1ad2      	subs	r2, r2, r3
 80169fa:	693b      	ldr	r3, [r7, #16]
 80169fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80169fe:	693b      	ldr	r3, [r7, #16]
 8016a00:	68da      	ldr	r2, [r3, #12]
 8016a02:	693b      	ldr	r3, [r7, #16]
 8016a04:	689b      	ldr	r3, [r3, #8]
 8016a06:	4293      	cmp	r3, r2
 8016a08:	bf28      	it	cs
 8016a0a:	4613      	movcs	r3, r2
 8016a0c:	461a      	mov	r2, r3
 8016a0e:	6879      	ldr	r1, [r7, #4]
 8016a10:	68f8      	ldr	r0, [r7, #12]
 8016a12:	f001 f839 	bl	8017a88 <USBD_CtlContinueRx>
 8016a16:	e030      	b.n	8016a7a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a18:	68fb      	ldr	r3, [r7, #12]
 8016a1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016a1e:	b2db      	uxtb	r3, r3
 8016a20:	2b03      	cmp	r3, #3
 8016a22:	d10b      	bne.n	8016a3c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8016a24:	68fb      	ldr	r3, [r7, #12]
 8016a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a2a:	691b      	ldr	r3, [r3, #16]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d005      	beq.n	8016a3c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a36:	691b      	ldr	r3, [r3, #16]
 8016a38:	68f8      	ldr	r0, [r7, #12]
 8016a3a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016a3c:	68f8      	ldr	r0, [r7, #12]
 8016a3e:	f001 f834 	bl	8017aaa <USBD_CtlSendStatus>
 8016a42:	e01a      	b.n	8016a7a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016a4a:	b2db      	uxtb	r3, r3
 8016a4c:	2b03      	cmp	r3, #3
 8016a4e:	d114      	bne.n	8016a7a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a56:	699b      	ldr	r3, [r3, #24]
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d00e      	beq.n	8016a7a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016a62:	699b      	ldr	r3, [r3, #24]
 8016a64:	7afa      	ldrb	r2, [r7, #11]
 8016a66:	4611      	mov	r1, r2
 8016a68:	68f8      	ldr	r0, [r7, #12]
 8016a6a:	4798      	blx	r3
 8016a6c:	4603      	mov	r3, r0
 8016a6e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8016a70:	7dfb      	ldrb	r3, [r7, #23]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d001      	beq.n	8016a7a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8016a76:	7dfb      	ldrb	r3, [r7, #23]
 8016a78:	e000      	b.n	8016a7c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8016a7a:	2300      	movs	r3, #0
}
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	3718      	adds	r7, #24
 8016a80:	46bd      	mov	sp, r7
 8016a82:	bd80      	pop	{r7, pc}

08016a84 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016a84:	b580      	push	{r7, lr}
 8016a86:	b086      	sub	sp, #24
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	60f8      	str	r0, [r7, #12]
 8016a8c:	460b      	mov	r3, r1
 8016a8e:	607a      	str	r2, [r7, #4]
 8016a90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8016a92:	7afb      	ldrb	r3, [r7, #11]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d16b      	bne.n	8016b70 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	3314      	adds	r3, #20
 8016a9c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016aa4:	2b02      	cmp	r3, #2
 8016aa6:	d156      	bne.n	8016b56 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8016aa8:	693b      	ldr	r3, [r7, #16]
 8016aaa:	689a      	ldr	r2, [r3, #8]
 8016aac:	693b      	ldr	r3, [r7, #16]
 8016aae:	68db      	ldr	r3, [r3, #12]
 8016ab0:	429a      	cmp	r2, r3
 8016ab2:	d914      	bls.n	8016ade <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016ab4:	693b      	ldr	r3, [r7, #16]
 8016ab6:	689a      	ldr	r2, [r3, #8]
 8016ab8:	693b      	ldr	r3, [r7, #16]
 8016aba:	68db      	ldr	r3, [r3, #12]
 8016abc:	1ad2      	subs	r2, r2, r3
 8016abe:	693b      	ldr	r3, [r7, #16]
 8016ac0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016ac2:	693b      	ldr	r3, [r7, #16]
 8016ac4:	689b      	ldr	r3, [r3, #8]
 8016ac6:	461a      	mov	r2, r3
 8016ac8:	6879      	ldr	r1, [r7, #4]
 8016aca:	68f8      	ldr	r0, [r7, #12]
 8016acc:	f000 ffae 	bl	8017a2c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016ad0:	2300      	movs	r3, #0
 8016ad2:	2200      	movs	r2, #0
 8016ad4:	2100      	movs	r1, #0
 8016ad6:	68f8      	ldr	r0, [r7, #12]
 8016ad8:	f001 fd60 	bl	801859c <USBD_LL_PrepareReceive>
 8016adc:	e03b      	b.n	8016b56 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016ade:	693b      	ldr	r3, [r7, #16]
 8016ae0:	68da      	ldr	r2, [r3, #12]
 8016ae2:	693b      	ldr	r3, [r7, #16]
 8016ae4:	689b      	ldr	r3, [r3, #8]
 8016ae6:	429a      	cmp	r2, r3
 8016ae8:	d11c      	bne.n	8016b24 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016aea:	693b      	ldr	r3, [r7, #16]
 8016aec:	685a      	ldr	r2, [r3, #4]
 8016aee:	693b      	ldr	r3, [r7, #16]
 8016af0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016af2:	429a      	cmp	r2, r3
 8016af4:	d316      	bcc.n	8016b24 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8016af6:	693b      	ldr	r3, [r7, #16]
 8016af8:	685a      	ldr	r2, [r3, #4]
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8016b00:	429a      	cmp	r2, r3
 8016b02:	d20f      	bcs.n	8016b24 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016b04:	2200      	movs	r2, #0
 8016b06:	2100      	movs	r1, #0
 8016b08:	68f8      	ldr	r0, [r7, #12]
 8016b0a:	f000 ff8f 	bl	8017a2c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	2200      	movs	r2, #0
 8016b12:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016b16:	2300      	movs	r3, #0
 8016b18:	2200      	movs	r2, #0
 8016b1a:	2100      	movs	r1, #0
 8016b1c:	68f8      	ldr	r0, [r7, #12]
 8016b1e:	f001 fd3d 	bl	801859c <USBD_LL_PrepareReceive>
 8016b22:	e018      	b.n	8016b56 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016b2a:	b2db      	uxtb	r3, r3
 8016b2c:	2b03      	cmp	r3, #3
 8016b2e:	d10b      	bne.n	8016b48 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b36:	68db      	ldr	r3, [r3, #12]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d005      	beq.n	8016b48 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b42:	68db      	ldr	r3, [r3, #12]
 8016b44:	68f8      	ldr	r0, [r7, #12]
 8016b46:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016b48:	2180      	movs	r1, #128	; 0x80
 8016b4a:	68f8      	ldr	r0, [r7, #12]
 8016b4c:	f001 fc20 	bl	8018390 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8016b50:	68f8      	ldr	r0, [r7, #12]
 8016b52:	f000 ffbd 	bl	8017ad0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8016b5c:	2b01      	cmp	r3, #1
 8016b5e:	d122      	bne.n	8016ba6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8016b60:	68f8      	ldr	r0, [r7, #12]
 8016b62:	f7ff fe98 	bl	8016896 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	2200      	movs	r2, #0
 8016b6a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8016b6e:	e01a      	b.n	8016ba6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016b76:	b2db      	uxtb	r3, r3
 8016b78:	2b03      	cmp	r3, #3
 8016b7a:	d114      	bne.n	8016ba6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b82:	695b      	ldr	r3, [r3, #20]
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d00e      	beq.n	8016ba6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b8e:	695b      	ldr	r3, [r3, #20]
 8016b90:	7afa      	ldrb	r2, [r7, #11]
 8016b92:	4611      	mov	r1, r2
 8016b94:	68f8      	ldr	r0, [r7, #12]
 8016b96:	4798      	blx	r3
 8016b98:	4603      	mov	r3, r0
 8016b9a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8016b9c:	7dfb      	ldrb	r3, [r7, #23]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d001      	beq.n	8016ba6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8016ba2:	7dfb      	ldrb	r3, [r7, #23]
 8016ba4:	e000      	b.n	8016ba8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8016ba6:	2300      	movs	r3, #0
}
 8016ba8:	4618      	mov	r0, r3
 8016baa:	3718      	adds	r7, #24
 8016bac:	46bd      	mov	sp, r7
 8016bae:	bd80      	pop	{r7, pc}

08016bb0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b082      	sub	sp, #8
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	2201      	movs	r2, #1
 8016bbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	2200      	movs	r2, #0
 8016bc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	2200      	movs	r2, #0
 8016bcc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	2200      	movs	r2, #0
 8016bd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d101      	bne.n	8016be4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8016be0:	2303      	movs	r3, #3
 8016be2:	e02f      	b.n	8016c44 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d00f      	beq.n	8016c0e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016bf4:	685b      	ldr	r3, [r3, #4]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d009      	beq.n	8016c0e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016c00:	685b      	ldr	r3, [r3, #4]
 8016c02:	687a      	ldr	r2, [r7, #4]
 8016c04:	6852      	ldr	r2, [r2, #4]
 8016c06:	b2d2      	uxtb	r2, r2
 8016c08:	4611      	mov	r1, r2
 8016c0a:	6878      	ldr	r0, [r7, #4]
 8016c0c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016c0e:	2340      	movs	r3, #64	; 0x40
 8016c10:	2200      	movs	r2, #0
 8016c12:	2100      	movs	r1, #0
 8016c14:	6878      	ldr	r0, [r7, #4]
 8016c16:	f001 fb47 	bl	80182a8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	2201      	movs	r2, #1
 8016c1e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	2240      	movs	r2, #64	; 0x40
 8016c26:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8016c2a:	2340      	movs	r3, #64	; 0x40
 8016c2c:	2200      	movs	r2, #0
 8016c2e:	2180      	movs	r1, #128	; 0x80
 8016c30:	6878      	ldr	r0, [r7, #4]
 8016c32:	f001 fb39 	bl	80182a8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	2201      	movs	r2, #1
 8016c3a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	2240      	movs	r2, #64	; 0x40
 8016c40:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8016c42:	2300      	movs	r3, #0
}
 8016c44:	4618      	mov	r0, r3
 8016c46:	3708      	adds	r7, #8
 8016c48:	46bd      	mov	sp, r7
 8016c4a:	bd80      	pop	{r7, pc}

08016c4c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016c4c:	b480      	push	{r7}
 8016c4e:	b083      	sub	sp, #12
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	6078      	str	r0, [r7, #4]
 8016c54:	460b      	mov	r3, r1
 8016c56:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	78fa      	ldrb	r2, [r7, #3]
 8016c5c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016c5e:	2300      	movs	r3, #0
}
 8016c60:	4618      	mov	r0, r3
 8016c62:	370c      	adds	r7, #12
 8016c64:	46bd      	mov	sp, r7
 8016c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c6a:	4770      	bx	lr

08016c6c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016c6c:	b480      	push	{r7}
 8016c6e:	b083      	sub	sp, #12
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016c7a:	b2da      	uxtb	r2, r3
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	2204      	movs	r2, #4
 8016c86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8016c8a:	2300      	movs	r3, #0
}
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	370c      	adds	r7, #12
 8016c90:	46bd      	mov	sp, r7
 8016c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c96:	4770      	bx	lr

08016c98 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016c98:	b480      	push	{r7}
 8016c9a:	b083      	sub	sp, #12
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016ca6:	b2db      	uxtb	r3, r3
 8016ca8:	2b04      	cmp	r3, #4
 8016caa:	d106      	bne.n	8016cba <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8016cb2:	b2da      	uxtb	r2, r3
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8016cba:	2300      	movs	r3, #0
}
 8016cbc:	4618      	mov	r0, r3
 8016cbe:	370c      	adds	r7, #12
 8016cc0:	46bd      	mov	sp, r7
 8016cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc6:	4770      	bx	lr

08016cc8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016cc8:	b580      	push	{r7, lr}
 8016cca:	b082      	sub	sp, #8
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d101      	bne.n	8016cde <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8016cda:	2303      	movs	r3, #3
 8016cdc:	e012      	b.n	8016d04 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016ce4:	b2db      	uxtb	r3, r3
 8016ce6:	2b03      	cmp	r3, #3
 8016ce8:	d10b      	bne.n	8016d02 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016cf0:	69db      	ldr	r3, [r3, #28]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d005      	beq.n	8016d02 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016cfc:	69db      	ldr	r3, [r3, #28]
 8016cfe:	6878      	ldr	r0, [r7, #4]
 8016d00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016d02:	2300      	movs	r3, #0
}
 8016d04:	4618      	mov	r0, r3
 8016d06:	3708      	adds	r7, #8
 8016d08:	46bd      	mov	sp, r7
 8016d0a:	bd80      	pop	{r7, pc}

08016d0c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b082      	sub	sp, #8
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	6078      	str	r0, [r7, #4]
 8016d14:	460b      	mov	r3, r1
 8016d16:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d101      	bne.n	8016d26 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8016d22:	2303      	movs	r3, #3
 8016d24:	e014      	b.n	8016d50 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016d2c:	b2db      	uxtb	r3, r3
 8016d2e:	2b03      	cmp	r3, #3
 8016d30:	d10d      	bne.n	8016d4e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d38:	6a1b      	ldr	r3, [r3, #32]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d007      	beq.n	8016d4e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d44:	6a1b      	ldr	r3, [r3, #32]
 8016d46:	78fa      	ldrb	r2, [r7, #3]
 8016d48:	4611      	mov	r1, r2
 8016d4a:	6878      	ldr	r0, [r7, #4]
 8016d4c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016d4e:	2300      	movs	r3, #0
}
 8016d50:	4618      	mov	r0, r3
 8016d52:	3708      	adds	r7, #8
 8016d54:	46bd      	mov	sp, r7
 8016d56:	bd80      	pop	{r7, pc}

08016d58 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b082      	sub	sp, #8
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]
 8016d60:	460b      	mov	r3, r1
 8016d62:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d101      	bne.n	8016d72 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8016d6e:	2303      	movs	r3, #3
 8016d70:	e014      	b.n	8016d9c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016d78:	b2db      	uxtb	r3, r3
 8016d7a:	2b03      	cmp	r3, #3
 8016d7c:	d10d      	bne.n	8016d9a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d007      	beq.n	8016d9a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d92:	78fa      	ldrb	r2, [r7, #3]
 8016d94:	4611      	mov	r1, r2
 8016d96:	6878      	ldr	r0, [r7, #4]
 8016d98:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016d9a:	2300      	movs	r3, #0
}
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	3708      	adds	r7, #8
 8016da0:	46bd      	mov	sp, r7
 8016da2:	bd80      	pop	{r7, pc}

08016da4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8016da4:	b480      	push	{r7}
 8016da6:	b083      	sub	sp, #12
 8016da8:	af00      	add	r7, sp, #0
 8016daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8016dac:	2300      	movs	r3, #0
}
 8016dae:	4618      	mov	r0, r3
 8016db0:	370c      	adds	r7, #12
 8016db2:	46bd      	mov	sp, r7
 8016db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016db8:	4770      	bx	lr

08016dba <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8016dba:	b580      	push	{r7, lr}
 8016dbc:	b082      	sub	sp, #8
 8016dbe:	af00      	add	r7, sp, #0
 8016dc0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	2201      	movs	r2, #1
 8016dc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d009      	beq.n	8016de8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016dda:	685b      	ldr	r3, [r3, #4]
 8016ddc:	687a      	ldr	r2, [r7, #4]
 8016dde:	6852      	ldr	r2, [r2, #4]
 8016de0:	b2d2      	uxtb	r2, r2
 8016de2:	4611      	mov	r1, r2
 8016de4:	6878      	ldr	r0, [r7, #4]
 8016de6:	4798      	blx	r3
  }

  return USBD_OK;
 8016de8:	2300      	movs	r3, #0
}
 8016dea:	4618      	mov	r0, r3
 8016dec:	3708      	adds	r7, #8
 8016dee:	46bd      	mov	sp, r7
 8016df0:	bd80      	pop	{r7, pc}

08016df2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8016df2:	b480      	push	{r7}
 8016df4:	b087      	sub	sp, #28
 8016df6:	af00      	add	r7, sp, #0
 8016df8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016dfe:	697b      	ldr	r3, [r7, #20]
 8016e00:	781b      	ldrb	r3, [r3, #0]
 8016e02:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8016e04:	697b      	ldr	r3, [r7, #20]
 8016e06:	3301      	adds	r3, #1
 8016e08:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016e0a:	697b      	ldr	r3, [r7, #20]
 8016e0c:	781b      	ldrb	r3, [r3, #0]
 8016e0e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016e10:	8a3b      	ldrh	r3, [r7, #16]
 8016e12:	021b      	lsls	r3, r3, #8
 8016e14:	b21a      	sxth	r2, r3
 8016e16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016e1a:	4313      	orrs	r3, r2
 8016e1c:	b21b      	sxth	r3, r3
 8016e1e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016e20:	89fb      	ldrh	r3, [r7, #14]
}
 8016e22:	4618      	mov	r0, r3
 8016e24:	371c      	adds	r7, #28
 8016e26:	46bd      	mov	sp, r7
 8016e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e2c:	4770      	bx	lr
	...

08016e30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016e30:	b580      	push	{r7, lr}
 8016e32:	b084      	sub	sp, #16
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	6078      	str	r0, [r7, #4]
 8016e38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016e3e:	683b      	ldr	r3, [r7, #0]
 8016e40:	781b      	ldrb	r3, [r3, #0]
 8016e42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016e46:	2b40      	cmp	r3, #64	; 0x40
 8016e48:	d005      	beq.n	8016e56 <USBD_StdDevReq+0x26>
 8016e4a:	2b40      	cmp	r3, #64	; 0x40
 8016e4c:	d853      	bhi.n	8016ef6 <USBD_StdDevReq+0xc6>
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d00b      	beq.n	8016e6a <USBD_StdDevReq+0x3a>
 8016e52:	2b20      	cmp	r3, #32
 8016e54:	d14f      	bne.n	8016ef6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016e5c:	689b      	ldr	r3, [r3, #8]
 8016e5e:	6839      	ldr	r1, [r7, #0]
 8016e60:	6878      	ldr	r0, [r7, #4]
 8016e62:	4798      	blx	r3
 8016e64:	4603      	mov	r3, r0
 8016e66:	73fb      	strb	r3, [r7, #15]
      break;
 8016e68:	e04a      	b.n	8016f00 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016e6a:	683b      	ldr	r3, [r7, #0]
 8016e6c:	785b      	ldrb	r3, [r3, #1]
 8016e6e:	2b09      	cmp	r3, #9
 8016e70:	d83b      	bhi.n	8016eea <USBD_StdDevReq+0xba>
 8016e72:	a201      	add	r2, pc, #4	; (adr r2, 8016e78 <USBD_StdDevReq+0x48>)
 8016e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e78:	08016ecd 	.word	0x08016ecd
 8016e7c:	08016ee1 	.word	0x08016ee1
 8016e80:	08016eeb 	.word	0x08016eeb
 8016e84:	08016ed7 	.word	0x08016ed7
 8016e88:	08016eeb 	.word	0x08016eeb
 8016e8c:	08016eab 	.word	0x08016eab
 8016e90:	08016ea1 	.word	0x08016ea1
 8016e94:	08016eeb 	.word	0x08016eeb
 8016e98:	08016ec3 	.word	0x08016ec3
 8016e9c:	08016eb5 	.word	0x08016eb5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016ea0:	6839      	ldr	r1, [r7, #0]
 8016ea2:	6878      	ldr	r0, [r7, #4]
 8016ea4:	f000 f9de 	bl	8017264 <USBD_GetDescriptor>
          break;
 8016ea8:	e024      	b.n	8016ef4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016eaa:	6839      	ldr	r1, [r7, #0]
 8016eac:	6878      	ldr	r0, [r7, #4]
 8016eae:	f000 fb6d 	bl	801758c <USBD_SetAddress>
          break;
 8016eb2:	e01f      	b.n	8016ef4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016eb4:	6839      	ldr	r1, [r7, #0]
 8016eb6:	6878      	ldr	r0, [r7, #4]
 8016eb8:	f000 fbac 	bl	8017614 <USBD_SetConfig>
 8016ebc:	4603      	mov	r3, r0
 8016ebe:	73fb      	strb	r3, [r7, #15]
          break;
 8016ec0:	e018      	b.n	8016ef4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8016ec2:	6839      	ldr	r1, [r7, #0]
 8016ec4:	6878      	ldr	r0, [r7, #4]
 8016ec6:	f000 fc4b 	bl	8017760 <USBD_GetConfig>
          break;
 8016eca:	e013      	b.n	8016ef4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016ecc:	6839      	ldr	r1, [r7, #0]
 8016ece:	6878      	ldr	r0, [r7, #4]
 8016ed0:	f000 fc7c 	bl	80177cc <USBD_GetStatus>
          break;
 8016ed4:	e00e      	b.n	8016ef4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016ed6:	6839      	ldr	r1, [r7, #0]
 8016ed8:	6878      	ldr	r0, [r7, #4]
 8016eda:	f000 fcab 	bl	8017834 <USBD_SetFeature>
          break;
 8016ede:	e009      	b.n	8016ef4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016ee0:	6839      	ldr	r1, [r7, #0]
 8016ee2:	6878      	ldr	r0, [r7, #4]
 8016ee4:	f000 fcba 	bl	801785c <USBD_ClrFeature>
          break;
 8016ee8:	e004      	b.n	8016ef4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8016eea:	6839      	ldr	r1, [r7, #0]
 8016eec:	6878      	ldr	r0, [r7, #4]
 8016eee:	f000 fd11 	bl	8017914 <USBD_CtlError>
          break;
 8016ef2:	bf00      	nop
      }
      break;
 8016ef4:	e004      	b.n	8016f00 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8016ef6:	6839      	ldr	r1, [r7, #0]
 8016ef8:	6878      	ldr	r0, [r7, #4]
 8016efa:	f000 fd0b 	bl	8017914 <USBD_CtlError>
      break;
 8016efe:	bf00      	nop
  }

  return ret;
 8016f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f02:	4618      	mov	r0, r3
 8016f04:	3710      	adds	r7, #16
 8016f06:	46bd      	mov	sp, r7
 8016f08:	bd80      	pop	{r7, pc}
 8016f0a:	bf00      	nop

08016f0c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b084      	sub	sp, #16
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	6078      	str	r0, [r7, #4]
 8016f14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016f16:	2300      	movs	r3, #0
 8016f18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016f1a:	683b      	ldr	r3, [r7, #0]
 8016f1c:	781b      	ldrb	r3, [r3, #0]
 8016f1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016f22:	2b40      	cmp	r3, #64	; 0x40
 8016f24:	d005      	beq.n	8016f32 <USBD_StdItfReq+0x26>
 8016f26:	2b40      	cmp	r3, #64	; 0x40
 8016f28:	d82f      	bhi.n	8016f8a <USBD_StdItfReq+0x7e>
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d001      	beq.n	8016f32 <USBD_StdItfReq+0x26>
 8016f2e:	2b20      	cmp	r3, #32
 8016f30:	d12b      	bne.n	8016f8a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016f38:	b2db      	uxtb	r3, r3
 8016f3a:	3b01      	subs	r3, #1
 8016f3c:	2b02      	cmp	r3, #2
 8016f3e:	d81d      	bhi.n	8016f7c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016f40:	683b      	ldr	r3, [r7, #0]
 8016f42:	889b      	ldrh	r3, [r3, #4]
 8016f44:	b2db      	uxtb	r3, r3
 8016f46:	2b01      	cmp	r3, #1
 8016f48:	d813      	bhi.n	8016f72 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016f50:	689b      	ldr	r3, [r3, #8]
 8016f52:	6839      	ldr	r1, [r7, #0]
 8016f54:	6878      	ldr	r0, [r7, #4]
 8016f56:	4798      	blx	r3
 8016f58:	4603      	mov	r3, r0
 8016f5a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016f5c:	683b      	ldr	r3, [r7, #0]
 8016f5e:	88db      	ldrh	r3, [r3, #6]
 8016f60:	2b00      	cmp	r3, #0
 8016f62:	d110      	bne.n	8016f86 <USBD_StdItfReq+0x7a>
 8016f64:	7bfb      	ldrb	r3, [r7, #15]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d10d      	bne.n	8016f86 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016f6a:	6878      	ldr	r0, [r7, #4]
 8016f6c:	f000 fd9d 	bl	8017aaa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016f70:	e009      	b.n	8016f86 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8016f72:	6839      	ldr	r1, [r7, #0]
 8016f74:	6878      	ldr	r0, [r7, #4]
 8016f76:	f000 fccd 	bl	8017914 <USBD_CtlError>
          break;
 8016f7a:	e004      	b.n	8016f86 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8016f7c:	6839      	ldr	r1, [r7, #0]
 8016f7e:	6878      	ldr	r0, [r7, #4]
 8016f80:	f000 fcc8 	bl	8017914 <USBD_CtlError>
          break;
 8016f84:	e000      	b.n	8016f88 <USBD_StdItfReq+0x7c>
          break;
 8016f86:	bf00      	nop
      }
      break;
 8016f88:	e004      	b.n	8016f94 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8016f8a:	6839      	ldr	r1, [r7, #0]
 8016f8c:	6878      	ldr	r0, [r7, #4]
 8016f8e:	f000 fcc1 	bl	8017914 <USBD_CtlError>
      break;
 8016f92:	bf00      	nop
  }

  return ret;
 8016f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8016f96:	4618      	mov	r0, r3
 8016f98:	3710      	adds	r7, #16
 8016f9a:	46bd      	mov	sp, r7
 8016f9c:	bd80      	pop	{r7, pc}

08016f9e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016f9e:	b580      	push	{r7, lr}
 8016fa0:	b084      	sub	sp, #16
 8016fa2:	af00      	add	r7, sp, #0
 8016fa4:	6078      	str	r0, [r7, #4]
 8016fa6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8016fa8:	2300      	movs	r3, #0
 8016faa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8016fac:	683b      	ldr	r3, [r7, #0]
 8016fae:	889b      	ldrh	r3, [r3, #4]
 8016fb0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016fb2:	683b      	ldr	r3, [r7, #0]
 8016fb4:	781b      	ldrb	r3, [r3, #0]
 8016fb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016fba:	2b40      	cmp	r3, #64	; 0x40
 8016fbc:	d007      	beq.n	8016fce <USBD_StdEPReq+0x30>
 8016fbe:	2b40      	cmp	r3, #64	; 0x40
 8016fc0:	f200 8145 	bhi.w	801724e <USBD_StdEPReq+0x2b0>
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d00c      	beq.n	8016fe2 <USBD_StdEPReq+0x44>
 8016fc8:	2b20      	cmp	r3, #32
 8016fca:	f040 8140 	bne.w	801724e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016fd4:	689b      	ldr	r3, [r3, #8]
 8016fd6:	6839      	ldr	r1, [r7, #0]
 8016fd8:	6878      	ldr	r0, [r7, #4]
 8016fda:	4798      	blx	r3
 8016fdc:	4603      	mov	r3, r0
 8016fde:	73fb      	strb	r3, [r7, #15]
      break;
 8016fe0:	e13a      	b.n	8017258 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016fe2:	683b      	ldr	r3, [r7, #0]
 8016fe4:	785b      	ldrb	r3, [r3, #1]
 8016fe6:	2b03      	cmp	r3, #3
 8016fe8:	d007      	beq.n	8016ffa <USBD_StdEPReq+0x5c>
 8016fea:	2b03      	cmp	r3, #3
 8016fec:	f300 8129 	bgt.w	8017242 <USBD_StdEPReq+0x2a4>
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d07f      	beq.n	80170f4 <USBD_StdEPReq+0x156>
 8016ff4:	2b01      	cmp	r3, #1
 8016ff6:	d03c      	beq.n	8017072 <USBD_StdEPReq+0xd4>
 8016ff8:	e123      	b.n	8017242 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017000:	b2db      	uxtb	r3, r3
 8017002:	2b02      	cmp	r3, #2
 8017004:	d002      	beq.n	801700c <USBD_StdEPReq+0x6e>
 8017006:	2b03      	cmp	r3, #3
 8017008:	d016      	beq.n	8017038 <USBD_StdEPReq+0x9a>
 801700a:	e02c      	b.n	8017066 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801700c:	7bbb      	ldrb	r3, [r7, #14]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d00d      	beq.n	801702e <USBD_StdEPReq+0x90>
 8017012:	7bbb      	ldrb	r3, [r7, #14]
 8017014:	2b80      	cmp	r3, #128	; 0x80
 8017016:	d00a      	beq.n	801702e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017018:	7bbb      	ldrb	r3, [r7, #14]
 801701a:	4619      	mov	r1, r3
 801701c:	6878      	ldr	r0, [r7, #4]
 801701e:	f001 f9b7 	bl	8018390 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8017022:	2180      	movs	r1, #128	; 0x80
 8017024:	6878      	ldr	r0, [r7, #4]
 8017026:	f001 f9b3 	bl	8018390 <USBD_LL_StallEP>
 801702a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801702c:	e020      	b.n	8017070 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801702e:	6839      	ldr	r1, [r7, #0]
 8017030:	6878      	ldr	r0, [r7, #4]
 8017032:	f000 fc6f 	bl	8017914 <USBD_CtlError>
              break;
 8017036:	e01b      	b.n	8017070 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017038:	683b      	ldr	r3, [r7, #0]
 801703a:	885b      	ldrh	r3, [r3, #2]
 801703c:	2b00      	cmp	r3, #0
 801703e:	d10e      	bne.n	801705e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8017040:	7bbb      	ldrb	r3, [r7, #14]
 8017042:	2b00      	cmp	r3, #0
 8017044:	d00b      	beq.n	801705e <USBD_StdEPReq+0xc0>
 8017046:	7bbb      	ldrb	r3, [r7, #14]
 8017048:	2b80      	cmp	r3, #128	; 0x80
 801704a:	d008      	beq.n	801705e <USBD_StdEPReq+0xc0>
 801704c:	683b      	ldr	r3, [r7, #0]
 801704e:	88db      	ldrh	r3, [r3, #6]
 8017050:	2b00      	cmp	r3, #0
 8017052:	d104      	bne.n	801705e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8017054:	7bbb      	ldrb	r3, [r7, #14]
 8017056:	4619      	mov	r1, r3
 8017058:	6878      	ldr	r0, [r7, #4]
 801705a:	f001 f999 	bl	8018390 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801705e:	6878      	ldr	r0, [r7, #4]
 8017060:	f000 fd23 	bl	8017aaa <USBD_CtlSendStatus>

              break;
 8017064:	e004      	b.n	8017070 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8017066:	6839      	ldr	r1, [r7, #0]
 8017068:	6878      	ldr	r0, [r7, #4]
 801706a:	f000 fc53 	bl	8017914 <USBD_CtlError>
              break;
 801706e:	bf00      	nop
          }
          break;
 8017070:	e0ec      	b.n	801724c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017078:	b2db      	uxtb	r3, r3
 801707a:	2b02      	cmp	r3, #2
 801707c:	d002      	beq.n	8017084 <USBD_StdEPReq+0xe6>
 801707e:	2b03      	cmp	r3, #3
 8017080:	d016      	beq.n	80170b0 <USBD_StdEPReq+0x112>
 8017082:	e030      	b.n	80170e6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017084:	7bbb      	ldrb	r3, [r7, #14]
 8017086:	2b00      	cmp	r3, #0
 8017088:	d00d      	beq.n	80170a6 <USBD_StdEPReq+0x108>
 801708a:	7bbb      	ldrb	r3, [r7, #14]
 801708c:	2b80      	cmp	r3, #128	; 0x80
 801708e:	d00a      	beq.n	80170a6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017090:	7bbb      	ldrb	r3, [r7, #14]
 8017092:	4619      	mov	r1, r3
 8017094:	6878      	ldr	r0, [r7, #4]
 8017096:	f001 f97b 	bl	8018390 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801709a:	2180      	movs	r1, #128	; 0x80
 801709c:	6878      	ldr	r0, [r7, #4]
 801709e:	f001 f977 	bl	8018390 <USBD_LL_StallEP>
 80170a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80170a4:	e025      	b.n	80170f2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80170a6:	6839      	ldr	r1, [r7, #0]
 80170a8:	6878      	ldr	r0, [r7, #4]
 80170aa:	f000 fc33 	bl	8017914 <USBD_CtlError>
              break;
 80170ae:	e020      	b.n	80170f2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80170b0:	683b      	ldr	r3, [r7, #0]
 80170b2:	885b      	ldrh	r3, [r3, #2]
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d11b      	bne.n	80170f0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80170b8:	7bbb      	ldrb	r3, [r7, #14]
 80170ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d004      	beq.n	80170cc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80170c2:	7bbb      	ldrb	r3, [r7, #14]
 80170c4:	4619      	mov	r1, r3
 80170c6:	6878      	ldr	r0, [r7, #4]
 80170c8:	f001 f998 	bl	80183fc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80170cc:	6878      	ldr	r0, [r7, #4]
 80170ce:	f000 fcec 	bl	8017aaa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80170d8:	689b      	ldr	r3, [r3, #8]
 80170da:	6839      	ldr	r1, [r7, #0]
 80170dc:	6878      	ldr	r0, [r7, #4]
 80170de:	4798      	blx	r3
 80170e0:	4603      	mov	r3, r0
 80170e2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80170e4:	e004      	b.n	80170f0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80170e6:	6839      	ldr	r1, [r7, #0]
 80170e8:	6878      	ldr	r0, [r7, #4]
 80170ea:	f000 fc13 	bl	8017914 <USBD_CtlError>
              break;
 80170ee:	e000      	b.n	80170f2 <USBD_StdEPReq+0x154>
              break;
 80170f0:	bf00      	nop
          }
          break;
 80170f2:	e0ab      	b.n	801724c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80170fa:	b2db      	uxtb	r3, r3
 80170fc:	2b02      	cmp	r3, #2
 80170fe:	d002      	beq.n	8017106 <USBD_StdEPReq+0x168>
 8017100:	2b03      	cmp	r3, #3
 8017102:	d032      	beq.n	801716a <USBD_StdEPReq+0x1cc>
 8017104:	e097      	b.n	8017236 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017106:	7bbb      	ldrb	r3, [r7, #14]
 8017108:	2b00      	cmp	r3, #0
 801710a:	d007      	beq.n	801711c <USBD_StdEPReq+0x17e>
 801710c:	7bbb      	ldrb	r3, [r7, #14]
 801710e:	2b80      	cmp	r3, #128	; 0x80
 8017110:	d004      	beq.n	801711c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8017112:	6839      	ldr	r1, [r7, #0]
 8017114:	6878      	ldr	r0, [r7, #4]
 8017116:	f000 fbfd 	bl	8017914 <USBD_CtlError>
                break;
 801711a:	e091      	b.n	8017240 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801711c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017120:	2b00      	cmp	r3, #0
 8017122:	da0b      	bge.n	801713c <USBD_StdEPReq+0x19e>
 8017124:	7bbb      	ldrb	r3, [r7, #14]
 8017126:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801712a:	4613      	mov	r3, r2
 801712c:	009b      	lsls	r3, r3, #2
 801712e:	4413      	add	r3, r2
 8017130:	009b      	lsls	r3, r3, #2
 8017132:	3310      	adds	r3, #16
 8017134:	687a      	ldr	r2, [r7, #4]
 8017136:	4413      	add	r3, r2
 8017138:	3304      	adds	r3, #4
 801713a:	e00b      	b.n	8017154 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801713c:	7bbb      	ldrb	r3, [r7, #14]
 801713e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017142:	4613      	mov	r3, r2
 8017144:	009b      	lsls	r3, r3, #2
 8017146:	4413      	add	r3, r2
 8017148:	009b      	lsls	r3, r3, #2
 801714a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801714e:	687a      	ldr	r2, [r7, #4]
 8017150:	4413      	add	r3, r2
 8017152:	3304      	adds	r3, #4
 8017154:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8017156:	68bb      	ldr	r3, [r7, #8]
 8017158:	2200      	movs	r2, #0
 801715a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801715c:	68bb      	ldr	r3, [r7, #8]
 801715e:	2202      	movs	r2, #2
 8017160:	4619      	mov	r1, r3
 8017162:	6878      	ldr	r0, [r7, #4]
 8017164:	f000 fc47 	bl	80179f6 <USBD_CtlSendData>
              break;
 8017168:	e06a      	b.n	8017240 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801716a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801716e:	2b00      	cmp	r3, #0
 8017170:	da11      	bge.n	8017196 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8017172:	7bbb      	ldrb	r3, [r7, #14]
 8017174:	f003 020f 	and.w	r2, r3, #15
 8017178:	6879      	ldr	r1, [r7, #4]
 801717a:	4613      	mov	r3, r2
 801717c:	009b      	lsls	r3, r3, #2
 801717e:	4413      	add	r3, r2
 8017180:	009b      	lsls	r3, r3, #2
 8017182:	440b      	add	r3, r1
 8017184:	3324      	adds	r3, #36	; 0x24
 8017186:	881b      	ldrh	r3, [r3, #0]
 8017188:	2b00      	cmp	r3, #0
 801718a:	d117      	bne.n	80171bc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801718c:	6839      	ldr	r1, [r7, #0]
 801718e:	6878      	ldr	r0, [r7, #4]
 8017190:	f000 fbc0 	bl	8017914 <USBD_CtlError>
                  break;
 8017194:	e054      	b.n	8017240 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8017196:	7bbb      	ldrb	r3, [r7, #14]
 8017198:	f003 020f 	and.w	r2, r3, #15
 801719c:	6879      	ldr	r1, [r7, #4]
 801719e:	4613      	mov	r3, r2
 80171a0:	009b      	lsls	r3, r3, #2
 80171a2:	4413      	add	r3, r2
 80171a4:	009b      	lsls	r3, r3, #2
 80171a6:	440b      	add	r3, r1
 80171a8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80171ac:	881b      	ldrh	r3, [r3, #0]
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d104      	bne.n	80171bc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80171b2:	6839      	ldr	r1, [r7, #0]
 80171b4:	6878      	ldr	r0, [r7, #4]
 80171b6:	f000 fbad 	bl	8017914 <USBD_CtlError>
                  break;
 80171ba:	e041      	b.n	8017240 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80171bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	da0b      	bge.n	80171dc <USBD_StdEPReq+0x23e>
 80171c4:	7bbb      	ldrb	r3, [r7, #14]
 80171c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80171ca:	4613      	mov	r3, r2
 80171cc:	009b      	lsls	r3, r3, #2
 80171ce:	4413      	add	r3, r2
 80171d0:	009b      	lsls	r3, r3, #2
 80171d2:	3310      	adds	r3, #16
 80171d4:	687a      	ldr	r2, [r7, #4]
 80171d6:	4413      	add	r3, r2
 80171d8:	3304      	adds	r3, #4
 80171da:	e00b      	b.n	80171f4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80171dc:	7bbb      	ldrb	r3, [r7, #14]
 80171de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80171e2:	4613      	mov	r3, r2
 80171e4:	009b      	lsls	r3, r3, #2
 80171e6:	4413      	add	r3, r2
 80171e8:	009b      	lsls	r3, r3, #2
 80171ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80171ee:	687a      	ldr	r2, [r7, #4]
 80171f0:	4413      	add	r3, r2
 80171f2:	3304      	adds	r3, #4
 80171f4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80171f6:	7bbb      	ldrb	r3, [r7, #14]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d002      	beq.n	8017202 <USBD_StdEPReq+0x264>
 80171fc:	7bbb      	ldrb	r3, [r7, #14]
 80171fe:	2b80      	cmp	r3, #128	; 0x80
 8017200:	d103      	bne.n	801720a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8017202:	68bb      	ldr	r3, [r7, #8]
 8017204:	2200      	movs	r2, #0
 8017206:	601a      	str	r2, [r3, #0]
 8017208:	e00e      	b.n	8017228 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801720a:	7bbb      	ldrb	r3, [r7, #14]
 801720c:	4619      	mov	r1, r3
 801720e:	6878      	ldr	r0, [r7, #4]
 8017210:	f001 f92a 	bl	8018468 <USBD_LL_IsStallEP>
 8017214:	4603      	mov	r3, r0
 8017216:	2b00      	cmp	r3, #0
 8017218:	d003      	beq.n	8017222 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801721a:	68bb      	ldr	r3, [r7, #8]
 801721c:	2201      	movs	r2, #1
 801721e:	601a      	str	r2, [r3, #0]
 8017220:	e002      	b.n	8017228 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8017222:	68bb      	ldr	r3, [r7, #8]
 8017224:	2200      	movs	r2, #0
 8017226:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8017228:	68bb      	ldr	r3, [r7, #8]
 801722a:	2202      	movs	r2, #2
 801722c:	4619      	mov	r1, r3
 801722e:	6878      	ldr	r0, [r7, #4]
 8017230:	f000 fbe1 	bl	80179f6 <USBD_CtlSendData>
              break;
 8017234:	e004      	b.n	8017240 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8017236:	6839      	ldr	r1, [r7, #0]
 8017238:	6878      	ldr	r0, [r7, #4]
 801723a:	f000 fb6b 	bl	8017914 <USBD_CtlError>
              break;
 801723e:	bf00      	nop
          }
          break;
 8017240:	e004      	b.n	801724c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8017242:	6839      	ldr	r1, [r7, #0]
 8017244:	6878      	ldr	r0, [r7, #4]
 8017246:	f000 fb65 	bl	8017914 <USBD_CtlError>
          break;
 801724a:	bf00      	nop
      }
      break;
 801724c:	e004      	b.n	8017258 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801724e:	6839      	ldr	r1, [r7, #0]
 8017250:	6878      	ldr	r0, [r7, #4]
 8017252:	f000 fb5f 	bl	8017914 <USBD_CtlError>
      break;
 8017256:	bf00      	nop
  }

  return ret;
 8017258:	7bfb      	ldrb	r3, [r7, #15]
}
 801725a:	4618      	mov	r0, r3
 801725c:	3710      	adds	r7, #16
 801725e:	46bd      	mov	sp, r7
 8017260:	bd80      	pop	{r7, pc}
	...

08017264 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017264:	b580      	push	{r7, lr}
 8017266:	b084      	sub	sp, #16
 8017268:	af00      	add	r7, sp, #0
 801726a:	6078      	str	r0, [r7, #4]
 801726c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801726e:	2300      	movs	r3, #0
 8017270:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8017272:	2300      	movs	r3, #0
 8017274:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8017276:	2300      	movs	r3, #0
 8017278:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801727a:	683b      	ldr	r3, [r7, #0]
 801727c:	885b      	ldrh	r3, [r3, #2]
 801727e:	0a1b      	lsrs	r3, r3, #8
 8017280:	b29b      	uxth	r3, r3
 8017282:	3b01      	subs	r3, #1
 8017284:	2b0e      	cmp	r3, #14
 8017286:	f200 8152 	bhi.w	801752e <USBD_GetDescriptor+0x2ca>
 801728a:	a201      	add	r2, pc, #4	; (adr r2, 8017290 <USBD_GetDescriptor+0x2c>)
 801728c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017290:	08017301 	.word	0x08017301
 8017294:	08017319 	.word	0x08017319
 8017298:	08017359 	.word	0x08017359
 801729c:	0801752f 	.word	0x0801752f
 80172a0:	0801752f 	.word	0x0801752f
 80172a4:	080174cf 	.word	0x080174cf
 80172a8:	080174fb 	.word	0x080174fb
 80172ac:	0801752f 	.word	0x0801752f
 80172b0:	0801752f 	.word	0x0801752f
 80172b4:	0801752f 	.word	0x0801752f
 80172b8:	0801752f 	.word	0x0801752f
 80172bc:	0801752f 	.word	0x0801752f
 80172c0:	0801752f 	.word	0x0801752f
 80172c4:	0801752f 	.word	0x0801752f
 80172c8:	080172cd 	.word	0x080172cd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80172d2:	69db      	ldr	r3, [r3, #28]
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d00b      	beq.n	80172f0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80172de:	69db      	ldr	r3, [r3, #28]
 80172e0:	687a      	ldr	r2, [r7, #4]
 80172e2:	7c12      	ldrb	r2, [r2, #16]
 80172e4:	f107 0108 	add.w	r1, r7, #8
 80172e8:	4610      	mov	r0, r2
 80172ea:	4798      	blx	r3
 80172ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80172ee:	e126      	b.n	801753e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80172f0:	6839      	ldr	r1, [r7, #0]
 80172f2:	6878      	ldr	r0, [r7, #4]
 80172f4:	f000 fb0e 	bl	8017914 <USBD_CtlError>
        err++;
 80172f8:	7afb      	ldrb	r3, [r7, #11]
 80172fa:	3301      	adds	r3, #1
 80172fc:	72fb      	strb	r3, [r7, #11]
      break;
 80172fe:	e11e      	b.n	801753e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017306:	681b      	ldr	r3, [r3, #0]
 8017308:	687a      	ldr	r2, [r7, #4]
 801730a:	7c12      	ldrb	r2, [r2, #16]
 801730c:	f107 0108 	add.w	r1, r7, #8
 8017310:	4610      	mov	r0, r2
 8017312:	4798      	blx	r3
 8017314:	60f8      	str	r0, [r7, #12]
      break;
 8017316:	e112      	b.n	801753e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	7c1b      	ldrb	r3, [r3, #16]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d10d      	bne.n	801733c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017328:	f107 0208 	add.w	r2, r7, #8
 801732c:	4610      	mov	r0, r2
 801732e:	4798      	blx	r3
 8017330:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	3301      	adds	r3, #1
 8017336:	2202      	movs	r2, #2
 8017338:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801733a:	e100      	b.n	801753e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017344:	f107 0208 	add.w	r2, r7, #8
 8017348:	4610      	mov	r0, r2
 801734a:	4798      	blx	r3
 801734c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	3301      	adds	r3, #1
 8017352:	2202      	movs	r2, #2
 8017354:	701a      	strb	r2, [r3, #0]
      break;
 8017356:	e0f2      	b.n	801753e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8017358:	683b      	ldr	r3, [r7, #0]
 801735a:	885b      	ldrh	r3, [r3, #2]
 801735c:	b2db      	uxtb	r3, r3
 801735e:	2b05      	cmp	r3, #5
 8017360:	f200 80ac 	bhi.w	80174bc <USBD_GetDescriptor+0x258>
 8017364:	a201      	add	r2, pc, #4	; (adr r2, 801736c <USBD_GetDescriptor+0x108>)
 8017366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801736a:	bf00      	nop
 801736c:	08017385 	.word	0x08017385
 8017370:	080173b9 	.word	0x080173b9
 8017374:	080173ed 	.word	0x080173ed
 8017378:	08017421 	.word	0x08017421
 801737c:	08017455 	.word	0x08017455
 8017380:	08017489 	.word	0x08017489
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801738a:	685b      	ldr	r3, [r3, #4]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d00b      	beq.n	80173a8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017396:	685b      	ldr	r3, [r3, #4]
 8017398:	687a      	ldr	r2, [r7, #4]
 801739a:	7c12      	ldrb	r2, [r2, #16]
 801739c:	f107 0108 	add.w	r1, r7, #8
 80173a0:	4610      	mov	r0, r2
 80173a2:	4798      	blx	r3
 80173a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80173a6:	e091      	b.n	80174cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80173a8:	6839      	ldr	r1, [r7, #0]
 80173aa:	6878      	ldr	r0, [r7, #4]
 80173ac:	f000 fab2 	bl	8017914 <USBD_CtlError>
            err++;
 80173b0:	7afb      	ldrb	r3, [r7, #11]
 80173b2:	3301      	adds	r3, #1
 80173b4:	72fb      	strb	r3, [r7, #11]
          break;
 80173b6:	e089      	b.n	80174cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80173be:	689b      	ldr	r3, [r3, #8]
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d00b      	beq.n	80173dc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80173ca:	689b      	ldr	r3, [r3, #8]
 80173cc:	687a      	ldr	r2, [r7, #4]
 80173ce:	7c12      	ldrb	r2, [r2, #16]
 80173d0:	f107 0108 	add.w	r1, r7, #8
 80173d4:	4610      	mov	r0, r2
 80173d6:	4798      	blx	r3
 80173d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80173da:	e077      	b.n	80174cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80173dc:	6839      	ldr	r1, [r7, #0]
 80173de:	6878      	ldr	r0, [r7, #4]
 80173e0:	f000 fa98 	bl	8017914 <USBD_CtlError>
            err++;
 80173e4:	7afb      	ldrb	r3, [r7, #11]
 80173e6:	3301      	adds	r3, #1
 80173e8:	72fb      	strb	r3, [r7, #11]
          break;
 80173ea:	e06f      	b.n	80174cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80173f2:	68db      	ldr	r3, [r3, #12]
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d00b      	beq.n	8017410 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80173fe:	68db      	ldr	r3, [r3, #12]
 8017400:	687a      	ldr	r2, [r7, #4]
 8017402:	7c12      	ldrb	r2, [r2, #16]
 8017404:	f107 0108 	add.w	r1, r7, #8
 8017408:	4610      	mov	r0, r2
 801740a:	4798      	blx	r3
 801740c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801740e:	e05d      	b.n	80174cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017410:	6839      	ldr	r1, [r7, #0]
 8017412:	6878      	ldr	r0, [r7, #4]
 8017414:	f000 fa7e 	bl	8017914 <USBD_CtlError>
            err++;
 8017418:	7afb      	ldrb	r3, [r7, #11]
 801741a:	3301      	adds	r3, #1
 801741c:	72fb      	strb	r3, [r7, #11]
          break;
 801741e:	e055      	b.n	80174cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017426:	691b      	ldr	r3, [r3, #16]
 8017428:	2b00      	cmp	r3, #0
 801742a:	d00b      	beq.n	8017444 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017432:	691b      	ldr	r3, [r3, #16]
 8017434:	687a      	ldr	r2, [r7, #4]
 8017436:	7c12      	ldrb	r2, [r2, #16]
 8017438:	f107 0108 	add.w	r1, r7, #8
 801743c:	4610      	mov	r0, r2
 801743e:	4798      	blx	r3
 8017440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017442:	e043      	b.n	80174cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017444:	6839      	ldr	r1, [r7, #0]
 8017446:	6878      	ldr	r0, [r7, #4]
 8017448:	f000 fa64 	bl	8017914 <USBD_CtlError>
            err++;
 801744c:	7afb      	ldrb	r3, [r7, #11]
 801744e:	3301      	adds	r3, #1
 8017450:	72fb      	strb	r3, [r7, #11]
          break;
 8017452:	e03b      	b.n	80174cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801745a:	695b      	ldr	r3, [r3, #20]
 801745c:	2b00      	cmp	r3, #0
 801745e:	d00b      	beq.n	8017478 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017466:	695b      	ldr	r3, [r3, #20]
 8017468:	687a      	ldr	r2, [r7, #4]
 801746a:	7c12      	ldrb	r2, [r2, #16]
 801746c:	f107 0108 	add.w	r1, r7, #8
 8017470:	4610      	mov	r0, r2
 8017472:	4798      	blx	r3
 8017474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017476:	e029      	b.n	80174cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017478:	6839      	ldr	r1, [r7, #0]
 801747a:	6878      	ldr	r0, [r7, #4]
 801747c:	f000 fa4a 	bl	8017914 <USBD_CtlError>
            err++;
 8017480:	7afb      	ldrb	r3, [r7, #11]
 8017482:	3301      	adds	r3, #1
 8017484:	72fb      	strb	r3, [r7, #11]
          break;
 8017486:	e021      	b.n	80174cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801748e:	699b      	ldr	r3, [r3, #24]
 8017490:	2b00      	cmp	r3, #0
 8017492:	d00b      	beq.n	80174ac <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801749a:	699b      	ldr	r3, [r3, #24]
 801749c:	687a      	ldr	r2, [r7, #4]
 801749e:	7c12      	ldrb	r2, [r2, #16]
 80174a0:	f107 0108 	add.w	r1, r7, #8
 80174a4:	4610      	mov	r0, r2
 80174a6:	4798      	blx	r3
 80174a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80174aa:	e00f      	b.n	80174cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80174ac:	6839      	ldr	r1, [r7, #0]
 80174ae:	6878      	ldr	r0, [r7, #4]
 80174b0:	f000 fa30 	bl	8017914 <USBD_CtlError>
            err++;
 80174b4:	7afb      	ldrb	r3, [r7, #11]
 80174b6:	3301      	adds	r3, #1
 80174b8:	72fb      	strb	r3, [r7, #11]
          break;
 80174ba:	e007      	b.n	80174cc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80174bc:	6839      	ldr	r1, [r7, #0]
 80174be:	6878      	ldr	r0, [r7, #4]
 80174c0:	f000 fa28 	bl	8017914 <USBD_CtlError>
          err++;
 80174c4:	7afb      	ldrb	r3, [r7, #11]
 80174c6:	3301      	adds	r3, #1
 80174c8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80174ca:	bf00      	nop
      }
      break;
 80174cc:	e037      	b.n	801753e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	7c1b      	ldrb	r3, [r3, #16]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d109      	bne.n	80174ea <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80174dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80174de:	f107 0208 	add.w	r2, r7, #8
 80174e2:	4610      	mov	r0, r2
 80174e4:	4798      	blx	r3
 80174e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80174e8:	e029      	b.n	801753e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80174ea:	6839      	ldr	r1, [r7, #0]
 80174ec:	6878      	ldr	r0, [r7, #4]
 80174ee:	f000 fa11 	bl	8017914 <USBD_CtlError>
        err++;
 80174f2:	7afb      	ldrb	r3, [r7, #11]
 80174f4:	3301      	adds	r3, #1
 80174f6:	72fb      	strb	r3, [r7, #11]
      break;
 80174f8:	e021      	b.n	801753e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	7c1b      	ldrb	r3, [r3, #16]
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d10d      	bne.n	801751e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801750a:	f107 0208 	add.w	r2, r7, #8
 801750e:	4610      	mov	r0, r2
 8017510:	4798      	blx	r3
 8017512:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	3301      	adds	r3, #1
 8017518:	2207      	movs	r2, #7
 801751a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801751c:	e00f      	b.n	801753e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801751e:	6839      	ldr	r1, [r7, #0]
 8017520:	6878      	ldr	r0, [r7, #4]
 8017522:	f000 f9f7 	bl	8017914 <USBD_CtlError>
        err++;
 8017526:	7afb      	ldrb	r3, [r7, #11]
 8017528:	3301      	adds	r3, #1
 801752a:	72fb      	strb	r3, [r7, #11]
      break;
 801752c:	e007      	b.n	801753e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801752e:	6839      	ldr	r1, [r7, #0]
 8017530:	6878      	ldr	r0, [r7, #4]
 8017532:	f000 f9ef 	bl	8017914 <USBD_CtlError>
      err++;
 8017536:	7afb      	ldrb	r3, [r7, #11]
 8017538:	3301      	adds	r3, #1
 801753a:	72fb      	strb	r3, [r7, #11]
      break;
 801753c:	bf00      	nop
  }

  if (err != 0U)
 801753e:	7afb      	ldrb	r3, [r7, #11]
 8017540:	2b00      	cmp	r3, #0
 8017542:	d11e      	bne.n	8017582 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8017544:	683b      	ldr	r3, [r7, #0]
 8017546:	88db      	ldrh	r3, [r3, #6]
 8017548:	2b00      	cmp	r3, #0
 801754a:	d016      	beq.n	801757a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801754c:	893b      	ldrh	r3, [r7, #8]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d00e      	beq.n	8017570 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8017552:	683b      	ldr	r3, [r7, #0]
 8017554:	88da      	ldrh	r2, [r3, #6]
 8017556:	893b      	ldrh	r3, [r7, #8]
 8017558:	4293      	cmp	r3, r2
 801755a:	bf28      	it	cs
 801755c:	4613      	movcs	r3, r2
 801755e:	b29b      	uxth	r3, r3
 8017560:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8017562:	893b      	ldrh	r3, [r7, #8]
 8017564:	461a      	mov	r2, r3
 8017566:	68f9      	ldr	r1, [r7, #12]
 8017568:	6878      	ldr	r0, [r7, #4]
 801756a:	f000 fa44 	bl	80179f6 <USBD_CtlSendData>
 801756e:	e009      	b.n	8017584 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8017570:	6839      	ldr	r1, [r7, #0]
 8017572:	6878      	ldr	r0, [r7, #4]
 8017574:	f000 f9ce 	bl	8017914 <USBD_CtlError>
 8017578:	e004      	b.n	8017584 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801757a:	6878      	ldr	r0, [r7, #4]
 801757c:	f000 fa95 	bl	8017aaa <USBD_CtlSendStatus>
 8017580:	e000      	b.n	8017584 <USBD_GetDescriptor+0x320>
    return;
 8017582:	bf00      	nop
  }
}
 8017584:	3710      	adds	r7, #16
 8017586:	46bd      	mov	sp, r7
 8017588:	bd80      	pop	{r7, pc}
 801758a:	bf00      	nop

0801758c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801758c:	b580      	push	{r7, lr}
 801758e:	b084      	sub	sp, #16
 8017590:	af00      	add	r7, sp, #0
 8017592:	6078      	str	r0, [r7, #4]
 8017594:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8017596:	683b      	ldr	r3, [r7, #0]
 8017598:	889b      	ldrh	r3, [r3, #4]
 801759a:	2b00      	cmp	r3, #0
 801759c:	d131      	bne.n	8017602 <USBD_SetAddress+0x76>
 801759e:	683b      	ldr	r3, [r7, #0]
 80175a0:	88db      	ldrh	r3, [r3, #6]
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d12d      	bne.n	8017602 <USBD_SetAddress+0x76>
 80175a6:	683b      	ldr	r3, [r7, #0]
 80175a8:	885b      	ldrh	r3, [r3, #2]
 80175aa:	2b7f      	cmp	r3, #127	; 0x7f
 80175ac:	d829      	bhi.n	8017602 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80175ae:	683b      	ldr	r3, [r7, #0]
 80175b0:	885b      	ldrh	r3, [r3, #2]
 80175b2:	b2db      	uxtb	r3, r3
 80175b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80175b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80175c0:	b2db      	uxtb	r3, r3
 80175c2:	2b03      	cmp	r3, #3
 80175c4:	d104      	bne.n	80175d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80175c6:	6839      	ldr	r1, [r7, #0]
 80175c8:	6878      	ldr	r0, [r7, #4]
 80175ca:	f000 f9a3 	bl	8017914 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80175ce:	e01d      	b.n	801760c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	7bfa      	ldrb	r2, [r7, #15]
 80175d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80175d8:	7bfb      	ldrb	r3, [r7, #15]
 80175da:	4619      	mov	r1, r3
 80175dc:	6878      	ldr	r0, [r7, #4]
 80175de:	f000 ff6f 	bl	80184c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80175e2:	6878      	ldr	r0, [r7, #4]
 80175e4:	f000 fa61 	bl	8017aaa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80175e8:	7bfb      	ldrb	r3, [r7, #15]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d004      	beq.n	80175f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	2202      	movs	r2, #2
 80175f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80175f6:	e009      	b.n	801760c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	2201      	movs	r2, #1
 80175fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017600:	e004      	b.n	801760c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8017602:	6839      	ldr	r1, [r7, #0]
 8017604:	6878      	ldr	r0, [r7, #4]
 8017606:	f000 f985 	bl	8017914 <USBD_CtlError>
  }
}
 801760a:	bf00      	nop
 801760c:	bf00      	nop
 801760e:	3710      	adds	r7, #16
 8017610:	46bd      	mov	sp, r7
 8017612:	bd80      	pop	{r7, pc}

08017614 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b084      	sub	sp, #16
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
 801761c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801761e:	2300      	movs	r3, #0
 8017620:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8017622:	683b      	ldr	r3, [r7, #0]
 8017624:	885b      	ldrh	r3, [r3, #2]
 8017626:	b2da      	uxtb	r2, r3
 8017628:	4b4c      	ldr	r3, [pc, #304]	; (801775c <USBD_SetConfig+0x148>)
 801762a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801762c:	4b4b      	ldr	r3, [pc, #300]	; (801775c <USBD_SetConfig+0x148>)
 801762e:	781b      	ldrb	r3, [r3, #0]
 8017630:	2b01      	cmp	r3, #1
 8017632:	d905      	bls.n	8017640 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8017634:	6839      	ldr	r1, [r7, #0]
 8017636:	6878      	ldr	r0, [r7, #4]
 8017638:	f000 f96c 	bl	8017914 <USBD_CtlError>
    return USBD_FAIL;
 801763c:	2303      	movs	r3, #3
 801763e:	e088      	b.n	8017752 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017646:	b2db      	uxtb	r3, r3
 8017648:	2b02      	cmp	r3, #2
 801764a:	d002      	beq.n	8017652 <USBD_SetConfig+0x3e>
 801764c:	2b03      	cmp	r3, #3
 801764e:	d025      	beq.n	801769c <USBD_SetConfig+0x88>
 8017650:	e071      	b.n	8017736 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8017652:	4b42      	ldr	r3, [pc, #264]	; (801775c <USBD_SetConfig+0x148>)
 8017654:	781b      	ldrb	r3, [r3, #0]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d01c      	beq.n	8017694 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801765a:	4b40      	ldr	r3, [pc, #256]	; (801775c <USBD_SetConfig+0x148>)
 801765c:	781b      	ldrb	r3, [r3, #0]
 801765e:	461a      	mov	r2, r3
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017664:	4b3d      	ldr	r3, [pc, #244]	; (801775c <USBD_SetConfig+0x148>)
 8017666:	781b      	ldrb	r3, [r3, #0]
 8017668:	4619      	mov	r1, r3
 801766a:	6878      	ldr	r0, [r7, #4]
 801766c:	f7ff f91e 	bl	80168ac <USBD_SetClassConfig>
 8017670:	4603      	mov	r3, r0
 8017672:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017674:	7bfb      	ldrb	r3, [r7, #15]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d004      	beq.n	8017684 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801767a:	6839      	ldr	r1, [r7, #0]
 801767c:	6878      	ldr	r0, [r7, #4]
 801767e:	f000 f949 	bl	8017914 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017682:	e065      	b.n	8017750 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8017684:	6878      	ldr	r0, [r7, #4]
 8017686:	f000 fa10 	bl	8017aaa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	2203      	movs	r2, #3
 801768e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8017692:	e05d      	b.n	8017750 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8017694:	6878      	ldr	r0, [r7, #4]
 8017696:	f000 fa08 	bl	8017aaa <USBD_CtlSendStatus>
      break;
 801769a:	e059      	b.n	8017750 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801769c:	4b2f      	ldr	r3, [pc, #188]	; (801775c <USBD_SetConfig+0x148>)
 801769e:	781b      	ldrb	r3, [r3, #0]
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d112      	bne.n	80176ca <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	2202      	movs	r2, #2
 80176a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80176ac:	4b2b      	ldr	r3, [pc, #172]	; (801775c <USBD_SetConfig+0x148>)
 80176ae:	781b      	ldrb	r3, [r3, #0]
 80176b0:	461a      	mov	r2, r3
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80176b6:	4b29      	ldr	r3, [pc, #164]	; (801775c <USBD_SetConfig+0x148>)
 80176b8:	781b      	ldrb	r3, [r3, #0]
 80176ba:	4619      	mov	r1, r3
 80176bc:	6878      	ldr	r0, [r7, #4]
 80176be:	f7ff f911 	bl	80168e4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80176c2:	6878      	ldr	r0, [r7, #4]
 80176c4:	f000 f9f1 	bl	8017aaa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80176c8:	e042      	b.n	8017750 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80176ca:	4b24      	ldr	r3, [pc, #144]	; (801775c <USBD_SetConfig+0x148>)
 80176cc:	781b      	ldrb	r3, [r3, #0]
 80176ce:	461a      	mov	r2, r3
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	685b      	ldr	r3, [r3, #4]
 80176d4:	429a      	cmp	r2, r3
 80176d6:	d02a      	beq.n	801772e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	685b      	ldr	r3, [r3, #4]
 80176dc:	b2db      	uxtb	r3, r3
 80176de:	4619      	mov	r1, r3
 80176e0:	6878      	ldr	r0, [r7, #4]
 80176e2:	f7ff f8ff 	bl	80168e4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80176e6:	4b1d      	ldr	r3, [pc, #116]	; (801775c <USBD_SetConfig+0x148>)
 80176e8:	781b      	ldrb	r3, [r3, #0]
 80176ea:	461a      	mov	r2, r3
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80176f0:	4b1a      	ldr	r3, [pc, #104]	; (801775c <USBD_SetConfig+0x148>)
 80176f2:	781b      	ldrb	r3, [r3, #0]
 80176f4:	4619      	mov	r1, r3
 80176f6:	6878      	ldr	r0, [r7, #4]
 80176f8:	f7ff f8d8 	bl	80168ac <USBD_SetClassConfig>
 80176fc:	4603      	mov	r3, r0
 80176fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017700:	7bfb      	ldrb	r3, [r7, #15]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d00f      	beq.n	8017726 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8017706:	6839      	ldr	r1, [r7, #0]
 8017708:	6878      	ldr	r0, [r7, #4]
 801770a:	f000 f903 	bl	8017914 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	685b      	ldr	r3, [r3, #4]
 8017712:	b2db      	uxtb	r3, r3
 8017714:	4619      	mov	r1, r3
 8017716:	6878      	ldr	r0, [r7, #4]
 8017718:	f7ff f8e4 	bl	80168e4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	2202      	movs	r2, #2
 8017720:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8017724:	e014      	b.n	8017750 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8017726:	6878      	ldr	r0, [r7, #4]
 8017728:	f000 f9bf 	bl	8017aaa <USBD_CtlSendStatus>
      break;
 801772c:	e010      	b.n	8017750 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801772e:	6878      	ldr	r0, [r7, #4]
 8017730:	f000 f9bb 	bl	8017aaa <USBD_CtlSendStatus>
      break;
 8017734:	e00c      	b.n	8017750 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8017736:	6839      	ldr	r1, [r7, #0]
 8017738:	6878      	ldr	r0, [r7, #4]
 801773a:	f000 f8eb 	bl	8017914 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801773e:	4b07      	ldr	r3, [pc, #28]	; (801775c <USBD_SetConfig+0x148>)
 8017740:	781b      	ldrb	r3, [r3, #0]
 8017742:	4619      	mov	r1, r3
 8017744:	6878      	ldr	r0, [r7, #4]
 8017746:	f7ff f8cd 	bl	80168e4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801774a:	2303      	movs	r3, #3
 801774c:	73fb      	strb	r3, [r7, #15]
      break;
 801774e:	bf00      	nop
  }

  return ret;
 8017750:	7bfb      	ldrb	r3, [r7, #15]
}
 8017752:	4618      	mov	r0, r3
 8017754:	3710      	adds	r7, #16
 8017756:	46bd      	mov	sp, r7
 8017758:	bd80      	pop	{r7, pc}
 801775a:	bf00      	nop
 801775c:	200011c4 	.word	0x200011c4

08017760 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017760:	b580      	push	{r7, lr}
 8017762:	b082      	sub	sp, #8
 8017764:	af00      	add	r7, sp, #0
 8017766:	6078      	str	r0, [r7, #4]
 8017768:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801776a:	683b      	ldr	r3, [r7, #0]
 801776c:	88db      	ldrh	r3, [r3, #6]
 801776e:	2b01      	cmp	r3, #1
 8017770:	d004      	beq.n	801777c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017772:	6839      	ldr	r1, [r7, #0]
 8017774:	6878      	ldr	r0, [r7, #4]
 8017776:	f000 f8cd 	bl	8017914 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801777a:	e023      	b.n	80177c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017782:	b2db      	uxtb	r3, r3
 8017784:	2b02      	cmp	r3, #2
 8017786:	dc02      	bgt.n	801778e <USBD_GetConfig+0x2e>
 8017788:	2b00      	cmp	r3, #0
 801778a:	dc03      	bgt.n	8017794 <USBD_GetConfig+0x34>
 801778c:	e015      	b.n	80177ba <USBD_GetConfig+0x5a>
 801778e:	2b03      	cmp	r3, #3
 8017790:	d00b      	beq.n	80177aa <USBD_GetConfig+0x4a>
 8017792:	e012      	b.n	80177ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	2200      	movs	r2, #0
 8017798:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	3308      	adds	r3, #8
 801779e:	2201      	movs	r2, #1
 80177a0:	4619      	mov	r1, r3
 80177a2:	6878      	ldr	r0, [r7, #4]
 80177a4:	f000 f927 	bl	80179f6 <USBD_CtlSendData>
        break;
 80177a8:	e00c      	b.n	80177c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	3304      	adds	r3, #4
 80177ae:	2201      	movs	r2, #1
 80177b0:	4619      	mov	r1, r3
 80177b2:	6878      	ldr	r0, [r7, #4]
 80177b4:	f000 f91f 	bl	80179f6 <USBD_CtlSendData>
        break;
 80177b8:	e004      	b.n	80177c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80177ba:	6839      	ldr	r1, [r7, #0]
 80177bc:	6878      	ldr	r0, [r7, #4]
 80177be:	f000 f8a9 	bl	8017914 <USBD_CtlError>
        break;
 80177c2:	bf00      	nop
}
 80177c4:	bf00      	nop
 80177c6:	3708      	adds	r7, #8
 80177c8:	46bd      	mov	sp, r7
 80177ca:	bd80      	pop	{r7, pc}

080177cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b082      	sub	sp, #8
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	6078      	str	r0, [r7, #4]
 80177d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80177dc:	b2db      	uxtb	r3, r3
 80177de:	3b01      	subs	r3, #1
 80177e0:	2b02      	cmp	r3, #2
 80177e2:	d81e      	bhi.n	8017822 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80177e4:	683b      	ldr	r3, [r7, #0]
 80177e6:	88db      	ldrh	r3, [r3, #6]
 80177e8:	2b02      	cmp	r3, #2
 80177ea:	d004      	beq.n	80177f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80177ec:	6839      	ldr	r1, [r7, #0]
 80177ee:	6878      	ldr	r0, [r7, #4]
 80177f0:	f000 f890 	bl	8017914 <USBD_CtlError>
        break;
 80177f4:	e01a      	b.n	801782c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	2201      	movs	r2, #1
 80177fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8017802:	2b00      	cmp	r3, #0
 8017804:	d005      	beq.n	8017812 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	68db      	ldr	r3, [r3, #12]
 801780a:	f043 0202 	orr.w	r2, r3, #2
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	330c      	adds	r3, #12
 8017816:	2202      	movs	r2, #2
 8017818:	4619      	mov	r1, r3
 801781a:	6878      	ldr	r0, [r7, #4]
 801781c:	f000 f8eb 	bl	80179f6 <USBD_CtlSendData>
      break;
 8017820:	e004      	b.n	801782c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8017822:	6839      	ldr	r1, [r7, #0]
 8017824:	6878      	ldr	r0, [r7, #4]
 8017826:	f000 f875 	bl	8017914 <USBD_CtlError>
      break;
 801782a:	bf00      	nop
  }
}
 801782c:	bf00      	nop
 801782e:	3708      	adds	r7, #8
 8017830:	46bd      	mov	sp, r7
 8017832:	bd80      	pop	{r7, pc}

08017834 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017834:	b580      	push	{r7, lr}
 8017836:	b082      	sub	sp, #8
 8017838:	af00      	add	r7, sp, #0
 801783a:	6078      	str	r0, [r7, #4]
 801783c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801783e:	683b      	ldr	r3, [r7, #0]
 8017840:	885b      	ldrh	r3, [r3, #2]
 8017842:	2b01      	cmp	r3, #1
 8017844:	d106      	bne.n	8017854 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	2201      	movs	r2, #1
 801784a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801784e:	6878      	ldr	r0, [r7, #4]
 8017850:	f000 f92b 	bl	8017aaa <USBD_CtlSendStatus>
  }
}
 8017854:	bf00      	nop
 8017856:	3708      	adds	r7, #8
 8017858:	46bd      	mov	sp, r7
 801785a:	bd80      	pop	{r7, pc}

0801785c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801785c:	b580      	push	{r7, lr}
 801785e:	b082      	sub	sp, #8
 8017860:	af00      	add	r7, sp, #0
 8017862:	6078      	str	r0, [r7, #4]
 8017864:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801786c:	b2db      	uxtb	r3, r3
 801786e:	3b01      	subs	r3, #1
 8017870:	2b02      	cmp	r3, #2
 8017872:	d80b      	bhi.n	801788c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017874:	683b      	ldr	r3, [r7, #0]
 8017876:	885b      	ldrh	r3, [r3, #2]
 8017878:	2b01      	cmp	r3, #1
 801787a:	d10c      	bne.n	8017896 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	2200      	movs	r2, #0
 8017880:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017884:	6878      	ldr	r0, [r7, #4]
 8017886:	f000 f910 	bl	8017aaa <USBD_CtlSendStatus>
      }
      break;
 801788a:	e004      	b.n	8017896 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801788c:	6839      	ldr	r1, [r7, #0]
 801788e:	6878      	ldr	r0, [r7, #4]
 8017890:	f000 f840 	bl	8017914 <USBD_CtlError>
      break;
 8017894:	e000      	b.n	8017898 <USBD_ClrFeature+0x3c>
      break;
 8017896:	bf00      	nop
  }
}
 8017898:	bf00      	nop
 801789a:	3708      	adds	r7, #8
 801789c:	46bd      	mov	sp, r7
 801789e:	bd80      	pop	{r7, pc}

080178a0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80178a0:	b580      	push	{r7, lr}
 80178a2:	b084      	sub	sp, #16
 80178a4:	af00      	add	r7, sp, #0
 80178a6:	6078      	str	r0, [r7, #4]
 80178a8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80178aa:	683b      	ldr	r3, [r7, #0]
 80178ac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	781a      	ldrb	r2, [r3, #0]
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	3301      	adds	r3, #1
 80178ba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80178bc:	68fb      	ldr	r3, [r7, #12]
 80178be:	781a      	ldrb	r2, [r3, #0]
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	3301      	adds	r3, #1
 80178c8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80178ca:	68f8      	ldr	r0, [r7, #12]
 80178cc:	f7ff fa91 	bl	8016df2 <SWAPBYTE>
 80178d0:	4603      	mov	r3, r0
 80178d2:	461a      	mov	r2, r3
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	3301      	adds	r3, #1
 80178dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	3301      	adds	r3, #1
 80178e2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80178e4:	68f8      	ldr	r0, [r7, #12]
 80178e6:	f7ff fa84 	bl	8016df2 <SWAPBYTE>
 80178ea:	4603      	mov	r3, r0
 80178ec:	461a      	mov	r2, r3
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	3301      	adds	r3, #1
 80178f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80178f8:	68fb      	ldr	r3, [r7, #12]
 80178fa:	3301      	adds	r3, #1
 80178fc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80178fe:	68f8      	ldr	r0, [r7, #12]
 8017900:	f7ff fa77 	bl	8016df2 <SWAPBYTE>
 8017904:	4603      	mov	r3, r0
 8017906:	461a      	mov	r2, r3
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	80da      	strh	r2, [r3, #6]
}
 801790c:	bf00      	nop
 801790e:	3710      	adds	r7, #16
 8017910:	46bd      	mov	sp, r7
 8017912:	bd80      	pop	{r7, pc}

08017914 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017914:	b580      	push	{r7, lr}
 8017916:	b082      	sub	sp, #8
 8017918:	af00      	add	r7, sp, #0
 801791a:	6078      	str	r0, [r7, #4]
 801791c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801791e:	2180      	movs	r1, #128	; 0x80
 8017920:	6878      	ldr	r0, [r7, #4]
 8017922:	f000 fd35 	bl	8018390 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8017926:	2100      	movs	r1, #0
 8017928:	6878      	ldr	r0, [r7, #4]
 801792a:	f000 fd31 	bl	8018390 <USBD_LL_StallEP>
}
 801792e:	bf00      	nop
 8017930:	3708      	adds	r7, #8
 8017932:	46bd      	mov	sp, r7
 8017934:	bd80      	pop	{r7, pc}

08017936 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017936:	b580      	push	{r7, lr}
 8017938:	b086      	sub	sp, #24
 801793a:	af00      	add	r7, sp, #0
 801793c:	60f8      	str	r0, [r7, #12]
 801793e:	60b9      	str	r1, [r7, #8]
 8017940:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8017942:	2300      	movs	r3, #0
 8017944:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	2b00      	cmp	r3, #0
 801794a:	d036      	beq.n	80179ba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8017950:	6938      	ldr	r0, [r7, #16]
 8017952:	f000 f836 	bl	80179c2 <USBD_GetLen>
 8017956:	4603      	mov	r3, r0
 8017958:	3301      	adds	r3, #1
 801795a:	b29b      	uxth	r3, r3
 801795c:	005b      	lsls	r3, r3, #1
 801795e:	b29a      	uxth	r2, r3
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017964:	7dfb      	ldrb	r3, [r7, #23]
 8017966:	68ba      	ldr	r2, [r7, #8]
 8017968:	4413      	add	r3, r2
 801796a:	687a      	ldr	r2, [r7, #4]
 801796c:	7812      	ldrb	r2, [r2, #0]
 801796e:	701a      	strb	r2, [r3, #0]
  idx++;
 8017970:	7dfb      	ldrb	r3, [r7, #23]
 8017972:	3301      	adds	r3, #1
 8017974:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017976:	7dfb      	ldrb	r3, [r7, #23]
 8017978:	68ba      	ldr	r2, [r7, #8]
 801797a:	4413      	add	r3, r2
 801797c:	2203      	movs	r2, #3
 801797e:	701a      	strb	r2, [r3, #0]
  idx++;
 8017980:	7dfb      	ldrb	r3, [r7, #23]
 8017982:	3301      	adds	r3, #1
 8017984:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017986:	e013      	b.n	80179b0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8017988:	7dfb      	ldrb	r3, [r7, #23]
 801798a:	68ba      	ldr	r2, [r7, #8]
 801798c:	4413      	add	r3, r2
 801798e:	693a      	ldr	r2, [r7, #16]
 8017990:	7812      	ldrb	r2, [r2, #0]
 8017992:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017994:	693b      	ldr	r3, [r7, #16]
 8017996:	3301      	adds	r3, #1
 8017998:	613b      	str	r3, [r7, #16]
    idx++;
 801799a:	7dfb      	ldrb	r3, [r7, #23]
 801799c:	3301      	adds	r3, #1
 801799e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80179a0:	7dfb      	ldrb	r3, [r7, #23]
 80179a2:	68ba      	ldr	r2, [r7, #8]
 80179a4:	4413      	add	r3, r2
 80179a6:	2200      	movs	r2, #0
 80179a8:	701a      	strb	r2, [r3, #0]
    idx++;
 80179aa:	7dfb      	ldrb	r3, [r7, #23]
 80179ac:	3301      	adds	r3, #1
 80179ae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80179b0:	693b      	ldr	r3, [r7, #16]
 80179b2:	781b      	ldrb	r3, [r3, #0]
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d1e7      	bne.n	8017988 <USBD_GetString+0x52>
 80179b8:	e000      	b.n	80179bc <USBD_GetString+0x86>
    return;
 80179ba:	bf00      	nop
  }
}
 80179bc:	3718      	adds	r7, #24
 80179be:	46bd      	mov	sp, r7
 80179c0:	bd80      	pop	{r7, pc}

080179c2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80179c2:	b480      	push	{r7}
 80179c4:	b085      	sub	sp, #20
 80179c6:	af00      	add	r7, sp, #0
 80179c8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80179ca:	2300      	movs	r3, #0
 80179cc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80179d2:	e005      	b.n	80179e0 <USBD_GetLen+0x1e>
  {
    len++;
 80179d4:	7bfb      	ldrb	r3, [r7, #15]
 80179d6:	3301      	adds	r3, #1
 80179d8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80179da:	68bb      	ldr	r3, [r7, #8]
 80179dc:	3301      	adds	r3, #1
 80179de:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80179e0:	68bb      	ldr	r3, [r7, #8]
 80179e2:	781b      	ldrb	r3, [r3, #0]
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d1f5      	bne.n	80179d4 <USBD_GetLen+0x12>
  }

  return len;
 80179e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80179ea:	4618      	mov	r0, r3
 80179ec:	3714      	adds	r7, #20
 80179ee:	46bd      	mov	sp, r7
 80179f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179f4:	4770      	bx	lr

080179f6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80179f6:	b580      	push	{r7, lr}
 80179f8:	b084      	sub	sp, #16
 80179fa:	af00      	add	r7, sp, #0
 80179fc:	60f8      	str	r0, [r7, #12]
 80179fe:	60b9      	str	r1, [r7, #8]
 8017a00:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	2202      	movs	r2, #2
 8017a06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8017a0a:	68fb      	ldr	r3, [r7, #12]
 8017a0c:	687a      	ldr	r2, [r7, #4]
 8017a0e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	687a      	ldr	r2, [r7, #4]
 8017a14:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	68ba      	ldr	r2, [r7, #8]
 8017a1a:	2100      	movs	r1, #0
 8017a1c:	68f8      	ldr	r0, [r7, #12]
 8017a1e:	f000 fd85 	bl	801852c <USBD_LL_Transmit>

  return USBD_OK;
 8017a22:	2300      	movs	r3, #0
}
 8017a24:	4618      	mov	r0, r3
 8017a26:	3710      	adds	r7, #16
 8017a28:	46bd      	mov	sp, r7
 8017a2a:	bd80      	pop	{r7, pc}

08017a2c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	b084      	sub	sp, #16
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	60f8      	str	r0, [r7, #12]
 8017a34:	60b9      	str	r1, [r7, #8]
 8017a36:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	68ba      	ldr	r2, [r7, #8]
 8017a3c:	2100      	movs	r1, #0
 8017a3e:	68f8      	ldr	r0, [r7, #12]
 8017a40:	f000 fd74 	bl	801852c <USBD_LL_Transmit>

  return USBD_OK;
 8017a44:	2300      	movs	r3, #0
}
 8017a46:	4618      	mov	r0, r3
 8017a48:	3710      	adds	r7, #16
 8017a4a:	46bd      	mov	sp, r7
 8017a4c:	bd80      	pop	{r7, pc}

08017a4e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8017a4e:	b580      	push	{r7, lr}
 8017a50:	b084      	sub	sp, #16
 8017a52:	af00      	add	r7, sp, #0
 8017a54:	60f8      	str	r0, [r7, #12]
 8017a56:	60b9      	str	r1, [r7, #8]
 8017a58:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017a5a:	68fb      	ldr	r3, [r7, #12]
 8017a5c:	2203      	movs	r2, #3
 8017a5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	687a      	ldr	r2, [r7, #4]
 8017a66:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017a6a:	68fb      	ldr	r3, [r7, #12]
 8017a6c:	687a      	ldr	r2, [r7, #4]
 8017a6e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	68ba      	ldr	r2, [r7, #8]
 8017a76:	2100      	movs	r1, #0
 8017a78:	68f8      	ldr	r0, [r7, #12]
 8017a7a:	f000 fd8f 	bl	801859c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017a7e:	2300      	movs	r3, #0
}
 8017a80:	4618      	mov	r0, r3
 8017a82:	3710      	adds	r7, #16
 8017a84:	46bd      	mov	sp, r7
 8017a86:	bd80      	pop	{r7, pc}

08017a88 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017a88:	b580      	push	{r7, lr}
 8017a8a:	b084      	sub	sp, #16
 8017a8c:	af00      	add	r7, sp, #0
 8017a8e:	60f8      	str	r0, [r7, #12]
 8017a90:	60b9      	str	r1, [r7, #8]
 8017a92:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	68ba      	ldr	r2, [r7, #8]
 8017a98:	2100      	movs	r1, #0
 8017a9a:	68f8      	ldr	r0, [r7, #12]
 8017a9c:	f000 fd7e 	bl	801859c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017aa0:	2300      	movs	r3, #0
}
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	3710      	adds	r7, #16
 8017aa6:	46bd      	mov	sp, r7
 8017aa8:	bd80      	pop	{r7, pc}

08017aaa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017aaa:	b580      	push	{r7, lr}
 8017aac:	b082      	sub	sp, #8
 8017aae:	af00      	add	r7, sp, #0
 8017ab0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	2204      	movs	r2, #4
 8017ab6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017aba:	2300      	movs	r3, #0
 8017abc:	2200      	movs	r2, #0
 8017abe:	2100      	movs	r1, #0
 8017ac0:	6878      	ldr	r0, [r7, #4]
 8017ac2:	f000 fd33 	bl	801852c <USBD_LL_Transmit>

  return USBD_OK;
 8017ac6:	2300      	movs	r3, #0
}
 8017ac8:	4618      	mov	r0, r3
 8017aca:	3708      	adds	r7, #8
 8017acc:	46bd      	mov	sp, r7
 8017ace:	bd80      	pop	{r7, pc}

08017ad0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017ad0:	b580      	push	{r7, lr}
 8017ad2:	b082      	sub	sp, #8
 8017ad4:	af00      	add	r7, sp, #0
 8017ad6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	2205      	movs	r2, #5
 8017adc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017ae0:	2300      	movs	r3, #0
 8017ae2:	2200      	movs	r2, #0
 8017ae4:	2100      	movs	r1, #0
 8017ae6:	6878      	ldr	r0, [r7, #4]
 8017ae8:	f000 fd58 	bl	801859c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017aec:	2300      	movs	r3, #0
}
 8017aee:	4618      	mov	r0, r3
 8017af0:	3708      	adds	r7, #8
 8017af2:	46bd      	mov	sp, r7
 8017af4:	bd80      	pop	{r7, pc}
	...

08017af8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017af8:	b580      	push	{r7, lr}
 8017afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017afc:	2200      	movs	r2, #0
 8017afe:	4912      	ldr	r1, [pc, #72]	; (8017b48 <MX_USB_DEVICE_Init+0x50>)
 8017b00:	4812      	ldr	r0, [pc, #72]	; (8017b4c <MX_USB_DEVICE_Init+0x54>)
 8017b02:	f7fe fe65 	bl	80167d0 <USBD_Init>
 8017b06:	4603      	mov	r3, r0
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d001      	beq.n	8017b10 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017b0c:	f7ea f80a 	bl	8001b24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017b10:	490f      	ldr	r1, [pc, #60]	; (8017b50 <MX_USB_DEVICE_Init+0x58>)
 8017b12:	480e      	ldr	r0, [pc, #56]	; (8017b4c <MX_USB_DEVICE_Init+0x54>)
 8017b14:	f7fe fe8c 	bl	8016830 <USBD_RegisterClass>
 8017b18:	4603      	mov	r3, r0
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d001      	beq.n	8017b22 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017b1e:	f7ea f801 	bl	8001b24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017b22:	490c      	ldr	r1, [pc, #48]	; (8017b54 <MX_USB_DEVICE_Init+0x5c>)
 8017b24:	4809      	ldr	r0, [pc, #36]	; (8017b4c <MX_USB_DEVICE_Init+0x54>)
 8017b26:	f7fe fddd 	bl	80166e4 <USBD_CDC_RegisterInterface>
 8017b2a:	4603      	mov	r3, r0
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d001      	beq.n	8017b34 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017b30:	f7e9 fff8 	bl	8001b24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017b34:	4805      	ldr	r0, [pc, #20]	; (8017b4c <MX_USB_DEVICE_Init+0x54>)
 8017b36:	f7fe fea2 	bl	801687e <USBD_Start>
 8017b3a:	4603      	mov	r3, r0
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d001      	beq.n	8017b44 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017b40:	f7e9 fff0 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017b44:	bf00      	nop
 8017b46:	bd80      	pop	{r7, pc}
 8017b48:	20000678 	.word	0x20000678
 8017b4c:	200011c8 	.word	0x200011c8
 8017b50:	20000560 	.word	0x20000560
 8017b54:	20000664 	.word	0x20000664

08017b58 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017b58:	b580      	push	{r7, lr}
 8017b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017b5c:	2200      	movs	r2, #0
 8017b5e:	4905      	ldr	r1, [pc, #20]	; (8017b74 <CDC_Init_FS+0x1c>)
 8017b60:	4805      	ldr	r0, [pc, #20]	; (8017b78 <CDC_Init_FS+0x20>)
 8017b62:	f7fe fdd4 	bl	801670e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017b66:	4905      	ldr	r1, [pc, #20]	; (8017b7c <CDC_Init_FS+0x24>)
 8017b68:	4803      	ldr	r0, [pc, #12]	; (8017b78 <CDC_Init_FS+0x20>)
 8017b6a:	f7fe fdee 	bl	801674a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017b6e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017b70:	4618      	mov	r0, r3
 8017b72:	bd80      	pop	{r7, pc}
 8017b74:	20001c98 	.word	0x20001c98
 8017b78:	200011c8 	.word	0x200011c8
 8017b7c:	20001498 	.word	0x20001498

08017b80 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017b80:	b480      	push	{r7}
 8017b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017b84:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017b86:	4618      	mov	r0, r3
 8017b88:	46bd      	mov	sp, r7
 8017b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b8e:	4770      	bx	lr

08017b90 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017b90:	b480      	push	{r7}
 8017b92:	b083      	sub	sp, #12
 8017b94:	af00      	add	r7, sp, #0
 8017b96:	4603      	mov	r3, r0
 8017b98:	6039      	str	r1, [r7, #0]
 8017b9a:	71fb      	strb	r3, [r7, #7]
 8017b9c:	4613      	mov	r3, r2
 8017b9e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017ba0:	79fb      	ldrb	r3, [r7, #7]
 8017ba2:	2b23      	cmp	r3, #35	; 0x23
 8017ba4:	d84a      	bhi.n	8017c3c <CDC_Control_FS+0xac>
 8017ba6:	a201      	add	r2, pc, #4	; (adr r2, 8017bac <CDC_Control_FS+0x1c>)
 8017ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017bac:	08017c3d 	.word	0x08017c3d
 8017bb0:	08017c3d 	.word	0x08017c3d
 8017bb4:	08017c3d 	.word	0x08017c3d
 8017bb8:	08017c3d 	.word	0x08017c3d
 8017bbc:	08017c3d 	.word	0x08017c3d
 8017bc0:	08017c3d 	.word	0x08017c3d
 8017bc4:	08017c3d 	.word	0x08017c3d
 8017bc8:	08017c3d 	.word	0x08017c3d
 8017bcc:	08017c3d 	.word	0x08017c3d
 8017bd0:	08017c3d 	.word	0x08017c3d
 8017bd4:	08017c3d 	.word	0x08017c3d
 8017bd8:	08017c3d 	.word	0x08017c3d
 8017bdc:	08017c3d 	.word	0x08017c3d
 8017be0:	08017c3d 	.word	0x08017c3d
 8017be4:	08017c3d 	.word	0x08017c3d
 8017be8:	08017c3d 	.word	0x08017c3d
 8017bec:	08017c3d 	.word	0x08017c3d
 8017bf0:	08017c3d 	.word	0x08017c3d
 8017bf4:	08017c3d 	.word	0x08017c3d
 8017bf8:	08017c3d 	.word	0x08017c3d
 8017bfc:	08017c3d 	.word	0x08017c3d
 8017c00:	08017c3d 	.word	0x08017c3d
 8017c04:	08017c3d 	.word	0x08017c3d
 8017c08:	08017c3d 	.word	0x08017c3d
 8017c0c:	08017c3d 	.word	0x08017c3d
 8017c10:	08017c3d 	.word	0x08017c3d
 8017c14:	08017c3d 	.word	0x08017c3d
 8017c18:	08017c3d 	.word	0x08017c3d
 8017c1c:	08017c3d 	.word	0x08017c3d
 8017c20:	08017c3d 	.word	0x08017c3d
 8017c24:	08017c3d 	.word	0x08017c3d
 8017c28:	08017c3d 	.word	0x08017c3d
 8017c2c:	08017c3d 	.word	0x08017c3d
 8017c30:	08017c3d 	.word	0x08017c3d
 8017c34:	08017c3d 	.word	0x08017c3d
 8017c38:	08017c3d 	.word	0x08017c3d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017c3c:	bf00      	nop
  }

  return (USBD_OK);
 8017c3e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017c40:	4618      	mov	r0, r3
 8017c42:	370c      	adds	r7, #12
 8017c44:	46bd      	mov	sp, r7
 8017c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c4a:	4770      	bx	lr

08017c4c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017c4c:	b580      	push	{r7, lr}
 8017c4e:	b082      	sub	sp, #8
 8017c50:	af00      	add	r7, sp, #0
 8017c52:	6078      	str	r0, [r7, #4]
 8017c54:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8017c56:	6879      	ldr	r1, [r7, #4]
 8017c58:	4805      	ldr	r0, [pc, #20]	; (8017c70 <CDC_Receive_FS+0x24>)
 8017c5a:	f7fe fd76 	bl	801674a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017c5e:	4804      	ldr	r0, [pc, #16]	; (8017c70 <CDC_Receive_FS+0x24>)
 8017c60:	f7fe fd8c 	bl	801677c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8017c64:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017c66:	4618      	mov	r0, r3
 8017c68:	3708      	adds	r7, #8
 8017c6a:	46bd      	mov	sp, r7
 8017c6c:	bd80      	pop	{r7, pc}
 8017c6e:	bf00      	nop
 8017c70:	200011c8 	.word	0x200011c8

08017c74 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017c74:	b480      	push	{r7}
 8017c76:	b087      	sub	sp, #28
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	60f8      	str	r0, [r7, #12]
 8017c7c:	60b9      	str	r1, [r7, #8]
 8017c7e:	4613      	mov	r3, r2
 8017c80:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017c82:	2300      	movs	r3, #0
 8017c84:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8017c86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017c8a:	4618      	mov	r0, r3
 8017c8c:	371c      	adds	r7, #28
 8017c8e:	46bd      	mov	sp, r7
 8017c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c94:	4770      	bx	lr
	...

08017c98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017c98:	b480      	push	{r7}
 8017c9a:	b083      	sub	sp, #12
 8017c9c:	af00      	add	r7, sp, #0
 8017c9e:	4603      	mov	r3, r0
 8017ca0:	6039      	str	r1, [r7, #0]
 8017ca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017ca4:	683b      	ldr	r3, [r7, #0]
 8017ca6:	2212      	movs	r2, #18
 8017ca8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017caa:	4b03      	ldr	r3, [pc, #12]	; (8017cb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017cac:	4618      	mov	r0, r3
 8017cae:	370c      	adds	r7, #12
 8017cb0:	46bd      	mov	sp, r7
 8017cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cb6:	4770      	bx	lr
 8017cb8:	20000698 	.word	0x20000698

08017cbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017cbc:	b480      	push	{r7}
 8017cbe:	b083      	sub	sp, #12
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	4603      	mov	r3, r0
 8017cc4:	6039      	str	r1, [r7, #0]
 8017cc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017cc8:	683b      	ldr	r3, [r7, #0]
 8017cca:	2204      	movs	r2, #4
 8017ccc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017cce:	4b03      	ldr	r3, [pc, #12]	; (8017cdc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017cd0:	4618      	mov	r0, r3
 8017cd2:	370c      	adds	r7, #12
 8017cd4:	46bd      	mov	sp, r7
 8017cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cda:	4770      	bx	lr
 8017cdc:	200006b8 	.word	0x200006b8

08017ce0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017ce0:	b580      	push	{r7, lr}
 8017ce2:	b082      	sub	sp, #8
 8017ce4:	af00      	add	r7, sp, #0
 8017ce6:	4603      	mov	r3, r0
 8017ce8:	6039      	str	r1, [r7, #0]
 8017cea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017cec:	79fb      	ldrb	r3, [r7, #7]
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d105      	bne.n	8017cfe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017cf2:	683a      	ldr	r2, [r7, #0]
 8017cf4:	4907      	ldr	r1, [pc, #28]	; (8017d14 <USBD_FS_ProductStrDescriptor+0x34>)
 8017cf6:	4808      	ldr	r0, [pc, #32]	; (8017d18 <USBD_FS_ProductStrDescriptor+0x38>)
 8017cf8:	f7ff fe1d 	bl	8017936 <USBD_GetString>
 8017cfc:	e004      	b.n	8017d08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017cfe:	683a      	ldr	r2, [r7, #0]
 8017d00:	4904      	ldr	r1, [pc, #16]	; (8017d14 <USBD_FS_ProductStrDescriptor+0x34>)
 8017d02:	4805      	ldr	r0, [pc, #20]	; (8017d18 <USBD_FS_ProductStrDescriptor+0x38>)
 8017d04:	f7ff fe17 	bl	8017936 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017d08:	4b02      	ldr	r3, [pc, #8]	; (8017d14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017d0a:	4618      	mov	r0, r3
 8017d0c:	3708      	adds	r7, #8
 8017d0e:	46bd      	mov	sp, r7
 8017d10:	bd80      	pop	{r7, pc}
 8017d12:	bf00      	nop
 8017d14:	20002498 	.word	0x20002498
 8017d18:	080198c8 	.word	0x080198c8

08017d1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b082      	sub	sp, #8
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	4603      	mov	r3, r0
 8017d24:	6039      	str	r1, [r7, #0]
 8017d26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017d28:	683a      	ldr	r2, [r7, #0]
 8017d2a:	4904      	ldr	r1, [pc, #16]	; (8017d3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017d2c:	4804      	ldr	r0, [pc, #16]	; (8017d40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017d2e:	f7ff fe02 	bl	8017936 <USBD_GetString>
  return USBD_StrDesc;
 8017d32:	4b02      	ldr	r3, [pc, #8]	; (8017d3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017d34:	4618      	mov	r0, r3
 8017d36:	3708      	adds	r7, #8
 8017d38:	46bd      	mov	sp, r7
 8017d3a:	bd80      	pop	{r7, pc}
 8017d3c:	20002498 	.word	0x20002498
 8017d40:	080198e0 	.word	0x080198e0

08017d44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d44:	b580      	push	{r7, lr}
 8017d46:	b082      	sub	sp, #8
 8017d48:	af00      	add	r7, sp, #0
 8017d4a:	4603      	mov	r3, r0
 8017d4c:	6039      	str	r1, [r7, #0]
 8017d4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017d50:	683b      	ldr	r3, [r7, #0]
 8017d52:	221a      	movs	r2, #26
 8017d54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017d56:	f000 f855 	bl	8017e04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017d5a:	4b02      	ldr	r3, [pc, #8]	; (8017d64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017d5c:	4618      	mov	r0, r3
 8017d5e:	3708      	adds	r7, #8
 8017d60:	46bd      	mov	sp, r7
 8017d62:	bd80      	pop	{r7, pc}
 8017d64:	200006bc 	.word	0x200006bc

08017d68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d68:	b580      	push	{r7, lr}
 8017d6a:	b082      	sub	sp, #8
 8017d6c:	af00      	add	r7, sp, #0
 8017d6e:	4603      	mov	r3, r0
 8017d70:	6039      	str	r1, [r7, #0]
 8017d72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017d74:	79fb      	ldrb	r3, [r7, #7]
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d105      	bne.n	8017d86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017d7a:	683a      	ldr	r2, [r7, #0]
 8017d7c:	4907      	ldr	r1, [pc, #28]	; (8017d9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8017d7e:	4808      	ldr	r0, [pc, #32]	; (8017da0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017d80:	f7ff fdd9 	bl	8017936 <USBD_GetString>
 8017d84:	e004      	b.n	8017d90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017d86:	683a      	ldr	r2, [r7, #0]
 8017d88:	4904      	ldr	r1, [pc, #16]	; (8017d9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8017d8a:	4805      	ldr	r0, [pc, #20]	; (8017da0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017d8c:	f7ff fdd3 	bl	8017936 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017d90:	4b02      	ldr	r3, [pc, #8]	; (8017d9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017d92:	4618      	mov	r0, r3
 8017d94:	3708      	adds	r7, #8
 8017d96:	46bd      	mov	sp, r7
 8017d98:	bd80      	pop	{r7, pc}
 8017d9a:	bf00      	nop
 8017d9c:	20002498 	.word	0x20002498
 8017da0:	080198f4 	.word	0x080198f4

08017da4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017da4:	b580      	push	{r7, lr}
 8017da6:	b082      	sub	sp, #8
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	4603      	mov	r3, r0
 8017dac:	6039      	str	r1, [r7, #0]
 8017dae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017db0:	79fb      	ldrb	r3, [r7, #7]
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	d105      	bne.n	8017dc2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017db6:	683a      	ldr	r2, [r7, #0]
 8017db8:	4907      	ldr	r1, [pc, #28]	; (8017dd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017dba:	4808      	ldr	r0, [pc, #32]	; (8017ddc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017dbc:	f7ff fdbb 	bl	8017936 <USBD_GetString>
 8017dc0:	e004      	b.n	8017dcc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017dc2:	683a      	ldr	r2, [r7, #0]
 8017dc4:	4904      	ldr	r1, [pc, #16]	; (8017dd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017dc6:	4805      	ldr	r0, [pc, #20]	; (8017ddc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017dc8:	f7ff fdb5 	bl	8017936 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017dcc:	4b02      	ldr	r3, [pc, #8]	; (8017dd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017dce:	4618      	mov	r0, r3
 8017dd0:	3708      	adds	r7, #8
 8017dd2:	46bd      	mov	sp, r7
 8017dd4:	bd80      	pop	{r7, pc}
 8017dd6:	bf00      	nop
 8017dd8:	20002498 	.word	0x20002498
 8017ddc:	08019900 	.word	0x08019900

08017de0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017de0:	b480      	push	{r7}
 8017de2:	b083      	sub	sp, #12
 8017de4:	af00      	add	r7, sp, #0
 8017de6:	4603      	mov	r3, r0
 8017de8:	6039      	str	r1, [r7, #0]
 8017dea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8017dec:	683b      	ldr	r3, [r7, #0]
 8017dee:	220c      	movs	r2, #12
 8017df0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8017df2:	4b03      	ldr	r3, [pc, #12]	; (8017e00 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8017df4:	4618      	mov	r0, r3
 8017df6:	370c      	adds	r7, #12
 8017df8:	46bd      	mov	sp, r7
 8017dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dfe:	4770      	bx	lr
 8017e00:	200006ac 	.word	0x200006ac

08017e04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017e04:	b580      	push	{r7, lr}
 8017e06:	b084      	sub	sp, #16
 8017e08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017e0a:	4b0f      	ldr	r3, [pc, #60]	; (8017e48 <Get_SerialNum+0x44>)
 8017e0c:	681b      	ldr	r3, [r3, #0]
 8017e0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017e10:	4b0e      	ldr	r3, [pc, #56]	; (8017e4c <Get_SerialNum+0x48>)
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017e16:	4b0e      	ldr	r3, [pc, #56]	; (8017e50 <Get_SerialNum+0x4c>)
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017e1c:	68fa      	ldr	r2, [r7, #12]
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	4413      	add	r3, r2
 8017e22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d009      	beq.n	8017e3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017e2a:	2208      	movs	r2, #8
 8017e2c:	4909      	ldr	r1, [pc, #36]	; (8017e54 <Get_SerialNum+0x50>)
 8017e2e:	68f8      	ldr	r0, [r7, #12]
 8017e30:	f000 f814 	bl	8017e5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017e34:	2204      	movs	r2, #4
 8017e36:	4908      	ldr	r1, [pc, #32]	; (8017e58 <Get_SerialNum+0x54>)
 8017e38:	68b8      	ldr	r0, [r7, #8]
 8017e3a:	f000 f80f 	bl	8017e5c <IntToUnicode>
  }
}
 8017e3e:	bf00      	nop
 8017e40:	3710      	adds	r7, #16
 8017e42:	46bd      	mov	sp, r7
 8017e44:	bd80      	pop	{r7, pc}
 8017e46:	bf00      	nop
 8017e48:	1fff7590 	.word	0x1fff7590
 8017e4c:	1fff7594 	.word	0x1fff7594
 8017e50:	1fff7598 	.word	0x1fff7598
 8017e54:	200006be 	.word	0x200006be
 8017e58:	200006ce 	.word	0x200006ce

08017e5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017e5c:	b480      	push	{r7}
 8017e5e:	b087      	sub	sp, #28
 8017e60:	af00      	add	r7, sp, #0
 8017e62:	60f8      	str	r0, [r7, #12]
 8017e64:	60b9      	str	r1, [r7, #8]
 8017e66:	4613      	mov	r3, r2
 8017e68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017e6a:	2300      	movs	r3, #0
 8017e6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017e6e:	2300      	movs	r3, #0
 8017e70:	75fb      	strb	r3, [r7, #23]
 8017e72:	e027      	b.n	8017ec4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017e74:	68fb      	ldr	r3, [r7, #12]
 8017e76:	0f1b      	lsrs	r3, r3, #28
 8017e78:	2b09      	cmp	r3, #9
 8017e7a:	d80b      	bhi.n	8017e94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	0f1b      	lsrs	r3, r3, #28
 8017e80:	b2da      	uxtb	r2, r3
 8017e82:	7dfb      	ldrb	r3, [r7, #23]
 8017e84:	005b      	lsls	r3, r3, #1
 8017e86:	4619      	mov	r1, r3
 8017e88:	68bb      	ldr	r3, [r7, #8]
 8017e8a:	440b      	add	r3, r1
 8017e8c:	3230      	adds	r2, #48	; 0x30
 8017e8e:	b2d2      	uxtb	r2, r2
 8017e90:	701a      	strb	r2, [r3, #0]
 8017e92:	e00a      	b.n	8017eaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	0f1b      	lsrs	r3, r3, #28
 8017e98:	b2da      	uxtb	r2, r3
 8017e9a:	7dfb      	ldrb	r3, [r7, #23]
 8017e9c:	005b      	lsls	r3, r3, #1
 8017e9e:	4619      	mov	r1, r3
 8017ea0:	68bb      	ldr	r3, [r7, #8]
 8017ea2:	440b      	add	r3, r1
 8017ea4:	3237      	adds	r2, #55	; 0x37
 8017ea6:	b2d2      	uxtb	r2, r2
 8017ea8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017eaa:	68fb      	ldr	r3, [r7, #12]
 8017eac:	011b      	lsls	r3, r3, #4
 8017eae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017eb0:	7dfb      	ldrb	r3, [r7, #23]
 8017eb2:	005b      	lsls	r3, r3, #1
 8017eb4:	3301      	adds	r3, #1
 8017eb6:	68ba      	ldr	r2, [r7, #8]
 8017eb8:	4413      	add	r3, r2
 8017eba:	2200      	movs	r2, #0
 8017ebc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017ebe:	7dfb      	ldrb	r3, [r7, #23]
 8017ec0:	3301      	adds	r3, #1
 8017ec2:	75fb      	strb	r3, [r7, #23]
 8017ec4:	7dfa      	ldrb	r2, [r7, #23]
 8017ec6:	79fb      	ldrb	r3, [r7, #7]
 8017ec8:	429a      	cmp	r2, r3
 8017eca:	d3d3      	bcc.n	8017e74 <IntToUnicode+0x18>
  }
}
 8017ecc:	bf00      	nop
 8017ece:	bf00      	nop
 8017ed0:	371c      	adds	r7, #28
 8017ed2:	46bd      	mov	sp, r7
 8017ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed8:	4770      	bx	lr
	...

08017edc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017edc:	b580      	push	{r7, lr}
 8017ede:	b08a      	sub	sp, #40	; 0x28
 8017ee0:	af00      	add	r7, sp, #0
 8017ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017ee4:	f107 0314 	add.w	r3, r7, #20
 8017ee8:	2200      	movs	r2, #0
 8017eea:	601a      	str	r2, [r3, #0]
 8017eec:	605a      	str	r2, [r3, #4]
 8017eee:	609a      	str	r2, [r3, #8]
 8017ef0:	60da      	str	r2, [r3, #12]
 8017ef2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017efc:	d14e      	bne.n	8017f9c <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017efe:	4b29      	ldr	r3, [pc, #164]	; (8017fa4 <HAL_PCD_MspInit+0xc8>)
 8017f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017f02:	4a28      	ldr	r2, [pc, #160]	; (8017fa4 <HAL_PCD_MspInit+0xc8>)
 8017f04:	f043 0301 	orr.w	r3, r3, #1
 8017f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017f0a:	4b26      	ldr	r3, [pc, #152]	; (8017fa4 <HAL_PCD_MspInit+0xc8>)
 8017f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017f0e:	f003 0301 	and.w	r3, r3, #1
 8017f12:	613b      	str	r3, [r7, #16]
 8017f14:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 8017f16:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8017f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017f1c:	2302      	movs	r3, #2
 8017f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017f20:	2300      	movs	r3, #0
 8017f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017f24:	2303      	movs	r3, #3
 8017f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017f28:	230a      	movs	r3, #10
 8017f2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017f2c:	f107 0314 	add.w	r3, r7, #20
 8017f30:	4619      	mov	r1, r3
 8017f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017f36:	f7f4 f981 	bl	800c23c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017f3a:	4b1a      	ldr	r3, [pc, #104]	; (8017fa4 <HAL_PCD_MspInit+0xc8>)
 8017f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017f3e:	4a19      	ldr	r2, [pc, #100]	; (8017fa4 <HAL_PCD_MspInit+0xc8>)
 8017f40:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017f46:	4b17      	ldr	r3, [pc, #92]	; (8017fa4 <HAL_PCD_MspInit+0xc8>)
 8017f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017f4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017f4e:	60fb      	str	r3, [r7, #12]
 8017f50:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8017f52:	4b14      	ldr	r3, [pc, #80]	; (8017fa4 <HAL_PCD_MspInit+0xc8>)
 8017f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d114      	bne.n	8017f88 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8017f5e:	4b11      	ldr	r3, [pc, #68]	; (8017fa4 <HAL_PCD_MspInit+0xc8>)
 8017f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017f62:	4a10      	ldr	r2, [pc, #64]	; (8017fa4 <HAL_PCD_MspInit+0xc8>)
 8017f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017f68:	6593      	str	r3, [r2, #88]	; 0x58
 8017f6a:	4b0e      	ldr	r3, [pc, #56]	; (8017fa4 <HAL_PCD_MspInit+0xc8>)
 8017f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017f72:	60bb      	str	r3, [r7, #8]
 8017f74:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8017f76:	f7f7 f81f 	bl	800efb8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8017f7a:	4b0a      	ldr	r3, [pc, #40]	; (8017fa4 <HAL_PCD_MspInit+0xc8>)
 8017f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017f7e:	4a09      	ldr	r2, [pc, #36]	; (8017fa4 <HAL_PCD_MspInit+0xc8>)
 8017f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8017f84:	6593      	str	r3, [r2, #88]	; 0x58
 8017f86:	e001      	b.n	8017f8c <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8017f88:	f7f7 f816 	bl	800efb8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8017f8c:	2200      	movs	r2, #0
 8017f8e:	2100      	movs	r1, #0
 8017f90:	2043      	movs	r0, #67	; 0x43
 8017f92:	f7f3 ff7c 	bl	800be8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017f96:	2043      	movs	r0, #67	; 0x43
 8017f98:	f7f3 ff95 	bl	800bec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017f9c:	bf00      	nop
 8017f9e:	3728      	adds	r7, #40	; 0x28
 8017fa0:	46bd      	mov	sp, r7
 8017fa2:	bd80      	pop	{r7, pc}
 8017fa4:	40021000 	.word	0x40021000

08017fa8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fa8:	b580      	push	{r7, lr}
 8017faa:	b082      	sub	sp, #8
 8017fac:	af00      	add	r7, sp, #0
 8017fae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8017fbc:	4619      	mov	r1, r3
 8017fbe:	4610      	mov	r0, r2
 8017fc0:	f7fe fca8 	bl	8016914 <USBD_LL_SetupStage>
}
 8017fc4:	bf00      	nop
 8017fc6:	3708      	adds	r7, #8
 8017fc8:	46bd      	mov	sp, r7
 8017fca:	bd80      	pop	{r7, pc}

08017fcc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017fcc:	b580      	push	{r7, lr}
 8017fce:	b082      	sub	sp, #8
 8017fd0:	af00      	add	r7, sp, #0
 8017fd2:	6078      	str	r0, [r7, #4]
 8017fd4:	460b      	mov	r3, r1
 8017fd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017fde:	78fa      	ldrb	r2, [r7, #3]
 8017fe0:	6879      	ldr	r1, [r7, #4]
 8017fe2:	4613      	mov	r3, r2
 8017fe4:	00db      	lsls	r3, r3, #3
 8017fe6:	4413      	add	r3, r2
 8017fe8:	009b      	lsls	r3, r3, #2
 8017fea:	440b      	add	r3, r1
 8017fec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8017ff0:	681a      	ldr	r2, [r3, #0]
 8017ff2:	78fb      	ldrb	r3, [r7, #3]
 8017ff4:	4619      	mov	r1, r3
 8017ff6:	f7fe fce2 	bl	80169be <USBD_LL_DataOutStage>
}
 8017ffa:	bf00      	nop
 8017ffc:	3708      	adds	r7, #8
 8017ffe:	46bd      	mov	sp, r7
 8018000:	bd80      	pop	{r7, pc}

08018002 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018002:	b580      	push	{r7, lr}
 8018004:	b082      	sub	sp, #8
 8018006:	af00      	add	r7, sp, #0
 8018008:	6078      	str	r0, [r7, #4]
 801800a:	460b      	mov	r3, r1
 801800c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018014:	78fa      	ldrb	r2, [r7, #3]
 8018016:	6879      	ldr	r1, [r7, #4]
 8018018:	4613      	mov	r3, r2
 801801a:	00db      	lsls	r3, r3, #3
 801801c:	4413      	add	r3, r2
 801801e:	009b      	lsls	r3, r3, #2
 8018020:	440b      	add	r3, r1
 8018022:	334c      	adds	r3, #76	; 0x4c
 8018024:	681a      	ldr	r2, [r3, #0]
 8018026:	78fb      	ldrb	r3, [r7, #3]
 8018028:	4619      	mov	r1, r3
 801802a:	f7fe fd2b 	bl	8016a84 <USBD_LL_DataInStage>
}
 801802e:	bf00      	nop
 8018030:	3708      	adds	r7, #8
 8018032:	46bd      	mov	sp, r7
 8018034:	bd80      	pop	{r7, pc}

08018036 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018036:	b580      	push	{r7, lr}
 8018038:	b082      	sub	sp, #8
 801803a:	af00      	add	r7, sp, #0
 801803c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018044:	4618      	mov	r0, r3
 8018046:	f7fe fe3f 	bl	8016cc8 <USBD_LL_SOF>
}
 801804a:	bf00      	nop
 801804c:	3708      	adds	r7, #8
 801804e:	46bd      	mov	sp, r7
 8018050:	bd80      	pop	{r7, pc}

08018052 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018052:	b580      	push	{r7, lr}
 8018054:	b084      	sub	sp, #16
 8018056:	af00      	add	r7, sp, #0
 8018058:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801805a:	2301      	movs	r3, #1
 801805c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	68db      	ldr	r3, [r3, #12]
 8018062:	2b02      	cmp	r3, #2
 8018064:	d001      	beq.n	801806a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8018066:	f7e9 fd5d 	bl	8001b24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018070:	7bfa      	ldrb	r2, [r7, #15]
 8018072:	4611      	mov	r1, r2
 8018074:	4618      	mov	r0, r3
 8018076:	f7fe fde9 	bl	8016c4c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018080:	4618      	mov	r0, r3
 8018082:	f7fe fd95 	bl	8016bb0 <USBD_LL_Reset>
}
 8018086:	bf00      	nop
 8018088:	3710      	adds	r7, #16
 801808a:	46bd      	mov	sp, r7
 801808c:	bd80      	pop	{r7, pc}
	...

08018090 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018090:	b580      	push	{r7, lr}
 8018092:	b082      	sub	sp, #8
 8018094:	af00      	add	r7, sp, #0
 8018096:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80180a0:	681b      	ldr	r3, [r3, #0]
 80180a2:	687a      	ldr	r2, [r7, #4]
 80180a4:	6812      	ldr	r2, [r2, #0]
 80180a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80180aa:	f043 0301 	orr.w	r3, r3, #1
 80180ae:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80180b0:	687b      	ldr	r3, [r7, #4]
 80180b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80180b6:	4618      	mov	r0, r3
 80180b8:	f7fe fdd8 	bl	8016c6c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	6a1b      	ldr	r3, [r3, #32]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d005      	beq.n	80180d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80180c4:	4b04      	ldr	r3, [pc, #16]	; (80180d8 <HAL_PCD_SuspendCallback+0x48>)
 80180c6:	691b      	ldr	r3, [r3, #16]
 80180c8:	4a03      	ldr	r2, [pc, #12]	; (80180d8 <HAL_PCD_SuspendCallback+0x48>)
 80180ca:	f043 0306 	orr.w	r3, r3, #6
 80180ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80180d0:	bf00      	nop
 80180d2:	3708      	adds	r7, #8
 80180d4:	46bd      	mov	sp, r7
 80180d6:	bd80      	pop	{r7, pc}
 80180d8:	e000ed00 	.word	0xe000ed00

080180dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180dc:	b580      	push	{r7, lr}
 80180de:	b082      	sub	sp, #8
 80180e0:	af00      	add	r7, sp, #0
 80180e2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	681b      	ldr	r3, [r3, #0]
 80180e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	687a      	ldr	r2, [r7, #4]
 80180f0:	6812      	ldr	r2, [r2, #0]
 80180f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80180f6:	f023 0301 	bic.w	r3, r3, #1
 80180fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	6a1b      	ldr	r3, [r3, #32]
 8018100:	2b00      	cmp	r3, #0
 8018102:	d007      	beq.n	8018114 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018104:	4b08      	ldr	r3, [pc, #32]	; (8018128 <HAL_PCD_ResumeCallback+0x4c>)
 8018106:	691b      	ldr	r3, [r3, #16]
 8018108:	4a07      	ldr	r2, [pc, #28]	; (8018128 <HAL_PCD_ResumeCallback+0x4c>)
 801810a:	f023 0306 	bic.w	r3, r3, #6
 801810e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8018110:	f000 faf6 	bl	8018700 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018114:	687b      	ldr	r3, [r7, #4]
 8018116:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801811a:	4618      	mov	r0, r3
 801811c:	f7fe fdbc 	bl	8016c98 <USBD_LL_Resume>
}
 8018120:	bf00      	nop
 8018122:	3708      	adds	r7, #8
 8018124:	46bd      	mov	sp, r7
 8018126:	bd80      	pop	{r7, pc}
 8018128:	e000ed00 	.word	0xe000ed00

0801812c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801812c:	b580      	push	{r7, lr}
 801812e:	b082      	sub	sp, #8
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
 8018134:	460b      	mov	r3, r1
 8018136:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801813e:	78fa      	ldrb	r2, [r7, #3]
 8018140:	4611      	mov	r1, r2
 8018142:	4618      	mov	r0, r3
 8018144:	f7fe fe08 	bl	8016d58 <USBD_LL_IsoOUTIncomplete>
}
 8018148:	bf00      	nop
 801814a:	3708      	adds	r7, #8
 801814c:	46bd      	mov	sp, r7
 801814e:	bd80      	pop	{r7, pc}

08018150 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018150:	b580      	push	{r7, lr}
 8018152:	b082      	sub	sp, #8
 8018154:	af00      	add	r7, sp, #0
 8018156:	6078      	str	r0, [r7, #4]
 8018158:	460b      	mov	r3, r1
 801815a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018162:	78fa      	ldrb	r2, [r7, #3]
 8018164:	4611      	mov	r1, r2
 8018166:	4618      	mov	r0, r3
 8018168:	f7fe fdd0 	bl	8016d0c <USBD_LL_IsoINIncomplete>
}
 801816c:	bf00      	nop
 801816e:	3708      	adds	r7, #8
 8018170:	46bd      	mov	sp, r7
 8018172:	bd80      	pop	{r7, pc}

08018174 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018174:	b580      	push	{r7, lr}
 8018176:	b082      	sub	sp, #8
 8018178:	af00      	add	r7, sp, #0
 801817a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018182:	4618      	mov	r0, r3
 8018184:	f7fe fe0e 	bl	8016da4 <USBD_LL_DevConnected>
}
 8018188:	bf00      	nop
 801818a:	3708      	adds	r7, #8
 801818c:	46bd      	mov	sp, r7
 801818e:	bd80      	pop	{r7, pc}

08018190 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018190:	b580      	push	{r7, lr}
 8018192:	b082      	sub	sp, #8
 8018194:	af00      	add	r7, sp, #0
 8018196:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801819e:	4618      	mov	r0, r3
 80181a0:	f7fe fe0b 	bl	8016dba <USBD_LL_DevDisconnected>
}
 80181a4:	bf00      	nop
 80181a6:	3708      	adds	r7, #8
 80181a8:	46bd      	mov	sp, r7
 80181aa:	bd80      	pop	{r7, pc}

080181ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80181ac:	b580      	push	{r7, lr}
 80181ae:	b082      	sub	sp, #8
 80181b0:	af00      	add	r7, sp, #0
 80181b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	781b      	ldrb	r3, [r3, #0]
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	d13c      	bne.n	8018236 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80181bc:	4a20      	ldr	r2, [pc, #128]	; (8018240 <USBD_LL_Init+0x94>)
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	4a1e      	ldr	r2, [pc, #120]	; (8018240 <USBD_LL_Init+0x94>)
 80181c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80181cc:	4b1c      	ldr	r3, [pc, #112]	; (8018240 <USBD_LL_Init+0x94>)
 80181ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80181d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80181d4:	4b1a      	ldr	r3, [pc, #104]	; (8018240 <USBD_LL_Init+0x94>)
 80181d6:	2206      	movs	r2, #6
 80181d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80181da:	4b19      	ldr	r3, [pc, #100]	; (8018240 <USBD_LL_Init+0x94>)
 80181dc:	2202      	movs	r2, #2
 80181de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80181e0:	4b17      	ldr	r3, [pc, #92]	; (8018240 <USBD_LL_Init+0x94>)
 80181e2:	2202      	movs	r2, #2
 80181e4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80181e6:	4b16      	ldr	r3, [pc, #88]	; (8018240 <USBD_LL_Init+0x94>)
 80181e8:	2200      	movs	r2, #0
 80181ea:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80181ec:	4b14      	ldr	r3, [pc, #80]	; (8018240 <USBD_LL_Init+0x94>)
 80181ee:	2200      	movs	r2, #0
 80181f0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80181f2:	4b13      	ldr	r3, [pc, #76]	; (8018240 <USBD_LL_Init+0x94>)
 80181f4:	2200      	movs	r2, #0
 80181f6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80181f8:	4b11      	ldr	r3, [pc, #68]	; (8018240 <USBD_LL_Init+0x94>)
 80181fa:	2200      	movs	r2, #0
 80181fc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80181fe:	4b10      	ldr	r3, [pc, #64]	; (8018240 <USBD_LL_Init+0x94>)
 8018200:	2200      	movs	r2, #0
 8018202:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8018204:	4b0e      	ldr	r3, [pc, #56]	; (8018240 <USBD_LL_Init+0x94>)
 8018206:	2200      	movs	r2, #0
 8018208:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801820a:	480d      	ldr	r0, [pc, #52]	; (8018240 <USBD_LL_Init+0x94>)
 801820c:	f7f5 fc6d 	bl	800daea <HAL_PCD_Init>
 8018210:	4603      	mov	r3, r0
 8018212:	2b00      	cmp	r3, #0
 8018214:	d001      	beq.n	801821a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8018216:	f7e9 fc85 	bl	8001b24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801821a:	2180      	movs	r1, #128	; 0x80
 801821c:	4808      	ldr	r0, [pc, #32]	; (8018240 <USBD_LL_Init+0x94>)
 801821e:	f7f6 fdee 	bl	800edfe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018222:	2240      	movs	r2, #64	; 0x40
 8018224:	2100      	movs	r1, #0
 8018226:	4806      	ldr	r0, [pc, #24]	; (8018240 <USBD_LL_Init+0x94>)
 8018228:	f7f6 fda2 	bl	800ed70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801822c:	2280      	movs	r2, #128	; 0x80
 801822e:	2101      	movs	r1, #1
 8018230:	4803      	ldr	r0, [pc, #12]	; (8018240 <USBD_LL_Init+0x94>)
 8018232:	f7f6 fd9d 	bl	800ed70 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8018236:	2300      	movs	r3, #0
}
 8018238:	4618      	mov	r0, r3
 801823a:	3708      	adds	r7, #8
 801823c:	46bd      	mov	sp, r7
 801823e:	bd80      	pop	{r7, pc}
 8018240:	20002698 	.word	0x20002698

08018244 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018244:	b580      	push	{r7, lr}
 8018246:	b084      	sub	sp, #16
 8018248:	af00      	add	r7, sp, #0
 801824a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801824c:	2300      	movs	r3, #0
 801824e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018250:	2300      	movs	r3, #0
 8018252:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801825a:	4618      	mov	r0, r3
 801825c:	f7f5 fd69 	bl	800dd32 <HAL_PCD_Start>
 8018260:	4603      	mov	r3, r0
 8018262:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8018264:	7bbb      	ldrb	r3, [r7, #14]
 8018266:	2b03      	cmp	r3, #3
 8018268:	d816      	bhi.n	8018298 <USBD_LL_Start+0x54>
 801826a:	a201      	add	r2, pc, #4	; (adr r2, 8018270 <USBD_LL_Start+0x2c>)
 801826c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018270:	08018281 	.word	0x08018281
 8018274:	08018287 	.word	0x08018287
 8018278:	0801828d 	.word	0x0801828d
 801827c:	08018293 	.word	0x08018293
    case HAL_OK :
      usb_status = USBD_OK;
 8018280:	2300      	movs	r3, #0
 8018282:	73fb      	strb	r3, [r7, #15]
    break;
 8018284:	e00b      	b.n	801829e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018286:	2303      	movs	r3, #3
 8018288:	73fb      	strb	r3, [r7, #15]
    break;
 801828a:	e008      	b.n	801829e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801828c:	2301      	movs	r3, #1
 801828e:	73fb      	strb	r3, [r7, #15]
    break;
 8018290:	e005      	b.n	801829e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018292:	2303      	movs	r3, #3
 8018294:	73fb      	strb	r3, [r7, #15]
    break;
 8018296:	e002      	b.n	801829e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8018298:	2303      	movs	r3, #3
 801829a:	73fb      	strb	r3, [r7, #15]
    break;
 801829c:	bf00      	nop
  }
  return usb_status;
 801829e:	7bfb      	ldrb	r3, [r7, #15]
}
 80182a0:	4618      	mov	r0, r3
 80182a2:	3710      	adds	r7, #16
 80182a4:	46bd      	mov	sp, r7
 80182a6:	bd80      	pop	{r7, pc}

080182a8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80182a8:	b580      	push	{r7, lr}
 80182aa:	b084      	sub	sp, #16
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	6078      	str	r0, [r7, #4]
 80182b0:	4608      	mov	r0, r1
 80182b2:	4611      	mov	r1, r2
 80182b4:	461a      	mov	r2, r3
 80182b6:	4603      	mov	r3, r0
 80182b8:	70fb      	strb	r3, [r7, #3]
 80182ba:	460b      	mov	r3, r1
 80182bc:	70bb      	strb	r3, [r7, #2]
 80182be:	4613      	mov	r3, r2
 80182c0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80182c2:	2300      	movs	r3, #0
 80182c4:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80182c6:	2300      	movs	r3, #0
 80182c8:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80182d0:	78bb      	ldrb	r3, [r7, #2]
 80182d2:	883a      	ldrh	r2, [r7, #0]
 80182d4:	78f9      	ldrb	r1, [r7, #3]
 80182d6:	f7f6 fa13 	bl	800e700 <HAL_PCD_EP_Open>
 80182da:	4603      	mov	r3, r0
 80182dc:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80182de:	7bbb      	ldrb	r3, [r7, #14]
 80182e0:	2b03      	cmp	r3, #3
 80182e2:	d817      	bhi.n	8018314 <USBD_LL_OpenEP+0x6c>
 80182e4:	a201      	add	r2, pc, #4	; (adr r2, 80182ec <USBD_LL_OpenEP+0x44>)
 80182e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80182ea:	bf00      	nop
 80182ec:	080182fd 	.word	0x080182fd
 80182f0:	08018303 	.word	0x08018303
 80182f4:	08018309 	.word	0x08018309
 80182f8:	0801830f 	.word	0x0801830f
    case HAL_OK :
      usb_status = USBD_OK;
 80182fc:	2300      	movs	r3, #0
 80182fe:	73fb      	strb	r3, [r7, #15]
    break;
 8018300:	e00b      	b.n	801831a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018302:	2303      	movs	r3, #3
 8018304:	73fb      	strb	r3, [r7, #15]
    break;
 8018306:	e008      	b.n	801831a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018308:	2301      	movs	r3, #1
 801830a:	73fb      	strb	r3, [r7, #15]
    break;
 801830c:	e005      	b.n	801831a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801830e:	2303      	movs	r3, #3
 8018310:	73fb      	strb	r3, [r7, #15]
    break;
 8018312:	e002      	b.n	801831a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8018314:	2303      	movs	r3, #3
 8018316:	73fb      	strb	r3, [r7, #15]
    break;
 8018318:	bf00      	nop
  }
  return usb_status;
 801831a:	7bfb      	ldrb	r3, [r7, #15]
}
 801831c:	4618      	mov	r0, r3
 801831e:	3710      	adds	r7, #16
 8018320:	46bd      	mov	sp, r7
 8018322:	bd80      	pop	{r7, pc}

08018324 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018324:	b580      	push	{r7, lr}
 8018326:	b084      	sub	sp, #16
 8018328:	af00      	add	r7, sp, #0
 801832a:	6078      	str	r0, [r7, #4]
 801832c:	460b      	mov	r3, r1
 801832e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018330:	2300      	movs	r3, #0
 8018332:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018334:	2300      	movs	r3, #0
 8018336:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801833e:	78fa      	ldrb	r2, [r7, #3]
 8018340:	4611      	mov	r1, r2
 8018342:	4618      	mov	r0, r3
 8018344:	f7f6 fa44 	bl	800e7d0 <HAL_PCD_EP_Close>
 8018348:	4603      	mov	r3, r0
 801834a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801834c:	7bbb      	ldrb	r3, [r7, #14]
 801834e:	2b03      	cmp	r3, #3
 8018350:	d816      	bhi.n	8018380 <USBD_LL_CloseEP+0x5c>
 8018352:	a201      	add	r2, pc, #4	; (adr r2, 8018358 <USBD_LL_CloseEP+0x34>)
 8018354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018358:	08018369 	.word	0x08018369
 801835c:	0801836f 	.word	0x0801836f
 8018360:	08018375 	.word	0x08018375
 8018364:	0801837b 	.word	0x0801837b
    case HAL_OK :
      usb_status = USBD_OK;
 8018368:	2300      	movs	r3, #0
 801836a:	73fb      	strb	r3, [r7, #15]
    break;
 801836c:	e00b      	b.n	8018386 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801836e:	2303      	movs	r3, #3
 8018370:	73fb      	strb	r3, [r7, #15]
    break;
 8018372:	e008      	b.n	8018386 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018374:	2301      	movs	r3, #1
 8018376:	73fb      	strb	r3, [r7, #15]
    break;
 8018378:	e005      	b.n	8018386 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801837a:	2303      	movs	r3, #3
 801837c:	73fb      	strb	r3, [r7, #15]
    break;
 801837e:	e002      	b.n	8018386 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8018380:	2303      	movs	r3, #3
 8018382:	73fb      	strb	r3, [r7, #15]
    break;
 8018384:	bf00      	nop
  }
  return usb_status;
 8018386:	7bfb      	ldrb	r3, [r7, #15]
}
 8018388:	4618      	mov	r0, r3
 801838a:	3710      	adds	r7, #16
 801838c:	46bd      	mov	sp, r7
 801838e:	bd80      	pop	{r7, pc}

08018390 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018390:	b580      	push	{r7, lr}
 8018392:	b084      	sub	sp, #16
 8018394:	af00      	add	r7, sp, #0
 8018396:	6078      	str	r0, [r7, #4]
 8018398:	460b      	mov	r3, r1
 801839a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801839c:	2300      	movs	r3, #0
 801839e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80183a0:	2300      	movs	r3, #0
 80183a2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80183aa:	78fa      	ldrb	r2, [r7, #3]
 80183ac:	4611      	mov	r1, r2
 80183ae:	4618      	mov	r0, r3
 80183b0:	f7f6 faeb 	bl	800e98a <HAL_PCD_EP_SetStall>
 80183b4:	4603      	mov	r3, r0
 80183b6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80183b8:	7bbb      	ldrb	r3, [r7, #14]
 80183ba:	2b03      	cmp	r3, #3
 80183bc:	d816      	bhi.n	80183ec <USBD_LL_StallEP+0x5c>
 80183be:	a201      	add	r2, pc, #4	; (adr r2, 80183c4 <USBD_LL_StallEP+0x34>)
 80183c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183c4:	080183d5 	.word	0x080183d5
 80183c8:	080183db 	.word	0x080183db
 80183cc:	080183e1 	.word	0x080183e1
 80183d0:	080183e7 	.word	0x080183e7
    case HAL_OK :
      usb_status = USBD_OK;
 80183d4:	2300      	movs	r3, #0
 80183d6:	73fb      	strb	r3, [r7, #15]
    break;
 80183d8:	e00b      	b.n	80183f2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80183da:	2303      	movs	r3, #3
 80183dc:	73fb      	strb	r3, [r7, #15]
    break;
 80183de:	e008      	b.n	80183f2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80183e0:	2301      	movs	r3, #1
 80183e2:	73fb      	strb	r3, [r7, #15]
    break;
 80183e4:	e005      	b.n	80183f2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80183e6:	2303      	movs	r3, #3
 80183e8:	73fb      	strb	r3, [r7, #15]
    break;
 80183ea:	e002      	b.n	80183f2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80183ec:	2303      	movs	r3, #3
 80183ee:	73fb      	strb	r3, [r7, #15]
    break;
 80183f0:	bf00      	nop
  }
  return usb_status;
 80183f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80183f4:	4618      	mov	r0, r3
 80183f6:	3710      	adds	r7, #16
 80183f8:	46bd      	mov	sp, r7
 80183fa:	bd80      	pop	{r7, pc}

080183fc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80183fc:	b580      	push	{r7, lr}
 80183fe:	b084      	sub	sp, #16
 8018400:	af00      	add	r7, sp, #0
 8018402:	6078      	str	r0, [r7, #4]
 8018404:	460b      	mov	r3, r1
 8018406:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018408:	2300      	movs	r3, #0
 801840a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801840c:	2300      	movs	r3, #0
 801840e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018416:	78fa      	ldrb	r2, [r7, #3]
 8018418:	4611      	mov	r1, r2
 801841a:	4618      	mov	r0, r3
 801841c:	f7f6 fb17 	bl	800ea4e <HAL_PCD_EP_ClrStall>
 8018420:	4603      	mov	r3, r0
 8018422:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8018424:	7bbb      	ldrb	r3, [r7, #14]
 8018426:	2b03      	cmp	r3, #3
 8018428:	d816      	bhi.n	8018458 <USBD_LL_ClearStallEP+0x5c>
 801842a:	a201      	add	r2, pc, #4	; (adr r2, 8018430 <USBD_LL_ClearStallEP+0x34>)
 801842c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018430:	08018441 	.word	0x08018441
 8018434:	08018447 	.word	0x08018447
 8018438:	0801844d 	.word	0x0801844d
 801843c:	08018453 	.word	0x08018453
    case HAL_OK :
      usb_status = USBD_OK;
 8018440:	2300      	movs	r3, #0
 8018442:	73fb      	strb	r3, [r7, #15]
    break;
 8018444:	e00b      	b.n	801845e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018446:	2303      	movs	r3, #3
 8018448:	73fb      	strb	r3, [r7, #15]
    break;
 801844a:	e008      	b.n	801845e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801844c:	2301      	movs	r3, #1
 801844e:	73fb      	strb	r3, [r7, #15]
    break;
 8018450:	e005      	b.n	801845e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018452:	2303      	movs	r3, #3
 8018454:	73fb      	strb	r3, [r7, #15]
    break;
 8018456:	e002      	b.n	801845e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8018458:	2303      	movs	r3, #3
 801845a:	73fb      	strb	r3, [r7, #15]
    break;
 801845c:	bf00      	nop
  }
  return usb_status;
 801845e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018460:	4618      	mov	r0, r3
 8018462:	3710      	adds	r7, #16
 8018464:	46bd      	mov	sp, r7
 8018466:	bd80      	pop	{r7, pc}

08018468 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018468:	b480      	push	{r7}
 801846a:	b085      	sub	sp, #20
 801846c:	af00      	add	r7, sp, #0
 801846e:	6078      	str	r0, [r7, #4]
 8018470:	460b      	mov	r3, r1
 8018472:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801847a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801847c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018480:	2b00      	cmp	r3, #0
 8018482:	da0b      	bge.n	801849c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018484:	78fb      	ldrb	r3, [r7, #3]
 8018486:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801848a:	68f9      	ldr	r1, [r7, #12]
 801848c:	4613      	mov	r3, r2
 801848e:	00db      	lsls	r3, r3, #3
 8018490:	4413      	add	r3, r2
 8018492:	009b      	lsls	r3, r3, #2
 8018494:	440b      	add	r3, r1
 8018496:	333e      	adds	r3, #62	; 0x3e
 8018498:	781b      	ldrb	r3, [r3, #0]
 801849a:	e00b      	b.n	80184b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801849c:	78fb      	ldrb	r3, [r7, #3]
 801849e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80184a2:	68f9      	ldr	r1, [r7, #12]
 80184a4:	4613      	mov	r3, r2
 80184a6:	00db      	lsls	r3, r3, #3
 80184a8:	4413      	add	r3, r2
 80184aa:	009b      	lsls	r3, r3, #2
 80184ac:	440b      	add	r3, r1
 80184ae:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80184b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80184b4:	4618      	mov	r0, r3
 80184b6:	3714      	adds	r7, #20
 80184b8:	46bd      	mov	sp, r7
 80184ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184be:	4770      	bx	lr

080184c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80184c0:	b580      	push	{r7, lr}
 80184c2:	b084      	sub	sp, #16
 80184c4:	af00      	add	r7, sp, #0
 80184c6:	6078      	str	r0, [r7, #4]
 80184c8:	460b      	mov	r3, r1
 80184ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80184cc:	2300      	movs	r3, #0
 80184ce:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80184d0:	2300      	movs	r3, #0
 80184d2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80184da:	78fa      	ldrb	r2, [r7, #3]
 80184dc:	4611      	mov	r1, r2
 80184de:	4618      	mov	r0, r3
 80184e0:	f7f6 f8e9 	bl	800e6b6 <HAL_PCD_SetAddress>
 80184e4:	4603      	mov	r3, r0
 80184e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80184e8:	7bbb      	ldrb	r3, [r7, #14]
 80184ea:	2b03      	cmp	r3, #3
 80184ec:	d816      	bhi.n	801851c <USBD_LL_SetUSBAddress+0x5c>
 80184ee:	a201      	add	r2, pc, #4	; (adr r2, 80184f4 <USBD_LL_SetUSBAddress+0x34>)
 80184f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184f4:	08018505 	.word	0x08018505
 80184f8:	0801850b 	.word	0x0801850b
 80184fc:	08018511 	.word	0x08018511
 8018500:	08018517 	.word	0x08018517
    case HAL_OK :
      usb_status = USBD_OK;
 8018504:	2300      	movs	r3, #0
 8018506:	73fb      	strb	r3, [r7, #15]
    break;
 8018508:	e00b      	b.n	8018522 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801850a:	2303      	movs	r3, #3
 801850c:	73fb      	strb	r3, [r7, #15]
    break;
 801850e:	e008      	b.n	8018522 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018510:	2301      	movs	r3, #1
 8018512:	73fb      	strb	r3, [r7, #15]
    break;
 8018514:	e005      	b.n	8018522 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018516:	2303      	movs	r3, #3
 8018518:	73fb      	strb	r3, [r7, #15]
    break;
 801851a:	e002      	b.n	8018522 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 801851c:	2303      	movs	r3, #3
 801851e:	73fb      	strb	r3, [r7, #15]
    break;
 8018520:	bf00      	nop
  }
  return usb_status;
 8018522:	7bfb      	ldrb	r3, [r7, #15]
}
 8018524:	4618      	mov	r0, r3
 8018526:	3710      	adds	r7, #16
 8018528:	46bd      	mov	sp, r7
 801852a:	bd80      	pop	{r7, pc}

0801852c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801852c:	b580      	push	{r7, lr}
 801852e:	b086      	sub	sp, #24
 8018530:	af00      	add	r7, sp, #0
 8018532:	60f8      	str	r0, [r7, #12]
 8018534:	607a      	str	r2, [r7, #4]
 8018536:	603b      	str	r3, [r7, #0]
 8018538:	460b      	mov	r3, r1
 801853a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801853c:	2300      	movs	r3, #0
 801853e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018540:	2300      	movs	r3, #0
 8018542:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018544:	68fb      	ldr	r3, [r7, #12]
 8018546:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801854a:	7af9      	ldrb	r1, [r7, #11]
 801854c:	683b      	ldr	r3, [r7, #0]
 801854e:	687a      	ldr	r2, [r7, #4]
 8018550:	f7f6 f9de 	bl	800e910 <HAL_PCD_EP_Transmit>
 8018554:	4603      	mov	r3, r0
 8018556:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8018558:	7dbb      	ldrb	r3, [r7, #22]
 801855a:	2b03      	cmp	r3, #3
 801855c:	d816      	bhi.n	801858c <USBD_LL_Transmit+0x60>
 801855e:	a201      	add	r2, pc, #4	; (adr r2, 8018564 <USBD_LL_Transmit+0x38>)
 8018560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018564:	08018575 	.word	0x08018575
 8018568:	0801857b 	.word	0x0801857b
 801856c:	08018581 	.word	0x08018581
 8018570:	08018587 	.word	0x08018587
    case HAL_OK :
      usb_status = USBD_OK;
 8018574:	2300      	movs	r3, #0
 8018576:	75fb      	strb	r3, [r7, #23]
    break;
 8018578:	e00b      	b.n	8018592 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801857a:	2303      	movs	r3, #3
 801857c:	75fb      	strb	r3, [r7, #23]
    break;
 801857e:	e008      	b.n	8018592 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018580:	2301      	movs	r3, #1
 8018582:	75fb      	strb	r3, [r7, #23]
    break;
 8018584:	e005      	b.n	8018592 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018586:	2303      	movs	r3, #3
 8018588:	75fb      	strb	r3, [r7, #23]
    break;
 801858a:	e002      	b.n	8018592 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 801858c:	2303      	movs	r3, #3
 801858e:	75fb      	strb	r3, [r7, #23]
    break;
 8018590:	bf00      	nop
  }
  return usb_status;
 8018592:	7dfb      	ldrb	r3, [r7, #23]
}
 8018594:	4618      	mov	r0, r3
 8018596:	3718      	adds	r7, #24
 8018598:	46bd      	mov	sp, r7
 801859a:	bd80      	pop	{r7, pc}

0801859c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801859c:	b580      	push	{r7, lr}
 801859e:	b086      	sub	sp, #24
 80185a0:	af00      	add	r7, sp, #0
 80185a2:	60f8      	str	r0, [r7, #12]
 80185a4:	607a      	str	r2, [r7, #4]
 80185a6:	603b      	str	r3, [r7, #0]
 80185a8:	460b      	mov	r3, r1
 80185aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80185ac:	2300      	movs	r3, #0
 80185ae:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80185b0:	2300      	movs	r3, #0
 80185b2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80185b4:	68fb      	ldr	r3, [r7, #12]
 80185b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80185ba:	7af9      	ldrb	r1, [r7, #11]
 80185bc:	683b      	ldr	r3, [r7, #0]
 80185be:	687a      	ldr	r2, [r7, #4]
 80185c0:	f7f6 f950 	bl	800e864 <HAL_PCD_EP_Receive>
 80185c4:	4603      	mov	r3, r0
 80185c6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80185c8:	7dbb      	ldrb	r3, [r7, #22]
 80185ca:	2b03      	cmp	r3, #3
 80185cc:	d816      	bhi.n	80185fc <USBD_LL_PrepareReceive+0x60>
 80185ce:	a201      	add	r2, pc, #4	; (adr r2, 80185d4 <USBD_LL_PrepareReceive+0x38>)
 80185d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185d4:	080185e5 	.word	0x080185e5
 80185d8:	080185eb 	.word	0x080185eb
 80185dc:	080185f1 	.word	0x080185f1
 80185e0:	080185f7 	.word	0x080185f7
    case HAL_OK :
      usb_status = USBD_OK;
 80185e4:	2300      	movs	r3, #0
 80185e6:	75fb      	strb	r3, [r7, #23]
    break;
 80185e8:	e00b      	b.n	8018602 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80185ea:	2303      	movs	r3, #3
 80185ec:	75fb      	strb	r3, [r7, #23]
    break;
 80185ee:	e008      	b.n	8018602 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80185f0:	2301      	movs	r3, #1
 80185f2:	75fb      	strb	r3, [r7, #23]
    break;
 80185f4:	e005      	b.n	8018602 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80185f6:	2303      	movs	r3, #3
 80185f8:	75fb      	strb	r3, [r7, #23]
    break;
 80185fa:	e002      	b.n	8018602 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80185fc:	2303      	movs	r3, #3
 80185fe:	75fb      	strb	r3, [r7, #23]
    break;
 8018600:	bf00      	nop
  }
  return usb_status;
 8018602:	7dfb      	ldrb	r3, [r7, #23]
}
 8018604:	4618      	mov	r0, r3
 8018606:	3718      	adds	r7, #24
 8018608:	46bd      	mov	sp, r7
 801860a:	bd80      	pop	{r7, pc}

0801860c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801860c:	b580      	push	{r7, lr}
 801860e:	b082      	sub	sp, #8
 8018610:	af00      	add	r7, sp, #0
 8018612:	6078      	str	r0, [r7, #4]
 8018614:	460b      	mov	r3, r1
 8018616:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801861e:	78fa      	ldrb	r2, [r7, #3]
 8018620:	4611      	mov	r1, r2
 8018622:	4618      	mov	r0, r3
 8018624:	f7f6 f95c 	bl	800e8e0 <HAL_PCD_EP_GetRxCount>
 8018628:	4603      	mov	r3, r0
}
 801862a:	4618      	mov	r0, r3
 801862c:	3708      	adds	r7, #8
 801862e:	46bd      	mov	sp, r7
 8018630:	bd80      	pop	{r7, pc}
	...

08018634 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8018634:	b580      	push	{r7, lr}
 8018636:	b082      	sub	sp, #8
 8018638:	af00      	add	r7, sp, #0
 801863a:	6078      	str	r0, [r7, #4]
 801863c:	460b      	mov	r3, r1
 801863e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8018640:	78fb      	ldrb	r3, [r7, #3]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d002      	beq.n	801864c <HAL_PCDEx_LPM_Callback+0x18>
 8018646:	2b01      	cmp	r3, #1
 8018648:	d01f      	beq.n	801868a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801864a:	e03b      	b.n	80186c4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	6a1b      	ldr	r3, [r3, #32]
 8018650:	2b00      	cmp	r3, #0
 8018652:	d007      	beq.n	8018664 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8018654:	f000 f854 	bl	8018700 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018658:	4b1c      	ldr	r3, [pc, #112]	; (80186cc <HAL_PCDEx_LPM_Callback+0x98>)
 801865a:	691b      	ldr	r3, [r3, #16]
 801865c:	4a1b      	ldr	r2, [pc, #108]	; (80186cc <HAL_PCDEx_LPM_Callback+0x98>)
 801865e:	f023 0306 	bic.w	r3, r3, #6
 8018662:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801866c:	681b      	ldr	r3, [r3, #0]
 801866e:	687a      	ldr	r2, [r7, #4]
 8018670:	6812      	ldr	r2, [r2, #0]
 8018672:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018676:	f023 0301 	bic.w	r3, r3, #1
 801867a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018682:	4618      	mov	r0, r3
 8018684:	f7fe fb08 	bl	8016c98 <USBD_LL_Resume>
    break;
 8018688:	e01c      	b.n	80186c4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	681b      	ldr	r3, [r3, #0]
 801868e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	687a      	ldr	r2, [r7, #4]
 8018696:	6812      	ldr	r2, [r2, #0]
 8018698:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801869c:	f043 0301 	orr.w	r3, r3, #1
 80186a0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80186a8:	4618      	mov	r0, r3
 80186aa:	f7fe fadf 	bl	8016c6c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	6a1b      	ldr	r3, [r3, #32]
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d005      	beq.n	80186c2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80186b6:	4b05      	ldr	r3, [pc, #20]	; (80186cc <HAL_PCDEx_LPM_Callback+0x98>)
 80186b8:	691b      	ldr	r3, [r3, #16]
 80186ba:	4a04      	ldr	r2, [pc, #16]	; (80186cc <HAL_PCDEx_LPM_Callback+0x98>)
 80186bc:	f043 0306 	orr.w	r3, r3, #6
 80186c0:	6113      	str	r3, [r2, #16]
    break;
 80186c2:	bf00      	nop
}
 80186c4:	bf00      	nop
 80186c6:	3708      	adds	r7, #8
 80186c8:	46bd      	mov	sp, r7
 80186ca:	bd80      	pop	{r7, pc}
 80186cc:	e000ed00 	.word	0xe000ed00

080186d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80186d0:	b480      	push	{r7}
 80186d2:	b083      	sub	sp, #12
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80186d8:	4b03      	ldr	r3, [pc, #12]	; (80186e8 <USBD_static_malloc+0x18>)
}
 80186da:	4618      	mov	r0, r3
 80186dc:	370c      	adds	r7, #12
 80186de:	46bd      	mov	sp, r7
 80186e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186e4:	4770      	bx	lr
 80186e6:	bf00      	nop
 80186e8:	20002ba4 	.word	0x20002ba4

080186ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80186ec:	b480      	push	{r7}
 80186ee:	b083      	sub	sp, #12
 80186f0:	af00      	add	r7, sp, #0
 80186f2:	6078      	str	r0, [r7, #4]

}
 80186f4:	bf00      	nop
 80186f6:	370c      	adds	r7, #12
 80186f8:	46bd      	mov	sp, r7
 80186fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186fe:	4770      	bx	lr

08018700 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8018700:	b580      	push	{r7, lr}
 8018702:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8018704:	f7e9 f948 	bl	8001998 <SystemClock_Config>
}
 8018708:	bf00      	nop
 801870a:	bd80      	pop	{r7, pc}

0801870c <__errno>:
 801870c:	4b01      	ldr	r3, [pc, #4]	; (8018714 <__errno+0x8>)
 801870e:	6818      	ldr	r0, [r3, #0]
 8018710:	4770      	bx	lr
 8018712:	bf00      	nop
 8018714:	200006d8 	.word	0x200006d8

08018718 <__libc_init_array>:
 8018718:	b570      	push	{r4, r5, r6, lr}
 801871a:	4d0d      	ldr	r5, [pc, #52]	; (8018750 <__libc_init_array+0x38>)
 801871c:	4c0d      	ldr	r4, [pc, #52]	; (8018754 <__libc_init_array+0x3c>)
 801871e:	1b64      	subs	r4, r4, r5
 8018720:	10a4      	asrs	r4, r4, #2
 8018722:	2600      	movs	r6, #0
 8018724:	42a6      	cmp	r6, r4
 8018726:	d109      	bne.n	801873c <__libc_init_array+0x24>
 8018728:	4d0b      	ldr	r5, [pc, #44]	; (8018758 <__libc_init_array+0x40>)
 801872a:	4c0c      	ldr	r4, [pc, #48]	; (801875c <__libc_init_array+0x44>)
 801872c:	f001 f83a 	bl	80197a4 <_init>
 8018730:	1b64      	subs	r4, r4, r5
 8018732:	10a4      	asrs	r4, r4, #2
 8018734:	2600      	movs	r6, #0
 8018736:	42a6      	cmp	r6, r4
 8018738:	d105      	bne.n	8018746 <__libc_init_array+0x2e>
 801873a:	bd70      	pop	{r4, r5, r6, pc}
 801873c:	f855 3b04 	ldr.w	r3, [r5], #4
 8018740:	4798      	blx	r3
 8018742:	3601      	adds	r6, #1
 8018744:	e7ee      	b.n	8018724 <__libc_init_array+0xc>
 8018746:	f855 3b04 	ldr.w	r3, [r5], #4
 801874a:	4798      	blx	r3
 801874c:	3601      	adds	r6, #1
 801874e:	e7f2      	b.n	8018736 <__libc_init_array+0x1e>
 8018750:	0801b928 	.word	0x0801b928
 8018754:	0801b928 	.word	0x0801b928
 8018758:	0801b928 	.word	0x0801b928
 801875c:	0801b92c 	.word	0x0801b92c

08018760 <memcpy>:
 8018760:	440a      	add	r2, r1
 8018762:	4291      	cmp	r1, r2
 8018764:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8018768:	d100      	bne.n	801876c <memcpy+0xc>
 801876a:	4770      	bx	lr
 801876c:	b510      	push	{r4, lr}
 801876e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018776:	4291      	cmp	r1, r2
 8018778:	d1f9      	bne.n	801876e <memcpy+0xe>
 801877a:	bd10      	pop	{r4, pc}

0801877c <memset>:
 801877c:	4402      	add	r2, r0
 801877e:	4603      	mov	r3, r0
 8018780:	4293      	cmp	r3, r2
 8018782:	d100      	bne.n	8018786 <memset+0xa>
 8018784:	4770      	bx	lr
 8018786:	f803 1b01 	strb.w	r1, [r3], #1
 801878a:	e7f9      	b.n	8018780 <memset+0x4>

0801878c <_free_r>:
 801878c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801878e:	2900      	cmp	r1, #0
 8018790:	d044      	beq.n	801881c <_free_r+0x90>
 8018792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018796:	9001      	str	r0, [sp, #4]
 8018798:	2b00      	cmp	r3, #0
 801879a:	f1a1 0404 	sub.w	r4, r1, #4
 801879e:	bfb8      	it	lt
 80187a0:	18e4      	addlt	r4, r4, r3
 80187a2:	f000 fc59 	bl	8019058 <__malloc_lock>
 80187a6:	4a1e      	ldr	r2, [pc, #120]	; (8018820 <_free_r+0x94>)
 80187a8:	9801      	ldr	r0, [sp, #4]
 80187aa:	6813      	ldr	r3, [r2, #0]
 80187ac:	b933      	cbnz	r3, 80187bc <_free_r+0x30>
 80187ae:	6063      	str	r3, [r4, #4]
 80187b0:	6014      	str	r4, [r2, #0]
 80187b2:	b003      	add	sp, #12
 80187b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80187b8:	f000 bc54 	b.w	8019064 <__malloc_unlock>
 80187bc:	42a3      	cmp	r3, r4
 80187be:	d908      	bls.n	80187d2 <_free_r+0x46>
 80187c0:	6825      	ldr	r5, [r4, #0]
 80187c2:	1961      	adds	r1, r4, r5
 80187c4:	428b      	cmp	r3, r1
 80187c6:	bf01      	itttt	eq
 80187c8:	6819      	ldreq	r1, [r3, #0]
 80187ca:	685b      	ldreq	r3, [r3, #4]
 80187cc:	1949      	addeq	r1, r1, r5
 80187ce:	6021      	streq	r1, [r4, #0]
 80187d0:	e7ed      	b.n	80187ae <_free_r+0x22>
 80187d2:	461a      	mov	r2, r3
 80187d4:	685b      	ldr	r3, [r3, #4]
 80187d6:	b10b      	cbz	r3, 80187dc <_free_r+0x50>
 80187d8:	42a3      	cmp	r3, r4
 80187da:	d9fa      	bls.n	80187d2 <_free_r+0x46>
 80187dc:	6811      	ldr	r1, [r2, #0]
 80187de:	1855      	adds	r5, r2, r1
 80187e0:	42a5      	cmp	r5, r4
 80187e2:	d10b      	bne.n	80187fc <_free_r+0x70>
 80187e4:	6824      	ldr	r4, [r4, #0]
 80187e6:	4421      	add	r1, r4
 80187e8:	1854      	adds	r4, r2, r1
 80187ea:	42a3      	cmp	r3, r4
 80187ec:	6011      	str	r1, [r2, #0]
 80187ee:	d1e0      	bne.n	80187b2 <_free_r+0x26>
 80187f0:	681c      	ldr	r4, [r3, #0]
 80187f2:	685b      	ldr	r3, [r3, #4]
 80187f4:	6053      	str	r3, [r2, #4]
 80187f6:	4421      	add	r1, r4
 80187f8:	6011      	str	r1, [r2, #0]
 80187fa:	e7da      	b.n	80187b2 <_free_r+0x26>
 80187fc:	d902      	bls.n	8018804 <_free_r+0x78>
 80187fe:	230c      	movs	r3, #12
 8018800:	6003      	str	r3, [r0, #0]
 8018802:	e7d6      	b.n	80187b2 <_free_r+0x26>
 8018804:	6825      	ldr	r5, [r4, #0]
 8018806:	1961      	adds	r1, r4, r5
 8018808:	428b      	cmp	r3, r1
 801880a:	bf04      	itt	eq
 801880c:	6819      	ldreq	r1, [r3, #0]
 801880e:	685b      	ldreq	r3, [r3, #4]
 8018810:	6063      	str	r3, [r4, #4]
 8018812:	bf04      	itt	eq
 8018814:	1949      	addeq	r1, r1, r5
 8018816:	6021      	streq	r1, [r4, #0]
 8018818:	6054      	str	r4, [r2, #4]
 801881a:	e7ca      	b.n	80187b2 <_free_r+0x26>
 801881c:	b003      	add	sp, #12
 801881e:	bd30      	pop	{r4, r5, pc}
 8018820:	20002dc4 	.word	0x20002dc4

08018824 <sbrk_aligned>:
 8018824:	b570      	push	{r4, r5, r6, lr}
 8018826:	4e0e      	ldr	r6, [pc, #56]	; (8018860 <sbrk_aligned+0x3c>)
 8018828:	460c      	mov	r4, r1
 801882a:	6831      	ldr	r1, [r6, #0]
 801882c:	4605      	mov	r5, r0
 801882e:	b911      	cbnz	r1, 8018836 <sbrk_aligned+0x12>
 8018830:	f000 f91a 	bl	8018a68 <_sbrk_r>
 8018834:	6030      	str	r0, [r6, #0]
 8018836:	4621      	mov	r1, r4
 8018838:	4628      	mov	r0, r5
 801883a:	f000 f915 	bl	8018a68 <_sbrk_r>
 801883e:	1c43      	adds	r3, r0, #1
 8018840:	d00a      	beq.n	8018858 <sbrk_aligned+0x34>
 8018842:	1cc4      	adds	r4, r0, #3
 8018844:	f024 0403 	bic.w	r4, r4, #3
 8018848:	42a0      	cmp	r0, r4
 801884a:	d007      	beq.n	801885c <sbrk_aligned+0x38>
 801884c:	1a21      	subs	r1, r4, r0
 801884e:	4628      	mov	r0, r5
 8018850:	f000 f90a 	bl	8018a68 <_sbrk_r>
 8018854:	3001      	adds	r0, #1
 8018856:	d101      	bne.n	801885c <sbrk_aligned+0x38>
 8018858:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801885c:	4620      	mov	r0, r4
 801885e:	bd70      	pop	{r4, r5, r6, pc}
 8018860:	20002dc8 	.word	0x20002dc8

08018864 <_malloc_r>:
 8018864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018868:	1ccd      	adds	r5, r1, #3
 801886a:	f025 0503 	bic.w	r5, r5, #3
 801886e:	3508      	adds	r5, #8
 8018870:	2d0c      	cmp	r5, #12
 8018872:	bf38      	it	cc
 8018874:	250c      	movcc	r5, #12
 8018876:	2d00      	cmp	r5, #0
 8018878:	4607      	mov	r7, r0
 801887a:	db01      	blt.n	8018880 <_malloc_r+0x1c>
 801887c:	42a9      	cmp	r1, r5
 801887e:	d905      	bls.n	801888c <_malloc_r+0x28>
 8018880:	230c      	movs	r3, #12
 8018882:	603b      	str	r3, [r7, #0]
 8018884:	2600      	movs	r6, #0
 8018886:	4630      	mov	r0, r6
 8018888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801888c:	4e2e      	ldr	r6, [pc, #184]	; (8018948 <_malloc_r+0xe4>)
 801888e:	f000 fbe3 	bl	8019058 <__malloc_lock>
 8018892:	6833      	ldr	r3, [r6, #0]
 8018894:	461c      	mov	r4, r3
 8018896:	bb34      	cbnz	r4, 80188e6 <_malloc_r+0x82>
 8018898:	4629      	mov	r1, r5
 801889a:	4638      	mov	r0, r7
 801889c:	f7ff ffc2 	bl	8018824 <sbrk_aligned>
 80188a0:	1c43      	adds	r3, r0, #1
 80188a2:	4604      	mov	r4, r0
 80188a4:	d14d      	bne.n	8018942 <_malloc_r+0xde>
 80188a6:	6834      	ldr	r4, [r6, #0]
 80188a8:	4626      	mov	r6, r4
 80188aa:	2e00      	cmp	r6, #0
 80188ac:	d140      	bne.n	8018930 <_malloc_r+0xcc>
 80188ae:	6823      	ldr	r3, [r4, #0]
 80188b0:	4631      	mov	r1, r6
 80188b2:	4638      	mov	r0, r7
 80188b4:	eb04 0803 	add.w	r8, r4, r3
 80188b8:	f000 f8d6 	bl	8018a68 <_sbrk_r>
 80188bc:	4580      	cmp	r8, r0
 80188be:	d13a      	bne.n	8018936 <_malloc_r+0xd2>
 80188c0:	6821      	ldr	r1, [r4, #0]
 80188c2:	3503      	adds	r5, #3
 80188c4:	1a6d      	subs	r5, r5, r1
 80188c6:	f025 0503 	bic.w	r5, r5, #3
 80188ca:	3508      	adds	r5, #8
 80188cc:	2d0c      	cmp	r5, #12
 80188ce:	bf38      	it	cc
 80188d0:	250c      	movcc	r5, #12
 80188d2:	4629      	mov	r1, r5
 80188d4:	4638      	mov	r0, r7
 80188d6:	f7ff ffa5 	bl	8018824 <sbrk_aligned>
 80188da:	3001      	adds	r0, #1
 80188dc:	d02b      	beq.n	8018936 <_malloc_r+0xd2>
 80188de:	6823      	ldr	r3, [r4, #0]
 80188e0:	442b      	add	r3, r5
 80188e2:	6023      	str	r3, [r4, #0]
 80188e4:	e00e      	b.n	8018904 <_malloc_r+0xa0>
 80188e6:	6822      	ldr	r2, [r4, #0]
 80188e8:	1b52      	subs	r2, r2, r5
 80188ea:	d41e      	bmi.n	801892a <_malloc_r+0xc6>
 80188ec:	2a0b      	cmp	r2, #11
 80188ee:	d916      	bls.n	801891e <_malloc_r+0xba>
 80188f0:	1961      	adds	r1, r4, r5
 80188f2:	42a3      	cmp	r3, r4
 80188f4:	6025      	str	r5, [r4, #0]
 80188f6:	bf18      	it	ne
 80188f8:	6059      	strne	r1, [r3, #4]
 80188fa:	6863      	ldr	r3, [r4, #4]
 80188fc:	bf08      	it	eq
 80188fe:	6031      	streq	r1, [r6, #0]
 8018900:	5162      	str	r2, [r4, r5]
 8018902:	604b      	str	r3, [r1, #4]
 8018904:	4638      	mov	r0, r7
 8018906:	f104 060b 	add.w	r6, r4, #11
 801890a:	f000 fbab 	bl	8019064 <__malloc_unlock>
 801890e:	f026 0607 	bic.w	r6, r6, #7
 8018912:	1d23      	adds	r3, r4, #4
 8018914:	1af2      	subs	r2, r6, r3
 8018916:	d0b6      	beq.n	8018886 <_malloc_r+0x22>
 8018918:	1b9b      	subs	r3, r3, r6
 801891a:	50a3      	str	r3, [r4, r2]
 801891c:	e7b3      	b.n	8018886 <_malloc_r+0x22>
 801891e:	6862      	ldr	r2, [r4, #4]
 8018920:	42a3      	cmp	r3, r4
 8018922:	bf0c      	ite	eq
 8018924:	6032      	streq	r2, [r6, #0]
 8018926:	605a      	strne	r2, [r3, #4]
 8018928:	e7ec      	b.n	8018904 <_malloc_r+0xa0>
 801892a:	4623      	mov	r3, r4
 801892c:	6864      	ldr	r4, [r4, #4]
 801892e:	e7b2      	b.n	8018896 <_malloc_r+0x32>
 8018930:	4634      	mov	r4, r6
 8018932:	6876      	ldr	r6, [r6, #4]
 8018934:	e7b9      	b.n	80188aa <_malloc_r+0x46>
 8018936:	230c      	movs	r3, #12
 8018938:	603b      	str	r3, [r7, #0]
 801893a:	4638      	mov	r0, r7
 801893c:	f000 fb92 	bl	8019064 <__malloc_unlock>
 8018940:	e7a1      	b.n	8018886 <_malloc_r+0x22>
 8018942:	6025      	str	r5, [r4, #0]
 8018944:	e7de      	b.n	8018904 <_malloc_r+0xa0>
 8018946:	bf00      	nop
 8018948:	20002dc4 	.word	0x20002dc4

0801894c <iprintf>:
 801894c:	b40f      	push	{r0, r1, r2, r3}
 801894e:	4b0a      	ldr	r3, [pc, #40]	; (8018978 <iprintf+0x2c>)
 8018950:	b513      	push	{r0, r1, r4, lr}
 8018952:	681c      	ldr	r4, [r3, #0]
 8018954:	b124      	cbz	r4, 8018960 <iprintf+0x14>
 8018956:	69a3      	ldr	r3, [r4, #24]
 8018958:	b913      	cbnz	r3, 8018960 <iprintf+0x14>
 801895a:	4620      	mov	r0, r4
 801895c:	f000 fa76 	bl	8018e4c <__sinit>
 8018960:	ab05      	add	r3, sp, #20
 8018962:	9a04      	ldr	r2, [sp, #16]
 8018964:	68a1      	ldr	r1, [r4, #8]
 8018966:	9301      	str	r3, [sp, #4]
 8018968:	4620      	mov	r0, r4
 801896a:	f000 fbab 	bl	80190c4 <_vfiprintf_r>
 801896e:	b002      	add	sp, #8
 8018970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018974:	b004      	add	sp, #16
 8018976:	4770      	bx	lr
 8018978:	200006d8 	.word	0x200006d8

0801897c <_puts_r>:
 801897c:	b570      	push	{r4, r5, r6, lr}
 801897e:	460e      	mov	r6, r1
 8018980:	4605      	mov	r5, r0
 8018982:	b118      	cbz	r0, 801898c <_puts_r+0x10>
 8018984:	6983      	ldr	r3, [r0, #24]
 8018986:	b90b      	cbnz	r3, 801898c <_puts_r+0x10>
 8018988:	f000 fa60 	bl	8018e4c <__sinit>
 801898c:	69ab      	ldr	r3, [r5, #24]
 801898e:	68ac      	ldr	r4, [r5, #8]
 8018990:	b913      	cbnz	r3, 8018998 <_puts_r+0x1c>
 8018992:	4628      	mov	r0, r5
 8018994:	f000 fa5a 	bl	8018e4c <__sinit>
 8018998:	4b2c      	ldr	r3, [pc, #176]	; (8018a4c <_puts_r+0xd0>)
 801899a:	429c      	cmp	r4, r3
 801899c:	d120      	bne.n	80189e0 <_puts_r+0x64>
 801899e:	686c      	ldr	r4, [r5, #4]
 80189a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80189a2:	07db      	lsls	r3, r3, #31
 80189a4:	d405      	bmi.n	80189b2 <_puts_r+0x36>
 80189a6:	89a3      	ldrh	r3, [r4, #12]
 80189a8:	0598      	lsls	r0, r3, #22
 80189aa:	d402      	bmi.n	80189b2 <_puts_r+0x36>
 80189ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80189ae:	f000 faeb 	bl	8018f88 <__retarget_lock_acquire_recursive>
 80189b2:	89a3      	ldrh	r3, [r4, #12]
 80189b4:	0719      	lsls	r1, r3, #28
 80189b6:	d51d      	bpl.n	80189f4 <_puts_r+0x78>
 80189b8:	6923      	ldr	r3, [r4, #16]
 80189ba:	b1db      	cbz	r3, 80189f4 <_puts_r+0x78>
 80189bc:	3e01      	subs	r6, #1
 80189be:	68a3      	ldr	r3, [r4, #8]
 80189c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80189c4:	3b01      	subs	r3, #1
 80189c6:	60a3      	str	r3, [r4, #8]
 80189c8:	bb39      	cbnz	r1, 8018a1a <_puts_r+0x9e>
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	da38      	bge.n	8018a40 <_puts_r+0xc4>
 80189ce:	4622      	mov	r2, r4
 80189d0:	210a      	movs	r1, #10
 80189d2:	4628      	mov	r0, r5
 80189d4:	f000 f860 	bl	8018a98 <__swbuf_r>
 80189d8:	3001      	adds	r0, #1
 80189da:	d011      	beq.n	8018a00 <_puts_r+0x84>
 80189dc:	250a      	movs	r5, #10
 80189de:	e011      	b.n	8018a04 <_puts_r+0x88>
 80189e0:	4b1b      	ldr	r3, [pc, #108]	; (8018a50 <_puts_r+0xd4>)
 80189e2:	429c      	cmp	r4, r3
 80189e4:	d101      	bne.n	80189ea <_puts_r+0x6e>
 80189e6:	68ac      	ldr	r4, [r5, #8]
 80189e8:	e7da      	b.n	80189a0 <_puts_r+0x24>
 80189ea:	4b1a      	ldr	r3, [pc, #104]	; (8018a54 <_puts_r+0xd8>)
 80189ec:	429c      	cmp	r4, r3
 80189ee:	bf08      	it	eq
 80189f0:	68ec      	ldreq	r4, [r5, #12]
 80189f2:	e7d5      	b.n	80189a0 <_puts_r+0x24>
 80189f4:	4621      	mov	r1, r4
 80189f6:	4628      	mov	r0, r5
 80189f8:	f000 f8a0 	bl	8018b3c <__swsetup_r>
 80189fc:	2800      	cmp	r0, #0
 80189fe:	d0dd      	beq.n	80189bc <_puts_r+0x40>
 8018a00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8018a04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018a06:	07da      	lsls	r2, r3, #31
 8018a08:	d405      	bmi.n	8018a16 <_puts_r+0x9a>
 8018a0a:	89a3      	ldrh	r3, [r4, #12]
 8018a0c:	059b      	lsls	r3, r3, #22
 8018a0e:	d402      	bmi.n	8018a16 <_puts_r+0x9a>
 8018a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018a12:	f000 faba 	bl	8018f8a <__retarget_lock_release_recursive>
 8018a16:	4628      	mov	r0, r5
 8018a18:	bd70      	pop	{r4, r5, r6, pc}
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	da04      	bge.n	8018a28 <_puts_r+0xac>
 8018a1e:	69a2      	ldr	r2, [r4, #24]
 8018a20:	429a      	cmp	r2, r3
 8018a22:	dc06      	bgt.n	8018a32 <_puts_r+0xb6>
 8018a24:	290a      	cmp	r1, #10
 8018a26:	d004      	beq.n	8018a32 <_puts_r+0xb6>
 8018a28:	6823      	ldr	r3, [r4, #0]
 8018a2a:	1c5a      	adds	r2, r3, #1
 8018a2c:	6022      	str	r2, [r4, #0]
 8018a2e:	7019      	strb	r1, [r3, #0]
 8018a30:	e7c5      	b.n	80189be <_puts_r+0x42>
 8018a32:	4622      	mov	r2, r4
 8018a34:	4628      	mov	r0, r5
 8018a36:	f000 f82f 	bl	8018a98 <__swbuf_r>
 8018a3a:	3001      	adds	r0, #1
 8018a3c:	d1bf      	bne.n	80189be <_puts_r+0x42>
 8018a3e:	e7df      	b.n	8018a00 <_puts_r+0x84>
 8018a40:	6823      	ldr	r3, [r4, #0]
 8018a42:	250a      	movs	r5, #10
 8018a44:	1c5a      	adds	r2, r3, #1
 8018a46:	6022      	str	r2, [r4, #0]
 8018a48:	701d      	strb	r5, [r3, #0]
 8018a4a:	e7db      	b.n	8018a04 <_puts_r+0x88>
 8018a4c:	0801b8ac 	.word	0x0801b8ac
 8018a50:	0801b8cc 	.word	0x0801b8cc
 8018a54:	0801b88c 	.word	0x0801b88c

08018a58 <puts>:
 8018a58:	4b02      	ldr	r3, [pc, #8]	; (8018a64 <puts+0xc>)
 8018a5a:	4601      	mov	r1, r0
 8018a5c:	6818      	ldr	r0, [r3, #0]
 8018a5e:	f7ff bf8d 	b.w	801897c <_puts_r>
 8018a62:	bf00      	nop
 8018a64:	200006d8 	.word	0x200006d8

08018a68 <_sbrk_r>:
 8018a68:	b538      	push	{r3, r4, r5, lr}
 8018a6a:	4d06      	ldr	r5, [pc, #24]	; (8018a84 <_sbrk_r+0x1c>)
 8018a6c:	2300      	movs	r3, #0
 8018a6e:	4604      	mov	r4, r0
 8018a70:	4608      	mov	r0, r1
 8018a72:	602b      	str	r3, [r5, #0]
 8018a74:	f7e9 fca8 	bl	80023c8 <_sbrk>
 8018a78:	1c43      	adds	r3, r0, #1
 8018a7a:	d102      	bne.n	8018a82 <_sbrk_r+0x1a>
 8018a7c:	682b      	ldr	r3, [r5, #0]
 8018a7e:	b103      	cbz	r3, 8018a82 <_sbrk_r+0x1a>
 8018a80:	6023      	str	r3, [r4, #0]
 8018a82:	bd38      	pop	{r3, r4, r5, pc}
 8018a84:	20002dd0 	.word	0x20002dd0

08018a88 <strcpy>:
 8018a88:	4603      	mov	r3, r0
 8018a8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018a8e:	f803 2b01 	strb.w	r2, [r3], #1
 8018a92:	2a00      	cmp	r2, #0
 8018a94:	d1f9      	bne.n	8018a8a <strcpy+0x2>
 8018a96:	4770      	bx	lr

08018a98 <__swbuf_r>:
 8018a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a9a:	460e      	mov	r6, r1
 8018a9c:	4614      	mov	r4, r2
 8018a9e:	4605      	mov	r5, r0
 8018aa0:	b118      	cbz	r0, 8018aaa <__swbuf_r+0x12>
 8018aa2:	6983      	ldr	r3, [r0, #24]
 8018aa4:	b90b      	cbnz	r3, 8018aaa <__swbuf_r+0x12>
 8018aa6:	f000 f9d1 	bl	8018e4c <__sinit>
 8018aaa:	4b21      	ldr	r3, [pc, #132]	; (8018b30 <__swbuf_r+0x98>)
 8018aac:	429c      	cmp	r4, r3
 8018aae:	d12b      	bne.n	8018b08 <__swbuf_r+0x70>
 8018ab0:	686c      	ldr	r4, [r5, #4]
 8018ab2:	69a3      	ldr	r3, [r4, #24]
 8018ab4:	60a3      	str	r3, [r4, #8]
 8018ab6:	89a3      	ldrh	r3, [r4, #12]
 8018ab8:	071a      	lsls	r2, r3, #28
 8018aba:	d52f      	bpl.n	8018b1c <__swbuf_r+0x84>
 8018abc:	6923      	ldr	r3, [r4, #16]
 8018abe:	b36b      	cbz	r3, 8018b1c <__swbuf_r+0x84>
 8018ac0:	6923      	ldr	r3, [r4, #16]
 8018ac2:	6820      	ldr	r0, [r4, #0]
 8018ac4:	1ac0      	subs	r0, r0, r3
 8018ac6:	6963      	ldr	r3, [r4, #20]
 8018ac8:	b2f6      	uxtb	r6, r6
 8018aca:	4283      	cmp	r3, r0
 8018acc:	4637      	mov	r7, r6
 8018ace:	dc04      	bgt.n	8018ada <__swbuf_r+0x42>
 8018ad0:	4621      	mov	r1, r4
 8018ad2:	4628      	mov	r0, r5
 8018ad4:	f000 f926 	bl	8018d24 <_fflush_r>
 8018ad8:	bb30      	cbnz	r0, 8018b28 <__swbuf_r+0x90>
 8018ada:	68a3      	ldr	r3, [r4, #8]
 8018adc:	3b01      	subs	r3, #1
 8018ade:	60a3      	str	r3, [r4, #8]
 8018ae0:	6823      	ldr	r3, [r4, #0]
 8018ae2:	1c5a      	adds	r2, r3, #1
 8018ae4:	6022      	str	r2, [r4, #0]
 8018ae6:	701e      	strb	r6, [r3, #0]
 8018ae8:	6963      	ldr	r3, [r4, #20]
 8018aea:	3001      	adds	r0, #1
 8018aec:	4283      	cmp	r3, r0
 8018aee:	d004      	beq.n	8018afa <__swbuf_r+0x62>
 8018af0:	89a3      	ldrh	r3, [r4, #12]
 8018af2:	07db      	lsls	r3, r3, #31
 8018af4:	d506      	bpl.n	8018b04 <__swbuf_r+0x6c>
 8018af6:	2e0a      	cmp	r6, #10
 8018af8:	d104      	bne.n	8018b04 <__swbuf_r+0x6c>
 8018afa:	4621      	mov	r1, r4
 8018afc:	4628      	mov	r0, r5
 8018afe:	f000 f911 	bl	8018d24 <_fflush_r>
 8018b02:	b988      	cbnz	r0, 8018b28 <__swbuf_r+0x90>
 8018b04:	4638      	mov	r0, r7
 8018b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b08:	4b0a      	ldr	r3, [pc, #40]	; (8018b34 <__swbuf_r+0x9c>)
 8018b0a:	429c      	cmp	r4, r3
 8018b0c:	d101      	bne.n	8018b12 <__swbuf_r+0x7a>
 8018b0e:	68ac      	ldr	r4, [r5, #8]
 8018b10:	e7cf      	b.n	8018ab2 <__swbuf_r+0x1a>
 8018b12:	4b09      	ldr	r3, [pc, #36]	; (8018b38 <__swbuf_r+0xa0>)
 8018b14:	429c      	cmp	r4, r3
 8018b16:	bf08      	it	eq
 8018b18:	68ec      	ldreq	r4, [r5, #12]
 8018b1a:	e7ca      	b.n	8018ab2 <__swbuf_r+0x1a>
 8018b1c:	4621      	mov	r1, r4
 8018b1e:	4628      	mov	r0, r5
 8018b20:	f000 f80c 	bl	8018b3c <__swsetup_r>
 8018b24:	2800      	cmp	r0, #0
 8018b26:	d0cb      	beq.n	8018ac0 <__swbuf_r+0x28>
 8018b28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018b2c:	e7ea      	b.n	8018b04 <__swbuf_r+0x6c>
 8018b2e:	bf00      	nop
 8018b30:	0801b8ac 	.word	0x0801b8ac
 8018b34:	0801b8cc 	.word	0x0801b8cc
 8018b38:	0801b88c 	.word	0x0801b88c

08018b3c <__swsetup_r>:
 8018b3c:	4b32      	ldr	r3, [pc, #200]	; (8018c08 <__swsetup_r+0xcc>)
 8018b3e:	b570      	push	{r4, r5, r6, lr}
 8018b40:	681d      	ldr	r5, [r3, #0]
 8018b42:	4606      	mov	r6, r0
 8018b44:	460c      	mov	r4, r1
 8018b46:	b125      	cbz	r5, 8018b52 <__swsetup_r+0x16>
 8018b48:	69ab      	ldr	r3, [r5, #24]
 8018b4a:	b913      	cbnz	r3, 8018b52 <__swsetup_r+0x16>
 8018b4c:	4628      	mov	r0, r5
 8018b4e:	f000 f97d 	bl	8018e4c <__sinit>
 8018b52:	4b2e      	ldr	r3, [pc, #184]	; (8018c0c <__swsetup_r+0xd0>)
 8018b54:	429c      	cmp	r4, r3
 8018b56:	d10f      	bne.n	8018b78 <__swsetup_r+0x3c>
 8018b58:	686c      	ldr	r4, [r5, #4]
 8018b5a:	89a3      	ldrh	r3, [r4, #12]
 8018b5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018b60:	0719      	lsls	r1, r3, #28
 8018b62:	d42c      	bmi.n	8018bbe <__swsetup_r+0x82>
 8018b64:	06dd      	lsls	r5, r3, #27
 8018b66:	d411      	bmi.n	8018b8c <__swsetup_r+0x50>
 8018b68:	2309      	movs	r3, #9
 8018b6a:	6033      	str	r3, [r6, #0]
 8018b6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018b70:	81a3      	strh	r3, [r4, #12]
 8018b72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018b76:	e03e      	b.n	8018bf6 <__swsetup_r+0xba>
 8018b78:	4b25      	ldr	r3, [pc, #148]	; (8018c10 <__swsetup_r+0xd4>)
 8018b7a:	429c      	cmp	r4, r3
 8018b7c:	d101      	bne.n	8018b82 <__swsetup_r+0x46>
 8018b7e:	68ac      	ldr	r4, [r5, #8]
 8018b80:	e7eb      	b.n	8018b5a <__swsetup_r+0x1e>
 8018b82:	4b24      	ldr	r3, [pc, #144]	; (8018c14 <__swsetup_r+0xd8>)
 8018b84:	429c      	cmp	r4, r3
 8018b86:	bf08      	it	eq
 8018b88:	68ec      	ldreq	r4, [r5, #12]
 8018b8a:	e7e6      	b.n	8018b5a <__swsetup_r+0x1e>
 8018b8c:	0758      	lsls	r0, r3, #29
 8018b8e:	d512      	bpl.n	8018bb6 <__swsetup_r+0x7a>
 8018b90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018b92:	b141      	cbz	r1, 8018ba6 <__swsetup_r+0x6a>
 8018b94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018b98:	4299      	cmp	r1, r3
 8018b9a:	d002      	beq.n	8018ba2 <__swsetup_r+0x66>
 8018b9c:	4630      	mov	r0, r6
 8018b9e:	f7ff fdf5 	bl	801878c <_free_r>
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	6363      	str	r3, [r4, #52]	; 0x34
 8018ba6:	89a3      	ldrh	r3, [r4, #12]
 8018ba8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018bac:	81a3      	strh	r3, [r4, #12]
 8018bae:	2300      	movs	r3, #0
 8018bb0:	6063      	str	r3, [r4, #4]
 8018bb2:	6923      	ldr	r3, [r4, #16]
 8018bb4:	6023      	str	r3, [r4, #0]
 8018bb6:	89a3      	ldrh	r3, [r4, #12]
 8018bb8:	f043 0308 	orr.w	r3, r3, #8
 8018bbc:	81a3      	strh	r3, [r4, #12]
 8018bbe:	6923      	ldr	r3, [r4, #16]
 8018bc0:	b94b      	cbnz	r3, 8018bd6 <__swsetup_r+0x9a>
 8018bc2:	89a3      	ldrh	r3, [r4, #12]
 8018bc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018bcc:	d003      	beq.n	8018bd6 <__swsetup_r+0x9a>
 8018bce:	4621      	mov	r1, r4
 8018bd0:	4630      	mov	r0, r6
 8018bd2:	f000 fa01 	bl	8018fd8 <__smakebuf_r>
 8018bd6:	89a0      	ldrh	r0, [r4, #12]
 8018bd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018bdc:	f010 0301 	ands.w	r3, r0, #1
 8018be0:	d00a      	beq.n	8018bf8 <__swsetup_r+0xbc>
 8018be2:	2300      	movs	r3, #0
 8018be4:	60a3      	str	r3, [r4, #8]
 8018be6:	6963      	ldr	r3, [r4, #20]
 8018be8:	425b      	negs	r3, r3
 8018bea:	61a3      	str	r3, [r4, #24]
 8018bec:	6923      	ldr	r3, [r4, #16]
 8018bee:	b943      	cbnz	r3, 8018c02 <__swsetup_r+0xc6>
 8018bf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018bf4:	d1ba      	bne.n	8018b6c <__swsetup_r+0x30>
 8018bf6:	bd70      	pop	{r4, r5, r6, pc}
 8018bf8:	0781      	lsls	r1, r0, #30
 8018bfa:	bf58      	it	pl
 8018bfc:	6963      	ldrpl	r3, [r4, #20]
 8018bfe:	60a3      	str	r3, [r4, #8]
 8018c00:	e7f4      	b.n	8018bec <__swsetup_r+0xb0>
 8018c02:	2000      	movs	r0, #0
 8018c04:	e7f7      	b.n	8018bf6 <__swsetup_r+0xba>
 8018c06:	bf00      	nop
 8018c08:	200006d8 	.word	0x200006d8
 8018c0c:	0801b8ac 	.word	0x0801b8ac
 8018c10:	0801b8cc 	.word	0x0801b8cc
 8018c14:	0801b88c 	.word	0x0801b88c

08018c18 <__sflush_r>:
 8018c18:	898a      	ldrh	r2, [r1, #12]
 8018c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c1e:	4605      	mov	r5, r0
 8018c20:	0710      	lsls	r0, r2, #28
 8018c22:	460c      	mov	r4, r1
 8018c24:	d458      	bmi.n	8018cd8 <__sflush_r+0xc0>
 8018c26:	684b      	ldr	r3, [r1, #4]
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	dc05      	bgt.n	8018c38 <__sflush_r+0x20>
 8018c2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	dc02      	bgt.n	8018c38 <__sflush_r+0x20>
 8018c32:	2000      	movs	r0, #0
 8018c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018c3a:	2e00      	cmp	r6, #0
 8018c3c:	d0f9      	beq.n	8018c32 <__sflush_r+0x1a>
 8018c3e:	2300      	movs	r3, #0
 8018c40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018c44:	682f      	ldr	r7, [r5, #0]
 8018c46:	602b      	str	r3, [r5, #0]
 8018c48:	d032      	beq.n	8018cb0 <__sflush_r+0x98>
 8018c4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018c4c:	89a3      	ldrh	r3, [r4, #12]
 8018c4e:	075a      	lsls	r2, r3, #29
 8018c50:	d505      	bpl.n	8018c5e <__sflush_r+0x46>
 8018c52:	6863      	ldr	r3, [r4, #4]
 8018c54:	1ac0      	subs	r0, r0, r3
 8018c56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018c58:	b10b      	cbz	r3, 8018c5e <__sflush_r+0x46>
 8018c5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018c5c:	1ac0      	subs	r0, r0, r3
 8018c5e:	2300      	movs	r3, #0
 8018c60:	4602      	mov	r2, r0
 8018c62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018c64:	6a21      	ldr	r1, [r4, #32]
 8018c66:	4628      	mov	r0, r5
 8018c68:	47b0      	blx	r6
 8018c6a:	1c43      	adds	r3, r0, #1
 8018c6c:	89a3      	ldrh	r3, [r4, #12]
 8018c6e:	d106      	bne.n	8018c7e <__sflush_r+0x66>
 8018c70:	6829      	ldr	r1, [r5, #0]
 8018c72:	291d      	cmp	r1, #29
 8018c74:	d82c      	bhi.n	8018cd0 <__sflush_r+0xb8>
 8018c76:	4a2a      	ldr	r2, [pc, #168]	; (8018d20 <__sflush_r+0x108>)
 8018c78:	40ca      	lsrs	r2, r1
 8018c7a:	07d6      	lsls	r6, r2, #31
 8018c7c:	d528      	bpl.n	8018cd0 <__sflush_r+0xb8>
 8018c7e:	2200      	movs	r2, #0
 8018c80:	6062      	str	r2, [r4, #4]
 8018c82:	04d9      	lsls	r1, r3, #19
 8018c84:	6922      	ldr	r2, [r4, #16]
 8018c86:	6022      	str	r2, [r4, #0]
 8018c88:	d504      	bpl.n	8018c94 <__sflush_r+0x7c>
 8018c8a:	1c42      	adds	r2, r0, #1
 8018c8c:	d101      	bne.n	8018c92 <__sflush_r+0x7a>
 8018c8e:	682b      	ldr	r3, [r5, #0]
 8018c90:	b903      	cbnz	r3, 8018c94 <__sflush_r+0x7c>
 8018c92:	6560      	str	r0, [r4, #84]	; 0x54
 8018c94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018c96:	602f      	str	r7, [r5, #0]
 8018c98:	2900      	cmp	r1, #0
 8018c9a:	d0ca      	beq.n	8018c32 <__sflush_r+0x1a>
 8018c9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018ca0:	4299      	cmp	r1, r3
 8018ca2:	d002      	beq.n	8018caa <__sflush_r+0x92>
 8018ca4:	4628      	mov	r0, r5
 8018ca6:	f7ff fd71 	bl	801878c <_free_r>
 8018caa:	2000      	movs	r0, #0
 8018cac:	6360      	str	r0, [r4, #52]	; 0x34
 8018cae:	e7c1      	b.n	8018c34 <__sflush_r+0x1c>
 8018cb0:	6a21      	ldr	r1, [r4, #32]
 8018cb2:	2301      	movs	r3, #1
 8018cb4:	4628      	mov	r0, r5
 8018cb6:	47b0      	blx	r6
 8018cb8:	1c41      	adds	r1, r0, #1
 8018cba:	d1c7      	bne.n	8018c4c <__sflush_r+0x34>
 8018cbc:	682b      	ldr	r3, [r5, #0]
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d0c4      	beq.n	8018c4c <__sflush_r+0x34>
 8018cc2:	2b1d      	cmp	r3, #29
 8018cc4:	d001      	beq.n	8018cca <__sflush_r+0xb2>
 8018cc6:	2b16      	cmp	r3, #22
 8018cc8:	d101      	bne.n	8018cce <__sflush_r+0xb6>
 8018cca:	602f      	str	r7, [r5, #0]
 8018ccc:	e7b1      	b.n	8018c32 <__sflush_r+0x1a>
 8018cce:	89a3      	ldrh	r3, [r4, #12]
 8018cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018cd4:	81a3      	strh	r3, [r4, #12]
 8018cd6:	e7ad      	b.n	8018c34 <__sflush_r+0x1c>
 8018cd8:	690f      	ldr	r7, [r1, #16]
 8018cda:	2f00      	cmp	r7, #0
 8018cdc:	d0a9      	beq.n	8018c32 <__sflush_r+0x1a>
 8018cde:	0793      	lsls	r3, r2, #30
 8018ce0:	680e      	ldr	r6, [r1, #0]
 8018ce2:	bf08      	it	eq
 8018ce4:	694b      	ldreq	r3, [r1, #20]
 8018ce6:	600f      	str	r7, [r1, #0]
 8018ce8:	bf18      	it	ne
 8018cea:	2300      	movne	r3, #0
 8018cec:	eba6 0807 	sub.w	r8, r6, r7
 8018cf0:	608b      	str	r3, [r1, #8]
 8018cf2:	f1b8 0f00 	cmp.w	r8, #0
 8018cf6:	dd9c      	ble.n	8018c32 <__sflush_r+0x1a>
 8018cf8:	6a21      	ldr	r1, [r4, #32]
 8018cfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018cfc:	4643      	mov	r3, r8
 8018cfe:	463a      	mov	r2, r7
 8018d00:	4628      	mov	r0, r5
 8018d02:	47b0      	blx	r6
 8018d04:	2800      	cmp	r0, #0
 8018d06:	dc06      	bgt.n	8018d16 <__sflush_r+0xfe>
 8018d08:	89a3      	ldrh	r3, [r4, #12]
 8018d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d0e:	81a3      	strh	r3, [r4, #12]
 8018d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018d14:	e78e      	b.n	8018c34 <__sflush_r+0x1c>
 8018d16:	4407      	add	r7, r0
 8018d18:	eba8 0800 	sub.w	r8, r8, r0
 8018d1c:	e7e9      	b.n	8018cf2 <__sflush_r+0xda>
 8018d1e:	bf00      	nop
 8018d20:	20400001 	.word	0x20400001

08018d24 <_fflush_r>:
 8018d24:	b538      	push	{r3, r4, r5, lr}
 8018d26:	690b      	ldr	r3, [r1, #16]
 8018d28:	4605      	mov	r5, r0
 8018d2a:	460c      	mov	r4, r1
 8018d2c:	b913      	cbnz	r3, 8018d34 <_fflush_r+0x10>
 8018d2e:	2500      	movs	r5, #0
 8018d30:	4628      	mov	r0, r5
 8018d32:	bd38      	pop	{r3, r4, r5, pc}
 8018d34:	b118      	cbz	r0, 8018d3e <_fflush_r+0x1a>
 8018d36:	6983      	ldr	r3, [r0, #24]
 8018d38:	b90b      	cbnz	r3, 8018d3e <_fflush_r+0x1a>
 8018d3a:	f000 f887 	bl	8018e4c <__sinit>
 8018d3e:	4b14      	ldr	r3, [pc, #80]	; (8018d90 <_fflush_r+0x6c>)
 8018d40:	429c      	cmp	r4, r3
 8018d42:	d11b      	bne.n	8018d7c <_fflush_r+0x58>
 8018d44:	686c      	ldr	r4, [r5, #4]
 8018d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d0ef      	beq.n	8018d2e <_fflush_r+0xa>
 8018d4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018d50:	07d0      	lsls	r0, r2, #31
 8018d52:	d404      	bmi.n	8018d5e <_fflush_r+0x3a>
 8018d54:	0599      	lsls	r1, r3, #22
 8018d56:	d402      	bmi.n	8018d5e <_fflush_r+0x3a>
 8018d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018d5a:	f000 f915 	bl	8018f88 <__retarget_lock_acquire_recursive>
 8018d5e:	4628      	mov	r0, r5
 8018d60:	4621      	mov	r1, r4
 8018d62:	f7ff ff59 	bl	8018c18 <__sflush_r>
 8018d66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018d68:	07da      	lsls	r2, r3, #31
 8018d6a:	4605      	mov	r5, r0
 8018d6c:	d4e0      	bmi.n	8018d30 <_fflush_r+0xc>
 8018d6e:	89a3      	ldrh	r3, [r4, #12]
 8018d70:	059b      	lsls	r3, r3, #22
 8018d72:	d4dd      	bmi.n	8018d30 <_fflush_r+0xc>
 8018d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018d76:	f000 f908 	bl	8018f8a <__retarget_lock_release_recursive>
 8018d7a:	e7d9      	b.n	8018d30 <_fflush_r+0xc>
 8018d7c:	4b05      	ldr	r3, [pc, #20]	; (8018d94 <_fflush_r+0x70>)
 8018d7e:	429c      	cmp	r4, r3
 8018d80:	d101      	bne.n	8018d86 <_fflush_r+0x62>
 8018d82:	68ac      	ldr	r4, [r5, #8]
 8018d84:	e7df      	b.n	8018d46 <_fflush_r+0x22>
 8018d86:	4b04      	ldr	r3, [pc, #16]	; (8018d98 <_fflush_r+0x74>)
 8018d88:	429c      	cmp	r4, r3
 8018d8a:	bf08      	it	eq
 8018d8c:	68ec      	ldreq	r4, [r5, #12]
 8018d8e:	e7da      	b.n	8018d46 <_fflush_r+0x22>
 8018d90:	0801b8ac 	.word	0x0801b8ac
 8018d94:	0801b8cc 	.word	0x0801b8cc
 8018d98:	0801b88c 	.word	0x0801b88c

08018d9c <std>:
 8018d9c:	2300      	movs	r3, #0
 8018d9e:	b510      	push	{r4, lr}
 8018da0:	4604      	mov	r4, r0
 8018da2:	e9c0 3300 	strd	r3, r3, [r0]
 8018da6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018daa:	6083      	str	r3, [r0, #8]
 8018dac:	8181      	strh	r1, [r0, #12]
 8018dae:	6643      	str	r3, [r0, #100]	; 0x64
 8018db0:	81c2      	strh	r2, [r0, #14]
 8018db2:	6183      	str	r3, [r0, #24]
 8018db4:	4619      	mov	r1, r3
 8018db6:	2208      	movs	r2, #8
 8018db8:	305c      	adds	r0, #92	; 0x5c
 8018dba:	f7ff fcdf 	bl	801877c <memset>
 8018dbe:	4b05      	ldr	r3, [pc, #20]	; (8018dd4 <std+0x38>)
 8018dc0:	6263      	str	r3, [r4, #36]	; 0x24
 8018dc2:	4b05      	ldr	r3, [pc, #20]	; (8018dd8 <std+0x3c>)
 8018dc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8018dc6:	4b05      	ldr	r3, [pc, #20]	; (8018ddc <std+0x40>)
 8018dc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018dca:	4b05      	ldr	r3, [pc, #20]	; (8018de0 <std+0x44>)
 8018dcc:	6224      	str	r4, [r4, #32]
 8018dce:	6323      	str	r3, [r4, #48]	; 0x30
 8018dd0:	bd10      	pop	{r4, pc}
 8018dd2:	bf00      	nop
 8018dd4:	0801964d 	.word	0x0801964d
 8018dd8:	0801966f 	.word	0x0801966f
 8018ddc:	080196a7 	.word	0x080196a7
 8018de0:	080196cb 	.word	0x080196cb

08018de4 <_cleanup_r>:
 8018de4:	4901      	ldr	r1, [pc, #4]	; (8018dec <_cleanup_r+0x8>)
 8018de6:	f000 b8af 	b.w	8018f48 <_fwalk_reent>
 8018dea:	bf00      	nop
 8018dec:	08018d25 	.word	0x08018d25

08018df0 <__sfmoreglue>:
 8018df0:	b570      	push	{r4, r5, r6, lr}
 8018df2:	2268      	movs	r2, #104	; 0x68
 8018df4:	1e4d      	subs	r5, r1, #1
 8018df6:	4355      	muls	r5, r2
 8018df8:	460e      	mov	r6, r1
 8018dfa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018dfe:	f7ff fd31 	bl	8018864 <_malloc_r>
 8018e02:	4604      	mov	r4, r0
 8018e04:	b140      	cbz	r0, 8018e18 <__sfmoreglue+0x28>
 8018e06:	2100      	movs	r1, #0
 8018e08:	e9c0 1600 	strd	r1, r6, [r0]
 8018e0c:	300c      	adds	r0, #12
 8018e0e:	60a0      	str	r0, [r4, #8]
 8018e10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018e14:	f7ff fcb2 	bl	801877c <memset>
 8018e18:	4620      	mov	r0, r4
 8018e1a:	bd70      	pop	{r4, r5, r6, pc}

08018e1c <__sfp_lock_acquire>:
 8018e1c:	4801      	ldr	r0, [pc, #4]	; (8018e24 <__sfp_lock_acquire+0x8>)
 8018e1e:	f000 b8b3 	b.w	8018f88 <__retarget_lock_acquire_recursive>
 8018e22:	bf00      	nop
 8018e24:	20002dcd 	.word	0x20002dcd

08018e28 <__sfp_lock_release>:
 8018e28:	4801      	ldr	r0, [pc, #4]	; (8018e30 <__sfp_lock_release+0x8>)
 8018e2a:	f000 b8ae 	b.w	8018f8a <__retarget_lock_release_recursive>
 8018e2e:	bf00      	nop
 8018e30:	20002dcd 	.word	0x20002dcd

08018e34 <__sinit_lock_acquire>:
 8018e34:	4801      	ldr	r0, [pc, #4]	; (8018e3c <__sinit_lock_acquire+0x8>)
 8018e36:	f000 b8a7 	b.w	8018f88 <__retarget_lock_acquire_recursive>
 8018e3a:	bf00      	nop
 8018e3c:	20002dce 	.word	0x20002dce

08018e40 <__sinit_lock_release>:
 8018e40:	4801      	ldr	r0, [pc, #4]	; (8018e48 <__sinit_lock_release+0x8>)
 8018e42:	f000 b8a2 	b.w	8018f8a <__retarget_lock_release_recursive>
 8018e46:	bf00      	nop
 8018e48:	20002dce 	.word	0x20002dce

08018e4c <__sinit>:
 8018e4c:	b510      	push	{r4, lr}
 8018e4e:	4604      	mov	r4, r0
 8018e50:	f7ff fff0 	bl	8018e34 <__sinit_lock_acquire>
 8018e54:	69a3      	ldr	r3, [r4, #24]
 8018e56:	b11b      	cbz	r3, 8018e60 <__sinit+0x14>
 8018e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e5c:	f7ff bff0 	b.w	8018e40 <__sinit_lock_release>
 8018e60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018e64:	6523      	str	r3, [r4, #80]	; 0x50
 8018e66:	4b13      	ldr	r3, [pc, #76]	; (8018eb4 <__sinit+0x68>)
 8018e68:	4a13      	ldr	r2, [pc, #76]	; (8018eb8 <__sinit+0x6c>)
 8018e6a:	681b      	ldr	r3, [r3, #0]
 8018e6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8018e6e:	42a3      	cmp	r3, r4
 8018e70:	bf04      	itt	eq
 8018e72:	2301      	moveq	r3, #1
 8018e74:	61a3      	streq	r3, [r4, #24]
 8018e76:	4620      	mov	r0, r4
 8018e78:	f000 f820 	bl	8018ebc <__sfp>
 8018e7c:	6060      	str	r0, [r4, #4]
 8018e7e:	4620      	mov	r0, r4
 8018e80:	f000 f81c 	bl	8018ebc <__sfp>
 8018e84:	60a0      	str	r0, [r4, #8]
 8018e86:	4620      	mov	r0, r4
 8018e88:	f000 f818 	bl	8018ebc <__sfp>
 8018e8c:	2200      	movs	r2, #0
 8018e8e:	60e0      	str	r0, [r4, #12]
 8018e90:	2104      	movs	r1, #4
 8018e92:	6860      	ldr	r0, [r4, #4]
 8018e94:	f7ff ff82 	bl	8018d9c <std>
 8018e98:	68a0      	ldr	r0, [r4, #8]
 8018e9a:	2201      	movs	r2, #1
 8018e9c:	2109      	movs	r1, #9
 8018e9e:	f7ff ff7d 	bl	8018d9c <std>
 8018ea2:	68e0      	ldr	r0, [r4, #12]
 8018ea4:	2202      	movs	r2, #2
 8018ea6:	2112      	movs	r1, #18
 8018ea8:	f7ff ff78 	bl	8018d9c <std>
 8018eac:	2301      	movs	r3, #1
 8018eae:	61a3      	str	r3, [r4, #24]
 8018eb0:	e7d2      	b.n	8018e58 <__sinit+0xc>
 8018eb2:	bf00      	nop
 8018eb4:	0801b888 	.word	0x0801b888
 8018eb8:	08018de5 	.word	0x08018de5

08018ebc <__sfp>:
 8018ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ebe:	4607      	mov	r7, r0
 8018ec0:	f7ff ffac 	bl	8018e1c <__sfp_lock_acquire>
 8018ec4:	4b1e      	ldr	r3, [pc, #120]	; (8018f40 <__sfp+0x84>)
 8018ec6:	681e      	ldr	r6, [r3, #0]
 8018ec8:	69b3      	ldr	r3, [r6, #24]
 8018eca:	b913      	cbnz	r3, 8018ed2 <__sfp+0x16>
 8018ecc:	4630      	mov	r0, r6
 8018ece:	f7ff ffbd 	bl	8018e4c <__sinit>
 8018ed2:	3648      	adds	r6, #72	; 0x48
 8018ed4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018ed8:	3b01      	subs	r3, #1
 8018eda:	d503      	bpl.n	8018ee4 <__sfp+0x28>
 8018edc:	6833      	ldr	r3, [r6, #0]
 8018ede:	b30b      	cbz	r3, 8018f24 <__sfp+0x68>
 8018ee0:	6836      	ldr	r6, [r6, #0]
 8018ee2:	e7f7      	b.n	8018ed4 <__sfp+0x18>
 8018ee4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018ee8:	b9d5      	cbnz	r5, 8018f20 <__sfp+0x64>
 8018eea:	4b16      	ldr	r3, [pc, #88]	; (8018f44 <__sfp+0x88>)
 8018eec:	60e3      	str	r3, [r4, #12]
 8018eee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018ef2:	6665      	str	r5, [r4, #100]	; 0x64
 8018ef4:	f000 f847 	bl	8018f86 <__retarget_lock_init_recursive>
 8018ef8:	f7ff ff96 	bl	8018e28 <__sfp_lock_release>
 8018efc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018f00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018f04:	6025      	str	r5, [r4, #0]
 8018f06:	61a5      	str	r5, [r4, #24]
 8018f08:	2208      	movs	r2, #8
 8018f0a:	4629      	mov	r1, r5
 8018f0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018f10:	f7ff fc34 	bl	801877c <memset>
 8018f14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018f18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018f1c:	4620      	mov	r0, r4
 8018f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f20:	3468      	adds	r4, #104	; 0x68
 8018f22:	e7d9      	b.n	8018ed8 <__sfp+0x1c>
 8018f24:	2104      	movs	r1, #4
 8018f26:	4638      	mov	r0, r7
 8018f28:	f7ff ff62 	bl	8018df0 <__sfmoreglue>
 8018f2c:	4604      	mov	r4, r0
 8018f2e:	6030      	str	r0, [r6, #0]
 8018f30:	2800      	cmp	r0, #0
 8018f32:	d1d5      	bne.n	8018ee0 <__sfp+0x24>
 8018f34:	f7ff ff78 	bl	8018e28 <__sfp_lock_release>
 8018f38:	230c      	movs	r3, #12
 8018f3a:	603b      	str	r3, [r7, #0]
 8018f3c:	e7ee      	b.n	8018f1c <__sfp+0x60>
 8018f3e:	bf00      	nop
 8018f40:	0801b888 	.word	0x0801b888
 8018f44:	ffff0001 	.word	0xffff0001

08018f48 <_fwalk_reent>:
 8018f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f4c:	4606      	mov	r6, r0
 8018f4e:	4688      	mov	r8, r1
 8018f50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018f54:	2700      	movs	r7, #0
 8018f56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018f5a:	f1b9 0901 	subs.w	r9, r9, #1
 8018f5e:	d505      	bpl.n	8018f6c <_fwalk_reent+0x24>
 8018f60:	6824      	ldr	r4, [r4, #0]
 8018f62:	2c00      	cmp	r4, #0
 8018f64:	d1f7      	bne.n	8018f56 <_fwalk_reent+0xe>
 8018f66:	4638      	mov	r0, r7
 8018f68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f6c:	89ab      	ldrh	r3, [r5, #12]
 8018f6e:	2b01      	cmp	r3, #1
 8018f70:	d907      	bls.n	8018f82 <_fwalk_reent+0x3a>
 8018f72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018f76:	3301      	adds	r3, #1
 8018f78:	d003      	beq.n	8018f82 <_fwalk_reent+0x3a>
 8018f7a:	4629      	mov	r1, r5
 8018f7c:	4630      	mov	r0, r6
 8018f7e:	47c0      	blx	r8
 8018f80:	4307      	orrs	r7, r0
 8018f82:	3568      	adds	r5, #104	; 0x68
 8018f84:	e7e9      	b.n	8018f5a <_fwalk_reent+0x12>

08018f86 <__retarget_lock_init_recursive>:
 8018f86:	4770      	bx	lr

08018f88 <__retarget_lock_acquire_recursive>:
 8018f88:	4770      	bx	lr

08018f8a <__retarget_lock_release_recursive>:
 8018f8a:	4770      	bx	lr

08018f8c <__swhatbuf_r>:
 8018f8c:	b570      	push	{r4, r5, r6, lr}
 8018f8e:	460e      	mov	r6, r1
 8018f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f94:	2900      	cmp	r1, #0
 8018f96:	b096      	sub	sp, #88	; 0x58
 8018f98:	4614      	mov	r4, r2
 8018f9a:	461d      	mov	r5, r3
 8018f9c:	da08      	bge.n	8018fb0 <__swhatbuf_r+0x24>
 8018f9e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8018fa2:	2200      	movs	r2, #0
 8018fa4:	602a      	str	r2, [r5, #0]
 8018fa6:	061a      	lsls	r2, r3, #24
 8018fa8:	d410      	bmi.n	8018fcc <__swhatbuf_r+0x40>
 8018faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018fae:	e00e      	b.n	8018fce <__swhatbuf_r+0x42>
 8018fb0:	466a      	mov	r2, sp
 8018fb2:	f000 fbb1 	bl	8019718 <_fstat_r>
 8018fb6:	2800      	cmp	r0, #0
 8018fb8:	dbf1      	blt.n	8018f9e <__swhatbuf_r+0x12>
 8018fba:	9a01      	ldr	r2, [sp, #4]
 8018fbc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018fc0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018fc4:	425a      	negs	r2, r3
 8018fc6:	415a      	adcs	r2, r3
 8018fc8:	602a      	str	r2, [r5, #0]
 8018fca:	e7ee      	b.n	8018faa <__swhatbuf_r+0x1e>
 8018fcc:	2340      	movs	r3, #64	; 0x40
 8018fce:	2000      	movs	r0, #0
 8018fd0:	6023      	str	r3, [r4, #0]
 8018fd2:	b016      	add	sp, #88	; 0x58
 8018fd4:	bd70      	pop	{r4, r5, r6, pc}
	...

08018fd8 <__smakebuf_r>:
 8018fd8:	898b      	ldrh	r3, [r1, #12]
 8018fda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018fdc:	079d      	lsls	r5, r3, #30
 8018fde:	4606      	mov	r6, r0
 8018fe0:	460c      	mov	r4, r1
 8018fe2:	d507      	bpl.n	8018ff4 <__smakebuf_r+0x1c>
 8018fe4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018fe8:	6023      	str	r3, [r4, #0]
 8018fea:	6123      	str	r3, [r4, #16]
 8018fec:	2301      	movs	r3, #1
 8018fee:	6163      	str	r3, [r4, #20]
 8018ff0:	b002      	add	sp, #8
 8018ff2:	bd70      	pop	{r4, r5, r6, pc}
 8018ff4:	ab01      	add	r3, sp, #4
 8018ff6:	466a      	mov	r2, sp
 8018ff8:	f7ff ffc8 	bl	8018f8c <__swhatbuf_r>
 8018ffc:	9900      	ldr	r1, [sp, #0]
 8018ffe:	4605      	mov	r5, r0
 8019000:	4630      	mov	r0, r6
 8019002:	f7ff fc2f 	bl	8018864 <_malloc_r>
 8019006:	b948      	cbnz	r0, 801901c <__smakebuf_r+0x44>
 8019008:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801900c:	059a      	lsls	r2, r3, #22
 801900e:	d4ef      	bmi.n	8018ff0 <__smakebuf_r+0x18>
 8019010:	f023 0303 	bic.w	r3, r3, #3
 8019014:	f043 0302 	orr.w	r3, r3, #2
 8019018:	81a3      	strh	r3, [r4, #12]
 801901a:	e7e3      	b.n	8018fe4 <__smakebuf_r+0xc>
 801901c:	4b0d      	ldr	r3, [pc, #52]	; (8019054 <__smakebuf_r+0x7c>)
 801901e:	62b3      	str	r3, [r6, #40]	; 0x28
 8019020:	89a3      	ldrh	r3, [r4, #12]
 8019022:	6020      	str	r0, [r4, #0]
 8019024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019028:	81a3      	strh	r3, [r4, #12]
 801902a:	9b00      	ldr	r3, [sp, #0]
 801902c:	6163      	str	r3, [r4, #20]
 801902e:	9b01      	ldr	r3, [sp, #4]
 8019030:	6120      	str	r0, [r4, #16]
 8019032:	b15b      	cbz	r3, 801904c <__smakebuf_r+0x74>
 8019034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019038:	4630      	mov	r0, r6
 801903a:	f000 fb7f 	bl	801973c <_isatty_r>
 801903e:	b128      	cbz	r0, 801904c <__smakebuf_r+0x74>
 8019040:	89a3      	ldrh	r3, [r4, #12]
 8019042:	f023 0303 	bic.w	r3, r3, #3
 8019046:	f043 0301 	orr.w	r3, r3, #1
 801904a:	81a3      	strh	r3, [r4, #12]
 801904c:	89a0      	ldrh	r0, [r4, #12]
 801904e:	4305      	orrs	r5, r0
 8019050:	81a5      	strh	r5, [r4, #12]
 8019052:	e7cd      	b.n	8018ff0 <__smakebuf_r+0x18>
 8019054:	08018de5 	.word	0x08018de5

08019058 <__malloc_lock>:
 8019058:	4801      	ldr	r0, [pc, #4]	; (8019060 <__malloc_lock+0x8>)
 801905a:	f7ff bf95 	b.w	8018f88 <__retarget_lock_acquire_recursive>
 801905e:	bf00      	nop
 8019060:	20002dcc 	.word	0x20002dcc

08019064 <__malloc_unlock>:
 8019064:	4801      	ldr	r0, [pc, #4]	; (801906c <__malloc_unlock+0x8>)
 8019066:	f7ff bf90 	b.w	8018f8a <__retarget_lock_release_recursive>
 801906a:	bf00      	nop
 801906c:	20002dcc 	.word	0x20002dcc

08019070 <__sfputc_r>:
 8019070:	6893      	ldr	r3, [r2, #8]
 8019072:	3b01      	subs	r3, #1
 8019074:	2b00      	cmp	r3, #0
 8019076:	b410      	push	{r4}
 8019078:	6093      	str	r3, [r2, #8]
 801907a:	da08      	bge.n	801908e <__sfputc_r+0x1e>
 801907c:	6994      	ldr	r4, [r2, #24]
 801907e:	42a3      	cmp	r3, r4
 8019080:	db01      	blt.n	8019086 <__sfputc_r+0x16>
 8019082:	290a      	cmp	r1, #10
 8019084:	d103      	bne.n	801908e <__sfputc_r+0x1e>
 8019086:	f85d 4b04 	ldr.w	r4, [sp], #4
 801908a:	f7ff bd05 	b.w	8018a98 <__swbuf_r>
 801908e:	6813      	ldr	r3, [r2, #0]
 8019090:	1c58      	adds	r0, r3, #1
 8019092:	6010      	str	r0, [r2, #0]
 8019094:	7019      	strb	r1, [r3, #0]
 8019096:	4608      	mov	r0, r1
 8019098:	f85d 4b04 	ldr.w	r4, [sp], #4
 801909c:	4770      	bx	lr

0801909e <__sfputs_r>:
 801909e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190a0:	4606      	mov	r6, r0
 80190a2:	460f      	mov	r7, r1
 80190a4:	4614      	mov	r4, r2
 80190a6:	18d5      	adds	r5, r2, r3
 80190a8:	42ac      	cmp	r4, r5
 80190aa:	d101      	bne.n	80190b0 <__sfputs_r+0x12>
 80190ac:	2000      	movs	r0, #0
 80190ae:	e007      	b.n	80190c0 <__sfputs_r+0x22>
 80190b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80190b4:	463a      	mov	r2, r7
 80190b6:	4630      	mov	r0, r6
 80190b8:	f7ff ffda 	bl	8019070 <__sfputc_r>
 80190bc:	1c43      	adds	r3, r0, #1
 80190be:	d1f3      	bne.n	80190a8 <__sfputs_r+0xa>
 80190c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080190c4 <_vfiprintf_r>:
 80190c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190c8:	460d      	mov	r5, r1
 80190ca:	b09d      	sub	sp, #116	; 0x74
 80190cc:	4614      	mov	r4, r2
 80190ce:	4698      	mov	r8, r3
 80190d0:	4606      	mov	r6, r0
 80190d2:	b118      	cbz	r0, 80190dc <_vfiprintf_r+0x18>
 80190d4:	6983      	ldr	r3, [r0, #24]
 80190d6:	b90b      	cbnz	r3, 80190dc <_vfiprintf_r+0x18>
 80190d8:	f7ff feb8 	bl	8018e4c <__sinit>
 80190dc:	4b89      	ldr	r3, [pc, #548]	; (8019304 <_vfiprintf_r+0x240>)
 80190de:	429d      	cmp	r5, r3
 80190e0:	d11b      	bne.n	801911a <_vfiprintf_r+0x56>
 80190e2:	6875      	ldr	r5, [r6, #4]
 80190e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80190e6:	07d9      	lsls	r1, r3, #31
 80190e8:	d405      	bmi.n	80190f6 <_vfiprintf_r+0x32>
 80190ea:	89ab      	ldrh	r3, [r5, #12]
 80190ec:	059a      	lsls	r2, r3, #22
 80190ee:	d402      	bmi.n	80190f6 <_vfiprintf_r+0x32>
 80190f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80190f2:	f7ff ff49 	bl	8018f88 <__retarget_lock_acquire_recursive>
 80190f6:	89ab      	ldrh	r3, [r5, #12]
 80190f8:	071b      	lsls	r3, r3, #28
 80190fa:	d501      	bpl.n	8019100 <_vfiprintf_r+0x3c>
 80190fc:	692b      	ldr	r3, [r5, #16]
 80190fe:	b9eb      	cbnz	r3, 801913c <_vfiprintf_r+0x78>
 8019100:	4629      	mov	r1, r5
 8019102:	4630      	mov	r0, r6
 8019104:	f7ff fd1a 	bl	8018b3c <__swsetup_r>
 8019108:	b1c0      	cbz	r0, 801913c <_vfiprintf_r+0x78>
 801910a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801910c:	07dc      	lsls	r4, r3, #31
 801910e:	d50e      	bpl.n	801912e <_vfiprintf_r+0x6a>
 8019110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019114:	b01d      	add	sp, #116	; 0x74
 8019116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801911a:	4b7b      	ldr	r3, [pc, #492]	; (8019308 <_vfiprintf_r+0x244>)
 801911c:	429d      	cmp	r5, r3
 801911e:	d101      	bne.n	8019124 <_vfiprintf_r+0x60>
 8019120:	68b5      	ldr	r5, [r6, #8]
 8019122:	e7df      	b.n	80190e4 <_vfiprintf_r+0x20>
 8019124:	4b79      	ldr	r3, [pc, #484]	; (801930c <_vfiprintf_r+0x248>)
 8019126:	429d      	cmp	r5, r3
 8019128:	bf08      	it	eq
 801912a:	68f5      	ldreq	r5, [r6, #12]
 801912c:	e7da      	b.n	80190e4 <_vfiprintf_r+0x20>
 801912e:	89ab      	ldrh	r3, [r5, #12]
 8019130:	0598      	lsls	r0, r3, #22
 8019132:	d4ed      	bmi.n	8019110 <_vfiprintf_r+0x4c>
 8019134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019136:	f7ff ff28 	bl	8018f8a <__retarget_lock_release_recursive>
 801913a:	e7e9      	b.n	8019110 <_vfiprintf_r+0x4c>
 801913c:	2300      	movs	r3, #0
 801913e:	9309      	str	r3, [sp, #36]	; 0x24
 8019140:	2320      	movs	r3, #32
 8019142:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019146:	f8cd 800c 	str.w	r8, [sp, #12]
 801914a:	2330      	movs	r3, #48	; 0x30
 801914c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019310 <_vfiprintf_r+0x24c>
 8019150:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019154:	f04f 0901 	mov.w	r9, #1
 8019158:	4623      	mov	r3, r4
 801915a:	469a      	mov	sl, r3
 801915c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019160:	b10a      	cbz	r2, 8019166 <_vfiprintf_r+0xa2>
 8019162:	2a25      	cmp	r2, #37	; 0x25
 8019164:	d1f9      	bne.n	801915a <_vfiprintf_r+0x96>
 8019166:	ebba 0b04 	subs.w	fp, sl, r4
 801916a:	d00b      	beq.n	8019184 <_vfiprintf_r+0xc0>
 801916c:	465b      	mov	r3, fp
 801916e:	4622      	mov	r2, r4
 8019170:	4629      	mov	r1, r5
 8019172:	4630      	mov	r0, r6
 8019174:	f7ff ff93 	bl	801909e <__sfputs_r>
 8019178:	3001      	adds	r0, #1
 801917a:	f000 80aa 	beq.w	80192d2 <_vfiprintf_r+0x20e>
 801917e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019180:	445a      	add	r2, fp
 8019182:	9209      	str	r2, [sp, #36]	; 0x24
 8019184:	f89a 3000 	ldrb.w	r3, [sl]
 8019188:	2b00      	cmp	r3, #0
 801918a:	f000 80a2 	beq.w	80192d2 <_vfiprintf_r+0x20e>
 801918e:	2300      	movs	r3, #0
 8019190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019194:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019198:	f10a 0a01 	add.w	sl, sl, #1
 801919c:	9304      	str	r3, [sp, #16]
 801919e:	9307      	str	r3, [sp, #28]
 80191a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80191a4:	931a      	str	r3, [sp, #104]	; 0x68
 80191a6:	4654      	mov	r4, sl
 80191a8:	2205      	movs	r2, #5
 80191aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80191ae:	4858      	ldr	r0, [pc, #352]	; (8019310 <_vfiprintf_r+0x24c>)
 80191b0:	f7e7 f81e 	bl	80001f0 <memchr>
 80191b4:	9a04      	ldr	r2, [sp, #16]
 80191b6:	b9d8      	cbnz	r0, 80191f0 <_vfiprintf_r+0x12c>
 80191b8:	06d1      	lsls	r1, r2, #27
 80191ba:	bf44      	itt	mi
 80191bc:	2320      	movmi	r3, #32
 80191be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80191c2:	0713      	lsls	r3, r2, #28
 80191c4:	bf44      	itt	mi
 80191c6:	232b      	movmi	r3, #43	; 0x2b
 80191c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80191cc:	f89a 3000 	ldrb.w	r3, [sl]
 80191d0:	2b2a      	cmp	r3, #42	; 0x2a
 80191d2:	d015      	beq.n	8019200 <_vfiprintf_r+0x13c>
 80191d4:	9a07      	ldr	r2, [sp, #28]
 80191d6:	4654      	mov	r4, sl
 80191d8:	2000      	movs	r0, #0
 80191da:	f04f 0c0a 	mov.w	ip, #10
 80191de:	4621      	mov	r1, r4
 80191e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80191e4:	3b30      	subs	r3, #48	; 0x30
 80191e6:	2b09      	cmp	r3, #9
 80191e8:	d94e      	bls.n	8019288 <_vfiprintf_r+0x1c4>
 80191ea:	b1b0      	cbz	r0, 801921a <_vfiprintf_r+0x156>
 80191ec:	9207      	str	r2, [sp, #28]
 80191ee:	e014      	b.n	801921a <_vfiprintf_r+0x156>
 80191f0:	eba0 0308 	sub.w	r3, r0, r8
 80191f4:	fa09 f303 	lsl.w	r3, r9, r3
 80191f8:	4313      	orrs	r3, r2
 80191fa:	9304      	str	r3, [sp, #16]
 80191fc:	46a2      	mov	sl, r4
 80191fe:	e7d2      	b.n	80191a6 <_vfiprintf_r+0xe2>
 8019200:	9b03      	ldr	r3, [sp, #12]
 8019202:	1d19      	adds	r1, r3, #4
 8019204:	681b      	ldr	r3, [r3, #0]
 8019206:	9103      	str	r1, [sp, #12]
 8019208:	2b00      	cmp	r3, #0
 801920a:	bfbb      	ittet	lt
 801920c:	425b      	neglt	r3, r3
 801920e:	f042 0202 	orrlt.w	r2, r2, #2
 8019212:	9307      	strge	r3, [sp, #28]
 8019214:	9307      	strlt	r3, [sp, #28]
 8019216:	bfb8      	it	lt
 8019218:	9204      	strlt	r2, [sp, #16]
 801921a:	7823      	ldrb	r3, [r4, #0]
 801921c:	2b2e      	cmp	r3, #46	; 0x2e
 801921e:	d10c      	bne.n	801923a <_vfiprintf_r+0x176>
 8019220:	7863      	ldrb	r3, [r4, #1]
 8019222:	2b2a      	cmp	r3, #42	; 0x2a
 8019224:	d135      	bne.n	8019292 <_vfiprintf_r+0x1ce>
 8019226:	9b03      	ldr	r3, [sp, #12]
 8019228:	1d1a      	adds	r2, r3, #4
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	9203      	str	r2, [sp, #12]
 801922e:	2b00      	cmp	r3, #0
 8019230:	bfb8      	it	lt
 8019232:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019236:	3402      	adds	r4, #2
 8019238:	9305      	str	r3, [sp, #20]
 801923a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019320 <_vfiprintf_r+0x25c>
 801923e:	7821      	ldrb	r1, [r4, #0]
 8019240:	2203      	movs	r2, #3
 8019242:	4650      	mov	r0, sl
 8019244:	f7e6 ffd4 	bl	80001f0 <memchr>
 8019248:	b140      	cbz	r0, 801925c <_vfiprintf_r+0x198>
 801924a:	2340      	movs	r3, #64	; 0x40
 801924c:	eba0 000a 	sub.w	r0, r0, sl
 8019250:	fa03 f000 	lsl.w	r0, r3, r0
 8019254:	9b04      	ldr	r3, [sp, #16]
 8019256:	4303      	orrs	r3, r0
 8019258:	3401      	adds	r4, #1
 801925a:	9304      	str	r3, [sp, #16]
 801925c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019260:	482c      	ldr	r0, [pc, #176]	; (8019314 <_vfiprintf_r+0x250>)
 8019262:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019266:	2206      	movs	r2, #6
 8019268:	f7e6 ffc2 	bl	80001f0 <memchr>
 801926c:	2800      	cmp	r0, #0
 801926e:	d03f      	beq.n	80192f0 <_vfiprintf_r+0x22c>
 8019270:	4b29      	ldr	r3, [pc, #164]	; (8019318 <_vfiprintf_r+0x254>)
 8019272:	bb1b      	cbnz	r3, 80192bc <_vfiprintf_r+0x1f8>
 8019274:	9b03      	ldr	r3, [sp, #12]
 8019276:	3307      	adds	r3, #7
 8019278:	f023 0307 	bic.w	r3, r3, #7
 801927c:	3308      	adds	r3, #8
 801927e:	9303      	str	r3, [sp, #12]
 8019280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019282:	443b      	add	r3, r7
 8019284:	9309      	str	r3, [sp, #36]	; 0x24
 8019286:	e767      	b.n	8019158 <_vfiprintf_r+0x94>
 8019288:	fb0c 3202 	mla	r2, ip, r2, r3
 801928c:	460c      	mov	r4, r1
 801928e:	2001      	movs	r0, #1
 8019290:	e7a5      	b.n	80191de <_vfiprintf_r+0x11a>
 8019292:	2300      	movs	r3, #0
 8019294:	3401      	adds	r4, #1
 8019296:	9305      	str	r3, [sp, #20]
 8019298:	4619      	mov	r1, r3
 801929a:	f04f 0c0a 	mov.w	ip, #10
 801929e:	4620      	mov	r0, r4
 80192a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80192a4:	3a30      	subs	r2, #48	; 0x30
 80192a6:	2a09      	cmp	r2, #9
 80192a8:	d903      	bls.n	80192b2 <_vfiprintf_r+0x1ee>
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d0c5      	beq.n	801923a <_vfiprintf_r+0x176>
 80192ae:	9105      	str	r1, [sp, #20]
 80192b0:	e7c3      	b.n	801923a <_vfiprintf_r+0x176>
 80192b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80192b6:	4604      	mov	r4, r0
 80192b8:	2301      	movs	r3, #1
 80192ba:	e7f0      	b.n	801929e <_vfiprintf_r+0x1da>
 80192bc:	ab03      	add	r3, sp, #12
 80192be:	9300      	str	r3, [sp, #0]
 80192c0:	462a      	mov	r2, r5
 80192c2:	4b16      	ldr	r3, [pc, #88]	; (801931c <_vfiprintf_r+0x258>)
 80192c4:	a904      	add	r1, sp, #16
 80192c6:	4630      	mov	r0, r6
 80192c8:	f3af 8000 	nop.w
 80192cc:	4607      	mov	r7, r0
 80192ce:	1c78      	adds	r0, r7, #1
 80192d0:	d1d6      	bne.n	8019280 <_vfiprintf_r+0x1bc>
 80192d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80192d4:	07d9      	lsls	r1, r3, #31
 80192d6:	d405      	bmi.n	80192e4 <_vfiprintf_r+0x220>
 80192d8:	89ab      	ldrh	r3, [r5, #12]
 80192da:	059a      	lsls	r2, r3, #22
 80192dc:	d402      	bmi.n	80192e4 <_vfiprintf_r+0x220>
 80192de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80192e0:	f7ff fe53 	bl	8018f8a <__retarget_lock_release_recursive>
 80192e4:	89ab      	ldrh	r3, [r5, #12]
 80192e6:	065b      	lsls	r3, r3, #25
 80192e8:	f53f af12 	bmi.w	8019110 <_vfiprintf_r+0x4c>
 80192ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80192ee:	e711      	b.n	8019114 <_vfiprintf_r+0x50>
 80192f0:	ab03      	add	r3, sp, #12
 80192f2:	9300      	str	r3, [sp, #0]
 80192f4:	462a      	mov	r2, r5
 80192f6:	4b09      	ldr	r3, [pc, #36]	; (801931c <_vfiprintf_r+0x258>)
 80192f8:	a904      	add	r1, sp, #16
 80192fa:	4630      	mov	r0, r6
 80192fc:	f000 f880 	bl	8019400 <_printf_i>
 8019300:	e7e4      	b.n	80192cc <_vfiprintf_r+0x208>
 8019302:	bf00      	nop
 8019304:	0801b8ac 	.word	0x0801b8ac
 8019308:	0801b8cc 	.word	0x0801b8cc
 801930c:	0801b88c 	.word	0x0801b88c
 8019310:	0801b8ec 	.word	0x0801b8ec
 8019314:	0801b8f6 	.word	0x0801b8f6
 8019318:	00000000 	.word	0x00000000
 801931c:	0801909f 	.word	0x0801909f
 8019320:	0801b8f2 	.word	0x0801b8f2

08019324 <_printf_common>:
 8019324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019328:	4616      	mov	r6, r2
 801932a:	4699      	mov	r9, r3
 801932c:	688a      	ldr	r2, [r1, #8]
 801932e:	690b      	ldr	r3, [r1, #16]
 8019330:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019334:	4293      	cmp	r3, r2
 8019336:	bfb8      	it	lt
 8019338:	4613      	movlt	r3, r2
 801933a:	6033      	str	r3, [r6, #0]
 801933c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019340:	4607      	mov	r7, r0
 8019342:	460c      	mov	r4, r1
 8019344:	b10a      	cbz	r2, 801934a <_printf_common+0x26>
 8019346:	3301      	adds	r3, #1
 8019348:	6033      	str	r3, [r6, #0]
 801934a:	6823      	ldr	r3, [r4, #0]
 801934c:	0699      	lsls	r1, r3, #26
 801934e:	bf42      	ittt	mi
 8019350:	6833      	ldrmi	r3, [r6, #0]
 8019352:	3302      	addmi	r3, #2
 8019354:	6033      	strmi	r3, [r6, #0]
 8019356:	6825      	ldr	r5, [r4, #0]
 8019358:	f015 0506 	ands.w	r5, r5, #6
 801935c:	d106      	bne.n	801936c <_printf_common+0x48>
 801935e:	f104 0a19 	add.w	sl, r4, #25
 8019362:	68e3      	ldr	r3, [r4, #12]
 8019364:	6832      	ldr	r2, [r6, #0]
 8019366:	1a9b      	subs	r3, r3, r2
 8019368:	42ab      	cmp	r3, r5
 801936a:	dc26      	bgt.n	80193ba <_printf_common+0x96>
 801936c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019370:	1e13      	subs	r3, r2, #0
 8019372:	6822      	ldr	r2, [r4, #0]
 8019374:	bf18      	it	ne
 8019376:	2301      	movne	r3, #1
 8019378:	0692      	lsls	r2, r2, #26
 801937a:	d42b      	bmi.n	80193d4 <_printf_common+0xb0>
 801937c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019380:	4649      	mov	r1, r9
 8019382:	4638      	mov	r0, r7
 8019384:	47c0      	blx	r8
 8019386:	3001      	adds	r0, #1
 8019388:	d01e      	beq.n	80193c8 <_printf_common+0xa4>
 801938a:	6823      	ldr	r3, [r4, #0]
 801938c:	68e5      	ldr	r5, [r4, #12]
 801938e:	6832      	ldr	r2, [r6, #0]
 8019390:	f003 0306 	and.w	r3, r3, #6
 8019394:	2b04      	cmp	r3, #4
 8019396:	bf08      	it	eq
 8019398:	1aad      	subeq	r5, r5, r2
 801939a:	68a3      	ldr	r3, [r4, #8]
 801939c:	6922      	ldr	r2, [r4, #16]
 801939e:	bf0c      	ite	eq
 80193a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80193a4:	2500      	movne	r5, #0
 80193a6:	4293      	cmp	r3, r2
 80193a8:	bfc4      	itt	gt
 80193aa:	1a9b      	subgt	r3, r3, r2
 80193ac:	18ed      	addgt	r5, r5, r3
 80193ae:	2600      	movs	r6, #0
 80193b0:	341a      	adds	r4, #26
 80193b2:	42b5      	cmp	r5, r6
 80193b4:	d11a      	bne.n	80193ec <_printf_common+0xc8>
 80193b6:	2000      	movs	r0, #0
 80193b8:	e008      	b.n	80193cc <_printf_common+0xa8>
 80193ba:	2301      	movs	r3, #1
 80193bc:	4652      	mov	r2, sl
 80193be:	4649      	mov	r1, r9
 80193c0:	4638      	mov	r0, r7
 80193c2:	47c0      	blx	r8
 80193c4:	3001      	adds	r0, #1
 80193c6:	d103      	bne.n	80193d0 <_printf_common+0xac>
 80193c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80193cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193d0:	3501      	adds	r5, #1
 80193d2:	e7c6      	b.n	8019362 <_printf_common+0x3e>
 80193d4:	18e1      	adds	r1, r4, r3
 80193d6:	1c5a      	adds	r2, r3, #1
 80193d8:	2030      	movs	r0, #48	; 0x30
 80193da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80193de:	4422      	add	r2, r4
 80193e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80193e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80193e8:	3302      	adds	r3, #2
 80193ea:	e7c7      	b.n	801937c <_printf_common+0x58>
 80193ec:	2301      	movs	r3, #1
 80193ee:	4622      	mov	r2, r4
 80193f0:	4649      	mov	r1, r9
 80193f2:	4638      	mov	r0, r7
 80193f4:	47c0      	blx	r8
 80193f6:	3001      	adds	r0, #1
 80193f8:	d0e6      	beq.n	80193c8 <_printf_common+0xa4>
 80193fa:	3601      	adds	r6, #1
 80193fc:	e7d9      	b.n	80193b2 <_printf_common+0x8e>
	...

08019400 <_printf_i>:
 8019400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019404:	7e0f      	ldrb	r7, [r1, #24]
 8019406:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019408:	2f78      	cmp	r7, #120	; 0x78
 801940a:	4691      	mov	r9, r2
 801940c:	4680      	mov	r8, r0
 801940e:	460c      	mov	r4, r1
 8019410:	469a      	mov	sl, r3
 8019412:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019416:	d807      	bhi.n	8019428 <_printf_i+0x28>
 8019418:	2f62      	cmp	r7, #98	; 0x62
 801941a:	d80a      	bhi.n	8019432 <_printf_i+0x32>
 801941c:	2f00      	cmp	r7, #0
 801941e:	f000 80d8 	beq.w	80195d2 <_printf_i+0x1d2>
 8019422:	2f58      	cmp	r7, #88	; 0x58
 8019424:	f000 80a3 	beq.w	801956e <_printf_i+0x16e>
 8019428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801942c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019430:	e03a      	b.n	80194a8 <_printf_i+0xa8>
 8019432:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019436:	2b15      	cmp	r3, #21
 8019438:	d8f6      	bhi.n	8019428 <_printf_i+0x28>
 801943a:	a101      	add	r1, pc, #4	; (adr r1, 8019440 <_printf_i+0x40>)
 801943c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019440:	08019499 	.word	0x08019499
 8019444:	080194ad 	.word	0x080194ad
 8019448:	08019429 	.word	0x08019429
 801944c:	08019429 	.word	0x08019429
 8019450:	08019429 	.word	0x08019429
 8019454:	08019429 	.word	0x08019429
 8019458:	080194ad 	.word	0x080194ad
 801945c:	08019429 	.word	0x08019429
 8019460:	08019429 	.word	0x08019429
 8019464:	08019429 	.word	0x08019429
 8019468:	08019429 	.word	0x08019429
 801946c:	080195b9 	.word	0x080195b9
 8019470:	080194dd 	.word	0x080194dd
 8019474:	0801959b 	.word	0x0801959b
 8019478:	08019429 	.word	0x08019429
 801947c:	08019429 	.word	0x08019429
 8019480:	080195db 	.word	0x080195db
 8019484:	08019429 	.word	0x08019429
 8019488:	080194dd 	.word	0x080194dd
 801948c:	08019429 	.word	0x08019429
 8019490:	08019429 	.word	0x08019429
 8019494:	080195a3 	.word	0x080195a3
 8019498:	682b      	ldr	r3, [r5, #0]
 801949a:	1d1a      	adds	r2, r3, #4
 801949c:	681b      	ldr	r3, [r3, #0]
 801949e:	602a      	str	r2, [r5, #0]
 80194a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80194a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80194a8:	2301      	movs	r3, #1
 80194aa:	e0a3      	b.n	80195f4 <_printf_i+0x1f4>
 80194ac:	6820      	ldr	r0, [r4, #0]
 80194ae:	6829      	ldr	r1, [r5, #0]
 80194b0:	0606      	lsls	r6, r0, #24
 80194b2:	f101 0304 	add.w	r3, r1, #4
 80194b6:	d50a      	bpl.n	80194ce <_printf_i+0xce>
 80194b8:	680e      	ldr	r6, [r1, #0]
 80194ba:	602b      	str	r3, [r5, #0]
 80194bc:	2e00      	cmp	r6, #0
 80194be:	da03      	bge.n	80194c8 <_printf_i+0xc8>
 80194c0:	232d      	movs	r3, #45	; 0x2d
 80194c2:	4276      	negs	r6, r6
 80194c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80194c8:	485e      	ldr	r0, [pc, #376]	; (8019644 <_printf_i+0x244>)
 80194ca:	230a      	movs	r3, #10
 80194cc:	e019      	b.n	8019502 <_printf_i+0x102>
 80194ce:	680e      	ldr	r6, [r1, #0]
 80194d0:	602b      	str	r3, [r5, #0]
 80194d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80194d6:	bf18      	it	ne
 80194d8:	b236      	sxthne	r6, r6
 80194da:	e7ef      	b.n	80194bc <_printf_i+0xbc>
 80194dc:	682b      	ldr	r3, [r5, #0]
 80194de:	6820      	ldr	r0, [r4, #0]
 80194e0:	1d19      	adds	r1, r3, #4
 80194e2:	6029      	str	r1, [r5, #0]
 80194e4:	0601      	lsls	r1, r0, #24
 80194e6:	d501      	bpl.n	80194ec <_printf_i+0xec>
 80194e8:	681e      	ldr	r6, [r3, #0]
 80194ea:	e002      	b.n	80194f2 <_printf_i+0xf2>
 80194ec:	0646      	lsls	r6, r0, #25
 80194ee:	d5fb      	bpl.n	80194e8 <_printf_i+0xe8>
 80194f0:	881e      	ldrh	r6, [r3, #0]
 80194f2:	4854      	ldr	r0, [pc, #336]	; (8019644 <_printf_i+0x244>)
 80194f4:	2f6f      	cmp	r7, #111	; 0x6f
 80194f6:	bf0c      	ite	eq
 80194f8:	2308      	moveq	r3, #8
 80194fa:	230a      	movne	r3, #10
 80194fc:	2100      	movs	r1, #0
 80194fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019502:	6865      	ldr	r5, [r4, #4]
 8019504:	60a5      	str	r5, [r4, #8]
 8019506:	2d00      	cmp	r5, #0
 8019508:	bfa2      	ittt	ge
 801950a:	6821      	ldrge	r1, [r4, #0]
 801950c:	f021 0104 	bicge.w	r1, r1, #4
 8019510:	6021      	strge	r1, [r4, #0]
 8019512:	b90e      	cbnz	r6, 8019518 <_printf_i+0x118>
 8019514:	2d00      	cmp	r5, #0
 8019516:	d04d      	beq.n	80195b4 <_printf_i+0x1b4>
 8019518:	4615      	mov	r5, r2
 801951a:	fbb6 f1f3 	udiv	r1, r6, r3
 801951e:	fb03 6711 	mls	r7, r3, r1, r6
 8019522:	5dc7      	ldrb	r7, [r0, r7]
 8019524:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019528:	4637      	mov	r7, r6
 801952a:	42bb      	cmp	r3, r7
 801952c:	460e      	mov	r6, r1
 801952e:	d9f4      	bls.n	801951a <_printf_i+0x11a>
 8019530:	2b08      	cmp	r3, #8
 8019532:	d10b      	bne.n	801954c <_printf_i+0x14c>
 8019534:	6823      	ldr	r3, [r4, #0]
 8019536:	07de      	lsls	r6, r3, #31
 8019538:	d508      	bpl.n	801954c <_printf_i+0x14c>
 801953a:	6923      	ldr	r3, [r4, #16]
 801953c:	6861      	ldr	r1, [r4, #4]
 801953e:	4299      	cmp	r1, r3
 8019540:	bfde      	ittt	le
 8019542:	2330      	movle	r3, #48	; 0x30
 8019544:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019548:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801954c:	1b52      	subs	r2, r2, r5
 801954e:	6122      	str	r2, [r4, #16]
 8019550:	f8cd a000 	str.w	sl, [sp]
 8019554:	464b      	mov	r3, r9
 8019556:	aa03      	add	r2, sp, #12
 8019558:	4621      	mov	r1, r4
 801955a:	4640      	mov	r0, r8
 801955c:	f7ff fee2 	bl	8019324 <_printf_common>
 8019560:	3001      	adds	r0, #1
 8019562:	d14c      	bne.n	80195fe <_printf_i+0x1fe>
 8019564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019568:	b004      	add	sp, #16
 801956a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801956e:	4835      	ldr	r0, [pc, #212]	; (8019644 <_printf_i+0x244>)
 8019570:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019574:	6829      	ldr	r1, [r5, #0]
 8019576:	6823      	ldr	r3, [r4, #0]
 8019578:	f851 6b04 	ldr.w	r6, [r1], #4
 801957c:	6029      	str	r1, [r5, #0]
 801957e:	061d      	lsls	r5, r3, #24
 8019580:	d514      	bpl.n	80195ac <_printf_i+0x1ac>
 8019582:	07df      	lsls	r7, r3, #31
 8019584:	bf44      	itt	mi
 8019586:	f043 0320 	orrmi.w	r3, r3, #32
 801958a:	6023      	strmi	r3, [r4, #0]
 801958c:	b91e      	cbnz	r6, 8019596 <_printf_i+0x196>
 801958e:	6823      	ldr	r3, [r4, #0]
 8019590:	f023 0320 	bic.w	r3, r3, #32
 8019594:	6023      	str	r3, [r4, #0]
 8019596:	2310      	movs	r3, #16
 8019598:	e7b0      	b.n	80194fc <_printf_i+0xfc>
 801959a:	6823      	ldr	r3, [r4, #0]
 801959c:	f043 0320 	orr.w	r3, r3, #32
 80195a0:	6023      	str	r3, [r4, #0]
 80195a2:	2378      	movs	r3, #120	; 0x78
 80195a4:	4828      	ldr	r0, [pc, #160]	; (8019648 <_printf_i+0x248>)
 80195a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80195aa:	e7e3      	b.n	8019574 <_printf_i+0x174>
 80195ac:	0659      	lsls	r1, r3, #25
 80195ae:	bf48      	it	mi
 80195b0:	b2b6      	uxthmi	r6, r6
 80195b2:	e7e6      	b.n	8019582 <_printf_i+0x182>
 80195b4:	4615      	mov	r5, r2
 80195b6:	e7bb      	b.n	8019530 <_printf_i+0x130>
 80195b8:	682b      	ldr	r3, [r5, #0]
 80195ba:	6826      	ldr	r6, [r4, #0]
 80195bc:	6961      	ldr	r1, [r4, #20]
 80195be:	1d18      	adds	r0, r3, #4
 80195c0:	6028      	str	r0, [r5, #0]
 80195c2:	0635      	lsls	r5, r6, #24
 80195c4:	681b      	ldr	r3, [r3, #0]
 80195c6:	d501      	bpl.n	80195cc <_printf_i+0x1cc>
 80195c8:	6019      	str	r1, [r3, #0]
 80195ca:	e002      	b.n	80195d2 <_printf_i+0x1d2>
 80195cc:	0670      	lsls	r0, r6, #25
 80195ce:	d5fb      	bpl.n	80195c8 <_printf_i+0x1c8>
 80195d0:	8019      	strh	r1, [r3, #0]
 80195d2:	2300      	movs	r3, #0
 80195d4:	6123      	str	r3, [r4, #16]
 80195d6:	4615      	mov	r5, r2
 80195d8:	e7ba      	b.n	8019550 <_printf_i+0x150>
 80195da:	682b      	ldr	r3, [r5, #0]
 80195dc:	1d1a      	adds	r2, r3, #4
 80195de:	602a      	str	r2, [r5, #0]
 80195e0:	681d      	ldr	r5, [r3, #0]
 80195e2:	6862      	ldr	r2, [r4, #4]
 80195e4:	2100      	movs	r1, #0
 80195e6:	4628      	mov	r0, r5
 80195e8:	f7e6 fe02 	bl	80001f0 <memchr>
 80195ec:	b108      	cbz	r0, 80195f2 <_printf_i+0x1f2>
 80195ee:	1b40      	subs	r0, r0, r5
 80195f0:	6060      	str	r0, [r4, #4]
 80195f2:	6863      	ldr	r3, [r4, #4]
 80195f4:	6123      	str	r3, [r4, #16]
 80195f6:	2300      	movs	r3, #0
 80195f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80195fc:	e7a8      	b.n	8019550 <_printf_i+0x150>
 80195fe:	6923      	ldr	r3, [r4, #16]
 8019600:	462a      	mov	r2, r5
 8019602:	4649      	mov	r1, r9
 8019604:	4640      	mov	r0, r8
 8019606:	47d0      	blx	sl
 8019608:	3001      	adds	r0, #1
 801960a:	d0ab      	beq.n	8019564 <_printf_i+0x164>
 801960c:	6823      	ldr	r3, [r4, #0]
 801960e:	079b      	lsls	r3, r3, #30
 8019610:	d413      	bmi.n	801963a <_printf_i+0x23a>
 8019612:	68e0      	ldr	r0, [r4, #12]
 8019614:	9b03      	ldr	r3, [sp, #12]
 8019616:	4298      	cmp	r0, r3
 8019618:	bfb8      	it	lt
 801961a:	4618      	movlt	r0, r3
 801961c:	e7a4      	b.n	8019568 <_printf_i+0x168>
 801961e:	2301      	movs	r3, #1
 8019620:	4632      	mov	r2, r6
 8019622:	4649      	mov	r1, r9
 8019624:	4640      	mov	r0, r8
 8019626:	47d0      	blx	sl
 8019628:	3001      	adds	r0, #1
 801962a:	d09b      	beq.n	8019564 <_printf_i+0x164>
 801962c:	3501      	adds	r5, #1
 801962e:	68e3      	ldr	r3, [r4, #12]
 8019630:	9903      	ldr	r1, [sp, #12]
 8019632:	1a5b      	subs	r3, r3, r1
 8019634:	42ab      	cmp	r3, r5
 8019636:	dcf2      	bgt.n	801961e <_printf_i+0x21e>
 8019638:	e7eb      	b.n	8019612 <_printf_i+0x212>
 801963a:	2500      	movs	r5, #0
 801963c:	f104 0619 	add.w	r6, r4, #25
 8019640:	e7f5      	b.n	801962e <_printf_i+0x22e>
 8019642:	bf00      	nop
 8019644:	0801b8fd 	.word	0x0801b8fd
 8019648:	0801b90e 	.word	0x0801b90e

0801964c <__sread>:
 801964c:	b510      	push	{r4, lr}
 801964e:	460c      	mov	r4, r1
 8019650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019654:	f000 f894 	bl	8019780 <_read_r>
 8019658:	2800      	cmp	r0, #0
 801965a:	bfab      	itete	ge
 801965c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801965e:	89a3      	ldrhlt	r3, [r4, #12]
 8019660:	181b      	addge	r3, r3, r0
 8019662:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019666:	bfac      	ite	ge
 8019668:	6563      	strge	r3, [r4, #84]	; 0x54
 801966a:	81a3      	strhlt	r3, [r4, #12]
 801966c:	bd10      	pop	{r4, pc}

0801966e <__swrite>:
 801966e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019672:	461f      	mov	r7, r3
 8019674:	898b      	ldrh	r3, [r1, #12]
 8019676:	05db      	lsls	r3, r3, #23
 8019678:	4605      	mov	r5, r0
 801967a:	460c      	mov	r4, r1
 801967c:	4616      	mov	r6, r2
 801967e:	d505      	bpl.n	801968c <__swrite+0x1e>
 8019680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019684:	2302      	movs	r3, #2
 8019686:	2200      	movs	r2, #0
 8019688:	f000 f868 	bl	801975c <_lseek_r>
 801968c:	89a3      	ldrh	r3, [r4, #12]
 801968e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019692:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019696:	81a3      	strh	r3, [r4, #12]
 8019698:	4632      	mov	r2, r6
 801969a:	463b      	mov	r3, r7
 801969c:	4628      	mov	r0, r5
 801969e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80196a2:	f000 b817 	b.w	80196d4 <_write_r>

080196a6 <__sseek>:
 80196a6:	b510      	push	{r4, lr}
 80196a8:	460c      	mov	r4, r1
 80196aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80196ae:	f000 f855 	bl	801975c <_lseek_r>
 80196b2:	1c43      	adds	r3, r0, #1
 80196b4:	89a3      	ldrh	r3, [r4, #12]
 80196b6:	bf15      	itete	ne
 80196b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80196ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80196be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80196c2:	81a3      	strheq	r3, [r4, #12]
 80196c4:	bf18      	it	ne
 80196c6:	81a3      	strhne	r3, [r4, #12]
 80196c8:	bd10      	pop	{r4, pc}

080196ca <__sclose>:
 80196ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80196ce:	f000 b813 	b.w	80196f8 <_close_r>
	...

080196d4 <_write_r>:
 80196d4:	b538      	push	{r3, r4, r5, lr}
 80196d6:	4d07      	ldr	r5, [pc, #28]	; (80196f4 <_write_r+0x20>)
 80196d8:	4604      	mov	r4, r0
 80196da:	4608      	mov	r0, r1
 80196dc:	4611      	mov	r1, r2
 80196de:	2200      	movs	r2, #0
 80196e0:	602a      	str	r2, [r5, #0]
 80196e2:	461a      	mov	r2, r3
 80196e4:	f7e8 fe1f 	bl	8002326 <_write>
 80196e8:	1c43      	adds	r3, r0, #1
 80196ea:	d102      	bne.n	80196f2 <_write_r+0x1e>
 80196ec:	682b      	ldr	r3, [r5, #0]
 80196ee:	b103      	cbz	r3, 80196f2 <_write_r+0x1e>
 80196f0:	6023      	str	r3, [r4, #0]
 80196f2:	bd38      	pop	{r3, r4, r5, pc}
 80196f4:	20002dd0 	.word	0x20002dd0

080196f8 <_close_r>:
 80196f8:	b538      	push	{r3, r4, r5, lr}
 80196fa:	4d06      	ldr	r5, [pc, #24]	; (8019714 <_close_r+0x1c>)
 80196fc:	2300      	movs	r3, #0
 80196fe:	4604      	mov	r4, r0
 8019700:	4608      	mov	r0, r1
 8019702:	602b      	str	r3, [r5, #0]
 8019704:	f7e8 fe2b 	bl	800235e <_close>
 8019708:	1c43      	adds	r3, r0, #1
 801970a:	d102      	bne.n	8019712 <_close_r+0x1a>
 801970c:	682b      	ldr	r3, [r5, #0]
 801970e:	b103      	cbz	r3, 8019712 <_close_r+0x1a>
 8019710:	6023      	str	r3, [r4, #0]
 8019712:	bd38      	pop	{r3, r4, r5, pc}
 8019714:	20002dd0 	.word	0x20002dd0

08019718 <_fstat_r>:
 8019718:	b538      	push	{r3, r4, r5, lr}
 801971a:	4d07      	ldr	r5, [pc, #28]	; (8019738 <_fstat_r+0x20>)
 801971c:	2300      	movs	r3, #0
 801971e:	4604      	mov	r4, r0
 8019720:	4608      	mov	r0, r1
 8019722:	4611      	mov	r1, r2
 8019724:	602b      	str	r3, [r5, #0]
 8019726:	f7e8 fe26 	bl	8002376 <_fstat>
 801972a:	1c43      	adds	r3, r0, #1
 801972c:	d102      	bne.n	8019734 <_fstat_r+0x1c>
 801972e:	682b      	ldr	r3, [r5, #0]
 8019730:	b103      	cbz	r3, 8019734 <_fstat_r+0x1c>
 8019732:	6023      	str	r3, [r4, #0]
 8019734:	bd38      	pop	{r3, r4, r5, pc}
 8019736:	bf00      	nop
 8019738:	20002dd0 	.word	0x20002dd0

0801973c <_isatty_r>:
 801973c:	b538      	push	{r3, r4, r5, lr}
 801973e:	4d06      	ldr	r5, [pc, #24]	; (8019758 <_isatty_r+0x1c>)
 8019740:	2300      	movs	r3, #0
 8019742:	4604      	mov	r4, r0
 8019744:	4608      	mov	r0, r1
 8019746:	602b      	str	r3, [r5, #0]
 8019748:	f7e8 fe25 	bl	8002396 <_isatty>
 801974c:	1c43      	adds	r3, r0, #1
 801974e:	d102      	bne.n	8019756 <_isatty_r+0x1a>
 8019750:	682b      	ldr	r3, [r5, #0]
 8019752:	b103      	cbz	r3, 8019756 <_isatty_r+0x1a>
 8019754:	6023      	str	r3, [r4, #0]
 8019756:	bd38      	pop	{r3, r4, r5, pc}
 8019758:	20002dd0 	.word	0x20002dd0

0801975c <_lseek_r>:
 801975c:	b538      	push	{r3, r4, r5, lr}
 801975e:	4d07      	ldr	r5, [pc, #28]	; (801977c <_lseek_r+0x20>)
 8019760:	4604      	mov	r4, r0
 8019762:	4608      	mov	r0, r1
 8019764:	4611      	mov	r1, r2
 8019766:	2200      	movs	r2, #0
 8019768:	602a      	str	r2, [r5, #0]
 801976a:	461a      	mov	r2, r3
 801976c:	f7e8 fe1e 	bl	80023ac <_lseek>
 8019770:	1c43      	adds	r3, r0, #1
 8019772:	d102      	bne.n	801977a <_lseek_r+0x1e>
 8019774:	682b      	ldr	r3, [r5, #0]
 8019776:	b103      	cbz	r3, 801977a <_lseek_r+0x1e>
 8019778:	6023      	str	r3, [r4, #0]
 801977a:	bd38      	pop	{r3, r4, r5, pc}
 801977c:	20002dd0 	.word	0x20002dd0

08019780 <_read_r>:
 8019780:	b538      	push	{r3, r4, r5, lr}
 8019782:	4d07      	ldr	r5, [pc, #28]	; (80197a0 <_read_r+0x20>)
 8019784:	4604      	mov	r4, r0
 8019786:	4608      	mov	r0, r1
 8019788:	4611      	mov	r1, r2
 801978a:	2200      	movs	r2, #0
 801978c:	602a      	str	r2, [r5, #0]
 801978e:	461a      	mov	r2, r3
 8019790:	f7e8 fdac 	bl	80022ec <_read>
 8019794:	1c43      	adds	r3, r0, #1
 8019796:	d102      	bne.n	801979e <_read_r+0x1e>
 8019798:	682b      	ldr	r3, [r5, #0]
 801979a:	b103      	cbz	r3, 801979e <_read_r+0x1e>
 801979c:	6023      	str	r3, [r4, #0]
 801979e:	bd38      	pop	{r3, r4, r5, pc}
 80197a0:	20002dd0 	.word	0x20002dd0

080197a4 <_init>:
 80197a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197a6:	bf00      	nop
 80197a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80197aa:	bc08      	pop	{r3}
 80197ac:	469e      	mov	lr, r3
 80197ae:	4770      	bx	lr

080197b0 <_fini>:
 80197b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197b2:	bf00      	nop
 80197b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80197b6:	bc08      	pop	{r3}
 80197b8:	469e      	mov	lr, r3
 80197ba:	4770      	bx	lr
