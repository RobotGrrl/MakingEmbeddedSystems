
AccioRange_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019d90  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002168  08019f40  08019f40  00029f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c0a8  0801c0a8  00030740  2**0
                  CONTENTS
  4 .ARM          00000008  0801c0a8  0801c0a8  0002c0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c0b0  0801c0b0  00030740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c0b0  0801c0b0  0002c0b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c0b4  0801c0b4  0002c0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000740  20000000  0801c0b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002890  20000740  0801c7f8  00030740  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002fd0  0801c7f8  00032fd0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030740  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046b48  00000000  00000000  00030770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008b79  00000000  00000000  000772b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000038f8  00000000  00000000  0007fe38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003548  00000000  00000000  00083730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003af07  00000000  00000000  00086c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046ca1  00000000  00000000  000c1b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013fd30  00000000  00000000  00108820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00248550  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fa0c  00000000  00000000  002485a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000740 	.word	0x20000740
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08019f28 	.word	0x08019f28

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000744 	.word	0x20000744
 80001ec:	08019f28 	.word	0x08019f28

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
 80005b4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005b6:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005b8:	4a2f      	ldr	r2, [pc, #188]	; (8000678 <MX_ADC1_Init+0xe4>)
 80005ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005bc:	4b2d      	ldr	r3, [pc, #180]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 80005c2:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005c4:	2208      	movs	r2, #8
 80005c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c8:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ce:	4b29      	ldr	r3, [pc, #164]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005d6:	2204      	movs	r2, #4
 80005d8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005da:	4b26      	ldr	r3, [pc, #152]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005dc:	2200      	movs	r2, #0
 80005de:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e0:	4b24      	ldr	r3, [pc, #144]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80005e6:	4b23      	ldr	r3, [pc, #140]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005fa:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_ADC1_Init+0xe0>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000600:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000602:	2200      	movs	r2, #0
 8000604:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_ADC1_Init+0xe0>)
 800060a:	2200      	movs	r2, #0
 800060c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000616:	4817      	ldr	r0, [pc, #92]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000618:	f00a fe06 	bl	800b228 <HAL_ADC_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000622:	f001 fb31 	bl	8001c88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4619      	mov	r1, r3
 8000630:	4810      	ldr	r0, [pc, #64]	; (8000674 <MX_ADC1_Init+0xe0>)
 8000632:	f00b fdab 	bl	800c18c <HAL_ADCEx_MultiModeConfigChannel>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800063c:	f001 fb24 	bl	8001c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_ADC1_Init+0xe8>)
 8000642:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000644:	2306      	movs	r3, #6
 8000646:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800064c:	237f      	movs	r3, #127	; 0x7f
 800064e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000650:	2304      	movs	r3, #4
 8000652:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_ADC1_Init+0xe0>)
 800065e:	f00b f8dd 	bl	800b81c <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000668:	f001 fb0e 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3728      	adds	r7, #40	; 0x28
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	2000075c 	.word	0x2000075c
 8000678:	50040000 	.word	0x50040000
 800067c:	36902000 	.word	0x36902000

08000680 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000686:	463b      	mov	r3, r7
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
 8000694:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000696:	4b29      	ldr	r3, [pc, #164]	; (800073c <MX_ADC2_Init+0xbc>)
 8000698:	4a29      	ldr	r2, [pc, #164]	; (8000740 <MX_ADC2_Init+0xc0>)
 800069a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <MX_ADC2_Init+0xbc>)
 800069e:	2200      	movs	r2, #0
 80006a0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006a2:	4b26      	ldr	r3, [pc, #152]	; (800073c <MX_ADC2_Init+0xbc>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a8:	4b24      	ldr	r3, [pc, #144]	; (800073c <MX_ADC2_Init+0xbc>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <MX_ADC2_Init+0xbc>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b4:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_ADC2_Init+0xbc>)
 80006b6:	2204      	movs	r2, #4
 80006b8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006ba:	4b20      	ldr	r3, [pc, #128]	; (800073c <MX_ADC2_Init+0xbc>)
 80006bc:	2200      	movs	r2, #0
 80006be:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006c0:	4b1e      	ldr	r3, [pc, #120]	; (800073c <MX_ADC2_Init+0xbc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_ADC2_Init+0xbc>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_ADC2_Init+0xbc>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006d4:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_ADC2_Init+0xbc>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <MX_ADC2_Init+0xbc>)
 80006dc:	2200      	movs	r2, #0
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_ADC2_Init+0xbc>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_ADC2_Init+0xbc>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_ADC2_Init+0xbc>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006f6:	4811      	ldr	r0, [pc, #68]	; (800073c <MX_ADC2_Init+0xbc>)
 80006f8:	f00a fd96 	bl	800b228 <HAL_ADC_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000702:	f001 fac1 	bl	8001c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_ADC2_Init+0xc4>)
 8000708:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800070a:	2306      	movs	r3, #6
 800070c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000712:	237f      	movs	r3, #127	; 0x7f
 8000714:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000716:	2304      	movs	r3, #4
 8000718:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800071e:	463b      	mov	r3, r7
 8000720:	4619      	mov	r1, r3
 8000722:	4806      	ldr	r0, [pc, #24]	; (800073c <MX_ADC2_Init+0xbc>)
 8000724:	f00b f87a 	bl	800b81c <HAL_ADC_ConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800072e:	f001 faab 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	3718      	adds	r7, #24
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200007c4 	.word	0x200007c4
 8000740:	50040100 	.word	0x50040100
 8000744:	25b00200 	.word	0x25b00200

08000748 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800074e:	463b      	mov	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
 800075c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800075e:	4b29      	ldr	r3, [pc, #164]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000760:	4a29      	ldr	r2, [pc, #164]	; (8000808 <MX_ADC3_Init+0xc0>)
 8000762:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <MX_ADC3_Init+0xbc>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000776:	4b23      	ldr	r3, [pc, #140]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077c:	4b21      	ldr	r3, [pc, #132]	; (8000804 <MX_ADC3_Init+0xbc>)
 800077e:	2204      	movs	r2, #4
 8000780:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000784:	2200      	movs	r2, #0
 8000786:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_ADC3_Init+0xbc>)
 800078a:	2200      	movs	r2, #0
 800078c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000790:	2201      	movs	r2, #1
 8000792:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_ADC3_Init+0xbc>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_ADC3_Init+0xbc>)
 800079e:	2200      	movs	r2, #0
 80007a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007be:	4811      	ldr	r0, [pc, #68]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007c0:	f00a fd32 	bl	800b228 <HAL_ADC_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80007ca:	f001 fa5d 	bl	8001c88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_ADC3_Init+0xc4>)
 80007d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007d2:	2306      	movs	r3, #6
 80007d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007da:	237f      	movs	r3, #127	; 0x7f
 80007dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007de:	2304      	movs	r3, #4
 80007e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <MX_ADC3_Init+0xbc>)
 80007ec:	f00b f816 	bl	800b81c <HAL_ADC_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80007f6:	f001 fa47 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	2000082c 	.word	0x2000082c
 8000808:	50040200 	.word	0x50040200
 800080c:	36902000 	.word	0x36902000

08000810 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08e      	sub	sp, #56	; 0x38
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a59      	ldr	r2, [pc, #356]	; (8000994 <HAL_ADC_MspInit+0x184>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d12d      	bne.n	800088e <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000832:	4b59      	ldr	r3, [pc, #356]	; (8000998 <HAL_ADC_MspInit+0x188>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	3301      	adds	r3, #1
 8000838:	4a57      	ldr	r2, [pc, #348]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800083a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800083c:	4b56      	ldr	r3, [pc, #344]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d10b      	bne.n	800085c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000844:	4b55      	ldr	r3, [pc, #340]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000848:	4a54      	ldr	r2, [pc, #336]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800084a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800084e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000850:	4b52      	ldr	r3, [pc, #328]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000858:	623b      	str	r3, [r7, #32]
 800085a:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800085c:	4b4f      	ldr	r3, [pc, #316]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800085e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000860:	4a4e      	ldr	r2, [pc, #312]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000862:	f043 0304 	orr.w	r3, r3, #4
 8000866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000868:	4b4c      	ldr	r3, [pc, #304]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800086a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086c:	f003 0304 	and.w	r3, r3, #4
 8000870:	61fb      	str	r3, [r7, #28]
 8000872:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 8000874:	2318      	movs	r3, #24
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000878:	230b      	movs	r3, #11
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000880:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000884:	4619      	mov	r1, r3
 8000886:	4846      	ldr	r0, [pc, #280]	; (80009a0 <HAL_ADC_MspInit+0x190>)
 8000888:	f00c f806 	bl	800c898 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800088c:	e07e      	b.n	800098c <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC2)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a44      	ldr	r2, [pc, #272]	; (80009a4 <HAL_ADC_MspInit+0x194>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d146      	bne.n	8000926 <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000898:	4b3f      	ldr	r3, [pc, #252]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	3301      	adds	r3, #1
 800089e:	4a3e      	ldr	r2, [pc, #248]	; (8000998 <HAL_ADC_MspInit+0x188>)
 80008a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80008a2:	4b3d      	ldr	r3, [pc, #244]	; (8000998 <HAL_ADC_MspInit+0x188>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d10b      	bne.n	80008c2 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80008aa:	4b3c      	ldr	r3, [pc, #240]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4a3b      	ldr	r2, [pc, #236]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4b39      	ldr	r3, [pc, #228]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	4b36      	ldr	r3, [pc, #216]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4a35      	ldr	r2, [pc, #212]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4b33      	ldr	r3, [pc, #204]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	617b      	str	r3, [r7, #20]
 80008d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b30      	ldr	r3, [pc, #192]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a2f      	ldr	r2, [pc, #188]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b2d      	ldr	r3, [pc, #180]	; (800099c <HAL_ADC_MspInit+0x18c>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 80008f2:	2303      	movs	r3, #3
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008f6:	230b      	movs	r3, #11
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	4619      	mov	r1, r3
 8000904:	4826      	ldr	r0, [pc, #152]	; (80009a0 <HAL_ADC_MspInit+0x190>)
 8000906:	f00b ffc7 	bl	800c898 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 800090a:	2312      	movs	r3, #18
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800090e:	230b      	movs	r3, #11
 8000910:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	4619      	mov	r1, r3
 800091c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000920:	f00b ffba 	bl	800c898 <HAL_GPIO_Init>
}
 8000924:	e032      	b.n	800098c <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC3)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a1f      	ldr	r2, [pc, #124]	; (80009a8 <HAL_ADC_MspInit+0x198>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d12d      	bne.n	800098c <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <HAL_ADC_MspInit+0x188>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	4a18      	ldr	r2, [pc, #96]	; (8000998 <HAL_ADC_MspInit+0x188>)
 8000938:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <HAL_ADC_MspInit+0x188>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d10b      	bne.n	800095a <HAL_ADC_MspInit+0x14a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a15      	ldr	r2, [pc, #84]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000948:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <HAL_ADC_MspInit+0x18c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a0f      	ldr	r2, [pc, #60]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000960:	f043 0320 	orr.w	r3, r3, #32
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <HAL_ADC_MspInit+0x18c>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0320 	and.w	r3, r3, #32
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000972:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000976:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000978:	230b      	movs	r3, #11
 800097a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	4619      	mov	r1, r3
 8000986:	4809      	ldr	r0, [pc, #36]	; (80009ac <HAL_ADC_MspInit+0x19c>)
 8000988:	f00b ff86 	bl	800c898 <HAL_GPIO_Init>
}
 800098c:	bf00      	nop
 800098e:	3738      	adds	r7, #56	; 0x38
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	50040000 	.word	0x50040000
 8000998:	20000894 	.word	0x20000894
 800099c:	40021000 	.word	0x40021000
 80009a0:	48000800 	.word	0x48000800
 80009a4:	50040100 	.word	0x50040100
 80009a8:	50040200 	.word	0x50040200
 80009ac:	48001400 	.word	0x48001400

080009b0 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80009b4:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009b6:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <MX_DCMI_Init+0x64>)
 80009b8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009bc:	2200      	movs	r2, #0
 80009be:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80009d8:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_DCMI_Init+0x60>)
 80009fe:	f00b fdb9 	bl	800c574 <HAL_DCMI_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000a08:	f001 f93e 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000898 	.word	0x20000898
 8000a14:	50050000 	.word	0x50050000

08000a18 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a33      	ldr	r2, [pc, #204]	; (8000b04 <HAL_DCMI_MspInit+0xec>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d160      	bne.n	8000afc <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000a3a:	4b33      	ldr	r3, [pc, #204]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a32      	ldr	r2, [pc, #200]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b30      	ldr	r3, [pc, #192]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4e:	61bb      	str	r3, [r7, #24]
 8000a50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a52:	4b2d      	ldr	r3, [pc, #180]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a2c      	ldr	r2, [pc, #176]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a6a:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a26      	ldr	r2, [pc, #152]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4a20      	ldr	r2, [pc, #128]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a88:	f043 0310 	orr.w	r3, r3, #16
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <HAL_DCMI_MspInit+0xf0>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0310 	and.w	r3, r3, #16
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 8000a9a:	f645 7320 	movw	r3, #24352	; 0x5f20
 8000a9e:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000aac:	230a      	movs	r3, #10
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4815      	ldr	r0, [pc, #84]	; (8000b0c <HAL_DCMI_MspInit+0xf4>)
 8000ab8:	f00b feee 	bl	800c898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000abc:	23b0      	movs	r3, #176	; 0xb0
 8000abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000acc:	230a      	movs	r3, #10
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ad0:	f107 031c 	add.w	r3, r7, #28
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480e      	ldr	r0, [pc, #56]	; (8000b10 <HAL_DCMI_MspInit+0xf8>)
 8000ad8:	f00b fede 	bl	800c898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8000adc:	2320      	movs	r3, #32
 8000ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000aec:	230a      	movs	r3, #10
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	4807      	ldr	r0, [pc, #28]	; (8000b14 <HAL_DCMI_MspInit+0xfc>)
 8000af8:	f00b fece 	bl	800c898 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000afc:	bf00      	nop
 8000afe:	3730      	adds	r7, #48	; 0x30
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	50050000 	.word	0x50050000
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	48001c00 	.word	0x48001c00
 8000b10:	48002000 	.word	0x48002000
 8000b14:	48001000 	.word	0x48001000

08000b18 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel2;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000b1c:	4b30      	ldr	r3, [pc, #192]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b1e:	4a31      	ldr	r2, [pc, #196]	; (8000be4 <MX_DFSDM1_Init+0xcc>)
 8000b20:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000b22:	4b2f      	ldr	r3, [pc, #188]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b28:	4b2d      	ldr	r3, [pc, #180]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000b2e:	4b2c      	ldr	r3, [pc, #176]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b30:	2202      	movs	r2, #2
 8000b32:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b34:	4b2a      	ldr	r3, [pc, #168]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b3a:	4b29      	ldr	r3, [pc, #164]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000b40:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000b46:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b4c:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b4e:	2204      	movs	r2, #4
 8000b50:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b52:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000b58:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000b5e:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000b64:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000b6a:	481d      	ldr	r0, [pc, #116]	; (8000be0 <MX_DFSDM1_Init+0xc8>)
 8000b6c:	f00b fd88 	bl	800c680 <HAL_DFSDM_ChannelInit>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000b76:	f001 f887 	bl	8001c88 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b7c:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <MX_DFSDM1_Init+0xd4>)
 8000b7e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000b80:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000b8c:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b8e:	2202      	movs	r2, #2
 8000b90:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bae:	2204      	movs	r2, #4
 8000bb0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000bca:	4807      	ldr	r0, [pc, #28]	; (8000be8 <MX_DFSDM1_Init+0xd0>)
 8000bcc:	f00b fd58 	bl	800c680 <HAL_DFSDM_ChannelInit>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 8000bd6:	f001 f857 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200008fc 	.word	0x200008fc
 8000be4:	40016020 	.word	0x40016020
 8000be8:	20000934 	.word	0x20000934
 8000bec:	40016040 	.word	0x40016040

08000bf0 <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b0ae      	sub	sp, #184	; 0xb8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c08:	f107 0318 	add.w	r3, r7, #24
 8000c0c:	228c      	movs	r2, #140	; 0x8c
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f018 f975 	bl	8018f00 <memset>
  if(DFSDM1_Init == 0)
 8000c16:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d163      	bne.n	8000ce6 <HAL_DFSDM_ChannelMspInit+0xf6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c22:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c2a:	f107 0318 	add.w	r3, r7, #24
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f00f fc58 	bl	80104e4 <HAL_RCCEx_PeriphCLKConfig>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000c3a:	f001 f825 	bl	8001c88 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000c3e:	4b2d      	ldr	r3, [pc, #180]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c42:	4a2c      	ldr	r2, [pc, #176]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c48:	6613      	str	r3, [r2, #96]	; 0x60
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c56:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	4a26      	ldr	r2, [pc, #152]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c62:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	4a20      	ldr	r2, [pc, #128]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8000c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8000c86:	2384      	movs	r3, #132	; 0x84
 8000c88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000c9e:	2306      	movs	r3, #6
 8000ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4813      	ldr	r0, [pc, #76]	; (8000cf8 <HAL_DFSDM_ChannelMspInit+0x108>)
 8000cac:	f00b fdf4 	bl	800c898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000cca:	2306      	movs	r3, #6
 8000ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4809      	ldr	r0, [pc, #36]	; (8000cfc <HAL_DFSDM_ChannelMspInit+0x10c>)
 8000cd8:	f00b fdde 	bl	800c898 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	4a03      	ldr	r2, [pc, #12]	; (8000cf0 <HAL_DFSDM_ChannelMspInit+0x100>)
 8000ce4:	6013      	str	r3, [r2, #0]
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	37b8      	adds	r7, #184	; 0xb8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2000096c 	.word	0x2000096c
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48000800 	.word	0x48000800
 8000cfc:	48000400 	.word	0x48000400

08000d00 <MX_FMC_Init>:
SRAM_HandleTypeDef hsram1;
SRAM_HandleTypeDef hsram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000d06:	463b      	mov	r3, r7
 8000d08:	2220      	movs	r2, #32
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f018 f8f7 	bl	8018f00 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000d12:	4b4f      	ldr	r3, [pc, #316]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d14:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000d18:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000d1a:	4b4d      	ldr	r3, [pc, #308]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d1c:	4a4d      	ldr	r2, [pc, #308]	; (8000e54 <MX_FMC_Init+0x154>)
 8000d1e:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8000d20:	4b4b      	ldr	r3, [pc, #300]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d22:	2202      	movs	r2, #2
 8000d24:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000d26:	4b4a      	ldr	r3, [pc, #296]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000d2c:	4b48      	ldr	r3, [pc, #288]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000d32:	4b47      	ldr	r3, [pc, #284]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d34:	2210      	movs	r2, #16
 8000d36:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000d38:	4b45      	ldr	r3, [pc, #276]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000d3e:	4b44      	ldr	r3, [pc, #272]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000d44:	4b42      	ldr	r3, [pc, #264]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000d4a:	4b41      	ldr	r3, [pc, #260]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000d50:	4b3f      	ldr	r3, [pc, #252]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000d56:	4b3e      	ldr	r3, [pc, #248]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000d5c:	4b3c      	ldr	r3, [pc, #240]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000d62:	4b3b      	ldr	r3, [pc, #236]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000d68:	4b39      	ldr	r3, [pc, #228]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000d6e:	4b38      	ldr	r3, [pc, #224]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000d74:	4b36      	ldr	r3, [pc, #216]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000d7a:	230f      	movs	r3, #15
 8000d7c:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000d7e:	230f      	movs	r3, #15
 8000d80:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000d82:	23ff      	movs	r3, #255	; 0xff
 8000d84:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8000d86:	230f      	movs	r3, #15
 8000d88:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000d8a:	2310      	movs	r3, #16
 8000d8c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000d8e:	2311      	movs	r3, #17
 8000d90:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000d96:	463b      	mov	r3, r7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	482c      	ldr	r0, [pc, #176]	; (8000e50 <MX_FMC_Init+0x150>)
 8000d9e:	f011 ff76 	bl	8012c8e <HAL_SRAM_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 8000da8:	f000 ff6e 	bl	8001c88 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8000dac:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dae:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000db2:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000db4:	4b28      	ldr	r3, [pc, #160]	; (8000e58 <MX_FMC_Init+0x158>)
 8000db6:	4a27      	ldr	r2, [pc, #156]	; (8000e54 <MX_FMC_Init+0x154>)
 8000db8:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 8000dba:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000dc0:	4b25      	ldr	r3, [pc, #148]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000dc6:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000dcc:	4b22      	ldr	r3, [pc, #136]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dce:	2210      	movs	r2, #16
 8000dd0:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000dde:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <MX_FMC_Init+0x158>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000de4:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_FMC_Init+0x158>)
 8000de6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dea:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000dec:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000df2:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <MX_FMC_Init+0x158>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_FMC_Init+0x158>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000e16:	230f      	movs	r3, #15
 8000e18:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000e1e:	23ff      	movs	r3, #255	; 0xff
 8000e20:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8000e22:	230f      	movs	r3, #15
 8000e24:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000e26:	2310      	movs	r3, #16
 8000e28:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000e2a:	2311      	movs	r3, #17
 8000e2c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000e32:	463b      	mov	r3, r7
 8000e34:	2200      	movs	r2, #0
 8000e36:	4619      	mov	r1, r3
 8000e38:	4807      	ldr	r0, [pc, #28]	; (8000e58 <MX_FMC_Init+0x158>)
 8000e3a:	f011 ff28 	bl	8012c8e <HAL_SRAM_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 8000e44:	f000 ff20 	bl	8001c88 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e48:	bf00      	nop
 8000e4a:	3720      	adds	r7, #32
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000970 	.word	0x20000970
 8000e54:	a0000104 	.word	0xa0000104
 8000e58:	200009c0 	.word	0x200009c0

08000e5c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000e70:	4b2b      	ldr	r3, [pc, #172]	; (8000f20 <HAL_FMC_MspInit+0xc4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d14f      	bne.n	8000f18 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 8000e78:	4b29      	ldr	r3, [pc, #164]	; (8000f20 <HAL_FMC_MspInit+0xc4>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e7e:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <HAL_FMC_MspInit+0xc8>)
 8000e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e82:	4a28      	ldr	r2, [pc, #160]	; (8000f24 <HAL_FMC_MspInit+0xc8>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6513      	str	r3, [r2, #80]	; 0x50
 8000e8a:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <HAL_FMC_MspInit+0xc8>)
 8000e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 8000e96:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000e9a:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ea8:	230c      	movs	r3, #12
 8000eaa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	481d      	ldr	r0, [pc, #116]	; (8000f28 <HAL_FMC_MspInit+0xcc>)
 8000eb2:	f00b fcf1 	bl	800c898 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 8000eb6:	f240 233f 	movw	r3, #575	; 0x23f
 8000eba:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ec8:	230c      	movs	r3, #12
 8000eca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4816      	ldr	r0, [pc, #88]	; (8000f2c <HAL_FMC_MspInit+0xd0>)
 8000ed2:	f00b fce1 	bl	800c898 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 8000ed6:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8000eda:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000edc:	2302      	movs	r3, #2
 8000ede:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ee8:	230c      	movs	r3, #12
 8000eea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480f      	ldr	r0, [pc, #60]	; (8000f30 <HAL_FMC_MspInit+0xd4>)
 8000ef2:	f00b fcd1 	bl	800c898 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8000ef6:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000efa:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efc:	2302      	movs	r3, #2
 8000efe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f04:	2303      	movs	r3, #3
 8000f06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f08:	230c      	movs	r3, #12
 8000f0a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4808      	ldr	r0, [pc, #32]	; (8000f34 <HAL_FMC_MspInit+0xd8>)
 8000f12:	f00b fcc1 	bl	800c898 <HAL_GPIO_Init>
 8000f16:	e000      	b.n	8000f1a <HAL_FMC_MspInit+0xbe>
    return;
 8000f18:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000a10 	.word	0x20000a10
 8000f24:	40021000 	.word	0x40021000
 8000f28:	48001000 	.word	0x48001000
 8000f2c:	48001800 	.word	0x48001800
 8000f30:	48000c00 	.word	0x48000c00
 8000f34:	48001400 	.word	0x48001400

08000f38 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000f40:	f7ff ff8c 	bl	8000e5c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <MX_GPIO_Init>:
     PH13   ------> TIM8_CH1N
     PB9   ------> S_TIM4_CH4
     PA8   ------> LPTIM2_OUT
*/
void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08e      	sub	sp, #56	; 0x38
 8000f50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f62:	4bb3      	ldr	r3, [pc, #716]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4ab2      	ldr	r2, [pc, #712]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4bb0      	ldr	r3, [pc, #704]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f76:	623b      	str	r3, [r7, #32]
 8000f78:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7a:	4bad      	ldr	r3, [pc, #692]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4aac      	ldr	r2, [pc, #688]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4baa      	ldr	r3, [pc, #680]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8e:	61fb      	str	r3, [r7, #28]
 8000f90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f92:	4ba7      	ldr	r3, [pc, #668]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4aa6      	ldr	r2, [pc, #664]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000f98:	f043 0310 	orr.w	r3, r3, #16
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4ba4      	ldr	r3, [pc, #656]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0310 	and.w	r3, r3, #16
 8000fa6:	61bb      	str	r3, [r7, #24]
 8000fa8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4ba1      	ldr	r3, [pc, #644]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4aa0      	ldr	r2, [pc, #640]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4b9e      	ldr	r3, [pc, #632]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	4b9b      	ldr	r3, [pc, #620]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	4a9a      	ldr	r2, [pc, #616]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fce:	4b98      	ldr	r3, [pc, #608]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fda:	4b95      	ldr	r3, [pc, #596]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4a94      	ldr	r2, [pc, #592]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fe0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4b92      	ldr	r3, [pc, #584]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000ff2:	f00e fb1f 	bl	800f634 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff6:	4b8e      	ldr	r3, [pc, #568]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a8d      	ldr	r2, [pc, #564]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b8b      	ldr	r3, [pc, #556]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	4b88      	ldr	r3, [pc, #544]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a87      	ldr	r2, [pc, #540]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b85      	ldr	r3, [pc, #532]	; (8001230 <MX_GPIO_Init+0x2e4>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001026:	4b82      	ldr	r3, [pc, #520]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4a81      	ldr	r2, [pc, #516]	; (8001230 <MX_GPIO_Init+0x2e4>)
 800102c:	f043 0320 	orr.w	r3, r3, #32
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4b7f      	ldr	r3, [pc, #508]	; (8001230 <MX_GPIO_Init+0x2e4>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0320 	and.w	r3, r3, #32
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	2101      	movs	r1, #1
 8001042:	487c      	ldr	r0, [pc, #496]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8001044:	f00b feac 	bl	800cda0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	2143      	movs	r1, #67	; 0x43
 800104c:	487a      	ldr	r0, [pc, #488]	; (8001238 <MX_GPIO_Init+0x2ec>)
 800104e:	f00b fea7 	bl	800cda0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2140      	movs	r1, #64	; 0x40
 8001056:	4879      	ldr	r0, [pc, #484]	; (800123c <MX_GPIO_Init+0x2f0>)
 8001058:	f00b fea2 	bl	800cda0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ARD_D7_GPIO_Port, ARD_D7_Pin, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	2140      	movs	r1, #64	; 0x40
 8001060:	4877      	ldr	r0, [pc, #476]	; (8001240 <MX_GPIO_Init+0x2f4>)
 8001062:	f00b fe9d 	bl	800cda0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106c:	4875      	ldr	r0, [pc, #468]	; (8001244 <MX_GPIO_Init+0x2f8>)
 800106e:	f00b fe97 	bl	800cda0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin;
 8001072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001078:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800107e:	2302      	movs	r3, #2
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_DOWN_GPIO_Port, &GPIO_InitStruct);
 8001082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001086:	4619      	mov	r1, r3
 8001088:	486a      	ldr	r0, [pc, #424]	; (8001234 <MX_GPIO_Init+0x2e8>)
 800108a:	f00b fc05 	bl	800c898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 800108e:	2304      	movs	r3, #4
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001092:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a0:	4619      	mov	r1, r3
 80010a2:	4865      	ldr	r0, [pc, #404]	; (8001238 <MX_GPIO_Init+0x2ec>)
 80010a4:	f00b fbf8 	bl	800c898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80010a8:	2301      	movs	r3, #1
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010bc:	4619      	mov	r1, r3
 80010be:	485d      	ldr	r0, [pc, #372]	; (8001234 <MX_GPIO_Init+0x2e8>)
 80010c0:	f00b fbea 	bl	800c898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_LEFT_Pin;
 80010c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010ca:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010d0:	2302      	movs	r3, #2
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_LEFT_GPIO_Port, &GPIO_InitStruct);
 80010d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d8:	4619      	mov	r1, r3
 80010da:	4856      	ldr	r0, [pc, #344]	; (8001234 <MX_GPIO_Init+0x2e8>)
 80010dc:	f00b fbdc 	bl	800c898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80010e0:	2340      	movs	r3, #64	; 0x40
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80010f0:	2303      	movs	r3, #3
 80010f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f8:	4619      	mov	r1, r3
 80010fa:	484e      	ldr	r0, [pc, #312]	; (8001234 <MX_GPIO_Init+0x2e8>)
 80010fc:	f00b fbcc 	bl	800c898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 8001100:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001112:	2303      	movs	r3, #3
 8001114:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111a:	4619      	mov	r1, r3
 800111c:	4846      	ldr	r0, [pc, #280]	; (8001238 <MX_GPIO_Init+0x2ec>)
 800111e:	f00b fbbb 	bl	800c898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_UP_Pin;
 8001122:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001128:	2300      	movs	r3, #0
 800112a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800112c:	2302      	movs	r3, #2
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_UP_GPIO_Port, &GPIO_InitStruct);
 8001130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001134:	4619      	mov	r1, r3
 8001136:	483f      	ldr	r0, [pc, #252]	; (8001234 <MX_GPIO_Init+0x2e8>)
 8001138:	f00b fbae 	bl	800c898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 800113c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2300      	movs	r3, #0
 800114c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800114e:	2302      	movs	r3, #2
 8001150:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001156:	4619      	mov	r1, r3
 8001158:	483a      	ldr	r0, [pc, #232]	; (8001244 <MX_GPIO_Init+0x2f8>)
 800115a:	f00b fb9d 	bl	800c898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001162:	2300      	movs	r3, #0
 8001164:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	4619      	mov	r1, r3
 8001170:	4831      	ldr	r0, [pc, #196]	; (8001238 <MX_GPIO_Init+0x2ec>)
 8001172:	f00b fb91 	bl	800c898 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 8001176:	2343      	movs	r3, #67	; 0x43
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118a:	4619      	mov	r1, r3
 800118c:	482a      	ldr	r0, [pc, #168]	; (8001238 <MX_GPIO_Init+0x2ec>)
 800118e:	f00b fb83 	bl	800c898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 8001192:	2340      	movs	r3, #64	; 0x40
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a6:	4619      	mov	r1, r3
 80011a8:	4824      	ldr	r0, [pc, #144]	; (800123c <MX_GPIO_Init+0x2f0>)
 80011aa:	f00b fb75 	bl	800c898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 80011ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c2:	4619      	mov	r1, r3
 80011c4:	481e      	ldr	r0, [pc, #120]	; (8001240 <MX_GPIO_Init+0x2f4>)
 80011c6:	f00b fb67 	bl	800c898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 80011ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 80011dc:	230e      	movs	r3, #14
 80011de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 80011e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e4:	4619      	mov	r1, r3
 80011e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ea:	f00b fb55 	bl	800c898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80011ee:	2340      	movs	r3, #64	; 0x40
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001202:	4619      	mov	r1, r3
 8001204:	480e      	ldr	r0, [pc, #56]	; (8001240 <MX_GPIO_Init+0x2f4>)
 8001206:	f00b fb47 	bl	800c898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 800120a:	2320      	movs	r3, #32
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800120e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8001218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121c:	4619      	mov	r1, r3
 800121e:	4807      	ldr	r0, [pc, #28]	; (800123c <MX_GPIO_Init+0x2f0>)
 8001220:	f00b fb3a 	bl	800c898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8001224:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800122a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800122e:	e00b      	b.n	8001248 <MX_GPIO_Init+0x2fc>
 8001230:	40021000 	.word	0x40021000
 8001234:	48002000 	.word	0x48002000
 8001238:	48001c00 	.word	0x48001c00
 800123c:	48000800 	.word	0x48000800
 8001240:	48001800 	.word	0x48001800
 8001244:	48000400 	.word	0x48000400
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800124a:	2302      	movs	r3, #2
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800124e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001252:	4619      	mov	r1, r3
 8001254:	4818      	ldr	r0, [pc, #96]	; (80012b8 <MX_GPIO_Init+0x36c>)
 8001256:	f00b fb1f 	bl	800c898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 800125a:	2304      	movs	r3, #4
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125e:	2300      	movs	r3, #0
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126a:	4619      	mov	r1, r3
 800126c:	4813      	ldr	r0, [pc, #76]	; (80012bc <MX_GPIO_Init+0x370>)
 800126e:	f00b fb13 	bl	800c898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001272:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001278:	2311      	movs	r3, #17
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001288:	4619      	mov	r1, r3
 800128a:	480c      	ldr	r0, [pc, #48]	; (80012bc <MX_GPIO_Init+0x370>)
 800128c:	f00b fb04 	bl	800c898 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	2017      	movs	r0, #23
 8001296:	f00b f928 	bl	800c4ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800129a:	2017      	movs	r0, #23
 800129c:	f00b f941 	bl	800c522 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	2028      	movs	r0, #40	; 0x28
 80012a6:	f00b f920 	bl	800c4ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012aa:	2028      	movs	r0, #40	; 0x28
 80012ac:	f00b f939 	bl	800c522 <HAL_NVIC_EnableIRQ>

}
 80012b0:	bf00      	nop
 80012b2:	3738      	adds	r7, #56	; 0x38
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	48001400 	.word	0x48001400
 80012bc:	48000400 	.word	0x48000400

080012c0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c4:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <MX_I2C1_Init+0x74>)
 80012c6:	4a1c      	ldr	r2, [pc, #112]	; (8001338 <MX_I2C1_Init+0x78>)
 80012c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <MX_I2C1_Init+0x74>)
 80012cc:	4a1b      	ldr	r2, [pc, #108]	; (800133c <MX_I2C1_Init+0x7c>)
 80012ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <MX_I2C1_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d6:	4b17      	ldr	r3, [pc, #92]	; (8001334 <MX_I2C1_Init+0x74>)
 80012d8:	2201      	movs	r2, #1
 80012da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <MX_I2C1_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <MX_I2C1_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <MX_I2C1_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <MX_I2C1_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_I2C1_Init+0x74>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012fa:	480e      	ldr	r0, [pc, #56]	; (8001334 <MX_I2C1_Init+0x74>)
 80012fc:	f00b fd80 	bl	800ce00 <HAL_I2C_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001306:	f000 fcbf 	bl	8001c88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800130a:	2100      	movs	r1, #0
 800130c:	4809      	ldr	r0, [pc, #36]	; (8001334 <MX_I2C1_Init+0x74>)
 800130e:	f00c fe83 	bl	800e018 <HAL_I2CEx_ConfigAnalogFilter>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001318:	f000 fcb6 	bl	8001c88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800131c:	2100      	movs	r1, #0
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_I2C1_Init+0x74>)
 8001320:	f00c fec5 	bl	800e0ae <HAL_I2CEx_ConfigDigitalFilter>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800132a:	f000 fcad 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000a14 	.word	0x20000a14
 8001338:	40005400 	.word	0x40005400
 800133c:	20303e5d 	.word	0x20303e5d

08001340 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <MX_I2C2_Init+0x74>)
 8001346:	4a1c      	ldr	r2, [pc, #112]	; (80013b8 <MX_I2C2_Init+0x78>)
 8001348:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <MX_I2C2_Init+0x74>)
 800134c:	4a1b      	ldr	r2, [pc, #108]	; (80013bc <MX_I2C2_Init+0x7c>)
 800134e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001350:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <MX_I2C2_Init+0x74>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001356:	4b17      	ldr	r3, [pc, #92]	; (80013b4 <MX_I2C2_Init+0x74>)
 8001358:	2201      	movs	r2, #1
 800135a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800135c:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <MX_I2C2_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001362:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <MX_I2C2_Init+0x74>)
 8001364:	2200      	movs	r2, #0
 8001366:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <MX_I2C2_Init+0x74>)
 800136a:	2200      	movs	r2, #0
 800136c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_I2C2_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <MX_I2C2_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800137a:	480e      	ldr	r0, [pc, #56]	; (80013b4 <MX_I2C2_Init+0x74>)
 800137c:	f00b fd40 	bl	800ce00 <HAL_I2C_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001386:	f000 fc7f 	bl	8001c88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800138a:	2100      	movs	r1, #0
 800138c:	4809      	ldr	r0, [pc, #36]	; (80013b4 <MX_I2C2_Init+0x74>)
 800138e:	f00c fe43 	bl	800e018 <HAL_I2CEx_ConfigAnalogFilter>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001398:	f000 fc76 	bl	8001c88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800139c:	2100      	movs	r1, #0
 800139e:	4805      	ldr	r0, [pc, #20]	; (80013b4 <MX_I2C2_Init+0x74>)
 80013a0:	f00c fe85 	bl	800e0ae <HAL_I2CEx_ConfigDigitalFilter>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80013aa:	f000 fc6d 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000a68 	.word	0x20000a68
 80013b8:	40005800 	.word	0x40005800
 80013bc:	20303e5d 	.word	0x20303e5d

080013c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b0b0      	sub	sp, #192	; 0xc0
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013d8:	f107 0320 	add.w	r3, r7, #32
 80013dc:	228c      	movs	r2, #140	; 0x8c
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f017 fd8d 	bl	8018f00 <memset>
  if(i2cHandle->Instance==I2C1)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a53      	ldr	r2, [pc, #332]	; (8001538 <HAL_I2C_MspInit+0x178>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d13c      	bne.n	800146a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013f0:	2340      	movs	r3, #64	; 0x40
 80013f2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f8:	f107 0320 	add.w	r3, r7, #32
 80013fc:	4618      	mov	r0, r3
 80013fe:	f00f f871 	bl	80104e4 <HAL_RCCEx_PeriphCLKConfig>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001408:	f000 fc3e 	bl	8001c88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140c:	4b4b      	ldr	r3, [pc, #300]	; (800153c <HAL_I2C_MspInit+0x17c>)
 800140e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001410:	4a4a      	ldr	r2, [pc, #296]	; (800153c <HAL_I2C_MspInit+0x17c>)
 8001412:	f043 0302 	orr.w	r3, r3, #2
 8001416:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001418:	4b48      	ldr	r3, [pc, #288]	; (800153c <HAL_I2C_MspInit+0x17c>)
 800141a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	61fb      	str	r3, [r7, #28]
 8001422:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001424:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001428:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800142c:	2312      	movs	r3, #18
 800142e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001432:	2301      	movs	r3, #1
 8001434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800143e:	2304      	movs	r3, #4
 8001440:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001444:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001448:	4619      	mov	r1, r3
 800144a:	483d      	ldr	r0, [pc, #244]	; (8001540 <HAL_I2C_MspInit+0x180>)
 800144c:	f00b fa24 	bl	800c898 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001450:	4b3a      	ldr	r3, [pc, #232]	; (800153c <HAL_I2C_MspInit+0x17c>)
 8001452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001454:	4a39      	ldr	r2, [pc, #228]	; (800153c <HAL_I2C_MspInit+0x17c>)
 8001456:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800145a:	6593      	str	r3, [r2, #88]	; 0x58
 800145c:	4b37      	ldr	r3, [pc, #220]	; (800153c <HAL_I2C_MspInit+0x17c>)
 800145e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001464:	61bb      	str	r3, [r7, #24]
 8001466:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001468:	e061      	b.n	800152e <HAL_I2C_MspInit+0x16e>
  else if(i2cHandle->Instance==I2C2)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a35      	ldr	r2, [pc, #212]	; (8001544 <HAL_I2C_MspInit+0x184>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d15c      	bne.n	800152e <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001478:	2300      	movs	r3, #0
 800147a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800147c:	f107 0320 	add.w	r3, r7, #32
 8001480:	4618      	mov	r0, r3
 8001482:	f00f f82f 	bl	80104e4 <HAL_RCCEx_PeriphCLKConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 800148c:	f000 fbfc 	bl	8001c88 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001490:	4b2a      	ldr	r3, [pc, #168]	; (800153c <HAL_I2C_MspInit+0x17c>)
 8001492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001494:	4a29      	ldr	r2, [pc, #164]	; (800153c <HAL_I2C_MspInit+0x17c>)
 8001496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800149a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149c:	4b27      	ldr	r3, [pc, #156]	; (800153c <HAL_I2C_MspInit+0x17c>)
 800149e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a8:	4b24      	ldr	r3, [pc, #144]	; (800153c <HAL_I2C_MspInit+0x17c>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	4a23      	ldr	r2, [pc, #140]	; (800153c <HAL_I2C_MspInit+0x17c>)
 80014ae:	f043 0302 	orr.w	r3, r3, #2
 80014b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b4:	4b21      	ldr	r3, [pc, #132]	; (800153c <HAL_I2C_MspInit+0x17c>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 80014c0:	2310      	movs	r3, #16
 80014c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c6:	2312      	movs	r3, #18
 80014c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014cc:	2301      	movs	r3, #1
 80014ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d2:	2303      	movs	r3, #3
 80014d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014d8:	2304      	movs	r3, #4
 80014da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014e2:	4619      	mov	r1, r3
 80014e4:	4818      	ldr	r0, [pc, #96]	; (8001548 <HAL_I2C_MspInit+0x188>)
 80014e6:	f00b f9d7 	bl	800c898 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 80014ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f2:	2312      	movs	r3, #18
 80014f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001504:	2304      	movs	r3, #4
 8001506:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 800150a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800150e:	4619      	mov	r1, r3
 8001510:	480b      	ldr	r0, [pc, #44]	; (8001540 <HAL_I2C_MspInit+0x180>)
 8001512:	f00b f9c1 	bl	800c898 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <HAL_I2C_MspInit+0x17c>)
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	4a08      	ldr	r2, [pc, #32]	; (800153c <HAL_I2C_MspInit+0x17c>)
 800151c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001520:	6593      	str	r3, [r2, #88]	; 0x58
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_I2C_MspInit+0x17c>)
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
}
 800152e:	bf00      	nop
 8001530:	37c0      	adds	r7, #192	; 0xc0
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40005400 	.word	0x40005400
 800153c:	40021000 	.word	0x40021000
 8001540:	48000400 	.word	0x48000400
 8001544:	40005800 	.word	0x40005800
 8001548:	48001c00 	.word	0x48001c00

0800154c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a15      	ldr	r2, [pc, #84]	; (80015b0 <HAL_I2C_MspDeInit+0x64>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d10f      	bne.n	800157e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_I2C_MspDeInit+0x68>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001562:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <HAL_I2C_MspDeInit+0x68>)
 8001564:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001568:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 800156a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800156e:	4812      	ldr	r0, [pc, #72]	; (80015b8 <HAL_I2C_MspDeInit+0x6c>)
 8001570:	f00b fb24 	bl	800cbbc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8001574:	2180      	movs	r1, #128	; 0x80
 8001576:	4810      	ldr	r0, [pc, #64]	; (80015b8 <HAL_I2C_MspDeInit+0x6c>)
 8001578:	f00b fb20 	bl	800cbbc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 800157c:	e013      	b.n	80015a6 <HAL_I2C_MspDeInit+0x5a>
  else if(i2cHandle->Instance==I2C2)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a0e      	ldr	r2, [pc, #56]	; (80015bc <HAL_I2C_MspDeInit+0x70>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d10e      	bne.n	80015a6 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_I2C_MspDeInit+0x68>)
 800158a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158c:	4a09      	ldr	r2, [pc, #36]	; (80015b4 <HAL_I2C_MspDeInit+0x68>)
 800158e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001592:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(I2C2_SCL_GPIO_Port, I2C2_SCL_Pin);
 8001594:	2110      	movs	r1, #16
 8001596:	480a      	ldr	r0, [pc, #40]	; (80015c0 <HAL_I2C_MspDeInit+0x74>)
 8001598:	f00b fb10 	bl	800cbbc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(I2C2_SDA_GPIO_Port, I2C2_SDA_Pin);
 800159c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015a0:	4805      	ldr	r0, [pc, #20]	; (80015b8 <HAL_I2C_MspDeInit+0x6c>)
 80015a2:	f00b fb0b 	bl	800cbbc <HAL_GPIO_DeInit>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40005400 	.word	0x40005400
 80015b4:	40021000 	.word	0x40021000
 80015b8:	48000400 	.word	0x48000400
 80015bc:	40005800 	.word	0x40005800
 80015c0:	48001c00 	.word	0x48001c00

080015c4 <drawCircle>:
		HAL_GPIO_TogglePin(ARD_D7_GPIO_Port, ARD_D7_Pin);
	}

}

void drawCircle(uint16_t x, uint16_t y) {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	460a      	mov	r2, r1
 80015ce:	80fb      	strh	r3, [r7, #6]
 80015d0:	4613      	mov	r3, r2
 80015d2:	80bb      	strh	r3, [r7, #4]

	if(!circle_selected) {
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <drawCircle+0x50>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	f083 0301 	eor.w	r3, r3, #1
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00a      	beq.n	80015f8 <drawCircle+0x34>
		BSP_LCD_SetTextColor( LCD_COLOR_DARKMAGENTA );
 80015e2:	f248 0010 	movw	r0, #32784	; 0x8010
 80015e6:	f008 fce7 	bl	8009fb8 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(x, y, 20);
 80015ea:	88b9      	ldrh	r1, [r7, #4]
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	2214      	movs	r2, #20
 80015f0:	4618      	mov	r0, r3
 80015f2:	f008 feff 	bl	800a3f4 <BSP_LCD_FillCircle>
	} else {
		BSP_LCD_SetTextColor( LCD_COLOR_GREEN );
		BSP_LCD_FillCircle(x, y, 40);
	}

}
 80015f6:	e009      	b.n	800160c <drawCircle+0x48>
		BSP_LCD_SetTextColor( LCD_COLOR_GREEN );
 80015f8:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 80015fc:	f008 fcdc 	bl	8009fb8 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(x, y, 40);
 8001600:	88b9      	ldrh	r1, [r7, #4]
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	2228      	movs	r2, #40	; 0x28
 8001606:	4618      	mov	r0, r3
 8001608:	f008 fef4 	bl	800a3f4 <BSP_LCD_FillCircle>
}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000ac6 	.word	0x20000ac6

08001618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001618:	b590      	push	{r4, r7, lr}
 800161a:	b095      	sub	sp, #84	; 0x54
 800161c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161e:	f009 fb55 	bl	800accc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001622:	f000 fa6b 	bl	8001afc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001626:	f000 facb 	bl	8001bc0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800162a:	f7ff fc8f 	bl	8000f4c <MX_GPIO_Init>
  MX_ADC1_Init();
 800162e:	f7fe ffb1 	bl	8000594 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001632:	f7ff f825 	bl	8000680 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001636:	f7ff f887 	bl	8000748 <MX_ADC3_Init>
  MX_DCMI_Init();
 800163a:	f7ff f9b9 	bl	80009b0 <MX_DCMI_Init>
  MX_DFSDM1_Init();
 800163e:	f7ff fa6b 	bl	8000b18 <MX_DFSDM1_Init>
  MX_FMC_Init();
 8001642:	f7ff fb5d 	bl	8000d00 <MX_FMC_Init>
  MX_I2C1_Init();
 8001646:	f7ff fe3b 	bl	80012c0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800164a:	f7ff fe79 	bl	8001340 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 800164e:	f001 f80b 	bl	8002668 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8001652:	f001 f837 	bl	80026c4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001656:	f001 f865 	bl	8002724 <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 800165a:	f000 fb1b 	bl	8001c94 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 800165e:	f000 fba7 	bl	8001db0 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8001662:	f000 fcc7 	bl	8001ff4 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8001666:	f000 fd57 	bl	8002118 <MX_SPI1_Init>
  MX_SPI2_Init();
 800166a:	f000 fd93 	bl	8002194 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 800166e:	f016 fe05 	bl	801827c <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8001672:	f000 ffa3 	bl	80025bc <MX_TIM6_Init>
  // above: MX_SDMMC1_SD_Init(); has to be commented out to not be called



  /* LCD Init */
	if (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE) == LCD_ERROR)
 8001676:	2001      	movs	r0, #1
 8001678:	f008 fbe0 	bl	8009e3c <BSP_LCD_InitEx>
 800167c:	4603      	mov	r3, r0
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <main+0x6e>
	{
		/* Initialization Error */
		Error_Handler();
 8001682:	f000 fb01 	bl	8001c88 <Error_Handler>
	}

	// the lcd bsp includes the fontNN.c files in the Utilities directory
	// in that file, a struct is declared: FontNN
	//BSP_LCD_SetFont(&Font20);
	BSP_LCD_SetFont(&Font24);
 8001686:	488a      	ldr	r0, [pc, #552]	; (80018b0 <main+0x298>)
 8001688:	f008 fca6 	bl	8009fd8 <BSP_LCD_SetFont>

	// the display is 240 px tall, XYZ px wide
	BSP_LCD_DisplayStringAt(0, 240 - 65, (uint8_t *)"Purple Ball", CENTER_MODE);
 800168c:	2301      	movs	r3, #1
 800168e:	4a89      	ldr	r2, [pc, #548]	; (80018b4 <main+0x29c>)
 8001690:	21af      	movs	r1, #175	; 0xaf
 8001692:	2000      	movs	r0, #0
 8001694:	f008 fd10 	bl	800a0b8 <BSP_LCD_DisplayStringAt>



	// touchscreen init
	if(BSP_TS_InitEx(BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), LCD_ORIENTATION_LANDSCAPE) != TS_OK) {
 8001698:	f008 fc76 	bl	8009f88 <BSP_LCD_GetXSize>
 800169c:	4603      	mov	r3, r0
 800169e:	b29c      	uxth	r4, r3
 80016a0:	f008 fc7e 	bl	8009fa0 <BSP_LCD_GetYSize>
 80016a4:	4603      	mov	r3, r0
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	2201      	movs	r2, #1
 80016aa:	4619      	mov	r1, r3
 80016ac:	4620      	mov	r0, r4
 80016ae:	f009 f9a3 	bl	800a9f8 <BSP_TS_InitEx>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <main+0xa4>
		Error_Handler();
 80016b8:	f000 fae6 	bl	8001c88 <Error_Handler>
	}

	BSP_LCD_ScreenDimmingConfig(100, 5, 1, 20);
 80016bc:	2314      	movs	r3, #20
 80016be:	2201      	movs	r2, #1
 80016c0:	2105      	movs	r1, #5
 80016c2:	2064      	movs	r0, #100	; 0x64
 80016c4:	f008 ff28 	bl	800a518 <BSP_LCD_ScreenDimmingConfig>



	// LED
	BSP_LED_Init(LED1_PIN);
 80016c8:	2010      	movs	r0, #16
 80016ca:	f007 fd61 	bl	8009190 <BSP_LED_Init>
	BSP_LED_Init(LED2_PIN);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f007 fd5e 	bl	8009190 <BSP_LED_Init>
	BSP_LED_Off( LED1_PIN ); // orange labeled LD1
 80016d4:	2010      	movs	r0, #16
 80016d6:	f007 fdcb 	bl	8009270 <BSP_LED_Off>
	BSP_LED_Off( LED2_PIN ); // doesn't work
 80016da:	2000      	movs	r0, #0
 80016dc:	f007 fdc8 	bl	8009270 <BSP_LED_Off>



	// Start timer
	HAL_TIM_Base_Start_IT(&htim6);
 80016e0:	4875      	ldr	r0, [pc, #468]	; (80018b8 <main+0x2a0>)
 80016e2:	f011 fb73 	bl	8012dcc <HAL_TIM_Base_Start_IT>
	//ResetAndDetectSensor(1); // EK TODO: the parameter SetDisplay doesn't matter

	// EK test1
	HAL_StatusTypeDef status;
	uint8_t pData;
	status = HAL_I2C_Mem_Read(&hi2c1, 0x52, 0xC0, 1, &pData, 1, HAL_TIMEOUT);
 80016e6:	2303      	movs	r3, #3
 80016e8:	9302      	str	r3, [sp, #8]
 80016ea:	2301      	movs	r3, #1
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2301      	movs	r3, #1
 80016f6:	22c0      	movs	r2, #192	; 0xc0
 80016f8:	2152      	movs	r1, #82	; 0x52
 80016fa:	4870      	ldr	r0, [pc, #448]	; (80018bc <main+0x2a4>)
 80016fc:	f00b ff3c 	bl	800d578 <HAL_I2C_Mem_Read>
 8001700:	4603      	mov	r3, r0
 8001702:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	// pData should be 0xEE
	if(status == HAL_OK) {
 8001706:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800170a:	2b00      	cmp	r3, #0
 800170c:	d102      	bne.n	8001714 <main+0xfc>
		printf("good");
 800170e:	486c      	ldr	r0, [pc, #432]	; (80018c0 <main+0x2a8>)
 8001710:	f017 fcde 	bl	80190d0 <iprintf>
	}
	//--

	// EK test2
	VL53L0X_Dev_t *pDev;
	pDev = &VL53L0XDev;
 8001714:	4b6b      	ldr	r3, [pc, #428]	; (80018c4 <main+0x2ac>)
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
	pDev->I2cDevAddr = 0x52;
 8001718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171a:	2252      	movs	r2, #82	; 0x52
 800171c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	pDev->Present = 0;
 8001720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001722:	2200      	movs	r2, #0
 8001724:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

	int status2 = VL53L0X_DataInit(pDev);
 8001728:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800172a:	f003 f99d 	bl	8004a68 <VL53L0X_DataInit>
 800172e:	4603      	mov	r3, r0
 8001730:	633b      	str	r3, [r7, #48]	; 0x30
	if( status2 == 0 ){
 8001732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001734:	2b00      	cmp	r3, #0
 8001736:	d104      	bne.n	8001742 <main+0x12a>
			pDev->Present = 1;
 8001738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173a:	2201      	movs	r2, #1
 800173c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8001740:	e002      	b.n	8001748 <main+0x130>
	}
	else{
			printf("VL53L0X_DataInit fail\n");
 8001742:	4861      	ldr	r0, [pc, #388]	; (80018c8 <main+0x2b0>)
 8001744:	f017 fd4a 	bl	80191dc <puts>
	}
	printf("VL53L0X %d Present and initiated to final 0x%x\n", pDev->Id, pDev->I2cDevAddr);
 8001748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174a:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 800174e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001750:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8001754:	461a      	mov	r2, r3
 8001756:	485d      	ldr	r0, [pc, #372]	; (80018cc <main+0x2b4>)
 8001758:	f017 fcba 	bl	80190d0 <iprintf>
	pDev->Present = 1;
 800175c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800175e:	2201      	movs	r2, #1
 8001760:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	uint8_t isApertureSpads;
	VL53L0X_RangingMeasurementData_t RangingMeasurementData;
	//int range;

	// Initialize the device in continuous ranging mode
	VL53L0X_StaticInit(pDev);
 8001764:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001766:	f003 fae3 	bl	8004d30 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(pDev, &VhvSettings, &PhaseCal);
 800176a:	f107 022a 	add.w	r2, r7, #42	; 0x2a
 800176e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8001772:	4619      	mov	r1, r3
 8001774:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001776:	f004 f98b 	bl	8005a90 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(pDev, &refSpadCount, &isApertureSpads);
 800177a:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800177e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001782:	4619      	mov	r1, r3
 8001784:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001786:	f004 fe11 	bl	80063ac <VL53L0X_PerformRefSpadManagement>
	//VL53L0X_SetInterMeasurementPeriodMilliSeconds(pDev, 250); // Program continuous mode Inter-Measurement period in milliseconds
	//VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
	VL53L0X_SetInterMeasurementPeriodMilliSeconds(pDev, TIMED_RANGING_PERIOD);
 800178a:	2132      	movs	r1, #50	; 0x32
 800178c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800178e:	f003 fec9 	bl	8005524 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>
	VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING);
 8001792:	2103      	movs	r1, #3
 8001794:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001796:	f003 fcdd 	bl	8005154 <VL53L0X_SetDeviceMode>

	// Start continuous ranging
	VL53L0X_StartMeasurement(pDev);
 800179a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800179c:	f004 f9f4 	bl	8005b88 <VL53L0X_StartMeasurement>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  	// this has to be the 1st thing in the loop
  	if(gone_sleep) {
 80017a0:	4b4b      	ldr	r3, [pc, #300]	; (80018d0 <main+0x2b8>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <main+0x194>
			//HAL_ResumeTick();
			awakeFromSleep();
 80017a8:	f000 fa40 	bl	8001c2c <awakeFromSleep>
		}

		// by changing the text, we can prove that it's resetting when pressing
		// the reset button - because the display will say Beep instead of the
		// other two possibilities
		if(TimingDelay == 0) {
 80017ac:	4b49      	ldr	r3, [pc, #292]	; (80018d4 <main+0x2bc>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d12d      	bne.n	8001810 <main+0x1f8>
			/* Toggle LED1 */
			if(led_on) {
 80017b4:	4b48      	ldr	r3, [pc, #288]	; (80018d8 <main+0x2c0>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00d      	beq.n	80017d8 <main+0x1c0>
				BSP_LED_Off(LED1);
 80017bc:	2000      	movs	r0, #0
 80017be:	f007 fd57 	bl	8009270 <BSP_LED_Off>
				BSP_LCD_Clear(LCD_COLOR_WHITE);
 80017c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80017c6:	f008 fc17 	bl	8009ff8 <BSP_LCD_Clear>
				BSP_LCD_DisplayStringAt(0, 240 - 65, (uint8_t *)"Zweep", CENTER_MODE);
 80017ca:	2301      	movs	r3, #1
 80017cc:	4a43      	ldr	r2, [pc, #268]	; (80018dc <main+0x2c4>)
 80017ce:	21af      	movs	r1, #175	; 0xaf
 80017d0:	2000      	movs	r0, #0
 80017d2:	f008 fc71 	bl	800a0b8 <BSP_LCD_DisplayStringAt>
 80017d6:	e00c      	b.n	80017f2 <main+0x1da>
			} else {
				BSP_LED_On(LED1);
 80017d8:	2000      	movs	r0, #0
 80017da:	f007 fd27 	bl	800922c <BSP_LED_On>
				BSP_LCD_Clear(LCD_COLOR_WHITE);
 80017de:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80017e2:	f008 fc09 	bl	8009ff8 <BSP_LCD_Clear>
				BSP_LCD_DisplayStringAt(0, 240 - 65, (uint8_t *)"Fleep", CENTER_MODE);
 80017e6:	2301      	movs	r3, #1
 80017e8:	4a3d      	ldr	r2, [pc, #244]	; (80018e0 <main+0x2c8>)
 80017ea:	21af      	movs	r1, #175	; 0xaf
 80017ec:	2000      	movs	r0, #0
 80017ee:	f008 fc63 	bl	800a0b8 <BSP_LCD_DisplayStringAt>
			}
			led_on = !led_on;
 80017f2:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <main+0x2c0>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	bf14      	ite	ne
 80017fa:	2301      	movne	r3, #1
 80017fc:	2300      	moveq	r3, #0
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	f083 0301 	eor.w	r3, r3, #1
 8001804:	b2db      	uxtb	r3, r3
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	b2da      	uxtb	r2, r3
 800180c:	4b32      	ldr	r3, [pc, #200]	; (80018d8 <main+0x2c0>)
 800180e:	701a      	strb	r2, [r3, #0]
		}



  	if(HAL_GetTick()-last_sample >= TIMED_RANGING_PERIOD) {
 8001810:	f009 fac4 	bl	800ad9c <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	4b33      	ldr	r3, [pc, #204]	; (80018e4 <main+0x2cc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b31      	cmp	r3, #49	; 0x31
 800181e:	f240 80bd 	bls.w	800199c <main+0x384>
//  		sprintf((char*)buf,
//  		              "%u.%u C\r\n",
//  		              ((unsigned int)temp_c / 100),
//  		              ((unsigned int)temp_c % 100));
  		//HAL_UART_Transmit(&huart1, buf, strlen((char*)buf), HAL_MAX_DELAY);
  		HAL_UART_Transmit(&huart1, "~", 1, HAL_MAX_DELAY);
 8001822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001826:	2201      	movs	r2, #1
 8001828:	492f      	ldr	r1, [pc, #188]	; (80018e8 <main+0x2d0>)
 800182a:	4830      	ldr	r0, [pc, #192]	; (80018ec <main+0x2d4>)
 800182c:	f012 fab2 	bl	8013d94 <HAL_UART_Transmit>

  		// Get ADC value
  		// "10-bit ADC, divide the ADC output by 2 for the range in inches."
			HAL_ADC_Start(&hadc1);
 8001830:	482f      	ldr	r0, [pc, #188]	; (80018f0 <main+0x2d8>)
 8001832:	f009 fe53 	bl	800b4dc <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001836:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800183a:	482d      	ldr	r0, [pc, #180]	; (80018f0 <main+0x2d8>)
 800183c:	f009 ff08 	bl	800b650 <HAL_ADC_PollForConversion>
			raw = HAL_ADC_GetValue(&hadc1);
 8001840:	482b      	ldr	r0, [pc, #172]	; (80018f0 <main+0x2d8>)
 8001842:	f009 ffdd 	bl	800b800 <HAL_ADC_GetValue>
 8001846:	4603      	mov	r3, r0
 8001848:	b29a      	uxth	r2, r3
 800184a:	4b2a      	ldr	r3, [pc, #168]	; (80018f4 <main+0x2dc>)
 800184c:	801a      	strh	r2, [r3, #0]
			raw_in = (float)raw/2.0;
 800184e:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <main+0x2dc>)
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	ee07 3a90 	vmov	s15, r3
 8001856:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800185a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800185e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001862:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <main+0x2e0>)
 8001864:	edc3 7a00 	vstr	s15, [r3]


			VL53L0X_GetRangingMeasurementData(pDev, &RangingMeasurementData);
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	4619      	mov	r1, r3
 800186c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800186e:	f004 fa8d 	bl	8005d8c <VL53L0X_GetRangingMeasurementData>
			range = RangingMeasurementData.RangeMilliMeter/10; // cm
 8001872:	89bb      	ldrh	r3, [r7, #12]
 8001874:	4a21      	ldr	r2, [pc, #132]	; (80018fc <main+0x2e4>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	08db      	lsrs	r3, r3, #3
 800187c:	b29a      	uxth	r2, r3
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <main+0x2e8>)
 8001880:	801a      	strh	r2, [r3, #0]
			range_mm = RangingMeasurementData.RangeMilliMeter; // mm
 8001882:	89ba      	ldrh	r2, [r7, #12]
 8001884:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <main+0x2ec>)
 8001886:	801a      	strh	r2, [r3, #0]

			// check it's in range
			if(range_mm < 1000) {
 8001888:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <main+0x2ec>)
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001890:	d23e      	bcs.n	8001910 <main+0x2f8>
				range_mm_sum += range_mm;
 8001892:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <main+0x2ec>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <main+0x2f0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4413      	add	r3, r2
 800189e:	4a1a      	ldr	r2, [pc, #104]	; (8001908 <main+0x2f0>)
 80018a0:	6013      	str	r3, [r2, #0]
				sum_count++;
 80018a2:	4b1a      	ldr	r3, [pc, #104]	; (800190c <main+0x2f4>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	3301      	adds	r3, #1
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4b18      	ldr	r3, [pc, #96]	; (800190c <main+0x2f4>)
 80018ac:	701a      	strb	r2, [r3, #0]
 80018ae:	e035      	b.n	800191c <main+0x304>
 80018b0:	20000534 	.word	0x20000534
 80018b4:	0801a010 	.word	0x0801a010
 80018b8:	20000f78 	.word	0x20000f78
 80018bc:	20000a14 	.word	0x20000a14
 80018c0:	0801a01c 	.word	0x0801a01c
 80018c4:	20000000 	.word	0x20000000
 80018c8:	0801a024 	.word	0x0801a024
 80018cc:	08019fb8 	.word	0x08019fb8
 80018d0:	20000ace 	.word	0x20000ace
 80018d4:	20000ad0 	.word	0x20000ad0
 80018d8:	20000acd 	.word	0x20000acd
 80018dc:	0801a03c 	.word	0x0801a03c
 80018e0:	0801a044 	.word	0x0801a044
 80018e4:	20000ae4 	.word	0x20000ae4
 80018e8:	0801a04c 	.word	0x0801a04c
 80018ec:	20001048 	.word	0x20001048
 80018f0:	2000075c 	.word	0x2000075c
 80018f4:	20000cca 	.word	0x20000cca
 80018f8:	20000ccc 	.word	0x20000ccc
 80018fc:	cccccccd 	.word	0xcccccccd
 8001900:	20000ad4 	.word	0x20000ad4
 8001904:	20000ad6 	.word	0x20000ad6
 8001908:	20000ad8 	.word	0x20000ad8
 800190c:	20000adc 	.word	0x20000adc
			} else {
				// to keep up with the timing
				sum_skip++;
 8001910:	4b6e      	ldr	r3, [pc, #440]	; (8001acc <main+0x4b4>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	3301      	adds	r3, #1
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4b6c      	ldr	r3, [pc, #432]	; (8001acc <main+0x4b4>)
 800191a:	701a      	strb	r2, [r3, #0]
			}

			if( (sum_count+sum_skip) >= 20) { // 20 because 1 sample / 50 ms = 20 samples / s (1000/50=20)
 800191c:	4b6c      	ldr	r3, [pc, #432]	; (8001ad0 <main+0x4b8>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	4b6a      	ldr	r3, [pc, #424]	; (8001acc <main+0x4b4>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	4413      	add	r3, r2
 8001928:	2b13      	cmp	r3, #19
 800192a:	dd32      	ble.n	8001992 <main+0x37a>
				range_mm_avg = (float)range_mm_sum / (float)sum_count;
 800192c:	4b69      	ldr	r3, [pc, #420]	; (8001ad4 <main+0x4bc>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	ee07 3a90 	vmov	s15, r3
 8001934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001938:	4b65      	ldr	r3, [pc, #404]	; (8001ad0 <main+0x4b8>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	ee07 3a90 	vmov	s15, r3
 8001940:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001948:	4b63      	ldr	r3, [pc, #396]	; (8001ad8 <main+0x4c0>)
 800194a:	edc3 7a00 	vstr	s15, [r3]

				sum_count = 0;
 800194e:	4b60      	ldr	r3, [pc, #384]	; (8001ad0 <main+0x4b8>)
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
				sum_skip = 0;
 8001954:	4b5d      	ldr	r3, [pc, #372]	; (8001acc <main+0x4b4>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
				range_mm_sum = 0;
 800195a:	4b5e      	ldr	r3, [pc, #376]	; (8001ad4 <main+0x4bc>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]

				if(sample_index < num_samples && sample_index < 120) {
 8001960:	4b5e      	ldr	r3, [pc, #376]	; (8001adc <main+0x4c4>)
 8001962:	881a      	ldrh	r2, [r3, #0]
 8001964:	4b5e      	ldr	r3, [pc, #376]	; (8001ae0 <main+0x4c8>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d212      	bcs.n	8001992 <main+0x37a>
 800196c:	4b5b      	ldr	r3, [pc, #364]	; (8001adc <main+0x4c4>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	2b77      	cmp	r3, #119	; 0x77
 8001972:	d80e      	bhi.n	8001992 <main+0x37a>
					all_samples[sample_index] = range_mm_avg;
 8001974:	4b59      	ldr	r3, [pc, #356]	; (8001adc <main+0x4c4>)
 8001976:	881b      	ldrh	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	4b57      	ldr	r3, [pc, #348]	; (8001ad8 <main+0x4c0>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4959      	ldr	r1, [pc, #356]	; (8001ae4 <main+0x4cc>)
 8001980:	0083      	lsls	r3, r0, #2
 8001982:	440b      	add	r3, r1
 8001984:	601a      	str	r2, [r3, #0]
					sample_index++;
 8001986:	4b55      	ldr	r3, [pc, #340]	; (8001adc <main+0x4c4>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	3301      	adds	r3, #1
 800198c:	b29a      	uxth	r2, r3
 800198e:	4b53      	ldr	r3, [pc, #332]	; (8001adc <main+0x4c4>)
 8001990:	801a      	strh	r2, [r3, #0]
					// TODO: process all samples
				}

			}

			last_sample = HAL_GetTick();
 8001992:	f009 fa03 	bl	800ad9c <HAL_GetTick>
 8001996:	4603      	mov	r3, r0
 8001998:	4a53      	ldr	r2, [pc, #332]	; (8001ae8 <main+0x4d0>)
 800199a:	6013      	str	r3, [r2, #0]
  	// imagine the case where gettick has overflowed, but last_ts has not
		// eg 100-30000
		// abs could be used to prevent this from being a negative number, however
		// in this case, it is not needed, because two unsigned integers being
		// subtracted results in an unsigned integer
		if( HAL_GetTick()-last_ts >= 1000 && dimmed_screen == false) {
 800199c:	f009 f9fe 	bl	800ad9c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	4b52      	ldr	r3, [pc, #328]	; (8001aec <main+0x4d4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019ac:	d311      	bcc.n	80019d2 <main+0x3ba>
 80019ae:	4b50      	ldr	r3, [pc, #320]	; (8001af0 <main+0x4d8>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	f083 0301 	eor.w	r3, r3, #1
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00a      	beq.n	80019d2 <main+0x3ba>
			BSP_LCD_ScreenDimmingConfig(100, 5, 1, 20);
 80019bc:	2314      	movs	r3, #20
 80019be:	2201      	movs	r2, #1
 80019c0:	2105      	movs	r1, #5
 80019c2:	2064      	movs	r0, #100	; 0x64
 80019c4:	f008 fda8 	bl	800a518 <BSP_LCD_ScreenDimmingConfig>
			BSP_LCD_ScreenDimmingOn();
 80019c8:	f008 fdd8 	bl	800a57c <BSP_LCD_ScreenDimmingOn>
			dimmed_screen = true;
 80019cc:	4b48      	ldr	r3, [pc, #288]	; (8001af0 <main+0x4d8>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	701a      	strb	r2, [r3, #0]
		}


		uint8_t circle_x = 100;
 80019d2:	2364      	movs	r3, #100	; 0x64
 80019d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		uint8_t circle_y = 100;
 80019d8:	2364      	movs	r3, #100	; 0x64
 80019da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		drawCircle(circle_x, circle_y);
 80019de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80019e8:	b292      	uxth	r2, r2
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fde9 	bl	80015c4 <drawCircle>

		BSP_TS_GetState(&ts_result);
 80019f2:	4840      	ldr	r0, [pc, #256]	; (8001af4 <main+0x4dc>)
 80019f4:	f009 f858 	bl	800aaa8 <BSP_TS_GetState>

		uint8_t num_touches = ts_result.touchDetected;
 80019f8:	4b3e      	ldr	r3, [pc, #248]	; (8001af4 <main+0x4dc>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		for(int i=0; i<num_touches; i++) {
 8001a00:	2300      	movs	r3, #0
 8001a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a04:	e05b      	b.n	8001abe <main+0x4a6>
			Point touch;
			touch.X = ts_result.touchX[i];
 8001a06:	4a3b      	ldr	r2, [pc, #236]	; (8001af4 <main+0x4dc>)
 8001a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	885b      	ldrh	r3, [r3, #2]
 8001a10:	b21b      	sxth	r3, r3
 8001a12:	803b      	strh	r3, [r7, #0]
			touch.Y = ts_result.touchY[i];
 8001a14:	4a37      	ldr	r2, [pc, #220]	; (8001af4 <main+0x4dc>)
 8001a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	88db      	ldrh	r3, [r3, #6]
 8001a1e:	b21b      	sxth	r3, r3
 8001a20:	807b      	strh	r3, [r7, #2]

			if(dimmed_screen) {
 8001a22:	4b33      	ldr	r3, [pc, #204]	; (8001af0 <main+0x4d8>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d004      	beq.n	8001a34 <main+0x41c>
				//BSP_LCD_ScreenDimmingConfig(5, 100, 1, 20);
				//BSP_LCD_ScreenDimmingOn();
				BSP_LCD_ScreenDimmingOff();
 8001a2a:	f008 fea1 	bl	800a770 <BSP_LCD_ScreenDimmingOff>
				dimmed_screen = false;
 8001a2e:	4b30      	ldr	r3, [pc, #192]	; (8001af0 <main+0x4d8>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
			}

			last_ts = HAL_GetTick();
 8001a34:	f009 f9b2 	bl	800ad9c <HAL_GetTick>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4a2c      	ldr	r2, [pc, #176]	; (8001aec <main+0x4d4>)
 8001a3c:	6013      	str	r3, [r2, #0]

			if(touch.X < circle_x+70 && touch.X > circle_x-70) {
 8001a3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a42:	3345      	adds	r3, #69	; 0x45
 8001a44:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	db28      	blt.n	8001a9e <main+0x486>
 8001a4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a50:	3b45      	subs	r3, #69	; 0x45
 8001a52:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001a56:	4293      	cmp	r3, r2
 8001a58:	dc21      	bgt.n	8001a9e <main+0x486>
				if(touch.Y < circle_y+70 && touch.Y > circle_y-70) {
 8001a5a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a5e:	3345      	adds	r3, #69	; 0x45
 8001a60:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001a64:	4293      	cmp	r3, r2
 8001a66:	db1a      	blt.n	8001a9e <main+0x486>
 8001a68:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a6c:	3b45      	subs	r3, #69	; 0x45
 8001a6e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001a72:	4293      	cmp	r3, r2
 8001a74:	dc13      	bgt.n	8001a9e <main+0x486>
					circle_selected = !circle_selected;
 8001a76:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <main+0x4e0>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	bf14      	ite	ne
 8001a7e:	2301      	movne	r3, #1
 8001a80:	2300      	moveq	r3, #0
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	f083 0301 	eor.w	r3, r3, #1
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <main+0x4e0>)
 8001a92:	701a      	strb	r2, [r3, #0]
					BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001a94:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001a98:	f008 faae 	bl	8009ff8 <BSP_LCD_Clear>
 8001a9c:	e680      	b.n	80017a0 <main+0x188>
					break;
				}
			}

			BSP_LCD_SetTextColor( LCD_COLOR_BLUE );
 8001a9e:	201f      	movs	r0, #31
 8001aa0:	f008 fa8a 	bl	8009fb8 <BSP_LCD_SetTextColor>
			BSP_LCD_FillCircle(touch.X, touch.Y, 10);
 8001aa4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001aae:	b291      	uxth	r1, r2
 8001ab0:	220a      	movs	r2, #10
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f008 fc9e 	bl	800a3f4 <BSP_LCD_FillCircle>
		for(int i=0; i<num_touches; i++) {
 8001ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aba:	3301      	adds	r3, #1
 8001abc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001abe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ac2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	db9e      	blt.n	8001a06 <main+0x3ee>
  {
 8001ac8:	e66a      	b.n	80017a0 <main+0x188>
 8001aca:	bf00      	nop
 8001acc:	20000add 	.word	0x20000add
 8001ad0:	20000adc 	.word	0x20000adc
 8001ad4:	20000ad8 	.word	0x20000ad8
 8001ad8:	20000ae0 	.word	0x20000ae0
 8001adc:	20000cc8 	.word	0x20000cc8
 8001ae0:	20000190 	.word	0x20000190
 8001ae4:	20000ae8 	.word	0x20000ae8
 8001ae8:	20000ae4 	.word	0x20000ae4
 8001aec:	20000ac8 	.word	0x20000ac8
 8001af0:	20000acc 	.word	0x20000acc
 8001af4:	20000abc 	.word	0x20000abc
 8001af8:	20000ac6 	.word	0x20000ac6

08001afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b096      	sub	sp, #88	; 0x58
 8001b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	2244      	movs	r2, #68	; 0x44
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f017 f9f8 	bl	8018f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b10:	463b      	mov	r3, r7
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
 8001b1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001b1e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b22:	f00d fd21 	bl	800f568 <HAL_PWREx_ControlVoltageScaling>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001b2c:	f000 f8ac 	bl	8001c88 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b30:	f00d fcc8 	bl	800f4c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001b34:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <SystemClock_Config+0xc0>)
 8001b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3a:	4a20      	ldr	r2, [pc, #128]	; (8001bbc <SystemClock_Config+0xc0>)
 8001b3c:	f023 0318 	bic.w	r3, r3, #24
 8001b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001b44:	2314      	movs	r3, #20
 8001b46:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001b54:	2360      	movs	r3, #96	; 0x60
 8001b56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001b60:	2301      	movs	r3, #1
 8001b62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001b64:	2318      	movs	r3, #24
 8001b66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b70:	2302      	movs	r3, #2
 8001b72:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f00d fe75 	bl	800f868 <HAL_RCC_OscConfig>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001b84:	f000 f880 	bl	8001c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b88:	230f      	movs	r3, #15
 8001b8a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	2102      	movs	r1, #2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f00e fa7b 	bl	801009c <HAL_RCC_ClockConfig>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001bac:	f000 f86c 	bl	8001c88 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001bb0:	f00f fd4c 	bl	801164c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001bb4:	bf00      	nop
 8001bb6:	3758      	adds	r7, #88	; 0x58
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b0a4      	sub	sp, #144	; 0x90
 8001bc4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	228c      	movs	r2, #140	; 0x8c
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f017 f997 	bl	8018f00 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
 8001bd2:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <PeriphCommonClock_Config+0x64>)
 8001bd4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001bda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001bde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001be2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001be6:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8001be8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001bec:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001bf6:	2318      	movs	r3, #24
 8001bf8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c02:	2302      	movs	r3, #2
 8001c04:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <PeriphCommonClock_Config+0x68>)
 8001c08:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f00e fc69 	bl	80104e4 <HAL_RCCEx_PeriphCLKConfig>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001c18:	f000 f836 	bl	8001c88 <Error_Handler>
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	3790      	adds	r7, #144	; 0x90
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	00086800 	.word	0x00086800
 8001c28:	01110000 	.word	0x01110000

08001c2c <awakeFromSleep>:

	/* ... Low-power SLEEP mode ... */

}

void awakeFromSleep(void) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
	BSP_LED_On(LED1);
 8001c30:	2000      	movs	r0, #0
 8001c32:	f007 fafb 	bl	800922c <BSP_LED_On>

	/* System is Low Power Run mode when exiting Low Power Sleep mode,
		 disable low power run mode and reset the clock to initialization configuration */
	HAL_PWREx_DisableLowPowerRunMode();
 8001c36:	f00d fd1d 	bl	800f674 <HAL_PWREx_DisableLowPowerRunMode>

	/* Configure the system clock for the RUN mode */
	SystemClock_Config();
 8001c3a:	f7ff ff5f 	bl	8001afc <SystemClock_Config>

	/* Configure the peripherals common clocks */
	// should this go here too? added it
	PeriphCommonClock_Config();
 8001c3e:	f7ff ffbf 	bl	8001bc0 <PeriphCommonClock_Config>

	/* Re-init LED1 to toggle during Run mode */
	/*BSP_LED_Init(LED1);*/

	/* Resume Tick interrupt if disabled prior to Low Power Sleep mode entry */
	HAL_ResumeTick();
 8001c42:	f009 f8eb 	bl	800ae1c <HAL_ResumeTick>
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == JOY_DOWN_Pin) {
 8001c56:	88fb      	ldrh	r3, [r7, #6]
 8001c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c5c:	d108      	bne.n	8001c70 <HAL_GPIO_EXTI_Callback+0x24>
//		HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2_HIGH); // JOY_SEL on SYS_WKUP2
//		prepareForSleep();
//		enterSleep();

		// simpler version
		gone_sleep = true;
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_GPIO_EXTI_Callback+0x38>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
		HAL_SuspendTick();
 8001c64:	f009 f8ca 	bl	800adfc <HAL_SuspendTick>
		HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE); // left button configured as event
 8001c68:	2102      	movs	r1, #2
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f00d fc3a 	bl	800f4e4 <HAL_PWR_EnterSLEEPMode>
	}

	// LEFT wakes it up as an event

	if(GPIO_Pin == JOY_RIGHT_Pin) {
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c76:	d101      	bne.n	8001c7c <HAL_GPIO_EXTI_Callback+0x30>
//		awakeFromSleep();

		// simpler version
		HAL_ResumeTick();
 8001c78:	f009 f8d0 	bl	800ae1c <HAL_ResumeTick>
	}

}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000ace 	.word	0x20000ace

08001c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c8c:	b672      	cpsid	i
}
 8001c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <Error_Handler+0x8>
	...

08001c94 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <MX_QUADSPI_Init+0x50>)
 8001c9a:	4a13      	ldr	r2, [pc, #76]	; (8001ce8 <MX_QUADSPI_Init+0x54>)
 8001c9c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <MX_QUADSPI_Init+0x50>)
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <MX_QUADSPI_Init+0x50>)
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <MX_QUADSPI_Init+0x50>)
 8001cac:	2210      	movs	r2, #16
 8001cae:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <MX_QUADSPI_Init+0x50>)
 8001cb2:	2217      	movs	r2, #23
 8001cb4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <MX_QUADSPI_Init+0x50>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <MX_QUADSPI_Init+0x50>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <MX_QUADSPI_Init+0x50>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <MX_QUADSPI_Init+0x50>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001cce:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <MX_QUADSPI_Init+0x50>)
 8001cd0:	f00d fd08 	bl	800f6e4 <HAL_QSPI_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001cda:	f7ff ffd5 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000cd0 	.word	0x20000cd0
 8001ce8:	a0001000 	.word	0xa0001000

08001cec <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	; 0x28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a26      	ldr	r2, [pc, #152]	; (8001da4 <HAL_QSPI_MspInit+0xb8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d145      	bne.n	8001d9a <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001d0e:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <HAL_QSPI_MspInit+0xbc>)
 8001d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d12:	4a25      	ldr	r2, [pc, #148]	; (8001da8 <HAL_QSPI_MspInit+0xbc>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d18:	6513      	str	r3, [r2, #80]	; 0x50
 8001d1a:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <HAL_QSPI_MspInit+0xbc>)
 8001d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <HAL_QSPI_MspInit+0xbc>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	4a1f      	ldr	r2, [pc, #124]	; (8001da8 <HAL_QSPI_MspInit+0xbc>)
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d32:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <HAL_QSPI_MspInit+0xbc>)
 8001d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <HAL_QSPI_MspInit+0xbc>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d42:	4a19      	ldr	r2, [pc, #100]	; (8001da8 <HAL_QSPI_MspInit+0xbc>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <HAL_QSPI_MspInit+0xbc>)
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001d56:	f640 0303 	movw	r3, #2051	; 0x803
 8001d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d64:	2303      	movs	r3, #3
 8001d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d68:	230a      	movs	r3, #10
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	4619      	mov	r1, r3
 8001d72:	480e      	ldr	r0, [pc, #56]	; (8001dac <HAL_QSPI_MspInit+0xc0>)
 8001d74:	f00a fd90 	bl	800c898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8001d78:	23c8      	movs	r3, #200	; 0xc8
 8001d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d88:	230a      	movs	r3, #10
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4619      	mov	r1, r3
 8001d92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d96:	f00a fd7f 	bl	800c898 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	3728      	adds	r7, #40	; 0x28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	a0001000 	.word	0xa0001000
 8001da8:	40021000 	.word	0x40021000
 8001dac:	48000400 	.word	0x48000400

08001db0 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8001db4:	4b4d      	ldr	r3, [pc, #308]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001db6:	4a4e      	ldr	r2, [pc, #312]	; (8001ef0 <MX_SAI1_Init+0x140>)
 8001db8:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001dba:	4b4c      	ldr	r3, [pc, #304]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001dc0:	4b4a      	ldr	r3, [pc, #296]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001dc6:	4b49      	ldr	r3, [pc, #292]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001dc8:	2240      	movs	r2, #64	; 0x40
 8001dca:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001dcc:	4b47      	ldr	r3, [pc, #284]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001dd2:	4b46      	ldr	r3, [pc, #280]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8001dd8:	4b44      	ldr	r3, [pc, #272]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001dde:	4b43      	ldr	r3, [pc, #268]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001de4:	4b41      	ldr	r3, [pc, #260]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001dea:	4b40      	ldr	r3, [pc, #256]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001df0:	4b3e      	ldr	r3, [pc, #248]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001df2:	4a40      	ldr	r2, [pc, #256]	; (8001ef4 <MX_SAI1_Init+0x144>)
 8001df4:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001df6:	4b3d      	ldr	r3, [pc, #244]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001dfc:	4b3b      	ldr	r3, [pc, #236]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001e02:	4b3a      	ldr	r3, [pc, #232]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001e08:	4b38      	ldr	r3, [pc, #224]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001e0e:	4b37      	ldr	r3, [pc, #220]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001e10:	2208      	movs	r2, #8
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001e14:	4b35      	ldr	r3, [pc, #212]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001e1a:	4b34      	ldr	r3, [pc, #208]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001e20:	4b32      	ldr	r3, [pc, #200]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001e26:	4b31      	ldr	r3, [pc, #196]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8001e2c:	4b2f      	ldr	r3, [pc, #188]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001e32:	4b2e      	ldr	r3, [pc, #184]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8001e38:	4b2c      	ldr	r3, [pc, #176]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8001e3e:	4b2b      	ldr	r3, [pc, #172]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8001e44:	4829      	ldr	r0, [pc, #164]	; (8001eec <MX_SAI1_Init+0x13c>)
 8001e46:	f00f fee1 	bl	8011c0c <HAL_SAI_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8001e50:	f7ff ff1a 	bl	8001c88 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8001e54:	4b28      	ldr	r3, [pc, #160]	; (8001ef8 <MX_SAI1_Init+0x148>)
 8001e56:	4a29      	ldr	r2, [pc, #164]	; (8001efc <MX_SAI1_Init+0x14c>)
 8001e58:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001e5a:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <MX_SAI1_Init+0x148>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8001e60:	4b25      	ldr	r3, [pc, #148]	; (8001ef8 <MX_SAI1_Init+0x148>)
 8001e62:	2203      	movs	r2, #3
 8001e64:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8001e66:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <MX_SAI1_Init+0x148>)
 8001e68:	2240      	movs	r2, #64	; 0x40
 8001e6a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001e6c:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <MX_SAI1_Init+0x148>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001e72:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <MX_SAI1_Init+0x148>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8001e78:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <MX_SAI1_Init+0x148>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <MX_SAI1_Init+0x148>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001e84:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <MX_SAI1_Init+0x148>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <MX_SAI1_Init+0x148>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8001e90:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <MX_SAI1_Init+0x148>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001e96:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <MX_SAI1_Init+0x148>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001e9c:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <MX_SAI1_Init+0x148>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8001ea2:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <MX_SAI1_Init+0x148>)
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <MX_SAI1_Init+0x148>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <MX_SAI1_Init+0x148>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001eb4:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <MX_SAI1_Init+0x148>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001eba:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <MX_SAI1_Init+0x148>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <MX_SAI1_Init+0x148>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <MX_SAI1_Init+0x148>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <MX_SAI1_Init+0x148>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <MX_SAI1_Init+0x148>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8001ed8:	4807      	ldr	r0, [pc, #28]	; (8001ef8 <MX_SAI1_Init+0x148>)
 8001eda:	f00f fe97 	bl	8011c0c <HAL_SAI_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8001ee4:	f7ff fed0 	bl	8001c88 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000d1c 	.word	0x20000d1c
 8001ef0:	40015404 	.word	0x40015404
 8001ef4:	0002ee00 	.word	0x0002ee00
 8001ef8:	20000da0 	.word	0x20000da0
 8001efc:	40015424 	.word	0x40015424

08001f00 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a33      	ldr	r2, [pc, #204]	; (8001fdc <HAL_SAI_MspInit+0xdc>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d135      	bne.n	8001f7e <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8001f12:	4b33      	ldr	r3, [pc, #204]	; (8001fe0 <HAL_SAI_MspInit+0xe0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10b      	bne.n	8001f32 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001f1a:	4b32      	ldr	r3, [pc, #200]	; (8001fe4 <HAL_SAI_MspInit+0xe4>)
 8001f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f1e:	4a31      	ldr	r2, [pc, #196]	; (8001fe4 <HAL_SAI_MspInit+0xe4>)
 8001f20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f24:	6613      	str	r3, [r2, #96]	; 0x60
 8001f26:	4b2f      	ldr	r3, [pc, #188]	; (8001fe4 <HAL_SAI_MspInit+0xe4>)
 8001f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8001f32:	4b2b      	ldr	r3, [pc, #172]	; (8001fe0 <HAL_SAI_MspInit+0xe0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	3301      	adds	r3, #1
 8001f38:	4a29      	ldr	r2, [pc, #164]	; (8001fe0 <HAL_SAI_MspInit+0xe0>)
 8001f3a:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8001f3c:	2354      	movs	r3, #84	; 0x54
 8001f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f40:	2302      	movs	r3, #2
 8001f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001f4c:	230d      	movs	r3, #13
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	4619      	mov	r1, r3
 8001f56:	4824      	ldr	r0, [pc, #144]	; (8001fe8 <HAL_SAI_MspInit+0xe8>)
 8001f58:	f00a fc9e 	bl	800c898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001f6e:	230d      	movs	r3, #13
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	481c      	ldr	r0, [pc, #112]	; (8001fec <HAL_SAI_MspInit+0xec>)
 8001f7a:	f00a fc8d 	bl	800c898 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a1b      	ldr	r2, [pc, #108]	; (8001ff0 <HAL_SAI_MspInit+0xf0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d124      	bne.n	8001fd2 <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8001f88:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <HAL_SAI_MspInit+0xe0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001f90:	4b14      	ldr	r3, [pc, #80]	; (8001fe4 <HAL_SAI_MspInit+0xe4>)
 8001f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f94:	4a13      	ldr	r2, [pc, #76]	; (8001fe4 <HAL_SAI_MspInit+0xe4>)
 8001f96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f9a:	6613      	str	r3, [r2, #96]	; 0x60
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <HAL_SAI_MspInit+0xe4>)
 8001f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <HAL_SAI_MspInit+0xe0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	3301      	adds	r3, #1
 8001fae:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <HAL_SAI_MspInit+0xe0>)
 8001fb0:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8001fb2:	2308      	movs	r3, #8
 8001fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001fc2:	230d      	movs	r3, #13
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8001fc6:	f107 0314 	add.w	r3, r7, #20
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4806      	ldr	r0, [pc, #24]	; (8001fe8 <HAL_SAI_MspInit+0xe8>)
 8001fce:	f00a fc63 	bl	800c898 <HAL_GPIO_Init>

    }
}
 8001fd2:	bf00      	nop
 8001fd4:	3728      	adds	r7, #40	; 0x28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40015404 	.word	0x40015404
 8001fe0:	20000e24 	.word	0x20000e24
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	48001000 	.word	0x48001000
 8001fec:	48000400 	.word	0x48000400
 8001ff0:	40015424 	.word	0x40015424

08001ff4 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001ff8:	4b14      	ldr	r3, [pc, #80]	; (800204c <MX_SDMMC1_SD_Init+0x58>)
 8001ffa:	4a15      	ldr	r2, [pc, #84]	; (8002050 <MX_SDMMC1_SD_Init+0x5c>)
 8001ffc:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001ffe:	4b13      	ldr	r3, [pc, #76]	; (800204c <MX_SDMMC1_SD_Init+0x58>)
 8002000:	2200      	movs	r2, #0
 8002002:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002004:	4b11      	ldr	r3, [pc, #68]	; (800204c <MX_SDMMC1_SD_Init+0x58>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <MX_SDMMC1_SD_Init+0x58>)
 800200c:	2200      	movs	r2, #0
 800200e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002010:	4b0e      	ldr	r3, [pc, #56]	; (800204c <MX_SDMMC1_SD_Init+0x58>)
 8002012:	2200      	movs	r2, #0
 8002014:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002016:	4b0d      	ldr	r3, [pc, #52]	; (800204c <MX_SDMMC1_SD_Init+0x58>)
 8002018:	2200      	movs	r2, #0
 800201a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <MX_SDMMC1_SD_Init+0x58>)
 800201e:	2200      	movs	r2, #0
 8002020:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8002022:	480a      	ldr	r0, [pc, #40]	; (800204c <MX_SDMMC1_SD_Init+0x58>)
 8002024:	f00f ff9e 	bl	8011f64 <HAL_SD_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 800202e:	f7ff fe2b 	bl	8001c88 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8002032:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002036:	4805      	ldr	r0, [pc, #20]	; (800204c <MX_SDMMC1_SD_Init+0x58>)
 8002038:	f010 fa0e 	bl	8012458 <HAL_SD_ConfigWideBusOperation>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8002042:	f7ff fe21 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000e28 	.word	0x20000e28
 8002050:	40012800 	.word	0x40012800

08002054 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a25      	ldr	r2, [pc, #148]	; (8002108 <HAL_SD_MspInit+0xb4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d144      	bne.n	8002100 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002076:	4b25      	ldr	r3, [pc, #148]	; (800210c <HAL_SD_MspInit+0xb8>)
 8002078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207a:	4a24      	ldr	r2, [pc, #144]	; (800210c <HAL_SD_MspInit+0xb8>)
 800207c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002080:	6613      	str	r3, [r2, #96]	; 0x60
 8002082:	4b22      	ldr	r3, [pc, #136]	; (800210c <HAL_SD_MspInit+0xb8>)
 8002084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800208e:	4b1f      	ldr	r3, [pc, #124]	; (800210c <HAL_SD_MspInit+0xb8>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002092:	4a1e      	ldr	r2, [pc, #120]	; (800210c <HAL_SD_MspInit+0xb8>)
 8002094:	f043 0308 	orr.w	r3, r3, #8
 8002098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800209a:	4b1c      	ldr	r3, [pc, #112]	; (800210c <HAL_SD_MspInit+0xb8>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020a6:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_SD_MspInit+0xb8>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	4a18      	ldr	r2, [pc, #96]	; (800210c <HAL_SD_MspInit+0xb8>)
 80020ac:	f043 0304 	orr.w	r3, r3, #4
 80020b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b2:	4b16      	ldr	r3, [pc, #88]	; (800210c <HAL_SD_MspInit+0xb8>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 80020be:	2304      	movs	r3, #4
 80020c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ca:	2303      	movs	r3, #3
 80020cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80020ce:	230c      	movs	r3, #12
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 80020d2:	f107 0314 	add.w	r3, r7, #20
 80020d6:	4619      	mov	r1, r3
 80020d8:	480d      	ldr	r0, [pc, #52]	; (8002110 <HAL_SD_MspInit+0xbc>)
 80020da:	f00a fbdd 	bl	800c898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 80020de:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80020e2:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ec:	2303      	movs	r3, #3
 80020ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80020f0:	230c      	movs	r3, #12
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	4619      	mov	r1, r3
 80020fa:	4806      	ldr	r0, [pc, #24]	; (8002114 <HAL_SD_MspInit+0xc0>)
 80020fc:	f00a fbcc 	bl	800c898 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002100:	bf00      	nop
 8002102:	3728      	adds	r7, #40	; 0x28
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40012800 	.word	0x40012800
 800210c:	40021000 	.word	0x40021000
 8002110:	48000c00 	.word	0x48000c00
 8002114:	48000800 	.word	0x48000800

08002118 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800211c:	4b1b      	ldr	r3, [pc, #108]	; (800218c <MX_SPI1_Init+0x74>)
 800211e:	4a1c      	ldr	r2, [pc, #112]	; (8002190 <MX_SPI1_Init+0x78>)
 8002120:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002122:	4b1a      	ldr	r3, [pc, #104]	; (800218c <MX_SPI1_Init+0x74>)
 8002124:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002128:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800212a:	4b18      	ldr	r3, [pc, #96]	; (800218c <MX_SPI1_Init+0x74>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002130:	4b16      	ldr	r3, [pc, #88]	; (800218c <MX_SPI1_Init+0x74>)
 8002132:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002136:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002138:	4b14      	ldr	r3, [pc, #80]	; (800218c <MX_SPI1_Init+0x74>)
 800213a:	2200      	movs	r2, #0
 800213c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <MX_SPI1_Init+0x74>)
 8002140:	2200      	movs	r2, #0
 8002142:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <MX_SPI1_Init+0x74>)
 8002146:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800214a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800214c:	4b0f      	ldr	r3, [pc, #60]	; (800218c <MX_SPI1_Init+0x74>)
 800214e:	2200      	movs	r2, #0
 8002150:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <MX_SPI1_Init+0x74>)
 8002154:	2200      	movs	r2, #0
 8002156:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <MX_SPI1_Init+0x74>)
 800215a:	2200      	movs	r2, #0
 800215c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <MX_SPI1_Init+0x74>)
 8002160:	2200      	movs	r2, #0
 8002162:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002164:	4b09      	ldr	r3, [pc, #36]	; (800218c <MX_SPI1_Init+0x74>)
 8002166:	2207      	movs	r2, #7
 8002168:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <MX_SPI1_Init+0x74>)
 800216c:	2200      	movs	r2, #0
 800216e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <MX_SPI1_Init+0x74>)
 8002172:	2208      	movs	r2, #8
 8002174:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002176:	4805      	ldr	r0, [pc, #20]	; (800218c <MX_SPI1_Init+0x74>)
 8002178:	f010 fce6 	bl	8012b48 <HAL_SPI_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002182:	f7ff fd81 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000eac 	.word	0x20000eac
 8002190:	40013000 	.word	0x40013000

08002194 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <MX_SPI2_Init+0x74>)
 800219a:	4a1c      	ldr	r2, [pc, #112]	; (800220c <MX_SPI2_Init+0x78>)
 800219c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800219e:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <MX_SPI2_Init+0x74>)
 80021a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021a6:	4b18      	ldr	r3, [pc, #96]	; (8002208 <MX_SPI2_Init+0x74>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80021ac:	4b16      	ldr	r3, [pc, #88]	; (8002208 <MX_SPI2_Init+0x74>)
 80021ae:	f44f 7240 	mov.w	r2, #768	; 0x300
 80021b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021b4:	4b14      	ldr	r3, [pc, #80]	; (8002208 <MX_SPI2_Init+0x74>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021ba:	4b13      	ldr	r3, [pc, #76]	; (8002208 <MX_SPI2_Init+0x74>)
 80021bc:	2200      	movs	r2, #0
 80021be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <MX_SPI2_Init+0x74>)
 80021c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <MX_SPI2_Init+0x74>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021ce:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <MX_SPI2_Init+0x74>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <MX_SPI2_Init+0x74>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <MX_SPI2_Init+0x74>)
 80021dc:	2200      	movs	r2, #0
 80021de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <MX_SPI2_Init+0x74>)
 80021e2:	2207      	movs	r2, #7
 80021e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021e6:	4b08      	ldr	r3, [pc, #32]	; (8002208 <MX_SPI2_Init+0x74>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <MX_SPI2_Init+0x74>)
 80021ee:	2208      	movs	r2, #8
 80021f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021f2:	4805      	ldr	r0, [pc, #20]	; (8002208 <MX_SPI2_Init+0x74>)
 80021f4:	f010 fca8 	bl	8012b48 <HAL_SPI_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80021fe:	f7ff fd43 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	20000f10 	.word	0x20000f10
 800220c:	40003800 	.word	0x40003800

08002210 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08e      	sub	sp, #56	; 0x38
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a4b      	ldr	r2, [pc, #300]	; (800235c <HAL_SPI_MspInit+0x14c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d146      	bne.n	80022c0 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002232:	4b4b      	ldr	r3, [pc, #300]	; (8002360 <HAL_SPI_MspInit+0x150>)
 8002234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002236:	4a4a      	ldr	r2, [pc, #296]	; (8002360 <HAL_SPI_MspInit+0x150>)
 8002238:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800223c:	6613      	str	r3, [r2, #96]	; 0x60
 800223e:	4b48      	ldr	r3, [pc, #288]	; (8002360 <HAL_SPI_MspInit+0x150>)
 8002240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002246:	623b      	str	r3, [r7, #32]
 8002248:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224a:	4b45      	ldr	r3, [pc, #276]	; (8002360 <HAL_SPI_MspInit+0x150>)
 800224c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224e:	4a44      	ldr	r2, [pc, #272]	; (8002360 <HAL_SPI_MspInit+0x150>)
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002256:	4b42      	ldr	r3, [pc, #264]	; (8002360 <HAL_SPI_MspInit+0x150>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	61fb      	str	r3, [r7, #28]
 8002260:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002262:	4b3f      	ldr	r3, [pc, #252]	; (8002360 <HAL_SPI_MspInit+0x150>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002266:	4a3e      	ldr	r2, [pc, #248]	; (8002360 <HAL_SPI_MspInit+0x150>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800226e:	4b3c      	ldr	r3, [pc, #240]	; (8002360 <HAL_SPI_MspInit+0x150>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	61bb      	str	r3, [r7, #24]
 8002278:	69bb      	ldr	r3, [r7, #24]
    PB4 (NJTRST)     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800227a:	2330      	movs	r3, #48	; 0x30
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227e:	2302      	movs	r3, #2
 8002280:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002286:	2303      	movs	r3, #3
 8002288:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800228a:	2305      	movs	r3, #5
 800228c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002292:	4619      	mov	r1, r3
 8002294:	4833      	ldr	r0, [pc, #204]	; (8002364 <HAL_SPI_MspInit+0x154>)
 8002296:	f00a faff 	bl	800c898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 800229a:	f248 0320 	movw	r3, #32800	; 0x8020
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a0:	2302      	movs	r3, #2
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a8:	2303      	movs	r3, #3
 80022aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022ac:	2305      	movs	r3, #5
 80022ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022b4:	4619      	mov	r1, r3
 80022b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ba:	f00a faed 	bl	800c898 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80022be:	e049      	b.n	8002354 <HAL_SPI_MspInit+0x144>
  else if(spiHandle->Instance==SPI2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a28      	ldr	r2, [pc, #160]	; (8002368 <HAL_SPI_MspInit+0x158>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d144      	bne.n	8002354 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022ca:	4b25      	ldr	r3, [pc, #148]	; (8002360 <HAL_SPI_MspInit+0x150>)
 80022cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ce:	4a24      	ldr	r2, [pc, #144]	; (8002360 <HAL_SPI_MspInit+0x150>)
 80022d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d4:	6593      	str	r3, [r2, #88]	; 0x58
 80022d6:	4b22      	ldr	r3, [pc, #136]	; (8002360 <HAL_SPI_MspInit+0x150>)
 80022d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80022e2:	4b1f      	ldr	r3, [pc, #124]	; (8002360 <HAL_SPI_MspInit+0x150>)
 80022e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e6:	4a1e      	ldr	r2, [pc, #120]	; (8002360 <HAL_SPI_MspInit+0x150>)
 80022e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ee:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <HAL_SPI_MspInit+0x150>)
 80022f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022fa:	4b19      	ldr	r3, [pc, #100]	; (8002360 <HAL_SPI_MspInit+0x150>)
 80022fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022fe:	4a18      	ldr	r2, [pc, #96]	; (8002360 <HAL_SPI_MspInit+0x150>)
 8002300:	f043 0302 	orr.w	r3, r3, #2
 8002304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002306:	4b16      	ldr	r3, [pc, #88]	; (8002360 <HAL_SPI_MspInit+0x150>)
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8002312:	2306      	movs	r3, #6
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002322:	2305      	movs	r3, #5
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232a:	4619      	mov	r1, r3
 800232c:	480f      	ldr	r0, [pc, #60]	; (800236c <HAL_SPI_MspInit+0x15c>)
 800232e:	f00a fab3 	bl	800c898 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8002332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002340:	2303      	movs	r3, #3
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002344:	2305      	movs	r3, #5
 8002346:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234c:	4619      	mov	r1, r3
 800234e:	4805      	ldr	r0, [pc, #20]	; (8002364 <HAL_SPI_MspInit+0x154>)
 8002350:	f00a faa2 	bl	800c898 <HAL_GPIO_Init>
}
 8002354:	bf00      	nop
 8002356:	3738      	adds	r7, #56	; 0x38
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40013000 	.word	0x40013000
 8002360:	40021000 	.word	0x40021000
 8002364:	48000400 	.word	0x48000400
 8002368:	40003800 	.word	0x40003800
 800236c:	48002000 	.word	0x48002000

08002370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002376:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <HAL_MspInit+0x44>)
 8002378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800237a:	4a0e      	ldr	r2, [pc, #56]	; (80023b4 <HAL_MspInit+0x44>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6613      	str	r3, [r2, #96]	; 0x60
 8002382:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <HAL_MspInit+0x44>)
 8002384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_MspInit+0x44>)
 8002390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002392:	4a08      	ldr	r2, [pc, #32]	; (80023b4 <HAL_MspInit+0x44>)
 8002394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002398:	6593      	str	r3, [r2, #88]	; 0x58
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <HAL_MspInit+0x44>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023a6:	bf00      	nop
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000

080023b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023bc:	e7fe      	b.n	80023bc <NMI_Handler+0x4>

080023be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c2:	e7fe      	b.n	80023c2 <HardFault_Handler+0x4>

080023c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c8:	e7fe      	b.n	80023c8 <MemManage_Handler+0x4>

080023ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ce:	e7fe      	b.n	80023ce <BusFault_Handler+0x4>

080023d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d4:	e7fe      	b.n	80023d4 <UsageFault_Handler+0x4>

080023d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023f2:	b480      	push	{r7}
 80023f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002404:	f008 fcb6 	bl	800ad74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}

0800240c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MFX_IRQ_OUT_Pin);
 8002410:	2020      	movs	r0, #32
 8002412:	f00a fcdd 	bl	800cdd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}

0800241a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_DOWN_Pin);
 800241e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002422:	f00a fcd5 	bl	800cdd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_RIGHT_Pin);
 8002426:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800242a:	f00a fcd1 	bl	800cdd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_Pin);
 800242e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002432:	f00a fccd 	bl	800cdd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002440:	4802      	ldr	r0, [pc, #8]	; (800244c <OTG_FS_IRQHandler+0x10>)
 8002442:	f00b ffd3 	bl	800e3ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20002894 	.word	0x20002894

08002450 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
 8002460:	e00a      	b.n	8002478 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002462:	f3af 8000 	nop.w
 8002466:	4601      	mov	r1, r0
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	60ba      	str	r2, [r7, #8]
 800246e:	b2ca      	uxtb	r2, r1
 8002470:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	3301      	adds	r3, #1
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	429a      	cmp	r2, r3
 800247e:	dbf0      	blt.n	8002462 <_read+0x12>
	}

return len;
 8002480:	687b      	ldr	r3, [r7, #4]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b086      	sub	sp, #24
 800248e:	af00      	add	r7, sp, #0
 8002490:	60f8      	str	r0, [r7, #12]
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	e009      	b.n	80024b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	60ba      	str	r2, [r7, #8]
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	3301      	adds	r3, #1
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	dbf1      	blt.n	800249c <_write+0x12>
	}
	return len;
 80024b8:	687b      	ldr	r3, [r7, #4]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <_close>:

int _close(int file)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
	return -1;
 80024ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024ea:	605a      	str	r2, [r3, #4]
	return 0;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <_isatty>:

int _isatty(int file)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
	return 1;
 8002502:	2301      	movs	r3, #1
}
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
	return 0;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
	...

0800252c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002534:	4a14      	ldr	r2, [pc, #80]	; (8002588 <_sbrk+0x5c>)
 8002536:	4b15      	ldr	r3, [pc, #84]	; (800258c <_sbrk+0x60>)
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002540:	4b13      	ldr	r3, [pc, #76]	; (8002590 <_sbrk+0x64>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d102      	bne.n	800254e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002548:	4b11      	ldr	r3, [pc, #68]	; (8002590 <_sbrk+0x64>)
 800254a:	4a12      	ldr	r2, [pc, #72]	; (8002594 <_sbrk+0x68>)
 800254c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800254e:	4b10      	ldr	r3, [pc, #64]	; (8002590 <_sbrk+0x64>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	429a      	cmp	r2, r3
 800255a:	d207      	bcs.n	800256c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800255c:	f016 fc98 	bl	8018e90 <__errno>
 8002560:	4603      	mov	r3, r0
 8002562:	220c      	movs	r2, #12
 8002564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002566:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800256a:	e009      	b.n	8002580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800256c:	4b08      	ldr	r3, [pc, #32]	; (8002590 <_sbrk+0x64>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <_sbrk+0x64>)
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4413      	add	r3, r2
 800257a:	4a05      	ldr	r2, [pc, #20]	; (8002590 <_sbrk+0x64>)
 800257c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800257e:	68fb      	ldr	r3, [r7, #12]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20050000 	.word	0x20050000
 800258c:	00000400 	.word	0x00000400
 8002590:	20000f74 	.word	0x20000f74
 8002594:	20002fd0 	.word	0x20002fd0

08002598 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <SystemInit+0x20>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a2:	4a05      	ldr	r2, [pc, #20]	; (80025b8 <SystemInit+0x20>)
 80025a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025c2:	1d3b      	adds	r3, r7, #4
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80025cc:	4b14      	ldr	r3, [pc, #80]	; (8002620 <MX_TIM6_Init+0x64>)
 80025ce:	4a15      	ldr	r2, [pc, #84]	; (8002624 <MX_TIM6_Init+0x68>)
 80025d0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 80025d2:	4b13      	ldr	r3, [pc, #76]	; (8002620 <MX_TIM6_Init+0x64>)
 80025d4:	2263      	movs	r2, #99	; 0x63
 80025d6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d8:	4b11      	ldr	r3, [pc, #68]	; (8002620 <MX_TIM6_Init+0x64>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19200-1;
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <MX_TIM6_Init+0x64>)
 80025e0:	f644 22ff 	movw	r2, #19199	; 0x4aff
 80025e4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <MX_TIM6_Init+0x64>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025ec:	480c      	ldr	r0, [pc, #48]	; (8002620 <MX_TIM6_Init+0x64>)
 80025ee:	f010 fb96 	bl	8012d1e <HAL_TIM_Base_Init>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80025f8:	f7ff fb46 	bl	8001c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025fc:	2300      	movs	r3, #0
 80025fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	4619      	mov	r1, r3
 8002608:	4805      	ldr	r0, [pc, #20]	; (8002620 <MX_TIM6_Init+0x64>)
 800260a:	f011 faed 	bl	8013be8 <HAL_TIMEx_MasterConfigSynchronization>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002614:	f7ff fb38 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002618:	bf00      	nop
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000f78 	.word	0x20000f78
 8002624:	40001000 	.word	0x40001000

08002628 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <HAL_TIM_Base_MspInit+0x38>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d10b      	bne.n	8002652 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <HAL_TIM_Base_MspInit+0x3c>)
 800263c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263e:	4a09      	ldr	r2, [pc, #36]	; (8002664 <HAL_TIM_Base_MspInit+0x3c>)
 8002640:	f043 0310 	orr.w	r3, r3, #16
 8002644:	6593      	str	r3, [r2, #88]	; 0x58
 8002646:	4b07      	ldr	r3, [pc, #28]	; (8002664 <HAL_TIM_Base_MspInit+0x3c>)
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	40001000 	.word	0x40001000
 8002664:	40021000 	.word	0x40021000

08002668 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <MX_LPUART1_UART_Init+0x50>)
 800266e:	4a13      	ldr	r2, [pc, #76]	; (80026bc <MX_LPUART1_UART_Init+0x54>)
 8002670:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8002672:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <MX_LPUART1_UART_Init+0x50>)
 8002674:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <MX_LPUART1_UART_Init+0x58>)
 8002676:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <MX_LPUART1_UART_Init+0x50>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800267e:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <MX_LPUART1_UART_Init+0x50>)
 8002680:	2200      	movs	r2, #0
 8002682:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <MX_LPUART1_UART_Init+0x50>)
 8002686:	2200      	movs	r2, #0
 8002688:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800268a:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <MX_LPUART1_UART_Init+0x50>)
 800268c:	220c      	movs	r2, #12
 800268e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002690:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <MX_LPUART1_UART_Init+0x50>)
 8002692:	2200      	movs	r2, #0
 8002694:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002696:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <MX_LPUART1_UART_Init+0x50>)
 8002698:	2200      	movs	r2, #0
 800269a:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <MX_LPUART1_UART_Init+0x50>)
 800269e:	2200      	movs	r2, #0
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80026a2:	4805      	ldr	r0, [pc, #20]	; (80026b8 <MX_LPUART1_UART_Init+0x50>)
 80026a4:	f011 fb28 	bl	8013cf8 <HAL_UART_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_LPUART1_UART_Init+0x4a>
  {
    Error_Handler();
 80026ae:	f7ff faeb 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000fc4 	.word	0x20000fc4
 80026bc:	40008000 	.word	0x40008000
 80026c0:	00033324 	.word	0x00033324

080026c4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026c8:	4b14      	ldr	r3, [pc, #80]	; (800271c <MX_USART1_UART_Init+0x58>)
 80026ca:	4a15      	ldr	r2, [pc, #84]	; (8002720 <MX_USART1_UART_Init+0x5c>)
 80026cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80026ce:	4b13      	ldr	r3, [pc, #76]	; (800271c <MX_USART1_UART_Init+0x58>)
 80026d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80026d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <MX_USART1_UART_Init+0x58>)
 80026d8:	2200      	movs	r2, #0
 80026da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026dc:	4b0f      	ldr	r3, [pc, #60]	; (800271c <MX_USART1_UART_Init+0x58>)
 80026de:	2200      	movs	r2, #0
 80026e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <MX_USART1_UART_Init+0x58>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026e8:	4b0c      	ldr	r3, [pc, #48]	; (800271c <MX_USART1_UART_Init+0x58>)
 80026ea:	220c      	movs	r2, #12
 80026ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ee:	4b0b      	ldr	r3, [pc, #44]	; (800271c <MX_USART1_UART_Init+0x58>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026f4:	4b09      	ldr	r3, [pc, #36]	; (800271c <MX_USART1_UART_Init+0x58>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026fa:	4b08      	ldr	r3, [pc, #32]	; (800271c <MX_USART1_UART_Init+0x58>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002700:	4b06      	ldr	r3, [pc, #24]	; (800271c <MX_USART1_UART_Init+0x58>)
 8002702:	2200      	movs	r2, #0
 8002704:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002706:	4805      	ldr	r0, [pc, #20]	; (800271c <MX_USART1_UART_Init+0x58>)
 8002708:	f011 faf6 	bl	8013cf8 <HAL_UART_Init>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002712:	f7ff fab9 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20001048 	.word	0x20001048
 8002720:	40013800 	.word	0x40013800

08002724 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002728:	4b14      	ldr	r3, [pc, #80]	; (800277c <MX_USART2_UART_Init+0x58>)
 800272a:	4a15      	ldr	r2, [pc, #84]	; (8002780 <MX_USART2_UART_Init+0x5c>)
 800272c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800272e:	4b13      	ldr	r3, [pc, #76]	; (800277c <MX_USART2_UART_Init+0x58>)
 8002730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002736:	4b11      	ldr	r3, [pc, #68]	; (800277c <MX_USART2_UART_Init+0x58>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800273c:	4b0f      	ldr	r3, [pc, #60]	; (800277c <MX_USART2_UART_Init+0x58>)
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002742:	4b0e      	ldr	r3, [pc, #56]	; (800277c <MX_USART2_UART_Init+0x58>)
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <MX_USART2_UART_Init+0x58>)
 800274a:	220c      	movs	r2, #12
 800274c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800274e:	4b0b      	ldr	r3, [pc, #44]	; (800277c <MX_USART2_UART_Init+0x58>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002754:	4b09      	ldr	r3, [pc, #36]	; (800277c <MX_USART2_UART_Init+0x58>)
 8002756:	2200      	movs	r2, #0
 8002758:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800275a:	4b08      	ldr	r3, [pc, #32]	; (800277c <MX_USART2_UART_Init+0x58>)
 800275c:	2200      	movs	r2, #0
 800275e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <MX_USART2_UART_Init+0x58>)
 8002762:	2200      	movs	r2, #0
 8002764:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002766:	4805      	ldr	r0, [pc, #20]	; (800277c <MX_USART2_UART_Init+0x58>)
 8002768:	f011 fac6 	bl	8013cf8 <HAL_UART_Init>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002772:	f7ff fa89 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	200010cc 	.word	0x200010cc
 8002780:	40004400 	.word	0x40004400

08002784 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b0b2      	sub	sp, #200	; 0xc8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800279c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027a0:	228c      	movs	r2, #140	; 0x8c
 80027a2:	2100      	movs	r1, #0
 80027a4:	4618      	mov	r0, r3
 80027a6:	f016 fbab 	bl	8018f00 <memset>
  if(uartHandle->Instance==LPUART1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a86      	ldr	r2, [pc, #536]	; (80029c8 <HAL_UART_MspInit+0x244>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d13e      	bne.n	8002832 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80027b4:	2320      	movs	r3, #32
 80027b6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80027b8:	2300      	movs	r3, #0
 80027ba:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027c0:	4618      	mov	r0, r3
 80027c2:	f00d fe8f 	bl	80104e4 <HAL_RCCEx_PeriphCLKConfig>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80027cc:	f7ff fa5c 	bl	8001c88 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80027d0:	4b7e      	ldr	r3, [pc, #504]	; (80029cc <HAL_UART_MspInit+0x248>)
 80027d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d4:	4a7d      	ldr	r2, [pc, #500]	; (80029cc <HAL_UART_MspInit+0x248>)
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	65d3      	str	r3, [r2, #92]	; 0x5c
 80027dc:	4b7b      	ldr	r3, [pc, #492]	; (80029cc <HAL_UART_MspInit+0x248>)
 80027de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80027e8:	4b78      	ldr	r3, [pc, #480]	; (80029cc <HAL_UART_MspInit+0x248>)
 80027ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ec:	4a77      	ldr	r2, [pc, #476]	; (80029cc <HAL_UART_MspInit+0x248>)
 80027ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027f4:	4b75      	ldr	r3, [pc, #468]	; (80029cc <HAL_UART_MspInit+0x248>)
 80027f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fc:	623b      	str	r3, [r7, #32]
 80027fe:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableVddIO2();
 8002800:	f00c ff18 	bl	800f634 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8002804:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002818:	2303      	movs	r3, #3
 800281a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800281e:	2308      	movs	r3, #8
 8002820:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002824:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002828:	4619      	mov	r1, r3
 800282a:	4869      	ldr	r0, [pc, #420]	; (80029d0 <HAL_UART_MspInit+0x24c>)
 800282c:	f00a f834 	bl	800c898 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002830:	e0c6      	b.n	80029c0 <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART1)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a67      	ldr	r2, [pc, #412]	; (80029d4 <HAL_UART_MspInit+0x250>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d15f      	bne.n	80028fc <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800283c:	2301      	movs	r3, #1
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002840:	2300      	movs	r3, #0
 8002842:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002844:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002848:	4618      	mov	r0, r3
 800284a:	f00d fe4b 	bl	80104e4 <HAL_RCCEx_PeriphCLKConfig>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8002854:	f7ff fa18 	bl	8001c88 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002858:	4b5c      	ldr	r3, [pc, #368]	; (80029cc <HAL_UART_MspInit+0x248>)
 800285a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800285c:	4a5b      	ldr	r2, [pc, #364]	; (80029cc <HAL_UART_MspInit+0x248>)
 800285e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002862:	6613      	str	r3, [r2, #96]	; 0x60
 8002864:	4b59      	ldr	r3, [pc, #356]	; (80029cc <HAL_UART_MspInit+0x248>)
 8002866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800286c:	61fb      	str	r3, [r7, #28]
 800286e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002870:	4b56      	ldr	r3, [pc, #344]	; (80029cc <HAL_UART_MspInit+0x248>)
 8002872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002874:	4a55      	ldr	r2, [pc, #340]	; (80029cc <HAL_UART_MspInit+0x248>)
 8002876:	f043 0302 	orr.w	r3, r3, #2
 800287a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800287c:	4b53      	ldr	r3, [pc, #332]	; (80029cc <HAL_UART_MspInit+0x248>)
 800287e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002888:	4b50      	ldr	r3, [pc, #320]	; (80029cc <HAL_UART_MspInit+0x248>)
 800288a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288c:	4a4f      	ldr	r2, [pc, #316]	; (80029cc <HAL_UART_MspInit+0x248>)
 800288e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002892:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002894:	4b4d      	ldr	r3, [pc, #308]	; (80029cc <HAL_UART_MspInit+0x248>)
 8002896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 80028a0:	f00c fec8 	bl	800f634 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 80028a4:	2340      	movs	r3, #64	; 0x40
 80028a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028aa:	2302      	movs	r3, #2
 80028ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b6:	2303      	movs	r3, #3
 80028b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028bc:	2307      	movs	r3, #7
 80028be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 80028c2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80028c6:	4619      	mov	r1, r3
 80028c8:	4843      	ldr	r0, [pc, #268]	; (80029d8 <HAL_UART_MspInit+0x254>)
 80028ca:	f009 ffe5 	bl	800c898 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 80028ce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80028d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d6:	2302      	movs	r3, #2
 80028d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e2:	2303      	movs	r3, #3
 80028e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028e8:	2307      	movs	r3, #7
 80028ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028ee:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80028f2:	4619      	mov	r1, r3
 80028f4:	4836      	ldr	r0, [pc, #216]	; (80029d0 <HAL_UART_MspInit+0x24c>)
 80028f6:	f009 ffcf 	bl	800c898 <HAL_GPIO_Init>
}
 80028fa:	e061      	b.n	80029c0 <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART2)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a36      	ldr	r2, [pc, #216]	; (80029dc <HAL_UART_MspInit+0x258>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d15c      	bne.n	80029c0 <HAL_UART_MspInit+0x23c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002906:	2302      	movs	r3, #2
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800290a:	2300      	movs	r3, #0
 800290c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800290e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002912:	4618      	mov	r0, r3
 8002914:	f00d fde6 	bl	80104e4 <HAL_RCCEx_PeriphCLKConfig>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 800291e:	f7ff f9b3 	bl	8001c88 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002922:	4b2a      	ldr	r3, [pc, #168]	; (80029cc <HAL_UART_MspInit+0x248>)
 8002924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002926:	4a29      	ldr	r2, [pc, #164]	; (80029cc <HAL_UART_MspInit+0x248>)
 8002928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800292c:	6593      	str	r3, [r2, #88]	; 0x58
 800292e:	4b27      	ldr	r3, [pc, #156]	; (80029cc <HAL_UART_MspInit+0x248>)
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800293a:	4b24      	ldr	r3, [pc, #144]	; (80029cc <HAL_UART_MspInit+0x248>)
 800293c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293e:	4a23      	ldr	r2, [pc, #140]	; (80029cc <HAL_UART_MspInit+0x248>)
 8002940:	f043 0308 	orr.w	r3, r3, #8
 8002944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002946:	4b21      	ldr	r3, [pc, #132]	; (80029cc <HAL_UART_MspInit+0x248>)
 8002948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	60fb      	str	r3, [r7, #12]
 8002950:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002952:	4b1e      	ldr	r3, [pc, #120]	; (80029cc <HAL_UART_MspInit+0x248>)
 8002954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002956:	4a1d      	ldr	r2, [pc, #116]	; (80029cc <HAL_UART_MspInit+0x248>)
 8002958:	f043 0301 	orr.w	r3, r3, #1
 800295c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800295e:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <HAL_UART_MspInit+0x248>)
 8002960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 800296a:	2340      	movs	r3, #64	; 0x40
 800296c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002970:	2302      	movs	r3, #2
 8002972:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800297c:	2303      	movs	r3, #3
 800297e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002982:	2307      	movs	r3, #7
 8002984:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8002988:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800298c:	4619      	mov	r1, r3
 800298e:	4814      	ldr	r0, [pc, #80]	; (80029e0 <HAL_UART_MspInit+0x25c>)
 8002990:	f009 ff82 	bl	800c898 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8002994:	2304      	movs	r3, #4
 8002996:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299a:	2302      	movs	r3, #2
 800299c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a6:	2303      	movs	r3, #3
 80029a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029ac:	2307      	movs	r3, #7
 80029ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 80029b2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80029b6:	4619      	mov	r1, r3
 80029b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029bc:	f009 ff6c 	bl	800c898 <HAL_GPIO_Init>
}
 80029c0:	bf00      	nop
 80029c2:	37c8      	adds	r7, #200	; 0xc8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40008000 	.word	0x40008000
 80029cc:	40021000 	.word	0x40021000
 80029d0:	48001800 	.word	0x48001800
 80029d4:	40013800 	.word	0x40013800
 80029d8:	48000400 	.word	0x48000400
 80029dc:	40004400 	.word	0x40004400
 80029e0:	48000c00 	.word	0x48000c00

080029e4 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	330a      	adds	r3, #10
 80029f4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8002a02:	b299      	uxth	r1, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	f00a fab4 	bl	800cf7c <HAL_I2C_Master_Transmit>
 8002a14:	4603      	mov	r3, r0
 8002a16:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8002a18:	693b      	ldr	r3, [r7, #16]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b088      	sub	sp, #32
 8002a26:	af02      	add	r7, sp, #8
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	330a      	adds	r3, #10
 8002a32:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	b299      	uxth	r1, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	4613      	mov	r3, r2
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	f00a fb86 	bl	800d164 <HAL_I2C_Master_Receive>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8002a5c:	693b      	ldr	r3, [r7, #16]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	460b      	mov	r3, r1
 8002a76:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	2b3f      	cmp	r3, #63	; 0x3f
 8002a80:	d902      	bls.n	8002a88 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8002a82:	f06f 0303 	mvn.w	r3, #3
 8002a86:	e016      	b.n	8002ab6 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8002a88:	4a0d      	ldr	r2, [pc, #52]	; (8002ac0 <VL53L0X_WriteMulti+0x58>)
 8002a8a:	7afb      	ldrb	r3, [r7, #11]
 8002a8c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	480c      	ldr	r0, [pc, #48]	; (8002ac4 <VL53L0X_WriteMulti+0x5c>)
 8002a94:	f016 fa26 	bl	8018ee4 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	4908      	ldr	r1, [pc, #32]	; (8002ac0 <VL53L0X_WriteMulti+0x58>)
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f7ff ff9f 	bl	80029e4 <_I2CWrite>
 8002aa6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002aae:	23ec      	movs	r3, #236	; 0xec
 8002ab0:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8002ab2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20001150 	.word	0x20001150
 8002ac4:	20001151 	.word	0x20001151

08002ac8 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	603b      	str	r3, [r7, #0]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8002adc:	f107 030b 	add.w	r3, r7, #11
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f7ff ff7d 	bl	80029e4 <_I2CWrite>
 8002aea:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d002      	beq.n	8002af8 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002af2:	23ec      	movs	r3, #236	; 0xec
 8002af4:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002af6:	e00c      	b.n	8002b12 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f7ff ff90 	bl	8002a22 <_I2CRead>
 8002b02:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002b0a:	23ec      	movs	r3, #236	; 0xec
 8002b0c:	75fb      	strb	r3, [r7, #23]
 8002b0e:	e000      	b.n	8002b12 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8002b10:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8002b12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	70fb      	strb	r3, [r7, #3]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8002b34:	4a0b      	ldr	r2, [pc, #44]	; (8002b64 <VL53L0X_WrByte+0x44>)
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8002b3a:	4a0a      	ldr	r2, [pc, #40]	; (8002b64 <VL53L0X_WrByte+0x44>)
 8002b3c:	78bb      	ldrb	r3, [r7, #2]
 8002b3e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8002b40:	2202      	movs	r2, #2
 8002b42:	4908      	ldr	r1, [pc, #32]	; (8002b64 <VL53L0X_WrByte+0x44>)
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff ff4d 	bl	80029e4 <_I2CWrite>
 8002b4a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002b52:	23ec      	movs	r3, #236	; 0xec
 8002b54:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8002b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3710      	adds	r7, #16
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20001150 	.word	0x20001150

08002b68 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	70fb      	strb	r3, [r7, #3]
 8002b74:	4613      	mov	r3, r2
 8002b76:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8002b7c:	4a0e      	ldr	r2, [pc, #56]	; (8002bb8 <VL53L0X_WrWord+0x50>)
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8002b82:	883b      	ldrh	r3, [r7, #0]
 8002b84:	0a1b      	lsrs	r3, r3, #8
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <VL53L0X_WrWord+0x50>)
 8002b8c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8002b8e:	883b      	ldrh	r3, [r7, #0]
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <VL53L0X_WrWord+0x50>)
 8002b94:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8002b96:	2203      	movs	r2, #3
 8002b98:	4907      	ldr	r1, [pc, #28]	; (8002bb8 <VL53L0X_WrWord+0x50>)
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff ff22 	bl	80029e4 <_I2CWrite>
 8002ba0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002ba8:	23ec      	movs	r3, #236	; 0xec
 8002baa:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8002bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	20001150 	.word	0x20001150

08002bbc <VL53L0X_WrDWord>:

VL53L0X_Error VL53L0X_WrDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t data) {
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    _I2CBuffer[0] = index;
 8002bce:	4a13      	ldr	r2, [pc, #76]	; (8002c1c <VL53L0X_WrDWord+0x60>)
 8002bd0:	7afb      	ldrb	r3, [r7, #11]
 8002bd2:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = (data >> 24) & 0xFF;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	0e1b      	lsrs	r3, r3, #24
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <VL53L0X_WrDWord+0x60>)
 8002bdc:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 16) & 0xFF;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	0c1b      	lsrs	r3, r3, #16
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <VL53L0X_WrDWord+0x60>)
 8002be6:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 8)  & 0xFF;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	0a1b      	lsrs	r3, r3, #8
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <VL53L0X_WrDWord+0x60>)
 8002bf0:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 0 ) & 0xFF;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <VL53L0X_WrDWord+0x60>)
 8002bf8:	711a      	strb	r2, [r3, #4]
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 5);
 8002bfa:	2205      	movs	r2, #5
 8002bfc:	4907      	ldr	r1, [pc, #28]	; (8002c1c <VL53L0X_WrDWord+0x60>)
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f7ff fef0 	bl	80029e4 <_I2CWrite>
 8002c04:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <VL53L0X_WrDWord+0x54>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002c0c:	23ec      	movs	r3, #236	; 0xec
 8002c0e:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8002c10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20001150 	.word	0x20001150

08002c20 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	4608      	mov	r0, r1
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4603      	mov	r3, r0
 8002c30:	70fb      	strb	r3, [r7, #3]
 8002c32:	460b      	mov	r3, r1
 8002c34:	70bb      	strb	r3, [r7, #2]
 8002c36:	4613      	mov	r3, r2
 8002c38:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8002c3e:	f107 020e 	add.w	r2, r7, #14
 8002c42:	78fb      	ldrb	r3, [r7, #3]
 8002c44:	4619      	mov	r1, r3
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f81e 	bl	8002c88 <VL53L0X_RdByte>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8002c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d110      	bne.n	8002c7a <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8002c58:	7bba      	ldrb	r2, [r7, #14]
 8002c5a:	78bb      	ldrb	r3, [r7, #2]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	787b      	ldrb	r3, [r7, #1]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8002c68:	7bba      	ldrb	r2, [r7, #14]
 8002c6a:	78fb      	ldrb	r3, [r7, #3]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff ff56 	bl	8002b20 <VL53L0X_WrByte>
 8002c74:	4603      	mov	r3, r0
 8002c76:	73fb      	strb	r3, [r7, #15]
 8002c78:	e000      	b.n	8002c7c <VL53L0X_UpdateByte+0x5c>
        goto done;
 8002c7a:	bf00      	nop
done:
    return Status;
 8002c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	460b      	mov	r3, r1
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8002c9a:	f107 030b 	add.w	r3, r7, #11
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f7ff fe9e 	bl	80029e4 <_I2CWrite>
 8002ca8:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002cb0:	23ec      	movs	r3, #236	; 0xec
 8002cb2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002cb4:	e00c      	b.n	8002cd0 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	6879      	ldr	r1, [r7, #4]
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f7ff feb1 	bl	8002a22 <_I2CRead>
 8002cc0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d002      	beq.n	8002cce <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002cc8:	23ec      	movs	r3, #236	; 0xec
 8002cca:	75fb      	strb	r3, [r7, #23]
 8002ccc:	e000      	b.n	8002cd0 <VL53L0X_RdByte+0x48>
    }
done:
 8002cce:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8002cd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002cea:	2300      	movs	r3, #0
 8002cec:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8002cee:	f107 030b 	add.w	r3, r7, #11
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f7ff fe74 	bl	80029e4 <_I2CWrite>
 8002cfc:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002d04:	23ec      	movs	r3, #236	; 0xec
 8002d06:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002d08:	e017      	b.n	8002d3a <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	490e      	ldr	r1, [pc, #56]	; (8002d48 <VL53L0X_RdWord+0x6c>)
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f7ff fe87 	bl	8002a22 <_I2CRead>
 8002d14:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002d1c:	23ec      	movs	r3, #236	; 0xec
 8002d1e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002d20:	e00b      	b.n	8002d3a <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8002d22:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <VL53L0X_RdWord+0x6c>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	021b      	lsls	r3, r3, #8
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <VL53L0X_RdWord+0x6c>)
 8002d2e:	785b      	ldrb	r3, [r3, #1]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8002d3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20001150 	.word	0x20001150

08002d4c <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	460b      	mov	r3, r1
 8002d56:	607a      	str	r2, [r7, #4]
 8002d58:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8002d5e:	f107 030b 	add.w	r3, r7, #11
 8002d62:	2201      	movs	r2, #1
 8002d64:	4619      	mov	r1, r3
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f7ff fe3c 	bl	80029e4 <_I2CWrite>
 8002d6c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002d74:	23ec      	movs	r3, #236	; 0xec
 8002d76:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002d78:	e01b      	b.n	8002db2 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	4910      	ldr	r1, [pc, #64]	; (8002dc0 <VL53L0X_RdDWord+0x74>)
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f7ff fe4f 	bl	8002a22 <_I2CRead>
 8002d84:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8002d8c:	23ec      	movs	r3, #236	; 0xec
 8002d8e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8002d90:	e00f      	b.n	8002db2 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <VL53L0X_RdDWord+0x74>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	061a      	lsls	r2, r3, #24
 8002d98:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <VL53L0X_RdDWord+0x74>)
 8002d9a:	785b      	ldrb	r3, [r3, #1]
 8002d9c:	041b      	lsls	r3, r3, #16
 8002d9e:	441a      	add	r2, r3
 8002da0:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <VL53L0X_RdDWord+0x74>)
 8002da2:	789b      	ldrb	r3, [r3, #2]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	4413      	add	r3, r2
 8002da8:	4a05      	ldr	r2, [pc, #20]	; (8002dc0 <VL53L0X_RdDWord+0x74>)
 8002daa:	78d2      	ldrb	r2, [r2, #3]
 8002dac:	441a      	add	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8002db2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20001150 	.word	0x20001150

08002dc4 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8002dd0:	2002      	movs	r0, #2
 8002dd2:	f007 ffef 	bl	800adb4 <HAL_Delay>
    return status;
 8002dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002de4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002de8:	f7ff fbd6 	bl	8002598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dec:	480c      	ldr	r0, [pc, #48]	; (8002e20 <LoopForever+0x6>)
  ldr r1, =_edata
 8002dee:	490d      	ldr	r1, [pc, #52]	; (8002e24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002df0:	4a0d      	ldr	r2, [pc, #52]	; (8002e28 <LoopForever+0xe>)
  movs r3, #0
 8002df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002df4:	e002      	b.n	8002dfc <LoopCopyDataInit>

08002df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dfa:	3304      	adds	r3, #4

08002dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e00:	d3f9      	bcc.n	8002df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e02:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e04:	4c0a      	ldr	r4, [pc, #40]	; (8002e30 <LoopForever+0x16>)
  movs r3, #0
 8002e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e08:	e001      	b.n	8002e0e <LoopFillZerobss>

08002e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e0c:	3204      	adds	r2, #4

08002e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e10:	d3fb      	bcc.n	8002e0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e12:	f016 f843 	bl	8018e9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e16:	f7fe fbff 	bl	8001618 <main>

08002e1a <LoopForever>:

LoopForever:
    b LoopForever
 8002e1a:	e7fe      	b.n	8002e1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002e1c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e24:	20000740 	.word	0x20000740
  ldr r2, =_sidata
 8002e28:	0801c0b8 	.word	0x0801c0b8
  ldr r2, =_sbss
 8002e2c:	20000740 	.word	0x20000740
  ldr r4, =_ebss
 8002e30:	20002fd0 	.word	0x20002fd0

08002e34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e34:	e7fe      	b.n	8002e34 <ADC1_2_IRQHandler>
	...

08002e38 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 f90d 	bl	8003064 <ft6x06_GetInstance>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	2bff      	cmp	r3, #255	; 0xff
 8002e52:	d10e      	bne.n	8002e72 <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8002e54:	2000      	movs	r0, #0
 8002e56:	f000 f905 	bl	8003064 <ft6x06_GetInstance>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8002e5e:	7bbb      	ldrb	r3, [r7, #14]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d806      	bhi.n	8002e72 <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8002e64:	7bbb      	ldrb	r3, [r7, #14]
 8002e66:	88fa      	ldrh	r2, [r7, #6]
 8002e68:	b2d1      	uxtb	r1, r2
 8002e6a:	4a04      	ldr	r2, [pc, #16]	; (8002e7c <ft6x06_Init+0x44>)
 8002e6c:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8002e6e:	f006 fee7 	bl	8009c40 <TS_IO_Init>
    }
  }
}
 8002e72:	bf00      	nop
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20001190 	.word	0x20001190

08002e80 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8002ea0:	f006 fece 	bl	8009c40 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8002ea4:	88fb      	ldrh	r3, [r7, #6]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	21a8      	movs	r1, #168	; 0xa8
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f006 ff0e 	bl	8009ccc <TS_IO_Read>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	b29b      	uxth	r3, r3
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 f8bc 	bl	8003046 <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 f88d 	bl	8002ff0 <ft6x06_TS_DisableIT>
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2102      	movs	r1, #2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f006 fee9 	bl	8009ccc <TS_IO_Read>
 8002efa:	4603      	mov	r3, r0
 8002efc:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <ft6x06_TS_DetectTouch+0x50>)
 8002f1c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 8002f1e:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <ft6x06_TS_DetectTouch+0x50>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
 8002f26:	b2db      	uxtb	r3, r3
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	20001194 	.word	0x20001194

08002f34 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8002f46:	4b1f      	ldr	r3, [pc, #124]	; (8002fc4 <ft6x06_TS_GetXY+0x90>)
 8002f48:	789a      	ldrb	r2, [r3, #2]
 8002f4a:	4b1e      	ldr	r3, [pc, #120]	; (8002fc4 <ft6x06_TS_GetXY+0x90>)
 8002f4c:	785b      	ldrb	r3, [r3, #1]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d234      	bcs.n	8002fbc <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 8002f52:	4b1c      	ldr	r3, [pc, #112]	; (8002fc4 <ft6x06_TS_GetXY+0x90>)
 8002f54:	789b      	ldrb	r3, [r3, #2]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <ft6x06_TS_GetXY+0x2c>
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d003      	beq.n	8002f66 <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8002f5e:	e005      	b.n	8002f6c <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8002f60:	2303      	movs	r3, #3
 8002f62:	75fb      	strb	r3, [r7, #23]
      break;
 8002f64:	e002      	b.n	8002f6c <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8002f66:	2309      	movs	r3, #9
 8002f68:	75fb      	strb	r3, [r7, #23]
      break;
 8002f6a:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8002f6c:	89fb      	ldrh	r3, [r7, #14]
 8002f6e:	b2d8      	uxtb	r0, r3
 8002f70:	f107 0210 	add.w	r2, r7, #16
 8002f74:	7df9      	ldrb	r1, [r7, #23]
 8002f76:	2304      	movs	r3, #4
 8002f78:	f006 febe 	bl	8009cf8 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8002f7c:	7c3b      	ldrb	r3, [r7, #16]
 8002f7e:	021b      	lsls	r3, r3, #8
 8002f80:	b21b      	sxth	r3, r3
 8002f82:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002f86:	b21a      	sxth	r2, r3
 8002f88:	7c7b      	ldrb	r3, [r7, #17]
 8002f8a:	b21b      	sxth	r3, r3
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	b21b      	sxth	r3, r3
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8002f96:	7cbb      	ldrb	r3, [r7, #18]
 8002f98:	021b      	lsls	r3, r3, #8
 8002f9a:	b21b      	sxth	r3, r3
 8002f9c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002fa0:	b21a      	sxth	r2, r3
 8002fa2:	7cfb      	ldrb	r3, [r7, #19]
 8002fa4:	b21b      	sxth	r3, r3
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	b21b      	sxth	r3, r3
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8002fb0:	4b04      	ldr	r3, [pc, #16]	; (8002fc4 <ft6x06_TS_GetXY+0x90>)
 8002fb2:	789b      	ldrb	r3, [r3, #2]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	4b02      	ldr	r3, [pc, #8]	; (8002fc4 <ft6x06_TS_GetXY+0x90>)
 8002fba:	709a      	strb	r2, [r3, #2]
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	20001194 	.word	0x20001194

08002fc8 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	7bfa      	ldrb	r2, [r7, #15]
 8002fe0:	21a4      	movs	r1, #164	; 0xa4
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f006 fe58 	bl	8009c98 <TS_IO_Write>
}
 8002fe8:	bf00      	nop
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8002ffe:	2300      	movs	r3, #0
 8003000:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	7bfa      	ldrb	r2, [r7, #15]
 8003008:	21a4      	movs	r1, #164	; 0xa4
 800300a:	4618      	mov	r0, r3
 800300c:	f006 fe44 	bl	8009c98 <TS_IO_Write>
}
 8003010:	bf00      	nop
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8003046:	b480      	push	{r7}
 8003048:	b085      	sub	sp, #20
 800304a:	af00      	add	r7, sp, #0
 800304c:	4603      	mov	r3, r0
 800304e:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 8003054:	68fb      	ldr	r3, [r7, #12]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
	...

08003064 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8003072:	2300      	movs	r3, #0
 8003074:	73fb      	strb	r3, [r7, #15]
 8003076:	e00b      	b.n	8003090 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	4a0a      	ldr	r2, [pc, #40]	; (80030a4 <ft6x06_GetInstance+0x40>)
 800307c:	5cd3      	ldrb	r3, [r2, r3]
 800307e:	b29b      	uxth	r3, r3
 8003080:	88fa      	ldrh	r2, [r7, #6]
 8003082:	429a      	cmp	r2, r3
 8003084:	d101      	bne.n	800308a <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	e006      	b.n	8003098 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	3301      	adds	r3, #1
 800308e:	73fb      	strb	r3, [r7, #15]
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d9f0      	bls.n	8003078 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8003096:	23ff      	movs	r3, #255	; 0xff
}
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	20001190 	.word	0x20001190

080030a8 <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 80030b2:	88fb      	ldrh	r3, [r7, #6]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 ffd1 	bl	800405c <mfxstm32l152_GetInstance>
 80030ba:	4603      	mov	r3, r0
 80030bc:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	2bff      	cmp	r3, #255	; 0xff
 80030c2:	d10e      	bne.n	80030e2 <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 80030c4:	2000      	movs	r0, #0
 80030c6:	f000 ffc9 	bl	800405c <mfxstm32l152_GetInstance>
 80030ca:	4603      	mov	r3, r0
 80030cc:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 80030ce:	7bbb      	ldrb	r3, [r7, #14]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d806      	bhi.n	80030e2 <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 80030d4:	7bbb      	ldrb	r3, [r7, #14]
 80030d6:	88fa      	ldrh	r2, [r7, #6]
 80030d8:	b2d1      	uxtb	r1, r2
 80030da:	4a09      	ldr	r2, [pc, #36]	; (8003100 <mfxstm32l152_Init+0x58>)
 80030dc:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 80030de:	f006 fb81 	bl	80097e4 <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	2102      	movs	r1, #2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 f8db 	bl	80032a2 <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 80030ec:	88fb      	ldrh	r3, [r7, #6]
 80030ee:	2101      	movs	r1, #1
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 f8fc 	bl	80032ee <mfxstm32l152_SetIrqOutPinType>
}
 80030f6:	bf00      	nop
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20001198 	.word	0x20001198

08003104 <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 800310e:	88fb      	ldrh	r3, [r7, #6]
 8003110:	4618      	mov	r0, r3
 8003112:	f000 ffc3 	bl	800409c <mfxstm32l152_ReleaseInstance>
 8003116:	4603      	mov	r3, r0
 8003118:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	2bff      	cmp	r3, #255	; 0xff
 800311e:	d001      	beq.n	8003124 <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 8003120:	f006 fb70 	bl	8009804 <MFX_IO_DeInit>
  }
}
 8003124:	bf00      	nop
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 8003136:	88fb      	ldrh	r3, [r7, #6]
 8003138:	2280      	movs	r2, #128	; 0x80
 800313a:	2140      	movs	r1, #64	; 0x40
 800313c:	4618      	mov	r0, r3
 800313e:	f006 fc03 	bl	8009948 <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 8003142:	200a      	movs	r0, #10
 8003144:	f006 fc42 	bl	80099cc <MFX_IO_Delay>
}
 8003148:	bf00      	nop
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	2240      	movs	r2, #64	; 0x40
 800315e:	2140      	movs	r1, #64	; 0x40
 8003160:	4618      	mov	r0, r3
 8003162:	f006 fbf1 	bl	8009948 <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 8003166:	f006 fbb7 	bl	80098d8 <MFX_IO_EnableWakeupPin>
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	4603      	mov	r3, r0
 800317a:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	4618      	mov	r0, r3
 8003180:	f000 ff6c 	bl	800405c <mfxstm32l152_GetInstance>
 8003184:	4603      	mov	r3, r0
 8003186:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	2bff      	cmp	r3, #255	; 0xff
 800318c:	d101      	bne.n	8003192 <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 800318e:	f006 fba3 	bl	80098d8 <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 8003192:	f006 fbc5 	bl	8009920 <MFX_IO_Wakeup>
}
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	4603      	mov	r3, r0
 80031a6:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 80031a8:	2001      	movs	r0, #1
 80031aa:	f006 fc0f 	bl	80099cc <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 80031ae:	f006 fb19 	bl	80097e4 <MFX_IO_Init>

  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 80031b2:	88fb      	ldrh	r3, [r7, #6]
 80031b4:	2100      	movs	r1, #0
 80031b6:	4618      	mov	r0, r3
 80031b8:	f006 fbda 	bl	8009970 <MFX_IO_Read>
 80031bc:	4603      	mov	r3, r0
 80031be:	73fb      	strb	r3, [r7, #15]

  /* Return the device ID value */
  return (id);
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	b29b      	uxth	r3, r3
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	460a      	mov	r2, r1
 80031d6:	80fb      	strh	r3, [r7, #6]
 80031d8:	4613      	mov	r3, r2
 80031da:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	2142      	movs	r1, #66	; 0x42
 80031e4:	4618      	mov	r0, r3
 80031e6:	f006 fbc3 	bl	8009970 <MFX_IO_Read>
 80031ea:	4603      	mov	r3, r0
 80031ec:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 80031ee:	7bfa      	ldrb	r2, [r7, #15]
 80031f0:	797b      	ldrb	r3, [r7, #5]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 80031f6:	7bfa      	ldrb	r2, [r7, #15]
 80031f8:	88fb      	ldrh	r3, [r7, #6]
 80031fa:	2142      	movs	r1, #66	; 0x42
 80031fc:	4618      	mov	r0, r3
 80031fe:	f006 fba3 	bl	8009948 <MFX_IO_Write>
}
 8003202:	bf00      	nop
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	4603      	mov	r3, r0
 8003212:	460a      	mov	r2, r1
 8003214:	80fb      	strh	r3, [r7, #6]
 8003216:	4613      	mov	r3, r2
 8003218:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	2142      	movs	r1, #66	; 0x42
 8003222:	4618      	mov	r0, r3
 8003224:	f006 fba4 	bl	8009970 <MFX_IO_Read>
 8003228:	4603      	mov	r3, r0
 800322a:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 800322c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003230:	43db      	mvns	r3, r3
 8003232:	b25a      	sxtb	r2, r3
 8003234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003238:	4013      	ands	r3, r2
 800323a:	b25b      	sxtb	r3, r3
 800323c:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 800323e:	7bfa      	ldrb	r2, [r7, #15]
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	2142      	movs	r1, #66	; 0x42
 8003244:	4618      	mov	r0, r3
 8003246:	f006 fb7f 	bl	8009948 <MFX_IO_Write>
}
 800324a:	bf00      	nop
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	4603      	mov	r3, r0
 800325a:	460a      	mov	r2, r1
 800325c:	80fb      	strh	r3, [r7, #6]
 800325e:	4613      	mov	r3, r2
 8003260:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 8003262:	88fb      	ldrh	r3, [r7, #6]
 8003264:	2108      	movs	r1, #8
 8003266:	4618      	mov	r0, r3
 8003268:	f006 fb82 	bl	8009970 <MFX_IO_Read>
 800326c:	4603      	mov	r3, r0
 800326e:	461a      	mov	r2, r3
 8003270:	797b      	ldrb	r3, [r7, #5]
 8003272:	4013      	ands	r3, r2
 8003274:	b2db      	uxtb	r3, r3
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	4603      	mov	r3, r0
 8003286:	460a      	mov	r2, r1
 8003288:	80fb      	strh	r3, [r7, #6]
 800328a:	4613      	mov	r3, r2
 800328c:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 800328e:	797a      	ldrb	r2, [r7, #5]
 8003290:	88fb      	ldrh	r3, [r7, #6]
 8003292:	2144      	movs	r1, #68	; 0x44
 8003294:	4618      	mov	r0, r3
 8003296:	f006 fb57 	bl	8009948 <MFX_IO_Write>
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	4603      	mov	r3, r0
 80032aa:	460a      	mov	r2, r1
 80032ac:	80fb      	strh	r3, [r7, #6]
 80032ae:	4613      	mov	r3, r2
 80032b0:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	2141      	movs	r1, #65	; 0x41
 80032ba:	4618      	mov	r0, r3
 80032bc:	f006 fb58 	bl	8009970 <MFX_IO_Read>
 80032c0:	4603      	mov	r3, r0
 80032c2:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	f023 0302 	bic.w	r3, r3, #2
 80032ca:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 80032cc:	7bfa      	ldrb	r2, [r7, #15]
 80032ce:	797b      	ldrb	r3, [r7, #5]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 80032d4:	7bfa      	ldrb	r2, [r7, #15]
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	2141      	movs	r1, #65	; 0x41
 80032da:	4618      	mov	r0, r3
 80032dc:	f006 fb34 	bl	8009948 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 80032e0:	2001      	movs	r0, #1
 80032e2:	f006 fb73 	bl	80099cc <MFX_IO_Delay>

}
 80032e6:	bf00      	nop
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b084      	sub	sp, #16
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	4603      	mov	r3, r0
 80032f6:	460a      	mov	r2, r1
 80032f8:	80fb      	strh	r3, [r7, #6]
 80032fa:	4613      	mov	r3, r2
 80032fc:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80032fe:	2300      	movs	r3, #0
 8003300:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	2141      	movs	r1, #65	; 0x41
 8003306:	4618      	mov	r0, r3
 8003308:	f006 fb32 	bl	8009970 <MFX_IO_Read>
 800330c:	4603      	mov	r3, r0
 800330e:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	f023 0301 	bic.w	r3, r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	797b      	ldrb	r3, [r7, #5]
 800331c:	4313      	orrs	r3, r2
 800331e:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8003320:	7bfa      	ldrb	r2, [r7, #15]
 8003322:	88fb      	ldrh	r3, [r7, #6]
 8003324:	2141      	movs	r1, #65	; 0x41
 8003326:	4618      	mov	r0, r3
 8003328:	f006 fb0e 	bl	8009948 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 800332c:	2001      	movs	r0, #1
 800332e:	f006 fb4d 	bl	80099cc <MFX_IO_Delay>

}
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	4603      	mov	r3, r0
 8003342:	6039      	str	r1, [r7, #0]
 8003344:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8003346:	88fb      	ldrh	r3, [r7, #6]
 8003348:	2140      	movs	r1, #64	; 0x40
 800334a:	4618      	mov	r0, r3
 800334c:	f006 fb10 	bl	8009970 <MFX_IO_Read>
 8003350:	4603      	mov	r3, r0
 8003352:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003362:	d304      	bcc.n	800336e <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	f043 0308 	orr.w	r3, r3, #8
 800336a:	73fb      	strb	r3, [r7, #15]
 800336c:	e003      	b.n	8003376 <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 800336e:	7bfb      	ldrb	r3, [r7, #15]
 8003370:	f023 0308 	bic.w	r3, r3, #8
 8003374:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8003376:	7bfa      	ldrb	r2, [r7, #15]
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	2140      	movs	r1, #64	; 0x40
 800337c:	4618      	mov	r0, r3
 800337e:	f006 fae3 	bl	8009948 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8003382:	2001      	movs	r0, #1
 8003384:	f006 fb22 	bl	80099cc <MFX_IO_Delay>
}
 8003388:	bf00      	nop
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	6039      	str	r1, [r7, #0]
 800339a:	80fb      	strh	r3, [r7, #6]
 800339c:	4613      	mov	r3, r2
 800339e:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 80033a4:	797b      	ldrb	r3, [r7, #5]
 80033a6:	2b17      	cmp	r3, #23
 80033a8:	f200 82d4 	bhi.w	8003954 <mfxstm32l152_IO_Config+0x5c4>
 80033ac:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <mfxstm32l152_IO_Config+0x24>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	08003445 	.word	0x08003445
 80033b8:	080034d5 	.word	0x080034d5
 80033bc:	08003595 	.word	0x08003595
 80033c0:	08003685 	.word	0x08003685
 80033c4:	08003775 	.word	0x08003775
 80033c8:	08003865 	.word	0x08003865
 80033cc:	08003415 	.word	0x08003415
 80033d0:	08003415 	.word	0x08003415
 80033d4:	08003475 	.word	0x08003475
 80033d8:	080034a5 	.word	0x080034a5
 80033dc:	08003955 	.word	0x08003955
 80033e0:	08003565 	.word	0x08003565
 80033e4:	08003535 	.word	0x08003535
 80033e8:	08003955 	.word	0x08003955
 80033ec:	08003505 	.word	0x08003505
 80033f0:	080034d5 	.word	0x080034d5
 80033f4:	080035e5 	.word	0x080035e5
 80033f8:	08003635 	.word	0x08003635
 80033fc:	080036d5 	.word	0x080036d5
 8003400:	08003725 	.word	0x08003725
 8003404:	080037c5 	.word	0x080037c5
 8003408:	08003815 	.word	0x08003815
 800340c:	080038b5 	.word	0x080038b5
 8003410:	08003905 	.word	0x08003905
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003414:	88fb      	ldrh	r3, [r7, #6]
 8003416:	6839      	ldr	r1, [r7, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f000 fb67 	bl	8003aec <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800341e:	88fb      	ldrh	r3, [r7, #6]
 8003420:	2200      	movs	r2, #0
 8003422:	6839      	ldr	r1, [r7, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f000 fa9d 	bl	8003964 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 800342a:	88f8      	ldrh	r0, [r7, #6]
 800342c:	2300      	movs	r3, #0
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	2164      	movs	r1, #100	; 0x64
 8003432:	f000 fe57 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003436:	88f8      	ldrh	r0, [r7, #6]
 8003438:	2300      	movs	r3, #0
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	2168      	movs	r1, #104	; 0x68
 800343e:	f000 fe51 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    break;
 8003442:	e28a      	b.n	800395a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	6839      	ldr	r1, [r7, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fb4f 	bl	8003aec <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800344e:	88fb      	ldrh	r3, [r7, #6]
 8003450:	2200      	movs	r2, #0
 8003452:	6839      	ldr	r1, [r7, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fa85 	bl	8003964 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 800345a:	88f8      	ldrh	r0, [r7, #6]
 800345c:	2300      	movs	r3, #0
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	2164      	movs	r1, #100	; 0x64
 8003462:	f000 fe3f 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003466:	88f8      	ldrh	r0, [r7, #6]
 8003468:	2301      	movs	r3, #1
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	2168      	movs	r1, #104	; 0x68
 800346e:	f000 fe39 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    break;
 8003472:	e272      	b.n	800395a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003474:	88fb      	ldrh	r3, [r7, #6]
 8003476:	6839      	ldr	r1, [r7, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fb37 	bl	8003aec <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	2200      	movs	r2, #0
 8003482:	6839      	ldr	r1, [r7, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f000 fa6d 	bl	8003964 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800348a:	88f8      	ldrh	r0, [r7, #6]
 800348c:	2301      	movs	r3, #1
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	2164      	movs	r1, #100	; 0x64
 8003492:	f000 fe27 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003496:	88f8      	ldrh	r0, [r7, #6]
 8003498:	2301      	movs	r3, #1
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	2168      	movs	r1, #104	; 0x68
 800349e:	f000 fe21 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    break;
 80034a2:	e25a      	b.n	800395a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80034a4:	88fb      	ldrh	r3, [r7, #6]
 80034a6:	6839      	ldr	r1, [r7, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f000 fb1f 	bl	8003aec <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	2200      	movs	r2, #0
 80034b2:	6839      	ldr	r1, [r7, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 fa55 	bl	8003964 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80034ba:	88f8      	ldrh	r0, [r7, #6]
 80034bc:	2301      	movs	r3, #1
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	2164      	movs	r1, #100	; 0x64
 80034c2:	f000 fe0f 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80034c6:	88f8      	ldrh	r0, [r7, #6]
 80034c8:	2300      	movs	r3, #0
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	2168      	movs	r1, #104	; 0x68
 80034ce:	f000 fe09 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    break;
 80034d2:	e242      	b.n	800395a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80034d4:	88fb      	ldrh	r3, [r7, #6]
 80034d6:	6839      	ldr	r1, [r7, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 fb07 	bl	8003aec <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	2201      	movs	r2, #1
 80034e2:	6839      	ldr	r1, [r7, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fa3d 	bl	8003964 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 80034ea:	88f8      	ldrh	r0, [r7, #6]
 80034ec:	2300      	movs	r3, #0
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	2164      	movs	r1, #100	; 0x64
 80034f2:	f000 fdf7 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80034f6:	88f8      	ldrh	r0, [r7, #6]
 80034f8:	2300      	movs	r3, #0
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	2168      	movs	r1, #104	; 0x68
 80034fe:	f000 fdf1 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    break;
 8003502:	e22a      	b.n	800395a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	6839      	ldr	r1, [r7, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f000 faef 	bl	8003aec <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	2201      	movs	r2, #1
 8003512:	6839      	ldr	r1, [r7, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fa25 	bl	8003964 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 800351a:	88f8      	ldrh	r0, [r7, #6]
 800351c:	2300      	movs	r3, #0
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	2164      	movs	r1, #100	; 0x64
 8003522:	f000 fddf 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003526:	88f8      	ldrh	r0, [r7, #6]
 8003528:	2301      	movs	r3, #1
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	2168      	movs	r1, #104	; 0x68
 800352e:	f000 fdd9 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    break;
 8003532:	e212      	b.n	800395a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	6839      	ldr	r1, [r7, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f000 fad7 	bl	8003aec <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	2201      	movs	r2, #1
 8003542:	6839      	ldr	r1, [r7, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fa0d 	bl	8003964 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 800354a:	88f8      	ldrh	r0, [r7, #6]
 800354c:	2301      	movs	r3, #1
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	2164      	movs	r1, #100	; 0x64
 8003552:	f000 fdc7 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003556:	88f8      	ldrh	r0, [r7, #6]
 8003558:	2300      	movs	r3, #0
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	2168      	movs	r1, #104	; 0x68
 800355e:	f000 fdc1 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    break;
 8003562:	e1fa      	b.n	800395a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8003564:	88fb      	ldrh	r3, [r7, #6]
 8003566:	6839      	ldr	r1, [r7, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f000 fabf 	bl	8003aec <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 800356e:	88fb      	ldrh	r3, [r7, #6]
 8003570:	2201      	movs	r2, #1
 8003572:	6839      	ldr	r1, [r7, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f000 f9f5 	bl	8003964 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 800357a:	88f8      	ldrh	r0, [r7, #6]
 800357c:	2301      	movs	r3, #1
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	2164      	movs	r1, #100	; 0x64
 8003582:	f000 fdaf 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003586:	88f8      	ldrh	r0, [r7, #6]
 8003588:	2301      	movs	r3, #1
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	2168      	movs	r1, #104	; 0x68
 800358e:	f000 fda9 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    break;
 8003592:	e1e2      	b.n	800395a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fa7a 	bl	8003a90 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	2200      	movs	r2, #0
 80035a0:	6839      	ldr	r1, [r7, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 f9de 	bl	8003964 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80035a8:	88f8      	ldrh	r0, [r7, #6]
 80035aa:	2300      	movs	r3, #0
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	2164      	movs	r1, #100	; 0x64
 80035b0:	f000 fd98 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80035b4:	88f8      	ldrh	r0, [r7, #6]
 80035b6:	2301      	movs	r3, #1
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	2168      	movs	r1, #104	; 0x68
 80035bc:	f000 fd92 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80035c0:	88fb      	ldrh	r3, [r7, #6]
 80035c2:	2201      	movs	r2, #1
 80035c4:	6839      	ldr	r1, [r7, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 f9de 	bl	8003988 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	2201      	movs	r2, #1
 80035d0:	6839      	ldr	r1, [r7, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 f9ed 	bl	80039b2 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 80035d8:	88fb      	ldrh	r3, [r7, #6]
 80035da:	6839      	ldr	r1, [r7, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fa75 	bl	8003acc <mfxstm32l152_IO_EnablePinIT>
    break;
 80035e2:	e1ba      	b.n	800395a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fa52 	bl	8003a90 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80035ec:	88fb      	ldrh	r3, [r7, #6]
 80035ee:	2200      	movs	r2, #0
 80035f0:	6839      	ldr	r1, [r7, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 f9b6 	bl	8003964 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80035f8:	88f8      	ldrh	r0, [r7, #6]
 80035fa:	2301      	movs	r3, #1
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	2164      	movs	r1, #100	; 0x64
 8003600:	f000 fd70 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003604:	88f8      	ldrh	r0, [r7, #6]
 8003606:	2301      	movs	r3, #1
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	2168      	movs	r1, #104	; 0x68
 800360c:	f000 fd6a 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	2201      	movs	r2, #1
 8003614:	6839      	ldr	r1, [r7, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f000 f9b6 	bl	8003988 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	2201      	movs	r2, #1
 8003620:	6839      	ldr	r1, [r7, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f9c5 	bl	80039b2 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003628:	88fb      	ldrh	r3, [r7, #6]
 800362a:	6839      	ldr	r1, [r7, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f000 fa4d 	bl	8003acc <mfxstm32l152_IO_EnablePinIT>
    break;
 8003632:	e192      	b.n	800395a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fa2a 	bl	8003a90 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800363c:	88fb      	ldrh	r3, [r7, #6]
 800363e:	2200      	movs	r2, #0
 8003640:	6839      	ldr	r1, [r7, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f000 f98e 	bl	8003964 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003648:	88f8      	ldrh	r0, [r7, #6]
 800364a:	2301      	movs	r3, #1
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	2164      	movs	r1, #100	; 0x64
 8003650:	f000 fd48 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003654:	88f8      	ldrh	r0, [r7, #6]
 8003656:	2300      	movs	r3, #0
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	2168      	movs	r1, #104	; 0x68
 800365c:	f000 fd42 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	2201      	movs	r2, #1
 8003664:	6839      	ldr	r1, [r7, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f000 f98e 	bl	8003988 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 800366c:	88fb      	ldrh	r3, [r7, #6]
 800366e:	2201      	movs	r2, #1
 8003670:	6839      	ldr	r1, [r7, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f000 f99d 	bl	80039b2 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003678:	88fb      	ldrh	r3, [r7, #6]
 800367a:	6839      	ldr	r1, [r7, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f000 fa25 	bl	8003acc <mfxstm32l152_IO_EnablePinIT>
    break;
 8003682:	e16a      	b.n	800395a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003684:	88fb      	ldrh	r3, [r7, #6]
 8003686:	4618      	mov	r0, r3
 8003688:	f000 fa02 	bl	8003a90 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800368c:	88fb      	ldrh	r3, [r7, #6]
 800368e:	2200      	movs	r2, #0
 8003690:	6839      	ldr	r1, [r7, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f000 f966 	bl	8003964 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003698:	88f8      	ldrh	r0, [r7, #6]
 800369a:	2300      	movs	r3, #0
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	2164      	movs	r1, #100	; 0x64
 80036a0:	f000 fd20 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80036a4:	88f8      	ldrh	r0, [r7, #6]
 80036a6:	2301      	movs	r3, #1
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	2168      	movs	r1, #104	; 0x68
 80036ac:	f000 fd1a 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	2201      	movs	r2, #1
 80036b4:	6839      	ldr	r1, [r7, #0]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f966 	bl	8003988 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80036bc:	88fb      	ldrh	r3, [r7, #6]
 80036be:	2200      	movs	r2, #0
 80036c0:	6839      	ldr	r1, [r7, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 f975 	bl	80039b2 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80036c8:	88fb      	ldrh	r3, [r7, #6]
 80036ca:	6839      	ldr	r1, [r7, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 f9fd 	bl	8003acc <mfxstm32l152_IO_EnablePinIT>
    break;
 80036d2:	e142      	b.n	800395a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80036d4:	88fb      	ldrh	r3, [r7, #6]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 f9da 	bl	8003a90 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80036dc:	88fb      	ldrh	r3, [r7, #6]
 80036de:	2200      	movs	r2, #0
 80036e0:	6839      	ldr	r1, [r7, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 f93e 	bl	8003964 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80036e8:	88f8      	ldrh	r0, [r7, #6]
 80036ea:	2301      	movs	r3, #1
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	2164      	movs	r1, #100	; 0x64
 80036f0:	f000 fcf8 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80036f4:	88f8      	ldrh	r0, [r7, #6]
 80036f6:	2301      	movs	r3, #1
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	2168      	movs	r1, #104	; 0x68
 80036fc:	f000 fcf2 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003700:	88fb      	ldrh	r3, [r7, #6]
 8003702:	2201      	movs	r2, #1
 8003704:	6839      	ldr	r1, [r7, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f000 f93e 	bl	8003988 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	2200      	movs	r2, #0
 8003710:	6839      	ldr	r1, [r7, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f000 f94d 	bl	80039b2 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	6839      	ldr	r1, [r7, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f000 f9d5 	bl	8003acc <mfxstm32l152_IO_EnablePinIT>
    break;
 8003722:	e11a      	b.n	800395a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003724:	88fb      	ldrh	r3, [r7, #6]
 8003726:	4618      	mov	r0, r3
 8003728:	f000 f9b2 	bl	8003a90 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800372c:	88fb      	ldrh	r3, [r7, #6]
 800372e:	2200      	movs	r2, #0
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f000 f916 	bl	8003964 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003738:	88f8      	ldrh	r0, [r7, #6]
 800373a:	2301      	movs	r3, #1
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	2164      	movs	r1, #100	; 0x64
 8003740:	f000 fcd0 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003744:	88f8      	ldrh	r0, [r7, #6]
 8003746:	2300      	movs	r3, #0
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	2168      	movs	r1, #104	; 0x68
 800374c:	f000 fcca 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8003750:	88fb      	ldrh	r3, [r7, #6]
 8003752:	2201      	movs	r2, #1
 8003754:	6839      	ldr	r1, [r7, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f000 f916 	bl	8003988 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 800375c:	88fb      	ldrh	r3, [r7, #6]
 800375e:	2200      	movs	r2, #0
 8003760:	6839      	ldr	r1, [r7, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f000 f925 	bl	80039b2 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003768:	88fb      	ldrh	r3, [r7, #6]
 800376a:	6839      	ldr	r1, [r7, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f000 f9ad 	bl	8003acc <mfxstm32l152_IO_EnablePinIT>
    break;
 8003772:	e0f2      	b.n	800395a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	4618      	mov	r0, r3
 8003778:	f000 f98a 	bl	8003a90 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800377c:	88fb      	ldrh	r3, [r7, #6]
 800377e:	2200      	movs	r2, #0
 8003780:	6839      	ldr	r1, [r7, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f000 f8ee 	bl	8003964 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003788:	88f8      	ldrh	r0, [r7, #6]
 800378a:	2300      	movs	r3, #0
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	2164      	movs	r1, #100	; 0x64
 8003790:	f000 fca8 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003794:	88f8      	ldrh	r0, [r7, #6]
 8003796:	2301      	movs	r3, #1
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	2168      	movs	r1, #104	; 0x68
 800379c:	f000 fca2 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80037a0:	88fb      	ldrh	r3, [r7, #6]
 80037a2:	2200      	movs	r2, #0
 80037a4:	6839      	ldr	r1, [r7, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 f8ee 	bl	8003988 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	2200      	movs	r2, #0
 80037b0:	6839      	ldr	r1, [r7, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 f8fd 	bl	80039b2 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	6839      	ldr	r1, [r7, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 f985 	bl	8003acc <mfxstm32l152_IO_EnablePinIT>
    break;
 80037c2:	e0ca      	b.n	800395a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 f962 	bl	8003a90 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80037cc:	88fb      	ldrh	r3, [r7, #6]
 80037ce:	2200      	movs	r2, #0
 80037d0:	6839      	ldr	r1, [r7, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 f8c6 	bl	8003964 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80037d8:	88f8      	ldrh	r0, [r7, #6]
 80037da:	2301      	movs	r3, #1
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	2164      	movs	r1, #100	; 0x64
 80037e0:	f000 fc80 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80037e4:	88f8      	ldrh	r0, [r7, #6]
 80037e6:	2301      	movs	r3, #1
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	2168      	movs	r1, #104	; 0x68
 80037ec:	f000 fc7a 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80037f0:	88fb      	ldrh	r3, [r7, #6]
 80037f2:	2200      	movs	r2, #0
 80037f4:	6839      	ldr	r1, [r7, #0]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 f8c6 	bl	8003988 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80037fc:	88fb      	ldrh	r3, [r7, #6]
 80037fe:	2200      	movs	r2, #0
 8003800:	6839      	ldr	r1, [r7, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f000 f8d5 	bl	80039b2 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003808:	88fb      	ldrh	r3, [r7, #6]
 800380a:	6839      	ldr	r1, [r7, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f000 f95d 	bl	8003acc <mfxstm32l152_IO_EnablePinIT>
    break;
 8003812:	e0a2      	b.n	800395a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003814:	88fb      	ldrh	r3, [r7, #6]
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f93a 	bl	8003a90 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800381c:	88fb      	ldrh	r3, [r7, #6]
 800381e:	2200      	movs	r2, #0
 8003820:	6839      	ldr	r1, [r7, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f000 f89e 	bl	8003964 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003828:	88f8      	ldrh	r0, [r7, #6]
 800382a:	2301      	movs	r3, #1
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	2164      	movs	r1, #100	; 0x64
 8003830:	f000 fc58 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003834:	88f8      	ldrh	r0, [r7, #6]
 8003836:	2300      	movs	r3, #0
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	2168      	movs	r1, #104	; 0x68
 800383c:	f000 fc52 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003840:	88fb      	ldrh	r3, [r7, #6]
 8003842:	2200      	movs	r2, #0
 8003844:	6839      	ldr	r1, [r7, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f89e 	bl	8003988 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	2200      	movs	r2, #0
 8003850:	6839      	ldr	r1, [r7, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f000 f8ad 	bl	80039b2 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003858:	88fb      	ldrh	r3, [r7, #6]
 800385a:	6839      	ldr	r1, [r7, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f000 f935 	bl	8003acc <mfxstm32l152_IO_EnablePinIT>
    break;
 8003862:	e07a      	b.n	800395a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003864:	88fb      	ldrh	r3, [r7, #6]
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f912 	bl	8003a90 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	2200      	movs	r2, #0
 8003870:	6839      	ldr	r1, [r7, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f000 f876 	bl	8003964 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8003878:	88f8      	ldrh	r0, [r7, #6]
 800387a:	2300      	movs	r3, #0
 800387c:	683a      	ldr	r2, [r7, #0]
 800387e:	2164      	movs	r1, #100	; 0x64
 8003880:	f000 fc30 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8003884:	88f8      	ldrh	r0, [r7, #6]
 8003886:	2301      	movs	r3, #1
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	2168      	movs	r1, #104	; 0x68
 800388c:	f000 fc2a 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003890:	88fb      	ldrh	r3, [r7, #6]
 8003892:	2200      	movs	r2, #0
 8003894:	6839      	ldr	r1, [r7, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f876 	bl	8003988 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 800389c:	88fb      	ldrh	r3, [r7, #6]
 800389e:	2201      	movs	r2, #1
 80038a0:	6839      	ldr	r1, [r7, #0]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 f885 	bl	80039b2 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80038a8:	88fb      	ldrh	r3, [r7, #6]
 80038aa:	6839      	ldr	r1, [r7, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 f90d 	bl	8003acc <mfxstm32l152_IO_EnablePinIT>
    break;
 80038b2:	e052      	b.n	800395a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80038b4:	88fb      	ldrh	r3, [r7, #6]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 f8ea 	bl	8003a90 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80038bc:	88fb      	ldrh	r3, [r7, #6]
 80038be:	2200      	movs	r2, #0
 80038c0:	6839      	ldr	r1, [r7, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 f84e 	bl	8003964 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80038c8:	88f8      	ldrh	r0, [r7, #6]
 80038ca:	2301      	movs	r3, #1
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	2164      	movs	r1, #100	; 0x64
 80038d0:	f000 fc08 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80038d4:	88f8      	ldrh	r0, [r7, #6]
 80038d6:	2301      	movs	r3, #1
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	2168      	movs	r1, #104	; 0x68
 80038dc:	f000 fc02 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80038e0:	88fb      	ldrh	r3, [r7, #6]
 80038e2:	2200      	movs	r2, #0
 80038e4:	6839      	ldr	r1, [r7, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 f84e 	bl	8003988 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	2201      	movs	r2, #1
 80038f0:	6839      	ldr	r1, [r7, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 f85d 	bl	80039b2 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80038f8:	88fb      	ldrh	r3, [r7, #6]
 80038fa:	6839      	ldr	r1, [r7, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 f8e5 	bl	8003acc <mfxstm32l152_IO_EnablePinIT>
    break;
 8003902:	e02a      	b.n	800395a <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	4618      	mov	r0, r3
 8003908:	f000 f8c2 	bl	8003a90 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 800390c:	88fb      	ldrh	r3, [r7, #6]
 800390e:	2200      	movs	r2, #0
 8003910:	6839      	ldr	r1, [r7, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f000 f826 	bl	8003964 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8003918:	88f8      	ldrh	r0, [r7, #6]
 800391a:	2301      	movs	r3, #1
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	2164      	movs	r1, #100	; 0x64
 8003920:	f000 fbe0 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8003924:	88f8      	ldrh	r0, [r7, #6]
 8003926:	2300      	movs	r3, #0
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	2168      	movs	r1, #104	; 0x68
 800392c:	f000 fbda 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8003930:	88fb      	ldrh	r3, [r7, #6]
 8003932:	2200      	movs	r2, #0
 8003934:	6839      	ldr	r1, [r7, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f000 f826 	bl	8003988 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 800393c:	88fb      	ldrh	r3, [r7, #6]
 800393e:	2201      	movs	r2, #1
 8003940:	6839      	ldr	r1, [r7, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f000 f835 	bl	80039b2 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8003948:	88fb      	ldrh	r3, [r7, #6]
 800394a:	6839      	ldr	r1, [r7, #0]
 800394c:	4618      	mov	r0, r3
 800394e:	f000 f8bd 	bl	8003acc <mfxstm32l152_IO_EnablePinIT>
    break;
 8003952:	e002      	b.n	800395a <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 8003954:	797b      	ldrb	r3, [r7, #5]
 8003956:	73fb      	strb	r3, [r7, #15]
    break;
 8003958:	bf00      	nop
  }

  return error_code;
 800395a:	7bfb      	ldrb	r3, [r7, #15]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	6039      	str	r1, [r7, #0]
 800396e:	80fb      	strh	r3, [r7, #6]
 8003970:	4613      	mov	r3, r2
 8003972:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 8003974:	797b      	ldrb	r3, [r7, #5]
 8003976:	88f8      	ldrh	r0, [r7, #6]
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	2160      	movs	r1, #96	; 0x60
 800397c:	f000 fbb2 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
}
 8003980:	bf00      	nop
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	6039      	str	r1, [r7, #0]
 8003992:	80fb      	strh	r3, [r7, #6]
 8003994:	4613      	mov	r3, r2
 8003996:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 8003998:	797b      	ldrb	r3, [r7, #5]
 800399a:	88f8      	ldrh	r0, [r7, #6]
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	214c      	movs	r1, #76	; 0x4c
 80039a0:	f000 fba0 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 80039a4:	2001      	movs	r0, #1
 80039a6:	f006 f811 	bl	80099cc <MFX_IO_Delay>
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b082      	sub	sp, #8
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	4603      	mov	r3, r0
 80039ba:	6039      	str	r1, [r7, #0]
 80039bc:	80fb      	strh	r3, [r7, #6]
 80039be:	4613      	mov	r3, r2
 80039c0:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 80039c2:	797b      	ldrb	r3, [r7, #5]
 80039c4:	88f8      	ldrh	r0, [r7, #6]
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	2150      	movs	r1, #80	; 0x50
 80039ca:	f000 fb8b 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 80039ce:	2001      	movs	r0, #1
 80039d0:	f005 fffc 	bl	80099cc <MFX_IO_Delay>
}
 80039d4:	bf00      	nop
 80039d6:	3708      	adds	r7, #8
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	6039      	str	r1, [r7, #0]
 80039e6:	80fb      	strh	r3, [r7, #6]
 80039e8:	4613      	mov	r3, r2
 80039ea:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 80039ec:	797b      	ldrb	r3, [r7, #5]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d006      	beq.n	8003a00 <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 80039f2:	88f8      	ldrh	r0, [r7, #6]
 80039f4:	2301      	movs	r3, #1
 80039f6:	683a      	ldr	r2, [r7, #0]
 80039f8:	216c      	movs	r1, #108	; 0x6c
 80039fa:	f000 fb73 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 80039fe:	e005      	b.n	8003a0c <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 8003a00:	88f8      	ldrh	r0, [r7, #6]
 8003a02:	2301      	movs	r3, #1
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	2170      	movs	r1, #112	; 0x70
 8003a08:	f000 fb6c 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
}
 8003a0c:	bf00      	nop
 8003a0e:	3708      	adds	r7, #8
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	6039      	str	r1, [r7, #0]
 8003a1e:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 8003a24:	2300      	movs	r3, #0
 8003a26:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d006      	beq.n	8003a42 <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 8003a34:	88fb      	ldrh	r3, [r7, #6]
 8003a36:	2110      	movs	r1, #16
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f005 ff99 	bl	8009970 <MFX_IO_Read>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d006      	beq.n	8003a5a <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 8003a4c:	88fb      	ldrh	r3, [r7, #6]
 8003a4e:	2111      	movs	r1, #17
 8003a50:	4618      	mov	r0, r3
 8003a52:	f005 ff8d 	bl	8009970 <MFX_IO_Read>
 8003a56:	4603      	mov	r3, r0
 8003a58:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d006      	beq.n	8003a72 <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 8003a64:	88fb      	ldrh	r3, [r7, #6]
 8003a66:	2112      	movs	r1, #18
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f005 ff81 	bl	8009970 <MFX_IO_Read>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	021a      	lsls	r2, r3, #8
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	441a      	add	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	041b      	lsls	r3, r3, #16
 8003a7e:	4413      	add	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	4013      	ands	r3, r2
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4603      	mov	r3, r0
 8003a98:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8003a9a:	f005 feef 	bl	800987c <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8003a9e:	88fb      	ldrh	r3, [r7, #6]
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff fb92 	bl	80031cc <mfxstm32l152_EnableITSource>
}
 8003aa8:	bf00      	nop
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8003aba:	88fb      	ldrh	r3, [r7, #6]
 8003abc:	2101      	movs	r1, #1
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff fba3 	bl	800320a <mfxstm32l152_DisableITSource>
}
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	6039      	str	r1, [r7, #0]
 8003ad6:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 8003ad8:	88f8      	ldrh	r0, [r7, #6]
 8003ada:	2301      	movs	r3, #1
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	2148      	movs	r1, #72	; 0x48
 8003ae0:	f000 fb00 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	6039      	str	r1, [r7, #0]
 8003af6:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 8003af8:	88f8      	ldrh	r0, [r7, #6]
 8003afa:	2300      	movs	r3, #0
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	2148      	movs	r1, #72	; 0x48
 8003b00:	f000 faf0 	bl	80040e4 <mfxstm32l152_reg24_setPinValue>
}
 8003b04:	bf00      	nop
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	6039      	str	r1, [r7, #0]
 8003b16:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 8003b20:	2300      	movs	r3, #0
 8003b22:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d006      	beq.n	8003b3a <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 8003b2c:	88fb      	ldrh	r3, [r7, #6]
 8003b2e:	210c      	movs	r1, #12
 8003b30:	4618      	mov	r0, r3
 8003b32:	f005 ff1d 	bl	8009970 <MFX_IO_Read>
 8003b36:	4603      	mov	r3, r0
 8003b38:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003b40:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d006      	beq.n	8003b56 <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 8003b48:	88fb      	ldrh	r3, [r7, #6]
 8003b4a:	210d      	movs	r1, #13
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f005 ff0f 	bl	8009970 <MFX_IO_Read>
 8003b52:	4603      	mov	r3, r0
 8003b54:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	0c1b      	lsrs	r3, r3, #16
 8003b5a:	041b      	lsls	r3, r3, #16
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d006      	beq.n	8003b6e <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 8003b60:	88fb      	ldrh	r3, [r7, #6]
 8003b62:	210e      	movs	r1, #14
 8003b64:	4618      	mov	r0, r3
 8003b66:	f005 ff03 	bl	8009970 <MFX_IO_Read>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 8003b6e:	7bfa      	ldrb	r2, [r7, #15]
 8003b70:	89bb      	ldrh	r3, [r7, #12]
 8003b72:	021b      	lsls	r3, r3, #8
 8003b74:	4413      	add	r3, r2
 8003b76:	461a      	mov	r2, r3
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	041b      	lsls	r3, r3, #16
 8003b7c:	4413      	add	r3, r2
 8003b7e:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	4013      	ands	r3, r2
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	4603      	mov	r3, r0
 8003b96:	6039      	str	r1, [r7, #0]
 8003b98:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	0a1b      	lsrs	r3, r3, #8
 8003ba2:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	0c1b      	lsrs	r3, r3, #16
 8003ba8:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 8003bb0:	7bfa      	ldrb	r2, [r7, #15]
 8003bb2:	88fb      	ldrh	r3, [r7, #6]
 8003bb4:	2154      	movs	r1, #84	; 0x54
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f005 fec6 	bl	8009948 <MFX_IO_Write>
  }
  if (pin_8_15)
 8003bbc:	7bbb      	ldrb	r3, [r7, #14]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d005      	beq.n	8003bce <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 8003bc2:	7bba      	ldrb	r2, [r7, #14]
 8003bc4:	88fb      	ldrh	r3, [r7, #6]
 8003bc6:	2155      	movs	r1, #85	; 0x55
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f005 febd 	bl	8009948 <MFX_IO_Write>
  }
  if (pin_16_23)
 8003bce:	7b7b      	ldrb	r3, [r7, #13]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8003bd4:	7b7a      	ldrb	r2, [r7, #13]
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	2156      	movs	r1, #86	; 0x56
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f005 feb4 	bl	8009948 <MFX_IO_Write>
  }
}
 8003be0:	bf00      	nop
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 8003bf6:	88fb      	ldrh	r3, [r7, #6]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2180      	movs	r1, #128	; 0x80
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f005 feb6 	bl	8009970 <MFX_IO_Read>
 8003c04:	4603      	mov	r3, r0
 8003c06:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	7bfa      	ldrb	r2, [r7, #15]
 8003c18:	2180      	movs	r1, #128	; 0x80
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f005 fe94 	bl	8009948 <MFX_IO_Write>
}
 8003c20:	bf00      	nop
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 8003c28:	b084      	sub	sp, #16
 8003c2a:	b590      	push	{r4, r7, lr}
 8003c2c:	b085      	sub	sp, #20
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	4604      	mov	r4, r0
 8003c32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003c36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003c3a:	4623      	mov	r3, r4
 8003c3c:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 8003c42:	2300      	movs	r3, #0
 8003c44:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8003c46:	88fb      	ldrh	r3, [r7, #6]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	2140      	movs	r1, #64	; 0x40
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f005 fe8e 	bl	8009970 <MFX_IO_Read>
 8003c54:	4603      	mov	r3, r0
 8003c56:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 8003c58:	7bbb      	ldrb	r3, [r7, #14]
 8003c5a:	f003 0304 	and.w	r3, r3, #4
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10b      	bne.n	8003c7a <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 8003c62:	7bbb      	ldrb	r3, [r7, #14]
 8003c64:	f043 0304 	orr.w	r3, r3, #4
 8003c68:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8003c6a:	88fb      	ldrh	r3, [r7, #6]
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	7bba      	ldrb	r2, [r7, #14]
 8003c72:	2140      	movs	r1, #64	; 0x40
 8003c74:	4618      	mov	r0, r3
 8003c76:	f005 fe67 	bl	8009948 <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 8003c7a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	f003 030e 	and.w	r3, r3, #14
 8003c86:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8003c88:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003c8c:	b25b      	sxtb	r3, r3
 8003c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c92:	b25a      	sxtb	r2, r3
 8003c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	b25b      	sxtb	r3, r3
 8003c9c:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 8003c9e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ca2:	b25b      	sxtb	r3, r3
 8003ca4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003ca8:	b25a      	sxtb	r2, r3
 8003caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	b25b      	sxtb	r3, r3
 8003cb2:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8003cb4:	88fb      	ldrh	r3, [r7, #6]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	7bfa      	ldrb	r2, [r7, #15]
 8003cbc:	2180      	movs	r1, #128	; 0x80
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f005 fe42 	bl	8009948 <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8003cc4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003cc8:	b25b      	sxtb	r3, r3
 8003cca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003cce:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8003cd0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8003cd4:	b25b      	sxtb	r3, r3
 8003cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cda:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	b25b      	sxtb	r3, r3
 8003ce0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 8003ce2:	88fb      	ldrh	r3, [r7, #6]
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	7bfa      	ldrb	r2, [r7, #15]
 8003cea:	2181      	movs	r1, #129	; 0x81
 8003cec:	4618      	mov	r0, r3
 8003cee:	f005 fe2b 	bl	8009948 <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 8003cf2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003cf4:	0a1b      	lsrs	r3, r3, #8
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 8003cfa:	88fb      	ldrh	r3, [r7, #6]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	7bfa      	ldrb	r2, [r7, #15]
 8003d02:	2182      	movs	r1, #130	; 0x82
 8003d04:	4618      	mov	r0, r3
 8003d06:	f005 fe1f 	bl	8009948 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 8003d0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003d0c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	7bfa      	ldrb	r2, [r7, #15]
 8003d16:	2183      	movs	r1, #131	; 0x83
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f005 fe15 	bl	8009948 <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 8003d1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d20:	0a1b      	lsrs	r3, r3, #8
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	7bfa      	ldrb	r2, [r7, #15]
 8003d2e:	2184      	movs	r1, #132	; 0x84
 8003d30:	4618      	mov	r0, r3
 8003d32:	f005 fe09 	bl	8009948 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 8003d36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003d38:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 8003d3a:	88fb      	ldrh	r3, [r7, #6]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	7bfa      	ldrb	r2, [r7, #15]
 8003d42:	2185      	movs	r1, #133	; 0x85
 8003d44:	4618      	mov	r0, r3
 8003d46:	f005 fdff 	bl	8009948 <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 8003d4a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003d4c:	0a1b      	lsrs	r3, r3, #8
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	7bfa      	ldrb	r2, [r7, #15]
 8003d5a:	2186      	movs	r1, #134	; 0x86
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f005 fdf3 	bl	8009948 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 8003d62:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003d64:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 8003d66:	88fb      	ldrh	r3, [r7, #6]
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	7bfa      	ldrb	r2, [r7, #15]
 8003d6e:	2187      	movs	r1, #135	; 0x87
 8003d70:	4618      	mov	r0, r3
 8003d72:	f005 fde9 	bl	8009948 <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 8003d76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d78:	0a1b      	lsrs	r3, r3, #8
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 8003d7e:	88fb      	ldrh	r3, [r7, #6]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	7bfa      	ldrb	r2, [r7, #15]
 8003d86:	2188      	movs	r1, #136	; 0x88
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f005 fddd 	bl	8009948 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 8003d8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d90:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	7bfa      	ldrb	r2, [r7, #15]
 8003d9a:	2189      	movs	r1, #137	; 0x89
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f005 fdd3 	bl	8009948 <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 8003da2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003da4:	0a1b      	lsrs	r3, r3, #8
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 8003daa:	88fb      	ldrh	r3, [r7, #6]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	7bfa      	ldrb	r2, [r7, #15]
 8003db2:	218a      	movs	r1, #138	; 0x8a
 8003db4:	4618      	mov	r0, r3
 8003db6:	f005 fdc7 	bl	8009948 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 8003dba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003dbc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	7bfa      	ldrb	r2, [r7, #15]
 8003dc6:	218b      	movs	r1, #139	; 0x8b
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f005 fdbd 	bl	8009948 <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 8003dce:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003dd0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	7bfa      	ldrb	r2, [r7, #15]
 8003dda:	2190      	movs	r1, #144	; 0x90
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f005 fdb3 	bl	8009948 <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 8003de2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003de4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	7bfa      	ldrb	r2, [r7, #15]
 8003dee:	2191      	movs	r1, #145	; 0x91
 8003df0:	4618      	mov	r0, r3
 8003df2:	f005 fda9 	bl	8009948 <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 8003df6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003df8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 8003dfa:	88fb      	ldrh	r3, [r7, #6]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	7bfa      	ldrb	r2, [r7, #15]
 8003e02:	2192      	movs	r1, #146	; 0x92
 8003e04:	4618      	mov	r0, r3
 8003e06:	f005 fd9f 	bl	8009948 <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 8003e0a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003e0c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	7bfa      	ldrb	r2, [r7, #15]
 8003e16:	2193      	movs	r1, #147	; 0x93
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f005 fd95 	bl	8009948 <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 8003e1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003e20:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	7bfa      	ldrb	r2, [r7, #15]
 8003e2a:	2194      	movs	r1, #148	; 0x94
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f005 fd8b 	bl	8009948 <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 8003e32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e34:	0a1b      	lsrs	r3, r3, #8
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	7bfa      	ldrb	r2, [r7, #15]
 8003e42:	218c      	movs	r1, #140	; 0x8c
 8003e44:	4618      	mov	r0, r3
 8003e46:	f005 fd7f 	bl	8009948 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 8003e4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e4c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 8003e4e:	88fb      	ldrh	r3, [r7, #6]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	7bfa      	ldrb	r2, [r7, #15]
 8003e56:	218d      	movs	r1, #141	; 0x8d
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f005 fd75 	bl	8009948 <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 8003e5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e60:	0a1b      	lsrs	r3, r3, #8
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 8003e66:	88fb      	ldrh	r3, [r7, #6]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	7bfa      	ldrb	r2, [r7, #15]
 8003e6e:	218e      	movs	r1, #142	; 0x8e
 8003e70:	4618      	mov	r0, r3
 8003e72:	f005 fd69 	bl	8009948 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 8003e76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e78:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	7bfa      	ldrb	r2, [r7, #15]
 8003e82:	218f      	movs	r1, #143	; 0x8f
 8003e84:	4618      	mov	r0, r3
 8003e86:	f005 fd5f 	bl	8009948 <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 8003e8a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003e8e:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 8003e90:	88fb      	ldrh	r3, [r7, #6]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	7bfa      	ldrb	r2, [r7, #15]
 8003e98:	2196      	movs	r1, #150	; 0x96
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f005 fd54 	bl	8009948 <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8003ea0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003ea4:	b25b      	sxtb	r3, r3
 8003ea6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003eaa:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8003eac:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003eb0:	b25b      	sxtb	r3, r3
 8003eb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003eb6:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	b25b      	sxtb	r3, r3
 8003ebc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 8003ebe:	88fb      	ldrh	r3, [r7, #6]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	7bfa      	ldrb	r2, [r7, #15]
 8003ec6:	2197      	movs	r1, #151	; 0x97
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f005 fd3d 	bl	8009948 <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 8003ece:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003ed2:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8003ed4:	88fb      	ldrh	r3, [r7, #6]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	7bfa      	ldrb	r2, [r7, #15]
 8003edc:	2198      	movs	r1, #152	; 0x98
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f005 fd32 	bl	8009948 <MFX_IO_Write>
}
 8003ee4:	bf00      	nop
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003eee:	b004      	add	sp, #16
 8003ef0:	4770      	bx	lr

08003ef2 <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	4603      	mov	r3, r0
 8003efa:	6039      	str	r1, [r7, #0]
 8003efc:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	b298      	uxth	r0, r3
 8003f04:	f107 020c 	add.w	r2, r7, #12
 8003f08:	2303      	movs	r3, #3
 8003f0a:	2114      	movs	r1, #20
 8003f0c:	f005 fd44 	bl	8009998 <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 8003f10:	7b3b      	ldrb	r3, [r7, #12]
 8003f12:	041a      	lsls	r2, r3, #16
 8003f14:	7b7b      	ldrb	r3, [r7, #13]
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	7bba      	ldrb	r2, [r7, #14]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	461a      	mov	r2, r3
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	601a      	str	r2, [r3, #0]

}
 8003f24:	bf00      	nop
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8003f36:	f005 fca1 	bl	800987c <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	2102      	movs	r1, #2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff f944 	bl	80031cc <mfxstm32l152_EnableITSource>
}
 8003f44:	bf00      	nop
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8003f56:	88fb      	ldrh	r3, [r7, #6]
 8003f58:	2102      	movs	r1, #2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7ff f98f 	bl	800327e <mfxstm32l152_ClearGlobalIT>
}
 8003f60:	bf00      	nop
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	2102      	movs	r1, #2
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff f96b 	bl	8003252 <mfxstm32l152_GlobalITStatus>
 8003f7c:	4603      	mov	r3, r0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b082      	sub	sp, #8
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8003f90:	88fb      	ldrh	r3, [r7, #6]
 8003f92:	2102      	movs	r1, #2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff f938 	bl	800320a <mfxstm32l152_DisableITSource>
}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	4603      	mov	r3, r0
 8003faa:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2103      	movs	r1, #3
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f005 fcdb 	bl	8009970 <MFX_IO_Read>
 8003fba:	4603      	mov	r3, r0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3708      	adds	r7, #8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 8003fce:	88fb      	ldrh	r3, [r7, #6]
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2104      	movs	r1, #4
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f005 fcca 	bl	8009970 <MFX_IO_Read>
 8003fdc:	4603      	mov	r3, r0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b082      	sub	sp, #8
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	4603      	mov	r3, r0
 8003fee:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8003ff0:	f005 fc44 	bl	800987c <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8003ff4:	88fb      	ldrh	r3, [r7, #6]
 8003ff6:	2104      	movs	r1, #4
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff f8e7 	bl	80031cc <mfxstm32l152_EnableITSource>
}
 8003ffe:	bf00      	nop
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b082      	sub	sp, #8
 800400a:	af00      	add	r7, sp, #0
 800400c:	4603      	mov	r3, r0
 800400e:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8004010:	88fb      	ldrh	r3, [r7, #6]
 8004012:	2104      	movs	r1, #4
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff f932 	bl	800327e <mfxstm32l152_ClearGlobalIT>
}
 800401a:	bf00      	nop
 800401c:	3708      	adds	r7, #8
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	4603      	mov	r3, r0
 800402a:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 800402c:	88fb      	ldrh	r3, [r7, #6]
 800402e:	2104      	movs	r1, #4
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff f90e 	bl	8003252 <mfxstm32l152_GlobalITStatus>
 8004036:	4603      	mov	r3, r0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	4603      	mov	r3, r0
 8004048:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 800404a:	88fb      	ldrh	r3, [r7, #6]
 800404c:	2104      	movs	r1, #4
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff f8db 	bl	800320a <mfxstm32l152_DisableITSource>
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8004066:	2300      	movs	r3, #0
 8004068:	73fb      	strb	r3, [r7, #15]
 800406a:	e00b      	b.n	8004084 <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	4a0a      	ldr	r2, [pc, #40]	; (8004098 <mfxstm32l152_GetInstance+0x3c>)
 8004070:	5cd3      	ldrb	r3, [r2, r3]
 8004072:	b29b      	uxth	r3, r3
 8004074:	88fa      	ldrh	r2, [r7, #6]
 8004076:	429a      	cmp	r2, r3
 8004078:	d101      	bne.n	800407e <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 800407a:	7bfb      	ldrb	r3, [r7, #15]
 800407c:	e006      	b.n	800408c <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	3301      	adds	r3, #1
 8004082:	73fb      	strb	r3, [r7, #15]
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d9f0      	bls.n	800406c <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 800408a:	23ff      	movs	r3, #255	; 0xff
}
 800408c:	4618      	mov	r0, r3
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	20001198 	.word	0x20001198

0800409c <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80040a6:	2300      	movs	r3, #0
 80040a8:	73fb      	strb	r3, [r7, #15]
 80040aa:	e00f      	b.n	80040cc <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	4a0c      	ldr	r2, [pc, #48]	; (80040e0 <mfxstm32l152_ReleaseInstance+0x44>)
 80040b0:	5cd3      	ldrb	r3, [r2, r3]
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	88fa      	ldrh	r2, [r7, #6]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d105      	bne.n	80040c6 <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
 80040bc:	4a08      	ldr	r2, [pc, #32]	; (80040e0 <mfxstm32l152_ReleaseInstance+0x44>)
 80040be:	2100      	movs	r1, #0
 80040c0:	54d1      	strb	r1, [r2, r3]
      return idx;
 80040c2:	7bfb      	ldrb	r3, [r7, #15]
 80040c4:	e006      	b.n	80040d4 <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
 80040c8:	3301      	adds	r3, #1
 80040ca:	73fb      	strb	r3, [r7, #15]
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d9ec      	bls.n	80040ac <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 80040d2:	23ff      	movs	r3, #255	; 0xff
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	20001198 	.word	0x20001198

080040e4 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	603a      	str	r2, [r7, #0]
 80040ec:	461a      	mov	r2, r3
 80040ee:	4603      	mov	r3, r0
 80040f0:	80fb      	strh	r3, [r7, #6]
 80040f2:	460b      	mov	r3, r1
 80040f4:	717b      	strb	r3, [r7, #5]
 80040f6:	4613      	mov	r3, r2
 80040f8:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	0a1b      	lsrs	r3, r3, #8
 8004106:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	0c1b      	lsrs	r3, r3, #16
 800410c:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 800410e:	7bbb      	ldrb	r3, [r7, #14]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d01e      	beq.n	8004152 <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 8004114:	797a      	ldrb	r2, [r7, #5]
 8004116:	88fb      	ldrh	r3, [r7, #6]
 8004118:	4611      	mov	r1, r2
 800411a:	4618      	mov	r0, r3
 800411c:	f005 fc28 	bl	8009970 <MFX_IO_Read>
 8004120:	4603      	mov	r3, r0
 8004122:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8004124:	793b      	ldrb	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d004      	beq.n	8004134 <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 800412a:	7bfa      	ldrb	r2, [r7, #15]
 800412c:	7bbb      	ldrb	r3, [r7, #14]
 800412e:	4313      	orrs	r3, r2
 8004130:	73fb      	strb	r3, [r7, #15]
 8004132:	e008      	b.n	8004146 <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 8004134:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004138:	43db      	mvns	r3, r3
 800413a:	b25a      	sxtb	r2, r3
 800413c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004140:	4013      	ands	r3, r2
 8004142:	b25b      	sxtb	r3, r3
 8004144:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 8004146:	7bfa      	ldrb	r2, [r7, #15]
 8004148:	7979      	ldrb	r1, [r7, #5]
 800414a:	88fb      	ldrh	r3, [r7, #6]
 800414c:	4618      	mov	r0, r3
 800414e:	f005 fbfb 	bl	8009948 <MFX_IO_Write>
  }

  if (pin_8_15)
 8004152:	7b7b      	ldrb	r3, [r7, #13]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d022      	beq.n	800419e <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 8004158:	797b      	ldrb	r3, [r7, #5]
 800415a:	3301      	adds	r3, #1
 800415c:	b2da      	uxtb	r2, r3
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	4611      	mov	r1, r2
 8004162:	4618      	mov	r0, r3
 8004164:	f005 fc04 	bl	8009970 <MFX_IO_Read>
 8004168:	4603      	mov	r3, r0
 800416a:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 800416c:	793b      	ldrb	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d004      	beq.n	800417c <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 8004172:	7bfa      	ldrb	r2, [r7, #15]
 8004174:	7b7b      	ldrb	r3, [r7, #13]
 8004176:	4313      	orrs	r3, r2
 8004178:	73fb      	strb	r3, [r7, #15]
 800417a:	e008      	b.n	800418e <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 800417c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004180:	43db      	mvns	r3, r3
 8004182:	b25a      	sxtb	r2, r3
 8004184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004188:	4013      	ands	r3, r2
 800418a:	b25b      	sxtb	r3, r3
 800418c:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 800418e:	797b      	ldrb	r3, [r7, #5]
 8004190:	3301      	adds	r3, #1
 8004192:	b2d9      	uxtb	r1, r3
 8004194:	7bfa      	ldrb	r2, [r7, #15]
 8004196:	88fb      	ldrh	r3, [r7, #6]
 8004198:	4618      	mov	r0, r3
 800419a:	f005 fbd5 	bl	8009948 <MFX_IO_Write>
  }

  if (pin_16_23)
 800419e:	7b3b      	ldrb	r3, [r7, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d022      	beq.n	80041ea <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 80041a4:	797b      	ldrb	r3, [r7, #5]
 80041a6:	3302      	adds	r3, #2
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	4611      	mov	r1, r2
 80041ae:	4618      	mov	r0, r3
 80041b0:	f005 fbde 	bl	8009970 <MFX_IO_Read>
 80041b4:	4603      	mov	r3, r0
 80041b6:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 80041b8:	793b      	ldrb	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d004      	beq.n	80041c8 <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 80041be:	7bfa      	ldrb	r2, [r7, #15]
 80041c0:	7b3b      	ldrb	r3, [r7, #12]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	73fb      	strb	r3, [r7, #15]
 80041c6:	e008      	b.n	80041da <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 80041c8:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80041cc:	43db      	mvns	r3, r3
 80041ce:	b25a      	sxtb	r2, r3
 80041d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041d4:	4013      	ands	r3, r2
 80041d6:	b25b      	sxtb	r3, r3
 80041d8:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 80041da:	797b      	ldrb	r3, [r7, #5]
 80041dc:	3302      	adds	r3, #2
 80041de:	b2d9      	uxtb	r1, r3
 80041e0:	7bfa      	ldrb	r2, [r7, #15]
 80041e2:	88fb      	ldrh	r3, [r7, #6]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f005 fbaf 	bl	8009948 <MFX_IO_Write>
  }
}
 80041ea:	bf00      	nop
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80041f8:	f005 fcf0 	bl	8009bdc <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80041fc:	2200      	movs	r2, #0
 80041fe:	2100      	movs	r1, #0
 8004200:	2010      	movs	r0, #16
 8004202:	f000 f9e4 	bl	80045ce <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8004206:	200a      	movs	r0, #10
 8004208:	f005 fd0f 	bl	8009c2a <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 800420c:	2200      	movs	r2, #0
 800420e:	2100      	movs	r1, #0
 8004210:	2001      	movs	r0, #1
 8004212:	f000 f9dc 	bl	80045ce <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 8004216:	20c8      	movs	r0, #200	; 0xc8
 8004218:	f005 fd07 	bl	8009c2a <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 800421c:	2200      	movs	r2, #0
 800421e:	2100      	movs	r1, #0
 8004220:	2011      	movs	r0, #17
 8004222:	f000 f9d4 	bl	80045ce <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 8004226:	2078      	movs	r0, #120	; 0x78
 8004228:	f005 fcff 	bl	8009c2a <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 800422c:	2300      	movs	r3, #0
 800422e:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8004230:	463b      	mov	r3, r7
 8004232:	2201      	movs	r2, #1
 8004234:	4619      	mov	r1, r3
 8004236:	2036      	movs	r0, #54	; 0x36
 8004238:	f000 f9c9 	bl	80045ce <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 800423c:	2305      	movs	r3, #5
 800423e:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8004240:	463b      	mov	r3, r7
 8004242:	2201      	movs	r2, #1
 8004244:	4619      	mov	r1, r3
 8004246:	203a      	movs	r0, #58	; 0x3a
 8004248:	f000 f9c1 	bl	80045ce <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 800424c:	2200      	movs	r2, #0
 800424e:	2100      	movs	r1, #0
 8004250:	2021      	movs	r0, #33	; 0x21
 8004252:	f000 f9bc 	bl	80045ce <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 8004256:	2300      	movs	r3, #0
 8004258:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 800425a:	2300      	movs	r3, #0
 800425c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 800425e:	2300      	movs	r3, #0
 8004260:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8004262:	23ef      	movs	r3, #239	; 0xef
 8004264:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8004266:	463b      	mov	r3, r7
 8004268:	2204      	movs	r2, #4
 800426a:	4619      	mov	r1, r3
 800426c:	202a      	movs	r0, #42	; 0x2a
 800426e:	f000 f9ae 	bl	80045ce <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 8004272:	2300      	movs	r3, #0
 8004274:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8004276:	2300      	movs	r3, #0
 8004278:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 800427a:	2300      	movs	r3, #0
 800427c:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 800427e:	23ef      	movs	r3, #239	; 0xef
 8004280:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8004282:	463b      	mov	r3, r7
 8004284:	2204      	movs	r2, #4
 8004286:	4619      	mov	r1, r3
 8004288:	202b      	movs	r0, #43	; 0x2b
 800428a:	f000 f9a0 	bl	80045ce <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 800428e:	230c      	movs	r3, #12
 8004290:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8004292:	230c      	movs	r3, #12
 8004294:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8004296:	2300      	movs	r3, #0
 8004298:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 800429a:	2333      	movs	r3, #51	; 0x33
 800429c:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 800429e:	2333      	movs	r3, #51	; 0x33
 80042a0:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 80042a2:	463b      	mov	r3, r7
 80042a4:	2205      	movs	r2, #5
 80042a6:	4619      	mov	r1, r3
 80042a8:	20b2      	movs	r0, #178	; 0xb2
 80042aa:	f000 f990 	bl	80045ce <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 80042ae:	2335      	movs	r3, #53	; 0x35
 80042b0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 80042b2:	463b      	mov	r3, r7
 80042b4:	2201      	movs	r2, #1
 80042b6:	4619      	mov	r1, r3
 80042b8:	20b7      	movs	r0, #183	; 0xb7
 80042ba:	f000 f988 	bl	80045ce <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 80042be:	231f      	movs	r3, #31
 80042c0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 80042c2:	463b      	mov	r3, r7
 80042c4:	2201      	movs	r2, #1
 80042c6:	4619      	mov	r1, r3
 80042c8:	20bb      	movs	r0, #187	; 0xbb
 80042ca:	f000 f980 	bl	80045ce <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 80042ce:	232c      	movs	r3, #44	; 0x2c
 80042d0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 80042d2:	463b      	mov	r3, r7
 80042d4:	2201      	movs	r2, #1
 80042d6:	4619      	mov	r1, r3
 80042d8:	20c0      	movs	r0, #192	; 0xc0
 80042da:	f000 f978 	bl	80045ce <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 80042de:	2301      	movs	r3, #1
 80042e0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 80042e2:	23c3      	movs	r3, #195	; 0xc3
 80042e4:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 80042e6:	463b      	mov	r3, r7
 80042e8:	2202      	movs	r2, #2
 80042ea:	4619      	mov	r1, r3
 80042ec:	20c2      	movs	r0, #194	; 0xc2
 80042ee:	f000 f96e 	bl	80045ce <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 80042f2:	2320      	movs	r3, #32
 80042f4:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 80042f6:	463b      	mov	r3, r7
 80042f8:	2201      	movs	r2, #1
 80042fa:	4619      	mov	r1, r3
 80042fc:	20c4      	movs	r0, #196	; 0xc4
 80042fe:	f000 f966 	bl	80045ce <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8004302:	230f      	movs	r3, #15
 8004304:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8004306:	463b      	mov	r3, r7
 8004308:	2201      	movs	r2, #1
 800430a:	4619      	mov	r1, r3
 800430c:	20c6      	movs	r0, #198	; 0xc6
 800430e:	f000 f95e 	bl	80045ce <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8004312:	23a4      	movs	r3, #164	; 0xa4
 8004314:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8004316:	23a1      	movs	r3, #161	; 0xa1
 8004318:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 2); 
 800431a:	463b      	mov	r3, r7
 800431c:	2202      	movs	r2, #2
 800431e:	4619      	mov	r1, r3
 8004320:	20d0      	movs	r0, #208	; 0xd0
 8004322:	f000 f954 	bl	80045ce <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8004326:	23d0      	movs	r3, #208	; 0xd0
 8004328:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 800432a:	2308      	movs	r3, #8
 800432c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 800432e:	2311      	movs	r3, #17
 8004330:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8004332:	2308      	movs	r3, #8
 8004334:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8004336:	230c      	movs	r3, #12
 8004338:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 800433a:	2315      	movs	r3, #21
 800433c:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 800433e:	2339      	movs	r3, #57	; 0x39
 8004340:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8004342:	2333      	movs	r3, #51	; 0x33
 8004344:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8004346:	2350      	movs	r3, #80	; 0x50
 8004348:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 800434a:	2336      	movs	r3, #54	; 0x36
 800434c:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 800434e:	2313      	movs	r3, #19
 8004350:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8004352:	2314      	movs	r3, #20
 8004354:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8004356:	2329      	movs	r3, #41	; 0x29
 8004358:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 800435a:	232d      	movs	r3, #45	; 0x2d
 800435c:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 800435e:	463b      	mov	r3, r7
 8004360:	220e      	movs	r2, #14
 8004362:	4619      	mov	r1, r3
 8004364:	20e0      	movs	r0, #224	; 0xe0
 8004366:	f000 f932 	bl	80045ce <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 800436a:	23d0      	movs	r3, #208	; 0xd0
 800436c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 800436e:	2308      	movs	r3, #8
 8004370:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8004372:	2310      	movs	r3, #16
 8004374:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8004376:	2308      	movs	r3, #8
 8004378:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 800437a:	2306      	movs	r3, #6
 800437c:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 800437e:	2306      	movs	r3, #6
 8004380:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8004382:	2339      	movs	r3, #57	; 0x39
 8004384:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8004386:	2344      	movs	r3, #68	; 0x44
 8004388:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 800438a:	2351      	movs	r3, #81	; 0x51
 800438c:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 800438e:	230b      	movs	r3, #11
 8004390:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 8004392:	2316      	movs	r3, #22
 8004394:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8004396:	2314      	movs	r3, #20
 8004398:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 800439a:	232f      	movs	r3, #47	; 0x2f
 800439c:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 800439e:	2331      	movs	r3, #49	; 0x31
 80043a0:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 80043a2:	463b      	mov	r3, r7
 80043a4:	220e      	movs	r2, #14
 80043a6:	4619      	mov	r1, r3
 80043a8:	20e1      	movs	r0, #225	; 0xe1
 80043aa:	f000 f910 	bl	80045ce <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 80043ae:	f000 f847 	bl	8004440 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 80043b2:	2300      	movs	r3, #0
 80043b4:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 80043b6:	463b      	mov	r3, r7
 80043b8:	2201      	movs	r2, #1
 80043ba:	4619      	mov	r1, r3
 80043bc:	2035      	movs	r0, #53	; 0x35
 80043be:	f000 f906 	bl	80045ce <ST7789H2_WriteReg>

}
 80043c2:	bf00      	nop
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d102      	bne.n	80043de <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 80043d8:	2300      	movs	r3, #0
 80043da:	723b      	strb	r3, [r7, #8]
 80043dc:	e025      	b.n	800442a <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d120      	bne.n	8004426 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 80043e4:	2300      	movs	r3, #0
 80043e6:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 80043e8:	2300      	movs	r3, #0
 80043ea:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 80043ec:	2301      	movs	r3, #1
 80043ee:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 80043f0:	23f0      	movs	r3, #240	; 0xf0
 80043f2:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 80043f4:	2300      	movs	r3, #0
 80043f6:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 80043f8:	2300      	movs	r3, #0
 80043fa:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 80043fc:	f107 0308 	add.w	r3, r7, #8
 8004400:	2206      	movs	r2, #6
 8004402:	4619      	mov	r1, r3
 8004404:	2033      	movs	r0, #51	; 0x33
 8004406:	f000 f8e2 	bl	80045ce <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 800440a:	2300      	movs	r3, #0
 800440c:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 800440e:	2350      	movs	r3, #80	; 0x50
 8004410:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8004412:	f107 0308 	add.w	r3, r7, #8
 8004416:	2202      	movs	r2, #2
 8004418:	4619      	mov	r1, r3
 800441a:	2037      	movs	r0, #55	; 0x37
 800441c:	f000 f8d7 	bl	80045ce <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8004420:	23c0      	movs	r3, #192	; 0xc0
 8004422:	723b      	strb	r3, [r7, #8]
 8004424:	e001      	b.n	800442a <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8004426:	2360      	movs	r3, #96	; 0x60
 8004428:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 800442a:	f107 0308 	add.w	r3, r7, #8
 800442e:	2201      	movs	r2, #1
 8004430:	4619      	mov	r1, r3
 8004432:	2036      	movs	r0, #54	; 0x36
 8004434:	f000 f8cb 	bl	80045ce <ST7789H2_WriteReg>
}
 8004438:	bf00      	nop
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8004444:	2200      	movs	r2, #0
 8004446:	2100      	movs	r1, #0
 8004448:	2029      	movs	r0, #41	; 0x29
 800444a:	f000 f8c0 	bl	80045ce <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 800444e:	2200      	movs	r2, #0
 8004450:	2100      	movs	r1, #0
 8004452:	2011      	movs	r0, #17
 8004454:	f000 f8bb 	bl	80045ce <ST7789H2_WriteReg>
}
 8004458:	bf00      	nop
 800445a:	bd80      	pop	{r7, pc}

0800445c <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 8004462:	23fe      	movs	r3, #254	; 0xfe
 8004464:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8004466:	1d3b      	adds	r3, r7, #4
 8004468:	2201      	movs	r2, #1
 800446a:	4619      	mov	r1, r3
 800446c:	20bd      	movs	r0, #189	; 0xbd
 800446e:	f000 f8ae 	bl	80045ce <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8004472:	2200      	movs	r2, #0
 8004474:	2100      	movs	r1, #0
 8004476:	2010      	movs	r0, #16
 8004478:	f000 f8a9 	bl	80045ce <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 800447c:	200a      	movs	r0, #10
 800447e:	f005 fbd4 	bl	8009c2a <LCD_IO_Delay>
}
 8004482:	bf00      	nop
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 800448a:	b480      	push	{r7}
 800448c:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 800448e:	23f0      	movs	r3, #240	; 0xf0
}
 8004490:	4618      	mov	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 800449a:	b480      	push	{r7}
 800449c:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 800449e:	23f0      	movs	r3, #240	; 0xf0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80044ae:	f005 fb95 	bl	8009bdc <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 80044b2:	2004      	movs	r0, #4
 80044b4:	f000 f8ae 	bl	8004614 <ST7789H2_ReadReg>
 80044b8:	4603      	mov	r3, r0
 80044ba:	b29b      	uxth	r3, r3
}
 80044bc:	4618      	mov	r0, r3
 80044be:	bd80      	pop	{r7, pc}

080044c0 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4603      	mov	r3, r0
 80044c8:	460a      	mov	r2, r1
 80044ca:	80fb      	strh	r3, [r7, #6]
 80044cc:	4613      	mov	r3, r2
 80044ce:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 80044d0:	2300      	movs	r3, #0
 80044d2:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 80044d4:	88fb      	ldrh	r3, [r7, #6]
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 80044da:	2300      	movs	r3, #0
 80044dc:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 80044de:	88fb      	ldrh	r3, [r7, #6]
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	3b11      	subs	r3, #17
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80044e8:	f107 030c 	add.w	r3, r7, #12
 80044ec:	2204      	movs	r2, #4
 80044ee:	4619      	mov	r1, r3
 80044f0:	202a      	movs	r0, #42	; 0x2a
 80044f2:	f000 f86c 	bl	80045ce <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 80044f6:	2300      	movs	r3, #0
 80044f8:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 80044fa:	88bb      	ldrh	r3, [r7, #4]
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8004500:	2300      	movs	r3, #0
 8004502:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8004504:	88bb      	ldrh	r3, [r7, #4]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	3b11      	subs	r3, #17
 800450a:	b2db      	uxtb	r3, r3
 800450c:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800450e:	f107 030c 	add.w	r3, r7, #12
 8004512:	2204      	movs	r2, #4
 8004514:	4619      	mov	r1, r3
 8004516:	202b      	movs	r0, #43	; 0x2b
 8004518:	f000 f859 	bl	80045ce <ST7789H2_WriteReg>
}
 800451c:	bf00      	nop
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	4603      	mov	r3, r0
 800452c:	80fb      	strh	r3, [r7, #6]
 800452e:	460b      	mov	r3, r1
 8004530:	80bb      	strh	r3, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8004536:	88ba      	ldrh	r2, [r7, #4]
 8004538:	88fb      	ldrh	r3, [r7, #6]
 800453a:	4611      	mov	r1, r2
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff ffbf 	bl	80044c0 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8004542:	2200      	movs	r2, #0
 8004544:	2100      	movs	r1, #0
 8004546:	202c      	movs	r0, #44	; 0x2c
 8004548:	f000 f841 	bl	80045ce <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 800454c:	887b      	ldrh	r3, [r7, #2]
 800454e:	4618      	mov	r0, r3
 8004550:	f005 fb4a 	bl	8009be8 <LCD_IO_WriteData>
}
 8004554:	bf00      	nop
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	460a      	mov	r2, r1
 8004566:	80fb      	strh	r3, [r7, #6]
 8004568:	4613      	mov	r3, r2
 800456a:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 800456c:	88ba      	ldrh	r2, [r7, #4]
 800456e:	88fb      	ldrh	r3, [r7, #6]
 8004570:	4611      	mov	r1, r2
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff ffa4 	bl	80044c0 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8004578:	88ba      	ldrh	r2, [r7, #4]
 800457a:	88fb      	ldrh	r3, [r7, #6]
 800457c:	4611      	mov	r1, r2
 800457e:	4618      	mov	r0, r3
 8004580:	f000 f9c0 	bl	8004904 <ST7789H2_ReadPixel_rgb888>
 8004584:	4603      	mov	r3, r0
 8004586:	461a      	mov	r2, r3
 8004588:	733a      	strb	r2, [r7, #12]
 800458a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800458e:	737a      	strb	r2, [r7, #13]
 8004590:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004594:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8004596:	7b3b      	ldrb	r3, [r7, #12]
 8004598:	08db      	lsrs	r3, r3, #3
 800459a:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 800459c:	7b7b      	ldrb	r3, [r7, #13]
 800459e:	089b      	lsrs	r3, r3, #2
 80045a0:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 80045a2:	7bbb      	ldrb	r3, [r7, #14]
 80045a4:	08db      	lsrs	r3, r3, #3
 80045a6:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	02db      	lsls	r3, r3, #11
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	7dbb      	ldrb	r3, [r7, #22]
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	015b      	lsls	r3, r3, #5
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	4413      	add	r3, r2
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	7d7b      	ldrb	r3, [r7, #21]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	4413      	add	r3, r2
 80045c2:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 80045c4:	8a7b      	ldrh	r3, [r7, #18]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	4603      	mov	r3, r0
 80045d6:	6039      	str	r1, [r7, #0]
 80045d8:	71fb      	strb	r3, [r7, #7]
 80045da:	4613      	mov	r3, r2
 80045dc:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f005 fb0e 	bl	8009c02 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 80045e6:	2300      	movs	r3, #0
 80045e8:	73fb      	strb	r3, [r7, #15]
 80045ea:	e00a      	b.n	8004602 <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	4413      	add	r3, r2
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	4618      	mov	r0, r3
 80045f8:	f005 faf6 	bl	8009be8 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
 80045fe:	3301      	adds	r3, #1
 8004600:	73fb      	strb	r3, [r7, #15]
 8004602:	7bfa      	ldrb	r2, [r7, #15]
 8004604:	79bb      	ldrb	r3, [r7, #6]
 8004606:	429a      	cmp	r2, r3
 8004608:	d3f0      	bcc.n	80045ec <ST7789H2_WriteReg+0x1e>
  }
}
 800460a:	bf00      	nop
 800460c:	bf00      	nop
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	4603      	mov	r3, r0
 800461c:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	4618      	mov	r0, r3
 8004622:	f005 faee 	bl	8009c02 <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8004626:	f005 faf9 	bl	8009c1c <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 800462a:	f005 faf7 	bl	8009c1c <LCD_IO_ReadData>
 800462e:	4603      	mov	r3, r0
 8004630:	b2db      	uxtb	r3, r3
}
 8004632:	4618      	mov	r0, r3
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800463c:	b490      	push	{r4, r7}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	4604      	mov	r4, r0
 8004644:	4608      	mov	r0, r1
 8004646:	4611      	mov	r1, r2
 8004648:	461a      	mov	r2, r3
 800464a:	4623      	mov	r3, r4
 800464c:	80fb      	strh	r3, [r7, #6]
 800464e:	4603      	mov	r3, r0
 8004650:	80bb      	strh	r3, [r7, #4]
 8004652:	460b      	mov	r3, r1
 8004654:	807b      	strh	r3, [r7, #2]
 8004656:	4613      	mov	r3, r2
 8004658:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 800465a:	88fb      	ldrh	r3, [r7, #6]
 800465c:	2bef      	cmp	r3, #239	; 0xef
 800465e:	d803      	bhi.n	8004668 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8004660:	4a1b      	ldr	r2, [pc, #108]	; (80046d0 <ST7789H2_SetDisplayWindow+0x94>)
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	8013      	strh	r3, [r2, #0]
 8004666:	e002      	b.n	800466e <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8004668:	4b19      	ldr	r3, [pc, #100]	; (80046d0 <ST7789H2_SetDisplayWindow+0x94>)
 800466a:	2200      	movs	r2, #0
 800466c:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 800466e:	88bb      	ldrh	r3, [r7, #4]
 8004670:	2bef      	cmp	r3, #239	; 0xef
 8004672:	d803      	bhi.n	800467c <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8004674:	4a17      	ldr	r2, [pc, #92]	; (80046d4 <ST7789H2_SetDisplayWindow+0x98>)
 8004676:	88bb      	ldrh	r3, [r7, #4]
 8004678:	8013      	strh	r3, [r2, #0]
 800467a:	e002      	b.n	8004682 <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 800467c:	4b15      	ldr	r3, [pc, #84]	; (80046d4 <ST7789H2_SetDisplayWindow+0x98>)
 800467e:	2200      	movs	r2, #0
 8004680:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8004682:	887a      	ldrh	r2, [r7, #2]
 8004684:	88fb      	ldrh	r3, [r7, #6]
 8004686:	4413      	add	r3, r2
 8004688:	2bf0      	cmp	r3, #240	; 0xf0
 800468a:	dc08      	bgt.n	800469e <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 800468c:	887a      	ldrh	r2, [r7, #2]
 800468e:	88fb      	ldrh	r3, [r7, #6]
 8004690:	4413      	add	r3, r2
 8004692:	b29b      	uxth	r3, r3
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <ST7789H2_SetDisplayWindow+0x9c>)
 800469a:	801a      	strh	r2, [r3, #0]
 800469c:	e002      	b.n	80046a4 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 800469e:	4b0e      	ldr	r3, [pc, #56]	; (80046d8 <ST7789H2_SetDisplayWindow+0x9c>)
 80046a0:	22ef      	movs	r2, #239	; 0xef
 80046a2:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 80046a4:	883a      	ldrh	r2, [r7, #0]
 80046a6:	88bb      	ldrh	r3, [r7, #4]
 80046a8:	4413      	add	r3, r2
 80046aa:	2bf0      	cmp	r3, #240	; 0xf0
 80046ac:	dc08      	bgt.n	80046c0 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 80046ae:	883a      	ldrh	r2, [r7, #0]
 80046b0:	88bb      	ldrh	r3, [r7, #4]
 80046b2:	4413      	add	r3, r2
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	4b08      	ldr	r3, [pc, #32]	; (80046dc <ST7789H2_SetDisplayWindow+0xa0>)
 80046bc:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 80046be:	e002      	b.n	80046c6 <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <ST7789H2_SetDisplayWindow+0xa0>)
 80046c2:	22ef      	movs	r2, #239	; 0xef
 80046c4:	801a      	strh	r2, [r3, #0]
}
 80046c6:	bf00      	nop
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc90      	pop	{r4, r7}
 80046ce:	4770      	bx	lr
 80046d0:	2000119c 	.word	0x2000119c
 80046d4:	2000119e 	.word	0x2000119e
 80046d8:	20000270 	.word	0x20000270
 80046dc:	20000272 	.word	0x20000272

080046e0 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80046e0:	b590      	push	{r4, r7, lr}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4604      	mov	r4, r0
 80046e8:	4608      	mov	r0, r1
 80046ea:	4611      	mov	r1, r2
 80046ec:	461a      	mov	r2, r3
 80046ee:	4623      	mov	r3, r4
 80046f0:	80fb      	strh	r3, [r7, #6]
 80046f2:	4603      	mov	r3, r0
 80046f4:	80bb      	strh	r3, [r7, #4]
 80046f6:	460b      	mov	r3, r1
 80046f8:	807b      	strh	r3, [r7, #2]
 80046fa:	4613      	mov	r3, r2
 80046fc:	803b      	strh	r3, [r7, #0]
  uint16_t counter;
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 80046fe:	887a      	ldrh	r2, [r7, #2]
 8004700:	88bb      	ldrh	r3, [r7, #4]
 8004702:	4611      	mov	r1, r2
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff fedb 	bl	80044c0 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800470a:	2200      	movs	r2, #0
 800470c:	2100      	movs	r1, #0
 800470e:	202c      	movs	r0, #44	; 0x2c
 8004710:	f7ff ff5d 	bl	80045ce <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8004714:	2300      	movs	r3, #0
 8004716:	81fb      	strh	r3, [r7, #14]
 8004718:	e006      	b.n	8004728 <ST7789H2_DrawHLine+0x48>
  {
    LCD_IO_WriteData(RGBCode);
 800471a:	88fb      	ldrh	r3, [r7, #6]
 800471c:	4618      	mov	r0, r3
 800471e:	f005 fa63 	bl	8009be8 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8004722:	89fb      	ldrh	r3, [r7, #14]
 8004724:	3301      	adds	r3, #1
 8004726:	81fb      	strh	r3, [r7, #14]
 8004728:	89fa      	ldrh	r2, [r7, #14]
 800472a:	883b      	ldrh	r3, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d3f4      	bcc.n	800471a <ST7789H2_DrawHLine+0x3a>
  }  
}
 8004730:	bf00      	nop
 8004732:	bf00      	nop
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	bd90      	pop	{r4, r7, pc}

0800473a <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800473a:	b590      	push	{r4, r7, lr}
 800473c:	b085      	sub	sp, #20
 800473e:	af00      	add	r7, sp, #0
 8004740:	4604      	mov	r4, r0
 8004742:	4608      	mov	r0, r1
 8004744:	4611      	mov	r1, r2
 8004746:	461a      	mov	r2, r3
 8004748:	4623      	mov	r3, r4
 800474a:	80fb      	strh	r3, [r7, #6]
 800474c:	4603      	mov	r3, r0
 800474e:	80bb      	strh	r3, [r7, #4]
 8004750:	460b      	mov	r3, r1
 8004752:	807b      	strh	r3, [r7, #2]
 8004754:	4613      	mov	r3, r2
 8004756:	803b      	strh	r3, [r7, #0]
  uint16_t counter;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8004758:	887a      	ldrh	r2, [r7, #2]
 800475a:	88bb      	ldrh	r3, [r7, #4]
 800475c:	4611      	mov	r1, r2
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff feae 	bl	80044c0 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8004764:	2200      	movs	r2, #0
 8004766:	2100      	movs	r1, #0
 8004768:	202c      	movs	r0, #44	; 0x2c
 800476a:	f7ff ff30 	bl	80045ce <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 800476e:	2300      	movs	r3, #0
 8004770:	81fb      	strh	r3, [r7, #14]
 8004772:	e00b      	b.n	800478c <ST7789H2_DrawVLine+0x52>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 8004774:	887a      	ldrh	r2, [r7, #2]
 8004776:	89fb      	ldrh	r3, [r7, #14]
 8004778:	4413      	add	r3, r2
 800477a:	b299      	uxth	r1, r3
 800477c:	88fa      	ldrh	r2, [r7, #6]
 800477e:	88bb      	ldrh	r3, [r7, #4]
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff fecf 	bl	8004524 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 8004786:	89fb      	ldrh	r3, [r7, #14]
 8004788:	3301      	adds	r3, #1
 800478a:	81fb      	strh	r3, [r7, #14]
 800478c:	89fa      	ldrh	r2, [r7, #14]
 800478e:	883b      	ldrh	r3, [r7, #0]
 8004790:	429a      	cmp	r2, r3
 8004792:	d3ef      	bcc.n	8004774 <ST7789H2_DrawVLine+0x3a>
  }
}
 8004794:	bf00      	nop
 8004796:	bf00      	nop
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	bd90      	pop	{r4, r7, pc}
	...

080047a0 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	603a      	str	r2, [r7, #0]
 80047aa:	80fb      	strh	r3, [r7, #6]
 80047ac:	460b      	mov	r3, r1
 80047ae:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 80047b0:	2300      	movs	r3, #0
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	2300      	movs	r3, #0
 80047b6:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 80047bc:	4b30      	ldr	r3, [pc, #192]	; (8004880 <ST7789H2_DrawBitmap+0xe0>)
 80047be:	881a      	ldrh	r2, [r3, #0]
 80047c0:	4b30      	ldr	r3, [pc, #192]	; (8004884 <ST7789H2_DrawBitmap+0xe4>)
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3301      	adds	r3, #1
 80047ca:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 80047cc:	4b2e      	ldr	r3, [pc, #184]	; (8004888 <ST7789H2_DrawBitmap+0xe8>)
 80047ce:	881a      	ldrh	r2, [r3, #0]
 80047d0:	4b2e      	ldr	r3, [pc, #184]	; (800488c <ST7789H2_DrawBitmap+0xec>)
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3301      	adds	r3, #1
 80047da:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	3302      	adds	r3, #2
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	3304      	adds	r3, #4
 80047ea:	881b      	ldrh	r3, [r3, #0]
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	041b      	lsls	r3, r3, #16
 80047f0:	461a      	mov	r2, r3
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	330a      	adds	r3, #10
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	330c      	adds	r3, #12
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	041b      	lsls	r3, r3, #16
 800480c:	461a      	mov	r2, r3
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	085b      	lsrs	r3, r3, #1
 800481c:	613b      	str	r3, [r7, #16]
  pbmp += index;
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	4413      	add	r3, r2
 8004824:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8004826:	88ba      	ldrh	r2, [r7, #4]
 8004828:	89bb      	ldrh	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	61fb      	str	r3, [r7, #28]
 800482e:	e01d      	b.n	800486c <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	88fb      	ldrh	r3, [r7, #6]
 800483a:	4611      	mov	r1, r2
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff fe3f 	bl	80044c0 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	b29b      	uxth	r3, r3
 8004846:	3b01      	subs	r3, #1
 8004848:	b299      	uxth	r1, r3
 800484a:	89fb      	ldrh	r3, [r7, #14]
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	fb02 f303 	mul.w	r3, r2, r3
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	4413      	add	r3, r2
 8004858:	89fa      	ldrh	r2, [r7, #14]
 800485a:	88f8      	ldrh	r0, [r7, #6]
 800485c:	f000 f89c 	bl	8004998 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	3301      	adds	r3, #1
 8004864:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	3b01      	subs	r3, #1
 800486a:	61fb      	str	r3, [r7, #28]
 800486c:	88bb      	ldrh	r3, [r7, #4]
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	429a      	cmp	r2, r3
 8004872:	d8dd      	bhi.n	8004830 <ST7789H2_DrawBitmap+0x90>
  }
}
 8004874:	bf00      	nop
 8004876:	bf00      	nop
 8004878:	3720      	adds	r7, #32
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20000270 	.word	0x20000270
 8004884:	2000119c 	.word	0x2000119c
 8004888:	20000272 	.word	0x20000272
 800488c:	2000119e 	.word	0x2000119e

08004890 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8004890:	b590      	push	{r4, r7, lr}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	4604      	mov	r4, r0
 8004898:	4608      	mov	r0, r1
 800489a:	4611      	mov	r1, r2
 800489c:	461a      	mov	r2, r3
 800489e:	4623      	mov	r3, r4
 80048a0:	80fb      	strh	r3, [r7, #6]
 80048a2:	4603      	mov	r3, r0
 80048a4:	80bb      	strh	r3, [r7, #4]
 80048a6:	460b      	mov	r3, r1
 80048a8:	807b      	strh	r3, [r7, #2]
 80048aa:	4613      	mov	r3, r2
 80048ac:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 80048b2:	88bb      	ldrh	r3, [r7, #4]
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	e019      	b.n	80048ec <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	88fb      	ldrh	r3, [r7, #6]
 80048be:	4611      	mov	r1, r2
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff fdfd 	bl	80044c0 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	b299      	uxth	r1, r3
 80048ca:	887b      	ldrh	r3, [r7, #2]
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	fb02 f303 	mul.w	r3, r2, r3
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	6a3a      	ldr	r2, [r7, #32]
 80048d6:	4413      	add	r3, r2
 80048d8:	887a      	ldrh	r2, [r7, #2]
 80048da:	88f8      	ldrh	r0, [r7, #6]
 80048dc:	f000 f85c 	bl	8004998 <ST7789H2_DrawRGBHLine>
    nb_line++;
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	3301      	adds	r3, #1
 80048e4:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	3301      	adds	r3, #1
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	88ba      	ldrh	r2, [r7, #4]
 80048ee:	883b      	ldrh	r3, [r7, #0]
 80048f0:	4413      	add	r3, r2
 80048f2:	461a      	mov	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d3de      	bcc.n	80048b8 <ST7789H2_DrawRGBImage+0x28>
  }
}
 80048fa:	bf00      	nop
 80048fc:	bf00      	nop
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	bd90      	pop	{r4, r7, pc}

08004904 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	4603      	mov	r3, r0
 800490c:	460a      	mov	r2, r1
 800490e:	80fb      	strh	r3, [r7, #6]
 8004910:	4613      	mov	r3, r2
 8004912:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8004914:	88ba      	ldrh	r2, [r7, #4]
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	4611      	mov	r1, r2
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff fdd0 	bl	80044c0 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8004920:	2200      	movs	r2, #0
 8004922:	2100      	movs	r1, #0
 8004924:	202e      	movs	r0, #46	; 0x2e
 8004926:	f7ff fe52 	bl	80045ce <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 800492a:	f005 f977 	bl	8009c1c <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 800492e:	f005 f975 	bl	8009c1c <LCD_IO_ReadData>
 8004932:	4603      	mov	r3, r0
 8004934:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 8004936:	f005 f971 	bl	8009c1c <LCD_IO_ReadData>
 800493a:	4603      	mov	r3, r0
 800493c:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 800493e:	8afb      	ldrh	r3, [r7, #22]
 8004940:	121b      	asrs	r3, r3, #8
 8004942:	b2db      	uxtb	r3, r3
 8004944:	f023 0303 	bic.w	r3, r3, #3
 8004948:	b2db      	uxtb	r3, r3
 800494a:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 800494c:	8afb      	ldrh	r3, [r7, #22]
 800494e:	b2db      	uxtb	r3, r3
 8004950:	f023 0303 	bic.w	r3, r3, #3
 8004954:	b2db      	uxtb	r3, r3
 8004956:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8004958:	8abb      	ldrh	r3, [r7, #20]
 800495a:	121b      	asrs	r3, r3, #8
 800495c:	b2db      	uxtb	r3, r3
 800495e:	f023 0303 	bic.w	r3, r3, #3
 8004962:	b2db      	uxtb	r3, r3
 8004964:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 8004966:	f107 0310 	add.w	r3, r7, #16
 800496a:	f107 020c 	add.w	r2, r7, #12
 800496e:	6812      	ldr	r2, [r2, #0]
 8004970:	4611      	mov	r1, r2
 8004972:	8019      	strh	r1, [r3, #0]
 8004974:	3302      	adds	r3, #2
 8004976:	0c12      	lsrs	r2, r2, #16
 8004978:	701a      	strb	r2, [r3, #0]
 800497a:	2300      	movs	r3, #0
 800497c:	7c3a      	ldrb	r2, [r7, #16]
 800497e:	f362 0307 	bfi	r3, r2, #0, #8
 8004982:	7c7a      	ldrb	r2, [r7, #17]
 8004984:	f362 230f 	bfi	r3, r2, #8, #8
 8004988:	7cba      	ldrb	r2, [r7, #18]
 800498a:	f362 4317 	bfi	r3, r2, #16, #8
}
 800498e:	4618      	mov	r0, r3
 8004990:	3718      	adds	r7, #24
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af00      	add	r7, sp, #0
 800499e:	607b      	str	r3, [r7, #4]
 80049a0:	4603      	mov	r3, r0
 80049a2:	81fb      	strh	r3, [r7, #14]
 80049a4:	460b      	mov	r3, r1
 80049a6:	81bb      	strh	r3, [r7, #12]
 80049a8:	4613      	mov	r3, r2
 80049aa:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80049b4:	2200      	movs	r2, #0
 80049b6:	2100      	movs	r1, #0
 80049b8:	202c      	movs	r0, #44	; 0x2c
 80049ba:	f7ff fe08 	bl	80045ce <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 80049be:	89fb      	ldrh	r3, [r7, #14]
 80049c0:	61bb      	str	r3, [r7, #24]
 80049c2:	e029      	b.n	8004a18 <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 80049c4:	4b1a      	ldr	r3, [pc, #104]	; (8004a30 <ST7789H2_DrawRGBHLine+0x98>)
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	461a      	mov	r2, r3
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d320      	bcc.n	8004a12 <ST7789H2_DrawRGBHLine+0x7a>
 80049d0:	4b18      	ldr	r3, [pc, #96]	; (8004a34 <ST7789H2_DrawRGBHLine+0x9c>)
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	89ba      	ldrh	r2, [r7, #12]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d31b      	bcc.n	8004a12 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 80049da:	4b17      	ldr	r3, [pc, #92]	; (8004a38 <ST7789H2_DrawRGBHLine+0xa0>)
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d815      	bhi.n	8004a12 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 80049e6:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <ST7789H2_DrawRGBHLine+0xa4>)
 80049e8:	881b      	ldrh	r3, [r3, #0]
 80049ea:	89ba      	ldrh	r2, [r7, #12]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d810      	bhi.n	8004a12 <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 80049f0:	897a      	ldrh	r2, [r7, #10]
 80049f2:	89fb      	ldrh	r3, [r7, #14]
 80049f4:	441a      	add	r2, r3
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d007      	beq.n	8004a0c <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	4413      	add	r3, r2
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f005 f8ee 	bl	8009be8 <LCD_IO_WriteData>
      }      
      i++;
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	3301      	adds	r3, #1
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	897a      	ldrh	r2, [r7, #10]
 8004a1a:	89fb      	ldrh	r3, [r7, #14]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	461a      	mov	r2, r3
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d3ce      	bcc.n	80049c4 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8004a26:	bf00      	nop
 8004a28:	bf00      	nop
 8004a2a:	3720      	adds	r7, #32
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	2000119c 	.word	0x2000119c
 8004a34:	2000119e 	.word	0x2000119e
 8004a38:	20000270 	.word	0x20000270
 8004a3c:	20000272 	.word	0x20000272

08004a40 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8004a4e:	6839      	ldr	r1, [r7, #0]
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f001 fcc0 	bl	80063d6 <VL53L0X_get_offset_calibration_data_micro_meter>
 8004a56:	4603      	mov	r3, r0
 8004a58:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8004a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8004a68:	b5b0      	push	{r4, r5, r7, lr}
 8004a6a:	b096      	sub	sp, #88	; 0x58
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a70:	2300      	movs	r3, #0
 8004a72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8004a76:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d107      	bne.n	8004a8e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2188      	movs	r1, #136	; 0x88
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fe f84c 	bl	8002b20 <VL53L0X_WrByte>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a9c:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004aa6:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a9e      	ldr	r2, [pc, #632]	; (8004d28 <VL53L0X_DataInit+0x2c0>)
 8004aae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a9d      	ldr	r2, [pc, #628]	; (8004d2c <VL53L0X_DataInit+0x2c4>)
 8004ab6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004ac0:	f107 0310 	add.w	r3, r7, #16
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fab4 	bl	8005034 <VL53L0X_GetDeviceParameters>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8004ad2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d112      	bne.n	8004b00 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8004ada:	2300      	movs	r3, #0
 8004adc:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f103 0410 	add.w	r4, r3, #16
 8004ae8:	f107 0510 	add.w	r5, r7, #16
 8004aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004af0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004af8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004afc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2264      	movs	r2, #100	; 0x64
 8004b04:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f44f 7261 	mov.w	r2, #900	; 0x384
 8004b0e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004b18:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8004b22:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004b2e:	2201      	movs	r2, #1
 8004b30:	2180      	movs	r1, #128	; 0x80
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fd fff4 	bl	8002b20 <VL53L0X_WrByte>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004b46:	2201      	movs	r2, #1
 8004b48:	21ff      	movs	r1, #255	; 0xff
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fd ffe8 	bl	8002b20 <VL53L0X_WrByte>
 8004b50:	4603      	mov	r3, r0
 8004b52:	461a      	mov	r2, r3
 8004b54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004b5e:	2200      	movs	r2, #0
 8004b60:	2100      	movs	r1, #0
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fd ffdc 	bl	8002b20 <VL53L0X_WrByte>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8004b76:	f107 030f 	add.w	r3, r7, #15
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	2191      	movs	r1, #145	; 0x91
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7fe f882 	bl	8002c88 <VL53L0X_RdByte>
 8004b84:	4603      	mov	r3, r0
 8004b86:	461a      	mov	r2, r3
 8004b88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8004b92:	7bfa      	ldrb	r2, [r7, #15]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fd ffbe 	bl	8002b20 <VL53L0X_WrByte>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bac:	4313      	orrs	r3, r2
 8004bae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	21ff      	movs	r1, #255	; 0xff
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fd ffb2 	bl	8002b20 <VL53L0X_WrByte>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004bca:	2200      	movs	r2, #0
 8004bcc:	2180      	movs	r1, #128	; 0x80
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7fd ffa6 	bl	8002b20 <VL53L0X_WrByte>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004be2:	2300      	movs	r3, #0
 8004be4:	653b      	str	r3, [r7, #80]	; 0x50
 8004be6:	e014      	b.n	8004c12 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8004be8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d114      	bne.n	8004c1a <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8004bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fd43 	bl	8005684 <VL53L0X_SetLimitCheckEnable>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	461a      	mov	r2, r3
 8004c02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c0e:	3301      	adds	r3, #1
 8004c10:	653b      	str	r3, [r7, #80]	; 0x50
 8004c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c14:	2b05      	cmp	r3, #5
 8004c16:	dde7      	ble.n	8004be8 <VL53L0X_DataInit+0x180>
 8004c18:	e000      	b.n	8004c1c <VL53L0X_DataInit+0x1b4>
		else
			break;
 8004c1a:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8004c1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d107      	bne.n	8004c34 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004c24:	2200      	movs	r2, #0
 8004c26:	2102      	movs	r1, #2
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 fd2b 	bl	8005684 <VL53L0X_SetLimitCheckEnable>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004c34:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d107      	bne.n	8004c4c <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2103      	movs	r1, #3
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fd1f 	bl	8005684 <VL53L0X_SetLimitCheckEnable>
 8004c46:	4603      	mov	r3, r0
 8004c48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004c4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d107      	bne.n	8004c64 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004c54:	2200      	movs	r2, #0
 8004c56:	2104      	movs	r1, #4
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 fd13 	bl	8005684 <VL53L0X_SetLimitCheckEnable>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004c64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d107      	bne.n	8004c7c <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2105      	movs	r1, #5
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fd07 	bl	8005684 <VL53L0X_SetLimitCheckEnable>
 8004c76:	4603      	mov	r3, r0
 8004c78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8004c7c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d108      	bne.n	8004c96 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004c84:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8004c88:	2100      	movs	r1, #0
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fdaa 	bl	80057e4 <VL53L0X_SetLimitCheckValue>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004c96:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d108      	bne.n	8004cb0 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004c9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fd9d 	bl	80057e4 <VL53L0X_SetLimitCheckValue>
 8004caa:	4603      	mov	r3, r0
 8004cac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004cb0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d108      	bne.n	8004cca <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004cb8:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8004cbc:	2102      	movs	r1, #2
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fd90 	bl	80057e4 <VL53L0X_SetLimitCheckValue>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004cca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d107      	bne.n	8004ce2 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	2103      	movs	r1, #3
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fd84 	bl	80057e4 <VL53L0X_SetLimitCheckValue>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004ce2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10f      	bne.n	8004d0a <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	22ff      	movs	r2, #255	; 0xff
 8004cee:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004cf2:	22ff      	movs	r2, #255	; 0xff
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fd ff12 	bl	8002b20 <VL53L0X_WrByte>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8004d0a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d103      	bne.n	8004d1a <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8004d1a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3758      	adds	r7, #88	; 0x58
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bdb0      	pop	{r4, r5, r7, pc}
 8004d26:	bf00      	nop
 8004d28:	00016b85 	.word	0x00016b85
 8004d2c:	000970a4 	.word	0x000970a4

08004d30 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8004d30:	b5b0      	push	{r4, r5, r7, lr}
 8004d32:	b09e      	sub	sp, #120	; 0x78
 8004d34:	af02      	add	r7, sp, #8
 8004d36:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8004d3e:	f107 031c 	add.w	r3, r7, #28
 8004d42:	2240      	movs	r2, #64	; 0x40
 8004d44:	2100      	movs	r1, #0
 8004d46:	4618      	mov	r0, r3
 8004d48:	f014 f8da 	bl	8018f00 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8004d54:	2300      	movs	r3, #0
 8004d56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8004d62:	2300      	movs	r3, #0
 8004d64:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8004d66:	2300      	movs	r3, #0
 8004d68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f002 fa74 	bl	800725c <VL53L0X_get_info_from_device>
 8004d74:	4603      	mov	r3, r0
 8004d76:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8004d80:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8004d88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8004d8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d80d      	bhi.n	8004db0 <VL53L0X_StaticInit+0x80>
 8004d94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d102      	bne.n	8004da2 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8004d9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	d806      	bhi.n	8004db0 <VL53L0X_StaticInit+0x80>
 8004da2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10e      	bne.n	8004dc8 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8004daa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dac:	2b0c      	cmp	r3, #12
 8004dae:	d90b      	bls.n	8004dc8 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8004db0:	f107 0218 	add.w	r2, r7, #24
 8004db4:	f107 0314 	add.w	r3, r7, #20
 8004db8:	4619      	mov	r1, r3
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f001 fd06 	bl	80067cc <VL53L0X_perform_ref_spad_management>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004dc6:	e009      	b.n	8004ddc <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8004dc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004dcc:	461a      	mov	r2, r3
 8004dce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f001 ff07 	bl	8006be4 <VL53L0X_set_reference_spads>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8004ddc:	4b94      	ldr	r3, [pc, #592]	; (8005030 <VL53L0X_StaticInit+0x300>)
 8004dde:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8004de0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10f      	bne.n	8004e08 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8004dee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8004df2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d104      	bne.n	8004e04 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8004e00:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e02:	e001      	b.n	8004e08 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8004e04:	4b8a      	ldr	r3, [pc, #552]	; (8005030 <VL53L0X_StaticInit+0x300>)
 8004e06:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004e08:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d106      	bne.n	8004e1e <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8004e10:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f003 fb40 	bl	8008498 <VL53L0X_load_tuning_settings>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8004e1e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10a      	bne.n	8004e3c <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8004e26:	2300      	movs	r3, #0
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	2304      	movs	r3, #4
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	2100      	movs	r1, #0
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f001 f8ff 	bl	8006034 <VL53L0X_SetGpioConfig>
 8004e36:	4603      	mov	r3, r0
 8004e38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004e3c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d121      	bne.n	8004e88 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004e44:	2201      	movs	r2, #1
 8004e46:	21ff      	movs	r1, #255	; 0xff
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7fd fe69 	bl	8002b20 <VL53L0X_WrByte>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8004e54:	f107 031a 	add.w	r3, r7, #26
 8004e58:	461a      	mov	r2, r3
 8004e5a:	2184      	movs	r1, #132	; 0x84
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f7fd ff3d 	bl	8002cdc <VL53L0X_RdWord>
 8004e62:	4603      	mov	r3, r0
 8004e64:	461a      	mov	r2, r3
 8004e66:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004e70:	2200      	movs	r2, #0
 8004e72:	21ff      	movs	r1, #255	; 0xff
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7fd fe53 	bl	8002b20 <VL53L0X_WrByte>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004e82:	4313      	orrs	r3, r2
 8004e84:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004e88:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d105      	bne.n	8004e9c <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8004e90:	8b7b      	ldrh	r3, [r7, #26]
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	461a      	mov	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8004e9c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d108      	bne.n	8004eb6 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8004ea4:	f107 031c 	add.w	r3, r7, #28
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f8c2 	bl	8005034 <VL53L0X_GetDeviceParameters>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8004eb6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d110      	bne.n	8004ee0 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8004ebe:	f107 0319 	add.w	r3, r7, #25
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f984 	bl	80051d2 <VL53L0X_GetFractionEnable>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8004ed0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d103      	bne.n	8004ee0 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8004ed8:	7e7a      	ldrb	r2, [r7, #25]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8004ee0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10e      	bne.n	8004f06 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f103 0410 	add.w	r4, r3, #16
 8004eee:	f107 051c 	add.w	r5, r7, #28
 8004ef2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ef4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ef6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ef8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004efe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004f02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8004f06:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d111      	bne.n	8004f32 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8004f0e:	f107 0319 	add.w	r3, r7, #25
 8004f12:	461a      	mov	r2, r3
 8004f14:	2101      	movs	r1, #1
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fd feb6 	bl	8002c88 <VL53L0X_RdByte>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8004f22:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d103      	bne.n	8004f32 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8004f2a:	7e7a      	ldrb	r2, [r7, #25]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8004f32:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d107      	bne.n	8004f4a <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f9a4 	bl	800528c <VL53L0X_SetSequenceStepEnable>
 8004f44:	4603      	mov	r3, r0
 8004f46:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8004f4a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d107      	bne.n	8004f62 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004f52:	2200      	movs	r2, #0
 8004f54:	2102      	movs	r1, #2
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f998 	bl	800528c <VL53L0X_SetSequenceStepEnable>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8004f62:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d103      	bne.n	8004f72 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2203      	movs	r2, #3
 8004f6e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004f72:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d109      	bne.n	8004f8e <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004f7a:	f107 0313 	add.w	r3, r7, #19
 8004f7e:	461a      	mov	r2, r3
 8004f80:	2100      	movs	r1, #0
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 f96a 	bl	800525c <VL53L0X_GetVcselPulsePeriod>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004f8e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d103      	bne.n	8004f9e <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004f96:	7cfa      	ldrb	r2, [r7, #19]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004f9e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d109      	bne.n	8004fba <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004fa6:	f107 0313 	add.w	r3, r7, #19
 8004faa:	461a      	mov	r2, r3
 8004fac:	2101      	movs	r1, #1
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f954 	bl	800525c <VL53L0X_GetVcselPulsePeriod>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004fba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d103      	bne.n	8004fca <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004fc2:	7cfa      	ldrb	r2, [r7, #19]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8004fca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d109      	bne.n	8004fe6 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8004fd2:	f107 030c 	add.w	r3, r7, #12
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	2103      	movs	r1, #3
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f002 fec0 	bl	8007d60 <get_sequence_step_timeout>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004fe6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d103      	bne.n	8004ff6 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8004ff6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8004ffe:	f107 030c 	add.w	r3, r7, #12
 8005002:	461a      	mov	r2, r3
 8005004:	2104      	movs	r1, #4
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f002 feaa 	bl	8007d60 <get_sequence_step_timeout>
 800500c:	4603      	mov	r3, r0
 800500e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005012:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005016:	2b00      	cmp	r3, #0
 8005018:	d103      	bne.n	8005022 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005022:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8005026:	4618      	mov	r0, r3
 8005028:	3770      	adds	r7, #112	; 0x70
 800502a:	46bd      	mov	sp, r7
 800502c:	bdb0      	pop	{r4, r5, r7, pc}
 800502e:	bf00      	nop
 8005030:	20000274 	.word	0x20000274

08005034 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800503e:	2300      	movs	r3, #0
 8005040:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	4619      	mov	r1, r3
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f8b0 	bl	80051ac <VL53L0X_GetDeviceMode>
 800504c:	4603      	mov	r3, r0
 800504e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d107      	bne.n	8005068 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	3308      	adds	r3, #8
 800505c:	4619      	mov	r1, r3
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fa94 	bl	800558c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8005064:	4603      	mov	r3, r0
 8005066:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8005068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d102      	bne.n	8005076 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2200      	movs	r2, #0
 8005074:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8005076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d107      	bne.n	800508e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	3310      	adds	r3, #16
 8005082:	4619      	mov	r1, r3
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 faca 	bl	800561e <VL53L0X_GetXTalkCompensationRateMegaCps>
 800508a:	4603      	mov	r3, r0
 800508c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800508e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d107      	bne.n	80050a6 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	3314      	adds	r3, #20
 800509a:	4619      	mov	r1, r3
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7ff fccf 	bl	8004a40 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80050a2:	4603      	mov	r3, r0
 80050a4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80050a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d134      	bne.n	8005118 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80050ae:	2300      	movs	r3, #0
 80050b0:	60bb      	str	r3, [r7, #8]
 80050b2:	e02a      	b.n	800510a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80050b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d12a      	bne.n	8005112 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	b299      	uxth	r1, r3
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	3308      	adds	r3, #8
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	4413      	add	r3, r2
 80050ca:	3304      	adds	r3, #4
 80050cc:	461a      	mov	r2, r3
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 fbea 	bl	80058a8 <VL53L0X_GetLimitCheckValue>
 80050d4:	4603      	mov	r3, r0
 80050d6:	461a      	mov	r2, r3
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
 80050da:	4313      	orrs	r3, r2
 80050dc:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80050de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d117      	bne.n	8005116 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	b299      	uxth	r1, r3
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	3318      	adds	r3, #24
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	4413      	add	r3, r2
 80050f2:	461a      	mov	r2, r3
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fb51 	bl	800579c <VL53L0X_GetLimitCheckEnable>
 80050fa:	4603      	mov	r3, r0
 80050fc:	461a      	mov	r2, r3
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
 8005100:	4313      	orrs	r3, r2
 8005102:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	3301      	adds	r3, #1
 8005108:	60bb      	str	r3, [r7, #8]
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b05      	cmp	r3, #5
 800510e:	ddd1      	ble.n	80050b4 <VL53L0X_GetDeviceParameters+0x80>
 8005110:	e002      	b.n	8005118 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8005112:	bf00      	nop
 8005114:	e000      	b.n	8005118 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8005116:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d107      	bne.n	8005130 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	333c      	adds	r3, #60	; 0x3c
 8005124:	4619      	mov	r1, r3
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fc4c 	bl	80059c4 <VL53L0X_GetWrapAroundCheckEnable>
 800512c:	4603      	mov	r3, r0
 800512e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8005130:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d107      	bne.n	8005148 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	3304      	adds	r3, #4
 800513c:	4619      	mov	r1, r3
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f879 	bl	8005236 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8005144:	4603      	mov	r3, r0
 8005146:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005148:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	460b      	mov	r3, r1
 800515e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005160:	2300      	movs	r3, #0
 8005162:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8005164:	78fb      	ldrb	r3, [r7, #3]
 8005166:	2b15      	cmp	r3, #21
 8005168:	bf8c      	ite	hi
 800516a:	2201      	movhi	r2, #1
 800516c:	2200      	movls	r2, #0
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	2a00      	cmp	r2, #0
 8005172:	d10e      	bne.n	8005192 <VL53L0X_SetDeviceMode+0x3e>
 8005174:	2201      	movs	r2, #1
 8005176:	409a      	lsls	r2, r3
 8005178:	4b0b      	ldr	r3, [pc, #44]	; (80051a8 <VL53L0X_SetDeviceMode+0x54>)
 800517a:	4013      	ands	r3, r2
 800517c:	2b00      	cmp	r3, #0
 800517e:	bf14      	ite	ne
 8005180:	2301      	movne	r3, #1
 8005182:	2300      	moveq	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	78fa      	ldrb	r2, [r7, #3]
 800518e:	741a      	strb	r2, [r3, #16]
		break;
 8005190:	e001      	b.n	8005196 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005192:	23f8      	movs	r3, #248	; 0xf8
 8005194:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005196:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	0030000b 	.word	0x0030000b

080051ac <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051b6:	2300      	movs	r3, #0
 80051b8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	7c1a      	ldrb	r2, [r3, #16]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80051c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b084      	sub	sp, #16
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80051dc:	2300      	movs	r3, #0
 80051de:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	2109      	movs	r1, #9
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7fd fd4f 	bl	8002c88 <VL53L0X_RdByte>
 80051ea:	4603      	mov	r3, r0
 80051ec:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80051ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005204:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800521a:	2300      	movs	r3, #0
 800521c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800521e:	6839      	ldr	r1, [r7, #0]
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f002 ffa7 	bl	8008174 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8005226:	4603      	mov	r3, r0
 8005228:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800522a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b084      	sub	sp, #16
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005240:	2300      	movs	r3, #0
 8005242:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8005244:	6839      	ldr	r1, [r7, #0]
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f003 f874 	bl	8008334 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800524c:	4603      	mov	r3, r0
 800524e:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8005250:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	460b      	mov	r3, r1
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800526a:	2300      	movs	r3, #0
 800526c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800526e:	7afb      	ldrb	r3, [r7, #11]
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	4619      	mov	r1, r3
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f002 ff46 	bl	8008106 <VL53L0X_get_vcsel_pulse_period>
 800527a:	4603      	mov	r3, r0
 800527c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800527e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005282:	4618      	mov	r0, r3
 8005284:	3718      	adds	r7, #24
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	460b      	mov	r3, r1
 8005296:	70fb      	strb	r3, [r7, #3]
 8005298:	4613      	mov	r3, r2
 800529a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800529c:	2300      	movs	r3, #0
 800529e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80052a0:	2300      	movs	r3, #0
 80052a2:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80052a8:	f107 030f 	add.w	r3, r7, #15
 80052ac:	461a      	mov	r2, r3
 80052ae:	2101      	movs	r1, #1
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7fd fce9 	bl	8002c88 <VL53L0X_RdByte>
 80052b6:	4603      	mov	r3, r0
 80052b8:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
 80052bc:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80052be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d15a      	bne.n	800537c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80052c6:	78bb      	ldrb	r3, [r7, #2]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d12b      	bne.n	8005324 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	2b04      	cmp	r3, #4
 80052d0:	d825      	bhi.n	800531e <VL53L0X_SetSequenceStepEnable+0x92>
 80052d2:	a201      	add	r2, pc, #4	; (adr r2, 80052d8 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80052d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052d8:	080052ed 	.word	0x080052ed
 80052dc:	080052f7 	.word	0x080052f7
 80052e0:	08005301 	.word	0x08005301
 80052e4:	0800530b 	.word	0x0800530b
 80052e8:	08005315 	.word	0x08005315
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80052ec:	7dbb      	ldrb	r3, [r7, #22]
 80052ee:	f043 0310 	orr.w	r3, r3, #16
 80052f2:	75bb      	strb	r3, [r7, #22]
				break;
 80052f4:	e043      	b.n	800537e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80052f6:	7dbb      	ldrb	r3, [r7, #22]
 80052f8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80052fc:	75bb      	strb	r3, [r7, #22]
				break;
 80052fe:	e03e      	b.n	800537e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8005300:	7dbb      	ldrb	r3, [r7, #22]
 8005302:	f043 0304 	orr.w	r3, r3, #4
 8005306:	75bb      	strb	r3, [r7, #22]
				break;
 8005308:	e039      	b.n	800537e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800530a:	7dbb      	ldrb	r3, [r7, #22]
 800530c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005310:	75bb      	strb	r3, [r7, #22]
				break;
 8005312:	e034      	b.n	800537e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8005314:	7dbb      	ldrb	r3, [r7, #22]
 8005316:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800531a:	75bb      	strb	r3, [r7, #22]
				break;
 800531c:	e02f      	b.n	800537e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800531e:	23fc      	movs	r3, #252	; 0xfc
 8005320:	75fb      	strb	r3, [r7, #23]
 8005322:	e02c      	b.n	800537e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	2b04      	cmp	r3, #4
 8005328:	d825      	bhi.n	8005376 <VL53L0X_SetSequenceStepEnable+0xea>
 800532a:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	08005345 	.word	0x08005345
 8005334:	0800534f 	.word	0x0800534f
 8005338:	08005359 	.word	0x08005359
 800533c:	08005363 	.word	0x08005363
 8005340:	0800536d 	.word	0x0800536d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8005344:	7dbb      	ldrb	r3, [r7, #22]
 8005346:	f023 0310 	bic.w	r3, r3, #16
 800534a:	75bb      	strb	r3, [r7, #22]
				break;
 800534c:	e017      	b.n	800537e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800534e:	7dbb      	ldrb	r3, [r7, #22]
 8005350:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8005354:	75bb      	strb	r3, [r7, #22]
				break;
 8005356:	e012      	b.n	800537e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8005358:	7dbb      	ldrb	r3, [r7, #22]
 800535a:	f023 0304 	bic.w	r3, r3, #4
 800535e:	75bb      	strb	r3, [r7, #22]
				break;
 8005360:	e00d      	b.n	800537e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8005362:	7dbb      	ldrb	r3, [r7, #22]
 8005364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005368:	75bb      	strb	r3, [r7, #22]
				break;
 800536a:	e008      	b.n	800537e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800536c:	7dbb      	ldrb	r3, [r7, #22]
 800536e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005372:	75bb      	strb	r3, [r7, #22]
				break;
 8005374:	e003      	b.n	800537e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005376:	23fc      	movs	r3, #252	; 0xfc
 8005378:	75fb      	strb	r3, [r7, #23]
 800537a:	e000      	b.n	800537e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800537c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800537e:	7bfb      	ldrb	r3, [r7, #15]
 8005380:	7dba      	ldrb	r2, [r7, #22]
 8005382:	429a      	cmp	r2, r3
 8005384:	d01e      	beq.n	80053c4 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8005386:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d107      	bne.n	800539e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800538e:	7dbb      	ldrb	r3, [r7, #22]
 8005390:	461a      	mov	r2, r3
 8005392:	2101      	movs	r1, #1
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7fd fbc3 	bl	8002b20 <VL53L0X_WrByte>
 800539a:	4603      	mov	r3, r0
 800539c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800539e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d103      	bne.n	80053ae <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	7dba      	ldrb	r2, [r7, #22]
 80053aa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80053ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d106      	bne.n	80053c4 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80053bc:	6939      	ldr	r1, [r7, #16]
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7ff ff26 	bl	8005210 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80053c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	607b      	str	r3, [r7, #4]
 80053da:	460b      	mov	r3, r1
 80053dc:	72fb      	strb	r3, [r7, #11]
 80053de:	4613      	mov	r3, r2
 80053e0:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80053e2:	2300      	movs	r3, #0
 80053e4:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80053ec:	7afb      	ldrb	r3, [r7, #11]
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d836      	bhi.n	8005460 <sequence_step_enabled+0x90>
 80053f2:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <sequence_step_enabled+0x28>)
 80053f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f8:	0800540d 	.word	0x0800540d
 80053fc:	0800541f 	.word	0x0800541f
 8005400:	08005431 	.word	0x08005431
 8005404:	08005443 	.word	0x08005443
 8005408:	08005455 	.word	0x08005455
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800540c:	7abb      	ldrb	r3, [r7, #10]
 800540e:	111b      	asrs	r3, r3, #4
 8005410:	b2db      	uxtb	r3, r3
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	b2da      	uxtb	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	701a      	strb	r2, [r3, #0]
		break;
 800541c:	e022      	b.n	8005464 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800541e:	7abb      	ldrb	r3, [r7, #10]
 8005420:	10db      	asrs	r3, r3, #3
 8005422:	b2db      	uxtb	r3, r3
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	b2da      	uxtb	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	701a      	strb	r2, [r3, #0]
		break;
 800542e:	e019      	b.n	8005464 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8005430:	7abb      	ldrb	r3, [r7, #10]
 8005432:	109b      	asrs	r3, r3, #2
 8005434:	b2db      	uxtb	r3, r3
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	b2da      	uxtb	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	701a      	strb	r2, [r3, #0]
		break;
 8005440:	e010      	b.n	8005464 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8005442:	7abb      	ldrb	r3, [r7, #10]
 8005444:	119b      	asrs	r3, r3, #6
 8005446:	b2db      	uxtb	r3, r3
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	b2da      	uxtb	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	701a      	strb	r2, [r3, #0]
		break;
 8005452:	e007      	b.n	8005464 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8005454:	7abb      	ldrb	r3, [r7, #10]
 8005456:	09db      	lsrs	r3, r3, #7
 8005458:	b2da      	uxtb	r2, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	701a      	strb	r2, [r3, #0]
		break;
 800545e:	e001      	b.n	8005464 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005460:	23fc      	movs	r3, #252	; 0xfc
 8005462:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005464:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005468:	4618      	mov	r0, r3
 800546a:	371c      	adds	r7, #28
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800547e:	2300      	movs	r3, #0
 8005480:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8005482:	2300      	movs	r3, #0
 8005484:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005486:	f107 030e 	add.w	r3, r7, #14
 800548a:	461a      	mov	r2, r3
 800548c:	2101      	movs	r1, #1
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fd fbfa 	bl	8002c88 <VL53L0X_RdByte>
 8005494:	4603      	mov	r3, r0
 8005496:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8005498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d107      	bne.n	80054b0 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80054a0:	7bba      	ldrb	r2, [r7, #14]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2100      	movs	r1, #0
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7ff ff92 	bl	80053d0 <sequence_step_enabled>
 80054ac:	4603      	mov	r3, r0
 80054ae:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80054b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d108      	bne.n	80054ca <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80054b8:	7bba      	ldrb	r2, [r7, #14]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	3302      	adds	r3, #2
 80054be:	2101      	movs	r1, #1
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f7ff ff85 	bl	80053d0 <sequence_step_enabled>
 80054c6:	4603      	mov	r3, r0
 80054c8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80054ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d108      	bne.n	80054e4 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80054d2:	7bba      	ldrb	r2, [r7, #14]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	3301      	adds	r3, #1
 80054d8:	2102      	movs	r1, #2
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7ff ff78 	bl	80053d0 <sequence_step_enabled>
 80054e0:	4603      	mov	r3, r0
 80054e2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80054e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d108      	bne.n	80054fe <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80054ec:	7bba      	ldrb	r2, [r7, #14]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	3303      	adds	r3, #3
 80054f2:	2103      	movs	r1, #3
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f7ff ff6b 	bl	80053d0 <sequence_step_enabled>
 80054fa:	4603      	mov	r3, r0
 80054fc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80054fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d108      	bne.n	8005518 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8005506:	7bba      	ldrb	r2, [r7, #14]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	3304      	adds	r3, #4
 800550c:	2104      	movs	r1, #4
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7ff ff5e 	bl	80053d0 <sequence_step_enabled>
 8005514:	4603      	mov	r3, r0
 8005516:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005518:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <VL53L0X_SetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800552e:	2300      	movs	r3, #0
 8005530:	75fb      	strb	r3, [r7, #23]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8005532:	f107 030e 	add.w	r3, r7, #14
 8005536:	461a      	mov	r2, r3
 8005538:	21f8      	movs	r1, #248	; 0xf8
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7fd fbce 	bl	8002cdc <VL53L0X_RdWord>
 8005540:	4603      	mov	r3, r0
 8005542:	75fb      	strb	r3, [r7, #23]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8005544:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d112      	bne.n	8005572 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x4e>
		if (osc_calibrate_val != 0) {
 800554c:	89fb      	ldrh	r3, [r7, #14]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d006      	beq.n	8005560 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x3c>
			IMPeriodMilliSeconds =
				InterMeasurementPeriodMilliSeconds
					* osc_calibrate_val;
 8005552:	89fb      	ldrh	r3, [r7, #14]
 8005554:	461a      	mov	r2, r3
			IMPeriodMilliSeconds =
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	fb02 f303 	mul.w	r3, r2, r3
 800555c:	613b      	str	r3, [r7, #16]
 800555e:	e001      	b.n	8005564 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x40>
		} else {
			IMPeriodMilliSeconds =
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	613b      	str	r3, [r7, #16]
				InterMeasurementPeriodMilliSeconds;
		}
		Status = VL53L0X_WrDWord(Dev,
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	2104      	movs	r1, #4
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7fd fb27 	bl	8002bbc <VL53L0X_WrDWord>
 800556e:	4603      	mov	r3, r0
 8005570:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005572:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d102      	bne.n	8005580 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x5c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			InterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005580:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005596:	2300      	movs	r3, #0
 8005598:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800559a:	f107 030c 	add.w	r3, r7, #12
 800559e:	461a      	mov	r2, r3
 80055a0:	21f8      	movs	r1, #248	; 0xf8
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7fd fb9a 	bl	8002cdc <VL53L0X_RdWord>
 80055a8:	4603      	mov	r3, r0
 80055aa:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80055ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d108      	bne.n	80055c6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80055b4:	f107 0308 	add.w	r3, r7, #8
 80055b8:	461a      	mov	r2, r3
 80055ba:	2104      	movs	r1, #4
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7fd fbc5 	bl	8002d4c <VL53L0X_RdDWord>
 80055c2:	4603      	mov	r3, r0
 80055c4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80055c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10c      	bne.n	80055e8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80055ce:	89bb      	ldrh	r3, [r7, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	89ba      	ldrh	r2, [r7, #12]
 80055d8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80055e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80055fe:	2300      	movs	r3, #0
 8005600:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	7f1b      	ldrb	r3, [r3, #28]
 8005606:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	7bba      	ldrb	r2, [r7, #14]
 800560c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800560e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b086      	sub	sp, #24
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005628:	2300      	movs	r3, #0
 800562a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800562c:	f107 030e 	add.w	r3, r7, #14
 8005630:	461a      	mov	r2, r3
 8005632:	2120      	movs	r1, #32
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7fd fb51 	bl	8002cdc <VL53L0X_RdWord>
 800563a:	4603      	mov	r3, r0
 800563c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800563e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d118      	bne.n	8005678 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8005646:	89fb      	ldrh	r3, [r7, #14]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d109      	bne.n	8005660 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	771a      	strb	r2, [r3, #28]
 800565e:	e00b      	b.n	8005678 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8005660:	89fb      	ldrh	r3, [r7, #14]
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005678:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	807b      	strh	r3, [r7, #2]
 8005690:	4613      	mov	r3, r2
 8005692:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005694:	2300      	movs	r3, #0
 8005696:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8005698:	2300      	movs	r3, #0
 800569a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800569c:	2300      	movs	r3, #0
 800569e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80056a0:	2300      	movs	r3, #0
 80056a2:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80056a4:	887b      	ldrh	r3, [r7, #2]
 80056a6:	2b05      	cmp	r3, #5
 80056a8:	d902      	bls.n	80056b0 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80056aa:	23fc      	movs	r3, #252	; 0xfc
 80056ac:	75fb      	strb	r3, [r7, #23]
 80056ae:	e05b      	b.n	8005768 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80056b0:	787b      	ldrb	r3, [r7, #1]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d106      	bne.n	80056c4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80056b6:	2300      	movs	r3, #0
 80056b8:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80056ba:	2300      	movs	r3, #0
 80056bc:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80056be:	2301      	movs	r3, #1
 80056c0:	73bb      	strb	r3, [r7, #14]
 80056c2:	e00a      	b.n	80056da <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80056c4:	887b      	ldrh	r3, [r7, #2]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	330c      	adds	r3, #12
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	4413      	add	r3, r2
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80056d6:	2301      	movs	r3, #1
 80056d8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80056da:	887b      	ldrh	r3, [r7, #2]
 80056dc:	2b05      	cmp	r3, #5
 80056de:	d841      	bhi.n	8005764 <VL53L0X_SetLimitCheckEnable+0xe0>
 80056e0:	a201      	add	r2, pc, #4	; (adr r2, 80056e8 <VL53L0X_SetLimitCheckEnable+0x64>)
 80056e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e6:	bf00      	nop
 80056e8:	08005701 	.word	0x08005701
 80056ec:	0800570b 	.word	0x0800570b
 80056f0:	08005721 	.word	0x08005721
 80056f4:	0800572b 	.word	0x0800572b
 80056f8:	08005735 	.word	0x08005735
 80056fc:	0800574d 	.word	0x0800574d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	7bfa      	ldrb	r2, [r7, #15]
 8005704:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8005708:	e02e      	b.n	8005768 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800570e:	b29b      	uxth	r3, r3
 8005710:	461a      	mov	r2, r3
 8005712:	2144      	movs	r1, #68	; 0x44
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7fd fa27 	bl	8002b68 <VL53L0X_WrWord>
 800571a:	4603      	mov	r3, r0
 800571c:	75fb      	strb	r3, [r7, #23]

			break;
 800571e:	e023      	b.n	8005768 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	7bfa      	ldrb	r2, [r7, #15]
 8005724:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8005728:	e01e      	b.n	8005768 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	7bfa      	ldrb	r2, [r7, #15]
 800572e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8005732:	e019      	b.n	8005768 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8005734:	7bbb      	ldrb	r3, [r7, #14]
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800573a:	7b7b      	ldrb	r3, [r7, #13]
 800573c:	22fe      	movs	r2, #254	; 0xfe
 800573e:	2160      	movs	r1, #96	; 0x60
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7fd fa6d 	bl	8002c20 <VL53L0X_UpdateByte>
 8005746:	4603      	mov	r3, r0
 8005748:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800574a:	e00d      	b.n	8005768 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800574c:	7bbb      	ldrb	r3, [r7, #14]
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8005752:	7b7b      	ldrb	r3, [r7, #13]
 8005754:	22ef      	movs	r2, #239	; 0xef
 8005756:	2160      	movs	r1, #96	; 0x60
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7fd fa61 	bl	8002c20 <VL53L0X_UpdateByte>
 800575e:	4603      	mov	r3, r0
 8005760:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8005762:	e001      	b.n	8005768 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005764:	23fc      	movs	r3, #252	; 0xfc
 8005766:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005768:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d10f      	bne.n	8005790 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8005770:	787b      	ldrb	r3, [r7, #1]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005776:	887b      	ldrh	r3, [r7, #2]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	4413      	add	r3, r2
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005782:	e005      	b.n	8005790 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8005784:	887b      	ldrh	r3, [r7, #2]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	4413      	add	r3, r2
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005790:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3718      	adds	r7, #24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	460b      	mov	r3, r1
 80057a6:	607a      	str	r2, [r7, #4]
 80057a8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057aa:	2300      	movs	r3, #0
 80057ac:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80057ae:	897b      	ldrh	r3, [r7, #10]
 80057b0:	2b05      	cmp	r3, #5
 80057b2:	d905      	bls.n	80057c0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80057b4:	23fc      	movs	r3, #252	; 0xfc
 80057b6:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	e008      	b.n	80057d2 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80057c0:	897b      	ldrh	r3, [r7, #10]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	4413      	add	r3, r2
 80057c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057ca:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	7dba      	ldrb	r2, [r7, #22]
 80057d0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80057d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
	...

080057e4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b086      	sub	sp, #24
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	460b      	mov	r3, r1
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057f2:	2300      	movs	r3, #0
 80057f4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80057f6:	897b      	ldrh	r3, [r7, #10]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	4413      	add	r3, r2
 80057fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005800:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8005802:	7dbb      	ldrb	r3, [r7, #22]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d107      	bne.n	8005818 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005808:	897b      	ldrh	r3, [r7, #10]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	330c      	adds	r3, #12
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	605a      	str	r2, [r3, #4]
 8005816:	e040      	b.n	800589a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8005818:	897b      	ldrh	r3, [r7, #10]
 800581a:	2b05      	cmp	r3, #5
 800581c:	d830      	bhi.n	8005880 <VL53L0X_SetLimitCheckValue+0x9c>
 800581e:	a201      	add	r2, pc, #4	; (adr r2, 8005824 <VL53L0X_SetLimitCheckValue+0x40>)
 8005820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005824:	0800583d 	.word	0x0800583d
 8005828:	08005845 	.word	0x08005845
 800582c:	0800585b 	.word	0x0800585b
 8005830:	08005863 	.word	0x08005863
 8005834:	0800586b 	.word	0x0800586b
 8005838:	0800586b 	.word	0x0800586b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8005842:	e01f      	b.n	8005884 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8005848:	b29b      	uxth	r3, r3
 800584a:	461a      	mov	r2, r3
 800584c:	2144      	movs	r1, #68	; 0x44
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f7fd f98a 	bl	8002b68 <VL53L0X_WrWord>
 8005854:	4603      	mov	r3, r0
 8005856:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8005858:	e014      	b.n	8005884 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8005860:	e010      	b.n	8005884 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8005868:	e00c      	b.n	8005884 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800586e:	b29b      	uxth	r3, r3
 8005870:	461a      	mov	r2, r3
 8005872:	2164      	movs	r1, #100	; 0x64
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f7fd f977 	bl	8002b68 <VL53L0X_WrWord>
 800587a:	4603      	mov	r3, r0
 800587c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800587e:	e001      	b.n	8005884 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005880:	23fc      	movs	r3, #252	; 0xfc
 8005882:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8005884:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d106      	bne.n	800589a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800588c:	897b      	ldrh	r3, [r7, #10]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	330c      	adds	r3, #12
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800589a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3718      	adds	r7, #24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop

080058a8 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	460b      	mov	r3, r1
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80058b6:	2300      	movs	r3, #0
 80058b8:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80058be:	897b      	ldrh	r3, [r7, #10]
 80058c0:	2b05      	cmp	r3, #5
 80058c2:	d847      	bhi.n	8005954 <VL53L0X_GetLimitCheckValue+0xac>
 80058c4:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <VL53L0X_GetLimitCheckValue+0x24>)
 80058c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ca:	bf00      	nop
 80058cc:	080058e5 	.word	0x080058e5
 80058d0:	080058f1 	.word	0x080058f1
 80058d4:	08005917 	.word	0x08005917
 80058d8:	08005923 	.word	0x08005923
 80058dc:	0800592f 	.word	0x0800592f
 80058e0:	0800592f 	.word	0x0800592f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80058ea:	2300      	movs	r3, #0
 80058ec:	77bb      	strb	r3, [r7, #30]
		break;
 80058ee:	e033      	b.n	8005958 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80058f0:	f107 0316 	add.w	r3, r7, #22
 80058f4:	461a      	mov	r2, r3
 80058f6:	2144      	movs	r1, #68	; 0x44
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f7fd f9ef 	bl	8002cdc <VL53L0X_RdWord>
 80058fe:	4603      	mov	r3, r0
 8005900:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005902:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d102      	bne.n	8005910 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800590a:	8afb      	ldrh	r3, [r7, #22]
 800590c:	025b      	lsls	r3, r3, #9
 800590e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8005910:	2301      	movs	r3, #1
 8005912:	77bb      	strb	r3, [r7, #30]
		break;
 8005914:	e020      	b.n	8005958 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800591a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800591c:	2300      	movs	r3, #0
 800591e:	77bb      	strb	r3, [r7, #30]
		break;
 8005920:	e01a      	b.n	8005958 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005926:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	77bb      	strb	r3, [r7, #30]
		break;
 800592c:	e014      	b.n	8005958 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800592e:	f107 0316 	add.w	r3, r7, #22
 8005932:	461a      	mov	r2, r3
 8005934:	2164      	movs	r1, #100	; 0x64
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f7fd f9d0 	bl	8002cdc <VL53L0X_RdWord>
 800593c:	4603      	mov	r3, r0
 800593e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8005940:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d102      	bne.n	800594e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8005948:	8afb      	ldrh	r3, [r7, #22]
 800594a:	025b      	lsls	r3, r3, #9
 800594c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800594e:	2300      	movs	r3, #0
 8005950:	77bb      	strb	r3, [r7, #30]
		break;
 8005952:	e001      	b.n	8005958 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005954:	23fc      	movs	r3, #252	; 0xfc
 8005956:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005958:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d12a      	bne.n	80059b6 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8005960:	7fbb      	ldrb	r3, [r7, #30]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d124      	bne.n	80059b0 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d110      	bne.n	800598e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800596c:	897b      	ldrh	r3, [r7, #10]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	330c      	adds	r3, #12
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005980:	897b      	ldrh	r3, [r7, #10]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	4413      	add	r3, r2
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800598c:	e013      	b.n	80059b6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8005994:	897b      	ldrh	r3, [r7, #10]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	330c      	adds	r3, #12
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80059a2:	897b      	ldrh	r3, [r7, #10]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4413      	add	r3, r2
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80059ae:	e002      	b.n	80059b6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80059b6:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3720      	adds	r7, #32
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop

080059c4 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059ce:	2300      	movs	r3, #0
 80059d0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80059d2:	f107 030e 	add.w	r3, r7, #14
 80059d6:	461a      	mov	r2, r3
 80059d8:	2101      	movs	r1, #1
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fd f954 	bl	8002c88 <VL53L0X_RdByte>
 80059e0:	4603      	mov	r3, r0
 80059e2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80059e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10e      	bne.n	8005a0a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80059ec:	7bba      	ldrb	r2, [r7, #14]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80059f4:	7bbb      	ldrb	r3, [r7, #14]
 80059f6:	b25b      	sxtb	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	da03      	bge.n	8005a04 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2201      	movs	r2, #1
 8005a00:	701a      	strb	r2, [r3, #0]
 8005a02:	e002      	b.n	8005a0a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	2200      	movs	r2, #0
 8005a08:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8005a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d104      	bne.n	8005a1c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781a      	ldrb	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a30:	2300      	movs	r3, #0
 8005a32:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005a34:	f107 030e 	add.w	r3, r7, #14
 8005a38:	4619      	mov	r1, r3
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7ff fbb6 	bl	80051ac <VL53L0X_GetDeviceMode>
 8005a40:	4603      	mov	r3, r0
 8005a42:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d107      	bne.n	8005a5c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005a4c:	7bbb      	ldrb	r3, [r7, #14]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d104      	bne.n	8005a5c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f898 	bl	8005b88 <VL53L0X_StartMeasurement>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d104      	bne.n	8005a6e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f001 fb3f 	bl	80070e8 <VL53L0X_measurement_poll_for_completion>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d106      	bne.n	8005a84 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8005a76:	7bbb      	ldrb	r3, [r7, #14]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d103      	bne.n	8005a84 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2203      	movs	r2, #3
 8005a80:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8005a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	68b9      	ldr	r1, [r7, #8]
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f001 fae1 	bl	800706e <VL53L0X_perform_ref_calibration>
 8005aac:	4603      	mov	r3, r0
 8005aae:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8005ab0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8005ad2:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8005ad4:	7dbb      	ldrb	r3, [r7, #22]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d005      	beq.n	8005ae6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8005ada:	7dbb      	ldrb	r3, [r7, #22]
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d002      	beq.n	8005ae6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8005ae0:	7dbb      	ldrb	r3, [r7, #22]
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d147      	bne.n	8005b76 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8005ae6:	f107 030c 	add.w	r3, r7, #12
 8005aea:	f107 0210 	add.w	r2, r7, #16
 8005aee:	2101      	movs	r1, #1
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 fbc3 	bl	800627c <VL53L0X_GetInterruptThresholds>
 8005af6:	4603      	mov	r3, r0
 8005af8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005b00:	d803      	bhi.n	8005b0a <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8005b02:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8005b04:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8005b08:	d935      	bls.n	8005b76 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8005b0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d131      	bne.n	8005b76 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8005b12:	78fb      	ldrb	r3, [r7, #3]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d006      	beq.n	8005b26 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8005b18:	491a      	ldr	r1, [pc, #104]	; (8005b84 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f002 fcbc 	bl	8008498 <VL53L0X_load_tuning_settings>
 8005b20:	4603      	mov	r3, r0
 8005b22:	75fb      	strb	r3, [r7, #23]
 8005b24:	e027      	b.n	8005b76 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8005b26:	2204      	movs	r2, #4
 8005b28:	21ff      	movs	r1, #255	; 0xff
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7fc fff8 	bl	8002b20 <VL53L0X_WrByte>
 8005b30:	4603      	mov	r3, r0
 8005b32:	461a      	mov	r2, r3
 8005b34:	7dfb      	ldrb	r3, [r7, #23]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	2170      	movs	r1, #112	; 0x70
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7fc ffee 	bl	8002b20 <VL53L0X_WrByte>
 8005b44:	4603      	mov	r3, r0
 8005b46:	461a      	mov	r2, r3
 8005b48:	7dfb      	ldrb	r3, [r7, #23]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005b4e:	2200      	movs	r2, #0
 8005b50:	21ff      	movs	r1, #255	; 0xff
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7fc ffe4 	bl	8002b20 <VL53L0X_WrByte>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	7dfb      	ldrb	r3, [r7, #23]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005b62:	2200      	movs	r2, #0
 8005b64:	2180      	movs	r1, #128	; 0x80
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7fc ffda 	bl	8002b20 <VL53L0X_WrByte>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	461a      	mov	r2, r3
 8005b70:	7dfb      	ldrb	r3, [r7, #23]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8005b76:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3718      	adds	r7, #24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	20000368 	.word	0x20000368

08005b88 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005b90:	2300      	movs	r3, #0
 8005b92:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8005b94:	2301      	movs	r3, #1
 8005b96:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005b98:	f107 030e 	add.w	r3, r7, #14
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7ff fb04 	bl	80051ac <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	2180      	movs	r1, #128	; 0x80
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7fc ffb9 	bl	8002b20 <VL53L0X_WrByte>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	21ff      	movs	r1, #255	; 0xff
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7fc ffb2 	bl	8002b20 <VL53L0X_WrByte>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f7fc ffab 	bl	8002b20 <VL53L0X_WrByte>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	2191      	movs	r1, #145	; 0x91
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7fc ffa1 	bl	8002b20 <VL53L0X_WrByte>
 8005bde:	4603      	mov	r3, r0
 8005be0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005be2:	2201      	movs	r2, #1
 8005be4:	2100      	movs	r1, #0
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7fc ff9a 	bl	8002b20 <VL53L0X_WrByte>
 8005bec:	4603      	mov	r3, r0
 8005bee:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	21ff      	movs	r1, #255	; 0xff
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f7fc ff93 	bl	8002b20 <VL53L0X_WrByte>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005bfe:	2200      	movs	r2, #0
 8005c00:	2180      	movs	r1, #128	; 0x80
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7fc ff8c 	bl	8002b20 <VL53L0X_WrByte>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8005c0c:	7bbb      	ldrb	r3, [r7, #14]
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	d054      	beq.n	8005cbc <VL53L0X_StartMeasurement+0x134>
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	dc6c      	bgt.n	8005cf0 <VL53L0X_StartMeasurement+0x168>
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <VL53L0X_StartMeasurement+0x98>
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d034      	beq.n	8005c88 <VL53L0X_StartMeasurement+0x100>
 8005c1e:	e067      	b.n	8005cf0 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8005c20:	2201      	movs	r2, #1
 8005c22:	2100      	movs	r1, #0
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f7fc ff7b 	bl	8002b20 <VL53L0X_WrByte>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
 8005c30:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8005c32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d15d      	bne.n	8005cf6 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d008      	beq.n	8005c56 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8005c44:	f107 030d 	add.w	r3, r7, #13
 8005c48:	461a      	mov	r2, r3
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f7fd f81b 	bl	8002c88 <VL53L0X_RdByte>
 8005c52:	4603      	mov	r3, r0
 8005c54:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8005c5c:	7b7a      	ldrb	r2, [r7, #13]
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
 8005c60:	4013      	ands	r3, r2
 8005c62:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005c64:	7bfa      	ldrb	r2, [r7, #15]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d107      	bne.n	8005c7a <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8005c6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d103      	bne.n	8005c7a <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005c78:	d3e1      	bcc.n	8005c3e <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005c80:	d339      	bcc.n	8005cf6 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8005c82:	23f9      	movs	r3, #249	; 0xf9
 8005c84:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8005c86:	e036      	b.n	8005cf6 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005c88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d105      	bne.n	8005c9c <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005c90:	2101      	movs	r1, #1
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff ff12 	bl	8005abc <VL53L0X_CheckAndLoadInterruptSettings>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7fc ff3d 	bl	8002b20 <VL53L0X_WrByte>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8005caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d123      	bne.n	8005cfa <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2204      	movs	r2, #4
 8005cb6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005cba:	e01e      	b.n	8005cfa <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005cbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d105      	bne.n	8005cd0 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7ff fef8 	bl	8005abc <VL53L0X_CheckAndLoadInterruptSettings>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005cd0:	2204      	movs	r2, #4
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7fc ff23 	bl	8002b20 <VL53L0X_WrByte>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8005cde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10b      	bne.n	8005cfe <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2204      	movs	r2, #4
 8005cea:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8005cee:	e006      	b.n	8005cfe <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005cf0:	23f8      	movs	r3, #248	; 0xf8
 8005cf2:	75fb      	strb	r3, [r7, #23]
 8005cf4:	e004      	b.n	8005d00 <VL53L0X_StartMeasurement+0x178>
		break;
 8005cf6:	bf00      	nop
 8005cf8:	e002      	b.n	8005d00 <VL53L0X_StartMeasurement+0x178>
		break;
 8005cfa:	bf00      	nop
 8005cfc:	e000      	b.n	8005d00 <VL53L0X_StartMeasurement+0x178>
		break;
 8005cfe:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8005d00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d16:	2300      	movs	r3, #0
 8005d18:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8005d20:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8005d22:	7bbb      	ldrb	r3, [r7, #14]
 8005d24:	2b04      	cmp	r3, #4
 8005d26:	d112      	bne.n	8005d4e <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8005d28:	f107 0308 	add.w	r3, r7, #8
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fb1a 	bl	8006368 <VL53L0X_GetInterruptMaskStatus>
 8005d34:	4603      	mov	r3, r0
 8005d36:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d103      	bne.n	8005d46 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	2201      	movs	r2, #1
 8005d42:	701a      	strb	r2, [r3, #0]
 8005d44:	e01c      	b.n	8005d80 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	e018      	b.n	8005d80 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8005d4e:	f107 030d 	add.w	r3, r7, #13
 8005d52:	461a      	mov	r2, r3
 8005d54:	2114      	movs	r1, #20
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7fc ff96 	bl	8002c88 <VL53L0X_RdByte>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8005d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10b      	bne.n	8005d80 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8005d68:	7b7b      	ldrb	r3, [r7, #13]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	2201      	movs	r2, #1
 8005d76:	701a      	strb	r2, [r3, #0]
 8005d78:	e002      	b.n	8005d80 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005d8c:	b5b0      	push	{r4, r5, r7, lr}
 8005d8e:	b096      	sub	sp, #88	; 0x58
 8005d90:	af02      	add	r7, sp, #8
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d96:	2300      	movs	r3, #0
 8005d98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005d9c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005da0:	230c      	movs	r3, #12
 8005da2:	2114      	movs	r1, #20
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7fc fe8f 	bl	8002ac8 <VL53L0X_ReadMulti>
 8005daa:	4603      	mov	r3, r0
 8005dac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8005db0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f040 80d1 	bne.w	8005f5c <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8005dc6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	021b      	lsls	r3, r3, #8
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2200      	movs	r2, #0
 8005de0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005de2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	021b      	lsls	r3, r3, #8
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	4413      	add	r3, r2
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	025b      	lsls	r3, r3, #9
 8005df8:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dfe:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8005e00:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	4413      	add	r3, r2
 8005e12:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8005e16:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005e1a:	025b      	lsls	r3, r3, #9
 8005e1c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8005e22:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	021b      	lsls	r3, r3, #8
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	4413      	add	r3, r2
 8005e34:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005e3e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8005e40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8005e4e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8005e56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8005e5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005e5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e60:	d046      	beq.n	8005ef0 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8005e62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005e64:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005e68:	fb02 f303 	mul.w	r3, r2, r3
 8005e6c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005e70:	4a57      	ldr	r2, [pc, #348]	; (8005fd0 <VL53L0X_GetRangingMeasurementData+0x244>)
 8005e72:	fb82 1203 	smull	r1, r2, r2, r3
 8005e76:	1192      	asrs	r2, r2, #6
 8005e78:	17db      	asrs	r3, r3, #31
 8005e7a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8005e7c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	7f1b      	ldrb	r3, [r3, #28]
 8005e8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8005e8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d02c      	beq.n	8005ef0 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8005e96:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e98:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005e9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ea0:	121a      	asrs	r2, r3, #8
					<= 0) {
 8005ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d10d      	bne.n	8005ec4 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8005ea8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d004      	beq.n	8005eba <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8005eb0:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8005eb4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005eb8:	e016      	b.n	8005ee8 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8005eba:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8005ebe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005ec2:	e011      	b.n	8005ee8 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8005ec4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005ec8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005eca:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8005ece:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ed0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8005ed4:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8005ed8:	121b      	asrs	r3, r3, #8
 8005eda:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8005edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ede:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8005ee0:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8005ee4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8005ee8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005eec:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8005ef0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00d      	beq.n	8005f14 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8005ef8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005efc:	089b      	lsrs	r3, r3, #2
 8005efe:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8005f04:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	019b      	lsls	r3, r3, #6
 8005f0c:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	75da      	strb	r2, [r3, #23]
 8005f12:	e006      	b.n	8005f22 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8005f1a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8005f22:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005f26:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8005f2a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8005f2e:	9301      	str	r3, [sp, #4]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	4613      	mov	r3, r2
 8005f36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f002 ff4b 	bl	8008dd4 <VL53L0X_get_pal_range_status>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	461a      	mov	r2, r3
 8005f42:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005f46:	4313      	orrs	r3, r2
 8005f48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8005f4c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d103      	bne.n	8005f5c <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8005f54:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005f5c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d12f      	bne.n	8005fc4 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f107 040c 	add.w	r4, r7, #12
 8005f6a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8005f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005f76:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8005f7e:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8005f84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8005f8c:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8005f92:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8005f98:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8005f9e:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8005fa4:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8005faa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8005fb4:	f107 050c 	add.w	r5, r7, #12
 8005fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005fc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005fc4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3750      	adds	r7, #80	; 0x50
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bdb0      	pop	{r4, r5, r7, pc}
 8005fd0:	10624dd3 	.word	0x10624dd3

08005fd4 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f7ff f8b5 	bl	8005154 <VL53L0X_SetDeviceMode>
 8005fea:	4603      	mov	r3, r0
 8005fec:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d104      	bne.n	8006000 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7ff fd16 	bl	8005a28 <VL53L0X_PerformSingleMeasurement>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d105      	bne.n	8006014 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8006008:	6839      	ldr	r1, [r7, #0]
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7ff febe 	bl	8005d8c <VL53L0X_GetRangingMeasurementData>
 8006010:	4603      	mov	r3, r0
 8006012:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8006014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d105      	bne.n	8006028 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800601c:	2100      	movs	r1, #0
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f962 	bl	80062e8 <VL53L0X_ClearInterruptMask>
 8006024:	4603      	mov	r3, r0
 8006026:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8006028:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	4608      	mov	r0, r1
 800603e:	4611      	mov	r1, r2
 8006040:	461a      	mov	r2, r3
 8006042:	4603      	mov	r3, r0
 8006044:	70fb      	strb	r3, [r7, #3]
 8006046:	460b      	mov	r3, r1
 8006048:	70bb      	strb	r3, [r7, #2]
 800604a:	4613      	mov	r3, r2
 800604c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800604e:	2300      	movs	r3, #0
 8006050:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8006052:	78fb      	ldrb	r3, [r7, #3]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8006058:	23f6      	movs	r3, #246	; 0xf6
 800605a:	73fb      	strb	r3, [r7, #15]
 800605c:	e107      	b.n	800626e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800605e:	78bb      	ldrb	r3, [r7, #2]
 8006060:	2b14      	cmp	r3, #20
 8006062:	d110      	bne.n	8006086 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8006064:	7e3b      	ldrb	r3, [r7, #24]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d102      	bne.n	8006070 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800606a:	2310      	movs	r3, #16
 800606c:	73bb      	strb	r3, [r7, #14]
 800606e:	e001      	b.n	8006074 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8006070:	2301      	movs	r3, #1
 8006072:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8006074:	7bbb      	ldrb	r3, [r7, #14]
 8006076:	461a      	mov	r2, r3
 8006078:	2184      	movs	r1, #132	; 0x84
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fc fd50 	bl	8002b20 <VL53L0X_WrByte>
 8006080:	4603      	mov	r3, r0
 8006082:	73fb      	strb	r3, [r7, #15]
 8006084:	e0f3      	b.n	800626e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8006086:	78bb      	ldrb	r3, [r7, #2]
 8006088:	2b15      	cmp	r3, #21
 800608a:	f040 8097 	bne.w	80061bc <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800608e:	2201      	movs	r2, #1
 8006090:	21ff      	movs	r1, #255	; 0xff
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fc fd44 	bl	8002b20 <VL53L0X_WrByte>
 8006098:	4603      	mov	r3, r0
 800609a:	461a      	mov	r2, r3
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	4313      	orrs	r3, r2
 80060a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80060a2:	2200      	movs	r2, #0
 80060a4:	2100      	movs	r1, #0
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7fc fd3a 	bl	8002b20 <VL53L0X_WrByte>
 80060ac:	4603      	mov	r3, r0
 80060ae:	461a      	mov	r2, r3
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80060b6:	2200      	movs	r2, #0
 80060b8:	21ff      	movs	r1, #255	; 0xff
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7fc fd30 	bl	8002b20 <VL53L0X_WrByte>
 80060c0:	4603      	mov	r3, r0
 80060c2:	461a      	mov	r2, r3
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80060ca:	2201      	movs	r2, #1
 80060cc:	2180      	movs	r1, #128	; 0x80
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7fc fd26 	bl	8002b20 <VL53L0X_WrByte>
 80060d4:	4603      	mov	r3, r0
 80060d6:	461a      	mov	r2, r3
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	4313      	orrs	r3, r2
 80060dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80060de:	2202      	movs	r2, #2
 80060e0:	2185      	movs	r1, #133	; 0x85
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fc fd1c 	bl	8002b20 <VL53L0X_WrByte>
 80060e8:	4603      	mov	r3, r0
 80060ea:	461a      	mov	r2, r3
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80060f2:	2204      	movs	r2, #4
 80060f4:	21ff      	movs	r1, #255	; 0xff
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7fc fd12 	bl	8002b20 <VL53L0X_WrByte>
 80060fc:	4603      	mov	r3, r0
 80060fe:	461a      	mov	r2, r3
 8006100:	7bfb      	ldrb	r3, [r7, #15]
 8006102:	4313      	orrs	r3, r2
 8006104:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8006106:	2200      	movs	r2, #0
 8006108:	21cd      	movs	r1, #205	; 0xcd
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7fc fd08 	bl	8002b20 <VL53L0X_WrByte>
 8006110:	4603      	mov	r3, r0
 8006112:	461a      	mov	r2, r3
 8006114:	7bfb      	ldrb	r3, [r7, #15]
 8006116:	4313      	orrs	r3, r2
 8006118:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800611a:	2211      	movs	r2, #17
 800611c:	21cc      	movs	r1, #204	; 0xcc
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7fc fcfe 	bl	8002b20 <VL53L0X_WrByte>
 8006124:	4603      	mov	r3, r0
 8006126:	461a      	mov	r2, r3
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	4313      	orrs	r3, r2
 800612c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800612e:	2207      	movs	r2, #7
 8006130:	21ff      	movs	r1, #255	; 0xff
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f7fc fcf4 	bl	8002b20 <VL53L0X_WrByte>
 8006138:	4603      	mov	r3, r0
 800613a:	461a      	mov	r2, r3
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	4313      	orrs	r3, r2
 8006140:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8006142:	2200      	movs	r2, #0
 8006144:	21be      	movs	r1, #190	; 0xbe
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f7fc fcea 	bl	8002b20 <VL53L0X_WrByte>
 800614c:	4603      	mov	r3, r0
 800614e:	461a      	mov	r2, r3
 8006150:	7bfb      	ldrb	r3, [r7, #15]
 8006152:	4313      	orrs	r3, r2
 8006154:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8006156:	2206      	movs	r2, #6
 8006158:	21ff      	movs	r1, #255	; 0xff
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7fc fce0 	bl	8002b20 <VL53L0X_WrByte>
 8006160:	4603      	mov	r3, r0
 8006162:	461a      	mov	r2, r3
 8006164:	7bfb      	ldrb	r3, [r7, #15]
 8006166:	4313      	orrs	r3, r2
 8006168:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800616a:	2209      	movs	r2, #9
 800616c:	21cc      	movs	r1, #204	; 0xcc
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7fc fcd6 	bl	8002b20 <VL53L0X_WrByte>
 8006174:	4603      	mov	r3, r0
 8006176:	461a      	mov	r2, r3
 8006178:	7bfb      	ldrb	r3, [r7, #15]
 800617a:	4313      	orrs	r3, r2
 800617c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800617e:	2200      	movs	r2, #0
 8006180:	21ff      	movs	r1, #255	; 0xff
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f7fc fccc 	bl	8002b20 <VL53L0X_WrByte>
 8006188:	4603      	mov	r3, r0
 800618a:	461a      	mov	r2, r3
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	4313      	orrs	r3, r2
 8006190:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006192:	2201      	movs	r2, #1
 8006194:	21ff      	movs	r1, #255	; 0xff
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7fc fcc2 	bl	8002b20 <VL53L0X_WrByte>
 800619c:	4603      	mov	r3, r0
 800619e:	461a      	mov	r2, r3
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80061a6:	2200      	movs	r2, #0
 80061a8:	2100      	movs	r1, #0
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7fc fcb8 	bl	8002b20 <VL53L0X_WrByte>
 80061b0:	4603      	mov	r3, r0
 80061b2:	461a      	mov	r2, r3
 80061b4:	7bfb      	ldrb	r3, [r7, #15]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	73fb      	strb	r3, [r7, #15]
 80061ba:	e058      	b.n	800626e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80061bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d121      	bne.n	8006208 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80061c4:	787b      	ldrb	r3, [r7, #1]
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d81b      	bhi.n	8006202 <VL53L0X_SetGpioConfig+0x1ce>
 80061ca:	a201      	add	r2, pc, #4	; (adr r2, 80061d0 <VL53L0X_SetGpioConfig+0x19c>)
 80061cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d0:	080061e5 	.word	0x080061e5
 80061d4:	080061eb 	.word	0x080061eb
 80061d8:	080061f1 	.word	0x080061f1
 80061dc:	080061f7 	.word	0x080061f7
 80061e0:	080061fd 	.word	0x080061fd
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80061e4:	2300      	movs	r3, #0
 80061e6:	73bb      	strb	r3, [r7, #14]
				break;
 80061e8:	e00f      	b.n	800620a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80061ea:	2301      	movs	r3, #1
 80061ec:	73bb      	strb	r3, [r7, #14]
				break;
 80061ee:	e00c      	b.n	800620a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80061f0:	2302      	movs	r3, #2
 80061f2:	73bb      	strb	r3, [r7, #14]
				break;
 80061f4:	e009      	b.n	800620a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80061f6:	2303      	movs	r3, #3
 80061f8:	73bb      	strb	r3, [r7, #14]
				break;
 80061fa:	e006      	b.n	800620a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80061fc:	2304      	movs	r3, #4
 80061fe:	73bb      	strb	r3, [r7, #14]
				break;
 8006200:	e003      	b.n	800620a <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8006202:	23f5      	movs	r3, #245	; 0xf5
 8006204:	73fb      	strb	r3, [r7, #15]
 8006206:	e000      	b.n	800620a <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8006208:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800620a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d107      	bne.n	8006222 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8006212:	7bbb      	ldrb	r3, [r7, #14]
 8006214:	461a      	mov	r2, r3
 8006216:	210a      	movs	r1, #10
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7fc fc81 	bl	8002b20 <VL53L0X_WrByte>
 800621e:	4603      	mov	r3, r0
 8006220:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8006222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10f      	bne.n	800624a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800622a:	7e3b      	ldrb	r3, [r7, #24]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d102      	bne.n	8006236 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8006230:	2300      	movs	r3, #0
 8006232:	73bb      	strb	r3, [r7, #14]
 8006234:	e001      	b.n	800623a <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8006236:	2310      	movs	r3, #16
 8006238:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800623a:	7bbb      	ldrb	r3, [r7, #14]
 800623c:	22ef      	movs	r2, #239	; 0xef
 800623e:	2184      	movs	r1, #132	; 0x84
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7fc fced 	bl	8002c20 <VL53L0X_UpdateByte>
 8006246:	4603      	mov	r3, r0
 8006248:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800624a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d103      	bne.n	800625a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	787a      	ldrb	r2, [r7, #1]
 8006256:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800625a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d105      	bne.n	800626e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006262:	2100      	movs	r1, #0
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f83f 	bl	80062e8 <VL53L0X_ClearInterruptMask>
 800626a:	4603      	mov	r3, r0
 800626c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800626e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop

0800627c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	607a      	str	r2, [r7, #4]
 8006286:	603b      	str	r3, [r7, #0]
 8006288:	460b      	mov	r3, r1
 800628a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800628c:	2300      	movs	r3, #0
 800628e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8006290:	f107 0314 	add.w	r3, r7, #20
 8006294:	461a      	mov	r2, r3
 8006296:	210e      	movs	r1, #14
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f7fc fd1f 	bl	8002cdc <VL53L0X_RdWord>
 800629e:	4603      	mov	r3, r0
 80062a0:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80062a2:	8abb      	ldrh	r3, [r7, #20]
 80062a4:	045b      	lsls	r3, r3, #17
 80062a6:	461a      	mov	r2, r3
 80062a8:	4b0e      	ldr	r3, [pc, #56]	; (80062e4 <VL53L0X_GetInterruptThresholds+0x68>)
 80062aa:	4013      	ands	r3, r2
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80062b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d10f      	bne.n	80062d8 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80062b8:	f107 0314 	add.w	r3, r7, #20
 80062bc:	461a      	mov	r2, r3
 80062be:	210c      	movs	r1, #12
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f7fc fd0b 	bl	8002cdc <VL53L0X_RdWord>
 80062c6:	4603      	mov	r3, r0
 80062c8:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80062ca:	8abb      	ldrh	r3, [r7, #20]
 80062cc:	045b      	lsls	r3, r3, #17
 80062ce:	461a      	mov	r2, r3
 80062d0:	4b04      	ldr	r3, [pc, #16]	; (80062e4 <VL53L0X_GetInterruptThresholds+0x68>)
 80062d2:	4013      	ands	r3, r2
		*pThresholdHigh =
 80062d4:	683a      	ldr	r2, [r7, #0]
 80062d6:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80062d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3718      	adds	r7, #24
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	1ffe0000 	.word	0x1ffe0000

080062e8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062f2:	2300      	movs	r3, #0
 80062f4:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80062f6:	2300      	movs	r3, #0
 80062f8:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80062fa:	2201      	movs	r2, #1
 80062fc:	210b      	movs	r1, #11
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7fc fc0e 	bl	8002b20 <VL53L0X_WrByte>
 8006304:	4603      	mov	r3, r0
 8006306:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8006308:	2200      	movs	r2, #0
 800630a:	210b      	movs	r1, #11
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7fc fc07 	bl	8002b20 <VL53L0X_WrByte>
 8006312:	4603      	mov	r3, r0
 8006314:	461a      	mov	r2, r3
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	4313      	orrs	r3, r2
 800631a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800631c:	f107 030d 	add.w	r3, r7, #13
 8006320:	461a      	mov	r2, r3
 8006322:	2113      	movs	r1, #19
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7fc fcaf 	bl	8002c88 <VL53L0X_RdByte>
 800632a:	4603      	mov	r3, r0
 800632c:	461a      	mov	r2, r3
 800632e:	7bfb      	ldrb	r3, [r7, #15]
 8006330:	4313      	orrs	r3, r2
 8006332:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8006334:	7bbb      	ldrb	r3, [r7, #14]
 8006336:	3301      	adds	r3, #1
 8006338:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800633a:	7b7b      	ldrb	r3, [r7, #13]
 800633c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8006340:	2b00      	cmp	r3, #0
 8006342:	d006      	beq.n	8006352 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8006344:	7bbb      	ldrb	r3, [r7, #14]
 8006346:	2b02      	cmp	r3, #2
 8006348:	d803      	bhi.n	8006352 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800634a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d0d3      	beq.n	80062fa <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8006352:	7bbb      	ldrb	r3, [r7, #14]
 8006354:	2b02      	cmp	r3, #2
 8006356:	d901      	bls.n	800635c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8006358:	23f4      	movs	r3, #244	; 0xf4
 800635a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800635c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006372:	2300      	movs	r3, #0
 8006374:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8006376:	f107 030e 	add.w	r3, r7, #14
 800637a:	461a      	mov	r2, r3
 800637c:	2113      	movs	r1, #19
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7fc fc82 	bl	8002c88 <VL53L0X_RdByte>
 8006384:	4603      	mov	r3, r0
 8006386:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8006388:	7bbb      	ldrb	r3, [r7, #14]
 800638a:	f003 0207 	and.w	r2, r3, #7
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8006392:	7bbb      	ldrb	r3, [r7, #14]
 8006394:	f003 0318 	and.w	r3, r3, #24
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800639c:	23fa      	movs	r3, #250	; 0xfa
 800639e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80063a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3710      	adds	r7, #16
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063b8:	2300      	movs	r3, #0
 80063ba:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	68b9      	ldr	r1, [r7, #8]
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 fa03 	bl	80067cc <VL53L0X_perform_ref_spad_management>
 80063c6:	4603      	mov	r3, r0
 80063c8:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80063ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b084      	sub	sp, #16
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80063e0:	2300      	movs	r3, #0
 80063e2:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80063e4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80063e8:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80063ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063ee:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80063f0:	f107 0308 	add.w	r3, r7, #8
 80063f4:	461a      	mov	r2, r3
 80063f6:	2128      	movs	r1, #40	; 0x28
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7fc fc6f 	bl	8002cdc <VL53L0X_RdWord>
 80063fe:	4603      	mov	r3, r0
 8006400:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8006402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d11e      	bne.n	8006448 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800640a:	893b      	ldrh	r3, [r7, #8]
 800640c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006410:	b29b      	uxth	r3, r3
 8006412:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8006414:	893b      	ldrh	r3, [r7, #8]
 8006416:	461a      	mov	r2, r3
 8006418:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800641c:	429a      	cmp	r2, r3
 800641e:	dd0b      	ble.n	8006438 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8006420:	893a      	ldrh	r2, [r7, #8]
 8006422:	897b      	ldrh	r3, [r7, #10]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	b29b      	uxth	r3, r3
 8006428:	b21b      	sxth	r3, r3
 800642a:	461a      	mov	r2, r3
					* 250;
 800642c:	23fa      	movs	r3, #250	; 0xfa
 800642e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	e007      	b.n	8006448 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8006438:	893b      	ldrh	r3, [r7, #8]
 800643a:	b21b      	sxth	r3, r3
 800643c:	461a      	mov	r2, r3
 800643e:	23fa      	movs	r3, #250	; 0xfa
 8006440:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8006448:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8006454:	b480      	push	{r7}
 8006456:	b08b      	sub	sp, #44	; 0x2c
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
 8006460:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8006462:	2308      	movs	r3, #8
 8006464:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8006466:	2300      	movs	r3, #0
 8006468:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006470:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	fbb2 f3f3 	udiv	r3, r2, r3
 800647a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	fbb3 f2f2 	udiv	r2, r3, r2
 8006484:	69b9      	ldr	r1, [r7, #24]
 8006486:	fb01 f202 	mul.w	r2, r1, r2
 800648a:	1a9b      	subs	r3, r3, r2
 800648c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
 8006492:	e030      	b.n	80064f6 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8006494:	2300      	movs	r3, #0
 8006496:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	4413      	add	r3, r2
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80064a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d11e      	bne.n	80064e8 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80064aa:	7ffa      	ldrb	r2, [r7, #31]
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	fa42 f303 	asr.w	r3, r2, r3
 80064b2:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80064b8:	e016      	b.n	80064e8 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80064ba:	7ffb      	ldrb	r3, [r7, #31]
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00b      	beq.n	80064dc <get_next_good_spad+0x88>
				success = 1;
 80064c4:	2301      	movs	r3, #1
 80064c6:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	fb03 f202 	mul.w	r2, r3, r2
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	4413      	add	r3, r2
 80064d4:	461a      	mov	r2, r3
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	601a      	str	r2, [r3, #0]
				break;
 80064da:	e009      	b.n	80064f0 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80064dc:	7ffb      	ldrb	r3, [r7, #31]
 80064de:	085b      	lsrs	r3, r3, #1
 80064e0:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	3301      	adds	r3, #1
 80064e6:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80064e8:	6a3a      	ldr	r2, [r7, #32]
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d3e4      	bcc.n	80064ba <get_next_good_spad+0x66>
				coarseIndex++) {
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	3301      	adds	r3, #1
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80064f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d202      	bcs.n	8006504 <get_next_good_spad+0xb0>
 80064fe:	7fbb      	ldrb	r3, [r7, #30]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0c7      	beq.n	8006494 <get_next_good_spad+0x40>
		}
	}
}
 8006504:	bf00      	nop
 8006506:	372c      	adds	r7, #44	; 0x2c
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8006518:	2301      	movs	r3, #1
 800651a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	099b      	lsrs	r3, r3, #6
 8006520:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8006522:	4a07      	ldr	r2, [pc, #28]	; (8006540 <is_aperture+0x30>)
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <is_aperture+0x22>
		isAperture = 0;
 800652e:	2300      	movs	r3, #0
 8006530:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8006532:	7bfb      	ldrb	r3, [r7, #15]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	20000520 	.word	0x20000520

08006544 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8006544:	b480      	push	{r7}
 8006546:	b089      	sub	sp, #36	; 0x24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006550:	2300      	movs	r3, #0
 8006552:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8006554:	2308      	movs	r3, #8
 8006556:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006560:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	fbb3 f2f2 	udiv	r2, r3, r2
 800656a:	69b9      	ldr	r1, [r7, #24]
 800656c:	fb01 f202 	mul.w	r2, r1, r2
 8006570:	1a9b      	subs	r3, r3, r2
 8006572:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	429a      	cmp	r2, r3
 800657a:	d302      	bcc.n	8006582 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800657c:	23ce      	movs	r3, #206	; 0xce
 800657e:	77fb      	strb	r3, [r7, #31]
 8006580:	e010      	b.n	80065a4 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	4413      	add	r3, r2
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	b25a      	sxtb	r2, r3
 800658c:	2101      	movs	r1, #1
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	fa01 f303 	lsl.w	r3, r1, r3
 8006594:	b25b      	sxtb	r3, r3
 8006596:	4313      	orrs	r3, r2
 8006598:	b259      	sxtb	r1, r3
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	4413      	add	r3, r2
 80065a0:	b2ca      	uxtb	r2, r1
 80065a2:	701a      	strb	r2, [r3, #0]

	return status;
 80065a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3724      	adds	r7, #36	; 0x24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80065be:	2306      	movs	r3, #6
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	21b0      	movs	r1, #176	; 0xb0
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f7fc fa4f 	bl	8002a68 <VL53L0X_WriteMulti>
 80065ca:	4603      	mov	r3, r0
 80065cc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80065ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b084      	sub	sp, #16
 80065de:	af00      	add	r7, sp, #0
 80065e0:	6078      	str	r0, [r7, #4]
 80065e2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80065e4:	2306      	movs	r3, #6
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	21b0      	movs	r1, #176	; 0xb0
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7fc fa6c 	bl	8002ac8 <VL53L0X_ReadMulti>
 80065f0:	4603      	mov	r3, r0
 80065f2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80065f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b08c      	sub	sp, #48	; 0x30
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	607a      	str	r2, [r7, #4]
 800660a:	603b      	str	r3, [r7, #0]
 800660c:	460b      	mov	r3, r1
 800660e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006610:	2300      	movs	r3, #0
 8006612:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8006616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006618:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800661a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800661c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800661e:	2300      	movs	r3, #0
 8006620:	62bb      	str	r3, [r7, #40]	; 0x28
 8006622:	e02b      	b.n	800667c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8006624:	f107 031c 	add.w	r3, r7, #28
 8006628:	6a3a      	ldr	r2, [r7, #32]
 800662a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff ff11 	bl	8006454 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006638:	d103      	bne.n	8006642 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800663a:	23ce      	movs	r3, #206	; 0xce
 800663c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8006640:	e020      	b.n	8006684 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	461a      	mov	r2, r3
 8006646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006648:	4413      	add	r3, r2
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff ff60 	bl	8006510 <is_aperture>
 8006650:	4603      	mov	r3, r0
 8006652:	461a      	mov	r2, r3
 8006654:	7afb      	ldrb	r3, [r7, #11]
 8006656:	4293      	cmp	r3, r2
 8006658:	d003      	beq.n	8006662 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800665a:	23ce      	movs	r3, #206	; 0xce
 800665c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8006660:	e010      	b.n	8006684 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8006666:	6a3a      	ldr	r2, [r7, #32]
 8006668:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800666a:	6838      	ldr	r0, [r7, #0]
 800666c:	f7ff ff6a 	bl	8006544 <enable_spad_bit>
		currentSpad++;
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	3301      	adds	r3, #1
 8006674:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8006676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006678:	3301      	adds	r3, #1
 800667a:	62bb      	str	r3, [r7, #40]	; 0x28
 800667c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800667e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006680:	429a      	cmp	r2, r3
 8006682:	d3cf      	bcc.n	8006624 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8006684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006686:	6a3a      	ldr	r2, [r7, #32]
 8006688:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800668a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800668e:	2b00      	cmp	r3, #0
 8006690:	d106      	bne.n	80066a0 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f7ff ff8d 	bl	80065b4 <set_ref_spad_map>
 800669a:	4603      	mov	r3, r0
 800669c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80066a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d121      	bne.n	80066ec <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80066a8:	f107 0314 	add.w	r3, r7, #20
 80066ac:	4619      	mov	r1, r3
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f7ff ff93 	bl	80065da <get_ref_spad_map>
 80066b4:	4603      	mov	r3, r0
 80066b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80066ba:	2300      	movs	r3, #0
 80066bc:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80066be:	e011      	b.n	80066e4 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	4413      	add	r3, r2
 80066c6:	781a      	ldrb	r2, [r3, #0]
 80066c8:	f107 0114 	add.w	r1, r7, #20
 80066cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ce:	440b      	add	r3, r1
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d003      	beq.n	80066de <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80066d6:	23ce      	movs	r3, #206	; 0xce
 80066d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80066dc:	e006      	b.n	80066ec <enable_ref_spads+0xec>
			}
			i++;
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	3301      	adds	r3, #1
 80066e2:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80066e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d3e9      	bcc.n	80066c0 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80066ec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3730      	adds	r7, #48	; 0x30
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b08a      	sub	sp, #40	; 0x28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8006702:	2300      	movs	r3, #0
 8006704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8006708:	2300      	movs	r3, #0
 800670a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006714:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8006718:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800671c:	2b00      	cmp	r3, #0
 800671e:	d107      	bne.n	8006730 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8006720:	22c0      	movs	r2, #192	; 0xc0
 8006722:	2101      	movs	r1, #1
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7fc f9fb 	bl	8002b20 <VL53L0X_WrByte>
 800672a:	4603      	mov	r3, r0
 800672c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8006730:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006734:	2b00      	cmp	r3, #0
 8006736:	d108      	bne.n	800674a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8006738:	f107 0308 	add.w	r3, r7, #8
 800673c:	4619      	mov	r1, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f7ff fc48 	bl	8005fd4 <VL53L0X_PerformSingleRangingMeasurement>
 8006744:	4603      	mov	r3, r0
 8006746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800674a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800674e:	2b00      	cmp	r3, #0
 8006750:	d107      	bne.n	8006762 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006752:	2201      	movs	r2, #1
 8006754:	21ff      	movs	r1, #255	; 0xff
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7fc f9e2 	bl	8002b20 <VL53L0X_WrByte>
 800675c:	4603      	mov	r3, r0
 800675e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8006762:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006766:	2b00      	cmp	r3, #0
 8006768:	d107      	bne.n	800677a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	21b6      	movs	r1, #182	; 0xb6
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7fc fab4 	bl	8002cdc <VL53L0X_RdWord>
 8006774:	4603      	mov	r3, r0
 8006776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800677a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800677e:	2b00      	cmp	r3, #0
 8006780:	d107      	bne.n	8006792 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006782:	2200      	movs	r2, #0
 8006784:	21ff      	movs	r1, #255	; 0xff
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f7fc f9ca 	bl	8002b20 <VL53L0X_WrByte>
 800678c:	4603      	mov	r3, r0
 800678e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8006792:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006796:	2b00      	cmp	r3, #0
 8006798:	d112      	bne.n	80067c0 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800679a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800679e:	461a      	mov	r2, r3
 80067a0:	2101      	movs	r1, #1
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7fc f9bc 	bl	8002b20 <VL53L0X_WrByte>
 80067a8:	4603      	mov	r3, r0
 80067aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80067ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d104      	bne.n	80067c0 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80067bc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80067c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3728      	adds	r7, #40	; 0x28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80067cc:	b590      	push	{r4, r7, lr}
 80067ce:	b09d      	sub	sp, #116	; 0x74
 80067d0:	af06      	add	r7, sp, #24
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80067d8:	2300      	movs	r3, #0
 80067da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80067de:	23b4      	movs	r3, #180	; 0xb4
 80067e0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80067e4:	2303      	movs	r3, #3
 80067e6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80067e8:	232c      	movs	r3, #44	; 0x2c
 80067ea:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80067f0:	2300      	movs	r3, #0
 80067f2:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80067f8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80067fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8006802:	2300      	movs	r3, #0
 8006804:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8006806:	2306      	movs	r3, #6
 8006808:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800680a:	2300      	movs	r3, #0
 800680c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800680e:	2300      	movs	r3, #0
 8006810:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8006812:	2300      	movs	r3, #0
 8006814:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8006818:	2300      	movs	r3, #0
 800681a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800681c:	2300      	movs	r3, #0
 800681e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8006820:	2300      	movs	r3, #0
 8006822:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8006824:	2300      	movs	r3, #0
 8006826:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8006830:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8006832:	2300      	movs	r3, #0
 8006834:	64bb      	str	r3, [r7, #72]	; 0x48
 8006836:	e009      	b.n	800684c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800683c:	4413      	add	r3, r2
 800683e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006842:	2200      	movs	r2, #0
 8006844:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006846:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006848:	3301      	adds	r3, #1
 800684a:	64bb      	str	r3, [r7, #72]	; 0x48
 800684c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006850:	429a      	cmp	r2, r3
 8006852:	d3f1      	bcc.n	8006838 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006854:	2201      	movs	r2, #1
 8006856:	21ff      	movs	r1, #255	; 0xff
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f7fc f961 	bl	8002b20 <VL53L0X_WrByte>
 800685e:	4603      	mov	r3, r0
 8006860:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8006864:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006868:	2b00      	cmp	r3, #0
 800686a:	d107      	bne.n	800687c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800686c:	2200      	movs	r2, #0
 800686e:	214f      	movs	r1, #79	; 0x4f
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f7fc f955 	bl	8002b20 <VL53L0X_WrByte>
 8006876:	4603      	mov	r3, r0
 8006878:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800687c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006880:	2b00      	cmp	r3, #0
 8006882:	d107      	bne.n	8006894 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8006884:	222c      	movs	r2, #44	; 0x2c
 8006886:	214e      	movs	r1, #78	; 0x4e
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f7fc f949 	bl	8002b20 <VL53L0X_WrByte>
 800688e:	4603      	mov	r3, r0
 8006890:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006894:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006898:	2b00      	cmp	r3, #0
 800689a:	d107      	bne.n	80068ac <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800689c:	2200      	movs	r2, #0
 800689e:	21ff      	movs	r1, #255	; 0xff
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f7fc f93d 	bl	8002b20 <VL53L0X_WrByte>
 80068a6:	4603      	mov	r3, r0
 80068a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80068ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d109      	bne.n	80068c8 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80068b4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80068b8:	461a      	mov	r2, r3
 80068ba:	21b6      	movs	r1, #182	; 0xb6
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f7fc f92f 	bl	8002b20 <VL53L0X_WrByte>
 80068c2:	4603      	mov	r3, r0
 80068c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80068c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d107      	bne.n	80068e0 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80068d0:	2200      	movs	r2, #0
 80068d2:	2180      	movs	r1, #128	; 0x80
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f7fc f923 	bl	8002b20 <VL53L0X_WrByte>
 80068da:	4603      	mov	r3, r0
 80068dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80068e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10a      	bne.n	80068fe <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80068e8:	f107 0210 	add.w	r2, r7, #16
 80068ec:	f107 0111 	add.w	r1, r7, #17
 80068f0:	2300      	movs	r3, #0
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 fbbb 	bl	800706e <VL53L0X_perform_ref_calibration>
 80068f8:	4603      	mov	r3, r0
 80068fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80068fe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006902:	2b00      	cmp	r3, #0
 8006904:	d121      	bne.n	800694a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8006906:	2300      	movs	r3, #0
 8006908:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800690a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800690c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800690e:	2300      	movs	r3, #0
 8006910:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8006912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006914:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8006922:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006926:	f107 0218 	add.w	r2, r7, #24
 800692a:	9204      	str	r2, [sp, #16]
 800692c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800692e:	9203      	str	r2, [sp, #12]
 8006930:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006932:	9202      	str	r2, [sp, #8]
 8006934:	9301      	str	r3, [sp, #4]
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	4623      	mov	r3, r4
 800693c:	4602      	mov	r2, r0
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f7ff fe5e 	bl	8006600 <enable_ref_spads>
 8006944:	4603      	mov	r3, r0
 8006946:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800694a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800694e:	2b00      	cmp	r3, #0
 8006950:	d174      	bne.n	8006a3c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8006956:	f107 0312 	add.w	r3, r7, #18
 800695a:	4619      	mov	r1, r3
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f7ff fecb 	bl	80066f8 <perform_ref_signal_measurement>
 8006962:	4603      	mov	r3, r0
 8006964:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006968:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800696c:	2b00      	cmp	r3, #0
 800696e:	d161      	bne.n	8006a34 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8006970:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8006972:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006974:	429a      	cmp	r2, r3
 8006976:	d25d      	bcs.n	8006a34 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8006978:	2300      	movs	r3, #0
 800697a:	64bb      	str	r3, [r7, #72]	; 0x48
 800697c:	e009      	b.n	8006992 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006982:	4413      	add	r3, r2
 8006984:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006988:	2200      	movs	r2, #0
 800698a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800698c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800698e:	3301      	adds	r3, #1
 8006990:	64bb      	str	r3, [r7, #72]	; 0x48
 8006992:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	429a      	cmp	r2, r3
 8006998:	d3f1      	bcc.n	800697e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800699a:	e002      	b.n	80069a2 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800699c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800699e:	3301      	adds	r3, #1
 80069a0:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80069a2:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80069a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069a8:	4413      	add	r3, r2
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7ff fdb0 	bl	8006510 <is_aperture>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d103      	bne.n	80069be <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80069b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d3ee      	bcc.n	800699c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80069be:	2301      	movs	r3, #1
 80069c0:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80069c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80069d2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80069d6:	f107 0218 	add.w	r2, r7, #24
 80069da:	9204      	str	r2, [sp, #16]
 80069dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069de:	9203      	str	r2, [sp, #12]
 80069e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069e2:	9202      	str	r2, [sp, #8]
 80069e4:	9301      	str	r3, [sp, #4]
 80069e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	4623      	mov	r3, r4
 80069ec:	4602      	mov	r2, r0
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f7ff fe06 	bl	8006600 <enable_ref_spads>
 80069f4:	4603      	mov	r3, r0
 80069f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80069fa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d11b      	bne.n	8006a3a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8006a06:	f107 0312 	add.w	r3, r7, #18
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f7ff fe73 	bl	80066f8 <perform_ref_signal_measurement>
 8006a12:	4603      	mov	r3, r0
 8006a14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8006a18:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10c      	bne.n	8006a3a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8006a20:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8006a22:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d208      	bcs.n	8006a3a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8006a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a30:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8006a32:	e002      	b.n	8006a3a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8006a34:	2300      	movs	r3, #0
 8006a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a38:	e000      	b.n	8006a3c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8006a3a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006a3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f040 80af 	bne.w	8006ba4 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8006a46:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8006a48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	f240 80aa 	bls.w	8006ba4 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8006a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8006a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a58:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8006a60:	f107 031c 	add.w	r3, r7, #28
 8006a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a66:	4618      	mov	r0, r3
 8006a68:	f012 fa3c 	bl	8018ee4 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8006a6c:	8a7b      	ldrh	r3, [r7, #18]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	bfb8      	it	lt
 8006a78:	425b      	neglt	r3, r3
 8006a7a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8006a82:	e086      	b.n	8006b92 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8006a8a:	f107 0314 	add.w	r3, r7, #20
 8006a8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a92:	f7ff fcdf 	bl	8006454 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a9c:	d103      	bne.n	8006aa6 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8006a9e:	23ce      	movs	r3, #206	; 0xce
 8006aa0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8006aa4:	e07e      	b.n	8006ba4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006aa6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	4413      	add	r3, r2
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7ff fd2e 	bl	8006510 <is_aperture>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d003      	beq.n	8006ac6 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8006ac4:	e06e      	b.n	8006ba4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8006ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac8:	3301      	adds	r3, #1
 8006aca:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8006ad6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7ff fd32 	bl	8006544 <enable_spad_bit>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006ae6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10c      	bne.n	8006b08 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8006aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006af0:	3301      	adds	r3, #1
 8006af2:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8006afa:	4619      	mov	r1, r3
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f7ff fd59 	bl	80065b4 <set_ref_spad_map>
 8006b02:	4603      	mov	r3, r0
 8006b04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8006b08:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d146      	bne.n	8006b9e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8006b10:	f107 0312 	add.w	r3, r7, #18
 8006b14:	4619      	mov	r1, r3
 8006b16:	68f8      	ldr	r0, [r7, #12]
 8006b18:	f7ff fdee 	bl	80066f8 <perform_ref_signal_measurement>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8006b22:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d13b      	bne.n	8006ba2 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8006b2a:	8a7b      	ldrh	r3, [r7, #18]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	bfb8      	it	lt
 8006b36:	425b      	neglt	r3, r3
 8006b38:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8006b3a:	8a7b      	ldrh	r3, [r7, #18]
 8006b3c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d21c      	bcs.n	8006b7c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8006b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d914      	bls.n	8006b74 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8006b4a:	f107 031c 	add.w	r3, r7, #28
 8006b4e:	4619      	mov	r1, r3
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f7ff fd2f 	bl	80065b4 <set_ref_spad_map>
 8006b56:	4603      	mov	r3, r0
 8006b58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8006b62:	f107 011c 	add.w	r1, r7, #28
 8006b66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f012 f9bb 	bl	8018ee4 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8006b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b70:	3b01      	subs	r3, #1
 8006b72:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8006b74:	2301      	movs	r3, #1
 8006b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b7a:	e00a      	b.n	8006b92 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8006b86:	f107 031c 	add.w	r3, r7, #28
 8006b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f012 f9a9 	bl	8018ee4 <memcpy>
		while (!complete) {
 8006b92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f43f af74 	beq.w	8006a84 <VL53L0X_perform_ref_spad_management+0x2b8>
 8006b9c:	e002      	b.n	8006ba4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006b9e:	bf00      	nop
 8006ba0:	e000      	b.n	8006ba4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006ba2:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006ba4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d115      	bne.n	8006bd8 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bb0:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8006bb8:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	781a      	ldrb	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8006bd8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	375c      	adds	r7, #92	; 0x5c
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd90      	pop	{r4, r7, pc}

08006be4 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8006be4:	b590      	push	{r4, r7, lr}
 8006be6:	b093      	sub	sp, #76	; 0x4c
 8006be8:	af06      	add	r7, sp, #24
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8006bfc:	23b4      	movs	r3, #180	; 0xb4
 8006bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8006c02:	2306      	movs	r3, #6
 8006c04:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8006c06:	232c      	movs	r3, #44	; 0x2c
 8006c08:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	21ff      	movs	r1, #255	; 0xff
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f7fb ff86 	bl	8002b20 <VL53L0X_WrByte>
 8006c14:	4603      	mov	r3, r0
 8006c16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006c1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d107      	bne.n	8006c32 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8006c22:	2200      	movs	r2, #0
 8006c24:	214f      	movs	r1, #79	; 0x4f
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f7fb ff7a 	bl	8002b20 <VL53L0X_WrByte>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8006c32:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d107      	bne.n	8006c4a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8006c3a:	222c      	movs	r2, #44	; 0x2c
 8006c3c:	214e      	movs	r1, #78	; 0x4e
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f7fb ff6e 	bl	8002b20 <VL53L0X_WrByte>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8006c4a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d107      	bne.n	8006c62 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006c52:	2200      	movs	r2, #0
 8006c54:	21ff      	movs	r1, #255	; 0xff
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f7fb ff62 	bl	8002b20 <VL53L0X_WrByte>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8006c62:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d109      	bne.n	8006c7e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8006c6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c6e:	461a      	mov	r2, r3
 8006c70:	21b6      	movs	r1, #182	; 0xb6
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f7fb ff54 	bl	8002b20 <VL53L0X_WrByte>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8006c7e:	2300      	movs	r3, #0
 8006c80:	627b      	str	r3, [r7, #36]	; 0x24
 8006c82:	e009      	b.n	8006c98 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8006c8e:	2200      	movs	r2, #0
 8006c90:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	3301      	adds	r3, #1
 8006c96:	627b      	str	r3, [r7, #36]	; 0x24
 8006c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d3f1      	bcc.n	8006c84 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8006ca0:	79fb      	ldrb	r3, [r7, #7]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d011      	beq.n	8006cca <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006ca6:	e002      	b.n	8006cae <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	3301      	adds	r3, #1
 8006cac:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006cae:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb4:	4413      	add	r3, r2
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7ff fc2a 	bl	8006510 <is_aperture>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d103      	bne.n	8006cca <VL53L0X_set_reference_spads+0xe6>
 8006cc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d3ee      	bcc.n	8006ca8 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8006cd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cda:	79f9      	ldrb	r1, [r7, #7]
 8006cdc:	f107 0214 	add.w	r2, r7, #20
 8006ce0:	9204      	str	r2, [sp, #16]
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	9203      	str	r2, [sp, #12]
 8006ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ce8:	9202      	str	r2, [sp, #8]
 8006cea:	9301      	str	r3, [sp, #4]
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	4623      	mov	r3, r4
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f7ff fc83 	bl	8006600 <enable_ref_spads>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8006d00:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10c      	bne.n	8006d22 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	b2da      	uxtb	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	79fa      	ldrb	r2, [r7, #7]
 8006d1e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8006d22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3734      	adds	r7, #52	; 0x34
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd90      	pop	{r4, r7, pc}

08006d2e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b084      	sub	sp, #16
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	460b      	mov	r3, r1
 8006d38:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10a      	bne.n	8006d5c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8006d46:	78fb      	ldrb	r3, [r7, #3]
 8006d48:	f043 0301 	orr.w	r3, r3, #1
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	461a      	mov	r2, r3
 8006d50:	2100      	movs	r1, #0
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7fb fee4 	bl	8002b20 <VL53L0X_WrByte>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8006d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d104      	bne.n	8006d6e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f9bf 	bl	80070e8 <VL53L0X_measurement_poll_for_completion>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d105      	bne.n	8006d82 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006d76:	2100      	movs	r1, #0
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f7ff fab5 	bl	80062e8 <VL53L0X_ClearInterruptMask>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d106      	bne.n	8006d98 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7fb fec6 	bl	8002b20 <VL53L0X_WrByte>
 8006d94:	4603      	mov	r3, r0
 8006d96:	73fb      	strb	r3, [r7, #15]

	return Status;
 8006d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	4608      	mov	r0, r1
 8006dae:	4611      	mov	r1, r2
 8006db0:	461a      	mov	r2, r3
 8006db2:	4603      	mov	r3, r0
 8006db4:	70fb      	strb	r3, [r7, #3]
 8006db6:	460b      	mov	r3, r1
 8006db8:	70bb      	strb	r3, [r7, #2]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	21ff      	movs	r1, #255	; 0xff
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7fb fea8 	bl	8002b20 <VL53L0X_WrByte>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006dda:	2200      	movs	r2, #0
 8006ddc:	2100      	movs	r1, #0
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7fb fe9e 	bl	8002b20 <VL53L0X_WrByte>
 8006de4:	4603      	mov	r3, r0
 8006de6:	461a      	mov	r2, r3
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006dee:	2200      	movs	r2, #0
 8006df0:	21ff      	movs	r1, #255	; 0xff
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7fb fe94 	bl	8002b20 <VL53L0X_WrByte>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8006e02:	78fb      	ldrb	r3, [r7, #3]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d01e      	beq.n	8006e46 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8006e08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d009      	beq.n	8006e24 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	21cb      	movs	r1, #203	; 0xcb
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f7fb ff37 	bl	8002c88 <VL53L0X_RdByte>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	7bfb      	ldrb	r3, [r7, #15]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006e24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d02a      	beq.n	8006e82 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8006e2c:	f107 030e 	add.w	r3, r7, #14
 8006e30:	461a      	mov	r2, r3
 8006e32:	21ee      	movs	r1, #238	; 0xee
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7fb ff27 	bl	8002c88 <VL53L0X_RdByte>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	7bfb      	ldrb	r3, [r7, #15]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	73fb      	strb	r3, [r7, #15]
 8006e44:	e01d      	b.n	8006e82 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8006e46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00a      	beq.n	8006e64 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8006e4e:	78bb      	ldrb	r3, [r7, #2]
 8006e50:	461a      	mov	r2, r3
 8006e52:	21cb      	movs	r1, #203	; 0xcb
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7fb fe63 	bl	8002b20 <VL53L0X_WrByte>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8006e64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00a      	beq.n	8006e82 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8006e6c:	787b      	ldrb	r3, [r7, #1]
 8006e6e:	2280      	movs	r2, #128	; 0x80
 8006e70:	21ee      	movs	r1, #238	; 0xee
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7fb fed4 	bl	8002c20 <VL53L0X_UpdateByte>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006e82:	2201      	movs	r2, #1
 8006e84:	21ff      	movs	r1, #255	; 0xff
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f7fb fe4a 	bl	8002b20 <VL53L0X_WrByte>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	461a      	mov	r2, r3
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006e96:	2201      	movs	r2, #1
 8006e98:	2100      	movs	r1, #0
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7fb fe40 	bl	8002b20 <VL53L0X_WrByte>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006eaa:	2200      	movs	r2, #0
 8006eac:	21ff      	movs	r1, #255	; 0xff
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7fb fe36 	bl	8002b20 <VL53L0X_WrByte>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8006ebe:	7bbb      	ldrb	r3, [r7, #14]
 8006ec0:	f023 0310 	bic.w	r3, r3, #16
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	701a      	strb	r2, [r3, #0]

	return Status;
 8006eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b08a      	sub	sp, #40	; 0x28
 8006eda:	af04      	add	r7, sp, #16
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	60b9      	str	r1, [r7, #8]
 8006ee0:	4611      	mov	r1, r2
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	460b      	mov	r3, r1
 8006ee6:	71fb      	strb	r3, [r7, #7]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006eec:	2300      	movs	r3, #0
 8006eee:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8006efc:	2300      	movs	r3, #0
 8006efe:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006f00:	79bb      	ldrb	r3, [r7, #6]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d003      	beq.n	8006f0e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006f0c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8006f0e:	2201      	movs	r2, #1
 8006f10:	2101      	movs	r1, #1
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f7fb fe04 	bl	8002b20 <VL53L0X_WrByte>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006f1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d105      	bne.n	8006f30 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8006f24:	2140      	movs	r1, #64	; 0x40
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f7ff ff01 	bl	8006d2e <VL53L0X_perform_single_ref_calibration>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006f30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d115      	bne.n	8006f64 <VL53L0X_perform_vhv_calibration+0x8e>
 8006f38:	79fb      	ldrb	r3, [r7, #7]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d112      	bne.n	8006f64 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006f3e:	7d39      	ldrb	r1, [r7, #20]
 8006f40:	7d7a      	ldrb	r2, [r7, #21]
 8006f42:	2300      	movs	r3, #0
 8006f44:	9303      	str	r3, [sp, #12]
 8006f46:	2301      	movs	r3, #1
 8006f48:	9302      	str	r3, [sp, #8]
 8006f4a:	f107 0313 	add.w	r3, r7, #19
 8006f4e:	9301      	str	r3, [sp, #4]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	460b      	mov	r3, r1
 8006f56:	2101      	movs	r1, #1
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f7ff ff23 	bl	8006da4 <VL53L0X_ref_calibration_io>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	75fb      	strb	r3, [r7, #23]
 8006f62:	e002      	b.n	8006f6a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2200      	movs	r2, #0
 8006f68:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006f6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d112      	bne.n	8006f98 <VL53L0X_perform_vhv_calibration+0xc2>
 8006f72:	79bb      	ldrb	r3, [r7, #6]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00f      	beq.n	8006f98 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006f78:	7dbb      	ldrb	r3, [r7, #22]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	2101      	movs	r1, #1
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f7fb fdce 	bl	8002b20 <VL53L0X_WrByte>
 8006f84:	4603      	mov	r3, r0
 8006f86:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006f88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d103      	bne.n	8006f98 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	7dba      	ldrb	r2, [r7, #22]
 8006f94:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006f98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08a      	sub	sp, #40	; 0x28
 8006fa8:	af04      	add	r7, sp, #16
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	4611      	mov	r1, r2
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	71fb      	strb	r3, [r7, #7]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006fca:	79bb      	ldrb	r3, [r7, #6]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d003      	beq.n	8006fd8 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006fd6:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8006fd8:	2202      	movs	r2, #2
 8006fda:	2101      	movs	r1, #1
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f7fb fd9f 	bl	8002b20 <VL53L0X_WrByte>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006fe6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d105      	bne.n	8006ffa <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8006fee:	2100      	movs	r1, #0
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f7ff fe9c 	bl	8006d2e <VL53L0X_perform_single_ref_calibration>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8006ffa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d115      	bne.n	800702e <VL53L0X_perform_phase_calibration+0x8a>
 8007002:	79fb      	ldrb	r3, [r7, #7]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d112      	bne.n	800702e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8007008:	7d39      	ldrb	r1, [r7, #20]
 800700a:	7d7a      	ldrb	r2, [r7, #21]
 800700c:	2301      	movs	r3, #1
 800700e:	9303      	str	r3, [sp, #12]
 8007010:	2300      	movs	r3, #0
 8007012:	9302      	str	r3, [sp, #8]
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	9301      	str	r3, [sp, #4]
 8007018:	f107 0313 	add.w	r3, r7, #19
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	460b      	mov	r3, r1
 8007020:	2101      	movs	r1, #1
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f7ff febe 	bl	8006da4 <VL53L0X_ref_calibration_io>
 8007028:	4603      	mov	r3, r0
 800702a:	75fb      	strb	r3, [r7, #23]
 800702c:	e002      	b.n	8007034 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2200      	movs	r2, #0
 8007032:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007034:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d112      	bne.n	8007062 <VL53L0X_perform_phase_calibration+0xbe>
 800703c:	79bb      	ldrb	r3, [r7, #6]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00f      	beq.n	8007062 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007042:	7dbb      	ldrb	r3, [r7, #22]
 8007044:	461a      	mov	r2, r3
 8007046:	2101      	movs	r1, #1
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f7fb fd69 	bl	8002b20 <VL53L0X_WrByte>
 800704e:	4603      	mov	r3, r0
 8007050:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007052:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d103      	bne.n	8007062 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	7dba      	ldrb	r2, [r7, #22]
 800705e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007062:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3718      	adds	r7, #24
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b086      	sub	sp, #24
 8007072:	af00      	add	r7, sp, #0
 8007074:	60f8      	str	r0, [r7, #12]
 8007076:	60b9      	str	r1, [r7, #8]
 8007078:	607a      	str	r2, [r7, #4]
 800707a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800707c:	2300      	movs	r3, #0
 800707e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007080:	2300      	movs	r3, #0
 8007082:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800708a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800708c:	78fa      	ldrb	r2, [r7, #3]
 800708e:	2300      	movs	r3, #0
 8007090:	68b9      	ldr	r1, [r7, #8]
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f7ff ff1f 	bl	8006ed6 <VL53L0X_perform_vhv_calibration>
 8007098:	4603      	mov	r3, r0
 800709a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800709c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d107      	bne.n	80070b4 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 80070a4:	78fa      	ldrb	r2, [r7, #3]
 80070a6:	2300      	movs	r3, #0
 80070a8:	6879      	ldr	r1, [r7, #4]
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f7ff ff7a 	bl	8006fa4 <VL53L0X_perform_phase_calibration>
 80070b0:	4603      	mov	r3, r0
 80070b2:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 80070b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10f      	bne.n	80070dc <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80070bc:	7dbb      	ldrb	r3, [r7, #22]
 80070be:	461a      	mov	r2, r3
 80070c0:	2101      	movs	r1, #1
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f7fb fd2c 	bl	8002b20 <VL53L0X_WrByte>
 80070c8:	4603      	mov	r3, r0
 80070ca:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80070cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d103      	bne.n	80070dc <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	7dba      	ldrb	r2, [r7, #22]
 80070d8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80070dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3718      	adds	r7, #24
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b086      	sub	sp, #24
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070f0:	2300      	movs	r3, #0
 80070f2:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80070f4:	2300      	movs	r3, #0
 80070f6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80070fc:	f107 030f 	add.w	r3, r7, #15
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7fe fe02 	bl	8005d0c <VL53L0X_GetMeasurementDataReady>
 8007108:	4603      	mov	r3, r0
 800710a:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800710c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d110      	bne.n	8007136 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8007114:	7bfb      	ldrb	r3, [r7, #15]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d00f      	beq.n	800713a <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	3301      	adds	r3, #1
 800711e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007126:	d302      	bcc.n	800712e <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8007128:	23f9      	movs	r3, #249	; 0xf9
 800712a:	75fb      	strb	r3, [r7, #23]
			break;
 800712c:	e006      	b.n	800713c <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7fb fe48 	bl	8002dc4 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007134:	e7e2      	b.n	80070fc <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8007136:	bf00      	nop
 8007138:	e000      	b.n	800713c <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800713a:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800713c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	4603      	mov	r3, r0
 8007150:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8007152:	2300      	movs	r3, #0
 8007154:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8007156:	79fb      	ldrb	r3, [r7, #7]
 8007158:	3301      	adds	r3, #1
 800715a:	b2db      	uxtb	r3, r3
 800715c:	005b      	lsls	r3, r3, #1
 800715e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8007160:	7bfb      	ldrb	r3, [r7, #15]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800716e:	b480      	push	{r7}
 8007170:	b085      	sub	sp, #20
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8007176:	2300      	movs	r3, #0
 8007178:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800717a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800717e:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8007180:	e002      	b.n	8007188 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	089b      	lsrs	r3, r3, #2
 8007186:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	429a      	cmp	r2, r3
 800718e:	d8f8      	bhi.n	8007182 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8007190:	e017      	b.n	80071c2 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	4413      	add	r3, r2
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	429a      	cmp	r2, r3
 800719c:	d30b      	bcc.n	80071b6 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	4413      	add	r3, r2
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	085b      	lsrs	r3, r3, #1
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	4413      	add	r3, r2
 80071b2:	60fb      	str	r3, [r7, #12]
 80071b4:	e002      	b.n	80071bc <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	085b      	lsrs	r3, r3, #1
 80071ba:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	089b      	lsrs	r3, r3, #2
 80071c0:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1e4      	bne.n	8007192 <VL53L0X_isqrt+0x24>
	}

	return res;
 80071c8:	68fb      	ldr	r3, [r7, #12]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b086      	sub	sp, #24
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071de:	2300      	movs	r3, #0
 80071e0:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80071e2:	2200      	movs	r2, #0
 80071e4:	2183      	movs	r1, #131	; 0x83
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7fb fc9a 	bl	8002b20 <VL53L0X_WrByte>
 80071ec:	4603      	mov	r3, r0
 80071ee:	461a      	mov	r2, r3
 80071f0:	7dfb      	ldrb	r3, [r7, #23]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80071f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d11e      	bne.n	800723c <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80071fe:	2300      	movs	r3, #0
 8007200:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8007202:	f107 030f 	add.w	r3, r7, #15
 8007206:	461a      	mov	r2, r3
 8007208:	2183      	movs	r1, #131	; 0x83
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f7fb fd3c 	bl	8002c88 <VL53L0X_RdByte>
 8007210:	4603      	mov	r3, r0
 8007212:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8007214:	7bfb      	ldrb	r3, [r7, #15]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d10a      	bne.n	8007230 <VL53L0X_device_read_strobe+0x5a>
 800721a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d106      	bne.n	8007230 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	3301      	adds	r3, #1
 8007226:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800722e:	d3e8      	bcc.n	8007202 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007236:	d301      	bcc.n	800723c <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8007238:	23f9      	movs	r3, #249	; 0xf9
 800723a:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800723c:	2201      	movs	r2, #1
 800723e:	2183      	movs	r1, #131	; 0x83
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7fb fc6d 	bl	8002b20 <VL53L0X_WrByte>
 8007246:	4603      	mov	r3, r0
 8007248:	461a      	mov	r2, r3
 800724a:	7dfb      	ldrb	r3, [r7, #23]
 800724c:	4313      	orrs	r3, r2
 800724e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8007250:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8007254:	4618      	mov	r0, r3
 8007256:	3718      	adds	r7, #24
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b098      	sub	sp, #96	; 0x60
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	460b      	mov	r3, r1
 8007266:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007268:	2300      	movs	r3, #0
 800726a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800726e:	2300      	movs	r3, #0
 8007270:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8007274:	2300      	movs	r3, #0
 8007276:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800727a:	2300      	movs	r3, #0
 800727c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800727e:	2300      	movs	r3, #0
 8007280:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8007282:	2300      	movs	r3, #0
 8007284:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8007286:	2300      	movs	r3, #0
 8007288:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800728c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8007290:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8007292:	2300      	movs	r3, #0
 8007294:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8007296:	2300      	movs	r3, #0
 8007298:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800729a:	2300      	movs	r3, #0
 800729c:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80072a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80072a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80072ac:	2b07      	cmp	r3, #7
 80072ae:	f000 8408 	beq.w	8007ac2 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80072b2:	2201      	movs	r2, #1
 80072b4:	2180      	movs	r1, #128	; 0x80
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7fb fc32 	bl	8002b20 <VL53L0X_WrByte>
 80072bc:	4603      	mov	r3, r0
 80072be:	461a      	mov	r2, r3
 80072c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072c4:	4313      	orrs	r3, r2
 80072c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80072ca:	2201      	movs	r2, #1
 80072cc:	21ff      	movs	r1, #255	; 0xff
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7fb fc26 	bl	8002b20 <VL53L0X_WrByte>
 80072d4:	4603      	mov	r3, r0
 80072d6:	461a      	mov	r2, r3
 80072d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072dc:	4313      	orrs	r3, r2
 80072de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80072e2:	2200      	movs	r2, #0
 80072e4:	2100      	movs	r1, #0
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f7fb fc1a 	bl	8002b20 <VL53L0X_WrByte>
 80072ec:	4603      	mov	r3, r0
 80072ee:	461a      	mov	r2, r3
 80072f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80072f4:	4313      	orrs	r3, r2
 80072f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80072fa:	2206      	movs	r2, #6
 80072fc:	21ff      	movs	r1, #255	; 0xff
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7fb fc0e 	bl	8002b20 <VL53L0X_WrByte>
 8007304:	4603      	mov	r3, r0
 8007306:	461a      	mov	r2, r3
 8007308:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800730c:	4313      	orrs	r3, r2
 800730e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007312:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007316:	461a      	mov	r2, r3
 8007318:	2183      	movs	r1, #131	; 0x83
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7fb fcb4 	bl	8002c88 <VL53L0X_RdByte>
 8007320:	4603      	mov	r3, r0
 8007322:	461a      	mov	r2, r3
 8007324:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007328:	4313      	orrs	r3, r2
 800732a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800732e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007332:	f043 0304 	orr.w	r3, r3, #4
 8007336:	b2db      	uxtb	r3, r3
 8007338:	461a      	mov	r2, r3
 800733a:	2183      	movs	r1, #131	; 0x83
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7fb fbef 	bl	8002b20 <VL53L0X_WrByte>
 8007342:	4603      	mov	r3, r0
 8007344:	461a      	mov	r2, r3
 8007346:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800734a:	4313      	orrs	r3, r2
 800734c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8007350:	2207      	movs	r2, #7
 8007352:	21ff      	movs	r1, #255	; 0xff
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7fb fbe3 	bl	8002b20 <VL53L0X_WrByte>
 800735a:	4603      	mov	r3, r0
 800735c:	461a      	mov	r2, r3
 800735e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007362:	4313      	orrs	r3, r2
 8007364:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8007368:	2201      	movs	r2, #1
 800736a:	2181      	movs	r1, #129	; 0x81
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7fb fbd7 	bl	8002b20 <VL53L0X_WrByte>
 8007372:	4603      	mov	r3, r0
 8007374:	461a      	mov	r2, r3
 8007376:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800737a:	4313      	orrs	r3, r2
 800737c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7fb fd1f 	bl	8002dc4 <VL53L0X_PollingDelay>
 8007386:	4603      	mov	r3, r0
 8007388:	461a      	mov	r2, r3
 800738a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800738e:	4313      	orrs	r3, r2
 8007390:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007394:	2201      	movs	r2, #1
 8007396:	2180      	movs	r1, #128	; 0x80
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f7fb fbc1 	bl	8002b20 <VL53L0X_WrByte>
 800739e:	4603      	mov	r3, r0
 80073a0:	461a      	mov	r2, r3
 80073a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073a6:	4313      	orrs	r3, r2
 80073a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80073ac:	78fb      	ldrb	r3, [r7, #3]
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f000 8098 	beq.w	80074e8 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80073b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80073bc:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f040 8091 	bne.w	80074e8 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80073c6:	226b      	movs	r2, #107	; 0x6b
 80073c8:	2194      	movs	r1, #148	; 0x94
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f7fb fba8 	bl	8002b20 <VL53L0X_WrByte>
 80073d0:	4603      	mov	r3, r0
 80073d2:	461a      	mov	r2, r3
 80073d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073d8:	4313      	orrs	r3, r2
 80073da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7ff fef9 	bl	80071d6 <VL53L0X_device_read_strobe>
 80073e4:	4603      	mov	r3, r0
 80073e6:	461a      	mov	r2, r3
 80073e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073ec:	4313      	orrs	r3, r2
 80073ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80073f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80073f6:	461a      	mov	r2, r3
 80073f8:	2190      	movs	r1, #144	; 0x90
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f7fb fca6 	bl	8002d4c <VL53L0X_RdDWord>
 8007400:	4603      	mov	r3, r0
 8007402:	461a      	mov	r2, r3
 8007404:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007408:	4313      	orrs	r3, r2
 800740a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	0a1b      	lsrs	r3, r3, #8
 8007412:	b2db      	uxtb	r3, r3
 8007414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007418:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800741c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741e:	0bdb      	lsrs	r3, r3, #15
 8007420:	b2db      	uxtb	r3, r3
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800742a:	2224      	movs	r2, #36	; 0x24
 800742c:	2194      	movs	r1, #148	; 0x94
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7fb fb76 	bl	8002b20 <VL53L0X_WrByte>
 8007434:	4603      	mov	r3, r0
 8007436:	461a      	mov	r2, r3
 8007438:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800743c:	4313      	orrs	r3, r2
 800743e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7ff fec7 	bl	80071d6 <VL53L0X_device_read_strobe>
 8007448:	4603      	mov	r3, r0
 800744a:	461a      	mov	r2, r3
 800744c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007450:	4313      	orrs	r3, r2
 8007452:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007456:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800745a:	461a      	mov	r2, r3
 800745c:	2190      	movs	r1, #144	; 0x90
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f7fb fc74 	bl	8002d4c <VL53L0X_RdDWord>
 8007464:	4603      	mov	r3, r0
 8007466:	461a      	mov	r2, r3
 8007468:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800746c:	4313      	orrs	r3, r2
 800746e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8007472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007474:	0e1b      	lsrs	r3, r3, #24
 8007476:	b2db      	uxtb	r3, r3
 8007478:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800747c:	0c1b      	lsrs	r3, r3, #16
 800747e:	b2db      	uxtb	r3, r3
 8007480:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8007482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007484:	0a1b      	lsrs	r3, r3, #8
 8007486:	b2db      	uxtb	r3, r3
 8007488:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800748a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748c:	b2db      	uxtb	r3, r3
 800748e:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8007490:	2225      	movs	r2, #37	; 0x25
 8007492:	2194      	movs	r1, #148	; 0x94
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7fb fb43 	bl	8002b20 <VL53L0X_WrByte>
 800749a:	4603      	mov	r3, r0
 800749c:	461a      	mov	r2, r3
 800749e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074a2:	4313      	orrs	r3, r2
 80074a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7ff fe94 	bl	80071d6 <VL53L0X_device_read_strobe>
 80074ae:	4603      	mov	r3, r0
 80074b0:	461a      	mov	r2, r3
 80074b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074b6:	4313      	orrs	r3, r2
 80074b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80074bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80074c0:	461a      	mov	r2, r3
 80074c2:	2190      	movs	r1, #144	; 0x90
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7fb fc41 	bl	8002d4c <VL53L0X_RdDWord>
 80074ca:	4603      	mov	r3, r0
 80074cc:	461a      	mov	r2, r3
 80074ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074d2:	4313      	orrs	r3, r2
 80074d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80074d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074da:	0e1b      	lsrs	r3, r3, #24
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80074e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e2:	0c1b      	lsrs	r3, r3, #16
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80074e8:	78fb      	ldrb	r3, [r7, #3]
 80074ea:	f003 0302 	and.w	r3, r3, #2
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 8189 	beq.w	8007806 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80074f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80074f8:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	f040 8182 	bne.w	8007806 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8007502:	2202      	movs	r2, #2
 8007504:	2194      	movs	r1, #148	; 0x94
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7fb fb0a 	bl	8002b20 <VL53L0X_WrByte>
 800750c:	4603      	mov	r3, r0
 800750e:	461a      	mov	r2, r3
 8007510:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007514:	4313      	orrs	r3, r2
 8007516:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7ff fe5b 	bl	80071d6 <VL53L0X_device_read_strobe>
 8007520:	4603      	mov	r3, r0
 8007522:	461a      	mov	r2, r3
 8007524:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007528:	4313      	orrs	r3, r2
 800752a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800752e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8007532:	461a      	mov	r2, r3
 8007534:	2190      	movs	r1, #144	; 0x90
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7fb fba6 	bl	8002c88 <VL53L0X_RdByte>
 800753c:	4603      	mov	r3, r0
 800753e:	461a      	mov	r2, r3
 8007540:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007544:	4313      	orrs	r3, r2
 8007546:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800754a:	227b      	movs	r2, #123	; 0x7b
 800754c:	2194      	movs	r1, #148	; 0x94
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7fb fae6 	bl	8002b20 <VL53L0X_WrByte>
 8007554:	4603      	mov	r3, r0
 8007556:	461a      	mov	r2, r3
 8007558:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800755c:	4313      	orrs	r3, r2
 800755e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7ff fe37 	bl	80071d6 <VL53L0X_device_read_strobe>
 8007568:	4603      	mov	r3, r0
 800756a:	461a      	mov	r2, r3
 800756c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007570:	4313      	orrs	r3, r2
 8007572:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8007576:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800757a:	461a      	mov	r2, r3
 800757c:	2190      	movs	r1, #144	; 0x90
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7fb fb82 	bl	8002c88 <VL53L0X_RdByte>
 8007584:	4603      	mov	r3, r0
 8007586:	461a      	mov	r2, r3
 8007588:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800758c:	4313      	orrs	r3, r2
 800758e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8007592:	2277      	movs	r2, #119	; 0x77
 8007594:	2194      	movs	r1, #148	; 0x94
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7fb fac2 	bl	8002b20 <VL53L0X_WrByte>
 800759c:	4603      	mov	r3, r0
 800759e:	461a      	mov	r2, r3
 80075a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075a4:	4313      	orrs	r3, r2
 80075a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7ff fe13 	bl	80071d6 <VL53L0X_device_read_strobe>
 80075b0:	4603      	mov	r3, r0
 80075b2:	461a      	mov	r2, r3
 80075b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075b8:	4313      	orrs	r3, r2
 80075ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80075be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075c2:	461a      	mov	r2, r3
 80075c4:	2190      	movs	r1, #144	; 0x90
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f7fb fbc0 	bl	8002d4c <VL53L0X_RdDWord>
 80075cc:	4603      	mov	r3, r0
 80075ce:	461a      	mov	r2, r3
 80075d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075d4:	4313      	orrs	r3, r2
 80075d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	0e5b      	lsrs	r3, r3, #25
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80075e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ea:	0c9b      	lsrs	r3, r3, #18
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80075f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f8:	0adb      	lsrs	r3, r3, #11
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007600:	b2db      	uxtb	r3, r3
 8007602:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8007604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007606:	091b      	lsrs	r3, r3, #4
 8007608:	b2db      	uxtb	r3, r3
 800760a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800760e:	b2db      	uxtb	r3, r3
 8007610:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8007612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007614:	b2db      	uxtb	r3, r3
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	b2db      	uxtb	r3, r3
 800761a:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800761e:	b2db      	uxtb	r3, r3
 8007620:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8007624:	2278      	movs	r2, #120	; 0x78
 8007626:	2194      	movs	r1, #148	; 0x94
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7fb fa79 	bl	8002b20 <VL53L0X_WrByte>
 800762e:	4603      	mov	r3, r0
 8007630:	461a      	mov	r2, r3
 8007632:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007636:	4313      	orrs	r3, r2
 8007638:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7ff fdca 	bl	80071d6 <VL53L0X_device_read_strobe>
 8007642:	4603      	mov	r3, r0
 8007644:	461a      	mov	r2, r3
 8007646:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800764a:	4313      	orrs	r3, r2
 800764c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007650:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007654:	461a      	mov	r2, r3
 8007656:	2190      	movs	r1, #144	; 0x90
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f7fb fb77 	bl	8002d4c <VL53L0X_RdDWord>
 800765e:	4603      	mov	r3, r0
 8007660:	461a      	mov	r2, r3
 8007662:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007666:	4313      	orrs	r3, r2
 8007668:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800766c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766e:	0f5b      	lsrs	r3, r3, #29
 8007670:	b2db      	uxtb	r3, r3
 8007672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007676:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8007678:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800767c:	4413      	add	r3, r2
 800767e:	b2db      	uxtb	r3, r3
 8007680:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8007682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007684:	0d9b      	lsrs	r3, r3, #22
 8007686:	b2db      	uxtb	r3, r3
 8007688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800768c:	b2db      	uxtb	r3, r3
 800768e:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8007690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007692:	0bdb      	lsrs	r3, r3, #15
 8007694:	b2db      	uxtb	r3, r3
 8007696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800769a:	b2db      	uxtb	r3, r3
 800769c:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	0a1b      	lsrs	r3, r3, #8
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80076ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ae:	085b      	lsrs	r3, r3, #1
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80076ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	019b      	lsls	r3, r3, #6
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80076cc:	2279      	movs	r2, #121	; 0x79
 80076ce:	2194      	movs	r1, #148	; 0x94
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7fb fa25 	bl	8002b20 <VL53L0X_WrByte>
 80076d6:	4603      	mov	r3, r0
 80076d8:	461a      	mov	r2, r3
 80076da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076de:	4313      	orrs	r3, r2
 80076e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7ff fd76 	bl	80071d6 <VL53L0X_device_read_strobe>
 80076ea:	4603      	mov	r3, r0
 80076ec:	461a      	mov	r2, r3
 80076ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80076f2:	4313      	orrs	r3, r2
 80076f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80076f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80076fc:	461a      	mov	r2, r3
 80076fe:	2190      	movs	r1, #144	; 0x90
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f7fb fb23 	bl	8002d4c <VL53L0X_RdDWord>
 8007706:	4603      	mov	r3, r0
 8007708:	461a      	mov	r2, r3
 800770a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800770e:	4313      	orrs	r3, r2
 8007710:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8007714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007716:	0e9b      	lsrs	r3, r3, #26
 8007718:	b2db      	uxtb	r3, r3
 800771a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800771e:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8007720:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007724:	4413      	add	r3, r2
 8007726:	b2db      	uxtb	r3, r3
 8007728:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772c:	0cdb      	lsrs	r3, r3, #19
 800772e:	b2db      	uxtb	r3, r3
 8007730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007734:	b2db      	uxtb	r3, r3
 8007736:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8007738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773a:	0b1b      	lsrs	r3, r3, #12
 800773c:	b2db      	uxtb	r3, r3
 800773e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007742:	b2db      	uxtb	r3, r3
 8007744:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8007746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007748:	095b      	lsrs	r3, r3, #5
 800774a:	b2db      	uxtb	r3, r3
 800774c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007750:	b2db      	uxtb	r3, r3
 8007752:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8007754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007756:	b2db      	uxtb	r3, r3
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	b2db      	uxtb	r3, r3
 800775c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8007760:	b2db      	uxtb	r3, r3
 8007762:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8007766:	227a      	movs	r2, #122	; 0x7a
 8007768:	2194      	movs	r1, #148	; 0x94
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7fb f9d8 	bl	8002b20 <VL53L0X_WrByte>
 8007770:	4603      	mov	r3, r0
 8007772:	461a      	mov	r2, r3
 8007774:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007778:	4313      	orrs	r3, r2
 800777a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7ff fd29 	bl	80071d6 <VL53L0X_device_read_strobe>
 8007784:	4603      	mov	r3, r0
 8007786:	461a      	mov	r2, r3
 8007788:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800778c:	4313      	orrs	r3, r2
 800778e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8007792:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007796:	461a      	mov	r2, r3
 8007798:	2190      	movs	r1, #144	; 0x90
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7fb fad6 	bl	8002d4c <VL53L0X_RdDWord>
 80077a0:	4603      	mov	r3, r0
 80077a2:	461a      	mov	r2, r3
 80077a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80077a8:	4313      	orrs	r3, r2
 80077aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80077ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b0:	0f9b      	lsrs	r3, r3, #30
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077b8:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80077ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80077be:	4413      	add	r3, r2
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	0ddb      	lsrs	r3, r3, #23
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80077d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d4:	0c1b      	lsrs	r3, r3, #16
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80077e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e2:	0a5b      	lsrs	r3, r3, #9
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80077f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f2:	089b      	lsrs	r3, r3, #2
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8007800:	2300      	movs	r3, #0
 8007802:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8007806:	78fb      	ldrb	r3, [r7, #3]
 8007808:	f003 0304 	and.w	r3, r3, #4
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 80f1 	beq.w	80079f4 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007812:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007816:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800781a:	2b00      	cmp	r3, #0
 800781c:	f040 80ea 	bne.w	80079f4 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8007820:	227b      	movs	r2, #123	; 0x7b
 8007822:	2194      	movs	r1, #148	; 0x94
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7fb f97b 	bl	8002b20 <VL53L0X_WrByte>
 800782a:	4603      	mov	r3, r0
 800782c:	461a      	mov	r2, r3
 800782e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007832:	4313      	orrs	r3, r2
 8007834:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7ff fccc 	bl	80071d6 <VL53L0X_device_read_strobe>
 800783e:	4603      	mov	r3, r0
 8007840:	461a      	mov	r2, r3
 8007842:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007846:	4313      	orrs	r3, r2
 8007848:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800784c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007850:	461a      	mov	r2, r3
 8007852:	2190      	movs	r1, #144	; 0x90
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f7fb fa79 	bl	8002d4c <VL53L0X_RdDWord>
 800785a:	4603      	mov	r3, r0
 800785c:	461a      	mov	r2, r3
 800785e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007862:	4313      	orrs	r3, r2
 8007864:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8007868:	227c      	movs	r2, #124	; 0x7c
 800786a:	2194      	movs	r1, #148	; 0x94
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7fb f957 	bl	8002b20 <VL53L0X_WrByte>
 8007872:	4603      	mov	r3, r0
 8007874:	461a      	mov	r2, r3
 8007876:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800787a:	4313      	orrs	r3, r2
 800787c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f7ff fca8 	bl	80071d6 <VL53L0X_device_read_strobe>
 8007886:	4603      	mov	r3, r0
 8007888:	461a      	mov	r2, r3
 800788a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800788e:	4313      	orrs	r3, r2
 8007890:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8007894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007898:	461a      	mov	r2, r3
 800789a:	2190      	movs	r1, #144	; 0x90
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f7fb fa55 	bl	8002d4c <VL53L0X_RdDWord>
 80078a2:	4603      	mov	r3, r0
 80078a4:	461a      	mov	r2, r3
 80078a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078aa:	4313      	orrs	r3, r2
 80078ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80078b0:	2273      	movs	r2, #115	; 0x73
 80078b2:	2194      	movs	r1, #148	; 0x94
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7fb f933 	bl	8002b20 <VL53L0X_WrByte>
 80078ba:	4603      	mov	r3, r0
 80078bc:	461a      	mov	r2, r3
 80078be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078c2:	4313      	orrs	r3, r2
 80078c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7ff fc84 	bl	80071d6 <VL53L0X_device_read_strobe>
 80078ce:	4603      	mov	r3, r0
 80078d0:	461a      	mov	r2, r3
 80078d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078d6:	4313      	orrs	r3, r2
 80078d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80078dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078e0:	461a      	mov	r2, r3
 80078e2:	2190      	movs	r1, #144	; 0x90
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7fb fa31 	bl	8002d4c <VL53L0X_RdDWord>
 80078ea:	4603      	mov	r3, r0
 80078ec:	461a      	mov	r2, r3
 80078ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80078f2:	4313      	orrs	r3, r2
 80078f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80078f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fa:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8007900:	2274      	movs	r2, #116	; 0x74
 8007902:	2194      	movs	r1, #148	; 0x94
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f7fb f90b 	bl	8002b20 <VL53L0X_WrByte>
 800790a:	4603      	mov	r3, r0
 800790c:	461a      	mov	r2, r3
 800790e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007912:	4313      	orrs	r3, r2
 8007914:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f7ff fc5c 	bl	80071d6 <VL53L0X_device_read_strobe>
 800791e:	4603      	mov	r3, r0
 8007920:	461a      	mov	r2, r3
 8007922:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007926:	4313      	orrs	r3, r2
 8007928:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800792c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007930:	461a      	mov	r2, r3
 8007932:	2190      	movs	r1, #144	; 0x90
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7fb fa09 	bl	8002d4c <VL53L0X_RdDWord>
 800793a:	4603      	mov	r3, r0
 800793c:	461a      	mov	r2, r3
 800793e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007942:	4313      	orrs	r3, r2
 8007944:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8007948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794a:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800794c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800794e:	4313      	orrs	r3, r2
 8007950:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8007952:	2275      	movs	r2, #117	; 0x75
 8007954:	2194      	movs	r1, #148	; 0x94
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7fb f8e2 	bl	8002b20 <VL53L0X_WrByte>
 800795c:	4603      	mov	r3, r0
 800795e:	461a      	mov	r2, r3
 8007960:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007964:	4313      	orrs	r3, r2
 8007966:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f7ff fc33 	bl	80071d6 <VL53L0X_device_read_strobe>
 8007970:	4603      	mov	r3, r0
 8007972:	461a      	mov	r2, r3
 8007974:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007978:	4313      	orrs	r3, r2
 800797a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800797e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007982:	461a      	mov	r2, r3
 8007984:	2190      	movs	r1, #144	; 0x90
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7fb f9e0 	bl	8002d4c <VL53L0X_RdDWord>
 800798c:	4603      	mov	r3, r0
 800798e:	461a      	mov	r2, r3
 8007990:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007994:	4313      	orrs	r3, r2
 8007996:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800799a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799c:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800799e:	b29b      	uxth	r3, r3
 80079a0:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80079a2:	2276      	movs	r2, #118	; 0x76
 80079a4:	2194      	movs	r1, #148	; 0x94
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7fb f8ba 	bl	8002b20 <VL53L0X_WrByte>
 80079ac:	4603      	mov	r3, r0
 80079ae:	461a      	mov	r2, r3
 80079b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079b4:	4313      	orrs	r3, r2
 80079b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7ff fc0b 	bl	80071d6 <VL53L0X_device_read_strobe>
 80079c0:	4603      	mov	r3, r0
 80079c2:	461a      	mov	r2, r3
 80079c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079c8:	4313      	orrs	r3, r2
 80079ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80079ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80079d2:	461a      	mov	r2, r3
 80079d4:	2190      	movs	r1, #144	; 0x90
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7fb f9b8 	bl	8002d4c <VL53L0X_RdDWord>
 80079dc:	4603      	mov	r3, r0
 80079de:	461a      	mov	r2, r3
 80079e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80079e4:	4313      	orrs	r3, r2
 80079e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80079ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079f0:	4313      	orrs	r3, r2
 80079f2:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80079f4:	2200      	movs	r2, #0
 80079f6:	2181      	movs	r1, #129	; 0x81
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f7fb f891 	bl	8002b20 <VL53L0X_WrByte>
 80079fe:	4603      	mov	r3, r0
 8007a00:	461a      	mov	r2, r3
 8007a02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a06:	4313      	orrs	r3, r2
 8007a08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007a0c:	2206      	movs	r2, #6
 8007a0e:	21ff      	movs	r1, #255	; 0xff
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7fb f885 	bl	8002b20 <VL53L0X_WrByte>
 8007a16:	4603      	mov	r3, r0
 8007a18:	461a      	mov	r2, r3
 8007a1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007a24:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007a28:	461a      	mov	r2, r3
 8007a2a:	2183      	movs	r1, #131	; 0x83
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f7fb f92b 	bl	8002c88 <VL53L0X_RdByte>
 8007a32:	4603      	mov	r3, r0
 8007a34:	461a      	mov	r2, r3
 8007a36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8007a40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007a44:	f023 0304 	bic.w	r3, r3, #4
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	2183      	movs	r1, #131	; 0x83
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f7fb f866 	bl	8002b20 <VL53L0X_WrByte>
 8007a54:	4603      	mov	r3, r0
 8007a56:	461a      	mov	r2, r3
 8007a58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007a62:	2201      	movs	r2, #1
 8007a64:	21ff      	movs	r1, #255	; 0xff
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7fb f85a 	bl	8002b20 <VL53L0X_WrByte>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a74:	4313      	orrs	r3, r2
 8007a76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7fb f84e 	bl	8002b20 <VL53L0X_WrByte>
 8007a84:	4603      	mov	r3, r0
 8007a86:	461a      	mov	r2, r3
 8007a88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007a92:	2200      	movs	r2, #0
 8007a94:	21ff      	movs	r1, #255	; 0xff
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7fb f842 	bl	8002b20 <VL53L0X_WrByte>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007aaa:	2200      	movs	r2, #0
 8007aac:	2180      	movs	r1, #128	; 0x80
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7fb f836 	bl	8002b20 <VL53L0X_WrByte>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007abc:	4313      	orrs	r3, r2
 8007abe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007ac2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f040 808f 	bne.w	8007bea <VL53L0X_get_info_from_device+0x98e>
 8007acc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007ad0:	2b07      	cmp	r3, #7
 8007ad2:	f000 808a 	beq.w	8007bea <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8007ad6:	78fb      	ldrb	r3, [r7, #3]
 8007ad8:	f003 0301 	and.w	r3, r3, #1
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d024      	beq.n	8007b2a <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8007ae0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007ae4:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d11e      	bne.n	8007b2a <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8007af2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8007afc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007b00:	2300      	movs	r3, #0
 8007b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b04:	e00e      	b.n	8007b24 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8007b06:	f107 0208 	add.w	r2, r7, #8
 8007b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b0c:	4413      	add	r3, r2
 8007b0e:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8007b1a:	460a      	mov	r2, r1
 8007b1c:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8007b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b20:	3301      	adds	r3, #1
 8007b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b26:	2b05      	cmp	r3, #5
 8007b28:	dded      	ble.n	8007b06 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8007b2a:	78fb      	ldrb	r3, [r7, #3]
 8007b2c:	f003 0302 	and.w	r3, r3, #2
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d018      	beq.n	8007b66 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8007b34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b38:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d112      	bne.n	8007b66 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b40:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b4a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	33f3      	adds	r3, #243	; 0xf3
 8007b58:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8007b5a:	f107 0310 	add.w	r3, r7, #16
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b62:	f011 fb53 	bl	801920c <strcpy>

		}

		if (((option & 4) == 4) &&
 8007b66:	78fb      	ldrb	r3, [r7, #3]
 8007b68:	f003 0304 	and.w	r3, r3, #4
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d030      	beq.n	8007bd2 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007b70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b74:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d12a      	bne.n	8007bd2 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8007b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b8e:	025b      	lsls	r3, r3, #9
 8007b90:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b96:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8007ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d011      	beq.n	8007bca <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8007ba6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8007bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007bb4:	fb02 f303 	mul.w	r3, r2, r3
 8007bb8:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8007bba:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8007bbe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007bc2:	425b      	negs	r3, r3
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8007bca:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8007bd2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007bd6:	78fb      	ldrb	r3, [r7, #3]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8007be0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007bea:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3760      	adds	r7, #96	; 0x60
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b087      	sub	sp, #28
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8007c02:	f240 6277 	movw	r2, #1655	; 0x677
 8007c06:	f04f 0300 	mov.w	r3, #0
 8007c0a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8007c0e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8007c12:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8007c14:	78fb      	ldrb	r3, [r7, #3]
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	fb02 f303 	mul.w	r3, r2, r3
 8007c22:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8007c24:	68bb      	ldr	r3, [r7, #8]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	371c      	adds	r7, #28
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr

08007c32 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8007c32:	b480      	push	{r7}
 8007c34:	b087      	sub	sp, #28
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8007c42:	2300      	movs	r3, #0
 8007c44:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d017      	beq.n	8007c7c <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007c52:	e005      	b.n	8007c60 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	085b      	lsrs	r3, r3, #1
 8007c58:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8007c5a:	89fb      	ldrh	r3, [r7, #14]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1f4      	bne.n	8007c54 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8007c6a:	89fb      	ldrh	r3, [r7, #14]
 8007c6c:	021b      	lsls	r3, r3, #8
 8007c6e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8007c78:	4413      	add	r3, r2
 8007c7a:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8007c7c:	8afb      	ldrh	r3, [r7, #22]

}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	371c      	adds	r7, #28
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b085      	sub	sp, #20
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	4603      	mov	r3, r0
 8007c92:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8007c94:	2300      	movs	r3, #0
 8007c96:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007c98:	88fb      	ldrh	r3, [r7, #6]
 8007c9a:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8007c9c:	88fa      	ldrh	r2, [r7, #6]
 8007c9e:	0a12      	lsrs	r2, r2, #8
 8007ca0:	b292      	uxth	r2, r2
 8007ca2:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3714      	adds	r7, #20
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
	...

08007cb8 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b088      	sub	sp, #32
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007cca:	79fb      	ldrb	r3, [r7, #7]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f7ff ff91 	bl	8007bf6 <VL53L0X_calc_macro_period_ps>
 8007cd4:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007cdc:	4a0a      	ldr	r2, [pc, #40]	; (8007d08 <VL53L0X_calc_timeout_mclks+0x50>)
 8007cde:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce2:	099b      	lsrs	r3, r3, #6
 8007ce4:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007cec:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	085b      	lsrs	r3, r3, #1
 8007cf4:	441a      	add	r2, r3
	timeout_period_mclks =
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cfc:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8007cfe:	69fb      	ldr	r3, [r7, #28]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3720      	adds	r7, #32
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	10624dd3 	.word	0x10624dd3

08007d0c <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	460b      	mov	r3, r1
 8007d16:	807b      	strh	r3, [r7, #2]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8007d20:	787b      	ldrb	r3, [r7, #1]
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f7ff ff66 	bl	8007bf6 <VL53L0X_calc_macro_period_ps>
 8007d2a:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007d32:	4a0a      	ldr	r2, [pc, #40]	; (8007d5c <VL53L0X_calc_timeout_us+0x50>)
 8007d34:	fba2 2303 	umull	r2, r3, r2, r3
 8007d38:	099b      	lsrs	r3, r3, #6
 8007d3a:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8007d3c:	887b      	ldrh	r3, [r7, #2]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	fb02 f303 	mul.w	r3, r2, r3
 8007d44:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8007d48:	4a04      	ldr	r2, [pc, #16]	; (8007d5c <VL53L0X_calc_timeout_us+0x50>)
 8007d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d4e:	099b      	lsrs	r3, r3, #6
 8007d50:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8007d52:	697b      	ldr	r3, [r7, #20]
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3718      	adds	r7, #24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	10624dd3 	.word	0x10624dd3

08007d60 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b08c      	sub	sp, #48	; 0x30
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	460b      	mov	r3, r1
 8007d6a:	607a      	str	r2, [r7, #4]
 8007d6c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8007d74:	2300      	movs	r3, #0
 8007d76:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8007d82:	2300      	movs	r3, #0
 8007d84:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007d86:	7afb      	ldrb	r3, [r7, #11]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d005      	beq.n	8007d98 <get_sequence_step_timeout+0x38>
 8007d8c:	7afb      	ldrb	r3, [r7, #11]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d002      	beq.n	8007d98 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007d92:	7afb      	ldrb	r3, [r7, #11]
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d128      	bne.n	8007dea <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007d98:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	2100      	movs	r1, #0
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f7fd fa5b 	bl	800525c <VL53L0X_GetVcselPulsePeriod>
 8007da6:	4603      	mov	r3, r0
 8007da8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8007dac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d109      	bne.n	8007dc8 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8007db4:	f107 0320 	add.w	r3, r7, #32
 8007db8:	461a      	mov	r2, r3
 8007dba:	2146      	movs	r1, #70	; 0x46
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	f7fa ff63 	bl	8002c88 <VL53L0X_RdByte>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8007dc8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7ff ff5b 	bl	8007c8a <VL53L0X_decode_timeout>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007dd8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007ddc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007dde:	4619      	mov	r1, r3
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f7ff ff93 	bl	8007d0c <VL53L0X_calc_timeout_us>
 8007de6:	62b8      	str	r0, [r7, #40]	; 0x28
 8007de8:	e092      	b.n	8007f10 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007dea:	7afb      	ldrb	r3, [r7, #11]
 8007dec:	2b03      	cmp	r3, #3
 8007dee:	d135      	bne.n	8007e5c <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007df0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007df4:	461a      	mov	r2, r3
 8007df6:	2100      	movs	r1, #0
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f7fd fa2f 	bl	800525c <VL53L0X_GetVcselPulsePeriod>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007e04:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f040 8081 	bne.w	8007f10 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007e0e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007e12:	461a      	mov	r2, r3
 8007e14:	2100      	movs	r1, #0
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f7fd fa20 	bl	800525c <VL53L0X_GetVcselPulsePeriod>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8007e22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d109      	bne.n	8007e3e <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8007e2a:	f107 031e 	add.w	r3, r7, #30
 8007e2e:	461a      	mov	r2, r3
 8007e30:	2151      	movs	r1, #81	; 0x51
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f7fa ff52 	bl	8002cdc <VL53L0X_RdWord>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007e3e:	8bfb      	ldrh	r3, [r7, #30]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7ff ff22 	bl	8007c8a <VL53L0X_decode_timeout>
 8007e46:	4603      	mov	r3, r0
 8007e48:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007e4a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007e4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007e50:	4619      	mov	r1, r3
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f7ff ff5a 	bl	8007d0c <VL53L0X_calc_timeout_us>
 8007e58:	62b8      	str	r0, [r7, #40]	; 0x28
 8007e5a:	e059      	b.n	8007f10 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8007e5c:	7afb      	ldrb	r3, [r7, #11]
 8007e5e:	2b04      	cmp	r3, #4
 8007e60:	d156      	bne.n	8007f10 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007e62:	f107 0314 	add.w	r3, r7, #20
 8007e66:	4619      	mov	r1, r3
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f7fd fb03 	bl	8005474 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8007e72:	7dfb      	ldrb	r3, [r7, #23]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d01d      	beq.n	8007eb4 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007e78:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	2100      	movs	r1, #0
 8007e80:	68f8      	ldr	r0, [r7, #12]
 8007e82:	f7fd f9eb 	bl	800525c <VL53L0X_GetVcselPulsePeriod>
 8007e86:	4603      	mov	r3, r0
 8007e88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8007e8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10f      	bne.n	8007eb4 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8007e94:	f107 031e 	add.w	r3, r7, #30
 8007e98:	461a      	mov	r2, r3
 8007e9a:	2151      	movs	r1, #81	; 0x51
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f7fa ff1d 	bl	8002cdc <VL53L0X_RdWord>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007ea8:	8bfb      	ldrh	r3, [r7, #30]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7ff feed 	bl	8007c8a <VL53L0X_decode_timeout>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007eb4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d109      	bne.n	8007ed0 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007ebc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	2101      	movs	r1, #1
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f7fd f9c9 	bl	800525c <VL53L0X_GetVcselPulsePeriod>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8007ed0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10f      	bne.n	8007ef8 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8007ed8:	f107 031c 	add.w	r3, r7, #28
 8007edc:	461a      	mov	r2, r3
 8007ede:	2171      	movs	r1, #113	; 0x71
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f7fa fefb 	bl	8002cdc <VL53L0X_RdWord>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007eec:	8bbb      	ldrh	r3, [r7, #28]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7ff fecb 	bl	8007c8a <VL53L0X_decode_timeout>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8007ef8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007efa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007f00:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007f04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007f06:	4619      	mov	r1, r3
 8007f08:	68f8      	ldr	r0, [r7, #12]
 8007f0a:	f7ff feff 	bl	8007d0c <VL53L0X_calc_timeout_us>
 8007f0e:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f14:	601a      	str	r2, [r3, #0]

	return Status;
 8007f16:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3730      	adds	r7, #48	; 0x30
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b08a      	sub	sp, #40	; 0x28
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	607a      	str	r2, [r7, #4]
 8007f2e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f30:	2300      	movs	r3, #0
 8007f32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007f36:	7afb      	ldrb	r3, [r7, #11]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d005      	beq.n	8007f48 <set_sequence_step_timeout+0x26>
 8007f3c:	7afb      	ldrb	r3, [r7, #11]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d002      	beq.n	8007f48 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007f42:	7afb      	ldrb	r3, [r7, #11]
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d138      	bne.n	8007fba <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007f48:	f107 031b 	add.w	r3, r7, #27
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	2100      	movs	r1, #0
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f7fd f983 	bl	800525c <VL53L0X_GetVcselPulsePeriod>
 8007f56:	4603      	mov	r3, r0
 8007f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8007f5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d11a      	bne.n	8007f9a <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8007f64:	7efb      	ldrb	r3, [r7, #27]
 8007f66:	461a      	mov	r2, r3
 8007f68:	6879      	ldr	r1, [r7, #4]
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f7ff fea4 	bl	8007cb8 <VL53L0X_calc_timeout_mclks>
 8007f70:	4603      	mov	r3, r0
 8007f72:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8007f74:	8bbb      	ldrh	r3, [r7, #28]
 8007f76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f7a:	d903      	bls.n	8007f84 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8007f7c:	23ff      	movs	r3, #255	; 0xff
 8007f7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007f82:	e004      	b.n	8007f8e <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8007f84:	8bbb      	ldrh	r3, [r7, #28]
 8007f86:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007f8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007f9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f040 80ab 	bne.w	80080fa <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8007fa4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007fa8:	461a      	mov	r2, r3
 8007faa:	2146      	movs	r1, #70	; 0x46
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f7fa fdb7 	bl	8002b20 <VL53L0X_WrByte>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8007fb8:	e09f      	b.n	80080fa <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007fba:	7afb      	ldrb	r3, [r7, #11]
 8007fbc:	2b03      	cmp	r3, #3
 8007fbe:	d135      	bne.n	800802c <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8007fc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d11b      	bne.n	8008000 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007fc8:	f107 031b 	add.w	r3, r7, #27
 8007fcc:	461a      	mov	r2, r3
 8007fce:	2100      	movs	r1, #0
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f7fd f943 	bl	800525c <VL53L0X_GetVcselPulsePeriod>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007fdc:	7efb      	ldrb	r3, [r7, #27]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	6879      	ldr	r1, [r7, #4]
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f7ff fe68 	bl	8007cb8 <VL53L0X_calc_timeout_mclks>
 8007fe8:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8007fea:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8007fec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7ff fe1f 	bl	8007c32 <VL53L0X_encode_timeout>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007ff8:	8b3a      	ldrh	r2, [r7, #24]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008000:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008004:	2b00      	cmp	r3, #0
 8008006:	d108      	bne.n	800801a <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8008008:	8b3b      	ldrh	r3, [r7, #24]
 800800a:	461a      	mov	r2, r3
 800800c:	2151      	movs	r1, #81	; 0x51
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f7fa fdaa 	bl	8002b68 <VL53L0X_WrWord>
 8008014:	4603      	mov	r3, r0
 8008016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800801a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800801e:	2b00      	cmp	r3, #0
 8008020:	d16b      	bne.n	80080fa <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800802a:	e066      	b.n	80080fa <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800802c:	7afb      	ldrb	r3, [r7, #11]
 800802e:	2b04      	cmp	r3, #4
 8008030:	d160      	bne.n	80080f4 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8008032:	f107 0310 	add.w	r3, r7, #16
 8008036:	4619      	mov	r1, r3
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f7fd fa1b 	bl	8005474 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800803e:	2300      	movs	r3, #0
 8008040:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8008042:	7cfb      	ldrb	r3, [r7, #19]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d01d      	beq.n	8008084 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008048:	f107 031b 	add.w	r3, r7, #27
 800804c:	461a      	mov	r2, r3
 800804e:	2100      	movs	r1, #0
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f7fd f903 	bl	800525c <VL53L0X_GetVcselPulsePeriod>
 8008056:	4603      	mov	r3, r0
 8008058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800805c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10f      	bne.n	8008084 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8008064:	f107 0318 	add.w	r3, r7, #24
 8008068:	461a      	mov	r2, r3
 800806a:	2151      	movs	r1, #81	; 0x51
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f7fa fe35 	bl	8002cdc <VL53L0X_RdWord>
 8008072:	4603      	mov	r3, r0
 8008074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8008078:	8b3b      	ldrh	r3, [r7, #24]
 800807a:	4618      	mov	r0, r3
 800807c:	f7ff fe05 	bl	8007c8a <VL53L0X_decode_timeout>
 8008080:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8008082:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8008084:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008088:	2b00      	cmp	r3, #0
 800808a:	d109      	bne.n	80080a0 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800808c:	f107 031b 	add.w	r3, r7, #27
 8008090:	461a      	mov	r2, r3
 8008092:	2101      	movs	r1, #1
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f7fd f8e1 	bl	800525c <VL53L0X_GetVcselPulsePeriod>
 800809a:	4603      	mov	r3, r0
 800809c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80080a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d128      	bne.n	80080fa <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80080a8:	7efb      	ldrb	r3, [r7, #27]
 80080aa:	461a      	mov	r2, r3
 80080ac:	6879      	ldr	r1, [r7, #4]
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f7ff fe02 	bl	8007cb8 <VL53L0X_calc_timeout_mclks>
 80080b4:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80080b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80080b8:	6a3a      	ldr	r2, [r7, #32]
 80080ba:	4413      	add	r3, r2
 80080bc:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 80080be:	6a38      	ldr	r0, [r7, #32]
 80080c0:	f7ff fdb7 	bl	8007c32 <VL53L0X_encode_timeout>
 80080c4:	4603      	mov	r3, r0
 80080c6:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 80080c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d108      	bne.n	80080e2 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80080d0:	8bfb      	ldrh	r3, [r7, #30]
 80080d2:	461a      	mov	r2, r3
 80080d4:	2171      	movs	r1, #113	; 0x71
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	f7fa fd46 	bl	8002b68 <VL53L0X_WrWord>
 80080dc:	4603      	mov	r3, r0
 80080de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80080e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d107      	bne.n	80080fa <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80080f2:	e002      	b.n	80080fa <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80080f4:	23fc      	movs	r3, #252	; 0xfc
 80080f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80080fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3728      	adds	r7, #40	; 0x28
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b086      	sub	sp, #24
 800810a:	af00      	add	r7, sp, #0
 800810c:	60f8      	str	r0, [r7, #12]
 800810e:	460b      	mov	r3, r1
 8008110:	607a      	str	r2, [r7, #4]
 8008112:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008114:	2300      	movs	r3, #0
 8008116:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8008118:	7afb      	ldrb	r3, [r7, #11]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d002      	beq.n	8008124 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800811e:	2b01      	cmp	r3, #1
 8008120:	d00a      	beq.n	8008138 <VL53L0X_get_vcsel_pulse_period+0x32>
 8008122:	e013      	b.n	800814c <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008124:	f107 0316 	add.w	r3, r7, #22
 8008128:	461a      	mov	r2, r3
 800812a:	2150      	movs	r1, #80	; 0x50
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f7fa fdab 	bl	8002c88 <VL53L0X_RdByte>
 8008132:	4603      	mov	r3, r0
 8008134:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008136:	e00b      	b.n	8008150 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008138:	f107 0316 	add.w	r3, r7, #22
 800813c:	461a      	mov	r2, r3
 800813e:	2170      	movs	r1, #112	; 0x70
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f7fa fda1 	bl	8002c88 <VL53L0X_RdByte>
 8008146:	4603      	mov	r3, r0
 8008148:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800814a:	e001      	b.n	8008150 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800814c:	23fc      	movs	r3, #252	; 0xfc
 800814e:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8008150:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d107      	bne.n	8008168 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8008158:	7dbb      	ldrb	r3, [r7, #22]
 800815a:	4618      	mov	r0, r3
 800815c:	f7fe fff4 	bl	8007148 <VL53L0X_decode_vcsel_period>
 8008160:	4603      	mov	r3, r0
 8008162:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	701a      	strb	r2, [r3, #0]

	return Status;
 8008168:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3718      	adds	r7, #24
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b092      	sub	sp, #72	; 0x48
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800817e:	2300      	movs	r3, #0
 8008180:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008184:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008188:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800818a:	f240 7376 	movw	r3, #1910	; 0x776
 800818e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8008190:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008194:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008196:	f44f 7325 	mov.w	r3, #660	; 0x294
 800819a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800819c:	f240 234e 	movw	r3, #590	; 0x24e
 80081a0:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80081a2:	f240 23b2 	movw	r3, #690	; 0x2b2
 80081a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80081a8:	f44f 7325 	mov.w	r3, #660	; 0x294
 80081ac:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80081ae:	f240 2326 	movw	r3, #550	; 0x226
 80081b2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80081b4:	2300      	movs	r3, #0
 80081b6:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80081b8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80081bc:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80081be:	2300      	movs	r3, #0
 80081c0:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	6a3b      	ldr	r3, [r7, #32]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d205      	bcs.n	80081d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80081ca:	23fc      	movs	r3, #252	; 0xfc
 80081cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80081d0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80081d4:	e0aa      	b.n	800832c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80081d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80081d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081da:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80081e2:	f107 0314 	add.w	r3, r7, #20
 80081e6:	4619      	mov	r1, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7fd f943 	bl	8005474 <VL53L0X_GetSequenceStepEnables>
 80081ee:	4603      	mov	r3, r0
 80081f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80081f4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d15b      	bne.n	80082b4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80081fc:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d105      	bne.n	800820e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8008202:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8008204:	2b00      	cmp	r3, #0
 8008206:	d102      	bne.n	800820e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8008208:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800820a:	2b00      	cmp	r3, #0
 800820c:	d052      	beq.n	80082b4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800820e:	f107 0310 	add.w	r3, r7, #16
 8008212:	461a      	mov	r2, r3
 8008214:	2102      	movs	r1, #2
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7ff fda2 	bl	8007d60 <get_sequence_step_timeout>
 800821c:	4603      	mov	r3, r0
 800821e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8008222:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008226:	2b00      	cmp	r3, #0
 8008228:	d002      	beq.n	8008230 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800822a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800822e:	e07d      	b.n	800832c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8008230:	7d3b      	ldrb	r3, [r7, #20]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00f      	beq.n	8008256 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8008236:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8008238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800823a:	4413      	add	r3, r2
 800823c:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800823e:	69fa      	ldr	r2, [r7, #28]
 8008240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008242:	429a      	cmp	r2, r3
 8008244:	d204      	bcs.n	8008250 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8008246:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008248:	69fb      	ldr	r3, [r7, #28]
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	643b      	str	r3, [r7, #64]	; 0x40
 800824e:	e002      	b.n	8008256 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008250:	23fc      	movs	r3, #252	; 0xfc
 8008252:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8008256:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800825a:	2b00      	cmp	r3, #0
 800825c:	d002      	beq.n	8008264 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800825e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008262:	e063      	b.n	800832c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8008264:	7dbb      	ldrb	r3, [r7, #22]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d011      	beq.n	800828e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800826e:	4413      	add	r3, r2
 8008270:	005b      	lsls	r3, r3, #1
 8008272:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008274:	69fa      	ldr	r2, [r7, #28]
 8008276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008278:	429a      	cmp	r2, r3
 800827a:	d204      	bcs.n	8008286 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800827c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	643b      	str	r3, [r7, #64]	; 0x40
 8008284:	e016      	b.n	80082b4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008286:	23fc      	movs	r3, #252	; 0xfc
 8008288:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800828c:	e012      	b.n	80082b4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800828e:	7d7b      	ldrb	r3, [r7, #21]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00f      	beq.n	80082b4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008298:	4413      	add	r3, r2
 800829a:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800829c:	69fa      	ldr	r2, [r7, #28]
 800829e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d204      	bcs.n	80082ae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80082a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	643b      	str	r3, [r7, #64]	; 0x40
 80082ac:	e002      	b.n	80082b4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80082ae:	23fc      	movs	r3, #252	; 0xfc
 80082b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80082b4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80082bc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80082c0:	e034      	b.n	800832c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80082c2:	7dfb      	ldrb	r3, [r7, #23]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d019      	beq.n	80082fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80082c8:	f107 030c 	add.w	r3, r7, #12
 80082cc:	461a      	mov	r2, r3
 80082ce:	2103      	movs	r1, #3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7ff fd45 	bl	8007d60 <get_sequence_step_timeout>
 80082d6:	4603      	mov	r3, r0
 80082d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082e0:	4413      	add	r3, r2
 80082e2:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80082e4:	69fa      	ldr	r2, [r7, #28]
 80082e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d204      	bcs.n	80082f6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80082ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	643b      	str	r3, [r7, #64]	; 0x40
 80082f4:	e002      	b.n	80082fc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80082f6:	23fc      	movs	r3, #252	; 0xfc
 80082f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80082fc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008300:	2b00      	cmp	r3, #0
 8008302:	d111      	bne.n	8008328 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8008304:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00e      	beq.n	8008328 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800830a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800830c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8008312:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008314:	2104      	movs	r1, #4
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f7ff fe03 	bl	8007f22 <set_sequence_step_timeout>
 800831c:	4603      	mov	r3, r0
 800831e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	683a      	ldr	r2, [r7, #0]
 8008326:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8008328:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800832c:	4618      	mov	r0, r3
 800832e:	3748      	adds	r7, #72	; 0x48
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b090      	sub	sp, #64	; 0x40
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800833e:	2300      	movs	r3, #0
 8008340:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008344:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008348:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800834a:	f240 7376 	movw	r3, #1910	; 0x776
 800834e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8008350:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008354:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008356:	f44f 7325 	mov.w	r3, #660	; 0x294
 800835a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800835c:	f240 234e 	movw	r3, #590	; 0x24e
 8008360:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8008362:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008366:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008368:	f44f 7325 	mov.w	r3, #660	; 0x294
 800836c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800836e:	f240 2326 	movw	r3, #550	; 0x226
 8008372:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008374:	2300      	movs	r3, #0
 8008376:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8008378:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800837a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800837c:	441a      	add	r2, r3
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008382:	f107 0318 	add.w	r3, r7, #24
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7fd f873 	bl	8005474 <VL53L0X_GetSequenceStepEnables>
 800838e:	4603      	mov	r3, r0
 8008390:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8008394:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008398:	2b00      	cmp	r3, #0
 800839a:	d002      	beq.n	80083a2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800839c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80083a0:	e075      	b.n	800848e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 80083a2:	7e3b      	ldrb	r3, [r7, #24]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d105      	bne.n	80083b4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 80083a8:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d102      	bne.n	80083b4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 80083ae:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d030      	beq.n	8008416 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 80083b4:	f107 0310 	add.w	r3, r7, #16
 80083b8:	461a      	mov	r2, r3
 80083ba:	2102      	movs	r1, #2
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f7ff fccf 	bl	8007d60 <get_sequence_step_timeout>
 80083c2:	4603      	mov	r3, r0
 80083c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 80083c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d122      	bne.n	8008416 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 80083d0:	7e3b      	ldrb	r3, [r7, #24]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d007      	beq.n	80083e6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80083da:	6939      	ldr	r1, [r7, #16]
 80083dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083de:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80083e0:	441a      	add	r2, r3
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 80083e6:	7ebb      	ldrb	r3, [r7, #26]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d009      	beq.n	8008400 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 80083f0:	6939      	ldr	r1, [r7, #16]
 80083f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f4:	440b      	add	r3, r1
 80083f6:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80083f8:	441a      	add	r2, r3
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	601a      	str	r2, [r3, #0]
 80083fe:	e00a      	b.n	8008416 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8008400:	7e7b      	ldrb	r3, [r7, #25]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d007      	beq.n	8008416 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800840a:	6939      	ldr	r1, [r7, #16]
 800840c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840e:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8008410:	441a      	add	r2, r3
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008416:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800841a:	2b00      	cmp	r3, #0
 800841c:	d114      	bne.n	8008448 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800841e:	7efb      	ldrb	r3, [r7, #27]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d011      	beq.n	8008448 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8008424:	f107 030c 	add.w	r3, r7, #12
 8008428:	461a      	mov	r2, r3
 800842a:	2103      	movs	r1, #3
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7ff fc97 	bl	8007d60 <get_sequence_step_timeout>
 8008432:	4603      	mov	r3, r0
 8008434:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800843c:	68f9      	ldr	r1, [r7, #12]
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008442:	441a      	add	r2, r3
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008448:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800844c:	2b00      	cmp	r3, #0
 800844e:	d114      	bne.n	800847a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8008450:	7f3b      	ldrb	r3, [r7, #28]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d011      	beq.n	800847a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8008456:	f107 0314 	add.w	r3, r7, #20
 800845a:	461a      	mov	r2, r3
 800845c:	2104      	movs	r1, #4
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f7ff fc7e 	bl	8007d60 <get_sequence_step_timeout>
 8008464:	4603      	mov	r3, r0
 8008466:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800846e:	6979      	ldr	r1, [r7, #20]
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8008474:	441a      	add	r2, r3
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800847a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800847e:	2b00      	cmp	r3, #0
 8008480:	d103      	bne.n	800848a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800848a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800848e:	4618      	mov	r0, r3
 8008490:	3740      	adds	r7, #64	; 0x40
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
	...

08008498 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084a2:	2300      	movs	r3, #0
 80084a4:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80084aa:	e0c6      	b.n	800863a <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	683a      	ldr	r2, [r7, #0]
 80084b0:	4413      	add	r3, r2
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	74fb      	strb	r3, [r7, #19]
		Index++;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	3301      	adds	r3, #1
 80084ba:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 80084bc:	7cfb      	ldrb	r3, [r7, #19]
 80084be:	2bff      	cmp	r3, #255	; 0xff
 80084c0:	f040 808d 	bne.w	80085de <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	4413      	add	r3, r2
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	747b      	strb	r3, [r7, #17]
			Index++;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	3301      	adds	r3, #1
 80084d2:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 80084d4:	7c7b      	ldrb	r3, [r7, #17]
 80084d6:	2b03      	cmp	r3, #3
 80084d8:	d87e      	bhi.n	80085d8 <VL53L0X_load_tuning_settings+0x140>
 80084da:	a201      	add	r2, pc, #4	; (adr r2, 80084e0 <VL53L0X_load_tuning_settings+0x48>)
 80084dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e0:	080084f1 	.word	0x080084f1
 80084e4:	0800852b 	.word	0x0800852b
 80084e8:	08008565 	.word	0x08008565
 80084ec:	0800859f 	.word	0x0800859f
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	683a      	ldr	r2, [r7, #0]
 80084f4:	4413      	add	r3, r2
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	743b      	strb	r3, [r7, #16]
				Index++;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	3301      	adds	r3, #1
 80084fe:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	4413      	add	r3, r2
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	73fb      	strb	r3, [r7, #15]
				Index++;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	3301      	adds	r3, #1
 800850e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008510:	7c3b      	ldrb	r3, [r7, #16]
 8008512:	b29b      	uxth	r3, r3
 8008514:	021b      	lsls	r3, r3, #8
 8008516:	b29a      	uxth	r2, r3
 8008518:	7bfb      	ldrb	r3, [r7, #15]
 800851a:	b29b      	uxth	r3, r3
 800851c:	4413      	add	r3, r2
 800851e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	89ba      	ldrh	r2, [r7, #12]
 8008524:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8008528:	e087      	b.n	800863a <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	4413      	add	r3, r2
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	743b      	strb	r3, [r7, #16]
				Index++;
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	3301      	adds	r3, #1
 8008538:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	4413      	add	r3, r2
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	3301      	adds	r3, #1
 8008548:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800854a:	7c3b      	ldrb	r3, [r7, #16]
 800854c:	b29b      	uxth	r3, r3
 800854e:	021b      	lsls	r3, r3, #8
 8008550:	b29a      	uxth	r2, r3
 8008552:	7bfb      	ldrb	r3, [r7, #15]
 8008554:	b29b      	uxth	r3, r3
 8008556:	4413      	add	r3, r2
 8008558:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	89ba      	ldrh	r2, [r7, #12]
 800855e:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8008562:	e06a      	b.n	800863a <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	4413      	add	r3, r2
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	743b      	strb	r3, [r7, #16]
				Index++;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	3301      	adds	r3, #1
 8008572:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	683a      	ldr	r2, [r7, #0]
 8008578:	4413      	add	r3, r2
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	3301      	adds	r3, #1
 8008582:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008584:	7c3b      	ldrb	r3, [r7, #16]
 8008586:	b29b      	uxth	r3, r3
 8008588:	021b      	lsls	r3, r3, #8
 800858a:	b29a      	uxth	r2, r3
 800858c:	7bfb      	ldrb	r3, [r7, #15]
 800858e:	b29b      	uxth	r3, r3
 8008590:	4413      	add	r3, r2
 8008592:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	89ba      	ldrh	r2, [r7, #12]
 8008598:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800859c:	e04d      	b.n	800863a <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	683a      	ldr	r2, [r7, #0]
 80085a2:	4413      	add	r3, r2
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	743b      	strb	r3, [r7, #16]
				Index++;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	3301      	adds	r3, #1
 80085ac:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	4413      	add	r3, r2
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	73fb      	strb	r3, [r7, #15]
				Index++;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	3301      	adds	r3, #1
 80085bc:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80085be:	7c3b      	ldrb	r3, [r7, #16]
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	021b      	lsls	r3, r3, #8
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	7bfb      	ldrb	r3, [r7, #15]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	4413      	add	r3, r2
 80085cc:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	89ba      	ldrh	r2, [r7, #12]
 80085d2:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 80085d6:	e030      	b.n	800863a <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80085d8:	23fc      	movs	r3, #252	; 0xfc
 80085da:	77fb      	strb	r3, [r7, #31]
 80085dc:	e02d      	b.n	800863a <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 80085de:	7cfb      	ldrb	r3, [r7, #19]
 80085e0:	2b04      	cmp	r3, #4
 80085e2:	d828      	bhi.n	8008636 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	4413      	add	r3, r2
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	74bb      	strb	r3, [r7, #18]
			Index++;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	3301      	adds	r3, #1
 80085f2:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80085f4:	2300      	movs	r3, #0
 80085f6:	61bb      	str	r3, [r7, #24]
 80085f8:	e00f      	b.n	800861a <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	683a      	ldr	r2, [r7, #0]
 80085fe:	4413      	add	r3, r2
 8008600:	7819      	ldrb	r1, [r3, #0]
 8008602:	f107 0208 	add.w	r2, r7, #8
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	4413      	add	r3, r2
 800860a:	460a      	mov	r2, r1
 800860c:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	3301      	adds	r3, #1
 8008612:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	3301      	adds	r3, #1
 8008618:	61bb      	str	r3, [r7, #24]
 800861a:	7cfb      	ldrb	r3, [r7, #19]
 800861c:	69ba      	ldr	r2, [r7, #24]
 800861e:	429a      	cmp	r2, r3
 8008620:	dbeb      	blt.n	80085fa <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8008622:	7cfb      	ldrb	r3, [r7, #19]
 8008624:	f107 0208 	add.w	r2, r7, #8
 8008628:	7cb9      	ldrb	r1, [r7, #18]
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7fa fa1c 	bl	8002a68 <VL53L0X_WriteMulti>
 8008630:	4603      	mov	r3, r0
 8008632:	77fb      	strb	r3, [r7, #31]
 8008634:	e001      	b.n	800863a <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008636:	23fc      	movs	r3, #252	; 0xfc
 8008638:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	4413      	add	r3, r2
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d004      	beq.n	8008650 <VL53L0X_load_tuning_settings+0x1b8>
 8008646:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800864a:	2b00      	cmp	r3, #0
 800864c:	f43f af2e 	beq.w	80084ac <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008650:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3720      	adds	r7, #32
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b088      	sub	sp, #32
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008668:	2300      	movs	r3, #0
 800866a:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8008672:	f107 0313 	add.w	r3, r7, #19
 8008676:	4619      	mov	r1, r3
 8008678:	68f8      	ldr	r0, [r7, #12]
 800867a:	f7fc ffbb 	bl	80055f4 <VL53L0X_GetXTalkCompensationEnable>
 800867e:	4603      	mov	r3, r0
 8008680:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8008682:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d111      	bne.n	80086ae <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800868a:	7cfb      	ldrb	r3, [r7, #19]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00e      	beq.n	80086ae <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6a1b      	ldr	r3, [r3, #32]
 8008694:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	8a9b      	ldrh	r3, [r3, #20]
 800869a:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	fb02 f303 	mul.w	r3, r2, r3
 80086a2:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	3380      	adds	r3, #128	; 0x80
 80086a8:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 80086ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3720      	adds	r7, #32
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b086      	sub	sp, #24
 80086be:	af00      	add	r7, sp, #0
 80086c0:	60f8      	str	r0, [r7, #12]
 80086c2:	60b9      	str	r1, [r7, #8]
 80086c4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086c6:	2300      	movs	r3, #0
 80086c8:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 80086d2:	f107 0310 	add.w	r3, r7, #16
 80086d6:	461a      	mov	r2, r3
 80086d8:	68b9      	ldr	r1, [r7, #8]
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f7ff ffbe 	bl	800865c <VL53L0X_get_total_xtalk_rate>
 80086e0:	4603      	mov	r3, r0
 80086e2:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80086e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d105      	bne.n	80086f8 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	441a      	add	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	601a      	str	r2, [r3, #0]

	return Status;
 80086f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3718      	adds	r7, #24
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b09a      	sub	sp, #104	; 0x68
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
 8008710:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8008712:	2312      	movs	r3, #18
 8008714:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8008716:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800871a:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800871c:	2342      	movs	r3, #66	; 0x42
 800871e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8008720:	2306      	movs	r3, #6
 8008722:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8008724:	2307      	movs	r3, #7
 8008726:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008728:	2300      	movs	r3, #0
 800872a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 8008734:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800873c:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800873e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008742:	fb02 f303 	mul.w	r3, r2, r3
 8008746:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8008748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800874a:	3380      	adds	r3, #128	; 0x80
 800874c:	0a1b      	lsrs	r3, r3, #8
 800874e:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8008750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008752:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008754:	fb02 f303 	mul.w	r3, r2, r3
 8008758:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800875a:	2300      	movs	r3, #0
 800875c:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d01a      	beq.n	800879a <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	029b      	lsls	r3, r3, #10
 8008768:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800876e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008770:	4413      	add	r3, r2
 8008772:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8008774:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	fbb2 f3f3 	udiv	r3, r2, r3
 800877c:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800877e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008780:	4613      	mov	r3, r2
 8008782:	005b      	lsls	r3, r3, #1
 8008784:	4413      	add	r3, r2
 8008786:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8008788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800878a:	fb03 f303 	mul.w	r3, r3, r3
 800878e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8008790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008792:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008796:	0c1b      	lsrs	r3, r3, #16
 8008798:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800879e:	fb02 f303 	mul.w	r3, r2, r3
 80087a2:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 80087a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80087aa:	0c1b      	lsrs	r3, r3, #16
 80087ac:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 80087ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b0:	fb03 f303 	mul.w	r3, r3, r3
 80087b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 80087b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80087bc:	0c1b      	lsrs	r3, r3, #16
 80087be:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 80087c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087c2:	085a      	lsrs	r2, r3, #1
 80087c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c6:	441a      	add	r2, r3
 80087c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ce:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 80087d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087d4:	fb02 f303 	mul.w	r3, r2, r3
 80087d8:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 80087da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087e0:	d302      	bcc.n	80087e8 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 80087e2:	4b54      	ldr	r3, [pc, #336]	; (8008934 <VL53L0X_calc_dmax+0x230>)
 80087e4:	663b      	str	r3, [r7, #96]	; 0x60
 80087e6:	e015      	b.n	8008814 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80087e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ea:	085a      	lsrs	r2, r3, #1
 80087ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087ee:	441a      	add	r2, r3
 80087f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80087f6:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80087f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087fc:	fb02 f303 	mul.w	r3, r2, r3
 8008800:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8008802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008804:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008808:	0c1b      	lsrs	r3, r3, #16
 800880a:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800880c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800880e:	fb03 f303 	mul.w	r3, r3, r3
 8008812:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8008814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008816:	039b      	lsls	r3, r3, #14
 8008818:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800881c:	4a46      	ldr	r2, [pc, #280]	; (8008938 <VL53L0X_calc_dmax+0x234>)
 800881e:	fba2 2303 	umull	r2, r3, r2, r3
 8008822:	099b      	lsrs	r3, r3, #6
 8008824:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	fb03 f303 	mul.w	r3, r3, r3
 800882c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800882e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008830:	fb03 f303 	mul.w	r3, r3, r3
 8008834:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	3308      	adds	r3, #8
 800883a:	091b      	lsrs	r3, r3, #4
 800883c:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800883e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008840:	6a3b      	ldr	r3, [r7, #32]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8008846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008848:	4613      	mov	r3, r2
 800884a:	005b      	lsls	r3, r3, #1
 800884c:	4413      	add	r3, r2
 800884e:	011b      	lsls	r3, r3, #4
 8008850:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008858:	0b9b      	lsrs	r3, r3, #14
 800885a:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800885c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800885e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008860:	4413      	add	r3, r2
 8008862:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8008864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008866:	085b      	lsrs	r3, r3, #1
 8008868:	69ba      	ldr	r2, [r7, #24]
 800886a:	4413      	add	r3, r2
 800886c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800886e:	69ba      	ldr	r2, [r7, #24]
 8008870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008872:	fbb2 f3f3 	udiv	r3, r2, r3
 8008876:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	039b      	lsls	r3, r3, #14
 800887c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	085b      	lsrs	r3, r3, #1
 8008882:	69ba      	ldr	r2, [r7, #24]
 8008884:	4413      	add	r3, r2
 8008886:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8008888:	69ba      	ldr	r2, [r7, #24]
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008890:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008896:	fb02 f303 	mul.w	r3, r2, r3
 800889a:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80088a2:	4a25      	ldr	r2, [pc, #148]	; (8008938 <VL53L0X_calc_dmax+0x234>)
 80088a4:	fba2 2303 	umull	r2, r3, r2, r3
 80088a8:	099b      	lsrs	r3, r3, #6
 80088aa:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	011b      	lsls	r3, r3, #4
 80088b0:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80088b8:	4a1f      	ldr	r2, [pc, #124]	; (8008938 <VL53L0X_calc_dmax+0x234>)
 80088ba:	fba2 2303 	umull	r2, r3, r2, r3
 80088be:	099b      	lsrs	r3, r3, #6
 80088c0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 80088c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088c4:	3380      	adds	r3, #128	; 0x80
 80088c6:	0a1b      	lsrs	r3, r3, #8
 80088c8:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d008      	beq.n	80088e2 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	085a      	lsrs	r2, r3, #1
 80088d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d6:	441a      	add	r2, r3
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	fbb2 f3f3 	udiv	r3, r2, r3
 80088de:	65bb      	str	r3, [r7, #88]	; 0x58
 80088e0:	e001      	b.n	80088e6 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 80088e2:	2300      	movs	r3, #0
 80088e4:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80088e6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80088e8:	f7fe fc41 	bl	800716e <VL53L0X_isqrt>
 80088ec:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d008      	beq.n	8008906 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	085a      	lsrs	r2, r3, #1
 80088f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fa:	441a      	add	r2, r3
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008902:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008904:	e001      	b.n	800890a <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8008906:	2300      	movs	r3, #0
 8008908:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800890a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800890c:	f7fe fc2f 	bl	800716e <VL53L0X_isqrt>
 8008910:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 8008912:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008914:	693a      	ldr	r2, [r7, #16]
 8008916:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800891c:	429a      	cmp	r2, r3
 800891e:	d902      	bls.n	8008926 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8008920:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008922:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008924:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8008926:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800892a:	4618      	mov	r0, r3
 800892c:	3768      	adds	r7, #104	; 0x68
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	fff00000 	.word	0xfff00000
 8008938:	10624dd3 	.word	0x10624dd3

0800893c <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b0b4      	sub	sp, #208	; 0xd0
 8008940:	af04      	add	r7, sp, #16
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	607a      	str	r2, [r7, #4]
 8008948:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800894a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800894e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8008952:	f44f 7316 	mov.w	r3, #600	; 0x258
 8008956:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800895a:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800895e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8008962:	f241 235c 	movw	r3, #4700	; 0x125c
 8008966:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800896a:	4b9e      	ldr	r3, [pc, #632]	; (8008be4 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800896c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8008970:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008974:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8008976:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800897a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800897e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008982:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8008984:	4b98      	ldr	r3, [pc, #608]	; (8008be8 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8008986:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8008988:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800898c:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800898e:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8008992:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8008994:	f240 6377 	movw	r3, #1655	; 0x677
 8008998:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800899a:	2300      	movs	r3, #0
 800899c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6a1b      	ldr	r3, [r3, #32]
 80089a4:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80089ae:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 80089b2:	0c1b      	lsrs	r3, r3, #16
 80089b4:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 80089bc:	f107 0310 	add.w	r3, r7, #16
 80089c0:	461a      	mov	r2, r3
 80089c2:	68b9      	ldr	r1, [r7, #8]
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f7ff fe78 	bl	80086ba <VL53L0X_get_total_signal_rate>
 80089ca:	4603      	mov	r3, r0
 80089cc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80089d0:	f107 0314 	add.w	r3, r7, #20
 80089d4:	461a      	mov	r2, r3
 80089d6:	68b9      	ldr	r1, [r7, #8]
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	f7ff fe3f 	bl	800865c <VL53L0X_get_total_xtalk_rate>
 80089de:	4603      	mov	r3, r0
 80089e0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80089ea:	fb02 f303 	mul.w	r3, r2, r3
 80089ee:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80089f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089f2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80089f6:	0c1b      	lsrs	r3, r3, #16
 80089f8:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a00:	fb02 f303 	mul.w	r3, r2, r3
 8008a04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8008a08:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d902      	bls.n	8008a18 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8008a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8008a18:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d168      	bne.n	8008af2 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008a26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8008a30:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008a34:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008a38:	461a      	mov	r2, r3
 8008a3a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f7ff f93a 	bl	8007cb8 <VL53L0X_calc_timeout_mclks>
 8008a44:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008a4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8008a56:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008a5a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8008a5e:	461a      	mov	r2, r3
 8008a60:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f7ff f927 	bl	8007cb8 <VL53L0X_calc_timeout_mclks>
 8008a6a:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8008a6c:	2303      	movs	r3, #3
 8008a6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8008a72:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008a76:	2b08      	cmp	r3, #8
 8008a78:	d102      	bne.n	8008a80 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8008a7a:	2302      	movs	r3, #2
 8008a7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8008a80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a84:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8008a86:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008a8a:	fb02 f303 	mul.w	r3, r2, r3
 8008a8e:	02db      	lsls	r3, r3, #11
 8008a90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008a94:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a98:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008a9c:	4a53      	ldr	r2, [pc, #332]	; (8008bec <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa2:	099b      	lsrs	r3, r3, #6
 8008aa4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8008aa8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008aac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008aae:	fb02 f303 	mul.w	r3, r2, r3
 8008ab2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008ab6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008aba:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008abe:	4a4b      	ldr	r2, [pc, #300]	; (8008bec <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac4:	099b      	lsrs	r3, r3, #6
 8008ac6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	3380      	adds	r3, #128	; 0x80
 8008ace:	0a1b      	lsrs	r3, r3, #8
 8008ad0:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8008ad2:	693a      	ldr	r2, [r7, #16]
 8008ad4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ad8:	fb02 f303 	mul.w	r3, r2, r3
 8008adc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8008ae0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008ae4:	3380      	adds	r3, #128	; 0x80
 8008ae6:	0a1b      	lsrs	r3, r3, #8
 8008ae8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	021b      	lsls	r3, r3, #8
 8008af0:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8008af2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d002      	beq.n	8008b00 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8008afa:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8008afe:	e15e      	b.n	8008dbe <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8008b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10c      	bne.n	8008b20 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b0c:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b14:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	601a      	str	r2, [r3, #0]
 8008b1e:	e14c      	b.n	8008dba <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8008b20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d102      	bne.n	8008b2e <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8008b2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008b32:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8008b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b36:	041a      	lsls	r2, r3, #16
 8008b38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8008b42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008b46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d902      	bls.n	8008b52 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8008b4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8008b52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008b56:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008b5a:	fb02 f303 	mul.w	r3, r2, r3
 8008b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8008b62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008b66:	4613      	mov	r3, r2
 8008b68:	005b      	lsls	r3, r3, #1
 8008b6a:	4413      	add	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7fe fafd 	bl	800716e <VL53L0X_isqrt>
 8008b74:	4603      	mov	r3, r0
 8008b76:	005b      	lsls	r3, r3, #1
 8008b78:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	891b      	ldrh	r3, [r3, #8]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b82:	fb02 f303 	mul.w	r3, r2, r3
 8008b86:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b8a:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8008b8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b90:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008b92:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8008b94:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008b98:	4a14      	ldr	r2, [pc, #80]	; (8008bec <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b9e:	099b      	lsrs	r3, r3, #6
 8008ba0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8008ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ba4:	041b      	lsls	r3, r3, #16
 8008ba6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008baa:	4a10      	ldr	r2, [pc, #64]	; (8008bec <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008bac:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb0:	099b      	lsrs	r3, r3, #6
 8008bb2:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8008bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bb6:	021b      	lsls	r3, r3, #8
 8008bb8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8008bba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	bfb8      	it	lt
 8008bc6:	425b      	neglt	r3, r3
 8008bc8:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8008bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bcc:	021b      	lsls	r3, r3, #8
 8008bce:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	7e1b      	ldrb	r3, [r3, #24]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00b      	beq.n	8008bf0 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8008bd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008be0:	e033      	b.n	8008c4a <VL53L0X_calc_sigma_estimate+0x30e>
 8008be2:	bf00      	nop
 8008be4:	028f87ae 	.word	0x028f87ae
 8008be8:	0006999a 	.word	0x0006999a
 8008bec:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8008bf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008bf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8008bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c00:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8008c04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c08:	fb02 f303 	mul.w	r3, r2, r3
 8008c0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8008c10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008c14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c16:	4413      	add	r3, r2
 8008c18:	0c1b      	lsrs	r3, r3, #16
 8008c1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8008c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c22:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8008c26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8008c2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c2e:	085b      	lsrs	r3, r3, #1
 8008c30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8008c34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c38:	fb03 f303 	mul.w	r3, r3, r3
 8008c3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8008c40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c44:	0b9b      	lsrs	r3, r3, #14
 8008c46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8008c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c50:	fb02 f303 	mul.w	r3, r2, r3
 8008c54:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8008c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008c5c:	0c1b      	lsrs	r3, r3, #16
 8008c5e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8008c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c62:	fb03 f303 	mul.w	r3, r3, r3
 8008c66:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8008c68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008c6c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8008c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c70:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8008c74:	0c1b      	lsrs	r3, r3, #16
 8008c76:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8008c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c7a:	fb03 f303 	mul.w	r3, r3, r3
 8008c7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8008c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c84:	4413      	add	r3, r2
 8008c86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8008c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c8a:	f7fe fa70 	bl	800716e <VL53L0X_isqrt>
 8008c8e:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8008c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c92:	041b      	lsls	r3, r3, #16
 8008c94:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8008c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c98:	3332      	adds	r3, #50	; 0x32
 8008c9a:	4a4b      	ldr	r2, [pc, #300]	; (8008dc8 <VL53L0X_calc_sigma_estimate+0x48c>)
 8008c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca0:	095a      	lsrs	r2, r3, #5
 8008ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8008cac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008cb0:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8008cb4:	fb02 f303 	mul.w	r3, r2, r3
 8008cb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8008cbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008cc0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8008cc4:	3308      	adds	r3, #8
 8008cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8008cca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008cce:	4a3f      	ldr	r2, [pc, #252]	; (8008dcc <VL53L0X_calc_sigma_estimate+0x490>)
 8008cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd4:	0b5b      	lsrs	r3, r3, #13
 8008cd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8008cda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008cde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d902      	bls.n	8008cea <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8008ce4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ce6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8008cea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008cee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008cf2:	4413      	add	r3, r2
 8008cf4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8008cf8:	4a35      	ldr	r2, [pc, #212]	; (8008dd0 <VL53L0X_calc_sigma_estimate+0x494>)
 8008cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8008cfe:	099b      	lsrs	r3, r3, #6
 8008d00:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8008d02:	6a3b      	ldr	r3, [r7, #32]
 8008d04:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8008d06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d0a:	441a      	add	r2, r3
 8008d0c:	6a3b      	ldr	r3, [r7, #32]
 8008d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d12:	4618      	mov	r0, r3
 8008d14:	f7fe fa2b 	bl	800716e <VL53L0X_isqrt>
 8008d18:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	021b      	lsls	r3, r3, #8
 8008d1e:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008d26:	4a2a      	ldr	r2, [pc, #168]	; (8008dd0 <VL53L0X_calc_sigma_estimate+0x494>)
 8008d28:	fba2 2303 	umull	r2, r3, r2, r3
 8008d2c:	099b      	lsrs	r3, r3, #6
 8008d2e:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8008d30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d34:	fb03 f303 	mul.w	r3, r3, r3
 8008d38:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	fb03 f303 	mul.w	r3, r3, r3
 8008d40:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8008d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d46:	4413      	add	r3, r2
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7fe fa10 	bl	800716e <VL53L0X_isqrt>
 8008d4e:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008d56:	fb02 f303 	mul.w	r3, r2, r3
 8008d5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8008d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d009      	beq.n	8008d78 <VL53L0X_calc_sigma_estimate+0x43c>
 8008d64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d005      	beq.n	8008d78 <VL53L0X_calc_sigma_estimate+0x43c>
 8008d6c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008d70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d903      	bls.n	8008d80 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8008d78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008d86:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8008d92:	6939      	ldr	r1, [r7, #16]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	9303      	str	r3, [sp, #12]
 8008d98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d9c:	9302      	str	r3, [sp, #8]
 8008d9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008da2:	9301      	str	r3, [sp, #4]
 8008da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008da6:	9300      	str	r3, [sp, #0]
 8008da8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008dac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f7ff fca8 	bl	8008704 <VL53L0X_calc_dmax>
 8008db4:	4603      	mov	r3, r0
 8008db6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008dba:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	37c0      	adds	r7, #192	; 0xc0
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	51eb851f 	.word	0x51eb851f
 8008dcc:	d1b71759 	.word	0xd1b71759
 8008dd0:	10624dd3 	.word	0x10624dd3

08008dd4 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b090      	sub	sp, #64	; 0x40
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	607a      	str	r2, [r7, #4]
 8008dde:	461a      	mov	r2, r3
 8008de0:	460b      	mov	r3, r1
 8008de2:	72fb      	strb	r3, [r7, #11]
 8008de4:	4613      	mov	r3, r2
 8008de6:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008de8:	2300      	movs	r3, #0
 8008dea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8008df4:	2300      	movs	r3, #0
 8008df6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8008e00:	2300      	movs	r3, #0
 8008e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8008e12:	2300      	movs	r3, #0
 8008e14:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8008e22:	2300      	movs	r3, #0
 8008e24:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8008e26:	7afb      	ldrb	r3, [r7, #11]
 8008e28:	10db      	asrs	r3, r3, #3
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	f003 030f 	and.w	r3, r3, #15
 8008e30:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8008e34:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d017      	beq.n	8008e6c <VL53L0X_get_pal_range_status+0x98>
 8008e3c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e40:	2b05      	cmp	r3, #5
 8008e42:	d013      	beq.n	8008e6c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8008e44:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e48:	2b07      	cmp	r3, #7
 8008e4a:	d00f      	beq.n	8008e6c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8008e4c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e50:	2b0c      	cmp	r3, #12
 8008e52:	d00b      	beq.n	8008e6c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8008e54:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e58:	2b0d      	cmp	r3, #13
 8008e5a:	d007      	beq.n	8008e6c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8008e5c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e60:	2b0e      	cmp	r3, #14
 8008e62:	d003      	beq.n	8008e6c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8008e64:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008e68:	2b0f      	cmp	r3, #15
 8008e6a:	d103      	bne.n	8008e74 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008e72:	e002      	b.n	8008e7a <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8008e74:	2300      	movs	r3, #0
 8008e76:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008e7a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d109      	bne.n	8008e96 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008e82:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8008e86:	461a      	mov	r2, r3
 8008e88:	2100      	movs	r1, #0
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	f7fc fc86 	bl	800579c <VL53L0X_GetLimitCheckEnable>
 8008e90:	4603      	mov	r3, r0
 8008e92:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8008e96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d02e      	beq.n	8008efc <VL53L0X_get_pal_range_status+0x128>
 8008e9e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d12a      	bne.n	8008efc <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8008ea6:	f107 0310 	add.w	r3, r7, #16
 8008eaa:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008eae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008eb0:	68f8      	ldr	r0, [r7, #12]
 8008eb2:	f7ff fd43 	bl	800893c <VL53L0X_calc_sigma_estimate>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8008ebc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d103      	bne.n	8008ecc <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008eca:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8008ecc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d113      	bne.n	8008efc <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8008ed4:	f107 0320 	add.w	r3, r7, #32
 8008ed8:	461a      	mov	r2, r3
 8008eda:	2100      	movs	r1, #0
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f7fc fce3 	bl	80058a8 <VL53L0X_GetLimitCheckValue>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d006      	beq.n	8008efc <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8008eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef0:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d902      	bls.n	8008efc <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008efc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d109      	bne.n	8008f18 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008f04:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8008f08:	461a      	mov	r2, r3
 8008f0a:	2102      	movs	r1, #2
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f7fc fc45 	bl	800579c <VL53L0X_GetLimitCheckEnable>
 8008f12:	4603      	mov	r3, r0
 8008f14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8008f18:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d044      	beq.n	8008faa <VL53L0X_get_pal_range_status+0x1d6>
 8008f20:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d140      	bne.n	8008faa <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008f28:	f107 031c 	add.w	r3, r7, #28
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	2102      	movs	r1, #2
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f7fc fcb9 	bl	80058a8 <VL53L0X_GetLimitCheckValue>
 8008f36:	4603      	mov	r3, r0
 8008f38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8008f3c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d107      	bne.n	8008f54 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008f44:	2201      	movs	r2, #1
 8008f46:	21ff      	movs	r1, #255	; 0xff
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f7f9 fde9 	bl	8002b20 <VL53L0X_WrByte>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8008f54:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d109      	bne.n	8008f70 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8008f5c:	f107 0316 	add.w	r3, r7, #22
 8008f60:	461a      	mov	r2, r3
 8008f62:	21b6      	movs	r1, #182	; 0xb6
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f7f9 feb9 	bl	8002cdc <VL53L0X_RdWord>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8008f70:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d107      	bne.n	8008f88 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008f78:	2200      	movs	r2, #0
 8008f7a:	21ff      	movs	r1, #255	; 0xff
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f7f9 fdcf 	bl	8002b20 <VL53L0X_WrByte>
 8008f82:	4603      	mov	r3, r0
 8008f84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8008f88:	8afb      	ldrh	r3, [r7, #22]
 8008f8a:	025b      	lsls	r3, r3, #9
 8008f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f92:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d006      	beq.n	8008faa <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8008f9c:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8008f9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d902      	bls.n	8008faa <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008faa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d109      	bne.n	8008fc6 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008fb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	2103      	movs	r1, #3
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f7fc fbee 	bl	800579c <VL53L0X_GetLimitCheckEnable>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8008fc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d023      	beq.n	8009016 <VL53L0X_get_pal_range_status+0x242>
 8008fce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d11f      	bne.n	8009016 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8008fd6:	893b      	ldrh	r3, [r7, #8]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d102      	bne.n	8008fe2 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	637b      	str	r3, [r7, #52]	; 0x34
 8008fe0:	e005      	b.n	8008fee <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	021a      	lsls	r2, r3, #8
 8008fe6:	893b      	ldrh	r3, [r7, #8]
 8008fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fec:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008fee:	f107 0318 	add.w	r3, r7, #24
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	2103      	movs	r1, #3
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f7fc fc56 	bl	80058a8 <VL53L0X_GetLimitCheckValue>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d006      	beq.n	8009016 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8009008:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800900a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800900c:	429a      	cmp	r2, r3
 800900e:	d202      	bcs.n	8009016 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8009010:	2301      	movs	r3, #1
 8009012:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009016:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800901a:	2b00      	cmp	r3, #0
 800901c:	d14a      	bne.n	80090b4 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800901e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009022:	2b01      	cmp	r3, #1
 8009024:	d103      	bne.n	800902e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8009026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009028:	22ff      	movs	r2, #255	; 0xff
 800902a:	701a      	strb	r2, [r3, #0]
 800902c:	e042      	b.n	80090b4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800902e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009032:	2b01      	cmp	r3, #1
 8009034:	d007      	beq.n	8009046 <VL53L0X_get_pal_range_status+0x272>
 8009036:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800903a:	2b02      	cmp	r3, #2
 800903c:	d003      	beq.n	8009046 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800903e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009042:	2b03      	cmp	r3, #3
 8009044:	d103      	bne.n	800904e <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8009046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009048:	2205      	movs	r2, #5
 800904a:	701a      	strb	r2, [r3, #0]
 800904c:	e032      	b.n	80090b4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800904e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009052:	2b06      	cmp	r3, #6
 8009054:	d003      	beq.n	800905e <VL53L0X_get_pal_range_status+0x28a>
 8009056:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800905a:	2b09      	cmp	r3, #9
 800905c:	d103      	bne.n	8009066 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800905e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009060:	2204      	movs	r2, #4
 8009062:	701a      	strb	r2, [r3, #0]
 8009064:	e026      	b.n	80090b4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8009066:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800906a:	2b08      	cmp	r3, #8
 800906c:	d007      	beq.n	800907e <VL53L0X_get_pal_range_status+0x2aa>
 800906e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009072:	2b0a      	cmp	r3, #10
 8009074:	d003      	beq.n	800907e <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8009076:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800907a:	2b01      	cmp	r3, #1
 800907c:	d103      	bne.n	8009086 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800907e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009080:	2203      	movs	r2, #3
 8009082:	701a      	strb	r2, [r3, #0]
 8009084:	e016      	b.n	80090b4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8009086:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800908a:	2b04      	cmp	r3, #4
 800908c:	d003      	beq.n	8009096 <VL53L0X_get_pal_range_status+0x2c2>
 800908e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009092:	2b01      	cmp	r3, #1
 8009094:	d103      	bne.n	800909e <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8009096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009098:	2202      	movs	r2, #2
 800909a:	701a      	strb	r2, [r3, #0]
 800909c:	e00a      	b.n	80090b4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800909e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d103      	bne.n	80090ae <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80090a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090a8:	2201      	movs	r2, #1
 80090aa:	701a      	strb	r2, [r3, #0]
 80090ac:	e002      	b.n	80090b4 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80090ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090b0:	2200      	movs	r2, #0
 80090b2:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80090b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d102      	bne.n	80090c2 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80090bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090be:	2200      	movs	r2, #0
 80090c0:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80090c2:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80090c6:	461a      	mov	r2, r3
 80090c8:	2101      	movs	r1, #1
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	f7fc fb66 	bl	800579c <VL53L0X_GetLimitCheckEnable>
 80090d0:	4603      	mov	r3, r0
 80090d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80090d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d14f      	bne.n	800917e <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80090de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d003      	beq.n	80090ee <VL53L0X_get_pal_range_status+0x31a>
 80090e6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d103      	bne.n	80090f6 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 80090ee:	2301      	movs	r3, #1
 80090f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80090f4:	e002      	b.n	80090fc <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 80090f6:	2300      	movs	r3, #0
 80090f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009102:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8009106:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800910a:	2b04      	cmp	r3, #4
 800910c:	d003      	beq.n	8009116 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800910e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8009112:	2b00      	cmp	r3, #0
 8009114:	d103      	bne.n	800911e <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8009116:	2301      	movs	r3, #1
 8009118:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800911c:	e002      	b.n	8009124 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800912a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800912e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009132:	2b00      	cmp	r3, #0
 8009134:	d003      	beq.n	800913e <VL53L0X_get_pal_range_status+0x36a>
 8009136:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800913a:	2b01      	cmp	r3, #1
 800913c:	d103      	bne.n	8009146 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800913e:	2301      	movs	r3, #1
 8009140:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009144:	e002      	b.n	800914c <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8009146:	2300      	movs	r3, #0
 8009148:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009152:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8009156:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800915a:	2b00      	cmp	r3, #0
 800915c:	d003      	beq.n	8009166 <VL53L0X_get_pal_range_status+0x392>
 800915e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009162:	2b01      	cmp	r3, #1
 8009164:	d103      	bne.n	800916e <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8009166:	2301      	movs	r3, #1
 8009168:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800916c:	e002      	b.n	8009174 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800916e:	2300      	movs	r3, #0
 8009170:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800917a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800917e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8009182:	4618      	mov	r0, r3
 8009184:	3740      	adds	r7, #64	; 0x40
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 800918a:	b480      	push	{r7}
 800918c:	af00      	add	r7, sp, #0
  while (1);
 800918e:	e7fe      	b.n	800918e <BSP_ErrorHandler+0x4>

08009190 <BSP_LED_Init>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b088      	sub	sp, #32
 8009194:	af00      	add	r7, sp, #0
 8009196:	4603      	mov	r3, r0
 8009198:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;

  if (Led == LED2)
 800919a:	79fb      	ldrb	r3, [r7, #7]
 800919c:	2b01      	cmp	r3, #1
 800919e:	d124      	bne.n	80091ea <BSP_LED_Init+0x5a>
  {
    /* Enable the GPIO_LED clock */
    LED2_GPIO_CLK_ENABLE();
 80091a0:	4b1f      	ldr	r3, [pc, #124]	; (8009220 <BSP_LED_Init+0x90>)
 80091a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091a4:	4a1e      	ldr	r2, [pc, #120]	; (8009220 <BSP_LED_Init+0x90>)
 80091a6:	f043 0302 	orr.w	r3, r3, #2
 80091aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80091ac:	4b1c      	ldr	r3, [pc, #112]	; (8009220 <BSP_LED_Init+0x90>)
 80091ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091b0:	f003 0302 	and.w	r3, r3, #2
 80091b4:	60bb      	str	r3, [r7, #8]
 80091b6:	68bb      	ldr	r3, [r7, #8]

    /* Configure the GPIO_LED pin */
    GPIO_InitStructure.Pin = LED_PIN[Led];
 80091b8:	79fb      	ldrb	r3, [r7, #7]
 80091ba:	4a1a      	ldr	r2, [pc, #104]	; (8009224 <BSP_LED_Init+0x94>)
 80091bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80091c2:	2301      	movs	r3, #1
 80091c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 80091c6:	2300      	movs	r3, #0
 80091c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80091ca:	2303      	movs	r3, #3
 80091cc:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStructure);
 80091ce:	f107 030c 	add.w	r3, r7, #12
 80091d2:	4619      	mov	r1, r3
 80091d4:	4814      	ldr	r0, [pc, #80]	; (8009228 <BSP_LED_Init+0x98>)
 80091d6:	f003 fb5f 	bl	800c898 <HAL_GPIO_Init>
    /* By default, turn off LED */
    HAL_GPIO_WritePin(LED2_GPIO_PORT, GPIO_InitStructure.Pin, GPIO_PIN_SET);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	b29b      	uxth	r3, r3
 80091de:	2201      	movs	r2, #1
 80091e0:	4619      	mov	r1, r3
 80091e2:	4811      	ldr	r0, [pc, #68]	; (8009228 <BSP_LED_Init+0x98>)
 80091e4:	f003 fddc 	bl	800cda0 <HAL_GPIO_WritePin>

    /* By default, turn off LED */
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }

}
 80091e8:	e016      	b.n	8009218 <BSP_LED_Init+0x88>
    if (BSP_IO_Init() == IO_ERROR)
 80091ea:	f000 fda3 	bl	8009d34 <BSP_IO_Init>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d101      	bne.n	80091f8 <BSP_LED_Init+0x68>
      BSP_ErrorHandler();
 80091f4:	f7ff ffc9 	bl	800918a <BSP_ErrorHandler>
    BSP_IO_ConfigPin(LED_PIN[Led], IO_MODE_OUTPUT);
 80091f8:	79fb      	ldrb	r3, [r7, #7]
 80091fa:	4a0a      	ldr	r2, [pc, #40]	; (8009224 <BSP_LED_Init+0x94>)
 80091fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009200:	2101      	movs	r1, #1
 8009202:	4618      	mov	r0, r3
 8009204:	f000 fdda 	bl	8009dbc <BSP_IO_ConfigPin>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 8009208:	79fb      	ldrb	r3, [r7, #7]
 800920a:	4a06      	ldr	r2, [pc, #24]	; (8009224 <BSP_LED_Init+0x94>)
 800920c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009210:	2101      	movs	r1, #1
 8009212:	4618      	mov	r0, r3
 8009214:	f000 fdee 	bl	8009df4 <BSP_IO_WritePin>
}
 8009218:	bf00      	nop
 800921a:	3720      	adds	r7, #32
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	40021000 	.word	0x40021000
 8009224:	0801a0e0 	.word	0x0801a0e0
 8009228:	48000400 	.word	0x48000400

0800922c <BSP_LED_On>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	4603      	mov	r3, r0
 8009234:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 8009236:	79fb      	ldrb	r3, [r7, #7]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d109      	bne.n	8009250 <BSP_LED_On+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_RESET);
 800923c:	79fb      	ldrb	r3, [r7, #7]
 800923e:	4a0a      	ldr	r2, [pc, #40]	; (8009268 <BSP_LED_On+0x3c>)
 8009240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009244:	2200      	movs	r2, #0
 8009246:	4619      	mov	r1, r3
 8009248:	4808      	ldr	r0, [pc, #32]	; (800926c <BSP_LED_On+0x40>)
 800924a:	f003 fda9 	bl	800cda0 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
  }
}
 800924e:	e007      	b.n	8009260 <BSP_LED_On+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
 8009250:	79fb      	ldrb	r3, [r7, #7]
 8009252:	4a05      	ldr	r2, [pc, #20]	; (8009268 <BSP_LED_On+0x3c>)
 8009254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009258:	2100      	movs	r1, #0
 800925a:	4618      	mov	r0, r3
 800925c:	f000 fdca 	bl	8009df4 <BSP_IO_WritePin>
}
 8009260:	bf00      	nop
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	0801a0e0 	.word	0x0801a0e0
 800926c:	48000400 	.word	0x48000400

08009270 <BSP_LED_Off>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	4603      	mov	r3, r0
 8009278:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 800927a:	79fb      	ldrb	r3, [r7, #7]
 800927c:	2b01      	cmp	r3, #1
 800927e:	d109      	bne.n	8009294 <BSP_LED_Off+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_SET);
 8009280:	79fb      	ldrb	r3, [r7, #7]
 8009282:	4a0a      	ldr	r2, [pc, #40]	; (80092ac <BSP_LED_Off+0x3c>)
 8009284:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009288:	2201      	movs	r2, #1
 800928a:	4619      	mov	r1, r3
 800928c:	4808      	ldr	r0, [pc, #32]	; (80092b0 <BSP_LED_Off+0x40>)
 800928e:	f003 fd87 	bl	800cda0 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }
}
 8009292:	e007      	b.n	80092a4 <BSP_LED_Off+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 8009294:	79fb      	ldrb	r3, [r7, #7]
 8009296:	4a05      	ldr	r2, [pc, #20]	; (80092ac <BSP_LED_Off+0x3c>)
 8009298:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800929c:	2101      	movs	r1, #1
 800929e:	4618      	mov	r0, r3
 80092a0:	f000 fda8 	bl	8009df4 <BSP_IO_WritePin>
}
 80092a4:	bf00      	nop
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	0801a0e0 	.word	0x0801a0e0
 80092b0:	48000400 	.word	0x48000400

080092b4 <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 80092b8:	4812      	ldr	r0, [pc, #72]	; (8009304 <I2C2_Init+0x50>)
 80092ba:	f004 fb7e 	bl	800d9ba <HAL_I2C_GetState>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d11d      	bne.n	8009300 <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 80092c4:	4b0f      	ldr	r3, [pc, #60]	; (8009304 <I2C2_Init+0x50>)
 80092c6:	4a10      	ldr	r2, [pc, #64]	; (8009308 <I2C2_Init+0x54>)
 80092c8:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 80092ca:	4b0e      	ldr	r3, [pc, #56]	; (8009304 <I2C2_Init+0x50>)
 80092cc:	4a0f      	ldr	r2, [pc, #60]	; (800930c <I2C2_Init+0x58>)
 80092ce:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 80092d0:	4b0c      	ldr	r3, [pc, #48]	; (8009304 <I2C2_Init+0x50>)
 80092d2:	2270      	movs	r2, #112	; 0x70
 80092d4:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80092d6:	4b0b      	ldr	r3, [pc, #44]	; (8009304 <I2C2_Init+0x50>)
 80092d8:	2201      	movs	r2, #1
 80092da:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80092dc:	4b09      	ldr	r3, [pc, #36]	; (8009304 <I2C2_Init+0x50>)
 80092de:	2200      	movs	r2, #0
 80092e0:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 80092e2:	4b08      	ldr	r3, [pc, #32]	; (8009304 <I2C2_Init+0x50>)
 80092e4:	22ff      	movs	r2, #255	; 0xff
 80092e6:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80092e8:	4b06      	ldr	r3, [pc, #24]	; (8009304 <I2C2_Init+0x50>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80092ee:	4b05      	ldr	r3, [pc, #20]	; (8009304 <I2C2_Init+0x50>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 80092f4:	4803      	ldr	r0, [pc, #12]	; (8009304 <I2C2_Init+0x50>)
 80092f6:	f000 f80b 	bl	8009310 <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 80092fa:	4802      	ldr	r0, [pc, #8]	; (8009304 <I2C2_Init+0x50>)
 80092fc:	f003 fd80 	bl	800ce00 <HAL_I2C_Init>
  }
}
 8009300:	bf00      	nop
 8009302:	bd80      	pop	{r7, pc}
 8009304:	200011a4 	.word	0x200011a4
 8009308:	40005800 	.word	0x40005800
 800930c:	40403e5d 	.word	0x40403e5d

08009310 <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b0ae      	sub	sp, #184	; 0xb8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a37      	ldr	r2, [pc, #220]	; (80093fc <I2C2_MspInit+0xec>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d168      	bne.n	80093f4 <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8009322:	2380      	movs	r3, #128	; 0x80
 8009324:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8009326:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800932a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 800932c:	f107 0318 	add.w	r3, r7, #24
 8009330:	4618      	mov	r0, r3
 8009332:	f007 f8d7 	bl	80104e4 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8009336:	4b32      	ldr	r3, [pc, #200]	; (8009400 <I2C2_MspInit+0xf0>)
 8009338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800933a:	4a31      	ldr	r2, [pc, #196]	; (8009400 <I2C2_MspInit+0xf0>)
 800933c:	f043 0302 	orr.w	r3, r3, #2
 8009340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009342:	4b2f      	ldr	r3, [pc, #188]	; (8009400 <I2C2_MspInit+0xf0>)
 8009344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009346:	f003 0302 	and.w	r3, r3, #2
 800934a:	617b      	str	r3, [r7, #20]
 800934c:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 800934e:	4b2c      	ldr	r3, [pc, #176]	; (8009400 <I2C2_MspInit+0xf0>)
 8009350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009352:	4a2b      	ldr	r2, [pc, #172]	; (8009400 <I2C2_MspInit+0xf0>)
 8009354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800935a:	4b29      	ldr	r3, [pc, #164]	; (8009400 <I2C2_MspInit+0xf0>)
 800935c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800935e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009362:	613b      	str	r3, [r7, #16]
 8009364:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 8009366:	2310      	movs	r3, #16
 8009368:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 800936c:	2312      	movs	r3, #18
 800936e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 8009372:	2301      	movs	r3, #1
 8009374:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 8009378:	2303      	movs	r3, #3
 800937a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 800937e:	2304      	movs	r3, #4
 8009380:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 8009384:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009388:	4619      	mov	r1, r3
 800938a:	481e      	ldr	r0, [pc, #120]	; (8009404 <I2C2_MspInit+0xf4>)
 800938c:	f003 fa84 	bl	800c898 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 8009390:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009394:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 8009398:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800939c:	4619      	mov	r1, r3
 800939e:	481a      	ldr	r0, [pc, #104]	; (8009408 <I2C2_MspInit+0xf8>)
 80093a0:	f003 fa7a 	bl	800c898 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 80093a4:	4b16      	ldr	r3, [pc, #88]	; (8009400 <I2C2_MspInit+0xf0>)
 80093a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093a8:	4a15      	ldr	r2, [pc, #84]	; (8009400 <I2C2_MspInit+0xf0>)
 80093aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80093ae:	6593      	str	r3, [r2, #88]	; 0x58
 80093b0:	4b13      	ldr	r3, [pc, #76]	; (8009400 <I2C2_MspInit+0xf0>)
 80093b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093b8:	60fb      	str	r3, [r7, #12]
 80093ba:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 80093bc:	4b10      	ldr	r3, [pc, #64]	; (8009400 <I2C2_MspInit+0xf0>)
 80093be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c0:	4a0f      	ldr	r2, [pc, #60]	; (8009400 <I2C2_MspInit+0xf0>)
 80093c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80093c6:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 80093c8:	4b0d      	ldr	r3, [pc, #52]	; (8009400 <I2C2_MspInit+0xf0>)
 80093ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093cc:	4a0c      	ldr	r2, [pc, #48]	; (8009400 <I2C2_MspInit+0xf0>)
 80093ce:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80093d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 80093d4:	2200      	movs	r2, #0
 80093d6:	2100      	movs	r1, #0
 80093d8:	2021      	movs	r0, #33	; 0x21
 80093da:	f003 f886 	bl	800c4ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 80093de:	2021      	movs	r0, #33	; 0x21
 80093e0:	f003 f89f 	bl	800c522 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 80093e4:	2200      	movs	r2, #0
 80093e6:	2100      	movs	r1, #0
 80093e8:	2022      	movs	r0, #34	; 0x22
 80093ea:	f003 f87e 	bl	800c4ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 80093ee:	2022      	movs	r0, #34	; 0x22
 80093f0:	f003 f897 	bl	800c522 <HAL_NVIC_EnableIRQ>
  }
}
 80093f4:	bf00      	nop
 80093f6:	37b8      	adds	r7, #184	; 0xb8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}
 80093fc:	40005800 	.word	0x40005800
 8009400:	40021000 	.word	0x40021000
 8009404:	48001c00 	.word	0x48001c00
 8009408:	48000400 	.word	0x48000400

0800940c <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 8009410:	4806      	ldr	r0, [pc, #24]	; (800942c <I2C2_DeInit+0x20>)
 8009412:	f004 fad2 	bl	800d9ba <HAL_I2C_GetState>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d005      	beq.n	8009428 <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 800941c:	4803      	ldr	r0, [pc, #12]	; (800942c <I2C2_DeInit+0x20>)
 800941e:	f003 fd7e 	bl	800cf1e <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 8009422:	4802      	ldr	r0, [pc, #8]	; (800942c <I2C2_DeInit+0x20>)
 8009424:	f000 f804 	bl	8009430 <I2C2_MspDeInit>
  }
}
 8009428:	bf00      	nop
 800942a:	bd80      	pop	{r7, pc}
 800942c:	200011a4 	.word	0x200011a4

08009430 <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a1f      	ldr	r2, [pc, #124]	; (80094bc <I2C2_MspDeInit+0x8c>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d138      	bne.n	80094b4 <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8009442:	4b1f      	ldr	r3, [pc, #124]	; (80094c0 <I2C2_MspDeInit+0x90>)
 8009444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009446:	4a1e      	ldr	r2, [pc, #120]	; (80094c0 <I2C2_MspDeInit+0x90>)
 8009448:	f043 0302 	orr.w	r3, r3, #2
 800944c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800944e:	4b1c      	ldr	r3, [pc, #112]	; (80094c0 <I2C2_MspDeInit+0x90>)
 8009450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009452:	f003 0302 	and.w	r3, r3, #2
 8009456:	60fb      	str	r3, [r7, #12]
 8009458:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 800945a:	4b19      	ldr	r3, [pc, #100]	; (80094c0 <I2C2_MspDeInit+0x90>)
 800945c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800945e:	4a18      	ldr	r2, [pc, #96]	; (80094c0 <I2C2_MspDeInit+0x90>)
 8009460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009466:	4b16      	ldr	r3, [pc, #88]	; (80094c0 <I2C2_MspDeInit+0x90>)
 8009468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800946a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800946e:	60bb      	str	r3, [r7, #8]
 8009470:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 8009472:	2110      	movs	r1, #16
 8009474:	4813      	ldr	r0, [pc, #76]	; (80094c4 <I2C2_MspDeInit+0x94>)
 8009476:	f003 fba1 	bl	800cbbc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 800947a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800947e:	4812      	ldr	r0, [pc, #72]	; (80094c8 <I2C2_MspDeInit+0x98>)
 8009480:	f003 fb9c 	bl	800cbbc <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 8009484:	4b0e      	ldr	r3, [pc, #56]	; (80094c0 <I2C2_MspDeInit+0x90>)
 8009486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009488:	4a0d      	ldr	r2, [pc, #52]	; (80094c0 <I2C2_MspDeInit+0x90>)
 800948a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800948e:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8009490:	4b0b      	ldr	r3, [pc, #44]	; (80094c0 <I2C2_MspDeInit+0x90>)
 8009492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009494:	4a0a      	ldr	r2, [pc, #40]	; (80094c0 <I2C2_MspDeInit+0x90>)
 8009496:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800949a:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 800949c:	4b08      	ldr	r3, [pc, #32]	; (80094c0 <I2C2_MspDeInit+0x90>)
 800949e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094a0:	4a07      	ldr	r2, [pc, #28]	; (80094c0 <I2C2_MspDeInit+0x90>)
 80094a2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80094a6:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 80094a8:	2021      	movs	r0, #33	; 0x21
 80094aa:	f003 f848 	bl	800c53e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 80094ae:	2022      	movs	r0, #34	; 0x22
 80094b0:	f003 f845 	bl	800c53e <HAL_NVIC_DisableIRQ>
  }
}
 80094b4:	bf00      	nop
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	40005800 	.word	0x40005800
 80094c0:	40021000 	.word	0x40021000
 80094c4:	48001c00 	.word	0x48001c00
 80094c8:	48000400 	.word	0x48000400

080094cc <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
static void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 80094cc:	b590      	push	{r4, r7, lr}
 80094ce:	b089      	sub	sp, #36	; 0x24
 80094d0:	af04      	add	r7, sp, #16
 80094d2:	4604      	mov	r4, r0
 80094d4:	4608      	mov	r0, r1
 80094d6:	4611      	mov	r1, r2
 80094d8:	461a      	mov	r2, r3
 80094da:	4623      	mov	r3, r4
 80094dc:	80fb      	strh	r3, [r7, #6]
 80094de:	4603      	mov	r3, r0
 80094e0:	80bb      	strh	r3, [r7, #4]
 80094e2:	460b      	mov	r3, r1
 80094e4:	807b      	strh	r3, [r7, #2]
 80094e6:	4613      	mov	r3, r2
 80094e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 80094ee:	b672      	cpsid	i
}
 80094f0:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 80094f2:	4b0d      	ldr	r3, [pc, #52]	; (8009528 <I2C2_WriteData+0x5c>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	8878      	ldrh	r0, [r7, #2]
 80094f8:	88ba      	ldrh	r2, [r7, #4]
 80094fa:	88f9      	ldrh	r1, [r7, #6]
 80094fc:	9302      	str	r3, [sp, #8]
 80094fe:	2301      	movs	r3, #1
 8009500:	9301      	str	r3, [sp, #4]
 8009502:	1c7b      	adds	r3, r7, #1
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	4603      	mov	r3, r0
 8009508:	4808      	ldr	r0, [pc, #32]	; (800952c <I2C2_WriteData+0x60>)
 800950a:	f003 ff21 	bl	800d350 <HAL_I2C_Mem_Write>
 800950e:	4603      	mov	r3, r0
 8009510:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8009512:	b662      	cpsie	i
}
 8009514:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 8009516:	7bfb      	ldrb	r3, [r7, #15]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d001      	beq.n	8009520 <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800951c:	f000 f890 	bl	8009640 <I2C2_Error>
  }
}
 8009520:	bf00      	nop
 8009522:	3714      	adds	r7, #20
 8009524:	46bd      	mov	sp, r7
 8009526:	bd90      	pop	{r4, r7, pc}
 8009528:	20000530 	.word	0x20000530
 800952c:	200011a4 	.word	0x200011a4

08009530 <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
static uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b088      	sub	sp, #32
 8009534:	af04      	add	r7, sp, #16
 8009536:	4603      	mov	r3, r0
 8009538:	80fb      	strh	r3, [r7, #6]
 800953a:	460b      	mov	r3, r1
 800953c:	80bb      	strh	r3, [r7, #4]
 800953e:	4613      	mov	r3, r2
 8009540:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8009542:	2300      	movs	r3, #0
 8009544:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8009546:	2300      	movs	r3, #0
 8009548:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 800954a:	b672      	cpsid	i
}
 800954c:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 800954e:	4b10      	ldr	r3, [pc, #64]	; (8009590 <I2C2_ReadData+0x60>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	8878      	ldrh	r0, [r7, #2]
 8009554:	88ba      	ldrh	r2, [r7, #4]
 8009556:	88f9      	ldrh	r1, [r7, #6]
 8009558:	9302      	str	r3, [sp, #8]
 800955a:	2301      	movs	r3, #1
 800955c:	9301      	str	r3, [sp, #4]
 800955e:	f107 030e 	add.w	r3, r7, #14
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	4603      	mov	r3, r0
 8009566:	480b      	ldr	r0, [pc, #44]	; (8009594 <I2C2_ReadData+0x64>)
 8009568:	f004 f806 	bl	800d578 <HAL_I2C_Mem_Read>
 800956c:	4603      	mov	r3, r0
 800956e:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8009570:	b662      	cpsie	i
}
 8009572:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8009574:	7bfb      	ldrb	r3, [r7, #15]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d004      	beq.n	8009584 <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800957a:	f000 f861 	bl	8009640 <I2C2_Error>
    HAL_Delay(200);
 800957e:	20c8      	movs	r0, #200	; 0xc8
 8009580:	f001 fc18 	bl	800adb4 <HAL_Delay>
  }

  return value;
 8009584:	7bbb      	ldrb	r3, [r7, #14]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	20000530 	.word	0x20000530
 8009594:	200011a4 	.word	0x200011a4

08009598 <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	4603      	mov	r3, r0
 80095a0:	6039      	str	r1, [r7, #0]
 80095a2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80095a4:	2300      	movs	r3, #0
 80095a6:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 80095a8:	2300      	movs	r3, #0
 80095aa:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 80095ac:	b672      	cpsid	i
}
 80095ae:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 80095b0:	88f9      	ldrh	r1, [r7, #6]
 80095b2:	2332      	movs	r3, #50	; 0x32
 80095b4:	683a      	ldr	r2, [r7, #0]
 80095b6:	480a      	ldr	r0, [pc, #40]	; (80095e0 <I2C2_isDeviceReady+0x48>)
 80095b8:	f004 f8f8 	bl	800d7ac <HAL_I2C_IsDeviceReady>
 80095bc:	4603      	mov	r3, r0
 80095be:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 80095c0:	b662      	cpsie	i
}
 80095c2:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d004      	beq.n	80095d4 <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 80095ca:	f000 f839 	bl	8009640 <I2C2_Error>
    HAL_Delay(200);
 80095ce:	20c8      	movs	r0, #200	; 0xc8
 80095d0:	f001 fbf0 	bl	800adb4 <HAL_Delay>
  }

  return value;
 80095d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	200011a4 	.word	0x200011a4

080095e4 <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b08a      	sub	sp, #40	; 0x28
 80095e8:	af04      	add	r7, sp, #16
 80095ea:	607b      	str	r3, [r7, #4]
 80095ec:	4603      	mov	r3, r0
 80095ee:	81fb      	strh	r3, [r7, #14]
 80095f0:	460b      	mov	r3, r1
 80095f2:	81bb      	strh	r3, [r7, #12]
 80095f4:	4613      	mov	r3, r2
 80095f6:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 80095f8:	2300      	movs	r3, #0
 80095fa:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 80095fc:	b672      	cpsid	i
}
 80095fe:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 8009600:	4b0d      	ldr	r3, [pc, #52]	; (8009638 <I2C2_ReadBuffer+0x54>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	8978      	ldrh	r0, [r7, #10]
 8009606:	89ba      	ldrh	r2, [r7, #12]
 8009608:	89f9      	ldrh	r1, [r7, #14]
 800960a:	9302      	str	r3, [sp, #8]
 800960c:	8c3b      	ldrh	r3, [r7, #32]
 800960e:	9301      	str	r3, [sp, #4]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	4603      	mov	r3, r0
 8009616:	4809      	ldr	r0, [pc, #36]	; (800963c <I2C2_ReadBuffer+0x58>)
 8009618:	f003 ffae 	bl	800d578 <HAL_I2C_Mem_Read>
 800961c:	4603      	mov	r3, r0
 800961e:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8009620:	b662      	cpsie	i
}
 8009622:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 8009624:	7dfb      	ldrb	r3, [r7, #23]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800962a:	f000 f809 	bl	8009640 <I2C2_Error>
  }

  return status;
 800962e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009630:	4618      	mov	r0, r3
 8009632:	3718      	adds	r7, #24
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	20000530 	.word	0x20000530
 800963c:	200011a4 	.word	0x200011a4

08009640 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 8009644:	f7ff fda1 	bl	800918a <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 8009648:	4803      	ldr	r0, [pc, #12]	; (8009658 <I2C2_Error+0x18>)
 800964a:	f003 fc68 	bl	800cf1e <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 800964e:	f7ff fe31 	bl	80092b4 <I2C2_Init>
}
 8009652:	bf00      	nop
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	200011a4 	.word	0x200011a4

0800965c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]

  if (HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f004 f9a8 	bl	800d9ba <HAL_I2C_GetState>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d132      	bne.n	80096d6 <I2Cx_Init+0x7a>
  {
    if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cTSHandler))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a1b      	ldr	r2, [pc, #108]	; (80096e0 <I2Cx_Init+0x84>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d103      	bne.n	8009680 <I2Cx_Init+0x24>
    {
      /* TS (Capacitive Touch Panel) and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_TS_I2Cx;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	4a1a      	ldr	r2, [pc, #104]	; (80096e4 <I2Cx_Init+0x88>)
 800967c:	601a      	str	r2, [r3, #0]
 800967e:	e012      	b.n	80096a6 <I2Cx_Init+0x4a>

      /* Need to enable MFX, and in doing so, initialize I2C at the same time */
      /* MFX_IO_Init();*/

    }
    else if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cAudioHandler))
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	4a19      	ldr	r2, [pc, #100]	; (80096e8 <I2Cx_Init+0x8c>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d103      	bne.n	8009690 <I2Cx_Init+0x34>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a18      	ldr	r2, [pc, #96]	; (80096ec <I2Cx_Init+0x90>)
 800968c:	601a      	str	r2, [r3, #0]
 800968e:	e00a      	b.n	80096a6 <I2Cx_Init+0x4a>
    }
    else if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cCameraHandler))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a17      	ldr	r2, [pc, #92]	; (80096f0 <I2Cx_Init+0x94>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d103      	bne.n	80096a0 <I2Cx_Init+0x44>
    {
      i2c_handler->Instance = DISCOVERY_CAMERA_I2Cx;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a12      	ldr	r2, [pc, #72]	; (80096e4 <I2Cx_Init+0x88>)
 800969c:	601a      	str	r2, [r3, #0]
 800969e:	e002      	b.n	80096a6 <I2Cx_Init+0x4a>
    }
    else
    {
      /* External, EEPROM and Arduino connector I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a10      	ldr	r2, [pc, #64]	; (80096e4 <I2Cx_Init+0x88>)
 80096a4:	601a      	str	r2, [r3, #0]
    }

    i2c_handler->Init.Timing           = DISCOVERY_I2C_TIMING;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a12      	ldr	r2, [pc, #72]	; (80096f4 <I2Cx_Init+0x98>)
 80096aa:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0x70;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2270      	movs	r2, #112	; 0x70
 80096b0:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2201      	movs	r2, #1
 80096b6:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0xFF;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	22ff      	movs	r2, #255	; 0xff
 80096c2:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	621a      	str	r2, [r3, #32]


    /* Init the I2C */
    HAL_I2C_Init(i2c_handler);
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f003 fb95 	bl	800ce00 <HAL_I2C_Init>

  }

}
 80096d6:	bf00      	nop
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	200011f8 	.word	0x200011f8
 80096e4:	40005800 	.word	0x40005800
 80096e8:	2000124c 	.word	0x2000124c
 80096ec:	40005400 	.word	0x40005400
 80096f0:	200012a0 	.word	0x200012a0
 80096f4:	90112626 	.word	0x90112626

080096f8 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b08a      	sub	sp, #40	; 0x28
 80096fc:	af04      	add	r7, sp, #16
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	4608      	mov	r0, r1
 8009702:	4611      	mov	r1, r2
 8009704:	461a      	mov	r2, r3
 8009706:	4603      	mov	r3, r0
 8009708:	72fb      	strb	r3, [r7, #11]
 800970a:	460b      	mov	r3, r1
 800970c:	813b      	strh	r3, [r7, #8]
 800970e:	4613      	mov	r3, r2
 8009710:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009712:	2300      	movs	r3, #0
 8009714:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009716:	7afb      	ldrb	r3, [r7, #11]
 8009718:	b299      	uxth	r1, r3
 800971a:	88f8      	ldrh	r0, [r7, #6]
 800971c:	893a      	ldrh	r2, [r7, #8]
 800971e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009722:	9302      	str	r3, [sp, #8]
 8009724:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009726:	9301      	str	r3, [sp, #4]
 8009728:	6a3b      	ldr	r3, [r7, #32]
 800972a:	9300      	str	r3, [sp, #0]
 800972c:	4603      	mov	r3, r0
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	f003 ff22 	bl	800d578 <HAL_I2C_Mem_Read>
 8009734:	4603      	mov	r3, r0
 8009736:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8009738:	7dfb      	ldrb	r3, [r7, #23]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d004      	beq.n	8009748 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800973e:	7afb      	ldrb	r3, [r7, #11]
 8009740:	4619      	mov	r1, r3
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f000 f832 	bl	80097ac <I2Cx_Error>
  }
  return status;
 8009748:	7dfb      	ldrb	r3, [r7, #23]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3718      	adds	r7, #24
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b08a      	sub	sp, #40	; 0x28
 8009756:	af04      	add	r7, sp, #16
 8009758:	60f8      	str	r0, [r7, #12]
 800975a:	4608      	mov	r0, r1
 800975c:	4611      	mov	r1, r2
 800975e:	461a      	mov	r2, r3
 8009760:	4603      	mov	r3, r0
 8009762:	72fb      	strb	r3, [r7, #11]
 8009764:	460b      	mov	r3, r1
 8009766:	813b      	strh	r3, [r7, #8]
 8009768:	4613      	mov	r3, r2
 800976a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800976c:	2300      	movs	r3, #0
 800976e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009770:	7afb      	ldrb	r3, [r7, #11]
 8009772:	b299      	uxth	r1, r3
 8009774:	88f8      	ldrh	r0, [r7, #6]
 8009776:	893a      	ldrh	r2, [r7, #8]
 8009778:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800977c:	9302      	str	r3, [sp, #8]
 800977e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009780:	9301      	str	r3, [sp, #4]
 8009782:	6a3b      	ldr	r3, [r7, #32]
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	4603      	mov	r3, r0
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f003 fde1 	bl	800d350 <HAL_I2C_Mem_Write>
 800978e:	4603      	mov	r3, r0
 8009790:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 8009792:	7dfb      	ldrb	r3, [r7, #23]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d004      	beq.n	80097a2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initialize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8009798:	7afb      	ldrb	r3, [r7, #11]
 800979a:	4619      	mov	r1, r3
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f000 f805 	bl	80097ac <I2Cx_Error>
  }
  return status;
 80097a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3718      	adds	r7, #24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	460b      	mov	r3, r1
 80097b6:	70fb      	strb	r3, [r7, #3]
  BSP_ErrorHandler();
 80097b8:	f7ff fce7 	bl	800918a <BSP_ErrorHandler>

  /* De-initialize the I2C communication bus */
  if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cTSHandler))
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a08      	ldr	r2, [pc, #32]	; (80097e0 <I2Cx_Error+0x34>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d102      	bne.n	80097ca <I2Cx_Error+0x1e>
  {
    I2C2_DeInit();
 80097c4:	f7ff fe22 	bl	800940c <I2C2_DeInit>
 80097c8:	e002      	b.n	80097d0 <I2Cx_Error+0x24>
  }
  else
  {
    HAL_I2C_DeInit(i2c_handler);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f003 fba7 	bl	800cf1e <HAL_I2C_DeInit>
  }

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f7ff ff43 	bl	800965c <I2Cx_Init>
}
 80097d6:	bf00      	nop
 80097d8:	3708      	adds	r7, #8
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	200011f8 	.word	0x200011f8

080097e4 <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 80097e8:	f7ff fd64 	bl	80092b4 <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 80097ec:	2104      	movs	r1, #4
 80097ee:	2084      	movs	r0, #132	; 0x84
 80097f0:	f7ff fed2 	bl	8009598 <I2C2_isDeviceReady>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d001      	beq.n	80097fe <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 80097fa:	f7ff fcc6 	bl	800918a <BSP_ErrorHandler>
  }
}
 80097fe:	bf00      	nop
 8009800:	bd80      	pop	{r7, pc}
	...

08009804 <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b088      	sub	sp, #32
 8009808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 800980a:	4b19      	ldr	r3, [pc, #100]	; (8009870 <MFX_IO_DeInit+0x6c>)
 800980c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800980e:	4a18      	ldr	r2, [pc, #96]	; (8009870 <MFX_IO_DeInit+0x6c>)
 8009810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009816:	4b16      	ldr	r3, [pc, #88]	; (8009870 <MFX_IO_DeInit+0x6c>)
 8009818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800981a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800981e:	60bb      	str	r3, [r7, #8]
 8009820:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8009822:	2340      	movs	r3, #64	; 0x40
 8009824:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8009826:	2301      	movs	r3, #1
 8009828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800982a:	2300      	movs	r3, #0
 800982c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 800982e:	2302      	movs	r3, #2
 8009830:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8009832:	f107 030c 	add.w	r3, r7, #12
 8009836:	4619      	mov	r1, r3
 8009838:	480e      	ldr	r0, [pc, #56]	; (8009874 <MFX_IO_DeInit+0x70>)
 800983a:	f003 f82d 	bl	800c898 <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 800983e:	2017      	movs	r0, #23
 8009840:	f002 fe7d 	bl	800c53e <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 8009844:	4b0a      	ldr	r3, [pc, #40]	; (8009870 <MFX_IO_DeInit+0x6c>)
 8009846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009848:	4a09      	ldr	r2, [pc, #36]	; (8009870 <MFX_IO_DeInit+0x6c>)
 800984a:	f043 0304 	orr.w	r3, r3, #4
 800984e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009850:	4b07      	ldr	r3, [pc, #28]	; (8009870 <MFX_IO_DeInit+0x6c>)
 8009852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009854:	f003 0304 	and.w	r3, r3, #4
 8009858:	607b      	str	r3, [r7, #4]
 800985a:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 800985c:	2120      	movs	r1, #32
 800985e:	4806      	ldr	r0, [pc, #24]	; (8009878 <MFX_IO_DeInit+0x74>)
 8009860:	f003 f9ac 	bl	800cbbc <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 8009864:	f7ff fdd2 	bl	800940c <I2C2_DeInit>
}
 8009868:	bf00      	nop
 800986a:	3720      	adds	r7, #32
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	40021000 	.word	0x40021000
 8009874:	48001c00 	.word	0x48001c00
 8009878:	48000800 	.word	0x48000800

0800987c <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b086      	sub	sp, #24
 8009880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 8009882:	4b13      	ldr	r3, [pc, #76]	; (80098d0 <MFX_IO_ITConfig+0x54>)
 8009884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009886:	4a12      	ldr	r2, [pc, #72]	; (80098d0 <MFX_IO_ITConfig+0x54>)
 8009888:	f043 0304 	orr.w	r3, r3, #4
 800988c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800988e:	4b10      	ldr	r3, [pc, #64]	; (80098d0 <MFX_IO_ITConfig+0x54>)
 8009890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009892:	f003 0304 	and.w	r3, r3, #4
 8009896:	603b      	str	r3, [r7, #0]
 8009898:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 800989a:	2320      	movs	r3, #32
 800989c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800989e:	2300      	movs	r3, #0
 80098a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098a2:	2300      	movs	r3, #0
 80098a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 80098a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80098aa:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 80098ac:	1d3b      	adds	r3, r7, #4
 80098ae:	4619      	mov	r1, r3
 80098b0:	4808      	ldr	r0, [pc, #32]	; (80098d4 <MFX_IO_ITConfig+0x58>)
 80098b2:	f002 fff1 	bl	800c898 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 80098b6:	220f      	movs	r2, #15
 80098b8:	210f      	movs	r1, #15
 80098ba:	2017      	movs	r0, #23
 80098bc:	f002 fe15 	bl	800c4ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 80098c0:	2017      	movs	r0, #23
 80098c2:	f002 fe2e 	bl	800c522 <HAL_NVIC_EnableIRQ>
}
 80098c6:	bf00      	nop
 80098c8:	3718      	adds	r7, #24
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	40021000 	.word	0x40021000
 80098d4:	48000800 	.word	0x48000800

080098d8 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 80098de:	4b0e      	ldr	r3, [pc, #56]	; (8009918 <MFX_IO_EnableWakeupPin+0x40>)
 80098e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098e2:	4a0d      	ldr	r2, [pc, #52]	; (8009918 <MFX_IO_EnableWakeupPin+0x40>)
 80098e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80098ea:	4b0b      	ldr	r3, [pc, #44]	; (8009918 <MFX_IO_EnableWakeupPin+0x40>)
 80098ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098f2:	603b      	str	r3, [r7, #0]
 80098f4:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 80098f6:	2340      	movs	r3, #64	; 0x40
 80098f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80098fa:	2301      	movs	r3, #1
 80098fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80098fe:	2302      	movs	r3, #2
 8009900:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8009902:	2300      	movs	r3, #0
 8009904:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8009906:	1d3b      	adds	r3, r7, #4
 8009908:	4619      	mov	r1, r3
 800990a:	4804      	ldr	r0, [pc, #16]	; (800991c <MFX_IO_EnableWakeupPin+0x44>)
 800990c:	f002 ffc4 	bl	800c898 <HAL_GPIO_Init>
}
 8009910:	bf00      	nop
 8009912:	3718      	adds	r7, #24
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	40021000 	.word	0x40021000
 800991c:	48001c00 	.word	0x48001c00

08009920 <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 8009924:	2201      	movs	r2, #1
 8009926:	2140      	movs	r1, #64	; 0x40
 8009928:	4806      	ldr	r0, [pc, #24]	; (8009944 <MFX_IO_Wakeup+0x24>)
 800992a:	f003 fa39 	bl	800cda0 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 800992e:	2001      	movs	r0, #1
 8009930:	f001 fa40 	bl	800adb4 <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 8009934:	2200      	movs	r2, #0
 8009936:	2140      	movs	r1, #64	; 0x40
 8009938:	4802      	ldr	r0, [pc, #8]	; (8009944 <MFX_IO_Wakeup+0x24>)
 800993a:	f003 fa31 	bl	800cda0 <HAL_GPIO_WritePin>
}
 800993e:	bf00      	nop
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	48001c00 	.word	0x48001c00

08009948 <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
 800994e:	4603      	mov	r3, r0
 8009950:	80fb      	strh	r3, [r7, #6]
 8009952:	460b      	mov	r3, r1
 8009954:	717b      	strb	r3, [r7, #5]
 8009956:	4613      	mov	r3, r2
 8009958:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 800995a:	797b      	ldrb	r3, [r7, #5]
 800995c:	b299      	uxth	r1, r3
 800995e:	793b      	ldrb	r3, [r7, #4]
 8009960:	88f8      	ldrh	r0, [r7, #6]
 8009962:	2201      	movs	r2, #1
 8009964:	f7ff fdb2 	bl	80094cc <I2C2_WriteData>
}
 8009968:	bf00      	nop
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	4603      	mov	r3, r0
 8009978:	460a      	mov	r2, r1
 800997a:	80fb      	strh	r3, [r7, #6]
 800997c:	4613      	mov	r3, r2
 800997e:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 8009980:	797b      	ldrb	r3, [r7, #5]
 8009982:	b299      	uxth	r1, r3
 8009984:	88fb      	ldrh	r3, [r7, #6]
 8009986:	2201      	movs	r2, #1
 8009988:	4618      	mov	r0, r3
 800998a:	f7ff fdd1 	bl	8009530 <I2C2_ReadData>
 800998e:	4603      	mov	r3, r0
}
 8009990:	4618      	mov	r0, r3
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b086      	sub	sp, #24
 800999c:	af02      	add	r7, sp, #8
 800999e:	60ba      	str	r2, [r7, #8]
 80099a0:	461a      	mov	r2, r3
 80099a2:	4603      	mov	r3, r0
 80099a4:	81fb      	strh	r3, [r7, #14]
 80099a6:	460b      	mov	r3, r1
 80099a8:	737b      	strb	r3, [r7, #13]
 80099aa:	4613      	mov	r3, r2
 80099ac:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80099ae:	7b7b      	ldrb	r3, [r7, #13]
 80099b0:	b299      	uxth	r1, r3
 80099b2:	89f8      	ldrh	r0, [r7, #14]
 80099b4:	88fb      	ldrh	r3, [r7, #6]
 80099b6:	9300      	str	r3, [sp, #0]
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	2201      	movs	r2, #1
 80099bc:	f7ff fe12 	bl	80095e4 <I2C2_ReadBuffer>
 80099c0:	4603      	mov	r3, r0
 80099c2:	b29b      	uxth	r3, r3
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3710      	adds	r7, #16
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f001 f9ed 	bl	800adb4 <HAL_Delay>
}
 80099da:	bf00      	nop
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
	...

080099e4 <FMC_BANK1_MspInit>:
  * @brief  Initializes FMC_BANK1_LCD_IO MSP.
  * @param  None
  * @retval None
  */
void FMC_BANK1_MspInit(void)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b08c      	sub	sp, #48	; 0x30
 80099e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_Init_Structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80099ea:	4b38      	ldr	r3, [pc, #224]	; (8009acc <FMC_BANK1_MspInit+0xe8>)
 80099ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099ee:	4a37      	ldr	r2, [pc, #220]	; (8009acc <FMC_BANK1_MspInit+0xe8>)
 80099f0:	f043 0301 	orr.w	r3, r3, #1
 80099f4:	6513      	str	r3, [r2, #80]	; 0x50
 80099f6:	4b35      	ldr	r3, [pc, #212]	; (8009acc <FMC_BANK1_MspInit+0xe8>)
 80099f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099fa:	f003 0301 	and.w	r3, r3, #1
 80099fe:	61bb      	str	r3, [r7, #24]
 8009a00:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009a02:	4b32      	ldr	r3, [pc, #200]	; (8009acc <FMC_BANK1_MspInit+0xe8>)
 8009a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a06:	4a31      	ldr	r2, [pc, #196]	; (8009acc <FMC_BANK1_MspInit+0xe8>)
 8009a08:	f043 0308 	orr.w	r3, r3, #8
 8009a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a0e:	4b2f      	ldr	r3, [pc, #188]	; (8009acc <FMC_BANK1_MspInit+0xe8>)
 8009a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a12:	f003 0308 	and.w	r3, r3, #8
 8009a16:	617b      	str	r3, [r7, #20]
 8009a18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009a1a:	4b2c      	ldr	r3, [pc, #176]	; (8009acc <FMC_BANK1_MspInit+0xe8>)
 8009a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a1e:	4a2b      	ldr	r2, [pc, #172]	; (8009acc <FMC_BANK1_MspInit+0xe8>)
 8009a20:	f043 0310 	orr.w	r3, r3, #16
 8009a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a26:	4b29      	ldr	r3, [pc, #164]	; (8009acc <FMC_BANK1_MspInit+0xe8>)
 8009a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a2a:	f003 0310 	and.w	r3, r3, #16
 8009a2e:	613b      	str	r3, [r7, #16]
 8009a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009a32:	4b26      	ldr	r3, [pc, #152]	; (8009acc <FMC_BANK1_MspInit+0xe8>)
 8009a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a36:	4a25      	ldr	r2, [pc, #148]	; (8009acc <FMC_BANK1_MspInit+0xe8>)
 8009a38:	f043 0320 	orr.w	r3, r3, #32
 8009a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a3e:	4b23      	ldr	r3, [pc, #140]	; (8009acc <FMC_BANK1_MspInit+0xe8>)
 8009a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a42:	f003 0320 	and.w	r3, r3, #32
 8009a46:	60fb      	str	r3, [r7, #12]
 8009a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009a4a:	4b20      	ldr	r3, [pc, #128]	; (8009acc <FMC_BANK1_MspInit+0xe8>)
 8009a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a4e:	4a1f      	ldr	r2, [pc, #124]	; (8009acc <FMC_BANK1_MspInit+0xe8>)
 8009a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a56:	4b1d      	ldr	r3, [pc, #116]	; (8009acc <FMC_BANK1_MspInit+0xe8>)
 8009a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a5e:	60bb      	str	r3, [r7, #8]
 8009a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009a62:	4b1a      	ldr	r3, [pc, #104]	; (8009acc <FMC_BANK1_MspInit+0xe8>)
 8009a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a66:	4a19      	ldr	r2, [pc, #100]	; (8009acc <FMC_BANK1_MspInit+0xe8>)
 8009a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8009a6e:	4b17      	ldr	r3, [pc, #92]	; (8009acc <FMC_BANK1_MspInit+0xe8>)
 8009a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a76:	607b      	str	r3, [r7, #4]
 8009a78:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8009a7a:	f005 fddb 	bl	800f634 <HAL_PWREx_EnableVddIO2>

  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 8009a7e:	2302      	movs	r3, #2
 8009a80:	623b      	str	r3, [r7, #32]
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 8009a82:	2301      	movs	r3, #1
 8009a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a86:	2303      	movs	r3, #3
 8009a88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF12_FMC;
 8009a8a:	230c      	movs	r3, #12
 8009a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* GPIOD configuration */ /* GPIO_PIN_7 is  FMC_NE1 */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | \
 8009a8e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8009a92:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7;

  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8009a94:	f107 031c 	add.w	r3, r7, #28
 8009a98:	4619      	mov	r1, r3
 8009a9a:	480d      	ldr	r0, [pc, #52]	; (8009ad0 <FMC_BANK1_MspInit+0xec>)
 8009a9c:	f002 fefc 	bl	800c898 <HAL_GPIO_Init>




  /* GPIOE configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_7     | \
 8009aa0:	f64f 7380 	movw	r3, #65408	; 0xff80
 8009aa4:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | \
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 8009aa6:	f107 031c 	add.w	r3, r7, #28
 8009aaa:	4619      	mov	r1, r3
 8009aac:	4809      	ldr	r0, [pc, #36]	; (8009ad4 <FMC_BANK1_MspInit+0xf0>)
 8009aae:	f002 fef3 	bl	800c898 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_13 ;
 8009ab2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 8009ab8:	f107 031c 	add.w	r3, r7, #28
 8009abc:	4619      	mov	r1, r3
 8009abe:	4804      	ldr	r0, [pc, #16]	; (8009ad0 <FMC_BANK1_MspInit+0xec>)
 8009ac0:	f002 feea 	bl	800c898 <HAL_GPIO_Init>

}
 8009ac4:	bf00      	nop
 8009ac6:	3730      	adds	r7, #48	; 0x30
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	40021000 	.word	0x40021000
 8009ad0:	48000c00 	.word	0x48000c00
 8009ad4:	48001000 	.word	0x48001000

08009ad8 <FMC_BANK1_Init>:
  * @brief  Initializes LCD IO.
  * @param  None
  * @retval None
  */
void FMC_BANK1_Init(void)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b0a4      	sub	sp, #144	; 0x90
 8009adc:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef sram_timing;
  FMC_NORSRAM_TimingTypeDef sram_timing_write;

  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FMC_NORSRAM_DEVICE;
 8009ade:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8009ae2:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Extended  = FMC_NORSRAM_EXTENDED_DEVICE;
 8009ae4:	4b26      	ldr	r3, [pc, #152]	; (8009b80 <FMC_BANK1_Init+0xa8>)
 8009ae6:	647b      	str	r3, [r7, #68]	; 0x44


  /* Timing for READING */

  sram_timing.AddressSetupTime       = 1;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	623b      	str	r3, [r7, #32]
  sram_timing.AddressHoldTime        = 1;
 8009aec:	2301      	movs	r3, #1
 8009aee:	627b      	str	r3, [r7, #36]	; 0x24
  sram_timing.DataSetupTime          = 1;
 8009af0:	2301      	movs	r3, #1
 8009af2:	62bb      	str	r3, [r7, #40]	; 0x28
  sram_timing.BusTurnAroundDuration  = 0;
 8009af4:	2300      	movs	r3, #0
 8009af6:	633b      	str	r3, [r7, #48]	; 0x30
  sram_timing.CLKDivision            = 2;
 8009af8:	2302      	movs	r3, #2
 8009afa:	637b      	str	r3, [r7, #52]	; 0x34
  sram_timing.DataLatency            = 2;
 8009afc:	2302      	movs	r3, #2
 8009afe:	63bb      	str	r3, [r7, #56]	; 0x38
  sram_timing.AccessMode             = FMC_ACCESS_MODE_A;
 8009b00:	2300      	movs	r3, #0
 8009b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Timing for WRITING */
  sram_timing_write.AddressSetupTime      = 5;
 8009b04:	2305      	movs	r3, #5
 8009b06:	603b      	str	r3, [r7, #0]
  sram_timing_write.AddressHoldTime       = 1;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	607b      	str	r3, [r7, #4]
  sram_timing_write.DataSetupTime         = 3;
 8009b0c:	2303      	movs	r3, #3
 8009b0e:	60bb      	str	r3, [r7, #8]
  sram_timing_write.BusTurnAroundDuration = 2;
 8009b10:	2302      	movs	r3, #2
 8009b12:	613b      	str	r3, [r7, #16]
  sram_timing_write.CLKDivision           = 2;
 8009b14:	2302      	movs	r3, #2
 8009b16:	617b      	str	r3, [r7, #20]
  sram_timing_write.DataLatency           = 2;
 8009b18:	2302      	movs	r3, #2
 8009b1a:	61bb      	str	r3, [r7, #24]
  sram_timing_write.AccessMode            = FMC_ACCESS_MODE_A;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	61fb      	str	r3, [r7, #28]


  hsram.Init.NSBank             = FMC_NORSRAM_BANK1;
 8009b20:	2300      	movs	r3, #0
 8009b22:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.DataAddressMux     = FMC_DATA_ADDRESS_MUX_DISABLE;
 8009b24:	2300      	movs	r3, #0
 8009b26:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.MemoryType         = FMC_MEMORY_TYPE_SRAM;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.MemoryDataWidth    = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8009b2c:	2310      	movs	r3, #16
 8009b2e:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.BurstAccessMode    = FMC_BURST_ACCESS_MODE_DISABLE;
 8009b30:	2300      	movs	r3, #0
 8009b32:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8009b34:	2300      	movs	r3, #0
 8009b36:	65fb      	str	r3, [r7, #92]	; 0x5c
  hsram.Init.WaitSignalActive   = FMC_WAIT_TIMING_BEFORE_WS;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.WriteOperation     = FMC_WRITE_OPERATION_ENABLE;
 8009b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b40:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.WaitSignal         = FMC_WAIT_SIGNAL_DISABLE;
 8009b42:	2300      	movs	r3, #0
 8009b44:	66bb      	str	r3, [r7, #104]	; 0x68
  hsram.Init.ExtendedMode       = FMC_EXTENDED_MODE_DISABLE;
 8009b46:	2300      	movs	r3, #0
 8009b48:	66fb      	str	r3, [r7, #108]	; 0x6c
  hsram.Init.AsynchronousWait   = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	673b      	str	r3, [r7, #112]	; 0x70
  hsram.Init.WriteBurst         = FMC_WRITE_BURST_DISABLE;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	677b      	str	r3, [r7, #116]	; 0x74
  hsram.Init.PageSize           = FMC_PAGE_SIZE_NONE;
 8009b52:	2300      	movs	r3, #0
 8009b54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  hsram.Init.WriteFifo          = FMC_WRITE_FIFO_DISABLE;
 8009b58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009b5c:	67fb      	str	r3, [r7, #124]	; 0x7c
  hsram.Init.ContinuousClock    = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	67bb      	str	r3, [r7, #120]	; 0x78
  /* Initialize the SRAM controller */
  FMC_BANK1_MspInit();
 8009b62:	f7ff ff3f 	bl	80099e4 <FMC_BANK1_MspInit>
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing_write);
 8009b66:	463a      	mov	r2, r7
 8009b68:	f107 0120 	add.w	r1, r7, #32
 8009b6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009b70:	4618      	mov	r0, r3
 8009b72:	f009 f88c 	bl	8012c8e <HAL_SRAM_Init>

}
 8009b76:	bf00      	nop
 8009b78:	3790      	adds	r7, #144	; 0x90
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	a0000104 	.word	0xa0000104

08009b84 <FMC_BANK1_WriteData>:
  * @brief  Writes register value.
  * @param  Data: Data to be written
  * @retval None
  */
static void FMC_BANK1_WriteData(uint16_t Data)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  LCD_ADDR->REG = Data;
 8009b8e:	4a04      	ldr	r2, [pc, #16]	; (8009ba0 <FMC_BANK1_WriteData+0x1c>)
 8009b90:	88fb      	ldrh	r3, [r7, #6]
 8009b92:	8013      	strh	r3, [r2, #0]
}
 8009b94:	bf00      	nop
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr
 8009ba0:	60080000 	.word	0x60080000

08009ba4 <FMC_BANK1_WriteReg>:
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  * @retval None
  */
static void FMC_BANK1_WriteReg(uint8_t Reg)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	4603      	mov	r3, r0
 8009bac:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK1_ADDR->REG = Reg;
 8009bae:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8009bb2:	79fa      	ldrb	r2, [r7, #7]
 8009bb4:	b292      	uxth	r2, r2
 8009bb6:	801a      	strh	r2, [r3, #0]
}
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <FMC_BANK1_ReadData>:
  * @brief  Reads register value.
  * @param  None
  * @retval Read value
  */
static uint16_t FMC_BANK1_ReadData(void)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	af00      	add	r7, sp, #0
  return LCD_ADDR->REG;
 8009bc8:	4b03      	ldr	r3, [pc, #12]	; (8009bd8 <FMC_BANK1_ReadData+0x14>)
 8009bca:	881b      	ldrh	r3, [r3, #0]
 8009bcc:	b29b      	uxth	r3, r3
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	60080000 	.word	0x60080000

08009bdc <LCD_IO_Init>:
  * @brief  Initializes LCD low level.
  * @param  None
  * @retval None
  */
void LCD_IO_Init(void)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	af00      	add	r7, sp, #0
  FMC_BANK1_Init();
 8009be0:	f7ff ff7a 	bl	8009ad8 <FMC_BANK1_Init>
}
 8009be4:	bf00      	nop
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <LCD_IO_WriteData>:
  * @brief  Writes data on LCD data register.
  * @param  Data: Data to be written
  * @retval None
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b082      	sub	sp, #8
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	4603      	mov	r3, r0
 8009bf0:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1_WriteData(RegValue);
 8009bf2:	88fb      	ldrh	r3, [r7, #6]
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7ff ffc5 	bl	8009b84 <FMC_BANK1_WriteData>
}
 8009bfa:	bf00      	nop
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <LCD_IO_WriteReg>:
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b082      	sub	sp, #8
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	4603      	mov	r3, r0
 8009c0a:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK1_WriteReg(Reg);
 8009c0c:	79fb      	ldrb	r3, [r7, #7]
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7ff ffc8 	bl	8009ba4 <FMC_BANK1_WriteReg>
}
 8009c14:	bf00      	nop
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <LCD_IO_ReadData>:
  * @brief  Reads data from LCD data register.
  * @param  None
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	af00      	add	r7, sp, #0
  return FMC_BANK1_ReadData();
 8009c20:	f7ff ffd0 	bl	8009bc4 <FMC_BANK1_ReadData>
 8009c24:	4603      	mov	r3, r0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <LCD_IO_Delay>:
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void LCD_IO_Delay(uint32_t Delay)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b082      	sub	sp, #8
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f001 f8be 	bl	800adb4 <HAL_Delay>
}
 8009c38:	bf00      	nop
 8009c3a:	3708      	adds	r7, #8
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cTSHandler);
 8009c44:	4812      	ldr	r0, [pc, #72]	; (8009c90 <TS_IO_Init+0x50>)
 8009c46:	f7ff fd09 	bl	800965c <I2Cx_Init>

  if (ts_io_init == 0)
 8009c4a:	4b12      	ldr	r3, [pc, #72]	; (8009c94 <TS_IO_Init+0x54>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d11b      	bne.n	8009c8a <TS_IO_Init+0x4a>
  {
    if (BSP_LCD_Init() == LCD_ERROR)
 8009c52:	f000 f8eb 	bl	8009e2c <BSP_LCD_Init>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d101      	bne.n	8009c60 <TS_IO_Init+0x20>
    {
      BSP_ErrorHandler();
 8009c5c:	f7ff fa95 	bl	800918a <BSP_ErrorHandler>
    }

    BSP_IO_ConfigPin(TS_RST_PIN, IO_MODE_OUTPUT);
 8009c60:	2101      	movs	r1, #1
 8009c62:	2002      	movs	r0, #2
 8009c64:	f000 f8aa 	bl	8009dbc <BSP_IO_ConfigPin>

    BSP_IO_WritePin(TS_RST_PIN, GPIO_PIN_RESET);
 8009c68:	2100      	movs	r1, #0
 8009c6a:	2002      	movs	r0, #2
 8009c6c:	f000 f8c2 	bl	8009df4 <BSP_IO_WritePin>
    HAL_Delay(10);
 8009c70:	200a      	movs	r0, #10
 8009c72:	f001 f89f 	bl	800adb4 <HAL_Delay>
    BSP_IO_WritePin(TS_RST_PIN, GPIO_PIN_SET);
 8009c76:	2101      	movs	r1, #1
 8009c78:	2002      	movs	r0, #2
 8009c7a:	f000 f8bb 	bl	8009df4 <BSP_IO_WritePin>
    HAL_Delay(200);
 8009c7e:	20c8      	movs	r0, #200	; 0xc8
 8009c80:	f001 f898 	bl	800adb4 <HAL_Delay>

    ts_io_init = 1;
 8009c84:	4b03      	ldr	r3, [pc, #12]	; (8009c94 <TS_IO_Init+0x54>)
 8009c86:	2201      	movs	r2, #1
 8009c88:	601a      	str	r2, [r3, #0]
  }
}
 8009c8a:	bf00      	nop
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	200011f8 	.word	0x200011f8
 8009c94:	200011a0 	.word	0x200011a0

08009c98 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af02      	add	r7, sp, #8
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	71fb      	strb	r3, [r7, #7]
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	71bb      	strb	r3, [r7, #6]
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cTSHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&Value, 1);
 8009caa:	79bb      	ldrb	r3, [r7, #6]
 8009cac:	b29a      	uxth	r2, r3
 8009cae:	79f9      	ldrb	r1, [r7, #7]
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	9301      	str	r3, [sp, #4]
 8009cb4:	1d7b      	adds	r3, r7, #5
 8009cb6:	9300      	str	r3, [sp, #0]
 8009cb8:	2301      	movs	r3, #1
 8009cba:	4803      	ldr	r0, [pc, #12]	; (8009cc8 <TS_IO_Write+0x30>)
 8009cbc:	f7ff fd49 	bl	8009752 <I2Cx_WriteMultiple>
}
 8009cc0:	bf00      	nop
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	200011f8 	.word	0x200011f8

08009ccc <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	460a      	mov	r2, r1
 8009cd6:	71fb      	strb	r3, [r7, #7]
 8009cd8:	4613      	mov	r3, r2
 8009cda:	71bb      	strb	r3, [r7, #6]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 8009cdc:	79fb      	ldrb	r3, [r7, #7]
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	79ba      	ldrb	r2, [r7, #6]
 8009ce2:	b291      	uxth	r1, r2
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7ff fc22 	bl	8009530 <I2C2_ReadData>
 8009cec:	4603      	mov	r3, r0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3708      	adds	r7, #8
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
	...

08009cf8 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af02      	add	r7, sp, #8
 8009cfe:	603a      	str	r2, [r7, #0]
 8009d00:	461a      	mov	r2, r3
 8009d02:	4603      	mov	r3, r0
 8009d04:	71fb      	strb	r3, [r7, #7]
 8009d06:	460b      	mov	r3, r1
 8009d08:	71bb      	strb	r3, [r7, #6]
 8009d0a:	4613      	mov	r3, r2
 8009d0c:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadMultiple(&hI2cTSHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8009d0e:	79bb      	ldrb	r3, [r7, #6]
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	79f9      	ldrb	r1, [r7, #7]
 8009d14:	88bb      	ldrh	r3, [r7, #4]
 8009d16:	9301      	str	r3, [sp, #4]
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	4804      	ldr	r0, [pc, #16]	; (8009d30 <TS_IO_ReadMultiple+0x38>)
 8009d20:	f7ff fcea 	bl	80096f8 <I2Cx_ReadMultiple>
 8009d24:	4603      	mov	r3, r0
 8009d26:	b29b      	uxth	r3, r3
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	200011f8 	.word	0x200011f8

08009d34 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b082      	sub	sp, #8
 8009d38:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 8009d42:	4b1a      	ldr	r3, [pc, #104]	; (8009dac <BSP_IO_Init+0x78>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d128      	bne.n	8009d9c <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 8009d4a:	4b19      	ldr	r3, [pc, #100]	; (8009db0 <BSP_IO_Init+0x7c>)
 8009d4c:	695b      	ldr	r3, [r3, #20]
 8009d4e:	2084      	movs	r0, #132	; 0x84
 8009d50:	4798      	blx	r3

    HAL_Delay(10);
 8009d52:	200a      	movs	r0, #10
 8009d54:	f001 f82e 	bl	800adb4 <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 8009d58:	4b16      	ldr	r3, [pc, #88]	; (8009db4 <BSP_IO_Init+0x80>)
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	2084      	movs	r0, #132	; 0x84
 8009d5e:	4798      	blx	r3
 8009d60:	4603      	mov	r3, r0
 8009d62:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8009d64:	79bb      	ldrb	r3, [r7, #6]
 8009d66:	2b7b      	cmp	r3, #123	; 0x7b
 8009d68:	d002      	beq.n	8009d70 <BSP_IO_Init+0x3c>
 8009d6a:	79bb      	ldrb	r3, [r7, #6]
 8009d6c:	2b79      	cmp	r3, #121	; 0x79
 8009d6e:	d117      	bne.n	8009da0 <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 8009d70:	4b0e      	ldr	r3, [pc, #56]	; (8009dac <BSP_IO_Init+0x78>)
 8009d72:	4a10      	ldr	r2, [pc, #64]	; (8009db4 <BSP_IO_Init+0x80>)
 8009d74:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 8009d76:	4b0d      	ldr	r3, [pc, #52]	; (8009dac <BSP_IO_Init+0x78>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00f      	beq.n	8009da0 <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 8009d80:	4b0a      	ldr	r3, [pc, #40]	; (8009dac <BSP_IO_Init+0x78>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	2084      	movs	r0, #132	; 0x84
 8009d88:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 8009d8a:	4b08      	ldr	r3, [pc, #32]	; (8009dac <BSP_IO_Init+0x78>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68db      	ldr	r3, [r3, #12]
 8009d90:	4909      	ldr	r1, [pc, #36]	; (8009db8 <BSP_IO_Init+0x84>)
 8009d92:	2084      	movs	r0, #132	; 0x84
 8009d94:	4798      	blx	r3

        ret = IO_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	71fb      	strb	r3, [r7, #7]
 8009d9a:	e001      	b.n	8009da0 <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 8009d9c:	2303      	movs	r3, #3
 8009d9e:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 8009da0:	79fb      	ldrb	r3, [r7, #7]
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3708      	adds	r7, #8
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	200012f4 	.word	0x200012f4
 8009db0:	200001ec 	.word	0x200001ec
 8009db4:	200001c0 	.word	0x200001c0
 8009db8:	000301ff 	.word	0x000301ff

08009dbc <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	4b07      	ldr	r3, [pc, #28]	; (8009dec <BSP_IO_ConfigPin+0x30>)
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 8009dd4:	4b06      	ldr	r3, [pc, #24]	; (8009df0 <BSP_IO_ConfigPin+0x34>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	78fa      	ldrb	r2, [r7, #3]
 8009ddc:	68f9      	ldr	r1, [r7, #12]
 8009dde:	2084      	movs	r0, #132	; 0x84
 8009de0:	4798      	blx	r3

  return IO_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	000301ff 	.word	0x000301ff
 8009df0:	200012f4 	.word	0x200012f4

08009df4 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 8009e00:	2300      	movs	r3, #0
 8009e02:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	4b07      	ldr	r3, [pc, #28]	; (8009e24 <BSP_IO_WritePin+0x30>)
 8009e08:	4013      	ands	r3, r2
 8009e0a:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 8009e0c:	4b06      	ldr	r3, [pc, #24]	; (8009e28 <BSP_IO_WritePin+0x34>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	695b      	ldr	r3, [r3, #20]
 8009e12:	78fa      	ldrb	r2, [r7, #3]
 8009e14:	68f9      	ldr	r1, [r7, #12]
 8009e16:	2084      	movs	r0, #132	; 0x84
 8009e18:	4798      	blx	r3

}
 8009e1a:	bf00      	nop
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	000301ff 	.word	0x000301ff
 8009e28:	200012f4 	.word	0x200012f4

08009e2c <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8009e30:	2001      	movs	r0, #1
 8009e32:	f000 f803 	bl	8009e3c <BSP_LCD_InitEx>
 8009e36:	4603      	mov	r3, r0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <BSP_LCD_InitEx>:
  * @brief  Initializes the LCD with a given orientation.
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	73fb      	strb	r3, [r7, #15]
  uint32_t i = 0;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	60bb      	str	r3, [r7, #8]

  if (bsp_lcd_initialized == 1)
 8009e4c:	4b33      	ldr	r3, [pc, #204]	; (8009f1c <BSP_LCD_InitEx+0xe0>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d102      	bne.n	8009e5a <BSP_LCD_InitEx+0x1e>
  {
    ret = LCD_OK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	73fb      	strb	r3, [r7, #15]
 8009e58:	e05b      	b.n	8009f12 <BSP_LCD_InitEx+0xd6>
  }
  else
  {
    /* Initialize the IO functionalities */
    if (BSP_IO_Init() == IO_ERROR)
 8009e5a:	f7ff ff6b 	bl	8009d34 <BSP_IO_Init>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d101      	bne.n	8009e68 <BSP_LCD_InitEx+0x2c>
    {
      BSP_ErrorHandler();
 8009e64:	f7ff f991 	bl	800918a <BSP_ErrorHandler>
    }

    /* Initialize LCD special pins GPIOs */
    BSP_LCD_MspInit();
 8009e68:	f000 fcd0 	bl	800a80c <BSP_LCD_MspInit>

    /* LCD Power On */
    HAL_GPIO_WritePin(LCD_PWR_CTRL_GPIO_PORT, LCD_PWR_CTRL_PIN, GPIO_PIN_RESET);
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	2101      	movs	r1, #1
 8009e70:	482b      	ldr	r0, [pc, #172]	; (8009f20 <BSP_LCD_InitEx+0xe4>)
 8009e72:	f002 ff95 	bl	800cda0 <HAL_GPIO_WritePin>

    /* Default value for draw propriety */
    DrawProp.BackColor = 0xFFFF;
 8009e76:	4b2b      	ldr	r3, [pc, #172]	; (8009f24 <BSP_LCD_InitEx+0xe8>)
 8009e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e7c:	605a      	str	r2, [r3, #4]
    DrawProp.pFont     = &Font24;
 8009e7e:	4b29      	ldr	r3, [pc, #164]	; (8009f24 <BSP_LCD_InitEx+0xe8>)
 8009e80:	4a29      	ldr	r2, [pc, #164]	; (8009f28 <BSP_LCD_InitEx+0xec>)
 8009e82:	609a      	str	r2, [r3, #8]
    DrawProp.TextColor = 0x0000;
 8009e84:	4b27      	ldr	r3, [pc, #156]	; (8009f24 <BSP_LCD_InitEx+0xe8>)
 8009e86:	2200      	movs	r2, #0
 8009e88:	601a      	str	r2, [r3, #0]

    if ((WakeUpFromStandby == RESET) && (WakeUpFromShutdown == RESET))
 8009e8a:	4b28      	ldr	r3, [pc, #160]	; (8009f2c <BSP_LCD_InitEx+0xf0>)
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d108      	bne.n	8009ea4 <BSP_LCD_InitEx+0x68>
 8009e92:	4b27      	ldr	r3, [pc, #156]	; (8009f30 <BSP_LCD_InitEx+0xf4>)
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d104      	bne.n	8009ea4 <BSP_LCD_InitEx+0x68>
    {
      /* Backlight control signal assertion */
      HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	2101      	movs	r1, #1
 8009e9e:	4825      	ldr	r0, [pc, #148]	; (8009f34 <BSP_LCD_InitEx+0xf8>)
 8009ea0:	f002 ff7e 	bl	800cda0 <HAL_GPIO_WritePin>
    }

    /* Reset the LCD */
    BSP_LCD_Reset();
 8009ea4:	f000 f850 	bl	8009f48 <BSP_LCD_Reset>

    if (ST7789H2_drv.ReadID() == ST7789H2_ID)
 8009ea8:	4b23      	ldr	r3, [pc, #140]	; (8009f38 <BSP_LCD_InitEx+0xfc>)
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	4798      	blx	r3
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b85      	cmp	r3, #133	; 0x85
 8009eb2:	d12e      	bne.n	8009f12 <BSP_LCD_InitEx+0xd6>
    {
      LcdDrv = &ST7789H2_drv;
 8009eb4:	4b21      	ldr	r3, [pc, #132]	; (8009f3c <BSP_LCD_InitEx+0x100>)
 8009eb6:	4a20      	ldr	r2, [pc, #128]	; (8009f38 <BSP_LCD_InitEx+0xfc>)
 8009eb8:	601a      	str	r2, [r3, #0]

      /* LCD Init */
      LcdDrv->Init();
 8009eba:	4b20      	ldr	r3, [pc, #128]	; (8009f3c <BSP_LCD_InitEx+0x100>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4798      	blx	r3

      /* Fill LCD frame memory with white pixels (or black pixels if INIT_BLACK_LCD is enabled) */
      ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t *)NULL, 0);  /* RAM Write Data */
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	202c      	movs	r0, #44	; 0x2c
 8009ec8:	f7fa fb81 	bl	80045ce <ST7789H2_WriteReg>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 8009ecc:	2300      	movs	r3, #0
 8009ece:	60bb      	str	r3, [r7, #8]
 8009ed0:	e006      	b.n	8009ee0 <BSP_LCD_InitEx+0xa4>
      {
#if defined(INIT_BLACK_LCD)
        LCD_IO_WriteData(0x0);
#else
        LCD_IO_WriteData(0xFFFF);
 8009ed2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009ed6:	f7ff fe87 	bl	8009be8 <LCD_IO_WriteData>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	3301      	adds	r3, #1
 8009ede:	60bb      	str	r3, [r7, #8]
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 8009ee6:	d3f4      	bcc.n	8009ed2 <BSP_LCD_InitEx+0x96>
#endif
      }

      if (orientation == LCD_ORIENTATION_PORTRAIT)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d106      	bne.n	8009efc <BSP_LCD_InitEx+0xc0>
      {
        ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT);
 8009eee:	2000      	movs	r0, #0
 8009ef0:	f7fa fa6b 	bl	80043ca <ST7789H2_SetOrientation>
        LCD_orientation = LCD_ORIENTATION_PORTRAIT;
 8009ef4:	4b12      	ldr	r3, [pc, #72]	; (8009f40 <BSP_LCD_InitEx+0x104>)
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	701a      	strb	r2, [r3, #0]
 8009efa:	e002      	b.n	8009f02 <BSP_LCD_InitEx+0xc6>
      }
      else
      {
        LCD_orientation = LCD_ORIENTATION_LANDSCAPE;
 8009efc:	4b10      	ldr	r3, [pc, #64]	; (8009f40 <BSP_LCD_InitEx+0x104>)
 8009efe:	2201      	movs	r2, #1
 8009f00:	701a      	strb	r2, [r3, #0]
      }
      /* Initialize the font */
      BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8009f02:	4810      	ldr	r0, [pc, #64]	; (8009f44 <BSP_LCD_InitEx+0x108>)
 8009f04:	f000 f868 	bl	8009fd8 <BSP_LCD_SetFont>

      bsp_lcd_initialized = 1;
 8009f08:	4b04      	ldr	r3, [pc, #16]	; (8009f1c <BSP_LCD_InitEx+0xe0>)
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	601a      	str	r2, [r3, #0]
      ret = LCD_OK;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	200012f8 	.word	0x200012f8
 8009f20:	48001c00 	.word	0x48001c00
 8009f24:	2000136c 	.word	0x2000136c
 8009f28:	20000534 	.word	0x20000534
 8009f2c:	20001368 	.word	0x20001368
 8009f30:	20001369 	.word	0x20001369
 8009f34:	48002000 	.word	0x48002000
 8009f38:	20000238 	.word	0x20000238
 8009f3c:	20001378 	.word	0x20001378
 8009f40:	20000544 	.word	0x20000544
 8009f44:	2000053c 	.word	0x2000053c

08009f48 <BSP_LCD_Reset>:
  * @brief  Reset the LCD.
  * @param  None
  * @retval LCD state
  */
void BSP_LCD_Reset(void)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	af00      	add	r7, sp, #0
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	2004      	movs	r0, #4
 8009f50:	f7ff ff50 	bl	8009df4 <BSP_IO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8009f54:	2005      	movs	r0, #5
 8009f56:	f000 ff2d 	bl	800adb4 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 8009f5a:	2101      	movs	r1, #1
 8009f5c:	2004      	movs	r0, #4
 8009f5e:	f7ff ff49 	bl	8009df4 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8009f62:	200a      	movs	r0, #10
 8009f64:	f000 ff26 	bl	800adb4 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 8009f68:	2100      	movs	r1, #0
 8009f6a:	2004      	movs	r0, #4
 8009f6c:	f7ff ff42 	bl	8009df4 <BSP_IO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8009f70:	2014      	movs	r0, #20
 8009f72:	f000 ff1f 	bl	800adb4 <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 8009f76:	2101      	movs	r1, #1
 8009f78:	2004      	movs	r0, #4
 8009f7a:	f7ff ff3b 	bl	8009df4 <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8009f7e:	200a      	movs	r0, #10
 8009f80:	f000 ff18 	bl	800adb4 <HAL_Delay>
}
 8009f84:	bf00      	nop
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelWidth());
 8009f8c:	4b03      	ldr	r3, [pc, #12]	; (8009f9c <BSP_LCD_GetXSize+0x14>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f92:	4798      	blx	r3
 8009f94:	4603      	mov	r3, r0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	20001378 	.word	0x20001378

08009fa0 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelHeight());
 8009fa4:	4b03      	ldr	r3, [pc, #12]	; (8009fb4 <BSP_LCD_GetYSize+0x14>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009faa:	4798      	blx	r3
 8009fac:	4603      	mov	r3, r0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	20001378 	.word	0x20001378

08009fb8 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8009fc2:	88fb      	ldrh	r3, [r7, #6]
 8009fc4:	4a03      	ldr	r2, [pc, #12]	; (8009fd4 <BSP_LCD_SetTextColor+0x1c>)
 8009fc6:	6013      	str	r3, [r2, #0]
}
 8009fc8:	bf00      	nop
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr
 8009fd4:	2000136c 	.word	0x2000136c

08009fd8 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b083      	sub	sp, #12
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8009fe0:	4a04      	ldr	r2, [pc, #16]	; (8009ff4 <BSP_LCD_SetFont+0x1c>)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6093      	str	r3, [r2, #8]
}
 8009fe6:	bf00      	nop
 8009fe8:	370c      	adds	r7, #12
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	2000136c 	.word	0x2000136c

08009ff8 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8009ff8:	b590      	push	{r4, r7, lr}
 8009ffa:	b087      	sub	sp, #28
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	4603      	mov	r3, r0
 800a000:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800a002:	2300      	movs	r3, #0
 800a004:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 800a006:	2300      	movs	r3, #0
 800a008:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor;
 800a00a:	4b15      	ldr	r3, [pc, #84]	; (800a060 <BSP_LCD_Clear+0x68>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 800a010:	88fb      	ldrh	r3, [r7, #6]
 800a012:	4a13      	ldr	r2, [pc, #76]	; (800a060 <BSP_LCD_Clear+0x68>)
 800a014:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 800a016:	f7ff ffc3 	bl	8009fa0 <BSP_LCD_GetYSize>
 800a01a:	6138      	str	r0, [r7, #16]

  for (counter = 0; counter < y_size; counter++)
 800a01c:	2300      	movs	r3, #0
 800a01e:	617b      	str	r3, [r7, #20]
 800a020:	e00d      	b.n	800a03e <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	b29c      	uxth	r4, r3
 800a026:	f7ff ffaf 	bl	8009f88 <BSP_LCD_GetXSize>
 800a02a:	4603      	mov	r3, r0
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	461a      	mov	r2, r3
 800a030:	4621      	mov	r1, r4
 800a032:	2000      	movs	r0, #0
 800a034:	f000 f8e8 	bl	800a208 <BSP_LCD_DrawHLine>
  for (counter = 0; counter < y_size; counter++)
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	3301      	adds	r3, #1
 800a03c:	617b      	str	r3, [r7, #20]
 800a03e:	697a      	ldr	r2, [r7, #20]
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	429a      	cmp	r2, r3
 800a044:	d3ed      	bcc.n	800a022 <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup;
 800a046:	4a06      	ldr	r2, [pc, #24]	; (800a060 <BSP_LCD_Clear+0x68>)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800a04c:	4b04      	ldr	r3, [pc, #16]	; (800a060 <BSP_LCD_Clear+0x68>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	b29b      	uxth	r3, r3
 800a052:	4618      	mov	r0, r3
 800a054:	f7ff ffb0 	bl	8009fb8 <BSP_LCD_SetTextColor>
}
 800a058:	bf00      	nop
 800a05a:	371c      	adds	r7, #28
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd90      	pop	{r4, r7, pc}
 800a060:	2000136c 	.word	0x2000136c

0800a064 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	4603      	mov	r3, r0
 800a06c:	80fb      	strh	r3, [r7, #6]
 800a06e:	460b      	mov	r3, r1
 800a070:	80bb      	strh	r3, [r7, #4]
 800a072:	4613      	mov	r3, r2
 800a074:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800a076:	4b0f      	ldr	r3, [pc, #60]	; (800a0b4 <BSP_LCD_DisplayChar+0x50>)
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	78fb      	ldrb	r3, [r7, #3]
 800a07e:	3b20      	subs	r3, #32
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800a080:	490c      	ldr	r1, [pc, #48]	; (800a0b4 <BSP_LCD_DisplayChar+0x50>)
 800a082:	6889      	ldr	r1, [r1, #8]
 800a084:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800a086:	fb03 f101 	mul.w	r1, r3, r1
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800a08a:	4b0a      	ldr	r3, [pc, #40]	; (800a0b4 <BSP_LCD_DisplayChar+0x50>)
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	889b      	ldrh	r3, [r3, #4]
 800a090:	3307      	adds	r3, #7
 800a092:	2b00      	cmp	r3, #0
 800a094:	da00      	bge.n	800a098 <BSP_LCD_DisplayChar+0x34>
 800a096:	3307      	adds	r3, #7
 800a098:	10db      	asrs	r3, r3, #3
 800a09a:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800a09e:	441a      	add	r2, r3
 800a0a0:	88b9      	ldrh	r1, [r7, #4]
 800a0a2:	88fb      	ldrh	r3, [r7, #6]
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f000 fc0d 	bl	800a8c4 <DrawChar>
}
 800a0aa:	bf00      	nop
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	2000136c 	.word	0x2000136c

0800a0b8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b088      	sub	sp, #32
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60ba      	str	r2, [r7, #8]
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	81fb      	strh	r3, [r7, #14]
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	81bb      	strh	r3, [r7, #12]
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	83fb      	strh	r3, [r7, #30]
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	61bb      	str	r3, [r7, #24]
 800a0da:	2300      	movs	r3, #0
 800a0dc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++)
 800a0e2:	e002      	b.n	800a0ea <BSP_LCD_DisplayStringAt+0x32>
  {
    size ++ ;
 800a0e4:	69bb      	ldr	r3, [r7, #24]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	61bb      	str	r3, [r7, #24]
  while (*ptr++)
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	1c5a      	adds	r2, r3, #1
 800a0ee:	617a      	str	r2, [r7, #20]
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1f6      	bne.n	800a0e4 <BSP_LCD_DisplayStringAt+0x2c>
  }

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp.pFont->Width);
 800a0f6:	f7ff ff47 	bl	8009f88 <BSP_LCD_GetXSize>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	4b33      	ldr	r3, [pc, #204]	; (800a1cc <BSP_LCD_DisplayStringAt+0x114>)
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	889b      	ldrh	r3, [r3, #4]
 800a102:	fbb2 f3f3 	udiv	r3, r2, r3
 800a106:	613b      	str	r3, [r7, #16]

  switch (Mode)
 800a108:	79fb      	ldrb	r3, [r7, #7]
 800a10a:	2b03      	cmp	r3, #3
 800a10c:	d014      	beq.n	800a138 <BSP_LCD_DisplayStringAt+0x80>
 800a10e:	2b03      	cmp	r3, #3
 800a110:	dc23      	bgt.n	800a15a <BSP_LCD_DisplayStringAt+0xa2>
 800a112:	2b01      	cmp	r3, #1
 800a114:	d002      	beq.n	800a11c <BSP_LCD_DisplayStringAt+0x64>
 800a116:	2b02      	cmp	r3, #2
 800a118:	d011      	beq.n	800a13e <BSP_LCD_DisplayStringAt+0x86>
 800a11a:	e01e      	b.n	800a15a <BSP_LCD_DisplayStringAt+0xa2>
  {
    case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size) * DrawProp.pFont->Width) / 2;
 800a11c:	693a      	ldr	r2, [r7, #16]
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	1ad3      	subs	r3, r2, r3
 800a122:	4a2a      	ldr	r2, [pc, #168]	; (800a1cc <BSP_LCD_DisplayStringAt+0x114>)
 800a124:	6892      	ldr	r2, [r2, #8]
 800a126:	8892      	ldrh	r2, [r2, #4]
 800a128:	fb02 f303 	mul.w	r3, r2, r3
 800a12c:	085b      	lsrs	r3, r3, #1
 800a12e:	b29a      	uxth	r2, r3
 800a130:	89fb      	ldrh	r3, [r7, #14]
 800a132:	4413      	add	r3, r2
 800a134:	83fb      	strh	r3, [r7, #30]
      break;
 800a136:	e013      	b.n	800a160 <BSP_LCD_DisplayStringAt+0xa8>
    }
    case LEFT_MODE:
    {
      refcolumn = Xpos;
 800a138:	89fb      	ldrh	r3, [r7, #14]
 800a13a:	83fb      	strh	r3, [r7, #30]
      break;
 800a13c:	e010      	b.n	800a160 <BSP_LCD_DisplayStringAt+0xa8>
    }
    case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size) * DrawProp.pFont->Width);
 800a13e:	693a      	ldr	r2, [r7, #16]
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	1ad3      	subs	r3, r2, r3
 800a144:	b29a      	uxth	r2, r3
 800a146:	4b21      	ldr	r3, [pc, #132]	; (800a1cc <BSP_LCD_DisplayStringAt+0x114>)
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	889b      	ldrh	r3, [r3, #4]
 800a14c:	fb12 f303 	smulbb	r3, r2, r3
 800a150:	b29a      	uxth	r2, r3
 800a152:	89fb      	ldrh	r3, [r7, #14]
 800a154:	1ad3      	subs	r3, r2, r3
 800a156:	83fb      	strh	r3, [r7, #30]
      break;
 800a158:	e002      	b.n	800a160 <BSP_LCD_DisplayStringAt+0xa8>
    }
    default:
    {
      refcolumn = Xpos;
 800a15a:	89fb      	ldrh	r3, [r7, #14]
 800a15c:	83fb      	strh	r3, [r7, #30]
      break;
 800a15e:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800a160:	8bfb      	ldrh	r3, [r7, #30]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d003      	beq.n	800a16e <BSP_LCD_DisplayStringAt+0xb6>
 800a166:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	da15      	bge.n	800a19a <BSP_LCD_DisplayStringAt+0xe2>
  {
    refcolumn = 1;
 800a16e:	2301      	movs	r3, #1
 800a170:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800a172:	e012      	b.n	800a19a <BSP_LCD_DisplayStringAt+0xe2>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	781a      	ldrb	r2, [r3, #0]
 800a178:	89b9      	ldrh	r1, [r7, #12]
 800a17a:	8bfb      	ldrh	r3, [r7, #30]
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7ff ff71 	bl	800a064 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 800a182:	4b12      	ldr	r3, [pc, #72]	; (800a1cc <BSP_LCD_DisplayStringAt+0x114>)
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	889a      	ldrh	r2, [r3, #4]
 800a188:	8bfb      	ldrh	r3, [r7, #30]
 800a18a:	4413      	add	r3, r2
 800a18c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	3301      	adds	r3, #1
 800a192:	60bb      	str	r3, [r7, #8]
    i++;
 800a194:	8bbb      	ldrh	r3, [r7, #28]
 800a196:	3301      	adds	r3, #1
 800a198:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00f      	beq.n	800a1c2 <BSP_LCD_DisplayStringAt+0x10a>
 800a1a2:	f7ff fef1 	bl	8009f88 <BSP_LCD_GetXSize>
 800a1a6:	4601      	mov	r1, r0
 800a1a8:	8bbb      	ldrh	r3, [r7, #28]
 800a1aa:	4a08      	ldr	r2, [pc, #32]	; (800a1cc <BSP_LCD_DisplayStringAt+0x114>)
 800a1ac:	6892      	ldr	r2, [r2, #8]
 800a1ae:	8892      	ldrh	r2, [r2, #4]
 800a1b0:	fb02 f303 	mul.w	r3, r2, r3
 800a1b4:	1acb      	subs	r3, r1, r3
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	4a04      	ldr	r2, [pc, #16]	; (800a1cc <BSP_LCD_DisplayStringAt+0x114>)
 800a1ba:	6892      	ldr	r2, [r2, #8]
 800a1bc:	8892      	ldrh	r2, [r2, #4]
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d2d8      	bcs.n	800a174 <BSP_LCD_DisplayStringAt+0xbc>
  }
}
 800a1c2:	bf00      	nop
 800a1c4:	3720      	adds	r7, #32
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	2000136c 	.word	0x2000136c

0800a1d0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	80fb      	strh	r3, [r7, #6]
 800a1da:	460b      	mov	r3, r1
 800a1dc:	80bb      	strh	r3, [r7, #4]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	807b      	strh	r3, [r7, #2]
  if (LcdDrv->WritePixel != NULL)
 800a1e2:	4b08      	ldr	r3, [pc, #32]	; (800a204 <BSP_LCD_DrawPixel+0x34>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	695b      	ldr	r3, [r3, #20]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d006      	beq.n	800a1fa <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 800a1ec:	4b05      	ldr	r3, [pc, #20]	; (800a204 <BSP_LCD_DrawPixel+0x34>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	695b      	ldr	r3, [r3, #20]
 800a1f2:	887a      	ldrh	r2, [r7, #2]
 800a1f4:	88b9      	ldrh	r1, [r7, #4]
 800a1f6:	88f8      	ldrh	r0, [r7, #6]
 800a1f8:	4798      	blx	r3
  }
}
 800a1fa:	bf00      	nop
 800a1fc:	3708      	adds	r7, #8
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	20001378 	.word	0x20001378

0800a208 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800a208:	b590      	push	{r4, r7, lr}
 800a20a:	b085      	sub	sp, #20
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	4603      	mov	r3, r0
 800a210:	80fb      	strh	r3, [r7, #6]
 800a212:	460b      	mov	r3, r1
 800a214:	80bb      	strh	r3, [r7, #4]
 800a216:	4613      	mov	r3, r2
 800a218:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800a21a:	2300      	movs	r3, #0
 800a21c:	60fb      	str	r3, [r7, #12]

  if (LcdDrv->DrawHLine != NULL)
 800a21e:	4b15      	ldr	r3, [pc, #84]	; (800a274 <BSP_LCD_DrawHLine+0x6c>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	6a1b      	ldr	r3, [r3, #32]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00a      	beq.n	800a23e <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 800a228:	4b12      	ldr	r3, [pc, #72]	; (800a274 <BSP_LCD_DrawHLine+0x6c>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	6a1c      	ldr	r4, [r3, #32]
 800a22e:	4b12      	ldr	r3, [pc, #72]	; (800a278 <BSP_LCD_DrawHLine+0x70>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	b298      	uxth	r0, r3
 800a234:	887b      	ldrh	r3, [r7, #2]
 800a236:	88ba      	ldrh	r2, [r7, #4]
 800a238:	88f9      	ldrh	r1, [r7, #6]
 800a23a:	47a0      	blx	r4
    for (index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 800a23c:	e015      	b.n	800a26a <BSP_LCD_DrawHLine+0x62>
    for (index = 0; index < Length; index++)
 800a23e:	2300      	movs	r3, #0
 800a240:	60fb      	str	r3, [r7, #12]
 800a242:	e00e      	b.n	800a262 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	b29a      	uxth	r2, r3
 800a248:	88fb      	ldrh	r3, [r7, #6]
 800a24a:	4413      	add	r3, r2
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	4a0a      	ldr	r2, [pc, #40]	; (800a278 <BSP_LCD_DrawHLine+0x70>)
 800a250:	6812      	ldr	r2, [r2, #0]
 800a252:	b292      	uxth	r2, r2
 800a254:	88b9      	ldrh	r1, [r7, #4]
 800a256:	4618      	mov	r0, r3
 800a258:	f7ff ffba 	bl	800a1d0 <BSP_LCD_DrawPixel>
    for (index = 0; index < Length; index++)
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	3301      	adds	r3, #1
 800a260:	60fb      	str	r3, [r7, #12]
 800a262:	887b      	ldrh	r3, [r7, #2]
 800a264:	68fa      	ldr	r2, [r7, #12]
 800a266:	429a      	cmp	r2, r3
 800a268:	d3ec      	bcc.n	800a244 <BSP_LCD_DrawHLine+0x3c>
}
 800a26a:	bf00      	nop
 800a26c:	3714      	adds	r7, #20
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd90      	pop	{r4, r7, pc}
 800a272:	bf00      	nop
 800a274:	20001378 	.word	0x20001378
 800a278:	2000136c 	.word	0x2000136c

0800a27c <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b086      	sub	sp, #24
 800a280:	af00      	add	r7, sp, #0
 800a282:	4603      	mov	r3, r0
 800a284:	80fb      	strh	r3, [r7, #6]
 800a286:	460b      	mov	r3, r1
 800a288:	80bb      	strh	r3, [r7, #4]
 800a28a:	4613      	mov	r3, r2
 800a28c:	807b      	strh	r3, [r7, #2]
  int32_t  decision;       /* Decision Variable */
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */

  decision = 3 - (Radius << 1);
 800a28e:	887b      	ldrh	r3, [r7, #2]
 800a290:	005b      	lsls	r3, r3, #1
 800a292:	f1c3 0303 	rsb	r3, r3, #3
 800a296:	617b      	str	r3, [r7, #20]
  current_x = 0;
 800a298:	2300      	movs	r3, #0
 800a29a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800a29c:	887b      	ldrh	r3, [r7, #2]
 800a29e:	60fb      	str	r3, [r7, #12]

  while (current_x <= current_y)
 800a2a0:	e09a      	b.n	800a3d8 <BSP_LCD_DrawCircle+0x15c>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp.TextColor);
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	b29a      	uxth	r2, r3
 800a2a6:	88fb      	ldrh	r3, [r7, #6]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	b298      	uxth	r0, r3
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	88ba      	ldrh	r2, [r7, #4]
 800a2b2:	1ad3      	subs	r3, r2, r3
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	4a4d      	ldr	r2, [pc, #308]	; (800a3ec <BSP_LCD_DrawCircle+0x170>)
 800a2b8:	6812      	ldr	r2, [r2, #0]
 800a2ba:	b292      	uxth	r2, r2
 800a2bc:	4619      	mov	r1, r3
 800a2be:	f7ff ff87 	bl	800a1d0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp.TextColor);
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	88fa      	ldrh	r2, [r7, #6]
 800a2c8:	1ad3      	subs	r3, r2, r3
 800a2ca:	b298      	uxth	r0, r3
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	88ba      	ldrh	r2, [r7, #4]
 800a2d2:	1ad3      	subs	r3, r2, r3
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	4a45      	ldr	r2, [pc, #276]	; (800a3ec <BSP_LCD_DrawCircle+0x170>)
 800a2d8:	6812      	ldr	r2, [r2, #0]
 800a2da:	b292      	uxth	r2, r2
 800a2dc:	4619      	mov	r1, r3
 800a2de:	f7ff ff77 	bl	800a1d0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp.TextColor);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	b29a      	uxth	r2, r3
 800a2e6:	88fb      	ldrh	r3, [r7, #6]
 800a2e8:	4413      	add	r3, r2
 800a2ea:	b298      	uxth	r0, r3
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	88ba      	ldrh	r2, [r7, #4]
 800a2f2:	1ad3      	subs	r3, r2, r3
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	4a3d      	ldr	r2, [pc, #244]	; (800a3ec <BSP_LCD_DrawCircle+0x170>)
 800a2f8:	6812      	ldr	r2, [r2, #0]
 800a2fa:	b292      	uxth	r2, r2
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	f7ff ff67 	bl	800a1d0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp.TextColor);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	b29b      	uxth	r3, r3
 800a306:	88fa      	ldrh	r2, [r7, #6]
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	b298      	uxth	r0, r3
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	b29b      	uxth	r3, r3
 800a310:	88ba      	ldrh	r2, [r7, #4]
 800a312:	1ad3      	subs	r3, r2, r3
 800a314:	b29b      	uxth	r3, r3
 800a316:	4a35      	ldr	r2, [pc, #212]	; (800a3ec <BSP_LCD_DrawCircle+0x170>)
 800a318:	6812      	ldr	r2, [r2, #0]
 800a31a:	b292      	uxth	r2, r2
 800a31c:	4619      	mov	r1, r3
 800a31e:	f7ff ff57 	bl	800a1d0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp.TextColor);
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	b29a      	uxth	r2, r3
 800a326:	88fb      	ldrh	r3, [r7, #6]
 800a328:	4413      	add	r3, r2
 800a32a:	b298      	uxth	r0, r3
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	b29a      	uxth	r2, r3
 800a330:	88bb      	ldrh	r3, [r7, #4]
 800a332:	4413      	add	r3, r2
 800a334:	b29b      	uxth	r3, r3
 800a336:	4a2d      	ldr	r2, [pc, #180]	; (800a3ec <BSP_LCD_DrawCircle+0x170>)
 800a338:	6812      	ldr	r2, [r2, #0]
 800a33a:	b292      	uxth	r2, r2
 800a33c:	4619      	mov	r1, r3
 800a33e:	f7ff ff47 	bl	800a1d0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp.TextColor);
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	b29b      	uxth	r3, r3
 800a346:	88fa      	ldrh	r2, [r7, #6]
 800a348:	1ad3      	subs	r3, r2, r3
 800a34a:	b298      	uxth	r0, r3
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	b29a      	uxth	r2, r3
 800a350:	88bb      	ldrh	r3, [r7, #4]
 800a352:	4413      	add	r3, r2
 800a354:	b29b      	uxth	r3, r3
 800a356:	4a25      	ldr	r2, [pc, #148]	; (800a3ec <BSP_LCD_DrawCircle+0x170>)
 800a358:	6812      	ldr	r2, [r2, #0]
 800a35a:	b292      	uxth	r2, r2
 800a35c:	4619      	mov	r1, r3
 800a35e:	f7ff ff37 	bl	800a1d0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp.TextColor);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	b29a      	uxth	r2, r3
 800a366:	88fb      	ldrh	r3, [r7, #6]
 800a368:	4413      	add	r3, r2
 800a36a:	b298      	uxth	r0, r3
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	b29a      	uxth	r2, r3
 800a370:	88bb      	ldrh	r3, [r7, #4]
 800a372:	4413      	add	r3, r2
 800a374:	b29b      	uxth	r3, r3
 800a376:	4a1d      	ldr	r2, [pc, #116]	; (800a3ec <BSP_LCD_DrawCircle+0x170>)
 800a378:	6812      	ldr	r2, [r2, #0]
 800a37a:	b292      	uxth	r2, r2
 800a37c:	4619      	mov	r1, r3
 800a37e:	f7ff ff27 	bl	800a1d0 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp.TextColor);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	b29b      	uxth	r3, r3
 800a386:	88fa      	ldrh	r2, [r7, #6]
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	b298      	uxth	r0, r3
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	b29a      	uxth	r2, r3
 800a390:	88bb      	ldrh	r3, [r7, #4]
 800a392:	4413      	add	r3, r2
 800a394:	b29b      	uxth	r3, r3
 800a396:	4a15      	ldr	r2, [pc, #84]	; (800a3ec <BSP_LCD_DrawCircle+0x170>)
 800a398:	6812      	ldr	r2, [r2, #0]
 800a39a:	b292      	uxth	r2, r2
 800a39c:	4619      	mov	r1, r3
 800a39e:	f7ff ff17 	bl	800a1d0 <BSP_LCD_DrawPixel>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800a3a2:	4813      	ldr	r0, [pc, #76]	; (800a3f0 <BSP_LCD_DrawCircle+0x174>)
 800a3a4:	f7ff fe18 	bl	8009fd8 <BSP_LCD_SetFont>

    if (decision < 0)
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	da06      	bge.n	800a3bc <BSP_LCD_DrawCircle+0x140>
    {
      decision += (current_x << 2) + 6;
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	009a      	lsls	r2, r3, #2
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	3306      	adds	r3, #6
 800a3b8:	617b      	str	r3, [r7, #20]
 800a3ba:	e00a      	b.n	800a3d2 <BSP_LCD_DrawCircle+0x156>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800a3bc:	693a      	ldr	r2, [r7, #16]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	1ad3      	subs	r3, r2, r3
 800a3c2:	009a      	lsls	r2, r3, #2
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	330a      	adds	r3, #10
 800a3ca:	617b      	str	r3, [r7, #20]
      current_y--;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	3b01      	subs	r3, #1
 800a3d0:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800a3d8:	693a      	ldr	r2, [r7, #16]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	f67f af60 	bls.w	800a2a2 <BSP_LCD_DrawCircle+0x26>
  }
}
 800a3e2:	bf00      	nop
 800a3e4:	bf00      	nop
 800a3e6:	3718      	adds	r7, #24
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	2000136c 	.word	0x2000136c
 800a3f0:	2000053c 	.word	0x2000053c

0800a3f4 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b086      	sub	sp, #24
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	80fb      	strh	r3, [r7, #6]
 800a3fe:	460b      	mov	r3, r1
 800a400:	80bb      	strh	r3, [r7, #4]
 800a402:	4613      	mov	r3, r2
 800a404:	807b      	strh	r3, [r7, #2]
  int32_t  decision;        /* Decision Variable */
  uint32_t  current_x;    /* Current X Value */
  uint32_t  current_y;    /* Current Y Value */

  decision = 3 - (Radius << 1);
 800a406:	887b      	ldrh	r3, [r7, #2]
 800a408:	005b      	lsls	r3, r3, #1
 800a40a:	f1c3 0303 	rsb	r3, r3, #3
 800a40e:	617b      	str	r3, [r7, #20]

  current_x = 0;
 800a410:	2300      	movs	r3, #0
 800a412:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800a414:	887b      	ldrh	r3, [r7, #2]
 800a416:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800a418:	4b3e      	ldr	r3, [pc, #248]	; (800a514 <BSP_LCD_FillCircle+0x120>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	4618      	mov	r0, r3
 800a420:	f7ff fdca 	bl	8009fb8 <BSP_LCD_SetTextColor>

  while (current_x <= current_y)
 800a424:	e061      	b.n	800a4ea <BSP_LCD_FillCircle+0xf6>
  {
    if (current_y > 0)
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d021      	beq.n	800a470 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2 * current_y);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	b29b      	uxth	r3, r3
 800a430:	88fa      	ldrh	r2, [r7, #6]
 800a432:	1ad3      	subs	r3, r2, r3
 800a434:	b298      	uxth	r0, r3
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	b29a      	uxth	r2, r3
 800a43a:	88bb      	ldrh	r3, [r7, #4]
 800a43c:	4413      	add	r3, r2
 800a43e:	b299      	uxth	r1, r3
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	b29b      	uxth	r3, r3
 800a444:	005b      	lsls	r3, r3, #1
 800a446:	b29b      	uxth	r3, r3
 800a448:	461a      	mov	r2, r3
 800a44a:	f7ff fedd 	bl	800a208 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2 * current_y);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	b29b      	uxth	r3, r3
 800a452:	88fa      	ldrh	r2, [r7, #6]
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	b298      	uxth	r0, r3
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	b29b      	uxth	r3, r3
 800a45c:	88ba      	ldrh	r2, [r7, #4]
 800a45e:	1ad3      	subs	r3, r2, r3
 800a460:	b299      	uxth	r1, r3
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	b29b      	uxth	r3, r3
 800a466:	005b      	lsls	r3, r3, #1
 800a468:	b29b      	uxth	r3, r3
 800a46a:	461a      	mov	r2, r3
 800a46c:	f7ff fecc 	bl	800a208 <BSP_LCD_DrawHLine>
    }

    if (current_x > 0)
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d021      	beq.n	800a4ba <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2 * current_x);
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	b29b      	uxth	r3, r3
 800a47a:	88fa      	ldrh	r2, [r7, #6]
 800a47c:	1ad3      	subs	r3, r2, r3
 800a47e:	b298      	uxth	r0, r3
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	b29b      	uxth	r3, r3
 800a484:	88ba      	ldrh	r2, [r7, #4]
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	b299      	uxth	r1, r3
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	005b      	lsls	r3, r3, #1
 800a490:	b29b      	uxth	r3, r3
 800a492:	461a      	mov	r2, r3
 800a494:	f7ff feb8 	bl	800a208 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2 * current_x);
 800a498:	693b      	ldr	r3, [r7, #16]
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	88fa      	ldrh	r2, [r7, #6]
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	b298      	uxth	r0, r3
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	88bb      	ldrh	r3, [r7, #4]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	b299      	uxth	r1, r3
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	005b      	lsls	r3, r3, #1
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	461a      	mov	r2, r3
 800a4b6:	f7ff fea7 	bl	800a208 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	da06      	bge.n	800a4ce <BSP_LCD_FillCircle+0xda>
    {
      decision += (current_x << 2) + 6;
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	009a      	lsls	r2, r3, #2
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	3306      	adds	r3, #6
 800a4ca:	617b      	str	r3, [r7, #20]
 800a4cc:	e00a      	b.n	800a4e4 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800a4ce:	693a      	ldr	r2, [r7, #16]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	1ad3      	subs	r3, r2, r3
 800a4d4:	009a      	lsls	r2, r3, #2
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	4413      	add	r3, r2
 800a4da:	330a      	adds	r3, #10
 800a4dc:	617b      	str	r3, [r7, #20]
      current_y--;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	3b01      	subs	r3, #1
 800a4e2:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800a4ea:	693a      	ldr	r2, [r7, #16]
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d999      	bls.n	800a426 <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800a4f2:	4b08      	ldr	r3, [pc, #32]	; (800a514 <BSP_LCD_FillCircle+0x120>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7ff fd5d 	bl	8009fb8 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800a4fe:	887a      	ldrh	r2, [r7, #2]
 800a500:	88b9      	ldrh	r1, [r7, #4]
 800a502:	88fb      	ldrh	r3, [r7, #6]
 800a504:	4618      	mov	r0, r3
 800a506:	f7ff feb9 	bl	800a27c <BSP_LCD_DrawCircle>
}
 800a50a:	bf00      	nop
 800a50c:	3718      	adds	r7, #24
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	2000136c 	.word	0x2000136c

0800a518 <BSP_LCD_ScreenDimmingConfig>:
  * @param  step    : step value in percent
  * @param  delay   : delay in milliseconds between each step
  * @retval None
  */
void BSP_LCD_ScreenDimmingConfig(const uint8_t start, const uint8_t stop, const uint8_t step, const uint8_t delay)
{
 800a518:	b490      	push	{r4, r7}
 800a51a:	b082      	sub	sp, #8
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	4604      	mov	r4, r0
 800a520:	4608      	mov	r0, r1
 800a522:	4611      	mov	r1, r2
 800a524:	461a      	mov	r2, r3
 800a526:	4623      	mov	r3, r4
 800a528:	71fb      	strb	r3, [r7, #7]
 800a52a:	4603      	mov	r3, r0
 800a52c:	71bb      	strb	r3, [r7, #6]
 800a52e:	460b      	mov	r3, r1
 800a530:	717b      	strb	r3, [r7, #5]
 800a532:	4613      	mov	r3, r2
 800a534:	713b      	strb	r3, [r7, #4]
  if ((dimming_config.ongoing == 0)
 800a536:	4b10      	ldr	r3, [pc, #64]	; (800a578 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d117      	bne.n	800a56e <BSP_LCD_ScreenDimmingConfig+0x56>
      && (start <= 100) && (stop <= 100)
 800a53e:	79fb      	ldrb	r3, [r7, #7]
 800a540:	2b64      	cmp	r3, #100	; 0x64
 800a542:	d814      	bhi.n	800a56e <BSP_LCD_ScreenDimmingConfig+0x56>
 800a544:	79bb      	ldrb	r3, [r7, #6]
 800a546:	2b64      	cmp	r3, #100	; 0x64
 800a548:	d811      	bhi.n	800a56e <BSP_LCD_ScreenDimmingConfig+0x56>
      && (step > 0) && (step < 100))
 800a54a:	797b      	ldrb	r3, [r7, #5]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d00e      	beq.n	800a56e <BSP_LCD_ScreenDimmingConfig+0x56>
 800a550:	797b      	ldrb	r3, [r7, #5]
 800a552:	2b63      	cmp	r3, #99	; 0x63
 800a554:	d80b      	bhi.n	800a56e <BSP_LCD_ScreenDimmingConfig+0x56>
  {
    dimming_config.start = start;
 800a556:	4a08      	ldr	r2, [pc, #32]	; (800a578 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800a558:	79fb      	ldrb	r3, [r7, #7]
 800a55a:	7053      	strb	r3, [r2, #1]
    dimming_config.stop  = stop;
 800a55c:	4a06      	ldr	r2, [pc, #24]	; (800a578 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800a55e:	79bb      	ldrb	r3, [r7, #6]
 800a560:	7093      	strb	r3, [r2, #2]
    dimming_config.step  = step;
 800a562:	4a05      	ldr	r2, [pc, #20]	; (800a578 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800a564:	797b      	ldrb	r3, [r7, #5]
 800a566:	70d3      	strb	r3, [r2, #3]
    dimming_config.delay = delay;
 800a568:	4a03      	ldr	r2, [pc, #12]	; (800a578 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800a56a:	793b      	ldrb	r3, [r7, #4]
 800a56c:	7113      	strb	r3, [r2, #4]
  }
}
 800a56e:	bf00      	nop
 800a570:	3708      	adds	r7, #8
 800a572:	46bd      	mov	sp, r7
 800a574:	bc90      	pop	{r4, r7}
 800a576:	4770      	bx	lr
 800a578:	20000548 	.word	0x20000548

0800a57c <BSP_LCD_ScreenDimmingOn>:
  * @note   Screen brightness is gradually decreased
  * @param  None
  * @retval None
  */
void BSP_LCD_ScreenDimmingOn(void)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
  }


#else
  /* Counter Prescaler value */
  uint32_t uhPrescalerValue = 0;
 800a582:	2300      	movs	r3, #0
 800a584:	603b      	str	r3, [r7, #0]
  int32_t   step;

  /* Reject this while ongoing dimming */
  if (dimming_config.ongoing)
 800a586:	4b71      	ldr	r3, [pc, #452]	; (800a74c <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f040 80d9 	bne.w	800a742 <BSP_LCD_ScreenDimmingOn+0x1c6>
  {
    return;
  }

  /* Set that dim feature is active */
  dimming_on = 1;
 800a590:	4b6f      	ldr	r3, [pc, #444]	; (800a750 <BSP_LCD_ScreenDimmingOn+0x1d4>)
 800a592:	2201      	movs	r2, #1
 800a594:	601a      	str	r2, [r3, #0]
  dimming_config.ongoing = 1;
 800a596:	4b6d      	ldr	r3, [pc, #436]	; (800a74c <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a598:	2201      	movs	r2, #1
 800a59a:	701a      	strb	r2, [r3, #0]

  if (dimming_config.stop > dimming_config.start)
 800a59c:	4b6b      	ldr	r3, [pc, #428]	; (800a74c <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a59e:	789a      	ldrb	r2, [r3, #2]
 800a5a0:	4b6a      	ldr	r3, [pc, #424]	; (800a74c <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a5a2:	785b      	ldrb	r3, [r3, #1]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d903      	bls.n	800a5b0 <BSP_LCD_ScreenDimmingOn+0x34>
  {
    step      = dimming_config.step;
 800a5a8:	4b68      	ldr	r3, [pc, #416]	; (800a74c <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a5aa:	78db      	ldrb	r3, [r3, #3]
 800a5ac:	607b      	str	r3, [r7, #4]
 800a5ae:	e003      	b.n	800a5b8 <BSP_LCD_ScreenDimmingOn+0x3c>
  }
  else
  {
    step      = -dimming_config.step;
 800a5b0:	4b66      	ldr	r3, [pc, #408]	; (800a74c <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a5b2:	78db      	ldrb	r3, [r3, #3]
 800a5b4:	425b      	negs	r3, r3
 800a5b6:	607b      	str	r3, [r7, #4]

  /* Always redo the full initialization as there is no apriori knowledge
    of IO or timer settings at this point (may have been modified by application) */

  /* Compute the prescaler value to have TIM1 counter clock equal to 16000000 Hz */
  uhPrescalerValue = (uint32_t)(SystemCoreClock / 16000000) - 1;
 800a5b8:	4b66      	ldr	r3, [pc, #408]	; (800a754 <BSP_LCD_ScreenDimmingOn+0x1d8>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a66      	ldr	r2, [pc, #408]	; (800a758 <BSP_LCD_ScreenDimmingOn+0x1dc>)
 800a5be:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c2:	0d9b      	lsrs	r3, r3, #22
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	603b      	str	r3, [r7, #0]

  LCD_TimHandle.Instance = TIMx;
 800a5c8:	4b64      	ldr	r3, [pc, #400]	; (800a75c <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a5ca:	4a65      	ldr	r2, [pc, #404]	; (800a760 <BSP_LCD_ScreenDimmingOn+0x1e4>)
 800a5cc:	601a      	str	r2, [r3, #0]

  __HAL_TIM_RESET_HANDLE_STATE(&LCD_TimHandle); /* to force MSP call */
 800a5ce:	4b63      	ldr	r3, [pc, #396]	; (800a75c <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a5d6:	4b61      	ldr	r3, [pc, #388]	; (800a75c <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5de:	4b5f      	ldr	r3, [pc, #380]	; (800a75c <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5e6:	4b5d      	ldr	r3, [pc, #372]	; (800a75c <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5ee:	4b5b      	ldr	r3, [pc, #364]	; (800a75c <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5f6:	4b59      	ldr	r3, [pc, #356]	; (800a75c <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5fe:	4b57      	ldr	r3, [pc, #348]	; (800a75c <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a600:	2200      	movs	r2, #0
 800a602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a606:	4b55      	ldr	r3, [pc, #340]	; (800a75c <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a608:	2200      	movs	r2, #0
 800a60a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a60e:	4b53      	ldr	r3, [pc, #332]	; (800a75c <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a610:	2200      	movs	r2, #0
 800a612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a616:	4b51      	ldr	r3, [pc, #324]	; (800a75c <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a618:	2200      	movs	r2, #0
 800a61a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a61e:	4b4f      	ldr	r3, [pc, #316]	; (800a75c <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a620:	2200      	movs	r2, #0
 800a622:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800a626:	4b4d      	ldr	r3, [pc, #308]	; (800a75c <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a628:	2200      	movs	r2, #0
 800a62a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  LCD_TimHandle.Init.Prescaler         = uhPrescalerValue;
 800a62e:	4a4b      	ldr	r2, [pc, #300]	; (800a75c <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	6053      	str	r3, [r2, #4]
  LCD_TimHandle.Init.Period            = PERIOD_VALUE;
 800a634:	4b49      	ldr	r3, [pc, #292]	; (800a75c <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a636:	f240 2299 	movw	r2, #665	; 0x299
 800a63a:	60da      	str	r2, [r3, #12]
  LCD_TimHandle.Init.ClockDivision     = 0;
 800a63c:	4b47      	ldr	r3, [pc, #284]	; (800a75c <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a63e:	2200      	movs	r2, #0
 800a640:	611a      	str	r2, [r3, #16]
  LCD_TimHandle.Init.CounterMode       = (step > 0 ? TIM_COUNTERMODE_DOWN : TIM_COUNTERMODE_UP);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	dd01      	ble.n	800a64c <BSP_LCD_ScreenDimmingOn+0xd0>
 800a648:	2310      	movs	r3, #16
 800a64a:	e000      	b.n	800a64e <BSP_LCD_ScreenDimmingOn+0xd2>
 800a64c:	2300      	movs	r3, #0
 800a64e:	4a43      	ldr	r2, [pc, #268]	; (800a75c <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a650:	6093      	str	r3, [r2, #8]
  LCD_TimHandle.Init.RepetitionCounter = 0;
 800a652:	4b42      	ldr	r3, [pc, #264]	; (800a75c <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a654:	2200      	movs	r2, #0
 800a656:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&LCD_TimHandle) != HAL_OK)
 800a658:	4840      	ldr	r0, [pc, #256]	; (800a75c <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a65a:	f008 fc27 	bl	8012eac <HAL_TIM_PWM_Init>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d001      	beq.n	800a668 <BSP_LCD_ScreenDimmingOn+0xec>
  {
    /* Initialization Error */
    BSP_ErrorHandler();
 800a664:	f7fe fd91 	bl	800918a <BSP_ErrorHandler>
  }

  /* Common configuration for all channels */
  LCD_sConfig.OCMode       = TIM_OCMODE_PWM1;
 800a668:	4b3e      	ldr	r3, [pc, #248]	; (800a764 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a66a:	2260      	movs	r2, #96	; 0x60
 800a66c:	601a      	str	r2, [r3, #0]
  LCD_sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
 800a66e:	4b3d      	ldr	r3, [pc, #244]	; (800a764 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a670:	2200      	movs	r2, #0
 800a672:	609a      	str	r2, [r3, #8]
  LCD_sConfig.OCFastMode   = TIM_OCFAST_DISABLE;
 800a674:	4b3b      	ldr	r3, [pc, #236]	; (800a764 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a676:	2200      	movs	r2, #0
 800a678:	611a      	str	r2, [r3, #16]
  LCD_sConfig.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 800a67a:	4b3a      	ldr	r3, [pc, #232]	; (800a764 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	60da      	str	r2, [r3, #12]
  LCD_sConfig.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a680:	4b38      	ldr	r3, [pc, #224]	; (800a764 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a682:	2200      	movs	r2, #0
 800a684:	619a      	str	r2, [r3, #24]

  LCD_sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;
 800a686:	4b37      	ldr	r3, [pc, #220]	; (800a764 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a688:	2200      	movs	r2, #0
 800a68a:	615a      	str	r2, [r3, #20]

  /* Set the pulse value for channel */
  LCD_sConfig.Pulse = __DIMMING_CYCLE_VALUE(dimming_config.start);
 800a68c:	4b2f      	ldr	r3, [pc, #188]	; (800a74c <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a68e:	785b      	ldrb	r3, [r3, #1]
 800a690:	461a      	mov	r2, r3
 800a692:	f240 2399 	movw	r3, #665	; 0x299
 800a696:	fb02 f303 	mul.w	r3, r2, r3
 800a69a:	4a33      	ldr	r2, [pc, #204]	; (800a768 <BSP_LCD_ScreenDimmingOn+0x1ec>)
 800a69c:	fba2 2303 	umull	r2, r3, r2, r3
 800a6a0:	095b      	lsrs	r3, r3, #5
 800a6a2:	4a30      	ldr	r2, [pc, #192]	; (800a764 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a6a4:	6053      	str	r3, [r2, #4]
  if (HAL_TIM_PWM_ConfigChannel(&LCD_TimHandle, &LCD_sConfig, TIMx_CHANNEL) != HAL_OK)
 800a6a6:	220c      	movs	r2, #12
 800a6a8:	492e      	ldr	r1, [pc, #184]	; (800a764 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800a6aa:	482c      	ldr	r0, [pc, #176]	; (800a75c <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a6ac:	f008 fdf2 	bl	8013294 <HAL_TIM_PWM_ConfigChannel>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <BSP_LCD_ScreenDimmingOn+0x13e>
  {
    /* Configuration Error */
    BSP_ErrorHandler();
 800a6b6:	f7fe fd68 	bl	800918a <BSP_ErrorHandler>
  }

  /* Start Timer channel */
  if (HAL_TIM_PWM_Start(&LCD_TimHandle, TIMx_CHANNEL) != HAL_OK)
 800a6ba:	210c      	movs	r1, #12
 800a6bc:	4827      	ldr	r0, [pc, #156]	; (800a75c <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a6be:	f008 fc4d 	bl	8012f5c <HAL_TIM_PWM_Start>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d001      	beq.n	800a6cc <BSP_LCD_ScreenDimmingOn+0x150>
  {
    /* PWM Generation Error */
    BSP_ErrorHandler();
 800a6c8:	f7fe fd5f 	bl	800918a <BSP_ErrorHandler>
  }

  /* Set the pulse value for the timer channel */
  i = dimming_config.start;
 800a6cc:	4b1f      	ldr	r3, [pc, #124]	; (800a74c <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a6ce:	785b      	ldrb	r3, [r3, #1]
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	4b26      	ldr	r3, [pc, #152]	; (800a76c <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800a6d4:	601a      	str	r2, [r3, #0]
  while (dimming_config.ongoing)
 800a6d6:	e02f      	b.n	800a738 <BSP_LCD_ScreenDimmingOn+0x1bc>
  {
    __HAL_TIM_SET_COMPARE(&LCD_TimHandle, TIMx_CHANNEL, __DIMMING_CYCLE_VALUE(i));
 800a6d8:	4b24      	ldr	r3, [pc, #144]	; (800a76c <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f240 2299 	movw	r2, #665	; 0x299
 800a6e0:	fb03 f202 	mul.w	r2, r3, r2
 800a6e4:	4b1d      	ldr	r3, [pc, #116]	; (800a75c <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	491f      	ldr	r1, [pc, #124]	; (800a768 <BSP_LCD_ScreenDimmingOn+0x1ec>)
 800a6ea:	fba1 1202 	umull	r1, r2, r1, r2
 800a6ee:	0952      	lsrs	r2, r2, #5
 800a6f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Exit if stop is reached */
    if (((step > 0) && (i >= dimming_config.stop))
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	dd06      	ble.n	800a706 <BSP_LCD_ScreenDimmingOn+0x18a>
 800a6f8:	4b14      	ldr	r3, [pc, #80]	; (800a74c <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a6fa:	789b      	ldrb	r3, [r3, #2]
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	4b1b      	ldr	r3, [pc, #108]	; (800a76c <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	429a      	cmp	r2, r3
 800a704:	d909      	bls.n	800a71a <BSP_LCD_ScreenDimmingOn+0x19e>
        || ((step < 0) && (i <= dimming_config.stop)))
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	da0a      	bge.n	800a722 <BSP_LCD_ScreenDimmingOn+0x1a6>
 800a70c:	4b0f      	ldr	r3, [pc, #60]	; (800a74c <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a70e:	789b      	ldrb	r3, [r3, #2]
 800a710:	461a      	mov	r2, r3
 800a712:	4b16      	ldr	r3, [pc, #88]	; (800a76c <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	429a      	cmp	r2, r3
 800a718:	d303      	bcc.n	800a722 <BSP_LCD_ScreenDimmingOn+0x1a6>
    {
      dimming_config.ongoing = 0;
 800a71a:	4b0c      	ldr	r3, [pc, #48]	; (800a74c <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a71c:	2200      	movs	r2, #0
 800a71e:	701a      	strb	r2, [r3, #0]
 800a720:	e00a      	b.n	800a738 <BSP_LCD_ScreenDimmingOn+0x1bc>
    }
    else
    {
      HAL_Delay(dimming_config.delay);
 800a722:	4b0a      	ldr	r3, [pc, #40]	; (800a74c <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a724:	791b      	ldrb	r3, [r3, #4]
 800a726:	4618      	mov	r0, r3
 800a728:	f000 fb44 	bl	800adb4 <HAL_Delay>
      i += step;
 800a72c:	4b0f      	ldr	r3, [pc, #60]	; (800a76c <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4413      	add	r3, r2
 800a734:	4a0d      	ldr	r2, [pc, #52]	; (800a76c <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800a736:	6013      	str	r3, [r2, #0]
  while (dimming_config.ongoing)
 800a738:	4b04      	ldr	r3, [pc, #16]	; (800a74c <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800a73a:	781b      	ldrb	r3, [r3, #0]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1cb      	bne.n	800a6d8 <BSP_LCD_ScreenDimmingOn+0x15c>
 800a740:	e000      	b.n	800a744 <BSP_LCD_ScreenDimmingOn+0x1c8>
    return;
 800a742:	bf00      	nop
    }
  }
#endif
}
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	20000548 	.word	0x20000548
 800a750:	200012fc 	.word	0x200012fc
 800a754:	20000194 	.word	0x20000194
 800a758:	431bde83 	.word	0x431bde83
 800a75c:	20001300 	.word	0x20001300
 800a760:	40000c00 	.word	0x40000c00
 800a764:	2000134c 	.word	0x2000134c
 800a768:	51eb851f 	.word	0x51eb851f
 800a76c:	2000137c 	.word	0x2000137c

0800a770 <BSP_LCD_ScreenDimmingOff>:
  * @note   Screen brightness is immediately set to its highest level
  * @param  None
  * @retval None
  */
void BSP_LCD_ScreenDimmingOff(void)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	af00      	add	r7, sp, #0
#if defined(LPTIMER_DIMMING)
  GPIO_InitTypeDef GPIO_InitStructure;
#endif

  if (dimming_on == 1)
 800a774:	4b0d      	ldr	r3, [pc, #52]	; (800a7ac <BSP_LCD_ScreenDimmingOff+0x3c>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d114      	bne.n	800a7a6 <BSP_LCD_ScreenDimmingOff+0x36>
  {
    /* Stop ongoing dimming */
    dimming_config.ongoing = 0;
 800a77c:	4b0c      	ldr	r3, [pc, #48]	; (800a7b0 <BSP_LCD_ScreenDimmingOff+0x40>)
 800a77e:	2200      	movs	r2, #0
 800a780:	701a      	strb	r2, [r3, #0]

    /* Disable timer clock for power consumption reasons */
    __HAL_RCC_LPTIM1_CLK_DISABLE();
#else
    /* Stop Timer channel */
    if (HAL_TIM_PWM_Stop(&LCD_TimHandle, TIMx_CHANNEL) != HAL_OK)
 800a782:	210c      	movs	r1, #12
 800a784:	480b      	ldr	r0, [pc, #44]	; (800a7b4 <BSP_LCD_ScreenDimmingOff+0x44>)
 800a786:	f008 fcef 	bl	8013168 <HAL_TIM_PWM_Stop>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d001      	beq.n	800a794 <BSP_LCD_ScreenDimmingOff+0x24>
    {
      /* PWM Generation Error */
      BSP_ErrorHandler();
 800a790:	f7fe fcfb 	bl	800918a <BSP_ErrorHandler>
    }

    /* Disable timer clock for power consumption reasons */
    TIMx_CLK_DISABLE();
 800a794:	4b08      	ldr	r3, [pc, #32]	; (800a7b8 <BSP_LCD_ScreenDimmingOff+0x48>)
 800a796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a798:	4a07      	ldr	r2, [pc, #28]	; (800a7b8 <BSP_LCD_ScreenDimmingOff+0x48>)
 800a79a:	f023 0308 	bic.w	r3, r3, #8
 800a79e:	6593      	str	r3, [r2, #88]	; 0x58
#endif

    dimming_on = 0;
 800a7a0:	4b02      	ldr	r3, [pc, #8]	; (800a7ac <BSP_LCD_ScreenDimmingOff+0x3c>)
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	601a      	str	r2, [r3, #0]
  }
}
 800a7a6:	bf00      	nop
 800a7a8:	bd80      	pop	{r7, pc}
 800a7aa:	bf00      	nop
 800a7ac:	200012fc 	.word	0x200012fc
 800a7b0:	20000548 	.word	0x20000548
 800a7b4:	20001300 	.word	0x20001300
 800a7b8:	40021000 	.word	0x40021000

0800a7bc <HAL_TIM_PWM_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b088      	sub	sp, #32
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStruct;

  /* TIMx Peripheral clock enable */
  TIMx_CLK_ENABLE();
 800a7c4:	4b0f      	ldr	r3, [pc, #60]	; (800a804 <HAL_TIM_PWM_MspInit+0x48>)
 800a7c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7c8:	4a0e      	ldr	r2, [pc, #56]	; (800a804 <HAL_TIM_PWM_MspInit+0x48>)
 800a7ca:	f043 0308 	orr.w	r3, r3, #8
 800a7ce:	6593      	str	r3, [r2, #88]	; 0x58
 800a7d0:	4b0c      	ldr	r3, [pc, #48]	; (800a804 <HAL_TIM_PWM_MspInit+0x48>)
 800a7d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7d4:	f003 0308 	and.w	r3, r3, #8
 800a7d8:	60bb      	str	r3, [r7, #8]
 800a7da:	68bb      	ldr	r3, [r7, #8]

  /* Timer channel configuration */

  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7dc:	2302      	movs	r3, #2
 800a7de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7e4:	2303      	movs	r3, #3
 800a7e6:	61bb      	str	r3, [r7, #24]

  GPIO_InitStruct.Alternate = TIMx_CHANNEl_AF;
 800a7e8:	2302      	movs	r3, #2
 800a7ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a7f0:	f107 030c 	add.w	r3, r7, #12
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	4804      	ldr	r0, [pc, #16]	; (800a808 <HAL_TIM_PWM_MspInit+0x4c>)
 800a7f8:	f002 f84e 	bl	800c898 <HAL_GPIO_Init>
}
 800a7fc:	bf00      	nop
 800a7fe:	3720      	adds	r7, #32
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}
 800a804:	40021000 	.word	0x40021000
 800a808:	48002000 	.word	0x48002000

0800a80c <BSP_LCD_MspInit>:
  * @brief  Initializes the LCD GPIO special pins MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_LCD_MspInit(void)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b088      	sub	sp, #32
 800a810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock */
  LCD_TE_GPIO_CLK_ENABLE();
 800a812:	4b29      	ldr	r3, [pc, #164]	; (800a8b8 <BSP_LCD_MspInit+0xac>)
 800a814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a816:	4a28      	ldr	r2, [pc, #160]	; (800a8b8 <BSP_LCD_MspInit+0xac>)
 800a818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a81c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a81e:	4b26      	ldr	r3, [pc, #152]	; (800a8b8 <BSP_LCD_MspInit+0xac>)
 800a820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a826:	60bb      	str	r3, [r7, #8]
 800a828:	68bb      	ldr	r3, [r7, #8]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800a82a:	4b23      	ldr	r3, [pc, #140]	; (800a8b8 <BSP_LCD_MspInit+0xac>)
 800a82c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a82e:	4a22      	ldr	r2, [pc, #136]	; (800a8b8 <BSP_LCD_MspInit+0xac>)
 800a830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a834:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a836:	4b20      	ldr	r3, [pc, #128]	; (800a8b8 <BSP_LCD_MspInit+0xac>)
 800a838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a83a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a83e:	607b      	str	r3, [r7, #4]
 800a840:	687b      	ldr	r3, [r7, #4]
  LCD_PWR_CTRL_GPIO_CLK_ENABLE();
 800a842:	4b1d      	ldr	r3, [pc, #116]	; (800a8b8 <BSP_LCD_MspInit+0xac>)
 800a844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a846:	4a1c      	ldr	r2, [pc, #112]	; (800a8b8 <BSP_LCD_MspInit+0xac>)
 800a848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a84c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a84e:	4b1a      	ldr	r3, [pc, #104]	; (800a8b8 <BSP_LCD_MspInit+0xac>)
 800a850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a856:	603b      	str	r3, [r7, #0]
 800a858:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  if (BSP_IO_Init() == IO_ERROR)
 800a85a:	f7ff fa6b 	bl	8009d34 <BSP_IO_Init>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b01      	cmp	r3, #1
 800a862:	d101      	bne.n	800a868 <BSP_LCD_MspInit+0x5c>
  {
    BSP_ErrorHandler();
 800a864:	f7fe fc91 	bl	800918a <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(LCD_RST_PIN, IO_MODE_OUTPUT);
 800a868:	2101      	movs	r1, #1
 800a86a:	2004      	movs	r0, #4
 800a86c:	f7ff faa6 	bl	8009dbc <BSP_IO_ConfigPin>

  /* LCD_BL_CTRL GPIO configuration */
  GPIO_InitStructure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 800a870:	2301      	movs	r3, #1
 800a872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 800a874:	2301      	movs	r3, #1
 800a876:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_NOPULL;
 800a878:	2300      	movs	r3, #0
 800a87a:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 800a87c:	2300      	movs	r3, #0
 800a87e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed   = GPIO_SPEED_FREQ_LOW;
 800a880:	2300      	movs	r3, #0
 800a882:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStructure);
 800a884:	f107 030c 	add.w	r3, r7, #12
 800a888:	4619      	mov	r1, r3
 800a88a:	480c      	ldr	r0, [pc, #48]	; (800a8bc <BSP_LCD_MspInit+0xb0>)
 800a88c:	f002 f804 	bl	800c898 <HAL_GPIO_Init>

  /* Power on the screen (also done in Touch Screen driver ... */
  GPIO_InitStructure.Pin = LCD_PWR_CTRL_PIN;
 800a890:	2301      	movs	r3, #1
 800a892:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP /*GPIO_MODE_OUTPUT_PP*/;
 800a894:	2301      	movs	r3, #1
 800a896:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull =   GPIO_NOPULL;
 800a898:	2300      	movs	r3, #0
 800a89a:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 800a89c:	2300      	movs	r3, #0
 800a89e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_PWR_CTRL_GPIO_PORT, &GPIO_InitStructure);
 800a8a4:	f107 030c 	add.w	r3, r7, #12
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	4805      	ldr	r0, [pc, #20]	; (800a8c0 <BSP_LCD_MspInit+0xb4>)
 800a8ac:	f001 fff4 	bl	800c898 <HAL_GPIO_Init>
}
 800a8b0:	bf00      	nop
 800a8b2:	3720      	adds	r7, #32
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	40021000 	.word	0x40021000
 800a8bc:	48002000 	.word	0x48002000
 800a8c0:	48001c00 	.word	0x48001c00

0800a8c4 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b088      	sub	sp, #32
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	603a      	str	r2, [r7, #0]
 800a8ce:	80fb      	strh	r3, [r7, #6]
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	61fb      	str	r3, [r7, #28]
 800a8d8:	2300      	movs	r3, #0
 800a8da:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;

  height = DrawProp.pFont->Height;
 800a8dc:	4b45      	ldr	r3, [pc, #276]	; (800a9f4 <DrawChar+0x130>)
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	88db      	ldrh	r3, [r3, #6]
 800a8e2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 800a8e4:	4b43      	ldr	r3, [pc, #268]	; (800a9f4 <DrawChar+0x130>)
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	889b      	ldrh	r3, [r3, #4]
 800a8ea:	823b      	strh	r3, [r7, #16]

  offset =  8 * ((width + 7) / 8) -  width ;
 800a8ec:	8a3b      	ldrh	r3, [r7, #16]
 800a8ee:	3307      	adds	r3, #7
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	da00      	bge.n	800a8f6 <DrawChar+0x32>
 800a8f4:	3307      	adds	r3, #7
 800a8f6:	10db      	asrs	r3, r3, #3
 800a8f8:	b2db      	uxtb	r3, r3
 800a8fa:	00db      	lsls	r3, r3, #3
 800a8fc:	b2da      	uxtb	r2, r3
 800a8fe:	8a3b      	ldrh	r3, [r7, #16]
 800a900:	b2db      	uxtb	r3, r3
 800a902:	1ad3      	subs	r3, r2, r3
 800a904:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 800a906:	2300      	movs	r3, #0
 800a908:	61fb      	str	r3, [r7, #28]
 800a90a:	e069      	b.n	800a9e0 <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 800a90c:	8a3b      	ldrh	r3, [r7, #16]
 800a90e:	3307      	adds	r3, #7
 800a910:	2b00      	cmp	r3, #0
 800a912:	da00      	bge.n	800a916 <DrawChar+0x52>
 800a914:	3307      	adds	r3, #7
 800a916:	10db      	asrs	r3, r3, #3
 800a918:	461a      	mov	r2, r3
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	fb02 f303 	mul.w	r3, r2, r3
 800a920:	683a      	ldr	r2, [r7, #0]
 800a922:	4413      	add	r3, r2
 800a924:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 800a926:	8a3b      	ldrh	r3, [r7, #16]
 800a928:	3307      	adds	r3, #7
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	da00      	bge.n	800a930 <DrawChar+0x6c>
 800a92e:	3307      	adds	r3, #7
 800a930:	10db      	asrs	r3, r3, #3
 800a932:	2b01      	cmp	r3, #1
 800a934:	d002      	beq.n	800a93c <DrawChar+0x78>
 800a936:	2b02      	cmp	r3, #2
 800a938:	d004      	beq.n	800a944 <DrawChar+0x80>
 800a93a:	e00c      	b.n	800a956 <DrawChar+0x92>
    {
      case 1:
        line =  pchar[0];
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	781b      	ldrb	r3, [r3, #0]
 800a940:	617b      	str	r3, [r7, #20]
        break;
 800a942:	e016      	b.n	800a972 <DrawChar+0xae>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	021b      	lsls	r3, r3, #8
 800a94a:	68ba      	ldr	r2, [r7, #8]
 800a94c:	3201      	adds	r2, #1
 800a94e:	7812      	ldrb	r2, [r2, #0]
 800a950:	4313      	orrs	r3, r2
 800a952:	617b      	str	r3, [r7, #20]
        break;
 800a954:	e00d      	b.n	800a972 <DrawChar+0xae>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	041a      	lsls	r2, r3, #16
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	3301      	adds	r3, #1
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	021b      	lsls	r3, r3, #8
 800a964:	4313      	orrs	r3, r2
 800a966:	68ba      	ldr	r2, [r7, #8]
 800a968:	3202      	adds	r2, #2
 800a96a:	7812      	ldrb	r2, [r2, #0]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	617b      	str	r3, [r7, #20]
        break;
 800a970:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800a972:	2300      	movs	r3, #0
 800a974:	61bb      	str	r3, [r7, #24]
 800a976:	e029      	b.n	800a9cc <DrawChar+0x108>
    {
      if ((line & (1 << (width - j + offset - 1))) != 0)
 800a978:	8a3a      	ldrh	r2, [r7, #16]
 800a97a:	69bb      	ldr	r3, [r7, #24]
 800a97c:	1ad2      	subs	r2, r2, r3
 800a97e:	7bfb      	ldrb	r3, [r7, #15]
 800a980:	4413      	add	r3, r2
 800a982:	3b01      	subs	r3, #1
 800a984:	2201      	movs	r2, #1
 800a986:	fa02 f303 	lsl.w	r3, r2, r3
 800a98a:	461a      	mov	r2, r3
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	4013      	ands	r3, r2
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00c      	beq.n	800a9ae <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	b29a      	uxth	r2, r3
 800a998:	88fb      	ldrh	r3, [r7, #6]
 800a99a:	4413      	add	r3, r2
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	4a15      	ldr	r2, [pc, #84]	; (800a9f4 <DrawChar+0x130>)
 800a9a0:	6812      	ldr	r2, [r2, #0]
 800a9a2:	b292      	uxth	r2, r2
 800a9a4:	88b9      	ldrh	r1, [r7, #4]
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7ff fc12 	bl	800a1d0 <BSP_LCD_DrawPixel>
 800a9ac:	e00b      	b.n	800a9c6 <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	b29a      	uxth	r2, r3
 800a9b2:	88fb      	ldrh	r3, [r7, #6]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	4a0e      	ldr	r2, [pc, #56]	; (800a9f4 <DrawChar+0x130>)
 800a9ba:	6852      	ldr	r2, [r2, #4]
 800a9bc:	b292      	uxth	r2, r2
 800a9be:	88b9      	ldrh	r1, [r7, #4]
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7ff fc05 	bl	800a1d0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	61bb      	str	r3, [r7, #24]
 800a9cc:	8a3b      	ldrh	r3, [r7, #16]
 800a9ce:	69ba      	ldr	r2, [r7, #24]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d3d1      	bcc.n	800a978 <DrawChar+0xb4>
      }
    }
    Ypos++;
 800a9d4:	88bb      	ldrh	r3, [r7, #4]
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	3301      	adds	r3, #1
 800a9de:	61fb      	str	r3, [r7, #28]
 800a9e0:	8a7b      	ldrh	r3, [r7, #18]
 800a9e2:	69fa      	ldr	r2, [r7, #28]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d391      	bcc.n	800a90c <DrawChar+0x48>
  }
}
 800a9e8:	bf00      	nop
 800a9ea:	bf00      	nop
 800a9ec:	3720      	adds	r7, #32
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	2000136c 	.word	0x2000136c

0800a9f8 <BSP_TS_InitEx>:
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @param  orientation : TS_ORIENTATION_LANDSCAPE or TS_ORIENTATION_PORTRAIT
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_InitEx(uint16_t ts_SizeX, uint16_t ts_SizeY, uint8_t  orientation)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	4603      	mov	r3, r0
 800aa00:	80fb      	strh	r3, [r7, #6]
 800aa02:	460b      	mov	r3, r1
 800aa04:	80bb      	strh	r3, [r7, #4]
 800aa06:	4613      	mov	r3, r2
 800aa08:	70fb      	strb	r3, [r7, #3]
  uint8_t ts_status = TS_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	73fb      	strb	r3, [r7, #15]
  uint16_t read_id = 0;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	81bb      	strh	r3, [r7, #12]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 800aa12:	4b20      	ldr	r3, [pc, #128]	; (800aa94 <BSP_TS_InitEx+0x9c>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a20      	ldr	r2, [pc, #128]	; (800aa98 <BSP_TS_InitEx+0xa0>)
 800aa18:	7812      	ldrb	r2, [r2, #0]
 800aa1a:	b292      	uxth	r2, r2
 800aa1c:	4610      	mov	r0, r2
 800aa1e:	4798      	blx	r3

  /* Scan FT6x36 TouchScreen IC controller ID register by I2C Read */
  /* Verify this is a FT6x36, otherwise this is an error case      */

  read_id = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 800aa20:	4b1c      	ldr	r3, [pc, #112]	; (800aa94 <BSP_TS_InitEx+0x9c>)
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	2070      	movs	r0, #112	; 0x70
 800aa26:	4798      	blx	r3
 800aa28:	4603      	mov	r3, r0
 800aa2a:	81bb      	strh	r3, [r7, #12]

  if (read_id == FT6x36_ID_VALUE)
 800aa2c:	89bb      	ldrh	r3, [r7, #12]
 800aa2e:	2bcd      	cmp	r3, #205	; 0xcd
 800aa30:	d12a      	bne.n	800aa88 <BSP_TS_InitEx+0x90>
  {
    /* Found FT6x36 : Initialize the TS driver structure */
    tsDriver = &ft6x06_ts_drv;
 800aa32:	4b1a      	ldr	r3, [pc, #104]	; (800aa9c <BSP_TS_InitEx+0xa4>)
 800aa34:	4a17      	ldr	r2, [pc, #92]	; (800aa94 <BSP_TS_InitEx+0x9c>)
 800aa36:	601a      	str	r2, [r3, #0]

    I2C_Address    = TS_I2C_ADDRESS;
 800aa38:	4b17      	ldr	r3, [pc, #92]	; (800aa98 <BSP_TS_InitEx+0xa0>)
 800aa3a:	2270      	movs	r2, #112	; 0x70
 800aa3c:	701a      	strb	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if (orientation == TS_ORIENTATION_PORTRAIT)
 800aa3e:	78fb      	ldrb	r3, [r7, #3]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d106      	bne.n	800aa52 <BSP_TS_InitEx+0x5a>
    {
      tsOrientation = TS_SWAP_X | TS_SWAP_Y;
 800aa44:	4b16      	ldr	r3, [pc, #88]	; (800aaa0 <BSP_TS_InitEx+0xa8>)
 800aa46:	2206      	movs	r2, #6
 800aa48:	701a      	strb	r2, [r3, #0]
      TS_orientation = TS_ORIENTATION_PORTRAIT;
 800aa4a:	4b16      	ldr	r3, [pc, #88]	; (800aaa4 <BSP_TS_InitEx+0xac>)
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	701a      	strb	r2, [r3, #0]
 800aa50:	e005      	b.n	800aa5e <BSP_TS_InitEx+0x66>
    }
    else
    {
      tsOrientation = TS_SWAP_XY | TS_SWAP_Y;
 800aa52:	4b13      	ldr	r3, [pc, #76]	; (800aaa0 <BSP_TS_InitEx+0xa8>)
 800aa54:	220c      	movs	r2, #12
 800aa56:	701a      	strb	r2, [r3, #0]
      TS_orientation = TS_ORIENTATION_LANDSCAPE;
 800aa58:	4b12      	ldr	r3, [pc, #72]	; (800aaa4 <BSP_TS_InitEx+0xac>)
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	701a      	strb	r2, [r3, #0]
    }

    if (ts_status == TS_OK)
 800aa5e:	7bfb      	ldrb	r3, [r7, #15]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d111      	bne.n	800aa88 <BSP_TS_InitEx+0x90>
    {
      /* Software reset the TouchScreen */
      tsDriver->Reset(I2C_Address);
 800aa64:	4b0d      	ldr	r3, [pc, #52]	; (800aa9c <BSP_TS_InitEx+0xa4>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	689b      	ldr	r3, [r3, #8]
 800aa6a:	4a0b      	ldr	r2, [pc, #44]	; (800aa98 <BSP_TS_InitEx+0xa0>)
 800aa6c:	7812      	ldrb	r2, [r2, #0]
 800aa6e:	b292      	uxth	r2, r2
 800aa70:	4610      	mov	r0, r2
 800aa72:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      tsDriver->Start(I2C_Address);
 800aa74:	4b09      	ldr	r3, [pc, #36]	; (800aa9c <BSP_TS_InitEx+0xa4>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	4a07      	ldr	r2, [pc, #28]	; (800aa98 <BSP_TS_InitEx+0xa0>)
 800aa7c:	7812      	ldrb	r2, [r2, #0]
 800aa7e:	b292      	uxth	r2, r2
 800aa80:	4610      	mov	r0, r2
 800aa82:	4798      	blx	r3

      return TS_OK;
 800aa84:	2300      	movs	r3, #0
 800aa86:	e000      	b.n	800aa8a <BSP_TS_InitEx+0x92>

    } /* of if(ts_status == TS_OK) */
  }

  return TS_DEVICE_NOT_FOUND;
 800aa88:	2303      	movs	r3, #3


}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	20000198 	.word	0x20000198
 800aa98:	20001384 	.word	0x20001384
 800aa9c:	20001380 	.word	0x20001380
 800aaa0:	2000054d 	.word	0x2000054d
 800aaa4:	2000054e 	.word	0x2000054e

0800aaa8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800aaa8:	b590      	push	{r4, r7, lr}
 800aaaa:	b089      	sub	sp, #36	; 0x24
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800aab0:	2300      	movs	r3, #0
 800aab2:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2C_Address);
 800aab4:	4b80      	ldr	r3, [pc, #512]	; (800acb8 <BSP_TS_GetState+0x210>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	691b      	ldr	r3, [r3, #16]
 800aaba:	4a80      	ldr	r2, [pc, #512]	; (800acbc <BSP_TS_GetState+0x214>)
 800aabc:	7812      	ldrb	r2, [r2, #0]
 800aabe:	b292      	uxth	r2, r2
 800aac0:	4610      	mov	r0, r2
 800aac2:	4798      	blx	r3
 800aac4:	4603      	mov	r3, r0
 800aac6:	461a      	mov	r2, r3
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	701a      	strb	r2, [r3, #0]
  if (TS_State->touchDetected)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f000 80ec 	beq.w	800acae <BSP_TS_GetState+0x206>
  {
    for (index = 0; index < TS_State->touchDetected; index++)
 800aad6:	2300      	movs	r3, #0
 800aad8:	61fb      	str	r3, [r7, #28]
 800aada:	e0e1      	b.n	800aca0 <BSP_TS_GetState+0x1f8>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 800aadc:	4b76      	ldr	r3, [pc, #472]	; (800acb8 <BSP_TS_GetState+0x210>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	695b      	ldr	r3, [r3, #20]
 800aae2:	4a76      	ldr	r2, [pc, #472]	; (800acbc <BSP_TS_GetState+0x214>)
 800aae4:	7812      	ldrb	r2, [r2, #0]
 800aae6:	b290      	uxth	r0, r2
 800aae8:	f107 0110 	add.w	r1, r7, #16
 800aaec:	69fa      	ldr	r2, [r7, #28]
 800aaee:	0052      	lsls	r2, r2, #1
 800aaf0:	188c      	adds	r4, r1, r2
 800aaf2:	f107 010c 	add.w	r1, r7, #12
 800aaf6:	69fa      	ldr	r2, [r7, #28]
 800aaf8:	0052      	lsls	r2, r2, #1
 800aafa:	440a      	add	r2, r1
 800aafc:	4621      	mov	r1, r4
 800aafe:	4798      	blx	r3

      if (tsOrientation & TS_SWAP_XY)
 800ab00:	4b6f      	ldr	r3, [pc, #444]	; (800acc0 <BSP_TS_GetState+0x218>)
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	f003 0308 	and.w	r3, r3, #8
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d019      	beq.n	800ab40 <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	005b      	lsls	r3, r3, #1
 800ab10:	3320      	adds	r3, #32
 800ab12:	443b      	add	r3, r7
 800ab14:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800ab18:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index];
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	005b      	lsls	r3, r3, #1
 800ab1e:	3320      	adds	r3, #32
 800ab20:	443b      	add	r3, r7
 800ab22:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	005b      	lsls	r3, r3, #1
 800ab2a:	3320      	adds	r3, #32
 800ab2c:	443b      	add	r3, r7
 800ab2e:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	005b      	lsls	r3, r3, #1
 800ab36:	3320      	adds	r3, #32
 800ab38:	443b      	add	r3, r7
 800ab3a:	8b3a      	ldrh	r2, [r7, #24]
 800ab3c:	f823 2c14 	strh.w	r2, [r3, #-20]
      }

      if (tsOrientation & TS_SWAP_X)
 800ab40:	4b5f      	ldr	r3, [pc, #380]	; (800acc0 <BSP_TS_GetState+0x218>)
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	f003 0302 	and.w	r3, r3, #2
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00e      	beq.n	800ab6a <BSP_TS_GetState+0xc2>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH_HEIGHT - 1 - Raw_x[index];
 800ab4c:	69fb      	ldr	r3, [r7, #28]
 800ab4e:	005b      	lsls	r3, r3, #1
 800ab50:	3320      	adds	r3, #32
 800ab52:	443b      	add	r3, r7
 800ab54:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800ab58:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800ab5c:	b29a      	uxth	r2, r3
 800ab5e:	69fb      	ldr	r3, [r7, #28]
 800ab60:	005b      	lsls	r3, r3, #1
 800ab62:	3320      	adds	r3, #32
 800ab64:	443b      	add	r3, r7
 800ab66:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if (tsOrientation & TS_SWAP_Y)
 800ab6a:	4b55      	ldr	r3, [pc, #340]	; (800acc0 <BSP_TS_GetState+0x218>)
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	f003 0304 	and.w	r3, r3, #4
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00e      	beq.n	800ab94 <BSP_TS_GetState+0xec>
      {
        Raw_y[index] = FT_6206_MAX_WIDTH_HEIGHT - 1 - Raw_y[index];
 800ab76:	69fb      	ldr	r3, [r7, #28]
 800ab78:	005b      	lsls	r3, r3, #1
 800ab7a:	3320      	adds	r3, #32
 800ab7c:	443b      	add	r3, r7
 800ab7e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800ab82:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800ab86:	b29a      	uxth	r2, r3
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	005b      	lsls	r3, r3, #1
 800ab8c:	3320      	adds	r3, #32
 800ab8e:	443b      	add	r3, r7
 800ab90:	f823 2c14 	strh.w	r2, [r3, #-20]
      }

      xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	005b      	lsls	r3, r3, #1
 800ab98:	3320      	adds	r3, #32
 800ab9a:	443b      	add	r3, r7
 800ab9c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800aba0:	4619      	mov	r1, r3
 800aba2:	4a48      	ldr	r2, [pc, #288]	; (800acc4 <BSP_TS_GetState+0x21c>)
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abaa:	4299      	cmp	r1, r3
 800abac:	d90d      	bls.n	800abca <BSP_TS_GetState+0x122>
 800abae:	69fb      	ldr	r3, [r7, #28]
 800abb0:	005b      	lsls	r3, r3, #1
 800abb2:	3320      	adds	r3, #32
 800abb4:	443b      	add	r3, r7
 800abb6:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800abba:	4942      	ldr	r1, [pc, #264]	; (800acc4 <BSP_TS_GetState+0x21c>)
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	1ad3      	subs	r3, r2, r3
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	e00c      	b.n	800abe4 <BSP_TS_GetState+0x13c>
 800abca:	4a3e      	ldr	r2, [pc, #248]	; (800acc4 <BSP_TS_GetState+0x21c>)
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	005b      	lsls	r3, r3, #1
 800abd8:	3320      	adds	r3, #32
 800abda:	443b      	add	r3, r7
 800abdc:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800abe0:	1ad3      	subs	r3, r2, r3
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	005b      	lsls	r3, r3, #1
 800abea:	3320      	adds	r3, #32
 800abec:	443b      	add	r3, r7
 800abee:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800abf2:	4619      	mov	r1, r3
 800abf4:	4a34      	ldr	r2, [pc, #208]	; (800acc8 <BSP_TS_GetState+0x220>)
 800abf6:	69fb      	ldr	r3, [r7, #28]
 800abf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abfc:	4299      	cmp	r1, r3
 800abfe:	d90d      	bls.n	800ac1c <BSP_TS_GetState+0x174>
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	005b      	lsls	r3, r3, #1
 800ac04:	3320      	adds	r3, #32
 800ac06:	443b      	add	r3, r7
 800ac08:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800ac0c:	492e      	ldr	r1, [pc, #184]	; (800acc8 <BSP_TS_GetState+0x220>)
 800ac0e:	69fb      	ldr	r3, [r7, #28]
 800ac10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	e00c      	b.n	800ac36 <BSP_TS_GetState+0x18e>
 800ac1c:	4a2a      	ldr	r2, [pc, #168]	; (800acc8 <BSP_TS_GetState+0x220>)
 800ac1e:	69fb      	ldr	r3, [r7, #28]
 800ac20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac24:	b29a      	uxth	r2, r3
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	005b      	lsls	r3, r3, #1
 800ac2a:	3320      	adds	r3, #32
 800ac2c:	443b      	add	r3, r7
 800ac2e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800ac32:	1ad3      	subs	r3, r2, r3
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 800ac38:	8afa      	ldrh	r2, [r7, #22]
 800ac3a:	8abb      	ldrh	r3, [r7, #20]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	2b05      	cmp	r3, #5
 800ac40:	dd15      	ble.n	800ac6e <BSP_TS_GetState+0x1c6>
      {
        _x[index] = Raw_x[index];
 800ac42:	69fb      	ldr	r3, [r7, #28]
 800ac44:	005b      	lsls	r3, r3, #1
 800ac46:	3320      	adds	r3, #32
 800ac48:	443b      	add	r3, r7
 800ac4a:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800ac4e:	4619      	mov	r1, r3
 800ac50:	4a1c      	ldr	r2, [pc, #112]	; (800acc4 <BSP_TS_GetState+0x21c>)
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	005b      	lsls	r3, r3, #1
 800ac5c:	3320      	adds	r3, #32
 800ac5e:	443b      	add	r3, r7
 800ac60:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800ac64:	4619      	mov	r1, r3
 800ac66:	4a18      	ldr	r2, [pc, #96]	; (800acc8 <BSP_TS_GetState+0x220>)
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 800ac6e:	4a15      	ldr	r2, [pc, #84]	; (800acc4 <BSP_TS_GetState+0x21c>)
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac76:	b299      	uxth	r1, r3
 800ac78:	687a      	ldr	r2, [r7, #4]
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	005b      	lsls	r3, r3, #1
 800ac7e:	4413      	add	r3, r2
 800ac80:	460a      	mov	r2, r1
 800ac82:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 800ac84:	4a10      	ldr	r2, [pc, #64]	; (800acc8 <BSP_TS_GetState+0x220>)
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac8c:	b299      	uxth	r1, r3
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	005b      	lsls	r3, r3, #1
 800ac94:	4413      	add	r3, r2
 800ac96:	460a      	mov	r2, r1
 800ac98:	80da      	strh	r2, [r3, #6]
    for (index = 0; index < TS_State->touchDetected; index++)
 800ac9a:	69fb      	ldr	r3, [r7, #28]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	61fb      	str	r3, [r7, #28]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	461a      	mov	r2, r3
 800aca6:	69fb      	ldr	r3, [r7, #28]
 800aca8:	4293      	cmp	r3, r2
 800acaa:	f4ff af17 	bcc.w	800aadc <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800acae:	7efb      	ldrb	r3, [r7, #27]
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3724      	adds	r7, #36	; 0x24
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd90      	pop	{r4, r7, pc}
 800acb8:	20001380 	.word	0x20001380
 800acbc:	20001384 	.word	0x20001384
 800acc0:	2000054d 	.word	0x2000054d
 800acc4:	20001388 	.word	0x20001388
 800acc8:	20001390 	.word	0x20001390

0800accc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800acd2:	2300      	movs	r3, #0
 800acd4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800acd6:	2003      	movs	r0, #3
 800acd8:	f001 fbfc 	bl	800c4d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800acdc:	2000      	movs	r0, #0
 800acde:	f000 f80d 	bl	800acfc <HAL_InitTick>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d002      	beq.n	800acee <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800ace8:	2301      	movs	r3, #1
 800acea:	71fb      	strb	r3, [r7, #7]
 800acec:	e001      	b.n	800acf2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800acee:	f7f7 fb3f 	bl	8002370 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800acf2:	79fb      	ldrb	r3, [r7, #7]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3708      	adds	r7, #8
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800ad04:	2300      	movs	r3, #0
 800ad06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800ad08:	4b17      	ldr	r3, [pc, #92]	; (800ad68 <HAL_InitTick+0x6c>)
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d023      	beq.n	800ad58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800ad10:	4b16      	ldr	r3, [pc, #88]	; (800ad6c <HAL_InitTick+0x70>)
 800ad12:	681a      	ldr	r2, [r3, #0]
 800ad14:	4b14      	ldr	r3, [pc, #80]	; (800ad68 <HAL_InitTick+0x6c>)
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	4619      	mov	r1, r3
 800ad1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ad1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ad22:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad26:	4618      	mov	r0, r3
 800ad28:	f001 fc17 	bl	800c55a <HAL_SYSTICK_Config>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d10f      	bne.n	800ad52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2b0f      	cmp	r3, #15
 800ad36:	d809      	bhi.n	800ad4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ad38:	2200      	movs	r2, #0
 800ad3a:	6879      	ldr	r1, [r7, #4]
 800ad3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad40:	f001 fbd3 	bl	800c4ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800ad44:	4a0a      	ldr	r2, [pc, #40]	; (800ad70 <HAL_InitTick+0x74>)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6013      	str	r3, [r2, #0]
 800ad4a:	e007      	b.n	800ad5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	73fb      	strb	r3, [r7, #15]
 800ad50:	e004      	b.n	800ad5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	73fb      	strb	r3, [r7, #15]
 800ad56:	e001      	b.n	800ad5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	20000554 	.word	0x20000554
 800ad6c:	20000194 	.word	0x20000194
 800ad70:	20000550 	.word	0x20000550

0800ad74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ad74:	b480      	push	{r7}
 800ad76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800ad78:	4b06      	ldr	r3, [pc, #24]	; (800ad94 <HAL_IncTick+0x20>)
 800ad7a:	781b      	ldrb	r3, [r3, #0]
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	4b06      	ldr	r3, [pc, #24]	; (800ad98 <HAL_IncTick+0x24>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4413      	add	r3, r2
 800ad84:	4a04      	ldr	r2, [pc, #16]	; (800ad98 <HAL_IncTick+0x24>)
 800ad86:	6013      	str	r3, [r2, #0]
}
 800ad88:	bf00      	nop
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	20000554 	.word	0x20000554
 800ad98:	20001398 	.word	0x20001398

0800ad9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	af00      	add	r7, sp, #0
  return uwTick;
 800ada0:	4b03      	ldr	r3, [pc, #12]	; (800adb0 <HAL_GetTick+0x14>)
 800ada2:	681b      	ldr	r3, [r3, #0]
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr
 800adae:	bf00      	nop
 800adb0:	20001398 	.word	0x20001398

0800adb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800adbc:	f7ff ffee 	bl	800ad9c <HAL_GetTick>
 800adc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adcc:	d005      	beq.n	800adda <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800adce:	4b0a      	ldr	r3, [pc, #40]	; (800adf8 <HAL_Delay+0x44>)
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	461a      	mov	r2, r3
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	4413      	add	r3, r2
 800add8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800adda:	bf00      	nop
 800addc:	f7ff ffde 	bl	800ad9c <HAL_GetTick>
 800ade0:	4602      	mov	r2, r0
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	1ad3      	subs	r3, r2, r3
 800ade6:	68fa      	ldr	r2, [r7, #12]
 800ade8:	429a      	cmp	r2, r3
 800adea:	d8f7      	bhi.n	800addc <HAL_Delay+0x28>
  {
  }
}
 800adec:	bf00      	nop
 800adee:	bf00      	nop
 800adf0:	3710      	adds	r7, #16
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	20000554 	.word	0x20000554

0800adfc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800adfc:	b480      	push	{r7}
 800adfe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800ae00:	4b05      	ldr	r3, [pc, #20]	; (800ae18 <HAL_SuspendTick+0x1c>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a04      	ldr	r2, [pc, #16]	; (800ae18 <HAL_SuspendTick+0x1c>)
 800ae06:	f023 0302 	bic.w	r3, r3, #2
 800ae0a:	6013      	str	r3, [r2, #0]
}
 800ae0c:	bf00      	nop
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	e000e010 	.word	0xe000e010

0800ae1c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800ae20:	4b05      	ldr	r3, [pc, #20]	; (800ae38 <HAL_ResumeTick+0x1c>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a04      	ldr	r2, [pc, #16]	; (800ae38 <HAL_ResumeTick+0x1c>)
 800ae26:	f043 0302 	orr.w	r3, r3, #2
 800ae2a:	6013      	str	r3, [r2, #0]
}
 800ae2c:	bf00      	nop
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	e000e010 	.word	0xe000e010

0800ae3c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b083      	sub	sp, #12
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	689b      	ldr	r3, [r3, #8]
 800ae4a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	431a      	orrs	r2, r3
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	609a      	str	r2, [r3, #8]
}
 800ae56:	bf00      	nop
 800ae58:	370c      	adds	r7, #12
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800ae62:	b480      	push	{r7}
 800ae64:	b083      	sub	sp, #12
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	431a      	orrs	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	609a      	str	r2, [r3, #8]
}
 800ae7c:	bf00      	nop
 800ae7e:	370c      	adds	r7, #12
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr

0800ae88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	689b      	ldr	r3, [r3, #8]
 800ae94:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	370c      	adds	r7, #12
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr

0800aea4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b087      	sub	sp, #28
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	607a      	str	r2, [r7, #4]
 800aeb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	3360      	adds	r3, #96	; 0x60
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	4413      	add	r3, r2
 800aebe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	4b08      	ldr	r3, [pc, #32]	; (800aee8 <LL_ADC_SetOffset+0x44>)
 800aec6:	4013      	ands	r3, r2
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800aece:	683a      	ldr	r2, [r7, #0]
 800aed0:	430a      	orrs	r2, r1
 800aed2:	4313      	orrs	r3, r2
 800aed4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800aedc:	bf00      	nop
 800aede:	371c      	adds	r7, #28
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr
 800aee8:	03fff000 	.word	0x03fff000

0800aeec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b085      	sub	sp, #20
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	3360      	adds	r3, #96	; 0x60
 800aefa:	461a      	mov	r2, r3
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4413      	add	r3, r2
 800af02:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3714      	adds	r7, #20
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800af18:	b480      	push	{r7}
 800af1a:	b087      	sub	sp, #28
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	3360      	adds	r3, #96	; 0x60
 800af28:	461a      	mov	r2, r3
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	4413      	add	r3, r2
 800af30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	431a      	orrs	r2, r3
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800af42:	bf00      	nop
 800af44:	371c      	adds	r7, #28
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr

0800af4e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800af4e:	b480      	push	{r7}
 800af50:	b083      	sub	sp, #12
 800af52:	af00      	add	r7, sp, #0
 800af54:	6078      	str	r0, [r7, #4]
 800af56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	695b      	ldr	r3, [r3, #20]
 800af5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	431a      	orrs	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	615a      	str	r2, [r3, #20]
}
 800af68:	bf00      	nop
 800af6a:	370c      	adds	r7, #12
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800af84:	2b00      	cmp	r3, #0
 800af86:	d101      	bne.n	800af8c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800af88:	2301      	movs	r3, #1
 800af8a:	e000      	b.n	800af8e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800af8c:	2300      	movs	r3, #0
}
 800af8e:	4618      	mov	r0, r3
 800af90:	370c      	adds	r7, #12
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr

0800af9a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800af9a:	b480      	push	{r7}
 800af9c:	b087      	sub	sp, #28
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	60f8      	str	r0, [r7, #12]
 800afa2:	60b9      	str	r1, [r7, #8]
 800afa4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	3330      	adds	r3, #48	; 0x30
 800afaa:	461a      	mov	r2, r3
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	0a1b      	lsrs	r3, r3, #8
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	f003 030c 	and.w	r3, r3, #12
 800afb6:	4413      	add	r3, r2
 800afb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	f003 031f 	and.w	r3, r3, #31
 800afc4:	211f      	movs	r1, #31
 800afc6:	fa01 f303 	lsl.w	r3, r1, r3
 800afca:	43db      	mvns	r3, r3
 800afcc:	401a      	ands	r2, r3
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	0e9b      	lsrs	r3, r3, #26
 800afd2:	f003 011f 	and.w	r1, r3, #31
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	f003 031f 	and.w	r3, r3, #31
 800afdc:	fa01 f303 	lsl.w	r3, r1, r3
 800afe0:	431a      	orrs	r2, r3
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800afe6:	bf00      	nop
 800afe8:	371c      	adds	r7, #28
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr

0800aff2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800aff2:	b480      	push	{r7}
 800aff4:	b087      	sub	sp, #28
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	60f8      	str	r0, [r7, #12]
 800affa:	60b9      	str	r1, [r7, #8]
 800affc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	3314      	adds	r3, #20
 800b002:	461a      	mov	r2, r3
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	0e5b      	lsrs	r3, r3, #25
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	f003 0304 	and.w	r3, r3, #4
 800b00e:	4413      	add	r3, r2
 800b010:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	0d1b      	lsrs	r3, r3, #20
 800b01a:	f003 031f 	and.w	r3, r3, #31
 800b01e:	2107      	movs	r1, #7
 800b020:	fa01 f303 	lsl.w	r3, r1, r3
 800b024:	43db      	mvns	r3, r3
 800b026:	401a      	ands	r2, r3
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	0d1b      	lsrs	r3, r3, #20
 800b02c:	f003 031f 	and.w	r3, r3, #31
 800b030:	6879      	ldr	r1, [r7, #4]
 800b032:	fa01 f303 	lsl.w	r3, r1, r3
 800b036:	431a      	orrs	r2, r3
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800b03c:	bf00      	nop
 800b03e:	371c      	adds	r7, #28
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b060:	43db      	mvns	r3, r3
 800b062:	401a      	ands	r2, r3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f003 0318 	and.w	r3, r3, #24
 800b06a:	4908      	ldr	r1, [pc, #32]	; (800b08c <LL_ADC_SetChannelSingleDiff+0x44>)
 800b06c:	40d9      	lsrs	r1, r3
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	400b      	ands	r3, r1
 800b072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b076:	431a      	orrs	r2, r3
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800b07e:	bf00      	nop
 800b080:	3714      	adds	r7, #20
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr
 800b08a:	bf00      	nop
 800b08c:	0007ffff 	.word	0x0007ffff

0800b090 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	f003 031f 	and.w	r3, r3, #31
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b083      	sub	sp, #12
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800b0d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	6093      	str	r3, [r2, #8]
}
 800b0e0:	bf00      	nop
 800b0e2:	370c      	adds	r7, #12
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b100:	d101      	bne.n	800b106 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800b102:	2301      	movs	r3, #1
 800b104:	e000      	b.n	800b108 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800b124:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b128:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800b130:	bf00      	nop
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b083      	sub	sp, #12
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b14c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b150:	d101      	bne.n	800b156 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800b152:	2301      	movs	r3, #1
 800b154:	e000      	b.n	800b158 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b174:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b178:	f043 0201 	orr.w	r2, r3, #1
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	f003 0301 	and.w	r3, r3, #1
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d101      	bne.n	800b1a4 <LL_ADC_IsEnabled+0x18>
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e000      	b.n	800b1a6 <LL_ADC_IsEnabled+0x1a>
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	370c      	adds	r7, #12
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr

0800b1b2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800b1b2:	b480      	push	{r7}
 800b1b4:	b083      	sub	sp, #12
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b1c6:	f043 0204 	orr.w	r2, r3, #4
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800b1ce:	bf00      	nop
 800b1d0:	370c      	adds	r7, #12
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr

0800b1da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800b1da:	b480      	push	{r7}
 800b1dc:	b083      	sub	sp, #12
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	f003 0304 	and.w	r3, r3, #4
 800b1ea:	2b04      	cmp	r3, #4
 800b1ec:	d101      	bne.n	800b1f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	e000      	b.n	800b1f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	f003 0308 	and.w	r3, r3, #8
 800b210:	2b08      	cmp	r3, #8
 800b212:	d101      	bne.n	800b218 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800b214:	2301      	movs	r3, #1
 800b216:	e000      	b.n	800b21a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	370c      	adds	r7, #12
 800b21e:	46bd      	mov	sp, r7
 800b220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b224:	4770      	bx	lr
	...

0800b228 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b228:	b590      	push	{r4, r7, lr}
 800b22a:	b089      	sub	sp, #36	; 0x24
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b230:	2300      	movs	r3, #0
 800b232:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800b234:	2300      	movs	r3, #0
 800b236:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d101      	bne.n	800b242 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	e139      	b.n	800b4b6 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	691b      	ldr	r3, [r3, #16]
 800b246:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d109      	bne.n	800b264 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f7f5 fadd 	bl	8000810 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2200      	movs	r2, #0
 800b25a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4618      	mov	r0, r3
 800b26a:	f7ff ff3f 	bl	800b0ec <LL_ADC_IsDeepPowerDownEnabled>
 800b26e:	4603      	mov	r3, r0
 800b270:	2b00      	cmp	r3, #0
 800b272:	d004      	beq.n	800b27e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4618      	mov	r0, r3
 800b27a:	f7ff ff25 	bl	800b0c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4618      	mov	r0, r3
 800b284:	f7ff ff5a 	bl	800b13c <LL_ADC_IsInternalRegulatorEnabled>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d115      	bne.n	800b2ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4618      	mov	r0, r3
 800b294:	f7ff ff3e 	bl	800b114 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b298:	4b89      	ldr	r3, [pc, #548]	; (800b4c0 <HAL_ADC_Init+0x298>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	099b      	lsrs	r3, r3, #6
 800b29e:	4a89      	ldr	r2, [pc, #548]	; (800b4c4 <HAL_ADC_Init+0x29c>)
 800b2a0:	fba2 2303 	umull	r2, r3, r2, r3
 800b2a4:	099b      	lsrs	r3, r3, #6
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	005b      	lsls	r3, r3, #1
 800b2aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800b2ac:	e002      	b.n	800b2b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1f9      	bne.n	800b2ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f7ff ff3c 	bl	800b13c <LL_ADC_IsInternalRegulatorEnabled>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10d      	bne.n	800b2e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2ce:	f043 0210 	orr.w	r2, r3, #16
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2da:	f043 0201 	orr.w	r2, r3, #1
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7ff ff75 	bl	800b1da <LL_ADC_REG_IsConversionOngoing>
 800b2f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2f6:	f003 0310 	and.w	r3, r3, #16
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f040 80d2 	bne.w	800b4a4 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	2b00      	cmp	r3, #0
 800b304:	f040 80ce 	bne.w	800b4a4 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b30c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800b310:	f043 0202 	orr.w	r2, r3, #2
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7ff ff35 	bl	800b18c <LL_ADC_IsEnabled>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d115      	bne.n	800b354 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b328:	4867      	ldr	r0, [pc, #412]	; (800b4c8 <HAL_ADC_Init+0x2a0>)
 800b32a:	f7ff ff2f 	bl	800b18c <LL_ADC_IsEnabled>
 800b32e:	4604      	mov	r4, r0
 800b330:	4866      	ldr	r0, [pc, #408]	; (800b4cc <HAL_ADC_Init+0x2a4>)
 800b332:	f7ff ff2b 	bl	800b18c <LL_ADC_IsEnabled>
 800b336:	4603      	mov	r3, r0
 800b338:	431c      	orrs	r4, r3
 800b33a:	4865      	ldr	r0, [pc, #404]	; (800b4d0 <HAL_ADC_Init+0x2a8>)
 800b33c:	f7ff ff26 	bl	800b18c <LL_ADC_IsEnabled>
 800b340:	4603      	mov	r3, r0
 800b342:	4323      	orrs	r3, r4
 800b344:	2b00      	cmp	r3, #0
 800b346:	d105      	bne.n	800b354 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	4619      	mov	r1, r3
 800b34e:	4861      	ldr	r0, [pc, #388]	; (800b4d4 <HAL_ADC_Init+0x2ac>)
 800b350:	f7ff fd74 	bl	800ae3c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	7e5b      	ldrb	r3, [r3, #25]
 800b358:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b35e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800b364:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800b36a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b372:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b374:	4313      	orrs	r3, r2
 800b376:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d106      	bne.n	800b390 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b386:	3b01      	subs	r3, #1
 800b388:	045b      	lsls	r3, r3, #17
 800b38a:	69ba      	ldr	r2, [r7, #24]
 800b38c:	4313      	orrs	r3, r2
 800b38e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b394:	2b00      	cmp	r3, #0
 800b396:	d009      	beq.n	800b3ac <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b39c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b3a6:	69ba      	ldr	r2, [r7, #24]
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	68da      	ldr	r2, [r3, #12]
 800b3b2:	4b49      	ldr	r3, [pc, #292]	; (800b4d8 <HAL_ADC_Init+0x2b0>)
 800b3b4:	4013      	ands	r3, r2
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	6812      	ldr	r2, [r2, #0]
 800b3ba:	69b9      	ldr	r1, [r7, #24]
 800b3bc:	430b      	orrs	r3, r1
 800b3be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7ff ff08 	bl	800b1da <LL_ADC_REG_IsConversionOngoing>
 800b3ca:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f7ff ff15 	bl	800b200 <LL_ADC_INJ_IsConversionOngoing>
 800b3d6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d140      	bne.n	800b460 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d13d      	bne.n	800b460 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	7e1b      	ldrb	r3, [r3, #24]
 800b3ec:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800b3ee:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3f6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b406:	f023 0306 	bic.w	r3, r3, #6
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	6812      	ldr	r2, [r2, #0]
 800b40e:	69b9      	ldr	r1, [r7, #24]
 800b410:	430b      	orrs	r3, r1
 800b412:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d118      	bne.n	800b450 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b428:	f023 0304 	bic.w	r3, r3, #4
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b434:	4311      	orrs	r1, r2
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800b43a:	4311      	orrs	r1, r2
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b440:	430a      	orrs	r2, r1
 800b442:	431a      	orrs	r2, r3
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f042 0201 	orr.w	r2, r2, #1
 800b44c:	611a      	str	r2, [r3, #16]
 800b44e:	e007      	b.n	800b460 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	691a      	ldr	r2, [r3, #16]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f022 0201 	bic.w	r2, r2, #1
 800b45e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	691b      	ldr	r3, [r3, #16]
 800b464:	2b01      	cmp	r3, #1
 800b466:	d10c      	bne.n	800b482 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b46e:	f023 010f 	bic.w	r1, r3, #15
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	69db      	ldr	r3, [r3, #28]
 800b476:	1e5a      	subs	r2, r3, #1
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	430a      	orrs	r2, r1
 800b47e:	631a      	str	r2, [r3, #48]	; 0x30
 800b480:	e007      	b.n	800b492 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f022 020f 	bic.w	r2, r2, #15
 800b490:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b496:	f023 0303 	bic.w	r3, r3, #3
 800b49a:	f043 0201 	orr.w	r2, r3, #1
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	659a      	str	r2, [r3, #88]	; 0x58
 800b4a2:	e007      	b.n	800b4b4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4a8:	f043 0210 	orr.w	r2, r3, #16
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b4b4:	7ffb      	ldrb	r3, [r7, #31]
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3724      	adds	r7, #36	; 0x24
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd90      	pop	{r4, r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	20000194 	.word	0x20000194
 800b4c4:	053e2d63 	.word	0x053e2d63
 800b4c8:	50040000 	.word	0x50040000
 800b4cc:	50040100 	.word	0x50040100
 800b4d0:	50040200 	.word	0x50040200
 800b4d4:	50040300 	.word	0x50040300
 800b4d8:	fff0c007 	.word	0xfff0c007

0800b4dc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b086      	sub	sp, #24
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b4e4:	4857      	ldr	r0, [pc, #348]	; (800b644 <HAL_ADC_Start+0x168>)
 800b4e6:	f7ff fdd3 	bl	800b090 <LL_ADC_GetMultimode>
 800b4ea:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7ff fe72 	bl	800b1da <LL_ADC_REG_IsConversionOngoing>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f040 809c 	bne.w	800b636 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800b504:	2b01      	cmp	r3, #1
 800b506:	d101      	bne.n	800b50c <HAL_ADC_Start+0x30>
 800b508:	2302      	movs	r3, #2
 800b50a:	e097      	b.n	800b63c <HAL_ADC_Start+0x160>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2201      	movs	r2, #1
 800b510:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 fd8d 	bl	800c034 <ADC_Enable>
 800b51a:	4603      	mov	r3, r0
 800b51c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800b51e:	7dfb      	ldrb	r3, [r7, #23]
 800b520:	2b00      	cmp	r3, #0
 800b522:	f040 8083 	bne.w	800b62c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b52a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b52e:	f023 0301 	bic.w	r3, r3, #1
 800b532:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4a42      	ldr	r2, [pc, #264]	; (800b648 <HAL_ADC_Start+0x16c>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d002      	beq.n	800b54a <HAL_ADC_Start+0x6e>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	e000      	b.n	800b54c <HAL_ADC_Start+0x70>
 800b54a:	4b40      	ldr	r3, [pc, #256]	; (800b64c <HAL_ADC_Start+0x170>)
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	6812      	ldr	r2, [r2, #0]
 800b550:	4293      	cmp	r3, r2
 800b552:	d002      	beq.n	800b55a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d105      	bne.n	800b566 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b55e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b56a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b56e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b572:	d106      	bne.n	800b582 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b578:	f023 0206 	bic.w	r2, r3, #6
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	65da      	str	r2, [r3, #92]	; 0x5c
 800b580:	e002      	b.n	800b588 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	221c      	movs	r2, #28
 800b58e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4a2a      	ldr	r2, [pc, #168]	; (800b648 <HAL_ADC_Start+0x16c>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d002      	beq.n	800b5a8 <HAL_ADC_Start+0xcc>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	e000      	b.n	800b5aa <HAL_ADC_Start+0xce>
 800b5a8:	4b28      	ldr	r3, [pc, #160]	; (800b64c <HAL_ADC_Start+0x170>)
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	6812      	ldr	r2, [r2, #0]
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d008      	beq.n	800b5c4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d005      	beq.n	800b5c4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	2b05      	cmp	r3, #5
 800b5bc:	d002      	beq.n	800b5c4 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	2b09      	cmp	r3, #9
 800b5c2:	d114      	bne.n	800b5ee <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	68db      	ldr	r3, [r3, #12]
 800b5ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d007      	beq.n	800b5e2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b5da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f7ff fde3 	bl	800b1b2 <LL_ADC_REG_StartConversion>
 800b5ec:	e025      	b.n	800b63a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a12      	ldr	r2, [pc, #72]	; (800b648 <HAL_ADC_Start+0x16c>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d002      	beq.n	800b60a <HAL_ADC_Start+0x12e>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	e000      	b.n	800b60c <HAL_ADC_Start+0x130>
 800b60a:	4b10      	ldr	r3, [pc, #64]	; (800b64c <HAL_ADC_Start+0x170>)
 800b60c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00f      	beq.n	800b63a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b61e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b622:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	659a      	str	r2, [r3, #88]	; 0x58
 800b62a:	e006      	b.n	800b63a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2200      	movs	r2, #0
 800b630:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800b634:	e001      	b.n	800b63a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800b636:	2302      	movs	r3, #2
 800b638:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800b63a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3718      	adds	r7, #24
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	50040300 	.word	0x50040300
 800b648:	50040100 	.word	0x50040100
 800b64c:	50040000 	.word	0x50040000

0800b650 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b088      	sub	sp, #32
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b65a:	4866      	ldr	r0, [pc, #408]	; (800b7f4 <HAL_ADC_PollForConversion+0x1a4>)
 800b65c:	f7ff fd18 	bl	800b090 <LL_ADC_GetMultimode>
 800b660:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	695b      	ldr	r3, [r3, #20]
 800b666:	2b08      	cmp	r3, #8
 800b668:	d102      	bne.n	800b670 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800b66a:	2308      	movs	r3, #8
 800b66c:	61fb      	str	r3, [r7, #28]
 800b66e:	e02a      	b.n	800b6c6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d005      	beq.n	800b682 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	2b05      	cmp	r3, #5
 800b67a:	d002      	beq.n	800b682 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	2b09      	cmp	r3, #9
 800b680:	d111      	bne.n	800b6a6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	f003 0301 	and.w	r3, r3, #1
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d007      	beq.n	800b6a0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b694:	f043 0220 	orr.w	r2, r3, #32
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 800b69c:	2301      	movs	r3, #1
 800b69e:	e0a4      	b.n	800b7ea <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800b6a0:	2304      	movs	r3, #4
 800b6a2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800b6a4:	e00f      	b.n	800b6c6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800b6a6:	4853      	ldr	r0, [pc, #332]	; (800b7f4 <HAL_ADC_PollForConversion+0x1a4>)
 800b6a8:	f7ff fd00 	bl	800b0ac <LL_ADC_GetMultiDMATransfer>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d007      	beq.n	800b6c2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6b6:	f043 0220 	orr.w	r2, r3, #32
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e093      	b.n	800b7ea <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800b6c2:	2304      	movs	r3, #4
 800b6c4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800b6c6:	f7ff fb69 	bl	800ad9c <HAL_GetTick>
 800b6ca:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800b6cc:	e021      	b.n	800b712 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6d4:	d01d      	beq.n	800b712 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800b6d6:	f7ff fb61 	bl	800ad9c <HAL_GetTick>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	1ad3      	subs	r3, r2, r3
 800b6e0:	683a      	ldr	r2, [r7, #0]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d302      	bcc.n	800b6ec <HAL_ADC_PollForConversion+0x9c>
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d112      	bne.n	800b712 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	4013      	ands	r3, r2
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d10b      	bne.n	800b712 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6fe:	f043 0204 	orr.w	r2, r3, #4
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2200      	movs	r2, #0
 800b70a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800b70e:	2303      	movs	r3, #3
 800b710:	e06b      	b.n	800b7ea <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	681a      	ldr	r2, [r3, #0]
 800b718:	69fb      	ldr	r3, [r7, #28]
 800b71a:	4013      	ands	r3, r2
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d0d6      	beq.n	800b6ce <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b724:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4618      	mov	r0, r3
 800b732:	f7ff fc1f 	bl	800af74 <LL_ADC_REG_IsTriggerSourceSWStart>
 800b736:	4603      	mov	r3, r0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d01c      	beq.n	800b776 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	7e5b      	ldrb	r3, [r3, #25]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d118      	bne.n	800b776 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f003 0308 	and.w	r3, r3, #8
 800b74e:	2b08      	cmp	r3, #8
 800b750:	d111      	bne.n	800b776 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b756:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b762:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b766:	2b00      	cmp	r3, #0
 800b768:	d105      	bne.n	800b776 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b76e:	f043 0201 	orr.w	r2, r3, #1
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4a1f      	ldr	r2, [pc, #124]	; (800b7f8 <HAL_ADC_PollForConversion+0x1a8>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d002      	beq.n	800b786 <HAL_ADC_PollForConversion+0x136>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	e000      	b.n	800b788 <HAL_ADC_PollForConversion+0x138>
 800b786:	4b1d      	ldr	r3, [pc, #116]	; (800b7fc <HAL_ADC_PollForConversion+0x1ac>)
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	6812      	ldr	r2, [r2, #0]
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d008      	beq.n	800b7a2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b790:	697b      	ldr	r3, [r7, #20]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d005      	beq.n	800b7a2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	2b05      	cmp	r3, #5
 800b79a:	d002      	beq.n	800b7a2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	2b09      	cmp	r3, #9
 800b7a0:	d104      	bne.n	800b7ac <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	61bb      	str	r3, [r7, #24]
 800b7aa:	e00c      	b.n	800b7c6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a11      	ldr	r2, [pc, #68]	; (800b7f8 <HAL_ADC_PollForConversion+0x1a8>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d002      	beq.n	800b7bc <HAL_ADC_PollForConversion+0x16c>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	e000      	b.n	800b7be <HAL_ADC_PollForConversion+0x16e>
 800b7bc:	4b0f      	ldr	r3, [pc, #60]	; (800b7fc <HAL_ADC_PollForConversion+0x1ac>)
 800b7be:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800b7c6:	69fb      	ldr	r3, [r7, #28]
 800b7c8:	2b08      	cmp	r3, #8
 800b7ca:	d104      	bne.n	800b7d6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	2208      	movs	r2, #8
 800b7d2:	601a      	str	r2, [r3, #0]
 800b7d4:	e008      	b.n	800b7e8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d103      	bne.n	800b7e8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	220c      	movs	r2, #12
 800b7e6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800b7e8:	2300      	movs	r3, #0
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3720      	adds	r7, #32
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	50040300 	.word	0x50040300
 800b7f8:	50040100 	.word	0x50040100
 800b7fc:	50040000 	.word	0x50040000

0800b800 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800b800:	b480      	push	{r7}
 800b802:	b083      	sub	sp, #12
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800b80e:	4618      	mov	r0, r3
 800b810:	370c      	adds	r7, #12
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr
	...

0800b81c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b0b6      	sub	sp, #216	; 0xd8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b826:	2300      	movs	r3, #0
 800b828:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800b82c:	2300      	movs	r3, #0
 800b82e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800b836:	2b01      	cmp	r3, #1
 800b838:	d101      	bne.n	800b83e <HAL_ADC_ConfigChannel+0x22>
 800b83a:	2302      	movs	r3, #2
 800b83c:	e3e3      	b.n	800c006 <HAL_ADC_ConfigChannel+0x7ea>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2201      	movs	r2, #1
 800b842:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7ff fcc5 	bl	800b1da <LL_ADC_REG_IsConversionOngoing>
 800b850:	4603      	mov	r3, r0
 800b852:	2b00      	cmp	r3, #0
 800b854:	f040 83c4 	bne.w	800bfe0 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	2b05      	cmp	r3, #5
 800b85e:	d824      	bhi.n	800b8aa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	3b02      	subs	r3, #2
 800b866:	2b03      	cmp	r3, #3
 800b868:	d81b      	bhi.n	800b8a2 <HAL_ADC_ConfigChannel+0x86>
 800b86a:	a201      	add	r2, pc, #4	; (adr r2, 800b870 <HAL_ADC_ConfigChannel+0x54>)
 800b86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b870:	0800b881 	.word	0x0800b881
 800b874:	0800b889 	.word	0x0800b889
 800b878:	0800b891 	.word	0x0800b891
 800b87c:	0800b899 	.word	0x0800b899
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	220c      	movs	r2, #12
 800b884:	605a      	str	r2, [r3, #4]
          break;
 800b886:	e011      	b.n	800b8ac <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	2212      	movs	r2, #18
 800b88c:	605a      	str	r2, [r3, #4]
          break;
 800b88e:	e00d      	b.n	800b8ac <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	2218      	movs	r2, #24
 800b894:	605a      	str	r2, [r3, #4]
          break;
 800b896:	e009      	b.n	800b8ac <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b89e:	605a      	str	r2, [r3, #4]
          break;
 800b8a0:	e004      	b.n	800b8ac <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	2206      	movs	r2, #6
 800b8a6:	605a      	str	r2, [r3, #4]
          break;
 800b8a8:	e000      	b.n	800b8ac <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800b8aa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6818      	ldr	r0, [r3, #0]
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	6859      	ldr	r1, [r3, #4]
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	f7ff fb6e 	bl	800af9a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7ff fc89 	bl	800b1da <LL_ADC_REG_IsConversionOngoing>
 800b8c8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f7ff fc95 	bl	800b200 <LL_ADC_INJ_IsConversionOngoing>
 800b8d6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b8da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	f040 81c1 	bne.w	800bc66 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b8e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	f040 81bc 	bne.w	800bc66 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	689b      	ldr	r3, [r3, #8]
 800b8f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b8f6:	d10f      	bne.n	800b918 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6818      	ldr	r0, [r3, #0]
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2200      	movs	r2, #0
 800b902:	4619      	mov	r1, r3
 800b904:	f7ff fb75 	bl	800aff2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b910:	4618      	mov	r0, r3
 800b912:	f7ff fb1c 	bl	800af4e <LL_ADC_SetSamplingTimeCommonConfig>
 800b916:	e00e      	b.n	800b936 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6818      	ldr	r0, [r3, #0]
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	6819      	ldr	r1, [r3, #0]
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	689b      	ldr	r3, [r3, #8]
 800b924:	461a      	mov	r2, r3
 800b926:	f7ff fb64 	bl	800aff2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	2100      	movs	r1, #0
 800b930:	4618      	mov	r0, r3
 800b932:	f7ff fb0c 	bl	800af4e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	695a      	ldr	r2, [r3, #20]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	08db      	lsrs	r3, r3, #3
 800b942:	f003 0303 	and.w	r3, r3, #3
 800b946:	005b      	lsls	r3, r3, #1
 800b948:	fa02 f303 	lsl.w	r3, r2, r3
 800b94c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	2b04      	cmp	r3, #4
 800b956:	d00a      	beq.n	800b96e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	6818      	ldr	r0, [r3, #0]
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	6919      	ldr	r1, [r3, #16]
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b968:	f7ff fa9c 	bl	800aea4 <LL_ADC_SetOffset>
 800b96c:	e17b      	b.n	800bc66 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2100      	movs	r1, #0
 800b974:	4618      	mov	r0, r3
 800b976:	f7ff fab9 	bl	800aeec <LL_ADC_GetOffsetChannel>
 800b97a:	4603      	mov	r3, r0
 800b97c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b980:	2b00      	cmp	r3, #0
 800b982:	d10a      	bne.n	800b99a <HAL_ADC_ConfigChannel+0x17e>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2100      	movs	r1, #0
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7ff faae 	bl	800aeec <LL_ADC_GetOffsetChannel>
 800b990:	4603      	mov	r3, r0
 800b992:	0e9b      	lsrs	r3, r3, #26
 800b994:	f003 021f 	and.w	r2, r3, #31
 800b998:	e01e      	b.n	800b9d8 <HAL_ADC_ConfigChannel+0x1bc>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2100      	movs	r1, #0
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7ff faa3 	bl	800aeec <LL_ADC_GetOffsetChannel>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b9ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b9b0:	fa93 f3a3 	rbit	r3, r3
 800b9b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b9b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b9bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800b9c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d101      	bne.n	800b9cc <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800b9c8:	2320      	movs	r3, #32
 800b9ca:	e004      	b.n	800b9d6 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800b9cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b9d0:	fab3 f383 	clz	r3, r3
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d105      	bne.n	800b9f0 <HAL_ADC_ConfigChannel+0x1d4>
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	0e9b      	lsrs	r3, r3, #26
 800b9ea:	f003 031f 	and.w	r3, r3, #31
 800b9ee:	e018      	b.n	800ba22 <HAL_ADC_ConfigChannel+0x206>
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b9f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b9fc:	fa93 f3a3 	rbit	r3, r3
 800ba00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800ba04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ba08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800ba0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d101      	bne.n	800ba18 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800ba14:	2320      	movs	r3, #32
 800ba16:	e004      	b.n	800ba22 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800ba18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ba1c:	fab3 f383 	clz	r3, r3
 800ba20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d106      	bne.n	800ba34 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	2100      	movs	r1, #0
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7ff fa72 	bl	800af18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	2101      	movs	r1, #1
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7ff fa56 	bl	800aeec <LL_ADC_GetOffsetChannel>
 800ba40:	4603      	mov	r3, r0
 800ba42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d10a      	bne.n	800ba60 <HAL_ADC_ConfigChannel+0x244>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2101      	movs	r1, #1
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7ff fa4b 	bl	800aeec <LL_ADC_GetOffsetChannel>
 800ba56:	4603      	mov	r3, r0
 800ba58:	0e9b      	lsrs	r3, r3, #26
 800ba5a:	f003 021f 	and.w	r2, r3, #31
 800ba5e:	e01e      	b.n	800ba9e <HAL_ADC_ConfigChannel+0x282>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2101      	movs	r1, #1
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7ff fa40 	bl	800aeec <LL_ADC_GetOffsetChannel>
 800ba6c:	4603      	mov	r3, r0
 800ba6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ba76:	fa93 f3a3 	rbit	r3, r3
 800ba7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800ba7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ba82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800ba86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d101      	bne.n	800ba92 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800ba8e:	2320      	movs	r3, #32
 800ba90:	e004      	b.n	800ba9c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800ba92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ba96:	fab3 f383 	clz	r3, r3
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d105      	bne.n	800bab6 <HAL_ADC_ConfigChannel+0x29a>
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	0e9b      	lsrs	r3, r3, #26
 800bab0:	f003 031f 	and.w	r3, r3, #31
 800bab4:	e018      	b.n	800bae8 <HAL_ADC_ConfigChannel+0x2cc>
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800babe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bac2:	fa93 f3a3 	rbit	r3, r3
 800bac6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800baca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bace:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800bad2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d101      	bne.n	800bade <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800bada:	2320      	movs	r3, #32
 800badc:	e004      	b.n	800bae8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800bade:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bae2:	fab3 f383 	clz	r3, r3
 800bae6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800bae8:	429a      	cmp	r2, r3
 800baea:	d106      	bne.n	800bafa <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2200      	movs	r2, #0
 800baf2:	2101      	movs	r1, #1
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7ff fa0f 	bl	800af18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	2102      	movs	r1, #2
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7ff f9f3 	bl	800aeec <LL_ADC_GetOffsetChannel>
 800bb06:	4603      	mov	r3, r0
 800bb08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d10a      	bne.n	800bb26 <HAL_ADC_ConfigChannel+0x30a>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2102      	movs	r1, #2
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7ff f9e8 	bl	800aeec <LL_ADC_GetOffsetChannel>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	0e9b      	lsrs	r3, r3, #26
 800bb20:	f003 021f 	and.w	r2, r3, #31
 800bb24:	e01e      	b.n	800bb64 <HAL_ADC_ConfigChannel+0x348>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	2102      	movs	r1, #2
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7ff f9dd 	bl	800aeec <LL_ADC_GetOffsetChannel>
 800bb32:	4603      	mov	r3, r0
 800bb34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb3c:	fa93 f3a3 	rbit	r3, r3
 800bb40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800bb44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bb48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800bb4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d101      	bne.n	800bb58 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800bb54:	2320      	movs	r3, #32
 800bb56:	e004      	b.n	800bb62 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800bb58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bb5c:	fab3 f383 	clz	r3, r3
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d105      	bne.n	800bb7c <HAL_ADC_ConfigChannel+0x360>
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	0e9b      	lsrs	r3, r3, #26
 800bb76:	f003 031f 	and.w	r3, r3, #31
 800bb7a:	e016      	b.n	800bbaa <HAL_ADC_ConfigChannel+0x38e>
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bb88:	fa93 f3a3 	rbit	r3, r3
 800bb8c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800bb8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bb90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800bb94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d101      	bne.n	800bba0 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800bb9c:	2320      	movs	r3, #32
 800bb9e:	e004      	b.n	800bbaa <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800bba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bba4:	fab3 f383 	clz	r3, r3
 800bba8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d106      	bne.n	800bbbc <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	2102      	movs	r1, #2
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7ff f9ae 	bl	800af18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	2103      	movs	r1, #3
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7ff f992 	bl	800aeec <LL_ADC_GetOffsetChannel>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d10a      	bne.n	800bbe8 <HAL_ADC_ConfigChannel+0x3cc>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	2103      	movs	r1, #3
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7ff f987 	bl	800aeec <LL_ADC_GetOffsetChannel>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	0e9b      	lsrs	r3, r3, #26
 800bbe2:	f003 021f 	and.w	r2, r3, #31
 800bbe6:	e017      	b.n	800bc18 <HAL_ADC_ConfigChannel+0x3fc>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	2103      	movs	r1, #3
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7ff f97c 	bl	800aeec <LL_ADC_GetOffsetChannel>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbfa:	fa93 f3a3 	rbit	r3, r3
 800bbfe:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800bc00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc02:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800bc04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d101      	bne.n	800bc0e <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800bc0a:	2320      	movs	r3, #32
 800bc0c:	e003      	b.n	800bc16 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800bc0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc10:	fab3 f383 	clz	r3, r3
 800bc14:	b2db      	uxtb	r3, r3
 800bc16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d105      	bne.n	800bc30 <HAL_ADC_ConfigChannel+0x414>
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	0e9b      	lsrs	r3, r3, #26
 800bc2a:	f003 031f 	and.w	r3, r3, #31
 800bc2e:	e011      	b.n	800bc54 <HAL_ADC_ConfigChannel+0x438>
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc38:	fa93 f3a3 	rbit	r3, r3
 800bc3c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800bc3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc40:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800bc42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d101      	bne.n	800bc4c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800bc48:	2320      	movs	r3, #32
 800bc4a:	e003      	b.n	800bc54 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800bc4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bc4e:	fab3 f383 	clz	r3, r3
 800bc52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d106      	bne.n	800bc66 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	2103      	movs	r1, #3
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7ff f959 	bl	800af18 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7ff fa8e 	bl	800b18c <LL_ADC_IsEnabled>
 800bc70:	4603      	mov	r3, r0
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	f040 8140 	bne.w	800bef8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6818      	ldr	r0, [r3, #0]
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	6819      	ldr	r1, [r3, #0]
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	68db      	ldr	r3, [r3, #12]
 800bc84:	461a      	mov	r2, r3
 800bc86:	f7ff f9df 	bl	800b048 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	4a8f      	ldr	r2, [pc, #572]	; (800becc <HAL_ADC_ConfigChannel+0x6b0>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	f040 8131 	bne.w	800bef8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d10b      	bne.n	800bcbe <HAL_ADC_ConfigChannel+0x4a2>
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	0e9b      	lsrs	r3, r3, #26
 800bcac:	3301      	adds	r3, #1
 800bcae:	f003 031f 	and.w	r3, r3, #31
 800bcb2:	2b09      	cmp	r3, #9
 800bcb4:	bf94      	ite	ls
 800bcb6:	2301      	movls	r3, #1
 800bcb8:	2300      	movhi	r3, #0
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	e019      	b.n	800bcf2 <HAL_ADC_ConfigChannel+0x4d6>
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bcc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcc6:	fa93 f3a3 	rbit	r3, r3
 800bcca:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800bccc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bcce:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800bcd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d101      	bne.n	800bcda <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800bcd6:	2320      	movs	r3, #32
 800bcd8:	e003      	b.n	800bce2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800bcda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcdc:	fab3 f383 	clz	r3, r3
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	3301      	adds	r3, #1
 800bce4:	f003 031f 	and.w	r3, r3, #31
 800bce8:	2b09      	cmp	r3, #9
 800bcea:	bf94      	ite	ls
 800bcec:	2301      	movls	r3, #1
 800bcee:	2300      	movhi	r3, #0
 800bcf0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d079      	beq.n	800bdea <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d107      	bne.n	800bd12 <HAL_ADC_ConfigChannel+0x4f6>
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	0e9b      	lsrs	r3, r3, #26
 800bd08:	3301      	adds	r3, #1
 800bd0a:	069b      	lsls	r3, r3, #26
 800bd0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800bd10:	e015      	b.n	800bd3e <HAL_ADC_ConfigChannel+0x522>
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd1a:	fa93 f3a3 	rbit	r3, r3
 800bd1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800bd20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd22:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800bd24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d101      	bne.n	800bd2e <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800bd2a:	2320      	movs	r3, #32
 800bd2c:	e003      	b.n	800bd36 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800bd2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd30:	fab3 f383 	clz	r3, r3
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	3301      	adds	r3, #1
 800bd38:	069b      	lsls	r3, r3, #26
 800bd3a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d109      	bne.n	800bd5e <HAL_ADC_ConfigChannel+0x542>
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	0e9b      	lsrs	r3, r3, #26
 800bd50:	3301      	adds	r3, #1
 800bd52:	f003 031f 	and.w	r3, r3, #31
 800bd56:	2101      	movs	r1, #1
 800bd58:	fa01 f303 	lsl.w	r3, r1, r3
 800bd5c:	e017      	b.n	800bd8e <HAL_ADC_ConfigChannel+0x572>
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd66:	fa93 f3a3 	rbit	r3, r3
 800bd6a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800bd6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800bd70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d101      	bne.n	800bd7a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800bd76:	2320      	movs	r3, #32
 800bd78:	e003      	b.n	800bd82 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800bd7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd7c:	fab3 f383 	clz	r3, r3
 800bd80:	b2db      	uxtb	r3, r3
 800bd82:	3301      	adds	r3, #1
 800bd84:	f003 031f 	and.w	r3, r3, #31
 800bd88:	2101      	movs	r1, #1
 800bd8a:	fa01 f303 	lsl.w	r3, r1, r3
 800bd8e:	ea42 0103 	orr.w	r1, r2, r3
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d10a      	bne.n	800bdb4 <HAL_ADC_ConfigChannel+0x598>
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	0e9b      	lsrs	r3, r3, #26
 800bda4:	3301      	adds	r3, #1
 800bda6:	f003 021f 	and.w	r2, r3, #31
 800bdaa:	4613      	mov	r3, r2
 800bdac:	005b      	lsls	r3, r3, #1
 800bdae:	4413      	add	r3, r2
 800bdb0:	051b      	lsls	r3, r3, #20
 800bdb2:	e018      	b.n	800bde6 <HAL_ADC_ConfigChannel+0x5ca>
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bdba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdbc:	fa93 f3a3 	rbit	r3, r3
 800bdc0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800bdc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800bdc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d101      	bne.n	800bdd0 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800bdcc:	2320      	movs	r3, #32
 800bdce:	e003      	b.n	800bdd8 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800bdd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdd2:	fab3 f383 	clz	r3, r3
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	3301      	adds	r3, #1
 800bdda:	f003 021f 	and.w	r2, r3, #31
 800bdde:	4613      	mov	r3, r2
 800bde0:	005b      	lsls	r3, r3, #1
 800bde2:	4413      	add	r3, r2
 800bde4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bde6:	430b      	orrs	r3, r1
 800bde8:	e081      	b.n	800beee <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d107      	bne.n	800be06 <HAL_ADC_ConfigChannel+0x5ea>
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	0e9b      	lsrs	r3, r3, #26
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	069b      	lsls	r3, r3, #26
 800be00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800be04:	e015      	b.n	800be32 <HAL_ADC_ConfigChannel+0x616>
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0e:	fa93 f3a3 	rbit	r3, r3
 800be12:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800be14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be16:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800be18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d101      	bne.n	800be22 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800be1e:	2320      	movs	r3, #32
 800be20:	e003      	b.n	800be2a <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800be22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be24:	fab3 f383 	clz	r3, r3
 800be28:	b2db      	uxtb	r3, r3
 800be2a:	3301      	adds	r3, #1
 800be2c:	069b      	lsls	r3, r3, #26
 800be2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d109      	bne.n	800be52 <HAL_ADC_ConfigChannel+0x636>
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	0e9b      	lsrs	r3, r3, #26
 800be44:	3301      	adds	r3, #1
 800be46:	f003 031f 	and.w	r3, r3, #31
 800be4a:	2101      	movs	r1, #1
 800be4c:	fa01 f303 	lsl.w	r3, r1, r3
 800be50:	e017      	b.n	800be82 <HAL_ADC_ConfigChannel+0x666>
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be58:	6a3b      	ldr	r3, [r7, #32]
 800be5a:	fa93 f3a3 	rbit	r3, r3
 800be5e:	61fb      	str	r3, [r7, #28]
  return result;
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800be64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be66:	2b00      	cmp	r3, #0
 800be68:	d101      	bne.n	800be6e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800be6a:	2320      	movs	r3, #32
 800be6c:	e003      	b.n	800be76 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800be6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be70:	fab3 f383 	clz	r3, r3
 800be74:	b2db      	uxtb	r3, r3
 800be76:	3301      	adds	r3, #1
 800be78:	f003 031f 	and.w	r3, r3, #31
 800be7c:	2101      	movs	r1, #1
 800be7e:	fa01 f303 	lsl.w	r3, r1, r3
 800be82:	ea42 0103 	orr.w	r1, r2, r3
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d10d      	bne.n	800beae <HAL_ADC_ConfigChannel+0x692>
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	0e9b      	lsrs	r3, r3, #26
 800be98:	3301      	adds	r3, #1
 800be9a:	f003 021f 	and.w	r2, r3, #31
 800be9e:	4613      	mov	r3, r2
 800bea0:	005b      	lsls	r3, r3, #1
 800bea2:	4413      	add	r3, r2
 800bea4:	3b1e      	subs	r3, #30
 800bea6:	051b      	lsls	r3, r3, #20
 800bea8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800beac:	e01e      	b.n	800beec <HAL_ADC_ConfigChannel+0x6d0>
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	fa93 f3a3 	rbit	r3, r3
 800beba:	613b      	str	r3, [r7, #16]
  return result;
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d104      	bne.n	800bed0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800bec6:	2320      	movs	r3, #32
 800bec8:	e006      	b.n	800bed8 <HAL_ADC_ConfigChannel+0x6bc>
 800beca:	bf00      	nop
 800becc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800bed0:	69bb      	ldr	r3, [r7, #24]
 800bed2:	fab3 f383 	clz	r3, r3
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	3301      	adds	r3, #1
 800beda:	f003 021f 	and.w	r2, r3, #31
 800bede:	4613      	mov	r3, r2
 800bee0:	005b      	lsls	r3, r3, #1
 800bee2:	4413      	add	r3, r2
 800bee4:	3b1e      	subs	r3, #30
 800bee6:	051b      	lsls	r3, r3, #20
 800bee8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800beec:	430b      	orrs	r3, r1
 800beee:	683a      	ldr	r2, [r7, #0]
 800bef0:	6892      	ldr	r2, [r2, #8]
 800bef2:	4619      	mov	r1, r3
 800bef4:	f7ff f87d 	bl	800aff2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	4b44      	ldr	r3, [pc, #272]	; (800c010 <HAL_ADC_ConfigChannel+0x7f4>)
 800befe:	4013      	ands	r3, r2
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d07a      	beq.n	800bffa <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800bf04:	4843      	ldr	r0, [pc, #268]	; (800c014 <HAL_ADC_ConfigChannel+0x7f8>)
 800bf06:	f7fe ffbf 	bl	800ae88 <LL_ADC_GetCommonPathInternalCh>
 800bf0a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4a41      	ldr	r2, [pc, #260]	; (800c018 <HAL_ADC_ConfigChannel+0x7fc>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d12c      	bne.n	800bf72 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800bf18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bf1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d126      	bne.n	800bf72 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a3c      	ldr	r2, [pc, #240]	; (800c01c <HAL_ADC_ConfigChannel+0x800>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d004      	beq.n	800bf38 <HAL_ADC_ConfigChannel+0x71c>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4a3b      	ldr	r2, [pc, #236]	; (800c020 <HAL_ADC_ConfigChannel+0x804>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d15d      	bne.n	800bff4 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800bf38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bf3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bf40:	4619      	mov	r1, r3
 800bf42:	4834      	ldr	r0, [pc, #208]	; (800c014 <HAL_ADC_ConfigChannel+0x7f8>)
 800bf44:	f7fe ff8d 	bl	800ae62 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800bf48:	4b36      	ldr	r3, [pc, #216]	; (800c024 <HAL_ADC_ConfigChannel+0x808>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	099b      	lsrs	r3, r3, #6
 800bf4e:	4a36      	ldr	r2, [pc, #216]	; (800c028 <HAL_ADC_ConfigChannel+0x80c>)
 800bf50:	fba2 2303 	umull	r2, r3, r2, r3
 800bf54:	099b      	lsrs	r3, r3, #6
 800bf56:	1c5a      	adds	r2, r3, #1
 800bf58:	4613      	mov	r3, r2
 800bf5a:	005b      	lsls	r3, r3, #1
 800bf5c:	4413      	add	r3, r2
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800bf62:	e002      	b.n	800bf6a <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	3b01      	subs	r3, #1
 800bf68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d1f9      	bne.n	800bf64 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800bf70:	e040      	b.n	800bff4 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4a2d      	ldr	r2, [pc, #180]	; (800c02c <HAL_ADC_ConfigChannel+0x810>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d118      	bne.n	800bfae <HAL_ADC_ConfigChannel+0x792>
 800bf7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bf80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d112      	bne.n	800bfae <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4a23      	ldr	r2, [pc, #140]	; (800c01c <HAL_ADC_ConfigChannel+0x800>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d004      	beq.n	800bf9c <HAL_ADC_ConfigChannel+0x780>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4a22      	ldr	r2, [pc, #136]	; (800c020 <HAL_ADC_ConfigChannel+0x804>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d12d      	bne.n	800bff8 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800bf9c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bfa0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bfa4:	4619      	mov	r1, r3
 800bfa6:	481b      	ldr	r0, [pc, #108]	; (800c014 <HAL_ADC_ConfigChannel+0x7f8>)
 800bfa8:	f7fe ff5b 	bl	800ae62 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800bfac:	e024      	b.n	800bff8 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4a1f      	ldr	r2, [pc, #124]	; (800c030 <HAL_ADC_ConfigChannel+0x814>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d120      	bne.n	800bffa <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800bfb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bfbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d11a      	bne.n	800bffa <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a14      	ldr	r2, [pc, #80]	; (800c01c <HAL_ADC_ConfigChannel+0x800>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d115      	bne.n	800bffa <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800bfce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bfd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	480e      	ldr	r0, [pc, #56]	; (800c014 <HAL_ADC_ConfigChannel+0x7f8>)
 800bfda:	f7fe ff42 	bl	800ae62 <LL_ADC_SetCommonPathInternalCh>
 800bfde:	e00c      	b.n	800bffa <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfe4:	f043 0220 	orr.w	r2, r3, #32
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800bfec:	2301      	movs	r3, #1
 800bfee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800bff2:	e002      	b.n	800bffa <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800bff4:	bf00      	nop
 800bff6:	e000      	b.n	800bffa <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800bff8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800c002:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800c006:	4618      	mov	r0, r3
 800c008:	37d8      	adds	r7, #216	; 0xd8
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	80080000 	.word	0x80080000
 800c014:	50040300 	.word	0x50040300
 800c018:	c7520000 	.word	0xc7520000
 800c01c:	50040000 	.word	0x50040000
 800c020:	50040200 	.word	0x50040200
 800c024:	20000194 	.word	0x20000194
 800c028:	053e2d63 	.word	0x053e2d63
 800c02c:	cb840000 	.word	0xcb840000
 800c030:	80000001 	.word	0x80000001

0800c034 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800c03c:	2300      	movs	r3, #0
 800c03e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	4618      	mov	r0, r3
 800c046:	f7ff f8a1 	bl	800b18c <LL_ADC_IsEnabled>
 800c04a:	4603      	mov	r3, r0
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d169      	bne.n	800c124 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	689a      	ldr	r2, [r3, #8]
 800c056:	4b36      	ldr	r3, [pc, #216]	; (800c130 <ADC_Enable+0xfc>)
 800c058:	4013      	ands	r3, r2
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00d      	beq.n	800c07a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c062:	f043 0210 	orr.w	r2, r3, #16
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c06e:	f043 0201 	orr.w	r2, r3, #1
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800c076:	2301      	movs	r3, #1
 800c078:	e055      	b.n	800c126 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4618      	mov	r0, r3
 800c080:	f7ff f870 	bl	800b164 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800c084:	482b      	ldr	r0, [pc, #172]	; (800c134 <ADC_Enable+0x100>)
 800c086:	f7fe feff 	bl	800ae88 <LL_ADC_GetCommonPathInternalCh>
 800c08a:	4603      	mov	r3, r0
 800c08c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c090:	2b00      	cmp	r3, #0
 800c092:	d013      	beq.n	800c0bc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c094:	4b28      	ldr	r3, [pc, #160]	; (800c138 <ADC_Enable+0x104>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	099b      	lsrs	r3, r3, #6
 800c09a:	4a28      	ldr	r2, [pc, #160]	; (800c13c <ADC_Enable+0x108>)
 800c09c:	fba2 2303 	umull	r2, r3, r2, r3
 800c0a0:	099b      	lsrs	r3, r3, #6
 800c0a2:	1c5a      	adds	r2, r3, #1
 800c0a4:	4613      	mov	r3, r2
 800c0a6:	005b      	lsls	r3, r3, #1
 800c0a8:	4413      	add	r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800c0ae:	e002      	b.n	800c0b6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	3b01      	subs	r3, #1
 800c0b4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d1f9      	bne.n	800c0b0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800c0bc:	f7fe fe6e 	bl	800ad9c <HAL_GetTick>
 800c0c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c0c2:	e028      	b.n	800c116 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7ff f85f 	bl	800b18c <LL_ADC_IsEnabled>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d104      	bne.n	800c0de <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7ff f843 	bl	800b164 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c0de:	f7fe fe5d 	bl	800ad9c <HAL_GetTick>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	1ad3      	subs	r3, r2, r3
 800c0e8:	2b02      	cmp	r3, #2
 800c0ea:	d914      	bls.n	800c116 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f003 0301 	and.w	r3, r3, #1
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d00d      	beq.n	800c116 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0fe:	f043 0210 	orr.w	r2, r3, #16
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c10a:	f043 0201 	orr.w	r2, r3, #1
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800c112:	2301      	movs	r3, #1
 800c114:	e007      	b.n	800c126 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f003 0301 	and.w	r3, r3, #1
 800c120:	2b01      	cmp	r3, #1
 800c122:	d1cf      	bne.n	800c0c4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c124:	2300      	movs	r3, #0
}
 800c126:	4618      	mov	r0, r3
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}
 800c12e:	bf00      	nop
 800c130:	8000003f 	.word	0x8000003f
 800c134:	50040300 	.word	0x50040300
 800c138:	20000194 	.word	0x20000194
 800c13c:	053e2d63 	.word	0x053e2d63

0800c140 <LL_ADC_IsEnabled>:
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	f003 0301 	and.w	r3, r3, #1
 800c150:	2b01      	cmp	r3, #1
 800c152:	d101      	bne.n	800c158 <LL_ADC_IsEnabled+0x18>
 800c154:	2301      	movs	r3, #1
 800c156:	e000      	b.n	800c15a <LL_ADC_IsEnabled+0x1a>
 800c158:	2300      	movs	r3, #0
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	370c      	adds	r7, #12
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr

0800c166 <LL_ADC_REG_IsConversionOngoing>:
{
 800c166:	b480      	push	{r7}
 800c168:	b083      	sub	sp, #12
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	689b      	ldr	r3, [r3, #8]
 800c172:	f003 0304 	and.w	r3, r3, #4
 800c176:	2b04      	cmp	r3, #4
 800c178:	d101      	bne.n	800c17e <LL_ADC_REG_IsConversionOngoing+0x18>
 800c17a:	2301      	movs	r3, #1
 800c17c:	e000      	b.n	800c180 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800c17e:	2300      	movs	r3, #0
}
 800c180:	4618      	mov	r0, r3
 800c182:	370c      	adds	r7, #12
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr

0800c18c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800c18c:	b590      	push	{r4, r7, lr}
 800c18e:	b0a1      	sub	sp, #132	; 0x84
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c196:	2300      	movs	r3, #0
 800c198:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	d101      	bne.n	800c1aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800c1a6:	2302      	movs	r3, #2
 800c1a8:	e093      	b.n	800c2d2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a47      	ldr	r2, [pc, #284]	; (800c2dc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d102      	bne.n	800c1ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800c1c4:	4b46      	ldr	r3, [pc, #280]	; (800c2e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c1c6:	60fb      	str	r3, [r7, #12]
 800c1c8:	e001      	b.n	800c1ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d10b      	bne.n	800c1ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1d8:	f043 0220 	orr.w	r2, r3, #32
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	e072      	b.n	800c2d2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7ff ffb9 	bl	800c166 <LL_ADC_REG_IsConversionOngoing>
 800c1f4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	f7ff ffb3 	bl	800c166 <LL_ADC_REG_IsConversionOngoing>
 800c200:	4603      	mov	r3, r0
 800c202:	2b00      	cmp	r3, #0
 800c204:	d154      	bne.n	800c2b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800c206:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d151      	bne.n	800c2b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800c20c:	4b35      	ldr	r3, [pc, #212]	; (800c2e4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800c20e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d02c      	beq.n	800c272 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800c218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	6859      	ldr	r1, [r3, #4]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c22a:	035b      	lsls	r3, r3, #13
 800c22c:	430b      	orrs	r3, r1
 800c22e:	431a      	orrs	r2, r3
 800c230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c232:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c234:	4829      	ldr	r0, [pc, #164]	; (800c2dc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c236:	f7ff ff83 	bl	800c140 <LL_ADC_IsEnabled>
 800c23a:	4604      	mov	r4, r0
 800c23c:	4828      	ldr	r0, [pc, #160]	; (800c2e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c23e:	f7ff ff7f 	bl	800c140 <LL_ADC_IsEnabled>
 800c242:	4603      	mov	r3, r0
 800c244:	431c      	orrs	r4, r3
 800c246:	4828      	ldr	r0, [pc, #160]	; (800c2e8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800c248:	f7ff ff7a 	bl	800c140 <LL_ADC_IsEnabled>
 800c24c:	4603      	mov	r3, r0
 800c24e:	4323      	orrs	r3, r4
 800c250:	2b00      	cmp	r3, #0
 800c252:	d137      	bne.n	800c2c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800c254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800c25c:	f023 030f 	bic.w	r3, r3, #15
 800c260:	683a      	ldr	r2, [r7, #0]
 800c262:	6811      	ldr	r1, [r2, #0]
 800c264:	683a      	ldr	r2, [r7, #0]
 800c266:	6892      	ldr	r2, [r2, #8]
 800c268:	430a      	orrs	r2, r1
 800c26a:	431a      	orrs	r2, r3
 800c26c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c26e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800c270:	e028      	b.n	800c2c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800c272:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c27a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c27c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c27e:	4817      	ldr	r0, [pc, #92]	; (800c2dc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800c280:	f7ff ff5e 	bl	800c140 <LL_ADC_IsEnabled>
 800c284:	4604      	mov	r4, r0
 800c286:	4816      	ldr	r0, [pc, #88]	; (800c2e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800c288:	f7ff ff5a 	bl	800c140 <LL_ADC_IsEnabled>
 800c28c:	4603      	mov	r3, r0
 800c28e:	431c      	orrs	r4, r3
 800c290:	4815      	ldr	r0, [pc, #84]	; (800c2e8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800c292:	f7ff ff55 	bl	800c140 <LL_ADC_IsEnabled>
 800c296:	4603      	mov	r3, r0
 800c298:	4323      	orrs	r3, r4
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d112      	bne.n	800c2c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800c29e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2a0:	689b      	ldr	r3, [r3, #8]
 800c2a2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800c2a6:	f023 030f 	bic.w	r3, r3, #15
 800c2aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c2ac:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800c2ae:	e009      	b.n	800c2c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2b4:	f043 0220 	orr.w	r2, r3, #32
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800c2bc:	2301      	movs	r3, #1
 800c2be:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800c2c2:	e000      	b.n	800c2c6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800c2c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800c2ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3784      	adds	r7, #132	; 0x84
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd90      	pop	{r4, r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	50040000 	.word	0x50040000
 800c2e0:	50040100 	.word	0x50040100
 800c2e4:	50040300 	.word	0x50040300
 800c2e8:	50040200 	.word	0x50040200

0800c2ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b085      	sub	sp, #20
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f003 0307 	and.w	r3, r3, #7
 800c2fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c2fc:	4b0c      	ldr	r3, [pc, #48]	; (800c330 <__NVIC_SetPriorityGrouping+0x44>)
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c302:	68ba      	ldr	r2, [r7, #8]
 800c304:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c308:	4013      	ands	r3, r2
 800c30a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c314:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c31c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c31e:	4a04      	ldr	r2, [pc, #16]	; (800c330 <__NVIC_SetPriorityGrouping+0x44>)
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	60d3      	str	r3, [r2, #12]
}
 800c324:	bf00      	nop
 800c326:	3714      	adds	r7, #20
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr
 800c330:	e000ed00 	.word	0xe000ed00

0800c334 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c334:	b480      	push	{r7}
 800c336:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c338:	4b04      	ldr	r3, [pc, #16]	; (800c34c <__NVIC_GetPriorityGrouping+0x18>)
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	0a1b      	lsrs	r3, r3, #8
 800c33e:	f003 0307 	and.w	r3, r3, #7
}
 800c342:	4618      	mov	r0, r3
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr
 800c34c:	e000ed00 	.word	0xe000ed00

0800c350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	4603      	mov	r3, r0
 800c358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c35a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	db0b      	blt.n	800c37a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c362:	79fb      	ldrb	r3, [r7, #7]
 800c364:	f003 021f 	and.w	r2, r3, #31
 800c368:	4907      	ldr	r1, [pc, #28]	; (800c388 <__NVIC_EnableIRQ+0x38>)
 800c36a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c36e:	095b      	lsrs	r3, r3, #5
 800c370:	2001      	movs	r0, #1
 800c372:	fa00 f202 	lsl.w	r2, r0, r2
 800c376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800c37a:	bf00      	nop
 800c37c:	370c      	adds	r7, #12
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr
 800c386:	bf00      	nop
 800c388:	e000e100 	.word	0xe000e100

0800c38c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b083      	sub	sp, #12
 800c390:	af00      	add	r7, sp, #0
 800c392:	4603      	mov	r3, r0
 800c394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	db12      	blt.n	800c3c4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c39e:	79fb      	ldrb	r3, [r7, #7]
 800c3a0:	f003 021f 	and.w	r2, r3, #31
 800c3a4:	490a      	ldr	r1, [pc, #40]	; (800c3d0 <__NVIC_DisableIRQ+0x44>)
 800c3a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3aa:	095b      	lsrs	r3, r3, #5
 800c3ac:	2001      	movs	r0, #1
 800c3ae:	fa00 f202 	lsl.w	r2, r0, r2
 800c3b2:	3320      	adds	r3, #32
 800c3b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800c3b8:	f3bf 8f4f 	dsb	sy
}
 800c3bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c3be:	f3bf 8f6f 	isb	sy
}
 800c3c2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800c3c4:	bf00      	nop
 800c3c6:	370c      	adds	r7, #12
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr
 800c3d0:	e000e100 	.word	0xe000e100

0800c3d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	4603      	mov	r3, r0
 800c3dc:	6039      	str	r1, [r7, #0]
 800c3de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c3e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	db0a      	blt.n	800c3fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	b2da      	uxtb	r2, r3
 800c3ec:	490c      	ldr	r1, [pc, #48]	; (800c420 <__NVIC_SetPriority+0x4c>)
 800c3ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3f2:	0112      	lsls	r2, r2, #4
 800c3f4:	b2d2      	uxtb	r2, r2
 800c3f6:	440b      	add	r3, r1
 800c3f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c3fc:	e00a      	b.n	800c414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	b2da      	uxtb	r2, r3
 800c402:	4908      	ldr	r1, [pc, #32]	; (800c424 <__NVIC_SetPriority+0x50>)
 800c404:	79fb      	ldrb	r3, [r7, #7]
 800c406:	f003 030f 	and.w	r3, r3, #15
 800c40a:	3b04      	subs	r3, #4
 800c40c:	0112      	lsls	r2, r2, #4
 800c40e:	b2d2      	uxtb	r2, r2
 800c410:	440b      	add	r3, r1
 800c412:	761a      	strb	r2, [r3, #24]
}
 800c414:	bf00      	nop
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr
 800c420:	e000e100 	.word	0xe000e100
 800c424:	e000ed00 	.word	0xe000ed00

0800c428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c428:	b480      	push	{r7}
 800c42a:	b089      	sub	sp, #36	; 0x24
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f003 0307 	and.w	r3, r3, #7
 800c43a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	f1c3 0307 	rsb	r3, r3, #7
 800c442:	2b04      	cmp	r3, #4
 800c444:	bf28      	it	cs
 800c446:	2304      	movcs	r3, #4
 800c448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c44a:	69fb      	ldr	r3, [r7, #28]
 800c44c:	3304      	adds	r3, #4
 800c44e:	2b06      	cmp	r3, #6
 800c450:	d902      	bls.n	800c458 <NVIC_EncodePriority+0x30>
 800c452:	69fb      	ldr	r3, [r7, #28]
 800c454:	3b03      	subs	r3, #3
 800c456:	e000      	b.n	800c45a <NVIC_EncodePriority+0x32>
 800c458:	2300      	movs	r3, #0
 800c45a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c45c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c460:	69bb      	ldr	r3, [r7, #24]
 800c462:	fa02 f303 	lsl.w	r3, r2, r3
 800c466:	43da      	mvns	r2, r3
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	401a      	ands	r2, r3
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c470:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	fa01 f303 	lsl.w	r3, r1, r3
 800c47a:	43d9      	mvns	r1, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c480:	4313      	orrs	r3, r2
         );
}
 800c482:	4618      	mov	r0, r3
 800c484:	3724      	adds	r7, #36	; 0x24
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr
	...

0800c490 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b082      	sub	sp, #8
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	3b01      	subs	r3, #1
 800c49c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c4a0:	d301      	bcc.n	800c4a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e00f      	b.n	800c4c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c4a6:	4a0a      	ldr	r2, [pc, #40]	; (800c4d0 <SysTick_Config+0x40>)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	3b01      	subs	r3, #1
 800c4ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c4ae:	210f      	movs	r1, #15
 800c4b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4b4:	f7ff ff8e 	bl	800c3d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c4b8:	4b05      	ldr	r3, [pc, #20]	; (800c4d0 <SysTick_Config+0x40>)
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c4be:	4b04      	ldr	r3, [pc, #16]	; (800c4d0 <SysTick_Config+0x40>)
 800c4c0:	2207      	movs	r2, #7
 800c4c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c4c4:	2300      	movs	r3, #0
}
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	3708      	adds	r7, #8
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	e000e010 	.word	0xe000e010

0800c4d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f7ff ff05 	bl	800c2ec <__NVIC_SetPriorityGrouping>
}
 800c4e2:	bf00      	nop
 800c4e4:	3708      	adds	r7, #8
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b086      	sub	sp, #24
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	60b9      	str	r1, [r7, #8]
 800c4f4:	607a      	str	r2, [r7, #4]
 800c4f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c4fc:	f7ff ff1a 	bl	800c334 <__NVIC_GetPriorityGrouping>
 800c500:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	68b9      	ldr	r1, [r7, #8]
 800c506:	6978      	ldr	r0, [r7, #20]
 800c508:	f7ff ff8e 	bl	800c428 <NVIC_EncodePriority>
 800c50c:	4602      	mov	r2, r0
 800c50e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c512:	4611      	mov	r1, r2
 800c514:	4618      	mov	r0, r3
 800c516:	f7ff ff5d 	bl	800c3d4 <__NVIC_SetPriority>
}
 800c51a:	bf00      	nop
 800c51c:	3718      	adds	r7, #24
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}

0800c522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c522:	b580      	push	{r7, lr}
 800c524:	b082      	sub	sp, #8
 800c526:	af00      	add	r7, sp, #0
 800c528:	4603      	mov	r3, r0
 800c52a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c52c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c530:	4618      	mov	r0, r3
 800c532:	f7ff ff0d 	bl	800c350 <__NVIC_EnableIRQ>
}
 800c536:	bf00      	nop
 800c538:	3708      	adds	r7, #8
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c53e:	b580      	push	{r7, lr}
 800c540:	b082      	sub	sp, #8
 800c542:	af00      	add	r7, sp, #0
 800c544:	4603      	mov	r3, r0
 800c546:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800c548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c54c:	4618      	mov	r0, r3
 800c54e:	f7ff ff1d 	bl	800c38c <__NVIC_DisableIRQ>
}
 800c552:	bf00      	nop
 800c554:	3708      	adds	r7, #8
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}

0800c55a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c55a:	b580      	push	{r7, lr}
 800c55c:	b082      	sub	sp, #8
 800c55e:	af00      	add	r7, sp, #0
 800c560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f7ff ff94 	bl	800c490 <SysTick_Config>
 800c568:	4603      	mov	r3, r0
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3708      	adds	r7, #8
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
	...

0800c574 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d101      	bne.n	800c586 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800c582:	2301      	movs	r3, #1
 800c584:	e075      	b.n	800c672 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d106      	bne.n	800c5a0 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2200      	movs	r2, #0
 800c596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f7f4 fa3c 	bl	8000a18 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2202      	movs	r2, #2
 800c5a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c5b6:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	699b      	ldr	r3, [r3, #24]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d002      	beq.n	800c5c6 <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	6819      	ldr	r1, [r3, #0]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	4b2a      	ldr	r3, [pc, #168]	; (800c67c <HAL_DCMI_Init+0x108>)
 800c5d2:	400b      	ands	r3, r1
 800c5d4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	6819      	ldr	r1, [r3, #0]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	685a      	ldr	r2, [r3, #4]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	695b      	ldr	r3, [r3, #20]
 800c5e4:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800c5ea:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	691b      	ldr	r3, [r3, #16]
 800c5f0:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800c5f6:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	699b      	ldr	r3, [r3, #24]
 800c5fc:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800c602:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c608:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800c60e:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c614:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800c61a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	430a      	orrs	r2, r1
 800c622:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	2b10      	cmp	r3, #16
 800c62a:	d112      	bne.n	800c652 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	7f1b      	ldrb	r3, [r3, #28]
 800c630:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	7f5b      	ldrb	r3, [r3, #29]
 800c636:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800c638:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	7f9b      	ldrb	r3, [r3, #30]
 800c63e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800c640:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	7fdb      	ldrb	r3, [r3, #31]
 800c648:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800c64e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800c650:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	68da      	ldr	r2, [r3, #12]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f042 021f 	orr.w	r2, r2, #31
 800c660:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2200      	movs	r2, #0
 800c666:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2201      	movs	r2, #1
 800c66c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c670:	2300      	movs	r3, #0
}
 800c672:	4618      	mov	r0, r3
 800c674:	3708      	adds	r7, #8
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	ffe0f007 	.word	0xffe0f007

0800c680 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b082      	sub	sp, #8
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d101      	bne.n	800c692 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800c68e:	2301      	movs	r3, #1
 800c690:	e0ac      	b.n	800c7ec <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4618      	mov	r0, r3
 800c698:	f000 f8b2 	bl	800c800 <DFSDM_GetChannelFromInstance>
 800c69c:	4603      	mov	r3, r0
 800c69e:	4a55      	ldr	r2, [pc, #340]	; (800c7f4 <HAL_DFSDM_ChannelInit+0x174>)
 800c6a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d001      	beq.n	800c6ac <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	e09f      	b.n	800c7ec <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f7f4 fa9f 	bl	8000bf0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800c6b2:	4b51      	ldr	r3, [pc, #324]	; (800c7f8 <HAL_DFSDM_ChannelInit+0x178>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	3301      	adds	r3, #1
 800c6b8:	4a4f      	ldr	r2, [pc, #316]	; (800c7f8 <HAL_DFSDM_ChannelInit+0x178>)
 800c6ba:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800c6bc:	4b4e      	ldr	r3, [pc, #312]	; (800c7f8 <HAL_DFSDM_ChannelInit+0x178>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d125      	bne.n	800c710 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800c6c4:	4b4d      	ldr	r3, [pc, #308]	; (800c7fc <HAL_DFSDM_ChannelInit+0x17c>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	4a4c      	ldr	r2, [pc, #304]	; (800c7fc <HAL_DFSDM_ChannelInit+0x17c>)
 800c6ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c6ce:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800c6d0:	4b4a      	ldr	r3, [pc, #296]	; (800c7fc <HAL_DFSDM_ChannelInit+0x17c>)
 800c6d2:	681a      	ldr	r2, [r3, #0]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	689b      	ldr	r3, [r3, #8]
 800c6d8:	4948      	ldr	r1, [pc, #288]	; (800c7fc <HAL_DFSDM_ChannelInit+0x17c>)
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800c6de:	4b47      	ldr	r3, [pc, #284]	; (800c7fc <HAL_DFSDM_ChannelInit+0x17c>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a46      	ldr	r2, [pc, #280]	; (800c7fc <HAL_DFSDM_ChannelInit+0x17c>)
 800c6e4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800c6e8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	791b      	ldrb	r3, [r3, #4]
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d108      	bne.n	800c704 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800c6f2:	4b42      	ldr	r3, [pc, #264]	; (800c7fc <HAL_DFSDM_ChannelInit+0x17c>)
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	68db      	ldr	r3, [r3, #12]
 800c6fa:	3b01      	subs	r3, #1
 800c6fc:	041b      	lsls	r3, r3, #16
 800c6fe:	493f      	ldr	r1, [pc, #252]	; (800c7fc <HAL_DFSDM_ChannelInit+0x17c>)
 800c700:	4313      	orrs	r3, r2
 800c702:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800c704:	4b3d      	ldr	r3, [pc, #244]	; (800c7fc <HAL_DFSDM_ChannelInit+0x17c>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a3c      	ldr	r2, [pc, #240]	; (800c7fc <HAL_DFSDM_ChannelInit+0x17c>)
 800c70a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c70e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	681a      	ldr	r2, [r3, #0]
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800c71e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	6819      	ldr	r1, [r3, #0]
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800c72e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800c734:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	430a      	orrs	r2, r1
 800c73c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f022 020f 	bic.w	r2, r2, #15
 800c74c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	6819      	ldr	r1, [r3, #0]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800c75c:	431a      	orrs	r2, r3
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	430a      	orrs	r2, r1
 800c764:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	689a      	ldr	r2, [r3, #8]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800c774:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	6899      	ldr	r1, [r3, #8]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c784:	3b01      	subs	r3, #1
 800c786:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800c788:	431a      	orrs	r2, r3
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	430a      	orrs	r2, r1
 800c790:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	685a      	ldr	r2, [r3, #4]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f002 0207 	and.w	r2, r2, #7
 800c7a0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	6859      	ldr	r1, [r3, #4]
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ac:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7b2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800c7b4:	431a      	orrs	r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	430a      	orrs	r2, r1
 800c7bc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c7cc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f000 f810 	bl	800c800 <DFSDM_GetChannelFromInstance>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	4904      	ldr	r1, [pc, #16]	; (800c7f4 <HAL_DFSDM_ChannelInit+0x174>)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800c7ea:	2300      	movs	r3, #0
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3708      	adds	r7, #8
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	200013a0 	.word	0x200013a0
 800c7f8:	2000139c 	.word	0x2000139c
 800c7fc:	40016000 	.word	0x40016000

0800c800 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800c800:	b480      	push	{r7}
 800c802:	b085      	sub	sp, #20
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	4a1c      	ldr	r2, [pc, #112]	; (800c87c <DFSDM_GetChannelFromInstance+0x7c>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d102      	bne.n	800c816 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800c810:	2300      	movs	r3, #0
 800c812:	60fb      	str	r3, [r7, #12]
 800c814:	e02b      	b.n	800c86e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	4a19      	ldr	r2, [pc, #100]	; (800c880 <DFSDM_GetChannelFromInstance+0x80>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d102      	bne.n	800c824 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800c81e:	2301      	movs	r3, #1
 800c820:	60fb      	str	r3, [r7, #12]
 800c822:	e024      	b.n	800c86e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	4a17      	ldr	r2, [pc, #92]	; (800c884 <DFSDM_GetChannelFromInstance+0x84>)
 800c828:	4293      	cmp	r3, r2
 800c82a:	d102      	bne.n	800c832 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800c82c:	2302      	movs	r3, #2
 800c82e:	60fb      	str	r3, [r7, #12]
 800c830:	e01d      	b.n	800c86e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4a14      	ldr	r2, [pc, #80]	; (800c888 <DFSDM_GetChannelFromInstance+0x88>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d102      	bne.n	800c840 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800c83a:	2304      	movs	r3, #4
 800c83c:	60fb      	str	r3, [r7, #12]
 800c83e:	e016      	b.n	800c86e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	4a12      	ldr	r2, [pc, #72]	; (800c88c <DFSDM_GetChannelFromInstance+0x8c>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d102      	bne.n	800c84e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800c848:	2305      	movs	r3, #5
 800c84a:	60fb      	str	r3, [r7, #12]
 800c84c:	e00f      	b.n	800c86e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	4a0f      	ldr	r2, [pc, #60]	; (800c890 <DFSDM_GetChannelFromInstance+0x90>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d102      	bne.n	800c85c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800c856:	2306      	movs	r3, #6
 800c858:	60fb      	str	r3, [r7, #12]
 800c85a:	e008      	b.n	800c86e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	4a0d      	ldr	r2, [pc, #52]	; (800c894 <DFSDM_GetChannelFromInstance+0x94>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d102      	bne.n	800c86a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800c864:	2307      	movs	r3, #7
 800c866:	60fb      	str	r3, [r7, #12]
 800c868:	e001      	b.n	800c86e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800c86a:	2303      	movs	r3, #3
 800c86c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800c86e:	68fb      	ldr	r3, [r7, #12]
}
 800c870:	4618      	mov	r0, r3
 800c872:	3714      	adds	r7, #20
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr
 800c87c:	40016000 	.word	0x40016000
 800c880:	40016020 	.word	0x40016020
 800c884:	40016040 	.word	0x40016040
 800c888:	40016080 	.word	0x40016080
 800c88c:	400160a0 	.word	0x400160a0
 800c890:	400160c0 	.word	0x400160c0
 800c894:	400160e0 	.word	0x400160e0

0800c898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c898:	b480      	push	{r7}
 800c89a:	b087      	sub	sp, #28
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c8a6:	e166      	b.n	800cb76 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	2101      	movs	r1, #1
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	fa01 f303 	lsl.w	r3, r1, r3
 800c8b4:	4013      	ands	r3, r2
 800c8b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	f000 8158 	beq.w	800cb70 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	f003 0303 	and.w	r3, r3, #3
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d005      	beq.n	800c8d8 <HAL_GPIO_Init+0x40>
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	685b      	ldr	r3, [r3, #4]
 800c8d0:	f003 0303 	and.w	r3, r3, #3
 800c8d4:	2b02      	cmp	r3, #2
 800c8d6:	d130      	bne.n	800c93a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	689b      	ldr	r3, [r3, #8]
 800c8dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	005b      	lsls	r3, r3, #1
 800c8e2:	2203      	movs	r2, #3
 800c8e4:	fa02 f303 	lsl.w	r3, r2, r3
 800c8e8:	43db      	mvns	r3, r3
 800c8ea:	693a      	ldr	r2, [r7, #16]
 800c8ec:	4013      	ands	r3, r2
 800c8ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	68da      	ldr	r2, [r3, #12]
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	005b      	lsls	r3, r3, #1
 800c8f8:	fa02 f303 	lsl.w	r3, r2, r3
 800c8fc:	693a      	ldr	r2, [r7, #16]
 800c8fe:	4313      	orrs	r3, r2
 800c900:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	693a      	ldr	r2, [r7, #16]
 800c906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c90e:	2201      	movs	r2, #1
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	fa02 f303 	lsl.w	r3, r2, r3
 800c916:	43db      	mvns	r3, r3
 800c918:	693a      	ldr	r2, [r7, #16]
 800c91a:	4013      	ands	r3, r2
 800c91c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	685b      	ldr	r3, [r3, #4]
 800c922:	091b      	lsrs	r3, r3, #4
 800c924:	f003 0201 	and.w	r2, r3, #1
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	fa02 f303 	lsl.w	r3, r2, r3
 800c92e:	693a      	ldr	r2, [r7, #16]
 800c930:	4313      	orrs	r3, r2
 800c932:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	693a      	ldr	r2, [r7, #16]
 800c938:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	f003 0303 	and.w	r3, r3, #3
 800c942:	2b03      	cmp	r3, #3
 800c944:	d017      	beq.n	800c976 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	68db      	ldr	r3, [r3, #12]
 800c94a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	005b      	lsls	r3, r3, #1
 800c950:	2203      	movs	r2, #3
 800c952:	fa02 f303 	lsl.w	r3, r2, r3
 800c956:	43db      	mvns	r3, r3
 800c958:	693a      	ldr	r2, [r7, #16]
 800c95a:	4013      	ands	r3, r2
 800c95c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	689a      	ldr	r2, [r3, #8]
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	005b      	lsls	r3, r3, #1
 800c966:	fa02 f303 	lsl.w	r3, r2, r3
 800c96a:	693a      	ldr	r2, [r7, #16]
 800c96c:	4313      	orrs	r3, r2
 800c96e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	693a      	ldr	r2, [r7, #16]
 800c974:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	685b      	ldr	r3, [r3, #4]
 800c97a:	f003 0303 	and.w	r3, r3, #3
 800c97e:	2b02      	cmp	r3, #2
 800c980:	d123      	bne.n	800c9ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	08da      	lsrs	r2, r3, #3
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	3208      	adds	r2, #8
 800c98a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c98e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	f003 0307 	and.w	r3, r3, #7
 800c996:	009b      	lsls	r3, r3, #2
 800c998:	220f      	movs	r2, #15
 800c99a:	fa02 f303 	lsl.w	r3, r2, r3
 800c99e:	43db      	mvns	r3, r3
 800c9a0:	693a      	ldr	r2, [r7, #16]
 800c9a2:	4013      	ands	r3, r2
 800c9a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	691a      	ldr	r2, [r3, #16]
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	f003 0307 	and.w	r3, r3, #7
 800c9b0:	009b      	lsls	r3, r3, #2
 800c9b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c9b6:	693a      	ldr	r2, [r7, #16]
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	08da      	lsrs	r2, r3, #3
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	3208      	adds	r2, #8
 800c9c4:	6939      	ldr	r1, [r7, #16]
 800c9c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	005b      	lsls	r3, r3, #1
 800c9d4:	2203      	movs	r2, #3
 800c9d6:	fa02 f303 	lsl.w	r3, r2, r3
 800c9da:	43db      	mvns	r3, r3
 800c9dc:	693a      	ldr	r2, [r7, #16]
 800c9de:	4013      	ands	r3, r2
 800c9e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	f003 0203 	and.w	r2, r3, #3
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	005b      	lsls	r3, r3, #1
 800c9ee:	fa02 f303 	lsl.w	r3, r2, r3
 800c9f2:	693a      	ldr	r2, [r7, #16]
 800c9f4:	4313      	orrs	r3, r2
 800c9f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	693a      	ldr	r2, [r7, #16]
 800c9fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	685b      	ldr	r3, [r3, #4]
 800ca02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	f000 80b2 	beq.w	800cb70 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ca0c:	4b61      	ldr	r3, [pc, #388]	; (800cb94 <HAL_GPIO_Init+0x2fc>)
 800ca0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca10:	4a60      	ldr	r2, [pc, #384]	; (800cb94 <HAL_GPIO_Init+0x2fc>)
 800ca12:	f043 0301 	orr.w	r3, r3, #1
 800ca16:	6613      	str	r3, [r2, #96]	; 0x60
 800ca18:	4b5e      	ldr	r3, [pc, #376]	; (800cb94 <HAL_GPIO_Init+0x2fc>)
 800ca1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca1c:	f003 0301 	and.w	r3, r3, #1
 800ca20:	60bb      	str	r3, [r7, #8]
 800ca22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800ca24:	4a5c      	ldr	r2, [pc, #368]	; (800cb98 <HAL_GPIO_Init+0x300>)
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	089b      	lsrs	r3, r3, #2
 800ca2a:	3302      	adds	r3, #2
 800ca2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	f003 0303 	and.w	r3, r3, #3
 800ca38:	009b      	lsls	r3, r3, #2
 800ca3a:	220f      	movs	r2, #15
 800ca3c:	fa02 f303 	lsl.w	r3, r2, r3
 800ca40:	43db      	mvns	r3, r3
 800ca42:	693a      	ldr	r2, [r7, #16]
 800ca44:	4013      	ands	r3, r2
 800ca46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ca4e:	d02b      	beq.n	800caa8 <HAL_GPIO_Init+0x210>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	4a52      	ldr	r2, [pc, #328]	; (800cb9c <HAL_GPIO_Init+0x304>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d025      	beq.n	800caa4 <HAL_GPIO_Init+0x20c>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	4a51      	ldr	r2, [pc, #324]	; (800cba0 <HAL_GPIO_Init+0x308>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d01f      	beq.n	800caa0 <HAL_GPIO_Init+0x208>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	4a50      	ldr	r2, [pc, #320]	; (800cba4 <HAL_GPIO_Init+0x30c>)
 800ca64:	4293      	cmp	r3, r2
 800ca66:	d019      	beq.n	800ca9c <HAL_GPIO_Init+0x204>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	4a4f      	ldr	r2, [pc, #316]	; (800cba8 <HAL_GPIO_Init+0x310>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d013      	beq.n	800ca98 <HAL_GPIO_Init+0x200>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4a4e      	ldr	r2, [pc, #312]	; (800cbac <HAL_GPIO_Init+0x314>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d00d      	beq.n	800ca94 <HAL_GPIO_Init+0x1fc>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	4a4d      	ldr	r2, [pc, #308]	; (800cbb0 <HAL_GPIO_Init+0x318>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d007      	beq.n	800ca90 <HAL_GPIO_Init+0x1f8>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	4a4c      	ldr	r2, [pc, #304]	; (800cbb4 <HAL_GPIO_Init+0x31c>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d101      	bne.n	800ca8c <HAL_GPIO_Init+0x1f4>
 800ca88:	2307      	movs	r3, #7
 800ca8a:	e00e      	b.n	800caaa <HAL_GPIO_Init+0x212>
 800ca8c:	2308      	movs	r3, #8
 800ca8e:	e00c      	b.n	800caaa <HAL_GPIO_Init+0x212>
 800ca90:	2306      	movs	r3, #6
 800ca92:	e00a      	b.n	800caaa <HAL_GPIO_Init+0x212>
 800ca94:	2305      	movs	r3, #5
 800ca96:	e008      	b.n	800caaa <HAL_GPIO_Init+0x212>
 800ca98:	2304      	movs	r3, #4
 800ca9a:	e006      	b.n	800caaa <HAL_GPIO_Init+0x212>
 800ca9c:	2303      	movs	r3, #3
 800ca9e:	e004      	b.n	800caaa <HAL_GPIO_Init+0x212>
 800caa0:	2302      	movs	r3, #2
 800caa2:	e002      	b.n	800caaa <HAL_GPIO_Init+0x212>
 800caa4:	2301      	movs	r3, #1
 800caa6:	e000      	b.n	800caaa <HAL_GPIO_Init+0x212>
 800caa8:	2300      	movs	r3, #0
 800caaa:	697a      	ldr	r2, [r7, #20]
 800caac:	f002 0203 	and.w	r2, r2, #3
 800cab0:	0092      	lsls	r2, r2, #2
 800cab2:	4093      	lsls	r3, r2
 800cab4:	693a      	ldr	r2, [r7, #16]
 800cab6:	4313      	orrs	r3, r2
 800cab8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800caba:	4937      	ldr	r1, [pc, #220]	; (800cb98 <HAL_GPIO_Init+0x300>)
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	089b      	lsrs	r3, r3, #2
 800cac0:	3302      	adds	r3, #2
 800cac2:	693a      	ldr	r2, [r7, #16]
 800cac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800cac8:	4b3b      	ldr	r3, [pc, #236]	; (800cbb8 <HAL_GPIO_Init+0x320>)
 800caca:	689b      	ldr	r3, [r3, #8]
 800cacc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	43db      	mvns	r3, r3
 800cad2:	693a      	ldr	r2, [r7, #16]
 800cad4:	4013      	ands	r3, r2
 800cad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d003      	beq.n	800caec <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800cae4:	693a      	ldr	r2, [r7, #16]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	4313      	orrs	r3, r2
 800caea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800caec:	4a32      	ldr	r2, [pc, #200]	; (800cbb8 <HAL_GPIO_Init+0x320>)
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800caf2:	4b31      	ldr	r3, [pc, #196]	; (800cbb8 <HAL_GPIO_Init+0x320>)
 800caf4:	68db      	ldr	r3, [r3, #12]
 800caf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	43db      	mvns	r3, r3
 800cafc:	693a      	ldr	r2, [r7, #16]
 800cafe:	4013      	ands	r3, r2
 800cb00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d003      	beq.n	800cb16 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800cb0e:	693a      	ldr	r2, [r7, #16]
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	4313      	orrs	r3, r2
 800cb14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800cb16:	4a28      	ldr	r2, [pc, #160]	; (800cbb8 <HAL_GPIO_Init+0x320>)
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800cb1c:	4b26      	ldr	r3, [pc, #152]	; (800cbb8 <HAL_GPIO_Init+0x320>)
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	43db      	mvns	r3, r3
 800cb26:	693a      	ldr	r2, [r7, #16]
 800cb28:	4013      	ands	r3, r2
 800cb2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d003      	beq.n	800cb40 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800cb38:	693a      	ldr	r2, [r7, #16]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800cb40:	4a1d      	ldr	r2, [pc, #116]	; (800cbb8 <HAL_GPIO_Init+0x320>)
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800cb46:	4b1c      	ldr	r3, [pc, #112]	; (800cbb8 <HAL_GPIO_Init+0x320>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	43db      	mvns	r3, r3
 800cb50:	693a      	ldr	r2, [r7, #16]
 800cb52:	4013      	ands	r3, r2
 800cb54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d003      	beq.n	800cb6a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800cb62:	693a      	ldr	r2, [r7, #16]
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	4313      	orrs	r3, r2
 800cb68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800cb6a:	4a13      	ldr	r2, [pc, #76]	; (800cbb8 <HAL_GPIO_Init+0x320>)
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	3301      	adds	r3, #1
 800cb74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	681a      	ldr	r2, [r3, #0]
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	fa22 f303 	lsr.w	r3, r2, r3
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	f47f ae91 	bne.w	800c8a8 <HAL_GPIO_Init+0x10>
  }
}
 800cb86:	bf00      	nop
 800cb88:	bf00      	nop
 800cb8a:	371c      	adds	r7, #28
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr
 800cb94:	40021000 	.word	0x40021000
 800cb98:	40010000 	.word	0x40010000
 800cb9c:	48000400 	.word	0x48000400
 800cba0:	48000800 	.word	0x48000800
 800cba4:	48000c00 	.word	0x48000c00
 800cba8:	48001000 	.word	0x48001000
 800cbac:	48001400 	.word	0x48001400
 800cbb0:	48001800 	.word	0x48001800
 800cbb4:	48001c00 	.word	0x48001c00
 800cbb8:	40010400 	.word	0x40010400

0800cbbc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b087      	sub	sp, #28
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800cbca:	e0c9      	b.n	800cd60 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800cbcc:	2201      	movs	r2, #1
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	fa02 f303 	lsl.w	r3, r2, r3
 800cbd4:	683a      	ldr	r2, [r7, #0]
 800cbd6:	4013      	ands	r3, r2
 800cbd8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	f000 80bc 	beq.w	800cd5a <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800cbe2:	4a66      	ldr	r2, [pc, #408]	; (800cd7c <HAL_GPIO_DeInit+0x1c0>)
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	089b      	lsrs	r3, r3, #2
 800cbe8:	3302      	adds	r3, #2
 800cbea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbee:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	f003 0303 	and.w	r3, r3, #3
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	220f      	movs	r2, #15
 800cbfa:	fa02 f303 	lsl.w	r3, r2, r3
 800cbfe:	68fa      	ldr	r2, [r7, #12]
 800cc00:	4013      	ands	r3, r2
 800cc02:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800cc0a:	d02b      	beq.n	800cc64 <HAL_GPIO_DeInit+0xa8>
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	4a5c      	ldr	r2, [pc, #368]	; (800cd80 <HAL_GPIO_DeInit+0x1c4>)
 800cc10:	4293      	cmp	r3, r2
 800cc12:	d025      	beq.n	800cc60 <HAL_GPIO_DeInit+0xa4>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	4a5b      	ldr	r2, [pc, #364]	; (800cd84 <HAL_GPIO_DeInit+0x1c8>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d01f      	beq.n	800cc5c <HAL_GPIO_DeInit+0xa0>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	4a5a      	ldr	r2, [pc, #360]	; (800cd88 <HAL_GPIO_DeInit+0x1cc>)
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d019      	beq.n	800cc58 <HAL_GPIO_DeInit+0x9c>
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	4a59      	ldr	r2, [pc, #356]	; (800cd8c <HAL_GPIO_DeInit+0x1d0>)
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	d013      	beq.n	800cc54 <HAL_GPIO_DeInit+0x98>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	4a58      	ldr	r2, [pc, #352]	; (800cd90 <HAL_GPIO_DeInit+0x1d4>)
 800cc30:	4293      	cmp	r3, r2
 800cc32:	d00d      	beq.n	800cc50 <HAL_GPIO_DeInit+0x94>
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	4a57      	ldr	r2, [pc, #348]	; (800cd94 <HAL_GPIO_DeInit+0x1d8>)
 800cc38:	4293      	cmp	r3, r2
 800cc3a:	d007      	beq.n	800cc4c <HAL_GPIO_DeInit+0x90>
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	4a56      	ldr	r2, [pc, #344]	; (800cd98 <HAL_GPIO_DeInit+0x1dc>)
 800cc40:	4293      	cmp	r3, r2
 800cc42:	d101      	bne.n	800cc48 <HAL_GPIO_DeInit+0x8c>
 800cc44:	2307      	movs	r3, #7
 800cc46:	e00e      	b.n	800cc66 <HAL_GPIO_DeInit+0xaa>
 800cc48:	2308      	movs	r3, #8
 800cc4a:	e00c      	b.n	800cc66 <HAL_GPIO_DeInit+0xaa>
 800cc4c:	2306      	movs	r3, #6
 800cc4e:	e00a      	b.n	800cc66 <HAL_GPIO_DeInit+0xaa>
 800cc50:	2305      	movs	r3, #5
 800cc52:	e008      	b.n	800cc66 <HAL_GPIO_DeInit+0xaa>
 800cc54:	2304      	movs	r3, #4
 800cc56:	e006      	b.n	800cc66 <HAL_GPIO_DeInit+0xaa>
 800cc58:	2303      	movs	r3, #3
 800cc5a:	e004      	b.n	800cc66 <HAL_GPIO_DeInit+0xaa>
 800cc5c:	2302      	movs	r3, #2
 800cc5e:	e002      	b.n	800cc66 <HAL_GPIO_DeInit+0xaa>
 800cc60:	2301      	movs	r3, #1
 800cc62:	e000      	b.n	800cc66 <HAL_GPIO_DeInit+0xaa>
 800cc64:	2300      	movs	r3, #0
 800cc66:	697a      	ldr	r2, [r7, #20]
 800cc68:	f002 0203 	and.w	r2, r2, #3
 800cc6c:	0092      	lsls	r2, r2, #2
 800cc6e:	4093      	lsls	r3, r2
 800cc70:	68fa      	ldr	r2, [r7, #12]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d132      	bne.n	800ccdc <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800cc76:	4b49      	ldr	r3, [pc, #292]	; (800cd9c <HAL_GPIO_DeInit+0x1e0>)
 800cc78:	681a      	ldr	r2, [r3, #0]
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	43db      	mvns	r3, r3
 800cc7e:	4947      	ldr	r1, [pc, #284]	; (800cd9c <HAL_GPIO_DeInit+0x1e0>)
 800cc80:	4013      	ands	r3, r2
 800cc82:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800cc84:	4b45      	ldr	r3, [pc, #276]	; (800cd9c <HAL_GPIO_DeInit+0x1e0>)
 800cc86:	685a      	ldr	r2, [r3, #4]
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	43db      	mvns	r3, r3
 800cc8c:	4943      	ldr	r1, [pc, #268]	; (800cd9c <HAL_GPIO_DeInit+0x1e0>)
 800cc8e:	4013      	ands	r3, r2
 800cc90:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800cc92:	4b42      	ldr	r3, [pc, #264]	; (800cd9c <HAL_GPIO_DeInit+0x1e0>)
 800cc94:	68da      	ldr	r2, [r3, #12]
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	43db      	mvns	r3, r3
 800cc9a:	4940      	ldr	r1, [pc, #256]	; (800cd9c <HAL_GPIO_DeInit+0x1e0>)
 800cc9c:	4013      	ands	r3, r2
 800cc9e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800cca0:	4b3e      	ldr	r3, [pc, #248]	; (800cd9c <HAL_GPIO_DeInit+0x1e0>)
 800cca2:	689a      	ldr	r2, [r3, #8]
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	43db      	mvns	r3, r3
 800cca8:	493c      	ldr	r1, [pc, #240]	; (800cd9c <HAL_GPIO_DeInit+0x1e0>)
 800ccaa:	4013      	ands	r3, r2
 800ccac:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	f003 0303 	and.w	r3, r3, #3
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	220f      	movs	r2, #15
 800ccb8:	fa02 f303 	lsl.w	r3, r2, r3
 800ccbc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800ccbe:	4a2f      	ldr	r2, [pc, #188]	; (800cd7c <HAL_GPIO_DeInit+0x1c0>)
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	089b      	lsrs	r3, r3, #2
 800ccc4:	3302      	adds	r3, #2
 800ccc6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	43da      	mvns	r2, r3
 800ccce:	482b      	ldr	r0, [pc, #172]	; (800cd7c <HAL_GPIO_DeInit+0x1c0>)
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	089b      	lsrs	r3, r3, #2
 800ccd4:	400a      	ands	r2, r1
 800ccd6:	3302      	adds	r3, #2
 800ccd8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681a      	ldr	r2, [r3, #0]
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	005b      	lsls	r3, r3, #1
 800cce4:	2103      	movs	r1, #3
 800cce6:	fa01 f303 	lsl.w	r3, r1, r3
 800ccea:	431a      	orrs	r2, r3
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	08da      	lsrs	r2, r3, #3
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	3208      	adds	r2, #8
 800ccf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	f003 0307 	and.w	r3, r3, #7
 800cd02:	009b      	lsls	r3, r3, #2
 800cd04:	220f      	movs	r2, #15
 800cd06:	fa02 f303 	lsl.w	r3, r2, r3
 800cd0a:	43db      	mvns	r3, r3
 800cd0c:	697a      	ldr	r2, [r7, #20]
 800cd0e:	08d2      	lsrs	r2, r2, #3
 800cd10:	4019      	ands	r1, r3
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	3208      	adds	r2, #8
 800cd16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	689a      	ldr	r2, [r3, #8]
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	005b      	lsls	r3, r3, #1
 800cd22:	2103      	movs	r1, #3
 800cd24:	fa01 f303 	lsl.w	r3, r1, r3
 800cd28:	43db      	mvns	r3, r3
 800cd2a:	401a      	ands	r2, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	685a      	ldr	r2, [r3, #4]
 800cd34:	2101      	movs	r1, #1
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	fa01 f303 	lsl.w	r3, r1, r3
 800cd3c:	43db      	mvns	r3, r3
 800cd3e:	401a      	ands	r2, r3
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	68da      	ldr	r2, [r3, #12]
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	005b      	lsls	r3, r3, #1
 800cd4c:	2103      	movs	r1, #3
 800cd4e:	fa01 f303 	lsl.w	r3, r1, r3
 800cd52:	43db      	mvns	r3, r3
 800cd54:	401a      	ands	r2, r3
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800cd60:	683a      	ldr	r2, [r7, #0]
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	fa22 f303 	lsr.w	r3, r2, r3
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	f47f af2f 	bne.w	800cbcc <HAL_GPIO_DeInit+0x10>
  }
}
 800cd6e:	bf00      	nop
 800cd70:	bf00      	nop
 800cd72:	371c      	adds	r7, #28
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr
 800cd7c:	40010000 	.word	0x40010000
 800cd80:	48000400 	.word	0x48000400
 800cd84:	48000800 	.word	0x48000800
 800cd88:	48000c00 	.word	0x48000c00
 800cd8c:	48001000 	.word	0x48001000
 800cd90:	48001400 	.word	0x48001400
 800cd94:	48001800 	.word	0x48001800
 800cd98:	48001c00 	.word	0x48001c00
 800cd9c:	40010400 	.word	0x40010400

0800cda0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	460b      	mov	r3, r1
 800cdaa:	807b      	strh	r3, [r7, #2]
 800cdac:	4613      	mov	r3, r2
 800cdae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cdb0:	787b      	ldrb	r3, [r7, #1]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d003      	beq.n	800cdbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800cdb6:	887a      	ldrh	r2, [r7, #2]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800cdbc:	e002      	b.n	800cdc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800cdbe:	887a      	ldrh	r2, [r7, #2]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 800cdc4:	bf00      	nop
 800cdc6:	370c      	adds	r7, #12
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800cdda:	4b08      	ldr	r3, [pc, #32]	; (800cdfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800cddc:	695a      	ldr	r2, [r3, #20]
 800cdde:	88fb      	ldrh	r3, [r7, #6]
 800cde0:	4013      	ands	r3, r2
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d006      	beq.n	800cdf4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800cde6:	4a05      	ldr	r2, [pc, #20]	; (800cdfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800cde8:	88fb      	ldrh	r3, [r7, #6]
 800cdea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800cdec:	88fb      	ldrh	r3, [r7, #6]
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7f4 ff2c 	bl	8001c4c <HAL_GPIO_EXTI_Callback>
  }
}
 800cdf4:	bf00      	nop
 800cdf6:	3708      	adds	r7, #8
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}
 800cdfc:	40010400 	.word	0x40010400

0800ce00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d101      	bne.n	800ce12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	e081      	b.n	800cf16 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d106      	bne.n	800ce2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2200      	movs	r2, #0
 800ce22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f7f4 faca 	bl	80013c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2224      	movs	r2, #36	; 0x24
 800ce30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f022 0201 	bic.w	r2, r2, #1
 800ce42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	685a      	ldr	r2, [r3, #4]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ce50:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	689a      	ldr	r2, [r3, #8]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ce60:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	68db      	ldr	r3, [r3, #12]
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	d107      	bne.n	800ce7a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	689a      	ldr	r2, [r3, #8]
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ce76:	609a      	str	r2, [r3, #8]
 800ce78:	e006      	b.n	800ce88 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	689a      	ldr	r2, [r3, #8]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ce86:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	68db      	ldr	r3, [r3, #12]
 800ce8c:	2b02      	cmp	r3, #2
 800ce8e:	d104      	bne.n	800ce9a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	685b      	ldr	r3, [r3, #4]
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	6812      	ldr	r2, [r2, #0]
 800cea4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800cea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ceac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	68da      	ldr	r2, [r3, #12]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cebc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	691a      	ldr	r2, [r3, #16]
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	695b      	ldr	r3, [r3, #20]
 800cec6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	699b      	ldr	r3, [r3, #24]
 800cece:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	430a      	orrs	r2, r1
 800ced6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	69d9      	ldr	r1, [r3, #28]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6a1a      	ldr	r2, [r3, #32]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	430a      	orrs	r2, r1
 800cee6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	681a      	ldr	r2, [r3, #0]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f042 0201 	orr.w	r2, r2, #1
 800cef6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2200      	movs	r2, #0
 800cefc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2220      	movs	r2, #32
 800cf02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2200      	movs	r2, #0
 800cf0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800cf14:	2300      	movs	r3, #0
}
 800cf16:	4618      	mov	r0, r3
 800cf18:	3708      	adds	r7, #8
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}

0800cf1e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800cf1e:	b580      	push	{r7, lr}
 800cf20:	b082      	sub	sp, #8
 800cf22:	af00      	add	r7, sp, #0
 800cf24:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d101      	bne.n	800cf30 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	e021      	b.n	800cf74 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2224      	movs	r2, #36	; 0x24
 800cf34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	681a      	ldr	r2, [r3, #0]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f022 0201 	bic.w	r2, r2, #1
 800cf46:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f7f4 faff 	bl	800154c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2200      	movs	r2, #0
 800cf52:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2200      	movs	r2, #0
 800cf66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cf72:	2300      	movs	r3, #0
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3708      	adds	r7, #8
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b088      	sub	sp, #32
 800cf80:	af02      	add	r7, sp, #8
 800cf82:	60f8      	str	r0, [r7, #12]
 800cf84:	607a      	str	r2, [r7, #4]
 800cf86:	461a      	mov	r2, r3
 800cf88:	460b      	mov	r3, r1
 800cf8a:	817b      	strh	r3, [r7, #10]
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf96:	b2db      	uxtb	r3, r3
 800cf98:	2b20      	cmp	r3, #32
 800cf9a:	f040 80da 	bne.w	800d152 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d101      	bne.n	800cfac <HAL_I2C_Master_Transmit+0x30>
 800cfa8:	2302      	movs	r3, #2
 800cfaa:	e0d3      	b.n	800d154 <HAL_I2C_Master_Transmit+0x1d8>
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2201      	movs	r2, #1
 800cfb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cfb4:	f7fd fef2 	bl	800ad9c <HAL_GetTick>
 800cfb8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	9300      	str	r3, [sp, #0]
 800cfbe:	2319      	movs	r3, #25
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cfc6:	68f8      	ldr	r0, [r7, #12]
 800cfc8:	f000 fdd2 	bl	800db70 <I2C_WaitOnFlagUntilTimeout>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d001      	beq.n	800cfd6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	e0be      	b.n	800d154 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	2221      	movs	r2, #33	; 0x21
 800cfda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	2210      	movs	r2, #16
 800cfe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	893a      	ldrh	r2, [r7, #8]
 800cff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2200      	movs	r2, #0
 800cffc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d002:	b29b      	uxth	r3, r3
 800d004:	2bff      	cmp	r3, #255	; 0xff
 800d006:	d90e      	bls.n	800d026 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	22ff      	movs	r2, #255	; 0xff
 800d00c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d012:	b2da      	uxtb	r2, r3
 800d014:	8979      	ldrh	r1, [r7, #10]
 800d016:	4b51      	ldr	r3, [pc, #324]	; (800d15c <HAL_I2C_Master_Transmit+0x1e0>)
 800d018:	9300      	str	r3, [sp, #0]
 800d01a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d01e:	68f8      	ldr	r0, [r7, #12]
 800d020:	f000 ffc8 	bl	800dfb4 <I2C_TransferConfig>
 800d024:	e06c      	b.n	800d100 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d02a:	b29a      	uxth	r2, r3
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d034:	b2da      	uxtb	r2, r3
 800d036:	8979      	ldrh	r1, [r7, #10]
 800d038:	4b48      	ldr	r3, [pc, #288]	; (800d15c <HAL_I2C_Master_Transmit+0x1e0>)
 800d03a:	9300      	str	r3, [sp, #0]
 800d03c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d040:	68f8      	ldr	r0, [r7, #12]
 800d042:	f000 ffb7 	bl	800dfb4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800d046:	e05b      	b.n	800d100 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d048:	697a      	ldr	r2, [r7, #20]
 800d04a:	6a39      	ldr	r1, [r7, #32]
 800d04c:	68f8      	ldr	r0, [r7, #12]
 800d04e:	f000 fdcf 	bl	800dbf0 <I2C_WaitOnTXISFlagUntilTimeout>
 800d052:	4603      	mov	r3, r0
 800d054:	2b00      	cmp	r3, #0
 800d056:	d001      	beq.n	800d05c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800d058:	2301      	movs	r3, #1
 800d05a:	e07b      	b.n	800d154 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d060:	781a      	ldrb	r2, [r3, #0]
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d06c:	1c5a      	adds	r2, r3, #1
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d076:	b29b      	uxth	r3, r3
 800d078:	3b01      	subs	r3, #1
 800d07a:	b29a      	uxth	r2, r3
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d084:	3b01      	subs	r3, #1
 800d086:	b29a      	uxth	r2, r3
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d090:	b29b      	uxth	r3, r3
 800d092:	2b00      	cmp	r3, #0
 800d094:	d034      	beq.n	800d100 <HAL_I2C_Master_Transmit+0x184>
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d130      	bne.n	800d100 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	9300      	str	r3, [sp, #0]
 800d0a2:	6a3b      	ldr	r3, [r7, #32]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	2180      	movs	r1, #128	; 0x80
 800d0a8:	68f8      	ldr	r0, [r7, #12]
 800d0aa:	f000 fd61 	bl	800db70 <I2C_WaitOnFlagUntilTimeout>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d001      	beq.n	800d0b8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	e04d      	b.n	800d154 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0bc:	b29b      	uxth	r3, r3
 800d0be:	2bff      	cmp	r3, #255	; 0xff
 800d0c0:	d90e      	bls.n	800d0e0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	22ff      	movs	r2, #255	; 0xff
 800d0c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0cc:	b2da      	uxtb	r2, r3
 800d0ce:	8979      	ldrh	r1, [r7, #10]
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	9300      	str	r3, [sp, #0]
 800d0d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d0d8:	68f8      	ldr	r0, [r7, #12]
 800d0da:	f000 ff6b 	bl	800dfb4 <I2C_TransferConfig>
 800d0de:	e00f      	b.n	800d100 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0e4:	b29a      	uxth	r2, r3
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0ee:	b2da      	uxtb	r2, r3
 800d0f0:	8979      	ldrh	r1, [r7, #10]
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	9300      	str	r3, [sp, #0]
 800d0f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d0fa:	68f8      	ldr	r0, [r7, #12]
 800d0fc:	f000 ff5a 	bl	800dfb4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d104:	b29b      	uxth	r3, r3
 800d106:	2b00      	cmp	r3, #0
 800d108:	d19e      	bne.n	800d048 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d10a:	697a      	ldr	r2, [r7, #20]
 800d10c:	6a39      	ldr	r1, [r7, #32]
 800d10e:	68f8      	ldr	r0, [r7, #12]
 800d110:	f000 fdae 	bl	800dc70 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d114:	4603      	mov	r3, r0
 800d116:	2b00      	cmp	r3, #0
 800d118:	d001      	beq.n	800d11e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800d11a:	2301      	movs	r3, #1
 800d11c:	e01a      	b.n	800d154 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	2220      	movs	r2, #32
 800d124:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	6859      	ldr	r1, [r3, #4]
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	4b0b      	ldr	r3, [pc, #44]	; (800d160 <HAL_I2C_Master_Transmit+0x1e4>)
 800d132:	400b      	ands	r3, r1
 800d134:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2220      	movs	r2, #32
 800d13a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2200      	movs	r2, #0
 800d142:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	2200      	movs	r2, #0
 800d14a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d14e:	2300      	movs	r3, #0
 800d150:	e000      	b.n	800d154 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800d152:	2302      	movs	r3, #2
  }
}
 800d154:	4618      	mov	r0, r3
 800d156:	3718      	adds	r7, #24
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	80002000 	.word	0x80002000
 800d160:	fe00e800 	.word	0xfe00e800

0800d164 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b088      	sub	sp, #32
 800d168:	af02      	add	r7, sp, #8
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	607a      	str	r2, [r7, #4]
 800d16e:	461a      	mov	r2, r3
 800d170:	460b      	mov	r3, r1
 800d172:	817b      	strh	r3, [r7, #10]
 800d174:	4613      	mov	r3, r2
 800d176:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d17e:	b2db      	uxtb	r3, r3
 800d180:	2b20      	cmp	r3, #32
 800d182:	f040 80db 	bne.w	800d33c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	d101      	bne.n	800d194 <HAL_I2C_Master_Receive+0x30>
 800d190:	2302      	movs	r3, #2
 800d192:	e0d4      	b.n	800d33e <HAL_I2C_Master_Receive+0x1da>
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2201      	movs	r2, #1
 800d198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d19c:	f7fd fdfe 	bl	800ad9c <HAL_GetTick>
 800d1a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	9300      	str	r3, [sp, #0]
 800d1a6:	2319      	movs	r3, #25
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d1ae:	68f8      	ldr	r0, [r7, #12]
 800d1b0:	f000 fcde 	bl	800db70 <I2C_WaitOnFlagUntilTimeout>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d001      	beq.n	800d1be <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	e0bf      	b.n	800d33e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2222      	movs	r2, #34	; 0x22
 800d1c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2210      	movs	r2, #16
 800d1ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	687a      	ldr	r2, [r7, #4]
 800d1d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	893a      	ldrh	r2, [r7, #8]
 800d1de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1ea:	b29b      	uxth	r3, r3
 800d1ec:	2bff      	cmp	r3, #255	; 0xff
 800d1ee:	d90e      	bls.n	800d20e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	22ff      	movs	r2, #255	; 0xff
 800d1f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1fa:	b2da      	uxtb	r2, r3
 800d1fc:	8979      	ldrh	r1, [r7, #10]
 800d1fe:	4b52      	ldr	r3, [pc, #328]	; (800d348 <HAL_I2C_Master_Receive+0x1e4>)
 800d200:	9300      	str	r3, [sp, #0]
 800d202:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d206:	68f8      	ldr	r0, [r7, #12]
 800d208:	f000 fed4 	bl	800dfb4 <I2C_TransferConfig>
 800d20c:	e06d      	b.n	800d2ea <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d212:	b29a      	uxth	r2, r3
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d21c:	b2da      	uxtb	r2, r3
 800d21e:	8979      	ldrh	r1, [r7, #10]
 800d220:	4b49      	ldr	r3, [pc, #292]	; (800d348 <HAL_I2C_Master_Receive+0x1e4>)
 800d222:	9300      	str	r3, [sp, #0]
 800d224:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d228:	68f8      	ldr	r0, [r7, #12]
 800d22a:	f000 fec3 	bl	800dfb4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800d22e:	e05c      	b.n	800d2ea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d230:	697a      	ldr	r2, [r7, #20]
 800d232:	6a39      	ldr	r1, [r7, #32]
 800d234:	68f8      	ldr	r0, [r7, #12]
 800d236:	f000 fd57 	bl	800dce8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d23a:	4603      	mov	r3, r0
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d001      	beq.n	800d244 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800d240:	2301      	movs	r3, #1
 800d242:	e07c      	b.n	800d33e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d24e:	b2d2      	uxtb	r2, r2
 800d250:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d256:	1c5a      	adds	r2, r3, #1
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d260:	3b01      	subs	r3, #1
 800d262:	b29a      	uxth	r2, r3
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	3b01      	subs	r3, #1
 800d270:	b29a      	uxth	r2, r3
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d27a:	b29b      	uxth	r3, r3
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d034      	beq.n	800d2ea <HAL_I2C_Master_Receive+0x186>
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d284:	2b00      	cmp	r3, #0
 800d286:	d130      	bne.n	800d2ea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	9300      	str	r3, [sp, #0]
 800d28c:	6a3b      	ldr	r3, [r7, #32]
 800d28e:	2200      	movs	r2, #0
 800d290:	2180      	movs	r1, #128	; 0x80
 800d292:	68f8      	ldr	r0, [r7, #12]
 800d294:	f000 fc6c 	bl	800db70 <I2C_WaitOnFlagUntilTimeout>
 800d298:	4603      	mov	r3, r0
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d001      	beq.n	800d2a2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800d29e:	2301      	movs	r3, #1
 800d2a0:	e04d      	b.n	800d33e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	2bff      	cmp	r3, #255	; 0xff
 800d2aa:	d90e      	bls.n	800d2ca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	22ff      	movs	r2, #255	; 0xff
 800d2b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2b6:	b2da      	uxtb	r2, r3
 800d2b8:	8979      	ldrh	r1, [r7, #10]
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	9300      	str	r3, [sp, #0]
 800d2be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d2c2:	68f8      	ldr	r0, [r7, #12]
 800d2c4:	f000 fe76 	bl	800dfb4 <I2C_TransferConfig>
 800d2c8:	e00f      	b.n	800d2ea <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2ce:	b29a      	uxth	r2, r3
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2d8:	b2da      	uxtb	r2, r3
 800d2da:	8979      	ldrh	r1, [r7, #10]
 800d2dc:	2300      	movs	r3, #0
 800d2de:	9300      	str	r3, [sp, #0]
 800d2e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d2e4:	68f8      	ldr	r0, [r7, #12]
 800d2e6:	f000 fe65 	bl	800dfb4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2ee:	b29b      	uxth	r3, r3
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d19d      	bne.n	800d230 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d2f4:	697a      	ldr	r2, [r7, #20]
 800d2f6:	6a39      	ldr	r1, [r7, #32]
 800d2f8:	68f8      	ldr	r0, [r7, #12]
 800d2fa:	f000 fcb9 	bl	800dc70 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d2fe:	4603      	mov	r3, r0
 800d300:	2b00      	cmp	r3, #0
 800d302:	d001      	beq.n	800d308 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800d304:	2301      	movs	r3, #1
 800d306:	e01a      	b.n	800d33e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	2220      	movs	r2, #32
 800d30e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	6859      	ldr	r1, [r3, #4]
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681a      	ldr	r2, [r3, #0]
 800d31a:	4b0c      	ldr	r3, [pc, #48]	; (800d34c <HAL_I2C_Master_Receive+0x1e8>)
 800d31c:	400b      	ands	r3, r1
 800d31e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	2220      	movs	r2, #32
 800d324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	2200      	movs	r2, #0
 800d32c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2200      	movs	r2, #0
 800d334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d338:	2300      	movs	r3, #0
 800d33a:	e000      	b.n	800d33e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800d33c:	2302      	movs	r3, #2
  }
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3718      	adds	r7, #24
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	bf00      	nop
 800d348:	80002400 	.word	0x80002400
 800d34c:	fe00e800 	.word	0xfe00e800

0800d350 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b088      	sub	sp, #32
 800d354:	af02      	add	r7, sp, #8
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	4608      	mov	r0, r1
 800d35a:	4611      	mov	r1, r2
 800d35c:	461a      	mov	r2, r3
 800d35e:	4603      	mov	r3, r0
 800d360:	817b      	strh	r3, [r7, #10]
 800d362:	460b      	mov	r3, r1
 800d364:	813b      	strh	r3, [r7, #8]
 800d366:	4613      	mov	r3, r2
 800d368:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d370:	b2db      	uxtb	r3, r3
 800d372:	2b20      	cmp	r3, #32
 800d374:	f040 80f9 	bne.w	800d56a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d378:	6a3b      	ldr	r3, [r7, #32]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d002      	beq.n	800d384 <HAL_I2C_Mem_Write+0x34>
 800d37e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d380:	2b00      	cmp	r3, #0
 800d382:	d105      	bne.n	800d390 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d38a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800d38c:	2301      	movs	r3, #1
 800d38e:	e0ed      	b.n	800d56c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d396:	2b01      	cmp	r3, #1
 800d398:	d101      	bne.n	800d39e <HAL_I2C_Mem_Write+0x4e>
 800d39a:	2302      	movs	r3, #2
 800d39c:	e0e6      	b.n	800d56c <HAL_I2C_Mem_Write+0x21c>
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2201      	movs	r2, #1
 800d3a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d3a6:	f7fd fcf9 	bl	800ad9c <HAL_GetTick>
 800d3aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	9300      	str	r3, [sp, #0]
 800d3b0:	2319      	movs	r3, #25
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d3b8:	68f8      	ldr	r0, [r7, #12]
 800d3ba:	f000 fbd9 	bl	800db70 <I2C_WaitOnFlagUntilTimeout>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d001      	beq.n	800d3c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	e0d1      	b.n	800d56c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	2221      	movs	r2, #33	; 0x21
 800d3cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2240      	movs	r2, #64	; 0x40
 800d3d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	6a3a      	ldr	r2, [r7, #32]
 800d3e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d3e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d3f0:	88f8      	ldrh	r0, [r7, #6]
 800d3f2:	893a      	ldrh	r2, [r7, #8]
 800d3f4:	8979      	ldrh	r1, [r7, #10]
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	9301      	str	r3, [sp, #4]
 800d3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fc:	9300      	str	r3, [sp, #0]
 800d3fe:	4603      	mov	r3, r0
 800d400:	68f8      	ldr	r0, [r7, #12]
 800d402:	f000 fae9 	bl	800d9d8 <I2C_RequestMemoryWrite>
 800d406:	4603      	mov	r3, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d005      	beq.n	800d418 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	2200      	movs	r2, #0
 800d410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800d414:	2301      	movs	r3, #1
 800d416:	e0a9      	b.n	800d56c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	2bff      	cmp	r3, #255	; 0xff
 800d420:	d90e      	bls.n	800d440 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	22ff      	movs	r2, #255	; 0xff
 800d426:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d42c:	b2da      	uxtb	r2, r3
 800d42e:	8979      	ldrh	r1, [r7, #10]
 800d430:	2300      	movs	r3, #0
 800d432:	9300      	str	r3, [sp, #0]
 800d434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d438:	68f8      	ldr	r0, [r7, #12]
 800d43a:	f000 fdbb 	bl	800dfb4 <I2C_TransferConfig>
 800d43e:	e00f      	b.n	800d460 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d444:	b29a      	uxth	r2, r3
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d44e:	b2da      	uxtb	r2, r3
 800d450:	8979      	ldrh	r1, [r7, #10]
 800d452:	2300      	movs	r3, #0
 800d454:	9300      	str	r3, [sp, #0]
 800d456:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d45a:	68f8      	ldr	r0, [r7, #12]
 800d45c:	f000 fdaa 	bl	800dfb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d460:	697a      	ldr	r2, [r7, #20]
 800d462:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d464:	68f8      	ldr	r0, [r7, #12]
 800d466:	f000 fbc3 	bl	800dbf0 <I2C_WaitOnTXISFlagUntilTimeout>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d001      	beq.n	800d474 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800d470:	2301      	movs	r3, #1
 800d472:	e07b      	b.n	800d56c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d478:	781a      	ldrb	r2, [r3, #0]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d484:	1c5a      	adds	r2, r3, #1
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d48e:	b29b      	uxth	r3, r3
 800d490:	3b01      	subs	r3, #1
 800d492:	b29a      	uxth	r2, r3
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d49c:	3b01      	subs	r3, #1
 800d49e:	b29a      	uxth	r2, r3
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4a8:	b29b      	uxth	r3, r3
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d034      	beq.n	800d518 <HAL_I2C_Mem_Write+0x1c8>
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d130      	bne.n	800d518 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	9300      	str	r3, [sp, #0]
 800d4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4bc:	2200      	movs	r2, #0
 800d4be:	2180      	movs	r1, #128	; 0x80
 800d4c0:	68f8      	ldr	r0, [r7, #12]
 800d4c2:	f000 fb55 	bl	800db70 <I2C_WaitOnFlagUntilTimeout>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d001      	beq.n	800d4d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	e04d      	b.n	800d56c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4d4:	b29b      	uxth	r3, r3
 800d4d6:	2bff      	cmp	r3, #255	; 0xff
 800d4d8:	d90e      	bls.n	800d4f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	22ff      	movs	r2, #255	; 0xff
 800d4de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4e4:	b2da      	uxtb	r2, r3
 800d4e6:	8979      	ldrh	r1, [r7, #10]
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	9300      	str	r3, [sp, #0]
 800d4ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d4f0:	68f8      	ldr	r0, [r7, #12]
 800d4f2:	f000 fd5f 	bl	800dfb4 <I2C_TransferConfig>
 800d4f6:	e00f      	b.n	800d518 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4fc:	b29a      	uxth	r2, r3
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d506:	b2da      	uxtb	r2, r3
 800d508:	8979      	ldrh	r1, [r7, #10]
 800d50a:	2300      	movs	r3, #0
 800d50c:	9300      	str	r3, [sp, #0]
 800d50e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d512:	68f8      	ldr	r0, [r7, #12]
 800d514:	f000 fd4e 	bl	800dfb4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d19e      	bne.n	800d460 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d522:	697a      	ldr	r2, [r7, #20]
 800d524:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d526:	68f8      	ldr	r0, [r7, #12]
 800d528:	f000 fba2 	bl	800dc70 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d52c:	4603      	mov	r3, r0
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d001      	beq.n	800d536 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800d532:	2301      	movs	r3, #1
 800d534:	e01a      	b.n	800d56c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	2220      	movs	r2, #32
 800d53c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	6859      	ldr	r1, [r3, #4]
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681a      	ldr	r2, [r3, #0]
 800d548:	4b0a      	ldr	r3, [pc, #40]	; (800d574 <HAL_I2C_Mem_Write+0x224>)
 800d54a:	400b      	ands	r3, r1
 800d54c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2220      	movs	r2, #32
 800d552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2200      	movs	r2, #0
 800d55a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2200      	movs	r2, #0
 800d562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d566:	2300      	movs	r3, #0
 800d568:	e000      	b.n	800d56c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800d56a:	2302      	movs	r3, #2
  }
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3718      	adds	r7, #24
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}
 800d574:	fe00e800 	.word	0xfe00e800

0800d578 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b088      	sub	sp, #32
 800d57c:	af02      	add	r7, sp, #8
 800d57e:	60f8      	str	r0, [r7, #12]
 800d580:	4608      	mov	r0, r1
 800d582:	4611      	mov	r1, r2
 800d584:	461a      	mov	r2, r3
 800d586:	4603      	mov	r3, r0
 800d588:	817b      	strh	r3, [r7, #10]
 800d58a:	460b      	mov	r3, r1
 800d58c:	813b      	strh	r3, [r7, #8]
 800d58e:	4613      	mov	r3, r2
 800d590:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	2b20      	cmp	r3, #32
 800d59c:	f040 80fd 	bne.w	800d79a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800d5a0:	6a3b      	ldr	r3, [r7, #32]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d002      	beq.n	800d5ac <HAL_I2C_Mem_Read+0x34>
 800d5a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d105      	bne.n	800d5b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d5b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	e0f1      	b.n	800d79c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d5be:	2b01      	cmp	r3, #1
 800d5c0:	d101      	bne.n	800d5c6 <HAL_I2C_Mem_Read+0x4e>
 800d5c2:	2302      	movs	r3, #2
 800d5c4:	e0ea      	b.n	800d79c <HAL_I2C_Mem_Read+0x224>
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2201      	movs	r2, #1
 800d5ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d5ce:	f7fd fbe5 	bl	800ad9c <HAL_GetTick>
 800d5d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	9300      	str	r3, [sp, #0]
 800d5d8:	2319      	movs	r3, #25
 800d5da:	2201      	movs	r2, #1
 800d5dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d5e0:	68f8      	ldr	r0, [r7, #12]
 800d5e2:	f000 fac5 	bl	800db70 <I2C_WaitOnFlagUntilTimeout>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d001      	beq.n	800d5f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	e0d5      	b.n	800d79c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	2222      	movs	r2, #34	; 0x22
 800d5f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2240      	movs	r2, #64	; 0x40
 800d5fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2200      	movs	r2, #0
 800d604:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	6a3a      	ldr	r2, [r7, #32]
 800d60a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d610:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	2200      	movs	r2, #0
 800d616:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d618:	88f8      	ldrh	r0, [r7, #6]
 800d61a:	893a      	ldrh	r2, [r7, #8]
 800d61c:	8979      	ldrh	r1, [r7, #10]
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	9301      	str	r3, [sp, #4]
 800d622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d624:	9300      	str	r3, [sp, #0]
 800d626:	4603      	mov	r3, r0
 800d628:	68f8      	ldr	r0, [r7, #12]
 800d62a:	f000 fa29 	bl	800da80 <I2C_RequestMemoryRead>
 800d62e:	4603      	mov	r3, r0
 800d630:	2b00      	cmp	r3, #0
 800d632:	d005      	beq.n	800d640 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2200      	movs	r2, #0
 800d638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800d63c:	2301      	movs	r3, #1
 800d63e:	e0ad      	b.n	800d79c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d644:	b29b      	uxth	r3, r3
 800d646:	2bff      	cmp	r3, #255	; 0xff
 800d648:	d90e      	bls.n	800d668 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	22ff      	movs	r2, #255	; 0xff
 800d64e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d654:	b2da      	uxtb	r2, r3
 800d656:	8979      	ldrh	r1, [r7, #10]
 800d658:	4b52      	ldr	r3, [pc, #328]	; (800d7a4 <HAL_I2C_Mem_Read+0x22c>)
 800d65a:	9300      	str	r3, [sp, #0]
 800d65c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d660:	68f8      	ldr	r0, [r7, #12]
 800d662:	f000 fca7 	bl	800dfb4 <I2C_TransferConfig>
 800d666:	e00f      	b.n	800d688 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d66c:	b29a      	uxth	r2, r3
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d676:	b2da      	uxtb	r2, r3
 800d678:	8979      	ldrh	r1, [r7, #10]
 800d67a:	4b4a      	ldr	r3, [pc, #296]	; (800d7a4 <HAL_I2C_Mem_Read+0x22c>)
 800d67c:	9300      	str	r3, [sp, #0]
 800d67e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d682:	68f8      	ldr	r0, [r7, #12]
 800d684:	f000 fc96 	bl	800dfb4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	9300      	str	r3, [sp, #0]
 800d68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d68e:	2200      	movs	r2, #0
 800d690:	2104      	movs	r1, #4
 800d692:	68f8      	ldr	r0, [r7, #12]
 800d694:	f000 fa6c 	bl	800db70 <I2C_WaitOnFlagUntilTimeout>
 800d698:	4603      	mov	r3, r0
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d001      	beq.n	800d6a2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e07c      	b.n	800d79c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ac:	b2d2      	uxtb	r2, r2
 800d6ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6b4:	1c5a      	adds	r2, r3, #1
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6be:	3b01      	subs	r3, #1
 800d6c0:	b29a      	uxth	r2, r3
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6ca:	b29b      	uxth	r3, r3
 800d6cc:	3b01      	subs	r3, #1
 800d6ce:	b29a      	uxth	r2, r3
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d034      	beq.n	800d748 <HAL_I2C_Mem_Read+0x1d0>
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d130      	bne.n	800d748 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	9300      	str	r3, [sp, #0]
 800d6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	2180      	movs	r1, #128	; 0x80
 800d6f0:	68f8      	ldr	r0, [r7, #12]
 800d6f2:	f000 fa3d 	bl	800db70 <I2C_WaitOnFlagUntilTimeout>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d001      	beq.n	800d700 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	e04d      	b.n	800d79c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d704:	b29b      	uxth	r3, r3
 800d706:	2bff      	cmp	r3, #255	; 0xff
 800d708:	d90e      	bls.n	800d728 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	22ff      	movs	r2, #255	; 0xff
 800d70e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d714:	b2da      	uxtb	r2, r3
 800d716:	8979      	ldrh	r1, [r7, #10]
 800d718:	2300      	movs	r3, #0
 800d71a:	9300      	str	r3, [sp, #0]
 800d71c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d720:	68f8      	ldr	r0, [r7, #12]
 800d722:	f000 fc47 	bl	800dfb4 <I2C_TransferConfig>
 800d726:	e00f      	b.n	800d748 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d72c:	b29a      	uxth	r2, r3
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d736:	b2da      	uxtb	r2, r3
 800d738:	8979      	ldrh	r1, [r7, #10]
 800d73a:	2300      	movs	r3, #0
 800d73c:	9300      	str	r3, [sp, #0]
 800d73e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d742:	68f8      	ldr	r0, [r7, #12]
 800d744:	f000 fc36 	bl	800dfb4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d19a      	bne.n	800d688 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d752:	697a      	ldr	r2, [r7, #20]
 800d754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d756:	68f8      	ldr	r0, [r7, #12]
 800d758:	f000 fa8a 	bl	800dc70 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d75c:	4603      	mov	r3, r0
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d001      	beq.n	800d766 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800d762:	2301      	movs	r3, #1
 800d764:	e01a      	b.n	800d79c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	2220      	movs	r2, #32
 800d76c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	6859      	ldr	r1, [r3, #4]
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	681a      	ldr	r2, [r3, #0]
 800d778:	4b0b      	ldr	r3, [pc, #44]	; (800d7a8 <HAL_I2C_Mem_Read+0x230>)
 800d77a:	400b      	ands	r3, r1
 800d77c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2220      	movs	r2, #32
 800d782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2200      	movs	r2, #0
 800d78a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2200      	movs	r2, #0
 800d792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d796:	2300      	movs	r3, #0
 800d798:	e000      	b.n	800d79c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800d79a:	2302      	movs	r3, #2
  }
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3718      	adds	r7, #24
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}
 800d7a4:	80002400 	.word	0x80002400
 800d7a8:	fe00e800 	.word	0xfe00e800

0800d7ac <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b08a      	sub	sp, #40	; 0x28
 800d7b0:	af02      	add	r7, sp, #8
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	607a      	str	r2, [r7, #4]
 800d7b6:	603b      	str	r3, [r7, #0]
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	2b20      	cmp	r3, #32
 800d7ca:	f040 80f1 	bne.w	800d9b0 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	699b      	ldr	r3, [r3, #24]
 800d7d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d7d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d7dc:	d101      	bne.n	800d7e2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800d7de:	2302      	movs	r3, #2
 800d7e0:	e0e7      	b.n	800d9b2 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	d101      	bne.n	800d7f0 <HAL_I2C_IsDeviceReady+0x44>
 800d7ec:	2302      	movs	r3, #2
 800d7ee:	e0e0      	b.n	800d9b2 <HAL_I2C_IsDeviceReady+0x206>
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	2224      	movs	r2, #36	; 0x24
 800d7fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	2200      	movs	r2, #0
 800d804:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	68db      	ldr	r3, [r3, #12]
 800d80a:	2b01      	cmp	r3, #1
 800d80c:	d107      	bne.n	800d81e <HAL_I2C_IsDeviceReady+0x72>
 800d80e:	897b      	ldrh	r3, [r7, #10]
 800d810:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d814:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d818:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d81c:	e004      	b.n	800d828 <HAL_I2C_IsDeviceReady+0x7c>
 800d81e:	897b      	ldrh	r3, [r7, #10]
 800d820:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d824:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800d828:	68fa      	ldr	r2, [r7, #12]
 800d82a:	6812      	ldr	r2, [r2, #0]
 800d82c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800d82e:	f7fd fab5 	bl	800ad9c <HAL_GetTick>
 800d832:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	699b      	ldr	r3, [r3, #24]
 800d83a:	f003 0320 	and.w	r3, r3, #32
 800d83e:	2b20      	cmp	r3, #32
 800d840:	bf0c      	ite	eq
 800d842:	2301      	moveq	r3, #1
 800d844:	2300      	movne	r3, #0
 800d846:	b2db      	uxtb	r3, r3
 800d848:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	699b      	ldr	r3, [r3, #24]
 800d850:	f003 0310 	and.w	r3, r3, #16
 800d854:	2b10      	cmp	r3, #16
 800d856:	bf0c      	ite	eq
 800d858:	2301      	moveq	r3, #1
 800d85a:	2300      	movne	r3, #0
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800d860:	e034      	b.n	800d8cc <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d868:	d01a      	beq.n	800d8a0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d86a:	f7fd fa97 	bl	800ad9c <HAL_GetTick>
 800d86e:	4602      	mov	r2, r0
 800d870:	69bb      	ldr	r3, [r7, #24]
 800d872:	1ad3      	subs	r3, r2, r3
 800d874:	683a      	ldr	r2, [r7, #0]
 800d876:	429a      	cmp	r2, r3
 800d878:	d302      	bcc.n	800d880 <HAL_I2C_IsDeviceReady+0xd4>
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d10f      	bne.n	800d8a0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2220      	movs	r2, #32
 800d884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d88c:	f043 0220 	orr.w	r2, r3, #32
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2200      	movs	r2, #0
 800d898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800d89c:	2301      	movs	r3, #1
 800d89e:	e088      	b.n	800d9b2 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	699b      	ldr	r3, [r3, #24]
 800d8a6:	f003 0320 	and.w	r3, r3, #32
 800d8aa:	2b20      	cmp	r3, #32
 800d8ac:	bf0c      	ite	eq
 800d8ae:	2301      	moveq	r3, #1
 800d8b0:	2300      	movne	r3, #0
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	699b      	ldr	r3, [r3, #24]
 800d8bc:	f003 0310 	and.w	r3, r3, #16
 800d8c0:	2b10      	cmp	r3, #16
 800d8c2:	bf0c      	ite	eq
 800d8c4:	2301      	moveq	r3, #1
 800d8c6:	2300      	movne	r3, #0
 800d8c8:	b2db      	uxtb	r3, r3
 800d8ca:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800d8cc:	7ffb      	ldrb	r3, [r7, #31]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d102      	bne.n	800d8d8 <HAL_I2C_IsDeviceReady+0x12c>
 800d8d2:	7fbb      	ldrb	r3, [r7, #30]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d0c4      	beq.n	800d862 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	699b      	ldr	r3, [r3, #24]
 800d8de:	f003 0310 	and.w	r3, r3, #16
 800d8e2:	2b10      	cmp	r3, #16
 800d8e4:	d01a      	beq.n	800d91c <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800d8e6:	69bb      	ldr	r3, [r7, #24]
 800d8e8:	9300      	str	r3, [sp, #0]
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	2120      	movs	r1, #32
 800d8f0:	68f8      	ldr	r0, [r7, #12]
 800d8f2:	f000 f93d 	bl	800db70 <I2C_WaitOnFlagUntilTimeout>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d001      	beq.n	800d900 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	e058      	b.n	800d9b2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	2220      	movs	r2, #32
 800d906:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	2220      	movs	r2, #32
 800d90c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2200      	movs	r2, #0
 800d914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800d918:	2300      	movs	r3, #0
 800d91a:	e04a      	b.n	800d9b2 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800d91c:	69bb      	ldr	r3, [r7, #24]
 800d91e:	9300      	str	r3, [sp, #0]
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	2200      	movs	r2, #0
 800d924:	2120      	movs	r1, #32
 800d926:	68f8      	ldr	r0, [r7, #12]
 800d928:	f000 f922 	bl	800db70 <I2C_WaitOnFlagUntilTimeout>
 800d92c:	4603      	mov	r3, r0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d001      	beq.n	800d936 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800d932:	2301      	movs	r3, #1
 800d934:	e03d      	b.n	800d9b2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	2210      	movs	r2, #16
 800d93c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	2220      	movs	r2, #32
 800d944:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800d946:	697b      	ldr	r3, [r7, #20]
 800d948:	687a      	ldr	r2, [r7, #4]
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d118      	bne.n	800d980 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	685a      	ldr	r2, [r3, #4]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d95c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800d95e:	69bb      	ldr	r3, [r7, #24]
 800d960:	9300      	str	r3, [sp, #0]
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	2200      	movs	r2, #0
 800d966:	2120      	movs	r1, #32
 800d968:	68f8      	ldr	r0, [r7, #12]
 800d96a:	f000 f901 	bl	800db70 <I2C_WaitOnFlagUntilTimeout>
 800d96e:	4603      	mov	r3, r0
 800d970:	2b00      	cmp	r3, #0
 800d972:	d001      	beq.n	800d978 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800d974:	2301      	movs	r3, #1
 800d976:	e01c      	b.n	800d9b2 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	2220      	movs	r2, #32
 800d97e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	3301      	adds	r3, #1
 800d984:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	687a      	ldr	r2, [r7, #4]
 800d98a:	429a      	cmp	r2, r3
 800d98c:	f63f af3b 	bhi.w	800d806 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	2220      	movs	r2, #32
 800d994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d99c:	f043 0220 	orr.w	r2, r3, #32
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	e000      	b.n	800d9b2 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800d9b0:	2302      	movs	r3, #2
  }
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3720      	adds	r7, #32
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}

0800d9ba <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800d9ba:	b480      	push	{r7}
 800d9bc:	b083      	sub	sp, #12
 800d9be:	af00      	add	r7, sp, #0
 800d9c0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d9c8:	b2db      	uxtb	r3, r3
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	370c      	adds	r7, #12
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d4:	4770      	bx	lr
	...

0800d9d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b086      	sub	sp, #24
 800d9dc:	af02      	add	r7, sp, #8
 800d9de:	60f8      	str	r0, [r7, #12]
 800d9e0:	4608      	mov	r0, r1
 800d9e2:	4611      	mov	r1, r2
 800d9e4:	461a      	mov	r2, r3
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	817b      	strh	r3, [r7, #10]
 800d9ea:	460b      	mov	r3, r1
 800d9ec:	813b      	strh	r3, [r7, #8]
 800d9ee:	4613      	mov	r3, r2
 800d9f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d9f2:	88fb      	ldrh	r3, [r7, #6]
 800d9f4:	b2da      	uxtb	r2, r3
 800d9f6:	8979      	ldrh	r1, [r7, #10]
 800d9f8:	4b20      	ldr	r3, [pc, #128]	; (800da7c <I2C_RequestMemoryWrite+0xa4>)
 800d9fa:	9300      	str	r3, [sp, #0]
 800d9fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800da00:	68f8      	ldr	r0, [r7, #12]
 800da02:	f000 fad7 	bl	800dfb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800da06:	69fa      	ldr	r2, [r7, #28]
 800da08:	69b9      	ldr	r1, [r7, #24]
 800da0a:	68f8      	ldr	r0, [r7, #12]
 800da0c:	f000 f8f0 	bl	800dbf0 <I2C_WaitOnTXISFlagUntilTimeout>
 800da10:	4603      	mov	r3, r0
 800da12:	2b00      	cmp	r3, #0
 800da14:	d001      	beq.n	800da1a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800da16:	2301      	movs	r3, #1
 800da18:	e02c      	b.n	800da74 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800da1a:	88fb      	ldrh	r3, [r7, #6]
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d105      	bne.n	800da2c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800da20:	893b      	ldrh	r3, [r7, #8]
 800da22:	b2da      	uxtb	r2, r3
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	629a      	str	r2, [r3, #40]	; 0x28
 800da2a:	e015      	b.n	800da58 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800da2c:	893b      	ldrh	r3, [r7, #8]
 800da2e:	0a1b      	lsrs	r3, r3, #8
 800da30:	b29b      	uxth	r3, r3
 800da32:	b2da      	uxtb	r2, r3
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800da3a:	69fa      	ldr	r2, [r7, #28]
 800da3c:	69b9      	ldr	r1, [r7, #24]
 800da3e:	68f8      	ldr	r0, [r7, #12]
 800da40:	f000 f8d6 	bl	800dbf0 <I2C_WaitOnTXISFlagUntilTimeout>
 800da44:	4603      	mov	r3, r0
 800da46:	2b00      	cmp	r3, #0
 800da48:	d001      	beq.n	800da4e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800da4a:	2301      	movs	r3, #1
 800da4c:	e012      	b.n	800da74 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800da4e:	893b      	ldrh	r3, [r7, #8]
 800da50:	b2da      	uxtb	r2, r3
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800da58:	69fb      	ldr	r3, [r7, #28]
 800da5a:	9300      	str	r3, [sp, #0]
 800da5c:	69bb      	ldr	r3, [r7, #24]
 800da5e:	2200      	movs	r2, #0
 800da60:	2180      	movs	r1, #128	; 0x80
 800da62:	68f8      	ldr	r0, [r7, #12]
 800da64:	f000 f884 	bl	800db70 <I2C_WaitOnFlagUntilTimeout>
 800da68:	4603      	mov	r3, r0
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d001      	beq.n	800da72 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800da6e:	2301      	movs	r3, #1
 800da70:	e000      	b.n	800da74 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800da72:	2300      	movs	r3, #0
}
 800da74:	4618      	mov	r0, r3
 800da76:	3710      	adds	r7, #16
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	80002000 	.word	0x80002000

0800da80 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b086      	sub	sp, #24
 800da84:	af02      	add	r7, sp, #8
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	4608      	mov	r0, r1
 800da8a:	4611      	mov	r1, r2
 800da8c:	461a      	mov	r2, r3
 800da8e:	4603      	mov	r3, r0
 800da90:	817b      	strh	r3, [r7, #10]
 800da92:	460b      	mov	r3, r1
 800da94:	813b      	strh	r3, [r7, #8]
 800da96:	4613      	mov	r3, r2
 800da98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800da9a:	88fb      	ldrh	r3, [r7, #6]
 800da9c:	b2da      	uxtb	r2, r3
 800da9e:	8979      	ldrh	r1, [r7, #10]
 800daa0:	4b20      	ldr	r3, [pc, #128]	; (800db24 <I2C_RequestMemoryRead+0xa4>)
 800daa2:	9300      	str	r3, [sp, #0]
 800daa4:	2300      	movs	r3, #0
 800daa6:	68f8      	ldr	r0, [r7, #12]
 800daa8:	f000 fa84 	bl	800dfb4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800daac:	69fa      	ldr	r2, [r7, #28]
 800daae:	69b9      	ldr	r1, [r7, #24]
 800dab0:	68f8      	ldr	r0, [r7, #12]
 800dab2:	f000 f89d 	bl	800dbf0 <I2C_WaitOnTXISFlagUntilTimeout>
 800dab6:	4603      	mov	r3, r0
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d001      	beq.n	800dac0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800dabc:	2301      	movs	r3, #1
 800dabe:	e02c      	b.n	800db1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800dac0:	88fb      	ldrh	r3, [r7, #6]
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d105      	bne.n	800dad2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800dac6:	893b      	ldrh	r3, [r7, #8]
 800dac8:	b2da      	uxtb	r2, r3
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	629a      	str	r2, [r3, #40]	; 0x28
 800dad0:	e015      	b.n	800dafe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800dad2:	893b      	ldrh	r3, [r7, #8]
 800dad4:	0a1b      	lsrs	r3, r3, #8
 800dad6:	b29b      	uxth	r3, r3
 800dad8:	b2da      	uxtb	r2, r3
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800dae0:	69fa      	ldr	r2, [r7, #28]
 800dae2:	69b9      	ldr	r1, [r7, #24]
 800dae4:	68f8      	ldr	r0, [r7, #12]
 800dae6:	f000 f883 	bl	800dbf0 <I2C_WaitOnTXISFlagUntilTimeout>
 800daea:	4603      	mov	r3, r0
 800daec:	2b00      	cmp	r3, #0
 800daee:	d001      	beq.n	800daf4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800daf0:	2301      	movs	r3, #1
 800daf2:	e012      	b.n	800db1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800daf4:	893b      	ldrh	r3, [r7, #8]
 800daf6:	b2da      	uxtb	r2, r3
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800dafe:	69fb      	ldr	r3, [r7, #28]
 800db00:	9300      	str	r3, [sp, #0]
 800db02:	69bb      	ldr	r3, [r7, #24]
 800db04:	2200      	movs	r2, #0
 800db06:	2140      	movs	r1, #64	; 0x40
 800db08:	68f8      	ldr	r0, [r7, #12]
 800db0a:	f000 f831 	bl	800db70 <I2C_WaitOnFlagUntilTimeout>
 800db0e:	4603      	mov	r3, r0
 800db10:	2b00      	cmp	r3, #0
 800db12:	d001      	beq.n	800db18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800db14:	2301      	movs	r3, #1
 800db16:	e000      	b.n	800db1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800db18:	2300      	movs	r3, #0
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3710      	adds	r7, #16
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop
 800db24:	80002000 	.word	0x80002000

0800db28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800db28:	b480      	push	{r7}
 800db2a:	b083      	sub	sp, #12
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	699b      	ldr	r3, [r3, #24]
 800db36:	f003 0302 	and.w	r3, r3, #2
 800db3a:	2b02      	cmp	r3, #2
 800db3c:	d103      	bne.n	800db46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	2200      	movs	r2, #0
 800db44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	699b      	ldr	r3, [r3, #24]
 800db4c:	f003 0301 	and.w	r3, r3, #1
 800db50:	2b01      	cmp	r3, #1
 800db52:	d007      	beq.n	800db64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	699a      	ldr	r2, [r3, #24]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f042 0201 	orr.w	r2, r2, #1
 800db62:	619a      	str	r2, [r3, #24]
  }
}
 800db64:	bf00      	nop
 800db66:	370c      	adds	r7, #12
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr

0800db70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b084      	sub	sp, #16
 800db74:	af00      	add	r7, sp, #0
 800db76:	60f8      	str	r0, [r7, #12]
 800db78:	60b9      	str	r1, [r7, #8]
 800db7a:	603b      	str	r3, [r7, #0]
 800db7c:	4613      	mov	r3, r2
 800db7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800db80:	e022      	b.n	800dbc8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db88:	d01e      	beq.n	800dbc8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db8a:	f7fd f907 	bl	800ad9c <HAL_GetTick>
 800db8e:	4602      	mov	r2, r0
 800db90:	69bb      	ldr	r3, [r7, #24]
 800db92:	1ad3      	subs	r3, r2, r3
 800db94:	683a      	ldr	r2, [r7, #0]
 800db96:	429a      	cmp	r2, r3
 800db98:	d302      	bcc.n	800dba0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d113      	bne.n	800dbc8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dba4:	f043 0220 	orr.w	r2, r3, #32
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	2220      	movs	r2, #32
 800dbb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	e00f      	b.n	800dbe8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	699a      	ldr	r2, [r3, #24]
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	4013      	ands	r3, r2
 800dbd2:	68ba      	ldr	r2, [r7, #8]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	bf0c      	ite	eq
 800dbd8:	2301      	moveq	r3, #1
 800dbda:	2300      	movne	r3, #0
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	461a      	mov	r2, r3
 800dbe0:	79fb      	ldrb	r3, [r7, #7]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d0cd      	beq.n	800db82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800dbe6:	2300      	movs	r3, #0
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3710      	adds	r7, #16
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}

0800dbf0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b084      	sub	sp, #16
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800dbfc:	e02c      	b.n	800dc58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800dbfe:	687a      	ldr	r2, [r7, #4]
 800dc00:	68b9      	ldr	r1, [r7, #8]
 800dc02:	68f8      	ldr	r0, [r7, #12]
 800dc04:	f000 f8ea 	bl	800dddc <I2C_IsErrorOccurred>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d001      	beq.n	800dc12 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800dc0e:	2301      	movs	r3, #1
 800dc10:	e02a      	b.n	800dc68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc18:	d01e      	beq.n	800dc58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc1a:	f7fd f8bf 	bl	800ad9c <HAL_GetTick>
 800dc1e:	4602      	mov	r2, r0
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	1ad3      	subs	r3, r2, r3
 800dc24:	68ba      	ldr	r2, [r7, #8]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d302      	bcc.n	800dc30 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d113      	bne.n	800dc58 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc34:	f043 0220 	orr.w	r2, r3, #32
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	2220      	movs	r2, #32
 800dc40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2200      	movs	r2, #0
 800dc48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800dc54:	2301      	movs	r3, #1
 800dc56:	e007      	b.n	800dc68 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	699b      	ldr	r3, [r3, #24]
 800dc5e:	f003 0302 	and.w	r3, r3, #2
 800dc62:	2b02      	cmp	r3, #2
 800dc64:	d1cb      	bne.n	800dbfe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800dc66:	2300      	movs	r3, #0
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3710      	adds	r7, #16
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b084      	sub	sp, #16
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	60f8      	str	r0, [r7, #12]
 800dc78:	60b9      	str	r1, [r7, #8]
 800dc7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800dc7c:	e028      	b.n	800dcd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800dc7e:	687a      	ldr	r2, [r7, #4]
 800dc80:	68b9      	ldr	r1, [r7, #8]
 800dc82:	68f8      	ldr	r0, [r7, #12]
 800dc84:	f000 f8aa 	bl	800dddc <I2C_IsErrorOccurred>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d001      	beq.n	800dc92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800dc8e:	2301      	movs	r3, #1
 800dc90:	e026      	b.n	800dce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc92:	f7fd f883 	bl	800ad9c <HAL_GetTick>
 800dc96:	4602      	mov	r2, r0
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	1ad3      	subs	r3, r2, r3
 800dc9c:	68ba      	ldr	r2, [r7, #8]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d302      	bcc.n	800dca8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d113      	bne.n	800dcd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcac:	f043 0220 	orr.w	r2, r3, #32
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2220      	movs	r2, #32
 800dcb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800dccc:	2301      	movs	r3, #1
 800dcce:	e007      	b.n	800dce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	699b      	ldr	r3, [r3, #24]
 800dcd6:	f003 0320 	and.w	r3, r3, #32
 800dcda:	2b20      	cmp	r3, #32
 800dcdc:	d1cf      	bne.n	800dc7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800dcde:	2300      	movs	r3, #0
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3710      	adds	r7, #16
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}

0800dce8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	60f8      	str	r0, [r7, #12]
 800dcf0:	60b9      	str	r1, [r7, #8]
 800dcf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800dcf4:	e064      	b.n	800ddc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	68b9      	ldr	r1, [r7, #8]
 800dcfa:	68f8      	ldr	r0, [r7, #12]
 800dcfc:	f000 f86e 	bl	800dddc <I2C_IsErrorOccurred>
 800dd00:	4603      	mov	r3, r0
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d001      	beq.n	800dd0a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800dd06:	2301      	movs	r3, #1
 800dd08:	e062      	b.n	800ddd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	699b      	ldr	r3, [r3, #24]
 800dd10:	f003 0320 	and.w	r3, r3, #32
 800dd14:	2b20      	cmp	r3, #32
 800dd16:	d138      	bne.n	800dd8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	699b      	ldr	r3, [r3, #24]
 800dd1e:	f003 0304 	and.w	r3, r3, #4
 800dd22:	2b04      	cmp	r3, #4
 800dd24:	d105      	bne.n	800dd32 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d001      	beq.n	800dd32 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	e04e      	b.n	800ddd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	699b      	ldr	r3, [r3, #24]
 800dd38:	f003 0310 	and.w	r3, r3, #16
 800dd3c:	2b10      	cmp	r3, #16
 800dd3e:	d107      	bne.n	800dd50 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	2210      	movs	r2, #16
 800dd46:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2204      	movs	r2, #4
 800dd4c:	645a      	str	r2, [r3, #68]	; 0x44
 800dd4e:	e002      	b.n	800dd56 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	2200      	movs	r2, #0
 800dd54:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	2220      	movs	r2, #32
 800dd5c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	6859      	ldr	r1, [r3, #4]
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681a      	ldr	r2, [r3, #0]
 800dd68:	4b1b      	ldr	r3, [pc, #108]	; (800ddd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800dd6a:	400b      	ands	r3, r1
 800dd6c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	2220      	movs	r2, #32
 800dd72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	2200      	movs	r2, #0
 800dd7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	2200      	movs	r2, #0
 800dd82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800dd86:	2301      	movs	r3, #1
 800dd88:	e022      	b.n	800ddd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd8a:	f7fd f807 	bl	800ad9c <HAL_GetTick>
 800dd8e:	4602      	mov	r2, r0
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	1ad3      	subs	r3, r2, r3
 800dd94:	68ba      	ldr	r2, [r7, #8]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d302      	bcc.n	800dda0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d10f      	bne.n	800ddc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dda4:	f043 0220 	orr.w	r2, r3, #32
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	2220      	movs	r2, #32
 800ddb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	e007      	b.n	800ddd0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	699b      	ldr	r3, [r3, #24]
 800ddc6:	f003 0304 	and.w	r3, r3, #4
 800ddca:	2b04      	cmp	r3, #4
 800ddcc:	d193      	bne.n	800dcf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ddce:	2300      	movs	r3, #0
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3710      	adds	r7, #16
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	fe00e800 	.word	0xfe00e800

0800dddc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b08a      	sub	sp, #40	; 0x28
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	60f8      	str	r0, [r7, #12]
 800dde4:	60b9      	str	r1, [r7, #8]
 800dde6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dde8:	2300      	movs	r3, #0
 800ddea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	699b      	ldr	r3, [r3, #24]
 800ddf4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ddfe:	69bb      	ldr	r3, [r7, #24]
 800de00:	f003 0310 	and.w	r3, r3, #16
 800de04:	2b00      	cmp	r3, #0
 800de06:	d075      	beq.n	800def4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2210      	movs	r2, #16
 800de0e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800de10:	e056      	b.n	800dec0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de18:	d052      	beq.n	800dec0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800de1a:	f7fc ffbf 	bl	800ad9c <HAL_GetTick>
 800de1e:	4602      	mov	r2, r0
 800de20:	69fb      	ldr	r3, [r7, #28]
 800de22:	1ad3      	subs	r3, r2, r3
 800de24:	68ba      	ldr	r2, [r7, #8]
 800de26:	429a      	cmp	r2, r3
 800de28:	d302      	bcc.n	800de30 <I2C_IsErrorOccurred+0x54>
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d147      	bne.n	800dec0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	685b      	ldr	r3, [r3, #4]
 800de36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800de3a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800de42:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	699b      	ldr	r3, [r3, #24]
 800de4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de52:	d12e      	bne.n	800deb2 <I2C_IsErrorOccurred+0xd6>
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de5a:	d02a      	beq.n	800deb2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800de5c:	7cfb      	ldrb	r3, [r7, #19]
 800de5e:	2b20      	cmp	r3, #32
 800de60:	d027      	beq.n	800deb2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	685a      	ldr	r2, [r3, #4]
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800de70:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800de72:	f7fc ff93 	bl	800ad9c <HAL_GetTick>
 800de76:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800de78:	e01b      	b.n	800deb2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800de7a:	f7fc ff8f 	bl	800ad9c <HAL_GetTick>
 800de7e:	4602      	mov	r2, r0
 800de80:	69fb      	ldr	r3, [r7, #28]
 800de82:	1ad3      	subs	r3, r2, r3
 800de84:	2b19      	cmp	r3, #25
 800de86:	d914      	bls.n	800deb2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de8c:	f043 0220 	orr.w	r2, r3, #32
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	2220      	movs	r2, #32
 800de98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	2200      	movs	r2, #0
 800dea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2200      	movs	r2, #0
 800dea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800deac:	2301      	movs	r3, #1
 800deae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	699b      	ldr	r3, [r3, #24]
 800deb8:	f003 0320 	and.w	r3, r3, #32
 800debc:	2b20      	cmp	r3, #32
 800debe:	d1dc      	bne.n	800de7a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	699b      	ldr	r3, [r3, #24]
 800dec6:	f003 0320 	and.w	r3, r3, #32
 800deca:	2b20      	cmp	r3, #32
 800decc:	d003      	beq.n	800ded6 <I2C_IsErrorOccurred+0xfa>
 800dece:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d09d      	beq.n	800de12 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ded6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d103      	bne.n	800dee6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	2220      	movs	r2, #32
 800dee4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800dee6:	6a3b      	ldr	r3, [r7, #32]
 800dee8:	f043 0304 	orr.w	r3, r3, #4
 800deec:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800deee:	2301      	movs	r3, #1
 800def0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	699b      	ldr	r3, [r3, #24]
 800defa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800defc:	69bb      	ldr	r3, [r7, #24]
 800defe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df02:	2b00      	cmp	r3, #0
 800df04:	d00b      	beq.n	800df1e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800df06:	6a3b      	ldr	r3, [r7, #32]
 800df08:	f043 0301 	orr.w	r3, r3, #1
 800df0c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	f44f 7280 	mov.w	r2, #256	; 0x100
 800df16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800df18:	2301      	movs	r3, #1
 800df1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800df1e:	69bb      	ldr	r3, [r7, #24]
 800df20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800df24:	2b00      	cmp	r3, #0
 800df26:	d00b      	beq.n	800df40 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800df28:	6a3b      	ldr	r3, [r7, #32]
 800df2a:	f043 0308 	orr.w	r3, r3, #8
 800df2e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800df38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800df3a:	2301      	movs	r3, #1
 800df3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800df40:	69bb      	ldr	r3, [r7, #24]
 800df42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800df46:	2b00      	cmp	r3, #0
 800df48:	d00b      	beq.n	800df62 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800df4a:	6a3b      	ldr	r3, [r7, #32]
 800df4c:	f043 0302 	orr.w	r3, r3, #2
 800df50:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df5a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800df5c:	2301      	movs	r3, #1
 800df5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800df62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df66:	2b00      	cmp	r3, #0
 800df68:	d01c      	beq.n	800dfa4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800df6a:	68f8      	ldr	r0, [r7, #12]
 800df6c:	f7ff fddc 	bl	800db28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	6859      	ldr	r1, [r3, #4]
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	681a      	ldr	r2, [r3, #0]
 800df7a:	4b0d      	ldr	r3, [pc, #52]	; (800dfb0 <I2C_IsErrorOccurred+0x1d4>)
 800df7c:	400b      	ands	r3, r1
 800df7e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800df84:	6a3b      	ldr	r3, [r7, #32]
 800df86:	431a      	orrs	r2, r3
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2220      	movs	r2, #32
 800df90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	2200      	movs	r2, #0
 800df98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2200      	movs	r2, #0
 800dfa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800dfa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3728      	adds	r7, #40	; 0x28
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}
 800dfb0:	fe00e800 	.word	0xfe00e800

0800dfb4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b087      	sub	sp, #28
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	60f8      	str	r0, [r7, #12]
 800dfbc:	607b      	str	r3, [r7, #4]
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	817b      	strh	r3, [r7, #10]
 800dfc2:	4613      	mov	r3, r2
 800dfc4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800dfc6:	897b      	ldrh	r3, [r7, #10]
 800dfc8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800dfcc:	7a7b      	ldrb	r3, [r7, #9]
 800dfce:	041b      	lsls	r3, r3, #16
 800dfd0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800dfd4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800dfda:	6a3b      	ldr	r3, [r7, #32]
 800dfdc:	4313      	orrs	r3, r2
 800dfde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dfe2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	685a      	ldr	r2, [r3, #4]
 800dfea:	6a3b      	ldr	r3, [r7, #32]
 800dfec:	0d5b      	lsrs	r3, r3, #21
 800dfee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800dff2:	4b08      	ldr	r3, [pc, #32]	; (800e014 <I2C_TransferConfig+0x60>)
 800dff4:	430b      	orrs	r3, r1
 800dff6:	43db      	mvns	r3, r3
 800dff8:	ea02 0103 	and.w	r1, r2, r3
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	697a      	ldr	r2, [r7, #20]
 800e002:	430a      	orrs	r2, r1
 800e004:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800e006:	bf00      	nop
 800e008:	371c      	adds	r7, #28
 800e00a:	46bd      	mov	sp, r7
 800e00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e010:	4770      	bx	lr
 800e012:	bf00      	nop
 800e014:	03ff63ff 	.word	0x03ff63ff

0800e018 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e018:	b480      	push	{r7}
 800e01a:	b083      	sub	sp, #12
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e028:	b2db      	uxtb	r3, r3
 800e02a:	2b20      	cmp	r3, #32
 800e02c:	d138      	bne.n	800e0a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e034:	2b01      	cmp	r3, #1
 800e036:	d101      	bne.n	800e03c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e038:	2302      	movs	r3, #2
 800e03a:	e032      	b.n	800e0a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2201      	movs	r2, #1
 800e040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2224      	movs	r2, #36	; 0x24
 800e048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	681a      	ldr	r2, [r3, #0]
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f022 0201 	bic.w	r2, r2, #1
 800e05a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e06a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	6819      	ldr	r1, [r3, #0]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	683a      	ldr	r2, [r7, #0]
 800e078:	430a      	orrs	r2, r1
 800e07a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	681a      	ldr	r2, [r3, #0]
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f042 0201 	orr.w	r2, r2, #1
 800e08a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2220      	movs	r2, #32
 800e090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2200      	movs	r2, #0
 800e098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e09c:	2300      	movs	r3, #0
 800e09e:	e000      	b.n	800e0a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e0a0:	2302      	movs	r3, #2
  }
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	370c      	adds	r7, #12
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ac:	4770      	bx	lr

0800e0ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e0ae:	b480      	push	{r7}
 800e0b0:	b085      	sub	sp, #20
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	6078      	str	r0, [r7, #4]
 800e0b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	2b20      	cmp	r3, #32
 800e0c2:	d139      	bne.n	800e138 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e0ca:	2b01      	cmp	r3, #1
 800e0cc:	d101      	bne.n	800e0d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e0ce:	2302      	movs	r3, #2
 800e0d0:	e033      	b.n	800e13a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2224      	movs	r2, #36	; 0x24
 800e0de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	681a      	ldr	r2, [r3, #0]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f022 0201 	bic.w	r2, r2, #1
 800e0f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e100:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	021b      	lsls	r3, r3, #8
 800e106:	68fa      	ldr	r2, [r7, #12]
 800e108:	4313      	orrs	r3, r2
 800e10a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	68fa      	ldr	r2, [r7, #12]
 800e112:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f042 0201 	orr.w	r2, r2, #1
 800e122:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2220      	movs	r2, #32
 800e128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2200      	movs	r2, #0
 800e130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e134:	2300      	movs	r3, #0
 800e136:	e000      	b.n	800e13a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e138:	2302      	movs	r3, #2
  }
}
 800e13a:	4618      	mov	r0, r3
 800e13c:	3714      	adds	r7, #20
 800e13e:	46bd      	mov	sp, r7
 800e140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e144:	4770      	bx	lr

0800e146 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800e146:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e148:	b08f      	sub	sp, #60	; 0x3c
 800e14a:	af0a      	add	r7, sp, #40	; 0x28
 800e14c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d101      	bne.n	800e158 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800e154:	2301      	movs	r3, #1
 800e156:	e116      	b.n	800e386 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800e164:	b2db      	uxtb	r3, r3
 800e166:	2b00      	cmp	r3, #0
 800e168:	d106      	bne.n	800e178 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2200      	movs	r2, #0
 800e16e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f00a fa74 	bl	8018660 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2203      	movs	r2, #3
 800e17c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d102      	bne.n	800e192 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2200      	movs	r2, #0
 800e190:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	4618      	mov	r0, r3
 800e198:	f007 f983 	bl	80154a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	603b      	str	r3, [r7, #0]
 800e1a2:	687e      	ldr	r6, [r7, #4]
 800e1a4:	466d      	mov	r5, sp
 800e1a6:	f106 0410 	add.w	r4, r6, #16
 800e1aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e1ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e1ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e1b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e1b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e1b6:	e885 0003 	stmia.w	r5, {r0, r1}
 800e1ba:	1d33      	adds	r3, r6, #4
 800e1bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e1be:	6838      	ldr	r0, [r7, #0]
 800e1c0:	f007 f896 	bl	80152f0 <USB_CoreInit>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d005      	beq.n	800e1d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2202      	movs	r2, #2
 800e1ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	e0d7      	b.n	800e386 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	2100      	movs	r1, #0
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f007 f971 	bl	80154c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	73fb      	strb	r3, [r7, #15]
 800e1e6:	e04a      	b.n	800e27e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800e1e8:	7bfa      	ldrb	r2, [r7, #15]
 800e1ea:	6879      	ldr	r1, [r7, #4]
 800e1ec:	4613      	mov	r3, r2
 800e1ee:	00db      	lsls	r3, r3, #3
 800e1f0:	4413      	add	r3, r2
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	440b      	add	r3, r1
 800e1f6:	333d      	adds	r3, #61	; 0x3d
 800e1f8:	2201      	movs	r2, #1
 800e1fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800e1fc:	7bfa      	ldrb	r2, [r7, #15]
 800e1fe:	6879      	ldr	r1, [r7, #4]
 800e200:	4613      	mov	r3, r2
 800e202:	00db      	lsls	r3, r3, #3
 800e204:	4413      	add	r3, r2
 800e206:	009b      	lsls	r3, r3, #2
 800e208:	440b      	add	r3, r1
 800e20a:	333c      	adds	r3, #60	; 0x3c
 800e20c:	7bfa      	ldrb	r2, [r7, #15]
 800e20e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800e210:	7bfa      	ldrb	r2, [r7, #15]
 800e212:	7bfb      	ldrb	r3, [r7, #15]
 800e214:	b298      	uxth	r0, r3
 800e216:	6879      	ldr	r1, [r7, #4]
 800e218:	4613      	mov	r3, r2
 800e21a:	00db      	lsls	r3, r3, #3
 800e21c:	4413      	add	r3, r2
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	440b      	add	r3, r1
 800e222:	3344      	adds	r3, #68	; 0x44
 800e224:	4602      	mov	r2, r0
 800e226:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800e228:	7bfa      	ldrb	r2, [r7, #15]
 800e22a:	6879      	ldr	r1, [r7, #4]
 800e22c:	4613      	mov	r3, r2
 800e22e:	00db      	lsls	r3, r3, #3
 800e230:	4413      	add	r3, r2
 800e232:	009b      	lsls	r3, r3, #2
 800e234:	440b      	add	r3, r1
 800e236:	3340      	adds	r3, #64	; 0x40
 800e238:	2200      	movs	r2, #0
 800e23a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800e23c:	7bfa      	ldrb	r2, [r7, #15]
 800e23e:	6879      	ldr	r1, [r7, #4]
 800e240:	4613      	mov	r3, r2
 800e242:	00db      	lsls	r3, r3, #3
 800e244:	4413      	add	r3, r2
 800e246:	009b      	lsls	r3, r3, #2
 800e248:	440b      	add	r3, r1
 800e24a:	3348      	adds	r3, #72	; 0x48
 800e24c:	2200      	movs	r2, #0
 800e24e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800e250:	7bfa      	ldrb	r2, [r7, #15]
 800e252:	6879      	ldr	r1, [r7, #4]
 800e254:	4613      	mov	r3, r2
 800e256:	00db      	lsls	r3, r3, #3
 800e258:	4413      	add	r3, r2
 800e25a:	009b      	lsls	r3, r3, #2
 800e25c:	440b      	add	r3, r1
 800e25e:	334c      	adds	r3, #76	; 0x4c
 800e260:	2200      	movs	r2, #0
 800e262:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800e264:	7bfa      	ldrb	r2, [r7, #15]
 800e266:	6879      	ldr	r1, [r7, #4]
 800e268:	4613      	mov	r3, r2
 800e26a:	00db      	lsls	r3, r3, #3
 800e26c:	4413      	add	r3, r2
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	440b      	add	r3, r1
 800e272:	3354      	adds	r3, #84	; 0x54
 800e274:	2200      	movs	r2, #0
 800e276:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e278:	7bfb      	ldrb	r3, [r7, #15]
 800e27a:	3301      	adds	r3, #1
 800e27c:	73fb      	strb	r3, [r7, #15]
 800e27e:	7bfa      	ldrb	r2, [r7, #15]
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	429a      	cmp	r2, r3
 800e286:	d3af      	bcc.n	800e1e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e288:	2300      	movs	r3, #0
 800e28a:	73fb      	strb	r3, [r7, #15]
 800e28c:	e044      	b.n	800e318 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800e28e:	7bfa      	ldrb	r2, [r7, #15]
 800e290:	6879      	ldr	r1, [r7, #4]
 800e292:	4613      	mov	r3, r2
 800e294:	00db      	lsls	r3, r3, #3
 800e296:	4413      	add	r3, r2
 800e298:	009b      	lsls	r3, r3, #2
 800e29a:	440b      	add	r3, r1
 800e29c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800e2a4:	7bfa      	ldrb	r2, [r7, #15]
 800e2a6:	6879      	ldr	r1, [r7, #4]
 800e2a8:	4613      	mov	r3, r2
 800e2aa:	00db      	lsls	r3, r3, #3
 800e2ac:	4413      	add	r3, r2
 800e2ae:	009b      	lsls	r3, r3, #2
 800e2b0:	440b      	add	r3, r1
 800e2b2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800e2b6:	7bfa      	ldrb	r2, [r7, #15]
 800e2b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800e2ba:	7bfa      	ldrb	r2, [r7, #15]
 800e2bc:	6879      	ldr	r1, [r7, #4]
 800e2be:	4613      	mov	r3, r2
 800e2c0:	00db      	lsls	r3, r3, #3
 800e2c2:	4413      	add	r3, r2
 800e2c4:	009b      	lsls	r3, r3, #2
 800e2c6:	440b      	add	r3, r1
 800e2c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800e2d0:	7bfa      	ldrb	r2, [r7, #15]
 800e2d2:	6879      	ldr	r1, [r7, #4]
 800e2d4:	4613      	mov	r3, r2
 800e2d6:	00db      	lsls	r3, r3, #3
 800e2d8:	4413      	add	r3, r2
 800e2da:	009b      	lsls	r3, r3, #2
 800e2dc:	440b      	add	r3, r1
 800e2de:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800e2e6:	7bfa      	ldrb	r2, [r7, #15]
 800e2e8:	6879      	ldr	r1, [r7, #4]
 800e2ea:	4613      	mov	r3, r2
 800e2ec:	00db      	lsls	r3, r3, #3
 800e2ee:	4413      	add	r3, r2
 800e2f0:	009b      	lsls	r3, r3, #2
 800e2f2:	440b      	add	r3, r1
 800e2f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800e2fc:	7bfa      	ldrb	r2, [r7, #15]
 800e2fe:	6879      	ldr	r1, [r7, #4]
 800e300:	4613      	mov	r3, r2
 800e302:	00db      	lsls	r3, r3, #3
 800e304:	4413      	add	r3, r2
 800e306:	009b      	lsls	r3, r3, #2
 800e308:	440b      	add	r3, r1
 800e30a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800e30e:	2200      	movs	r2, #0
 800e310:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e312:	7bfb      	ldrb	r3, [r7, #15]
 800e314:	3301      	adds	r3, #1
 800e316:	73fb      	strb	r3, [r7, #15]
 800e318:	7bfa      	ldrb	r2, [r7, #15]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	429a      	cmp	r2, r3
 800e320:	d3b5      	bcc.n	800e28e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	603b      	str	r3, [r7, #0]
 800e328:	687e      	ldr	r6, [r7, #4]
 800e32a:	466d      	mov	r5, sp
 800e32c:	f106 0410 	add.w	r4, r6, #16
 800e330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e338:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e33c:	e885 0003 	stmia.w	r5, {r0, r1}
 800e340:	1d33      	adds	r3, r6, #4
 800e342:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e344:	6838      	ldr	r0, [r7, #0]
 800e346:	f007 f909 	bl	801555c <USB_DevInit>
 800e34a:	4603      	mov	r3, r0
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d005      	beq.n	800e35c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2202      	movs	r2, #2
 800e354:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800e358:	2301      	movs	r3, #1
 800e35a:	e014      	b.n	800e386 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2200      	movs	r2, #0
 800e360:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2201      	movs	r2, #1
 800e368:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e370:	2b01      	cmp	r3, #1
 800e372:	d102      	bne.n	800e37a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f001 f881 	bl	800f47c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	4618      	mov	r0, r3
 800e380:	f008 f991 	bl	80166a6 <USB_DevDisconnect>

  return HAL_OK;
 800e384:	2300      	movs	r3, #0
}
 800e386:	4618      	mov	r0, r3
 800e388:	3714      	adds	r7, #20
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e38e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800e38e:	b580      	push	{r7, lr}
 800e390:	b084      	sub	sp, #16
 800e392:	af00      	add	r7, sp, #0
 800e394:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800e3a2:	2b01      	cmp	r3, #1
 800e3a4:	d101      	bne.n	800e3aa <HAL_PCD_Start+0x1c>
 800e3a6:	2302      	movs	r3, #2
 800e3a8:	e01c      	b.n	800e3e4 <HAL_PCD_Start+0x56>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2201      	movs	r2, #1
 800e3ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3b6:	2b01      	cmp	r3, #1
 800e3b8:	d105      	bne.n	800e3c6 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f007 f858 	bl	8015480 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f008 f945 	bl	8016664 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2200      	movs	r2, #0
 800e3de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800e3e2:	2300      	movs	r3, #0
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3710      	adds	r7, #16
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}

0800e3ec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800e3ec:	b590      	push	{r4, r7, lr}
 800e3ee:	b08d      	sub	sp, #52	; 0x34
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3fa:	6a3b      	ldr	r3, [r7, #32]
 800e3fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	4618      	mov	r0, r3
 800e404:	f008 fa03 	bl	801680e <USB_GetMode>
 800e408:	4603      	mov	r3, r0
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	f040 847e 	bne.w	800ed0c <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	4618      	mov	r0, r3
 800e416:	f008 f967 	bl	80166e8 <USB_ReadInterrupts>
 800e41a:	4603      	mov	r3, r0
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	f000 8474 	beq.w	800ed0a <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800e422:	69fb      	ldr	r3, [r7, #28]
 800e424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e428:	689b      	ldr	r3, [r3, #8]
 800e42a:	0a1b      	lsrs	r3, r3, #8
 800e42c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	4618      	mov	r0, r3
 800e43c:	f008 f954 	bl	80166e8 <USB_ReadInterrupts>
 800e440:	4603      	mov	r3, r0
 800e442:	f003 0302 	and.w	r3, r3, #2
 800e446:	2b02      	cmp	r3, #2
 800e448:	d107      	bne.n	800e45a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	695a      	ldr	r2, [r3, #20]
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f002 0202 	and.w	r2, r2, #2
 800e458:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	4618      	mov	r0, r3
 800e460:	f008 f942 	bl	80166e8 <USB_ReadInterrupts>
 800e464:	4603      	mov	r3, r0
 800e466:	f003 0310 	and.w	r3, r3, #16
 800e46a:	2b10      	cmp	r3, #16
 800e46c:	d161      	bne.n	800e532 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	699a      	ldr	r2, [r3, #24]
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	f022 0210 	bic.w	r2, r2, #16
 800e47c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800e47e:	6a3b      	ldr	r3, [r7, #32]
 800e480:	6a1b      	ldr	r3, [r3, #32]
 800e482:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800e484:	69bb      	ldr	r3, [r7, #24]
 800e486:	f003 020f 	and.w	r2, r3, #15
 800e48a:	4613      	mov	r3, r2
 800e48c:	00db      	lsls	r3, r3, #3
 800e48e:	4413      	add	r3, r2
 800e490:	009b      	lsls	r3, r3, #2
 800e492:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e496:	687a      	ldr	r2, [r7, #4]
 800e498:	4413      	add	r3, r2
 800e49a:	3304      	adds	r3, #4
 800e49c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800e49e:	69bb      	ldr	r3, [r7, #24]
 800e4a0:	0c5b      	lsrs	r3, r3, #17
 800e4a2:	f003 030f 	and.w	r3, r3, #15
 800e4a6:	2b02      	cmp	r3, #2
 800e4a8:	d124      	bne.n	800e4f4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800e4aa:	69ba      	ldr	r2, [r7, #24]
 800e4ac:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800e4b0:	4013      	ands	r3, r2
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d035      	beq.n	800e522 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800e4ba:	69bb      	ldr	r3, [r7, #24]
 800e4bc:	091b      	lsrs	r3, r3, #4
 800e4be:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800e4c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	461a      	mov	r2, r3
 800e4c8:	6a38      	ldr	r0, [r7, #32]
 800e4ca:	f007 ff79 	bl	80163c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	691a      	ldr	r2, [r3, #16]
 800e4d2:	69bb      	ldr	r3, [r7, #24]
 800e4d4:	091b      	lsrs	r3, r3, #4
 800e4d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e4da:	441a      	add	r2, r3
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	6a1a      	ldr	r2, [r3, #32]
 800e4e4:	69bb      	ldr	r3, [r7, #24]
 800e4e6:	091b      	lsrs	r3, r3, #4
 800e4e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e4ec:	441a      	add	r2, r3
 800e4ee:	697b      	ldr	r3, [r7, #20]
 800e4f0:	621a      	str	r2, [r3, #32]
 800e4f2:	e016      	b.n	800e522 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800e4f4:	69bb      	ldr	r3, [r7, #24]
 800e4f6:	0c5b      	lsrs	r3, r3, #17
 800e4f8:	f003 030f 	and.w	r3, r3, #15
 800e4fc:	2b06      	cmp	r3, #6
 800e4fe:	d110      	bne.n	800e522 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e506:	2208      	movs	r2, #8
 800e508:	4619      	mov	r1, r3
 800e50a:	6a38      	ldr	r0, [r7, #32]
 800e50c:	f007 ff58 	bl	80163c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	6a1a      	ldr	r2, [r3, #32]
 800e514:	69bb      	ldr	r3, [r7, #24]
 800e516:	091b      	lsrs	r3, r3, #4
 800e518:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e51c:	441a      	add	r2, r3
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	699a      	ldr	r2, [r3, #24]
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	f042 0210 	orr.w	r2, r2, #16
 800e530:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	4618      	mov	r0, r3
 800e538:	f008 f8d6 	bl	80166e8 <USB_ReadInterrupts>
 800e53c:	4603      	mov	r3, r0
 800e53e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e542:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e546:	f040 80a7 	bne.w	800e698 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800e54a:	2300      	movs	r3, #0
 800e54c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	4618      	mov	r0, r3
 800e554:	f008 f8db 	bl	801670e <USB_ReadDevAllOutEpInterrupt>
 800e558:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800e55a:	e099      	b.n	800e690 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800e55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e55e:	f003 0301 	and.w	r3, r3, #1
 800e562:	2b00      	cmp	r3, #0
 800e564:	f000 808e 	beq.w	800e684 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e56e:	b2d2      	uxtb	r2, r2
 800e570:	4611      	mov	r1, r2
 800e572:	4618      	mov	r0, r3
 800e574:	f008 f8ff 	bl	8016776 <USB_ReadDevOutEPInterrupt>
 800e578:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	f003 0301 	and.w	r3, r3, #1
 800e580:	2b00      	cmp	r3, #0
 800e582:	d00c      	beq.n	800e59e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800e584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e586:	015a      	lsls	r2, r3, #5
 800e588:	69fb      	ldr	r3, [r7, #28]
 800e58a:	4413      	add	r3, r2
 800e58c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e590:	461a      	mov	r2, r3
 800e592:	2301      	movs	r3, #1
 800e594:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800e596:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f000 fe95 	bl	800f2c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	f003 0308 	and.w	r3, r3, #8
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d00c      	beq.n	800e5c2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800e5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5aa:	015a      	lsls	r2, r3, #5
 800e5ac:	69fb      	ldr	r3, [r7, #28]
 800e5ae:	4413      	add	r3, r2
 800e5b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5b4:	461a      	mov	r2, r3
 800e5b6:	2308      	movs	r3, #8
 800e5b8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800e5ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f000 fed1 	bl	800f364 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	f003 0310 	and.w	r3, r3, #16
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d008      	beq.n	800e5de <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800e5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ce:	015a      	lsls	r2, r3, #5
 800e5d0:	69fb      	ldr	r3, [r7, #28]
 800e5d2:	4413      	add	r3, r2
 800e5d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5d8:	461a      	mov	r2, r3
 800e5da:	2310      	movs	r3, #16
 800e5dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800e5de:	693b      	ldr	r3, [r7, #16]
 800e5e0:	f003 0302 	and.w	r3, r3, #2
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d030      	beq.n	800e64a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800e5e8:	6a3b      	ldr	r3, [r7, #32]
 800e5ea:	695b      	ldr	r3, [r3, #20]
 800e5ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5f0:	2b80      	cmp	r3, #128	; 0x80
 800e5f2:	d109      	bne.n	800e608 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800e5f4:	69fb      	ldr	r3, [r7, #28]
 800e5f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5fa:	685b      	ldr	r3, [r3, #4]
 800e5fc:	69fa      	ldr	r2, [r7, #28]
 800e5fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e602:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e606:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800e608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e60a:	4613      	mov	r3, r2
 800e60c:	00db      	lsls	r3, r3, #3
 800e60e:	4413      	add	r3, r2
 800e610:	009b      	lsls	r3, r3, #2
 800e612:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800e616:	687a      	ldr	r2, [r7, #4]
 800e618:	4413      	add	r3, r2
 800e61a:	3304      	adds	r3, #4
 800e61c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800e61e:	697b      	ldr	r3, [r7, #20]
 800e620:	78db      	ldrb	r3, [r3, #3]
 800e622:	2b01      	cmp	r3, #1
 800e624:	d108      	bne.n	800e638 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	2200      	movs	r2, #0
 800e62a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800e62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62e:	b2db      	uxtb	r3, r3
 800e630:	4619      	mov	r1, r3
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	f00a f93c 	bl	80188b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800e638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63a:	015a      	lsls	r2, r3, #5
 800e63c:	69fb      	ldr	r3, [r7, #28]
 800e63e:	4413      	add	r3, r2
 800e640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e644:	461a      	mov	r2, r3
 800e646:	2302      	movs	r3, #2
 800e648:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	f003 0320 	and.w	r3, r3, #32
 800e650:	2b00      	cmp	r3, #0
 800e652:	d008      	beq.n	800e666 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800e654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e656:	015a      	lsls	r2, r3, #5
 800e658:	69fb      	ldr	r3, [r7, #28]
 800e65a:	4413      	add	r3, r2
 800e65c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e660:	461a      	mov	r2, r3
 800e662:	2320      	movs	r3, #32
 800e664:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d009      	beq.n	800e684 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800e670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e672:	015a      	lsls	r2, r3, #5
 800e674:	69fb      	ldr	r3, [r7, #28]
 800e676:	4413      	add	r3, r2
 800e678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e67c:	461a      	mov	r2, r3
 800e67e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e682:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800e684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e686:	3301      	adds	r3, #1
 800e688:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800e68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e68c:	085b      	lsrs	r3, r3, #1
 800e68e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800e690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e692:	2b00      	cmp	r3, #0
 800e694:	f47f af62 	bne.w	800e55c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	4618      	mov	r0, r3
 800e69e:	f008 f823 	bl	80166e8 <USB_ReadInterrupts>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e6a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e6ac:	f040 80a4 	bne.w	800e7f8 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f008 f844 	bl	8016742 <USB_ReadDevAllInEpInterrupt>
 800e6ba:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800e6c0:	e096      	b.n	800e7f0 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800e6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c4:	f003 0301 	and.w	r3, r3, #1
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	f000 808b 	beq.w	800e7e4 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6d4:	b2d2      	uxtb	r2, r2
 800e6d6:	4611      	mov	r1, r2
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f008 f86a 	bl	80167b2 <USB_ReadDevInEPInterrupt>
 800e6de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	f003 0301 	and.w	r3, r3, #1
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d020      	beq.n	800e72c <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800e6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ec:	f003 030f 	and.w	r3, r3, #15
 800e6f0:	2201      	movs	r2, #1
 800e6f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e6f6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800e6f8:	69fb      	ldr	r3, [r7, #28]
 800e6fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	43db      	mvns	r3, r3
 800e704:	69f9      	ldr	r1, [r7, #28]
 800e706:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e70a:	4013      	ands	r3, r2
 800e70c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800e70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e710:	015a      	lsls	r2, r3, #5
 800e712:	69fb      	ldr	r3, [r7, #28]
 800e714:	4413      	add	r3, r2
 800e716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e71a:	461a      	mov	r2, r3
 800e71c:	2301      	movs	r3, #1
 800e71e:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800e720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e722:	b2db      	uxtb	r3, r3
 800e724:	4619      	mov	r1, r3
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f00a f82d 	bl	8018786 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	f003 0308 	and.w	r3, r3, #8
 800e732:	2b00      	cmp	r3, #0
 800e734:	d008      	beq.n	800e748 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800e736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e738:	015a      	lsls	r2, r3, #5
 800e73a:	69fb      	ldr	r3, [r7, #28]
 800e73c:	4413      	add	r3, r2
 800e73e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e742:	461a      	mov	r2, r3
 800e744:	2308      	movs	r3, #8
 800e746:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	f003 0310 	and.w	r3, r3, #16
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d008      	beq.n	800e764 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800e752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e754:	015a      	lsls	r2, r3, #5
 800e756:	69fb      	ldr	r3, [r7, #28]
 800e758:	4413      	add	r3, r2
 800e75a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e75e:	461a      	mov	r2, r3
 800e760:	2310      	movs	r3, #16
 800e762:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d008      	beq.n	800e780 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800e76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e770:	015a      	lsls	r2, r3, #5
 800e772:	69fb      	ldr	r3, [r7, #28]
 800e774:	4413      	add	r3, r2
 800e776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e77a:	461a      	mov	r2, r3
 800e77c:	2340      	movs	r3, #64	; 0x40
 800e77e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	f003 0302 	and.w	r3, r3, #2
 800e786:	2b00      	cmp	r3, #0
 800e788:	d023      	beq.n	800e7d2 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800e78a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e78c:	6a38      	ldr	r0, [r7, #32]
 800e78e:	f007 f831 	bl	80157f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800e792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e794:	4613      	mov	r3, r2
 800e796:	00db      	lsls	r3, r3, #3
 800e798:	4413      	add	r3, r2
 800e79a:	009b      	lsls	r3, r3, #2
 800e79c:	3338      	adds	r3, #56	; 0x38
 800e79e:	687a      	ldr	r2, [r7, #4]
 800e7a0:	4413      	add	r3, r2
 800e7a2:	3304      	adds	r3, #4
 800e7a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	78db      	ldrb	r3, [r3, #3]
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d108      	bne.n	800e7c0 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800e7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b6:	b2db      	uxtb	r3, r3
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f00a f88a 	bl	80188d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800e7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c2:	015a      	lsls	r2, r3, #5
 800e7c4:	69fb      	ldr	r3, [r7, #28]
 800e7c6:	4413      	add	r3, r2
 800e7c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e7cc:	461a      	mov	r2, r3
 800e7ce:	2302      	movs	r3, #2
 800e7d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800e7d2:	693b      	ldr	r3, [r7, #16]
 800e7d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d003      	beq.n	800e7e4 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800e7dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f000 fcea 	bl	800f1b8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800e7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e6:	3301      	adds	r3, #1
 800e7e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800e7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ec:	085b      	lsrs	r3, r3, #1
 800e7ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800e7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	f47f af65 	bne.w	800e6c2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f007 ff73 	bl	80166e8 <USB_ReadInterrupts>
 800e802:	4603      	mov	r3, r0
 800e804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e80c:	d122      	bne.n	800e854 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e80e:	69fb      	ldr	r3, [r7, #28]
 800e810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e814:	685b      	ldr	r3, [r3, #4]
 800e816:	69fa      	ldr	r2, [r7, #28]
 800e818:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e81c:	f023 0301 	bic.w	r3, r3, #1
 800e820:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800e828:	2b01      	cmp	r3, #1
 800e82a:	d108      	bne.n	800e83e <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2200      	movs	r2, #0
 800e830:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800e834:	2100      	movs	r1, #0
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f00a fabe 	bl	8018db8 <HAL_PCDEx_LPM_Callback>
 800e83c:	e002      	b.n	800e844 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	f00a f80e 	bl	8018860 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	695a      	ldr	r2, [r3, #20]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800e852:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4618      	mov	r0, r3
 800e85a:	f007 ff45 	bl	80166e8 <USB_ReadInterrupts>
 800e85e:	4603      	mov	r3, r0
 800e860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e868:	d112      	bne.n	800e890 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800e86a:	69fb      	ldr	r3, [r7, #28]
 800e86c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e870:	689b      	ldr	r3, [r3, #8]
 800e872:	f003 0301 	and.w	r3, r3, #1
 800e876:	2b01      	cmp	r3, #1
 800e878:	d102      	bne.n	800e880 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f009 ffca 	bl	8018814 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	695a      	ldr	r2, [r3, #20]
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800e88e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4618      	mov	r0, r3
 800e896:	f007 ff27 	bl	80166e8 <USB_ReadInterrupts>
 800e89a:	4603      	mov	r3, r0
 800e89c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e8a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e8a4:	d121      	bne.n	800e8ea <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	695a      	ldr	r2, [r3, #20]
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800e8b4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d111      	bne.n	800e8e4 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2201      	movs	r2, #1
 800e8c4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8ce:	089b      	lsrs	r3, r3, #2
 800e8d0:	f003 020f 	and.w	r2, r3, #15
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800e8da:	2101      	movs	r1, #1
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f00a fa6b 	bl	8018db8 <HAL_PCDEx_LPM_Callback>
 800e8e2:	e002      	b.n	800e8ea <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f009 ff95 	bl	8018814 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f007 fefa 	bl	80166e8 <USB_ReadInterrupts>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e8fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8fe:	f040 80b5 	bne.w	800ea6c <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800e902:	69fb      	ldr	r3, [r7, #28]
 800e904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e908:	685b      	ldr	r3, [r3, #4]
 800e90a:	69fa      	ldr	r2, [r7, #28]
 800e90c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e910:	f023 0301 	bic.w	r3, r3, #1
 800e914:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	2110      	movs	r1, #16
 800e91c:	4618      	mov	r0, r3
 800e91e:	f006 ff69 	bl	80157f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e922:	2300      	movs	r3, #0
 800e924:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e926:	e046      	b.n	800e9b6 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800e928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e92a:	015a      	lsls	r2, r3, #5
 800e92c:	69fb      	ldr	r3, [r7, #28]
 800e92e:	4413      	add	r3, r2
 800e930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e934:	461a      	mov	r2, r3
 800e936:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e93a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e93e:	015a      	lsls	r2, r3, #5
 800e940:	69fb      	ldr	r3, [r7, #28]
 800e942:	4413      	add	r3, r2
 800e944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e94c:	0151      	lsls	r1, r2, #5
 800e94e:	69fa      	ldr	r2, [r7, #28]
 800e950:	440a      	add	r2, r1
 800e952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e956:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e95a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800e95c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95e:	015a      	lsls	r2, r3, #5
 800e960:	69fb      	ldr	r3, [r7, #28]
 800e962:	4413      	add	r3, r2
 800e964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e968:	461a      	mov	r2, r3
 800e96a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e96e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e972:	015a      	lsls	r2, r3, #5
 800e974:	69fb      	ldr	r3, [r7, #28]
 800e976:	4413      	add	r3, r2
 800e978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e980:	0151      	lsls	r1, r2, #5
 800e982:	69fa      	ldr	r2, [r7, #28]
 800e984:	440a      	add	r2, r1
 800e986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e98a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e98e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e992:	015a      	lsls	r2, r3, #5
 800e994:	69fb      	ldr	r3, [r7, #28]
 800e996:	4413      	add	r3, r2
 800e998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9a0:	0151      	lsls	r1, r2, #5
 800e9a2:	69fa      	ldr	r2, [r7, #28]
 800e9a4:	440a      	add	r2, r1
 800e9a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e9aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e9ae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	685b      	ldr	r3, [r3, #4]
 800e9ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d3b3      	bcc.n	800e928 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800e9c0:	69fb      	ldr	r3, [r7, #28]
 800e9c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9c6:	69db      	ldr	r3, [r3, #28]
 800e9c8:	69fa      	ldr	r2, [r7, #28]
 800e9ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9ce:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800e9d2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d016      	beq.n	800ea0a <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800e9dc:	69fb      	ldr	r3, [r7, #28]
 800e9de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9e6:	69fa      	ldr	r2, [r7, #28]
 800e9e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e9ec:	f043 030b 	orr.w	r3, r3, #11
 800e9f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800e9f4:	69fb      	ldr	r3, [r7, #28]
 800e9f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e9fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9fc:	69fa      	ldr	r2, [r7, #28]
 800e9fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea02:	f043 030b 	orr.w	r3, r3, #11
 800ea06:	6453      	str	r3, [r2, #68]	; 0x44
 800ea08:	e015      	b.n	800ea36 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800ea0a:	69fb      	ldr	r3, [r7, #28]
 800ea0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea10:	695b      	ldr	r3, [r3, #20]
 800ea12:	69fa      	ldr	r2, [r7, #28]
 800ea14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ea1c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800ea20:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800ea22:	69fb      	ldr	r3, [r7, #28]
 800ea24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea28:	691b      	ldr	r3, [r3, #16]
 800ea2a:	69fa      	ldr	r2, [r7, #28]
 800ea2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea30:	f043 030b 	orr.w	r3, r3, #11
 800ea34:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800ea36:	69fb      	ldr	r3, [r7, #28]
 800ea38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	69fa      	ldr	r2, [r7, #28]
 800ea40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea44:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ea48:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681a      	ldr	r2, [r3, #0]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ea54:	4619      	mov	r1, r3
 800ea56:	4610      	mov	r0, r2
 800ea58:	f007 ff0a 	bl	8016870 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	695a      	ldr	r2, [r3, #20]
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800ea6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	4618      	mov	r0, r3
 800ea72:	f007 fe39 	bl	80166e8 <USB_ReadInterrupts>
 800ea76:	4603      	mov	r3, r0
 800ea78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ea7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea80:	d124      	bne.n	800eacc <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	4618      	mov	r0, r3
 800ea88:	f007 fecf 	bl	801682a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4618      	mov	r0, r3
 800ea92:	f006 ff2c 	bl	80158ee <USB_GetDevSpeed>
 800ea96:	4603      	mov	r3, r0
 800ea98:	461a      	mov	r2, r3
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681c      	ldr	r4, [r3, #0]
 800eaa2:	f001 fc87 	bl	80103b4 <HAL_RCC_GetHCLKFreq>
 800eaa6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800eaac:	b2db      	uxtb	r3, r3
 800eaae:	461a      	mov	r2, r3
 800eab0:	4620      	mov	r0, r4
 800eab2:	f006 fc49 	bl	8015348 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f009 fe8d 	bl	80187d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	695a      	ldr	r2, [r3, #20]
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800eaca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	4618      	mov	r0, r3
 800ead2:	f007 fe09 	bl	80166e8 <USB_ReadInterrupts>
 800ead6:	4603      	mov	r3, r0
 800ead8:	f003 0308 	and.w	r3, r3, #8
 800eadc:	2b08      	cmp	r3, #8
 800eade:	d10a      	bne.n	800eaf6 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f009 fe6a 	bl	80187ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	695a      	ldr	r2, [r3, #20]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f002 0208 	and.w	r2, r2, #8
 800eaf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	4618      	mov	r0, r3
 800eafc:	f007 fdf4 	bl	80166e8 <USB_ReadInterrupts>
 800eb00:	4603      	mov	r3, r0
 800eb02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb06:	2b80      	cmp	r3, #128	; 0x80
 800eb08:	d122      	bne.n	800eb50 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800eb0a:	6a3b      	ldr	r3, [r7, #32]
 800eb0c:	699b      	ldr	r3, [r3, #24]
 800eb0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800eb12:	6a3b      	ldr	r3, [r7, #32]
 800eb14:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800eb16:	2301      	movs	r3, #1
 800eb18:	627b      	str	r3, [r7, #36]	; 0x24
 800eb1a:	e014      	b.n	800eb46 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800eb1c:	6879      	ldr	r1, [r7, #4]
 800eb1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb20:	4613      	mov	r3, r2
 800eb22:	00db      	lsls	r3, r3, #3
 800eb24:	4413      	add	r3, r2
 800eb26:	009b      	lsls	r3, r3, #2
 800eb28:	440b      	add	r3, r1
 800eb2a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800eb2e:	781b      	ldrb	r3, [r3, #0]
 800eb30:	2b01      	cmp	r3, #1
 800eb32:	d105      	bne.n	800eb40 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800eb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb36:	b2db      	uxtb	r3, r3
 800eb38:	4619      	mov	r1, r3
 800eb3a:	6878      	ldr	r0, [r7, #4]
 800eb3c:	f000 fb0b 	bl	800f156 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800eb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb42:	3301      	adds	r3, #1
 800eb44:	627b      	str	r3, [r7, #36]	; 0x24
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	685b      	ldr	r3, [r3, #4]
 800eb4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	d3e5      	bcc.n	800eb1c <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	4618      	mov	r0, r3
 800eb56:	f007 fdc7 	bl	80166e8 <USB_ReadInterrupts>
 800eb5a:	4603      	mov	r3, r0
 800eb5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eb60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb64:	d13b      	bne.n	800ebde <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800eb66:	2301      	movs	r3, #1
 800eb68:	627b      	str	r3, [r7, #36]	; 0x24
 800eb6a:	e02b      	b.n	800ebc4 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800eb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb6e:	015a      	lsls	r2, r3, #5
 800eb70:	69fb      	ldr	r3, [r7, #28]
 800eb72:	4413      	add	r3, r2
 800eb74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800eb7c:	6879      	ldr	r1, [r7, #4]
 800eb7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb80:	4613      	mov	r3, r2
 800eb82:	00db      	lsls	r3, r3, #3
 800eb84:	4413      	add	r3, r2
 800eb86:	009b      	lsls	r3, r3, #2
 800eb88:	440b      	add	r3, r1
 800eb8a:	3340      	adds	r3, #64	; 0x40
 800eb8c:	781b      	ldrb	r3, [r3, #0]
 800eb8e:	2b01      	cmp	r3, #1
 800eb90:	d115      	bne.n	800ebbe <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800eb92:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	da12      	bge.n	800ebbe <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800eb98:	6879      	ldr	r1, [r7, #4]
 800eb9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb9c:	4613      	mov	r3, r2
 800eb9e:	00db      	lsls	r3, r3, #3
 800eba0:	4413      	add	r3, r2
 800eba2:	009b      	lsls	r3, r3, #2
 800eba4:	440b      	add	r3, r1
 800eba6:	333f      	adds	r3, #63	; 0x3f
 800eba8:	2201      	movs	r2, #1
 800ebaa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800ebac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebae:	b2db      	uxtb	r3, r3
 800ebb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ebb4:	b2db      	uxtb	r3, r3
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f000 facc 	bl	800f156 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ebbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	627b      	str	r3, [r7, #36]	; 0x24
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	685b      	ldr	r3, [r3, #4]
 800ebc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d3ce      	bcc.n	800eb6c <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	695a      	ldr	r2, [r3, #20]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800ebdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f007 fd80 	bl	80166e8 <USB_ReadInterrupts>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ebee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ebf2:	d155      	bne.n	800eca0 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	627b      	str	r3, [r7, #36]	; 0x24
 800ebf8:	e045      	b.n	800ec86 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800ebfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebfc:	015a      	lsls	r2, r3, #5
 800ebfe:	69fb      	ldr	r3, [r7, #28]
 800ec00:	4413      	add	r3, r2
 800ec02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ec0a:	6879      	ldr	r1, [r7, #4]
 800ec0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec0e:	4613      	mov	r3, r2
 800ec10:	00db      	lsls	r3, r3, #3
 800ec12:	4413      	add	r3, r2
 800ec14:	009b      	lsls	r3, r3, #2
 800ec16:	440b      	add	r3, r1
 800ec18:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ec1c:	781b      	ldrb	r3, [r3, #0]
 800ec1e:	2b01      	cmp	r3, #1
 800ec20:	d12e      	bne.n	800ec80 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ec22:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	da2b      	bge.n	800ec80 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800ec28:	69bb      	ldr	r3, [r7, #24]
 800ec2a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800ec34:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d121      	bne.n	800ec80 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800ec3c:	6879      	ldr	r1, [r7, #4]
 800ec3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec40:	4613      	mov	r3, r2
 800ec42:	00db      	lsls	r3, r3, #3
 800ec44:	4413      	add	r3, r2
 800ec46:	009b      	lsls	r3, r3, #2
 800ec48:	440b      	add	r3, r1
 800ec4a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800ec4e:	2201      	movs	r2, #1
 800ec50:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800ec52:	6a3b      	ldr	r3, [r7, #32]
 800ec54:	699b      	ldr	r3, [r3, #24]
 800ec56:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ec5a:	6a3b      	ldr	r3, [r7, #32]
 800ec5c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800ec5e:	6a3b      	ldr	r3, [r7, #32]
 800ec60:	695b      	ldr	r3, [r3, #20]
 800ec62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d10a      	bne.n	800ec80 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800ec6a:	69fb      	ldr	r3, [r7, #28]
 800ec6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec70:	685b      	ldr	r3, [r3, #4]
 800ec72:	69fa      	ldr	r2, [r7, #28]
 800ec74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ec78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ec7c:	6053      	str	r3, [r2, #4]
            break;
 800ec7e:	e007      	b.n	800ec90 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ec80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec82:	3301      	adds	r3, #1
 800ec84:	627b      	str	r3, [r7, #36]	; 0x24
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	d3b4      	bcc.n	800ebfa <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	695a      	ldr	r2, [r3, #20]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800ec9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	4618      	mov	r0, r3
 800eca6:	f007 fd1f 	bl	80166e8 <USB_ReadInterrupts>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ecb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecb4:	d10a      	bne.n	800eccc <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f009 fe1e 	bl	80188f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	695a      	ldr	r2, [r3, #20]
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800ecca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f007 fd09 	bl	80166e8 <USB_ReadInterrupts>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	f003 0304 	and.w	r3, r3, #4
 800ecdc:	2b04      	cmp	r3, #4
 800ecde:	d115      	bne.n	800ed0c <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	685b      	ldr	r3, [r3, #4]
 800ece6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ece8:	69bb      	ldr	r3, [r7, #24]
 800ecea:	f003 0304 	and.w	r3, r3, #4
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d002      	beq.n	800ecf8 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f009 fe0e 	bl	8018914 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	6859      	ldr	r1, [r3, #4]
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	69ba      	ldr	r2, [r7, #24]
 800ed04:	430a      	orrs	r2, r1
 800ed06:	605a      	str	r2, [r3, #4]
 800ed08:	e000      	b.n	800ed0c <HAL_PCD_IRQHandler+0x920>
      return;
 800ed0a:	bf00      	nop
    }
  }
}
 800ed0c:	3734      	adds	r7, #52	; 0x34
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd90      	pop	{r4, r7, pc}

0800ed12 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ed12:	b580      	push	{r7, lr}
 800ed14:	b082      	sub	sp, #8
 800ed16:	af00      	add	r7, sp, #0
 800ed18:	6078      	str	r0, [r7, #4]
 800ed1a:	460b      	mov	r3, r1
 800ed1c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ed24:	2b01      	cmp	r3, #1
 800ed26:	d101      	bne.n	800ed2c <HAL_PCD_SetAddress+0x1a>
 800ed28:	2302      	movs	r3, #2
 800ed2a:	e013      	b.n	800ed54 <HAL_PCD_SetAddress+0x42>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2201      	movs	r2, #1
 800ed30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	78fa      	ldrb	r2, [r7, #3]
 800ed38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	78fa      	ldrb	r2, [r7, #3]
 800ed42:	4611      	mov	r1, r2
 800ed44:	4618      	mov	r0, r3
 800ed46:	f007 fc67 	bl	8016618 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800ed52:	2300      	movs	r3, #0
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	3708      	adds	r7, #8
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b084      	sub	sp, #16
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	4608      	mov	r0, r1
 800ed66:	4611      	mov	r1, r2
 800ed68:	461a      	mov	r2, r3
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	70fb      	strb	r3, [r7, #3]
 800ed6e:	460b      	mov	r3, r1
 800ed70:	803b      	strh	r3, [r7, #0]
 800ed72:	4613      	mov	r3, r2
 800ed74:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800ed76:	2300      	movs	r3, #0
 800ed78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ed7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	da0f      	bge.n	800eda2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ed82:	78fb      	ldrb	r3, [r7, #3]
 800ed84:	f003 020f 	and.w	r2, r3, #15
 800ed88:	4613      	mov	r3, r2
 800ed8a:	00db      	lsls	r3, r3, #3
 800ed8c:	4413      	add	r3, r2
 800ed8e:	009b      	lsls	r3, r3, #2
 800ed90:	3338      	adds	r3, #56	; 0x38
 800ed92:	687a      	ldr	r2, [r7, #4]
 800ed94:	4413      	add	r3, r2
 800ed96:	3304      	adds	r3, #4
 800ed98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	2201      	movs	r2, #1
 800ed9e:	705a      	strb	r2, [r3, #1]
 800eda0:	e00f      	b.n	800edc2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800eda2:	78fb      	ldrb	r3, [r7, #3]
 800eda4:	f003 020f 	and.w	r2, r3, #15
 800eda8:	4613      	mov	r3, r2
 800edaa:	00db      	lsls	r3, r3, #3
 800edac:	4413      	add	r3, r2
 800edae:	009b      	lsls	r3, r3, #2
 800edb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800edb4:	687a      	ldr	r2, [r7, #4]
 800edb6:	4413      	add	r3, r2
 800edb8:	3304      	adds	r3, #4
 800edba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2200      	movs	r2, #0
 800edc0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800edc2:	78fb      	ldrb	r3, [r7, #3]
 800edc4:	f003 030f 	and.w	r3, r3, #15
 800edc8:	b2da      	uxtb	r2, r3
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800edce:	883a      	ldrh	r2, [r7, #0]
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	78ba      	ldrb	r2, [r7, #2]
 800edd8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	785b      	ldrb	r3, [r3, #1]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d004      	beq.n	800edec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	781b      	ldrb	r3, [r3, #0]
 800ede6:	b29a      	uxth	r2, r3
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800edec:	78bb      	ldrb	r3, [r7, #2]
 800edee:	2b02      	cmp	r3, #2
 800edf0:	d102      	bne.n	800edf8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2200      	movs	r2, #0
 800edf6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800edfe:	2b01      	cmp	r3, #1
 800ee00:	d101      	bne.n	800ee06 <HAL_PCD_EP_Open+0xaa>
 800ee02:	2302      	movs	r3, #2
 800ee04:	e00e      	b.n	800ee24 <HAL_PCD_EP_Open+0xc8>
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2201      	movs	r2, #1
 800ee0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	68f9      	ldr	r1, [r7, #12]
 800ee14:	4618      	mov	r0, r3
 800ee16:	f006 fd89 	bl	801592c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800ee22:	7afb      	ldrb	r3, [r7, #11]
}
 800ee24:	4618      	mov	r0, r3
 800ee26:	3710      	adds	r7, #16
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bd80      	pop	{r7, pc}

0800ee2c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	460b      	mov	r3, r1
 800ee36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ee38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	da0f      	bge.n	800ee60 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ee40:	78fb      	ldrb	r3, [r7, #3]
 800ee42:	f003 020f 	and.w	r2, r3, #15
 800ee46:	4613      	mov	r3, r2
 800ee48:	00db      	lsls	r3, r3, #3
 800ee4a:	4413      	add	r3, r2
 800ee4c:	009b      	lsls	r3, r3, #2
 800ee4e:	3338      	adds	r3, #56	; 0x38
 800ee50:	687a      	ldr	r2, [r7, #4]
 800ee52:	4413      	add	r3, r2
 800ee54:	3304      	adds	r3, #4
 800ee56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	705a      	strb	r2, [r3, #1]
 800ee5e:	e00f      	b.n	800ee80 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ee60:	78fb      	ldrb	r3, [r7, #3]
 800ee62:	f003 020f 	and.w	r2, r3, #15
 800ee66:	4613      	mov	r3, r2
 800ee68:	00db      	lsls	r3, r3, #3
 800ee6a:	4413      	add	r3, r2
 800ee6c:	009b      	lsls	r3, r3, #2
 800ee6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ee72:	687a      	ldr	r2, [r7, #4]
 800ee74:	4413      	add	r3, r2
 800ee76:	3304      	adds	r3, #4
 800ee78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800ee80:	78fb      	ldrb	r3, [r7, #3]
 800ee82:	f003 030f 	and.w	r3, r3, #15
 800ee86:	b2da      	uxtb	r2, r3
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ee92:	2b01      	cmp	r3, #1
 800ee94:	d101      	bne.n	800ee9a <HAL_PCD_EP_Close+0x6e>
 800ee96:	2302      	movs	r3, #2
 800ee98:	e00e      	b.n	800eeb8 <HAL_PCD_EP_Close+0x8c>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2201      	movs	r2, #1
 800ee9e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	68f9      	ldr	r1, [r7, #12]
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f006 fdc7 	bl	8015a3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800eeb6:	2300      	movs	r3, #0
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3710      	adds	r7, #16
 800eebc:	46bd      	mov	sp, r7
 800eebe:	bd80      	pop	{r7, pc}

0800eec0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b086      	sub	sp, #24
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	60f8      	str	r0, [r7, #12]
 800eec8:	607a      	str	r2, [r7, #4]
 800eeca:	603b      	str	r3, [r7, #0]
 800eecc:	460b      	mov	r3, r1
 800eece:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800eed0:	7afb      	ldrb	r3, [r7, #11]
 800eed2:	f003 020f 	and.w	r2, r3, #15
 800eed6:	4613      	mov	r3, r2
 800eed8:	00db      	lsls	r3, r3, #3
 800eeda:	4413      	add	r3, r2
 800eedc:	009b      	lsls	r3, r3, #2
 800eede:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800eee2:	68fa      	ldr	r2, [r7, #12]
 800eee4:	4413      	add	r3, r2
 800eee6:	3304      	adds	r3, #4
 800eee8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	687a      	ldr	r2, [r7, #4]
 800eeee:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800eef0:	697b      	ldr	r3, [r7, #20]
 800eef2:	683a      	ldr	r2, [r7, #0]
 800eef4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	2200      	movs	r2, #0
 800eefa:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	2200      	movs	r2, #0
 800ef00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ef02:	7afb      	ldrb	r3, [r7, #11]
 800ef04:	f003 030f 	and.w	r3, r3, #15
 800ef08:	b2da      	uxtb	r2, r3
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ef0e:	7afb      	ldrb	r3, [r7, #11]
 800ef10:	f003 030f 	and.w	r3, r3, #15
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d106      	bne.n	800ef26 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	6979      	ldr	r1, [r7, #20]
 800ef1e:	4618      	mov	r0, r3
 800ef20:	f007 f848 	bl	8015fb4 <USB_EP0StartXfer>
 800ef24:	e005      	b.n	800ef32 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	6979      	ldr	r1, [r7, #20]
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f006 fe61 	bl	8015bf4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ef32:	2300      	movs	r3, #0
}
 800ef34:	4618      	mov	r0, r3
 800ef36:	3718      	adds	r7, #24
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ef3c:	b480      	push	{r7}
 800ef3e:	b083      	sub	sp, #12
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	460b      	mov	r3, r1
 800ef46:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ef48:	78fb      	ldrb	r3, [r7, #3]
 800ef4a:	f003 020f 	and.w	r2, r3, #15
 800ef4e:	6879      	ldr	r1, [r7, #4]
 800ef50:	4613      	mov	r3, r2
 800ef52:	00db      	lsls	r3, r3, #3
 800ef54:	4413      	add	r3, r2
 800ef56:	009b      	lsls	r3, r3, #2
 800ef58:	440b      	add	r3, r1
 800ef5a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800ef5e:	681b      	ldr	r3, [r3, #0]
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	370c      	adds	r7, #12
 800ef64:	46bd      	mov	sp, r7
 800ef66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6a:	4770      	bx	lr

0800ef6c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b086      	sub	sp, #24
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	60f8      	str	r0, [r7, #12]
 800ef74:	607a      	str	r2, [r7, #4]
 800ef76:	603b      	str	r3, [r7, #0]
 800ef78:	460b      	mov	r3, r1
 800ef7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ef7c:	7afb      	ldrb	r3, [r7, #11]
 800ef7e:	f003 020f 	and.w	r2, r3, #15
 800ef82:	4613      	mov	r3, r2
 800ef84:	00db      	lsls	r3, r3, #3
 800ef86:	4413      	add	r3, r2
 800ef88:	009b      	lsls	r3, r3, #2
 800ef8a:	3338      	adds	r3, #56	; 0x38
 800ef8c:	68fa      	ldr	r2, [r7, #12]
 800ef8e:	4413      	add	r3, r2
 800ef90:	3304      	adds	r3, #4
 800ef92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	683a      	ldr	r2, [r7, #0]
 800ef9e:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	2200      	movs	r2, #0
 800efa4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	2201      	movs	r2, #1
 800efaa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800efac:	7afb      	ldrb	r3, [r7, #11]
 800efae:	f003 030f 	and.w	r3, r3, #15
 800efb2:	b2da      	uxtb	r2, r3
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800efb8:	7afb      	ldrb	r3, [r7, #11]
 800efba:	f003 030f 	and.w	r3, r3, #15
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d106      	bne.n	800efd0 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	6979      	ldr	r1, [r7, #20]
 800efc8:	4618      	mov	r0, r3
 800efca:	f006 fff3 	bl	8015fb4 <USB_EP0StartXfer>
 800efce:	e005      	b.n	800efdc <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	6979      	ldr	r1, [r7, #20]
 800efd6:	4618      	mov	r0, r3
 800efd8:	f006 fe0c 	bl	8015bf4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800efdc:	2300      	movs	r3, #0
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3718      	adds	r7, #24
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}

0800efe6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800efe6:	b580      	push	{r7, lr}
 800efe8:	b084      	sub	sp, #16
 800efea:	af00      	add	r7, sp, #0
 800efec:	6078      	str	r0, [r7, #4]
 800efee:	460b      	mov	r3, r1
 800eff0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800eff2:	78fb      	ldrb	r3, [r7, #3]
 800eff4:	f003 020f 	and.w	r2, r3, #15
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	685b      	ldr	r3, [r3, #4]
 800effc:	429a      	cmp	r2, r3
 800effe:	d901      	bls.n	800f004 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800f000:	2301      	movs	r3, #1
 800f002:	e04e      	b.n	800f0a2 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800f004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	da0f      	bge.n	800f02c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f00c:	78fb      	ldrb	r3, [r7, #3]
 800f00e:	f003 020f 	and.w	r2, r3, #15
 800f012:	4613      	mov	r3, r2
 800f014:	00db      	lsls	r3, r3, #3
 800f016:	4413      	add	r3, r2
 800f018:	009b      	lsls	r3, r3, #2
 800f01a:	3338      	adds	r3, #56	; 0x38
 800f01c:	687a      	ldr	r2, [r7, #4]
 800f01e:	4413      	add	r3, r2
 800f020:	3304      	adds	r3, #4
 800f022:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	2201      	movs	r2, #1
 800f028:	705a      	strb	r2, [r3, #1]
 800f02a:	e00d      	b.n	800f048 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800f02c:	78fa      	ldrb	r2, [r7, #3]
 800f02e:	4613      	mov	r3, r2
 800f030:	00db      	lsls	r3, r3, #3
 800f032:	4413      	add	r3, r2
 800f034:	009b      	lsls	r3, r3, #2
 800f036:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f03a:	687a      	ldr	r2, [r7, #4]
 800f03c:	4413      	add	r3, r2
 800f03e:	3304      	adds	r3, #4
 800f040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2200      	movs	r2, #0
 800f046:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	2201      	movs	r2, #1
 800f04c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f04e:	78fb      	ldrb	r3, [r7, #3]
 800f050:	f003 030f 	and.w	r3, r3, #15
 800f054:	b2da      	uxtb	r2, r3
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f060:	2b01      	cmp	r3, #1
 800f062:	d101      	bne.n	800f068 <HAL_PCD_EP_SetStall+0x82>
 800f064:	2302      	movs	r3, #2
 800f066:	e01c      	b.n	800f0a2 <HAL_PCD_EP_SetStall+0xbc>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2201      	movs	r2, #1
 800f06c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	68f9      	ldr	r1, [r7, #12]
 800f076:	4618      	mov	r0, r3
 800f078:	f007 f9fa 	bl	8016470 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800f07c:	78fb      	ldrb	r3, [r7, #3]
 800f07e:	f003 030f 	and.w	r3, r3, #15
 800f082:	2b00      	cmp	r3, #0
 800f084:	d108      	bne.n	800f098 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681a      	ldr	r2, [r3, #0]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f090:	4619      	mov	r1, r3
 800f092:	4610      	mov	r0, r2
 800f094:	f007 fbec 	bl	8016870 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	2200      	movs	r2, #0
 800f09c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800f0a0:	2300      	movs	r3, #0
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	3710      	adds	r7, #16
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}

0800f0aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f0aa:	b580      	push	{r7, lr}
 800f0ac:	b084      	sub	sp, #16
 800f0ae:	af00      	add	r7, sp, #0
 800f0b0:	6078      	str	r0, [r7, #4]
 800f0b2:	460b      	mov	r3, r1
 800f0b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800f0b6:	78fb      	ldrb	r3, [r7, #3]
 800f0b8:	f003 020f 	and.w	r2, r3, #15
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	685b      	ldr	r3, [r3, #4]
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d901      	bls.n	800f0c8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	e042      	b.n	800f14e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800f0c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	da0f      	bge.n	800f0f0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f0d0:	78fb      	ldrb	r3, [r7, #3]
 800f0d2:	f003 020f 	and.w	r2, r3, #15
 800f0d6:	4613      	mov	r3, r2
 800f0d8:	00db      	lsls	r3, r3, #3
 800f0da:	4413      	add	r3, r2
 800f0dc:	009b      	lsls	r3, r3, #2
 800f0de:	3338      	adds	r3, #56	; 0x38
 800f0e0:	687a      	ldr	r2, [r7, #4]
 800f0e2:	4413      	add	r3, r2
 800f0e4:	3304      	adds	r3, #4
 800f0e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	705a      	strb	r2, [r3, #1]
 800f0ee:	e00f      	b.n	800f110 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f0f0:	78fb      	ldrb	r3, [r7, #3]
 800f0f2:	f003 020f 	and.w	r2, r3, #15
 800f0f6:	4613      	mov	r3, r2
 800f0f8:	00db      	lsls	r3, r3, #3
 800f0fa:	4413      	add	r3, r2
 800f0fc:	009b      	lsls	r3, r3, #2
 800f0fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f102:	687a      	ldr	r2, [r7, #4]
 800f104:	4413      	add	r3, r2
 800f106:	3304      	adds	r3, #4
 800f108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	2200      	movs	r2, #0
 800f10e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	2200      	movs	r2, #0
 800f114:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f116:	78fb      	ldrb	r3, [r7, #3]
 800f118:	f003 030f 	and.w	r3, r3, #15
 800f11c:	b2da      	uxtb	r2, r3
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f128:	2b01      	cmp	r3, #1
 800f12a:	d101      	bne.n	800f130 <HAL_PCD_EP_ClrStall+0x86>
 800f12c:	2302      	movs	r3, #2
 800f12e:	e00e      	b.n	800f14e <HAL_PCD_EP_ClrStall+0xa4>
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2201      	movs	r2, #1
 800f134:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	68f9      	ldr	r1, [r7, #12]
 800f13e:	4618      	mov	r0, r3
 800f140:	f007 fa04 	bl	801654c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2200      	movs	r2, #0
 800f148:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800f14c:	2300      	movs	r3, #0
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3710      	adds	r7, #16
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}

0800f156 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f156:	b580      	push	{r7, lr}
 800f158:	b084      	sub	sp, #16
 800f15a:	af00      	add	r7, sp, #0
 800f15c:	6078      	str	r0, [r7, #4]
 800f15e:	460b      	mov	r3, r1
 800f160:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800f162:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f166:	2b00      	cmp	r3, #0
 800f168:	da0c      	bge.n	800f184 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f16a:	78fb      	ldrb	r3, [r7, #3]
 800f16c:	f003 020f 	and.w	r2, r3, #15
 800f170:	4613      	mov	r3, r2
 800f172:	00db      	lsls	r3, r3, #3
 800f174:	4413      	add	r3, r2
 800f176:	009b      	lsls	r3, r3, #2
 800f178:	3338      	adds	r3, #56	; 0x38
 800f17a:	687a      	ldr	r2, [r7, #4]
 800f17c:	4413      	add	r3, r2
 800f17e:	3304      	adds	r3, #4
 800f180:	60fb      	str	r3, [r7, #12]
 800f182:	e00c      	b.n	800f19e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f184:	78fb      	ldrb	r3, [r7, #3]
 800f186:	f003 020f 	and.w	r2, r3, #15
 800f18a:	4613      	mov	r3, r2
 800f18c:	00db      	lsls	r3, r3, #3
 800f18e:	4413      	add	r3, r2
 800f190:	009b      	lsls	r3, r3, #2
 800f192:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f196:	687a      	ldr	r2, [r7, #4]
 800f198:	4413      	add	r3, r2
 800f19a:	3304      	adds	r3, #4
 800f19c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	68f9      	ldr	r1, [r7, #12]
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f007 f827 	bl	80161f8 <USB_EPStopXfer>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	72fb      	strb	r3, [r7, #11]

  return ret;
 800f1ae:	7afb      	ldrb	r3, [r7, #11]
}
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	3710      	adds	r7, #16
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}

0800f1b8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b088      	sub	sp, #32
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
 800f1c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800f1cc:	683a      	ldr	r2, [r7, #0]
 800f1ce:	4613      	mov	r3, r2
 800f1d0:	00db      	lsls	r3, r3, #3
 800f1d2:	4413      	add	r3, r2
 800f1d4:	009b      	lsls	r3, r3, #2
 800f1d6:	3338      	adds	r3, #56	; 0x38
 800f1d8:	687a      	ldr	r2, [r7, #4]
 800f1da:	4413      	add	r3, r2
 800f1dc:	3304      	adds	r3, #4
 800f1de:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	6a1a      	ldr	r2, [r3, #32]
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	699b      	ldr	r3, [r3, #24]
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d901      	bls.n	800f1f0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	e067      	b.n	800f2c0 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	699a      	ldr	r2, [r3, #24]
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	6a1b      	ldr	r3, [r3, #32]
 800f1f8:	1ad3      	subs	r3, r2, r3
 800f1fa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	68db      	ldr	r3, [r3, #12]
 800f200:	69fa      	ldr	r2, [r7, #28]
 800f202:	429a      	cmp	r2, r3
 800f204:	d902      	bls.n	800f20c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	68db      	ldr	r3, [r3, #12]
 800f20a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800f20c:	69fb      	ldr	r3, [r7, #28]
 800f20e:	3303      	adds	r3, #3
 800f210:	089b      	lsrs	r3, r3, #2
 800f212:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800f214:	e026      	b.n	800f264 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	699a      	ldr	r2, [r3, #24]
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	6a1b      	ldr	r3, [r3, #32]
 800f21e:	1ad3      	subs	r3, r2, r3
 800f220:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	68db      	ldr	r3, [r3, #12]
 800f226:	69fa      	ldr	r2, [r7, #28]
 800f228:	429a      	cmp	r2, r3
 800f22a:	d902      	bls.n	800f232 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	68db      	ldr	r3, [r3, #12]
 800f230:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800f232:	69fb      	ldr	r3, [r7, #28]
 800f234:	3303      	adds	r3, #3
 800f236:	089b      	lsrs	r3, r3, #2
 800f238:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	6919      	ldr	r1, [r3, #16]
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	b2da      	uxtb	r2, r3
 800f242:	69fb      	ldr	r3, [r7, #28]
 800f244:	b29b      	uxth	r3, r3
 800f246:	6978      	ldr	r0, [r7, #20]
 800f248:	f007 f880 	bl	801634c <USB_WritePacket>

    ep->xfer_buff  += len;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	691a      	ldr	r2, [r3, #16]
 800f250:	69fb      	ldr	r3, [r7, #28]
 800f252:	441a      	add	r2, r3
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	6a1a      	ldr	r2, [r3, #32]
 800f25c:	69fb      	ldr	r3, [r7, #28]
 800f25e:	441a      	add	r2, r3
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	015a      	lsls	r2, r3, #5
 800f268:	693b      	ldr	r3, [r7, #16]
 800f26a:	4413      	add	r3, r2
 800f26c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f270:	699b      	ldr	r3, [r3, #24]
 800f272:	b29b      	uxth	r3, r3
 800f274:	69ba      	ldr	r2, [r7, #24]
 800f276:	429a      	cmp	r2, r3
 800f278:	d809      	bhi.n	800f28e <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	6a1a      	ldr	r2, [r3, #32]
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800f282:	429a      	cmp	r2, r3
 800f284:	d203      	bcs.n	800f28e <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	699b      	ldr	r3, [r3, #24]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d1c3      	bne.n	800f216 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	699a      	ldr	r2, [r3, #24]
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	6a1b      	ldr	r3, [r3, #32]
 800f296:	429a      	cmp	r2, r3
 800f298:	d811      	bhi.n	800f2be <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	f003 030f 	and.w	r3, r3, #15
 800f2a0:	2201      	movs	r2, #1
 800f2a2:	fa02 f303 	lsl.w	r3, r2, r3
 800f2a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800f2a8:	693b      	ldr	r3, [r7, #16]
 800f2aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f2b0:	68bb      	ldr	r3, [r7, #8]
 800f2b2:	43db      	mvns	r3, r3
 800f2b4:	6939      	ldr	r1, [r7, #16]
 800f2b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f2ba:	4013      	ands	r3, r2
 800f2bc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800f2be:	2300      	movs	r3, #0
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3720      	adds	r7, #32
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b086      	sub	sp, #24
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	333c      	adds	r3, #60	; 0x3c
 800f2e0:	3304      	adds	r3, #4
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	015a      	lsls	r2, r3, #5
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	4413      	add	r3, r2
 800f2ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2f2:	689b      	ldr	r3, [r3, #8]
 800f2f4:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	4a19      	ldr	r2, [pc, #100]	; (800f360 <PCD_EP_OutXfrComplete_int+0x98>)
 800f2fa:	4293      	cmp	r3, r2
 800f2fc:	d124      	bne.n	800f348 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f304:	2b00      	cmp	r3, #0
 800f306:	d00a      	beq.n	800f31e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	015a      	lsls	r2, r3, #5
 800f30c:	693b      	ldr	r3, [r7, #16]
 800f30e:	4413      	add	r3, r2
 800f310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f314:	461a      	mov	r2, r3
 800f316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f31a:	6093      	str	r3, [r2, #8]
 800f31c:	e01a      	b.n	800f354 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	f003 0320 	and.w	r3, r3, #32
 800f324:	2b00      	cmp	r3, #0
 800f326:	d008      	beq.n	800f33a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	015a      	lsls	r2, r3, #5
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	4413      	add	r3, r2
 800f330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f334:	461a      	mov	r2, r3
 800f336:	2320      	movs	r3, #32
 800f338:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	b2db      	uxtb	r3, r3
 800f33e:	4619      	mov	r1, r3
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f009 fa05 	bl	8018750 <HAL_PCD_DataOutStageCallback>
 800f346:	e005      	b.n	800f354 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	b2db      	uxtb	r3, r3
 800f34c:	4619      	mov	r1, r3
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f009 f9fe 	bl	8018750 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800f354:	2300      	movs	r3, #0
}
 800f356:	4618      	mov	r0, r3
 800f358:	3718      	adds	r7, #24
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
 800f35e:	bf00      	nop
 800f360:	4f54310a 	.word	0x4f54310a

0800f364 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800f364:	b580      	push	{r7, lr}
 800f366:	b086      	sub	sp, #24
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f378:	697b      	ldr	r3, [r7, #20]
 800f37a:	333c      	adds	r3, #60	; 0x3c
 800f37c:	3304      	adds	r3, #4
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	015a      	lsls	r2, r3, #5
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	4413      	add	r3, r2
 800f38a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f38e:	689b      	ldr	r3, [r3, #8]
 800f390:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	4a0c      	ldr	r2, [pc, #48]	; (800f3c8 <PCD_EP_OutSetupPacket_int+0x64>)
 800f396:	4293      	cmp	r3, r2
 800f398:	d90e      	bls.n	800f3b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800f39a:	68bb      	ldr	r3, [r7, #8]
 800f39c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d009      	beq.n	800f3b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	015a      	lsls	r2, r3, #5
 800f3a8:	693b      	ldr	r3, [r7, #16]
 800f3aa:	4413      	add	r3, r2
 800f3ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3b0:	461a      	mov	r2, r3
 800f3b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f3b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f009 f9b7 	bl	801872c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800f3be:	2300      	movs	r3, #0
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3718      	adds	r7, #24
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}
 800f3c8:	4f54300a 	.word	0x4f54300a

0800f3cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b085      	sub	sp, #20
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	460b      	mov	r3, r1
 800f3d6:	70fb      	strb	r3, [r7, #3]
 800f3d8:	4613      	mov	r3, r2
 800f3da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800f3e4:	78fb      	ldrb	r3, [r7, #3]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d107      	bne.n	800f3fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800f3ea:	883b      	ldrh	r3, [r7, #0]
 800f3ec:	0419      	lsls	r1, r3, #16
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	68ba      	ldr	r2, [r7, #8]
 800f3f4:	430a      	orrs	r2, r1
 800f3f6:	629a      	str	r2, [r3, #40]	; 0x28
 800f3f8:	e028      	b.n	800f44c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f400:	0c1b      	lsrs	r3, r3, #16
 800f402:	68ba      	ldr	r2, [r7, #8]
 800f404:	4413      	add	r3, r2
 800f406:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800f408:	2300      	movs	r3, #0
 800f40a:	73fb      	strb	r3, [r7, #15]
 800f40c:	e00d      	b.n	800f42a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681a      	ldr	r2, [r3, #0]
 800f412:	7bfb      	ldrb	r3, [r7, #15]
 800f414:	3340      	adds	r3, #64	; 0x40
 800f416:	009b      	lsls	r3, r3, #2
 800f418:	4413      	add	r3, r2
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	0c1b      	lsrs	r3, r3, #16
 800f41e:	68ba      	ldr	r2, [r7, #8]
 800f420:	4413      	add	r3, r2
 800f422:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800f424:	7bfb      	ldrb	r3, [r7, #15]
 800f426:	3301      	adds	r3, #1
 800f428:	73fb      	strb	r3, [r7, #15]
 800f42a:	7bfa      	ldrb	r2, [r7, #15]
 800f42c:	78fb      	ldrb	r3, [r7, #3]
 800f42e:	3b01      	subs	r3, #1
 800f430:	429a      	cmp	r2, r3
 800f432:	d3ec      	bcc.n	800f40e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800f434:	883b      	ldrh	r3, [r7, #0]
 800f436:	0418      	lsls	r0, r3, #16
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	6819      	ldr	r1, [r3, #0]
 800f43c:	78fb      	ldrb	r3, [r7, #3]
 800f43e:	3b01      	subs	r3, #1
 800f440:	68ba      	ldr	r2, [r7, #8]
 800f442:	4302      	orrs	r2, r0
 800f444:	3340      	adds	r3, #64	; 0x40
 800f446:	009b      	lsls	r3, r3, #2
 800f448:	440b      	add	r3, r1
 800f44a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800f44c:	2300      	movs	r3, #0
}
 800f44e:	4618      	mov	r0, r3
 800f450:	3714      	adds	r7, #20
 800f452:	46bd      	mov	sp, r7
 800f454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f458:	4770      	bx	lr

0800f45a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800f45a:	b480      	push	{r7}
 800f45c:	b083      	sub	sp, #12
 800f45e:	af00      	add	r7, sp, #0
 800f460:	6078      	str	r0, [r7, #4]
 800f462:	460b      	mov	r3, r1
 800f464:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	887a      	ldrh	r2, [r7, #2]
 800f46c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800f46e:	2300      	movs	r3, #0
}
 800f470:	4618      	mov	r0, r3
 800f472:	370c      	adds	r7, #12
 800f474:	46bd      	mov	sp, r7
 800f476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47a:	4770      	bx	lr

0800f47c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800f47c:	b480      	push	{r7}
 800f47e:	b085      	sub	sp, #20
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2201      	movs	r2, #1
 800f48e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2200      	movs	r2, #0
 800f496:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	699b      	ldr	r3, [r3, #24]
 800f49e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f4ae:	f043 0303 	orr.w	r3, r3, #3
 800f4b2:	68fa      	ldr	r2, [r7, #12]
 800f4b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800f4b6:	2300      	movs	r3, #0
}
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	3714      	adds	r7, #20
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c2:	4770      	bx	lr

0800f4c4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800f4c4:	b480      	push	{r7}
 800f4c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f4c8:	4b05      	ldr	r3, [pc, #20]	; (800f4e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	4a04      	ldr	r2, [pc, #16]	; (800f4e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800f4ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f4d2:	6013      	str	r3, [r2, #0]
}
 800f4d4:	bf00      	nop
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4dc:	4770      	bx	lr
 800f4de:	bf00      	nop
 800f4e0:	40007000 	.word	0x40007000

0800f4e4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800f4e4:	b580      	push	{r7, lr}
 800f4e6:	b082      	sub	sp, #8
 800f4e8:	af00      	add	r7, sp, #0
 800f4ea:	6078      	str	r0, [r7, #4]
 800f4ec:	460b      	mov	r3, r1
 800f4ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d10c      	bne.n	800f510 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800f4f6:	4b13      	ldr	r3, [pc, #76]	; (800f544 <HAL_PWR_EnterSLEEPMode+0x60>)
 800f4f8:	695b      	ldr	r3, [r3, #20]
 800f4fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f4fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f502:	d10e      	bne.n	800f522 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800f504:	f000 f8b6 	bl	800f674 <HAL_PWREx_DisableLowPowerRunMode>
 800f508:	4603      	mov	r3, r0
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d009      	beq.n	800f522 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 800f50e:	e016      	b.n	800f53e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 800f510:	4b0c      	ldr	r3, [pc, #48]	; (800f544 <HAL_PWR_EnterSLEEPMode+0x60>)
 800f512:	695b      	ldr	r3, [r3, #20]
 800f514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f51c:	d001      	beq.n	800f522 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800f51e:	f000 f899 	bl	800f654 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800f522:	4b09      	ldr	r3, [pc, #36]	; (800f548 <HAL_PWR_EnterSLEEPMode+0x64>)
 800f524:	691b      	ldr	r3, [r3, #16]
 800f526:	4a08      	ldr	r2, [pc, #32]	; (800f548 <HAL_PWR_EnterSLEEPMode+0x64>)
 800f528:	f023 0304 	bic.w	r3, r3, #4
 800f52c:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800f52e:	78fb      	ldrb	r3, [r7, #3]
 800f530:	2b01      	cmp	r3, #1
 800f532:	d101      	bne.n	800f538 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800f534:	bf30      	wfi
 800f536:	e002      	b.n	800f53e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800f538:	bf40      	sev
    __WFE();
 800f53a:	bf20      	wfe
    __WFE();
 800f53c:	bf20      	wfe
  }

}
 800f53e:	3708      	adds	r7, #8
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}
 800f544:	40007000 	.word	0x40007000
 800f548:	e000ed00 	.word	0xe000ed00

0800f54c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800f54c:	b480      	push	{r7}
 800f54e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800f550:	4b04      	ldr	r3, [pc, #16]	; (800f564 <HAL_PWREx_GetVoltageRange+0x18>)
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800f558:	4618      	mov	r0, r3
 800f55a:	46bd      	mov	sp, r7
 800f55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f560:	4770      	bx	lr
 800f562:	bf00      	nop
 800f564:	40007000 	.word	0x40007000

0800f568 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800f568:	b480      	push	{r7}
 800f56a:	b085      	sub	sp, #20
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f576:	d130      	bne.n	800f5da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800f578:	4b23      	ldr	r3, [pc, #140]	; (800f608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f584:	d038      	beq.n	800f5f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800f586:	4b20      	ldr	r3, [pc, #128]	; (800f608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800f58e:	4a1e      	ldr	r2, [pc, #120]	; (800f608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f590:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f594:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800f596:	4b1d      	ldr	r3, [pc, #116]	; (800f60c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	2232      	movs	r2, #50	; 0x32
 800f59c:	fb02 f303 	mul.w	r3, r2, r3
 800f5a0:	4a1b      	ldr	r2, [pc, #108]	; (800f610 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800f5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800f5a6:	0c9b      	lsrs	r3, r3, #18
 800f5a8:	3301      	adds	r3, #1
 800f5aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f5ac:	e002      	b.n	800f5b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	3b01      	subs	r3, #1
 800f5b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f5b4:	4b14      	ldr	r3, [pc, #80]	; (800f608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f5b6:	695b      	ldr	r3, [r3, #20]
 800f5b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f5bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5c0:	d102      	bne.n	800f5c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d1f2      	bne.n	800f5ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800f5c8:	4b0f      	ldr	r3, [pc, #60]	; (800f608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f5ca:	695b      	ldr	r3, [r3, #20]
 800f5cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f5d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5d4:	d110      	bne.n	800f5f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800f5d6:	2303      	movs	r3, #3
 800f5d8:	e00f      	b.n	800f5fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800f5da:	4b0b      	ldr	r3, [pc, #44]	; (800f608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f5e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5e6:	d007      	beq.n	800f5f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800f5e8:	4b07      	ldr	r3, [pc, #28]	; (800f608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800f5f0:	4a05      	ldr	r2, [pc, #20]	; (800f608 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f5f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f5f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800f5f8:	2300      	movs	r3, #0
}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3714      	adds	r7, #20
 800f5fe:	46bd      	mov	sp, r7
 800f600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f604:	4770      	bx	lr
 800f606:	bf00      	nop
 800f608:	40007000 	.word	0x40007000
 800f60c:	20000194 	.word	0x20000194
 800f610:	431bde83 	.word	0x431bde83

0800f614 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800f614:	b480      	push	{r7}
 800f616:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800f618:	4b05      	ldr	r3, [pc, #20]	; (800f630 <HAL_PWREx_EnableVddUSB+0x1c>)
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	4a04      	ldr	r2, [pc, #16]	; (800f630 <HAL_PWREx_EnableVddUSB+0x1c>)
 800f61e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f622:	6053      	str	r3, [r2, #4]
}
 800f624:	bf00      	nop
 800f626:	46bd      	mov	sp, r7
 800f628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62c:	4770      	bx	lr
 800f62e:	bf00      	nop
 800f630:	40007000 	.word	0x40007000

0800f634 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800f634:	b480      	push	{r7}
 800f636:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800f638:	4b05      	ldr	r3, [pc, #20]	; (800f650 <HAL_PWREx_EnableVddIO2+0x1c>)
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	4a04      	ldr	r2, [pc, #16]	; (800f650 <HAL_PWREx_EnableVddIO2+0x1c>)
 800f63e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f642:	6053      	str	r3, [r2, #4]
}
 800f644:	bf00      	nop
 800f646:	46bd      	mov	sp, r7
 800f648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64c:	4770      	bx	lr
 800f64e:	bf00      	nop
 800f650:	40007000 	.word	0x40007000

0800f654 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800f654:	b480      	push	{r7}
 800f656:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800f658:	4b05      	ldr	r3, [pc, #20]	; (800f670 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	4a04      	ldr	r2, [pc, #16]	; (800f670 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800f65e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f662:	6013      	str	r3, [r2, #0]
}
 800f664:	bf00      	nop
 800f666:	46bd      	mov	sp, r7
 800f668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66c:	4770      	bx	lr
 800f66e:	bf00      	nop
 800f670:	40007000 	.word	0x40007000

0800f674 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800f674:	b480      	push	{r7}
 800f676:	b083      	sub	sp, #12
 800f678:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800f67a:	4b17      	ldr	r3, [pc, #92]	; (800f6d8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	4a16      	ldr	r2, [pc, #88]	; (800f6d8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800f680:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f684:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800f686:	4b15      	ldr	r3, [pc, #84]	; (800f6dc <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	2232      	movs	r2, #50	; 0x32
 800f68c:	fb02 f303 	mul.w	r3, r2, r3
 800f690:	4a13      	ldr	r2, [pc, #76]	; (800f6e0 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 800f692:	fba2 2303 	umull	r2, r3, r2, r3
 800f696:	0c9b      	lsrs	r3, r3, #18
 800f698:	3301      	adds	r3, #1
 800f69a:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800f69c:	e002      	b.n	800f6a4 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	3b01      	subs	r3, #1
 800f6a2:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800f6a4:	4b0c      	ldr	r3, [pc, #48]	; (800f6d8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800f6a6:	695b      	ldr	r3, [r3, #20]
 800f6a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f6ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6b0:	d102      	bne.n	800f6b8 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d1f2      	bne.n	800f69e <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800f6b8:	4b07      	ldr	r3, [pc, #28]	; (800f6d8 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800f6ba:	695b      	ldr	r3, [r3, #20]
 800f6bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f6c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6c4:	d101      	bne.n	800f6ca <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800f6c6:	2303      	movs	r3, #3
 800f6c8:	e000      	b.n	800f6cc <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800f6ca:	2300      	movs	r3, #0
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	370c      	adds	r7, #12
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d6:	4770      	bx	lr
 800f6d8:	40007000 	.word	0x40007000
 800f6dc:	20000194 	.word	0x20000194
 800f6e0:	431bde83 	.word	0x431bde83

0800f6e4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b086      	sub	sp, #24
 800f6e8:	af02      	add	r7, sp, #8
 800f6ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f6ec:	f7fb fb56 	bl	800ad9c <HAL_GetTick>
 800f6f0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d101      	bne.n	800f6fc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800f6f8:	2301      	movs	r3, #1
 800f6fa:	e069      	b.n	800f7d0 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f702:	b2db      	uxtb	r3, r3
 800f704:	2b00      	cmp	r3, #0
 800f706:	d10b      	bne.n	800f720 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2200      	movs	r2, #0
 800f70c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f7f2 faeb 	bl	8001cec <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800f716:	f241 3188 	movw	r1, #5000	; 0x1388
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f000 f85e 	bl	800f7dc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	689b      	ldr	r3, [r3, #8]
 800f72e:	3b01      	subs	r3, #1
 800f730:	021a      	lsls	r2, r3, #8
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	430a      	orrs	r2, r1
 800f738:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f73e:	9300      	str	r3, [sp, #0]
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	2200      	movs	r2, #0
 800f744:	2120      	movs	r1, #32
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f000 f856 	bl	800f7f8 <QSPI_WaitFlagStateUntilTimeout>
 800f74c:	4603      	mov	r3, r0
 800f74e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800f750:	7afb      	ldrb	r3, [r7, #11]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d137      	bne.n	800f7c6 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f760:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800f764:	687a      	ldr	r2, [r7, #4]
 800f766:	6852      	ldr	r2, [r2, #4]
 800f768:	0611      	lsls	r1, r2, #24
 800f76a:	687a      	ldr	r2, [r7, #4]
 800f76c:	68d2      	ldr	r2, [r2, #12]
 800f76e:	4311      	orrs	r1, r2
 800f770:	687a      	ldr	r2, [r7, #4]
 800f772:	69d2      	ldr	r2, [r2, #28]
 800f774:	4311      	orrs	r1, r2
 800f776:	687a      	ldr	r2, [r7, #4]
 800f778:	6a12      	ldr	r2, [r2, #32]
 800f77a:	4311      	orrs	r1, r2
 800f77c:	687a      	ldr	r2, [r7, #4]
 800f77e:	6812      	ldr	r2, [r2, #0]
 800f780:	430b      	orrs	r3, r1
 800f782:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	685a      	ldr	r2, [r3, #4]
 800f78a:	4b13      	ldr	r3, [pc, #76]	; (800f7d8 <HAL_QSPI_Init+0xf4>)
 800f78c:	4013      	ands	r3, r2
 800f78e:	687a      	ldr	r2, [r7, #4]
 800f790:	6912      	ldr	r2, [r2, #16]
 800f792:	0411      	lsls	r1, r2, #16
 800f794:	687a      	ldr	r2, [r7, #4]
 800f796:	6952      	ldr	r2, [r2, #20]
 800f798:	4311      	orrs	r1, r2
 800f79a:	687a      	ldr	r2, [r7, #4]
 800f79c:	6992      	ldr	r2, [r2, #24]
 800f79e:	4311      	orrs	r1, r2
 800f7a0:	687a      	ldr	r2, [r7, #4]
 800f7a2:	6812      	ldr	r2, [r2, #0]
 800f7a4:	430b      	orrs	r3, r1
 800f7a6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	681a      	ldr	r2, [r3, #0]
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	f042 0201 	orr.w	r2, r2, #1
 800f7b6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2201      	movs	r2, #1
 800f7c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2200      	movs	r2, #0
 800f7ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800f7ce:	7afb      	ldrb	r3, [r7, #11]
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3710      	adds	r7, #16
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}
 800f7d8:	ffe0f8fe 	.word	0xffe0f8fe

0800f7dc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800f7dc:	b480      	push	{r7}
 800f7de:	b083      	sub	sp, #12
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
 800f7e4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	683a      	ldr	r2, [r7, #0]
 800f7ea:	649a      	str	r2, [r3, #72]	; 0x48
}
 800f7ec:	bf00      	nop
 800f7ee:	370c      	adds	r7, #12
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f6:	4770      	bx	lr

0800f7f8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b084      	sub	sp, #16
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	60f8      	str	r0, [r7, #12]
 800f800:	60b9      	str	r1, [r7, #8]
 800f802:	603b      	str	r3, [r7, #0]
 800f804:	4613      	mov	r3, r2
 800f806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f808:	e01a      	b.n	800f840 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f80a:	69bb      	ldr	r3, [r7, #24]
 800f80c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f810:	d016      	beq.n	800f840 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f812:	f7fb fac3 	bl	800ad9c <HAL_GetTick>
 800f816:	4602      	mov	r2, r0
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	1ad3      	subs	r3, r2, r3
 800f81c:	69ba      	ldr	r2, [r7, #24]
 800f81e:	429a      	cmp	r2, r3
 800f820:	d302      	bcc.n	800f828 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800f822:	69bb      	ldr	r3, [r7, #24]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d10b      	bne.n	800f840 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	2204      	movs	r2, #4
 800f82c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f834:	f043 0201 	orr.w	r2, r3, #1
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800f83c:	2301      	movs	r3, #1
 800f83e:	e00e      	b.n	800f85e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	689a      	ldr	r2, [r3, #8]
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	4013      	ands	r3, r2
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	bf14      	ite	ne
 800f84e:	2301      	movne	r3, #1
 800f850:	2300      	moveq	r3, #0
 800f852:	b2db      	uxtb	r3, r3
 800f854:	461a      	mov	r2, r3
 800f856:	79fb      	ldrb	r3, [r7, #7]
 800f858:	429a      	cmp	r2, r3
 800f85a:	d1d6      	bne.n	800f80a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f85c:	2300      	movs	r3, #0
}
 800f85e:	4618      	mov	r0, r3
 800f860:	3710      	adds	r7, #16
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
	...

0800f868 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b088      	sub	sp, #32
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d102      	bne.n	800f87c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800f876:	2301      	movs	r3, #1
 800f878:	f000 bc08 	b.w	801008c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f87c:	4b96      	ldr	r3, [pc, #600]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800f87e:	689b      	ldr	r3, [r3, #8]
 800f880:	f003 030c 	and.w	r3, r3, #12
 800f884:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f886:	4b94      	ldr	r3, [pc, #592]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800f888:	68db      	ldr	r3, [r3, #12]
 800f88a:	f003 0303 	and.w	r3, r3, #3
 800f88e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f003 0310 	and.w	r3, r3, #16
 800f898:	2b00      	cmp	r3, #0
 800f89a:	f000 80e4 	beq.w	800fa66 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f89e:	69bb      	ldr	r3, [r7, #24]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d007      	beq.n	800f8b4 <HAL_RCC_OscConfig+0x4c>
 800f8a4:	69bb      	ldr	r3, [r7, #24]
 800f8a6:	2b0c      	cmp	r3, #12
 800f8a8:	f040 808b 	bne.w	800f9c2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	2b01      	cmp	r3, #1
 800f8b0:	f040 8087 	bne.w	800f9c2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f8b4:	4b88      	ldr	r3, [pc, #544]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	f003 0302 	and.w	r3, r3, #2
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d005      	beq.n	800f8cc <HAL_RCC_OscConfig+0x64>
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	699b      	ldr	r3, [r3, #24]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d101      	bne.n	800f8cc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	e3df      	b.n	801008c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	6a1a      	ldr	r2, [r3, #32]
 800f8d0:	4b81      	ldr	r3, [pc, #516]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	f003 0308 	and.w	r3, r3, #8
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d004      	beq.n	800f8e6 <HAL_RCC_OscConfig+0x7e>
 800f8dc:	4b7e      	ldr	r3, [pc, #504]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f8e4:	e005      	b.n	800f8f2 <HAL_RCC_OscConfig+0x8a>
 800f8e6:	4b7c      	ldr	r3, [pc, #496]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800f8e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f8ec:	091b      	lsrs	r3, r3, #4
 800f8ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f8f2:	4293      	cmp	r3, r2
 800f8f4:	d223      	bcs.n	800f93e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	6a1b      	ldr	r3, [r3, #32]
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f000 fd92 	bl	8010424 <RCC_SetFlashLatencyFromMSIRange>
 800f900:	4603      	mov	r3, r0
 800f902:	2b00      	cmp	r3, #0
 800f904:	d001      	beq.n	800f90a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800f906:	2301      	movs	r3, #1
 800f908:	e3c0      	b.n	801008c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f90a:	4b73      	ldr	r3, [pc, #460]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	4a72      	ldr	r2, [pc, #456]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800f910:	f043 0308 	orr.w	r3, r3, #8
 800f914:	6013      	str	r3, [r2, #0]
 800f916:	4b70      	ldr	r3, [pc, #448]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	6a1b      	ldr	r3, [r3, #32]
 800f922:	496d      	ldr	r1, [pc, #436]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800f924:	4313      	orrs	r3, r2
 800f926:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f928:	4b6b      	ldr	r3, [pc, #428]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800f92a:	685b      	ldr	r3, [r3, #4]
 800f92c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	69db      	ldr	r3, [r3, #28]
 800f934:	021b      	lsls	r3, r3, #8
 800f936:	4968      	ldr	r1, [pc, #416]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800f938:	4313      	orrs	r3, r2
 800f93a:	604b      	str	r3, [r1, #4]
 800f93c:	e025      	b.n	800f98a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f93e:	4b66      	ldr	r3, [pc, #408]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	4a65      	ldr	r2, [pc, #404]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800f944:	f043 0308 	orr.w	r3, r3, #8
 800f948:	6013      	str	r3, [r2, #0]
 800f94a:	4b63      	ldr	r3, [pc, #396]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	6a1b      	ldr	r3, [r3, #32]
 800f956:	4960      	ldr	r1, [pc, #384]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800f958:	4313      	orrs	r3, r2
 800f95a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f95c:	4b5e      	ldr	r3, [pc, #376]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800f95e:	685b      	ldr	r3, [r3, #4]
 800f960:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	69db      	ldr	r3, [r3, #28]
 800f968:	021b      	lsls	r3, r3, #8
 800f96a:	495b      	ldr	r1, [pc, #364]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800f96c:	4313      	orrs	r3, r2
 800f96e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f970:	69bb      	ldr	r3, [r7, #24]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d109      	bne.n	800f98a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	6a1b      	ldr	r3, [r3, #32]
 800f97a:	4618      	mov	r0, r3
 800f97c:	f000 fd52 	bl	8010424 <RCC_SetFlashLatencyFromMSIRange>
 800f980:	4603      	mov	r3, r0
 800f982:	2b00      	cmp	r3, #0
 800f984:	d001      	beq.n	800f98a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800f986:	2301      	movs	r3, #1
 800f988:	e380      	b.n	801008c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800f98a:	f000 fc87 	bl	801029c <HAL_RCC_GetSysClockFreq>
 800f98e:	4602      	mov	r2, r0
 800f990:	4b51      	ldr	r3, [pc, #324]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800f992:	689b      	ldr	r3, [r3, #8]
 800f994:	091b      	lsrs	r3, r3, #4
 800f996:	f003 030f 	and.w	r3, r3, #15
 800f99a:	4950      	ldr	r1, [pc, #320]	; (800fadc <HAL_RCC_OscConfig+0x274>)
 800f99c:	5ccb      	ldrb	r3, [r1, r3]
 800f99e:	f003 031f 	and.w	r3, r3, #31
 800f9a2:	fa22 f303 	lsr.w	r3, r2, r3
 800f9a6:	4a4e      	ldr	r2, [pc, #312]	; (800fae0 <HAL_RCC_OscConfig+0x278>)
 800f9a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800f9aa:	4b4e      	ldr	r3, [pc, #312]	; (800fae4 <HAL_RCC_OscConfig+0x27c>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	4618      	mov	r0, r3
 800f9b0:	f7fb f9a4 	bl	800acfc <HAL_InitTick>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800f9b8:	7bfb      	ldrb	r3, [r7, #15]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d052      	beq.n	800fa64 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800f9be:	7bfb      	ldrb	r3, [r7, #15]
 800f9c0:	e364      	b.n	801008c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	699b      	ldr	r3, [r3, #24]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d032      	beq.n	800fa30 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800f9ca:	4b43      	ldr	r3, [pc, #268]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	4a42      	ldr	r2, [pc, #264]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800f9d0:	f043 0301 	orr.w	r3, r3, #1
 800f9d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f9d6:	f7fb f9e1 	bl	800ad9c <HAL_GetTick>
 800f9da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f9dc:	e008      	b.n	800f9f0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f9de:	f7fb f9dd 	bl	800ad9c <HAL_GetTick>
 800f9e2:	4602      	mov	r2, r0
 800f9e4:	693b      	ldr	r3, [r7, #16]
 800f9e6:	1ad3      	subs	r3, r2, r3
 800f9e8:	2b02      	cmp	r3, #2
 800f9ea:	d901      	bls.n	800f9f0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800f9ec:	2303      	movs	r3, #3
 800f9ee:	e34d      	b.n	801008c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f9f0:	4b39      	ldr	r3, [pc, #228]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	f003 0302 	and.w	r3, r3, #2
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d0f0      	beq.n	800f9de <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f9fc:	4b36      	ldr	r3, [pc, #216]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	4a35      	ldr	r2, [pc, #212]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800fa02:	f043 0308 	orr.w	r3, r3, #8
 800fa06:	6013      	str	r3, [r2, #0]
 800fa08:	4b33      	ldr	r3, [pc, #204]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6a1b      	ldr	r3, [r3, #32]
 800fa14:	4930      	ldr	r1, [pc, #192]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800fa16:	4313      	orrs	r3, r2
 800fa18:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800fa1a:	4b2f      	ldr	r3, [pc, #188]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800fa1c:	685b      	ldr	r3, [r3, #4]
 800fa1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	69db      	ldr	r3, [r3, #28]
 800fa26:	021b      	lsls	r3, r3, #8
 800fa28:	492b      	ldr	r1, [pc, #172]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800fa2a:	4313      	orrs	r3, r2
 800fa2c:	604b      	str	r3, [r1, #4]
 800fa2e:	e01a      	b.n	800fa66 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800fa30:	4b29      	ldr	r3, [pc, #164]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	4a28      	ldr	r2, [pc, #160]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800fa36:	f023 0301 	bic.w	r3, r3, #1
 800fa3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800fa3c:	f7fb f9ae 	bl	800ad9c <HAL_GetTick>
 800fa40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800fa42:	e008      	b.n	800fa56 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800fa44:	f7fb f9aa 	bl	800ad9c <HAL_GetTick>
 800fa48:	4602      	mov	r2, r0
 800fa4a:	693b      	ldr	r3, [r7, #16]
 800fa4c:	1ad3      	subs	r3, r2, r3
 800fa4e:	2b02      	cmp	r3, #2
 800fa50:	d901      	bls.n	800fa56 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800fa52:	2303      	movs	r3, #3
 800fa54:	e31a      	b.n	801008c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800fa56:	4b20      	ldr	r3, [pc, #128]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	f003 0302 	and.w	r3, r3, #2
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d1f0      	bne.n	800fa44 <HAL_RCC_OscConfig+0x1dc>
 800fa62:	e000      	b.n	800fa66 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800fa64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	f003 0301 	and.w	r3, r3, #1
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d073      	beq.n	800fb5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800fa72:	69bb      	ldr	r3, [r7, #24]
 800fa74:	2b08      	cmp	r3, #8
 800fa76:	d005      	beq.n	800fa84 <HAL_RCC_OscConfig+0x21c>
 800fa78:	69bb      	ldr	r3, [r7, #24]
 800fa7a:	2b0c      	cmp	r3, #12
 800fa7c:	d10e      	bne.n	800fa9c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	2b03      	cmp	r3, #3
 800fa82:	d10b      	bne.n	800fa9c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fa84:	4b14      	ldr	r3, [pc, #80]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d063      	beq.n	800fb58 <HAL_RCC_OscConfig+0x2f0>
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d15f      	bne.n	800fb58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800fa98:	2301      	movs	r3, #1
 800fa9a:	e2f7      	b.n	801008c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	685b      	ldr	r3, [r3, #4]
 800faa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800faa4:	d106      	bne.n	800fab4 <HAL_RCC_OscConfig+0x24c>
 800faa6:	4b0c      	ldr	r3, [pc, #48]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	4a0b      	ldr	r2, [pc, #44]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800faac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fab0:	6013      	str	r3, [r2, #0]
 800fab2:	e025      	b.n	800fb00 <HAL_RCC_OscConfig+0x298>
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	685b      	ldr	r3, [r3, #4]
 800fab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800fabc:	d114      	bne.n	800fae8 <HAL_RCC_OscConfig+0x280>
 800fabe:	4b06      	ldr	r3, [pc, #24]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	4a05      	ldr	r2, [pc, #20]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800fac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fac8:	6013      	str	r3, [r2, #0]
 800faca:	4b03      	ldr	r3, [pc, #12]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	4a02      	ldr	r2, [pc, #8]	; (800fad8 <HAL_RCC_OscConfig+0x270>)
 800fad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fad4:	6013      	str	r3, [r2, #0]
 800fad6:	e013      	b.n	800fb00 <HAL_RCC_OscConfig+0x298>
 800fad8:	40021000 	.word	0x40021000
 800fadc:	0801a098 	.word	0x0801a098
 800fae0:	20000194 	.word	0x20000194
 800fae4:	20000550 	.word	0x20000550
 800fae8:	4ba0      	ldr	r3, [pc, #640]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	4a9f      	ldr	r2, [pc, #636]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800faee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800faf2:	6013      	str	r3, [r2, #0]
 800faf4:	4b9d      	ldr	r3, [pc, #628]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	4a9c      	ldr	r2, [pc, #624]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fafa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fafe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	685b      	ldr	r3, [r3, #4]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d013      	beq.n	800fb30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fb08:	f7fb f948 	bl	800ad9c <HAL_GetTick>
 800fb0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800fb0e:	e008      	b.n	800fb22 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fb10:	f7fb f944 	bl	800ad9c <HAL_GetTick>
 800fb14:	4602      	mov	r2, r0
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	1ad3      	subs	r3, r2, r3
 800fb1a:	2b64      	cmp	r3, #100	; 0x64
 800fb1c:	d901      	bls.n	800fb22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800fb1e:	2303      	movs	r3, #3
 800fb20:	e2b4      	b.n	801008c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800fb22:	4b92      	ldr	r3, [pc, #584]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d0f0      	beq.n	800fb10 <HAL_RCC_OscConfig+0x2a8>
 800fb2e:	e014      	b.n	800fb5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fb30:	f7fb f934 	bl	800ad9c <HAL_GetTick>
 800fb34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800fb36:	e008      	b.n	800fb4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fb38:	f7fb f930 	bl	800ad9c <HAL_GetTick>
 800fb3c:	4602      	mov	r2, r0
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	1ad3      	subs	r3, r2, r3
 800fb42:	2b64      	cmp	r3, #100	; 0x64
 800fb44:	d901      	bls.n	800fb4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800fb46:	2303      	movs	r3, #3
 800fb48:	e2a0      	b.n	801008c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800fb4a:	4b88      	ldr	r3, [pc, #544]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d1f0      	bne.n	800fb38 <HAL_RCC_OscConfig+0x2d0>
 800fb56:	e000      	b.n	800fb5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fb58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	f003 0302 	and.w	r3, r3, #2
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d060      	beq.n	800fc28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800fb66:	69bb      	ldr	r3, [r7, #24]
 800fb68:	2b04      	cmp	r3, #4
 800fb6a:	d005      	beq.n	800fb78 <HAL_RCC_OscConfig+0x310>
 800fb6c:	69bb      	ldr	r3, [r7, #24]
 800fb6e:	2b0c      	cmp	r3, #12
 800fb70:	d119      	bne.n	800fba6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800fb72:	697b      	ldr	r3, [r7, #20]
 800fb74:	2b02      	cmp	r3, #2
 800fb76:	d116      	bne.n	800fba6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800fb78:	4b7c      	ldr	r3, [pc, #496]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d005      	beq.n	800fb90 <HAL_RCC_OscConfig+0x328>
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	68db      	ldr	r3, [r3, #12]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d101      	bne.n	800fb90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800fb8c:	2301      	movs	r3, #1
 800fb8e:	e27d      	b.n	801008c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fb90:	4b76      	ldr	r3, [pc, #472]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fb92:	685b      	ldr	r3, [r3, #4]
 800fb94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	691b      	ldr	r3, [r3, #16]
 800fb9c:	061b      	lsls	r3, r3, #24
 800fb9e:	4973      	ldr	r1, [pc, #460]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fba0:	4313      	orrs	r3, r2
 800fba2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800fba4:	e040      	b.n	800fc28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	68db      	ldr	r3, [r3, #12]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d023      	beq.n	800fbf6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800fbae:	4b6f      	ldr	r3, [pc, #444]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	4a6e      	ldr	r2, [pc, #440]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fbb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fbb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fbba:	f7fb f8ef 	bl	800ad9c <HAL_GetTick>
 800fbbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800fbc0:	e008      	b.n	800fbd4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fbc2:	f7fb f8eb 	bl	800ad9c <HAL_GetTick>
 800fbc6:	4602      	mov	r2, r0
 800fbc8:	693b      	ldr	r3, [r7, #16]
 800fbca:	1ad3      	subs	r3, r2, r3
 800fbcc:	2b02      	cmp	r3, #2
 800fbce:	d901      	bls.n	800fbd4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800fbd0:	2303      	movs	r3, #3
 800fbd2:	e25b      	b.n	801008c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800fbd4:	4b65      	ldr	r3, [pc, #404]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d0f0      	beq.n	800fbc2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fbe0:	4b62      	ldr	r3, [pc, #392]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fbe2:	685b      	ldr	r3, [r3, #4]
 800fbe4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	691b      	ldr	r3, [r3, #16]
 800fbec:	061b      	lsls	r3, r3, #24
 800fbee:	495f      	ldr	r1, [pc, #380]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fbf0:	4313      	orrs	r3, r2
 800fbf2:	604b      	str	r3, [r1, #4]
 800fbf4:	e018      	b.n	800fc28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fbf6:	4b5d      	ldr	r3, [pc, #372]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	4a5c      	ldr	r2, [pc, #368]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fbfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fc00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fc02:	f7fb f8cb 	bl	800ad9c <HAL_GetTick>
 800fc06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800fc08:	e008      	b.n	800fc1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fc0a:	f7fb f8c7 	bl	800ad9c <HAL_GetTick>
 800fc0e:	4602      	mov	r2, r0
 800fc10:	693b      	ldr	r3, [r7, #16]
 800fc12:	1ad3      	subs	r3, r2, r3
 800fc14:	2b02      	cmp	r3, #2
 800fc16:	d901      	bls.n	800fc1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800fc18:	2303      	movs	r3, #3
 800fc1a:	e237      	b.n	801008c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800fc1c:	4b53      	ldr	r3, [pc, #332]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d1f0      	bne.n	800fc0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	f003 0308 	and.w	r3, r3, #8
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d03c      	beq.n	800fcae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	695b      	ldr	r3, [r3, #20]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d01c      	beq.n	800fc76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fc3c:	4b4b      	ldr	r3, [pc, #300]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fc3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fc42:	4a4a      	ldr	r2, [pc, #296]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fc44:	f043 0301 	orr.w	r3, r3, #1
 800fc48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fc4c:	f7fb f8a6 	bl	800ad9c <HAL_GetTick>
 800fc50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800fc52:	e008      	b.n	800fc66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fc54:	f7fb f8a2 	bl	800ad9c <HAL_GetTick>
 800fc58:	4602      	mov	r2, r0
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	1ad3      	subs	r3, r2, r3
 800fc5e:	2b02      	cmp	r3, #2
 800fc60:	d901      	bls.n	800fc66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800fc62:	2303      	movs	r3, #3
 800fc64:	e212      	b.n	801008c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800fc66:	4b41      	ldr	r3, [pc, #260]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fc68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fc6c:	f003 0302 	and.w	r3, r3, #2
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d0ef      	beq.n	800fc54 <HAL_RCC_OscConfig+0x3ec>
 800fc74:	e01b      	b.n	800fcae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fc76:	4b3d      	ldr	r3, [pc, #244]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fc78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fc7c:	4a3b      	ldr	r2, [pc, #236]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fc7e:	f023 0301 	bic.w	r3, r3, #1
 800fc82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fc86:	f7fb f889 	bl	800ad9c <HAL_GetTick>
 800fc8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800fc8c:	e008      	b.n	800fca0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fc8e:	f7fb f885 	bl	800ad9c <HAL_GetTick>
 800fc92:	4602      	mov	r2, r0
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	1ad3      	subs	r3, r2, r3
 800fc98:	2b02      	cmp	r3, #2
 800fc9a:	d901      	bls.n	800fca0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800fc9c:	2303      	movs	r3, #3
 800fc9e:	e1f5      	b.n	801008c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800fca0:	4b32      	ldr	r3, [pc, #200]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fca6:	f003 0302 	and.w	r3, r3, #2
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d1ef      	bne.n	800fc8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	f003 0304 	and.w	r3, r3, #4
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	f000 80a6 	beq.w	800fe08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800fcc0:	4b2a      	ldr	r3, [pc, #168]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fcc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d10d      	bne.n	800fce8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fccc:	4b27      	ldr	r3, [pc, #156]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fcce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcd0:	4a26      	ldr	r2, [pc, #152]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fcd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fcd6:	6593      	str	r3, [r2, #88]	; 0x58
 800fcd8:	4b24      	ldr	r3, [pc, #144]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fcda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fce0:	60bb      	str	r3, [r7, #8]
 800fce2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800fce4:	2301      	movs	r3, #1
 800fce6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fce8:	4b21      	ldr	r3, [pc, #132]	; (800fd70 <HAL_RCC_OscConfig+0x508>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d118      	bne.n	800fd26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fcf4:	4b1e      	ldr	r3, [pc, #120]	; (800fd70 <HAL_RCC_OscConfig+0x508>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	4a1d      	ldr	r2, [pc, #116]	; (800fd70 <HAL_RCC_OscConfig+0x508>)
 800fcfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fcfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fd00:	f7fb f84c 	bl	800ad9c <HAL_GetTick>
 800fd04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fd06:	e008      	b.n	800fd1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fd08:	f7fb f848 	bl	800ad9c <HAL_GetTick>
 800fd0c:	4602      	mov	r2, r0
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	1ad3      	subs	r3, r2, r3
 800fd12:	2b02      	cmp	r3, #2
 800fd14:	d901      	bls.n	800fd1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800fd16:	2303      	movs	r3, #3
 800fd18:	e1b8      	b.n	801008c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fd1a:	4b15      	ldr	r3, [pc, #84]	; (800fd70 <HAL_RCC_OscConfig+0x508>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d0f0      	beq.n	800fd08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	689b      	ldr	r3, [r3, #8]
 800fd2a:	2b01      	cmp	r3, #1
 800fd2c:	d108      	bne.n	800fd40 <HAL_RCC_OscConfig+0x4d8>
 800fd2e:	4b0f      	ldr	r3, [pc, #60]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fd30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd34:	4a0d      	ldr	r2, [pc, #52]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fd36:	f043 0301 	orr.w	r3, r3, #1
 800fd3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800fd3e:	e029      	b.n	800fd94 <HAL_RCC_OscConfig+0x52c>
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	689b      	ldr	r3, [r3, #8]
 800fd44:	2b05      	cmp	r3, #5
 800fd46:	d115      	bne.n	800fd74 <HAL_RCC_OscConfig+0x50c>
 800fd48:	4b08      	ldr	r3, [pc, #32]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fd4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd4e:	4a07      	ldr	r2, [pc, #28]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fd50:	f043 0304 	orr.w	r3, r3, #4
 800fd54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800fd58:	4b04      	ldr	r3, [pc, #16]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fd5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd5e:	4a03      	ldr	r2, [pc, #12]	; (800fd6c <HAL_RCC_OscConfig+0x504>)
 800fd60:	f043 0301 	orr.w	r3, r3, #1
 800fd64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800fd68:	e014      	b.n	800fd94 <HAL_RCC_OscConfig+0x52c>
 800fd6a:	bf00      	nop
 800fd6c:	40021000 	.word	0x40021000
 800fd70:	40007000 	.word	0x40007000
 800fd74:	4b9d      	ldr	r3, [pc, #628]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800fd76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd7a:	4a9c      	ldr	r2, [pc, #624]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800fd7c:	f023 0301 	bic.w	r3, r3, #1
 800fd80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800fd84:	4b99      	ldr	r3, [pc, #612]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800fd86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd8a:	4a98      	ldr	r2, [pc, #608]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800fd8c:	f023 0304 	bic.w	r3, r3, #4
 800fd90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	689b      	ldr	r3, [r3, #8]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d016      	beq.n	800fdca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fd9c:	f7fa fffe 	bl	800ad9c <HAL_GetTick>
 800fda0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fda2:	e00a      	b.n	800fdba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fda4:	f7fa fffa 	bl	800ad9c <HAL_GetTick>
 800fda8:	4602      	mov	r2, r0
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	1ad3      	subs	r3, r2, r3
 800fdae:	f241 3288 	movw	r2, #5000	; 0x1388
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d901      	bls.n	800fdba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800fdb6:	2303      	movs	r3, #3
 800fdb8:	e168      	b.n	801008c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fdba:	4b8c      	ldr	r3, [pc, #560]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800fdbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdc0:	f003 0302 	and.w	r3, r3, #2
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d0ed      	beq.n	800fda4 <HAL_RCC_OscConfig+0x53c>
 800fdc8:	e015      	b.n	800fdf6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fdca:	f7fa ffe7 	bl	800ad9c <HAL_GetTick>
 800fdce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800fdd0:	e00a      	b.n	800fde8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fdd2:	f7fa ffe3 	bl	800ad9c <HAL_GetTick>
 800fdd6:	4602      	mov	r2, r0
 800fdd8:	693b      	ldr	r3, [r7, #16]
 800fdda:	1ad3      	subs	r3, r2, r3
 800fddc:	f241 3288 	movw	r2, #5000	; 0x1388
 800fde0:	4293      	cmp	r3, r2
 800fde2:	d901      	bls.n	800fde8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800fde4:	2303      	movs	r3, #3
 800fde6:	e151      	b.n	801008c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800fde8:	4b80      	ldr	r3, [pc, #512]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800fdea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdee:	f003 0302 	and.w	r3, r3, #2
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d1ed      	bne.n	800fdd2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800fdf6:	7ffb      	ldrb	r3, [r7, #31]
 800fdf8:	2b01      	cmp	r3, #1
 800fdfa:	d105      	bne.n	800fe08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fdfc:	4b7b      	ldr	r3, [pc, #492]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800fdfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe00:	4a7a      	ldr	r2, [pc, #488]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800fe02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fe06:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	f003 0320 	and.w	r3, r3, #32
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d03c      	beq.n	800fe8e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d01c      	beq.n	800fe56 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800fe1c:	4b73      	ldr	r3, [pc, #460]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800fe1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fe22:	4a72      	ldr	r2, [pc, #456]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800fe24:	f043 0301 	orr.w	r3, r3, #1
 800fe28:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fe2c:	f7fa ffb6 	bl	800ad9c <HAL_GetTick>
 800fe30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800fe32:	e008      	b.n	800fe46 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800fe34:	f7fa ffb2 	bl	800ad9c <HAL_GetTick>
 800fe38:	4602      	mov	r2, r0
 800fe3a:	693b      	ldr	r3, [r7, #16]
 800fe3c:	1ad3      	subs	r3, r2, r3
 800fe3e:	2b02      	cmp	r3, #2
 800fe40:	d901      	bls.n	800fe46 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800fe42:	2303      	movs	r3, #3
 800fe44:	e122      	b.n	801008c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800fe46:	4b69      	ldr	r3, [pc, #420]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800fe48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fe4c:	f003 0302 	and.w	r3, r3, #2
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d0ef      	beq.n	800fe34 <HAL_RCC_OscConfig+0x5cc>
 800fe54:	e01b      	b.n	800fe8e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800fe56:	4b65      	ldr	r3, [pc, #404]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800fe58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fe5c:	4a63      	ldr	r2, [pc, #396]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800fe5e:	f023 0301 	bic.w	r3, r3, #1
 800fe62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fe66:	f7fa ff99 	bl	800ad9c <HAL_GetTick>
 800fe6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800fe6c:	e008      	b.n	800fe80 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800fe6e:	f7fa ff95 	bl	800ad9c <HAL_GetTick>
 800fe72:	4602      	mov	r2, r0
 800fe74:	693b      	ldr	r3, [r7, #16]
 800fe76:	1ad3      	subs	r3, r2, r3
 800fe78:	2b02      	cmp	r3, #2
 800fe7a:	d901      	bls.n	800fe80 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800fe7c:	2303      	movs	r3, #3
 800fe7e:	e105      	b.n	801008c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800fe80:	4b5a      	ldr	r3, [pc, #360]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800fe82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fe86:	f003 0302 	and.w	r3, r3, #2
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d1ef      	bne.n	800fe6e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	f000 80f9 	beq.w	801008a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe9c:	2b02      	cmp	r3, #2
 800fe9e:	f040 80cf 	bne.w	8010040 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800fea2:	4b52      	ldr	r3, [pc, #328]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800fea4:	68db      	ldr	r3, [r3, #12]
 800fea6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800fea8:	697b      	ldr	r3, [r7, #20]
 800feaa:	f003 0203 	and.w	r2, r3, #3
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d12c      	bne.n	800ff10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800feb6:	697b      	ldr	r3, [r7, #20]
 800feb8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fec0:	3b01      	subs	r3, #1
 800fec2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800fec4:	429a      	cmp	r2, r3
 800fec6:	d123      	bne.n	800ff10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fed2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800fed4:	429a      	cmp	r2, r3
 800fed6:	d11b      	bne.n	800ff10 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fee2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800fee4:	429a      	cmp	r2, r3
 800fee6:	d113      	bne.n	800ff10 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fef2:	085b      	lsrs	r3, r3, #1
 800fef4:	3b01      	subs	r3, #1
 800fef6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800fef8:	429a      	cmp	r2, r3
 800fefa:	d109      	bne.n	800ff10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800fefc:	697b      	ldr	r3, [r7, #20]
 800fefe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff06:	085b      	lsrs	r3, r3, #1
 800ff08:	3b01      	subs	r3, #1
 800ff0a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ff0c:	429a      	cmp	r2, r3
 800ff0e:	d071      	beq.n	800fff4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ff10:	69bb      	ldr	r3, [r7, #24]
 800ff12:	2b0c      	cmp	r3, #12
 800ff14:	d068      	beq.n	800ffe8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ff16:	4b35      	ldr	r3, [pc, #212]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d105      	bne.n	800ff2e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800ff22:	4b32      	ldr	r3, [pc, #200]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d001      	beq.n	800ff32 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800ff2e:	2301      	movs	r3, #1
 800ff30:	e0ac      	b.n	801008c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ff32:	4b2e      	ldr	r3, [pc, #184]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	4a2d      	ldr	r2, [pc, #180]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800ff38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ff3c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ff3e:	f7fa ff2d 	bl	800ad9c <HAL_GetTick>
 800ff42:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ff44:	e008      	b.n	800ff58 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ff46:	f7fa ff29 	bl	800ad9c <HAL_GetTick>
 800ff4a:	4602      	mov	r2, r0
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	1ad3      	subs	r3, r2, r3
 800ff50:	2b02      	cmp	r3, #2
 800ff52:	d901      	bls.n	800ff58 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800ff54:	2303      	movs	r3, #3
 800ff56:	e099      	b.n	801008c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ff58:	4b24      	ldr	r3, [pc, #144]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d1f0      	bne.n	800ff46 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ff64:	4b21      	ldr	r3, [pc, #132]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800ff66:	68da      	ldr	r2, [r3, #12]
 800ff68:	4b21      	ldr	r3, [pc, #132]	; (800fff0 <HAL_RCC_OscConfig+0x788>)
 800ff6a:	4013      	ands	r3, r2
 800ff6c:	687a      	ldr	r2, [r7, #4]
 800ff6e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800ff70:	687a      	ldr	r2, [r7, #4]
 800ff72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ff74:	3a01      	subs	r2, #1
 800ff76:	0112      	lsls	r2, r2, #4
 800ff78:	4311      	orrs	r1, r2
 800ff7a:	687a      	ldr	r2, [r7, #4]
 800ff7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ff7e:	0212      	lsls	r2, r2, #8
 800ff80:	4311      	orrs	r1, r2
 800ff82:	687a      	ldr	r2, [r7, #4]
 800ff84:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ff86:	0852      	lsrs	r2, r2, #1
 800ff88:	3a01      	subs	r2, #1
 800ff8a:	0552      	lsls	r2, r2, #21
 800ff8c:	4311      	orrs	r1, r2
 800ff8e:	687a      	ldr	r2, [r7, #4]
 800ff90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ff92:	0852      	lsrs	r2, r2, #1
 800ff94:	3a01      	subs	r2, #1
 800ff96:	0652      	lsls	r2, r2, #25
 800ff98:	4311      	orrs	r1, r2
 800ff9a:	687a      	ldr	r2, [r7, #4]
 800ff9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ff9e:	06d2      	lsls	r2, r2, #27
 800ffa0:	430a      	orrs	r2, r1
 800ffa2:	4912      	ldr	r1, [pc, #72]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800ffa4:	4313      	orrs	r3, r2
 800ffa6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ffa8:	4b10      	ldr	r3, [pc, #64]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	4a0f      	ldr	r2, [pc, #60]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800ffae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ffb2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ffb4:	4b0d      	ldr	r3, [pc, #52]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800ffb6:	68db      	ldr	r3, [r3, #12]
 800ffb8:	4a0c      	ldr	r2, [pc, #48]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800ffba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ffbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ffc0:	f7fa feec 	bl	800ad9c <HAL_GetTick>
 800ffc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ffc6:	e008      	b.n	800ffda <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ffc8:	f7fa fee8 	bl	800ad9c <HAL_GetTick>
 800ffcc:	4602      	mov	r2, r0
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	1ad3      	subs	r3, r2, r3
 800ffd2:	2b02      	cmp	r3, #2
 800ffd4:	d901      	bls.n	800ffda <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800ffd6:	2303      	movs	r3, #3
 800ffd8:	e058      	b.n	801008c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ffda:	4b04      	ldr	r3, [pc, #16]	; (800ffec <HAL_RCC_OscConfig+0x784>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d0f0      	beq.n	800ffc8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ffe6:	e050      	b.n	801008a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800ffe8:	2301      	movs	r3, #1
 800ffea:	e04f      	b.n	801008c <HAL_RCC_OscConfig+0x824>
 800ffec:	40021000 	.word	0x40021000
 800fff0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fff4:	4b27      	ldr	r3, [pc, #156]	; (8010094 <HAL_RCC_OscConfig+0x82c>)
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d144      	bne.n	801008a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8010000:	4b24      	ldr	r3, [pc, #144]	; (8010094 <HAL_RCC_OscConfig+0x82c>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	4a23      	ldr	r2, [pc, #140]	; (8010094 <HAL_RCC_OscConfig+0x82c>)
 8010006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801000a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801000c:	4b21      	ldr	r3, [pc, #132]	; (8010094 <HAL_RCC_OscConfig+0x82c>)
 801000e:	68db      	ldr	r3, [r3, #12]
 8010010:	4a20      	ldr	r2, [pc, #128]	; (8010094 <HAL_RCC_OscConfig+0x82c>)
 8010012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010016:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8010018:	f7fa fec0 	bl	800ad9c <HAL_GetTick>
 801001c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801001e:	e008      	b.n	8010032 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010020:	f7fa febc 	bl	800ad9c <HAL_GetTick>
 8010024:	4602      	mov	r2, r0
 8010026:	693b      	ldr	r3, [r7, #16]
 8010028:	1ad3      	subs	r3, r2, r3
 801002a:	2b02      	cmp	r3, #2
 801002c:	d901      	bls.n	8010032 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 801002e:	2303      	movs	r3, #3
 8010030:	e02c      	b.n	801008c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010032:	4b18      	ldr	r3, [pc, #96]	; (8010094 <HAL_RCC_OscConfig+0x82c>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801003a:	2b00      	cmp	r3, #0
 801003c:	d0f0      	beq.n	8010020 <HAL_RCC_OscConfig+0x7b8>
 801003e:	e024      	b.n	801008a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8010040:	69bb      	ldr	r3, [r7, #24]
 8010042:	2b0c      	cmp	r3, #12
 8010044:	d01f      	beq.n	8010086 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010046:	4b13      	ldr	r3, [pc, #76]	; (8010094 <HAL_RCC_OscConfig+0x82c>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	4a12      	ldr	r2, [pc, #72]	; (8010094 <HAL_RCC_OscConfig+0x82c>)
 801004c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010052:	f7fa fea3 	bl	800ad9c <HAL_GetTick>
 8010056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010058:	e008      	b.n	801006c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801005a:	f7fa fe9f 	bl	800ad9c <HAL_GetTick>
 801005e:	4602      	mov	r2, r0
 8010060:	693b      	ldr	r3, [r7, #16]
 8010062:	1ad3      	subs	r3, r2, r3
 8010064:	2b02      	cmp	r3, #2
 8010066:	d901      	bls.n	801006c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8010068:	2303      	movs	r3, #3
 801006a:	e00f      	b.n	801008c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801006c:	4b09      	ldr	r3, [pc, #36]	; (8010094 <HAL_RCC_OscConfig+0x82c>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010074:	2b00      	cmp	r3, #0
 8010076:	d1f0      	bne.n	801005a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8010078:	4b06      	ldr	r3, [pc, #24]	; (8010094 <HAL_RCC_OscConfig+0x82c>)
 801007a:	68da      	ldr	r2, [r3, #12]
 801007c:	4905      	ldr	r1, [pc, #20]	; (8010094 <HAL_RCC_OscConfig+0x82c>)
 801007e:	4b06      	ldr	r3, [pc, #24]	; (8010098 <HAL_RCC_OscConfig+0x830>)
 8010080:	4013      	ands	r3, r2
 8010082:	60cb      	str	r3, [r1, #12]
 8010084:	e001      	b.n	801008a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8010086:	2301      	movs	r3, #1
 8010088:	e000      	b.n	801008c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 801008a:	2300      	movs	r3, #0
}
 801008c:	4618      	mov	r0, r3
 801008e:	3720      	adds	r7, #32
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}
 8010094:	40021000 	.word	0x40021000
 8010098:	feeefffc 	.word	0xfeeefffc

0801009c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b084      	sub	sp, #16
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d101      	bne.n	80100b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80100ac:	2301      	movs	r3, #1
 80100ae:	e0e7      	b.n	8010280 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80100b0:	4b75      	ldr	r3, [pc, #468]	; (8010288 <HAL_RCC_ClockConfig+0x1ec>)
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	f003 0307 	and.w	r3, r3, #7
 80100b8:	683a      	ldr	r2, [r7, #0]
 80100ba:	429a      	cmp	r2, r3
 80100bc:	d910      	bls.n	80100e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80100be:	4b72      	ldr	r3, [pc, #456]	; (8010288 <HAL_RCC_ClockConfig+0x1ec>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	f023 0207 	bic.w	r2, r3, #7
 80100c6:	4970      	ldr	r1, [pc, #448]	; (8010288 <HAL_RCC_ClockConfig+0x1ec>)
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	4313      	orrs	r3, r2
 80100cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80100ce:	4b6e      	ldr	r3, [pc, #440]	; (8010288 <HAL_RCC_ClockConfig+0x1ec>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f003 0307 	and.w	r3, r3, #7
 80100d6:	683a      	ldr	r2, [r7, #0]
 80100d8:	429a      	cmp	r2, r3
 80100da:	d001      	beq.n	80100e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80100dc:	2301      	movs	r3, #1
 80100de:	e0cf      	b.n	8010280 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	f003 0302 	and.w	r3, r3, #2
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d010      	beq.n	801010e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	689a      	ldr	r2, [r3, #8]
 80100f0:	4b66      	ldr	r3, [pc, #408]	; (801028c <HAL_RCC_ClockConfig+0x1f0>)
 80100f2:	689b      	ldr	r3, [r3, #8]
 80100f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80100f8:	429a      	cmp	r2, r3
 80100fa:	d908      	bls.n	801010e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80100fc:	4b63      	ldr	r3, [pc, #396]	; (801028c <HAL_RCC_ClockConfig+0x1f0>)
 80100fe:	689b      	ldr	r3, [r3, #8]
 8010100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	689b      	ldr	r3, [r3, #8]
 8010108:	4960      	ldr	r1, [pc, #384]	; (801028c <HAL_RCC_ClockConfig+0x1f0>)
 801010a:	4313      	orrs	r3, r2
 801010c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	f003 0301 	and.w	r3, r3, #1
 8010116:	2b00      	cmp	r3, #0
 8010118:	d04c      	beq.n	80101b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	685b      	ldr	r3, [r3, #4]
 801011e:	2b03      	cmp	r3, #3
 8010120:	d107      	bne.n	8010132 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010122:	4b5a      	ldr	r3, [pc, #360]	; (801028c <HAL_RCC_ClockConfig+0x1f0>)
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801012a:	2b00      	cmp	r3, #0
 801012c:	d121      	bne.n	8010172 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 801012e:	2301      	movs	r3, #1
 8010130:	e0a6      	b.n	8010280 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	685b      	ldr	r3, [r3, #4]
 8010136:	2b02      	cmp	r3, #2
 8010138:	d107      	bne.n	801014a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801013a:	4b54      	ldr	r3, [pc, #336]	; (801028c <HAL_RCC_ClockConfig+0x1f0>)
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010142:	2b00      	cmp	r3, #0
 8010144:	d115      	bne.n	8010172 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8010146:	2301      	movs	r3, #1
 8010148:	e09a      	b.n	8010280 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	685b      	ldr	r3, [r3, #4]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d107      	bne.n	8010162 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010152:	4b4e      	ldr	r3, [pc, #312]	; (801028c <HAL_RCC_ClockConfig+0x1f0>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	f003 0302 	and.w	r3, r3, #2
 801015a:	2b00      	cmp	r3, #0
 801015c:	d109      	bne.n	8010172 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801015e:	2301      	movs	r3, #1
 8010160:	e08e      	b.n	8010280 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010162:	4b4a      	ldr	r3, [pc, #296]	; (801028c <HAL_RCC_ClockConfig+0x1f0>)
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801016a:	2b00      	cmp	r3, #0
 801016c:	d101      	bne.n	8010172 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 801016e:	2301      	movs	r3, #1
 8010170:	e086      	b.n	8010280 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010172:	4b46      	ldr	r3, [pc, #280]	; (801028c <HAL_RCC_ClockConfig+0x1f0>)
 8010174:	689b      	ldr	r3, [r3, #8]
 8010176:	f023 0203 	bic.w	r2, r3, #3
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	685b      	ldr	r3, [r3, #4]
 801017e:	4943      	ldr	r1, [pc, #268]	; (801028c <HAL_RCC_ClockConfig+0x1f0>)
 8010180:	4313      	orrs	r3, r2
 8010182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010184:	f7fa fe0a 	bl	800ad9c <HAL_GetTick>
 8010188:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801018a:	e00a      	b.n	80101a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801018c:	f7fa fe06 	bl	800ad9c <HAL_GetTick>
 8010190:	4602      	mov	r2, r0
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	1ad3      	subs	r3, r2, r3
 8010196:	f241 3288 	movw	r2, #5000	; 0x1388
 801019a:	4293      	cmp	r3, r2
 801019c:	d901      	bls.n	80101a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 801019e:	2303      	movs	r3, #3
 80101a0:	e06e      	b.n	8010280 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80101a2:	4b3a      	ldr	r3, [pc, #232]	; (801028c <HAL_RCC_ClockConfig+0x1f0>)
 80101a4:	689b      	ldr	r3, [r3, #8]
 80101a6:	f003 020c 	and.w	r2, r3, #12
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	685b      	ldr	r3, [r3, #4]
 80101ae:	009b      	lsls	r3, r3, #2
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d1eb      	bne.n	801018c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	f003 0302 	and.w	r3, r3, #2
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d010      	beq.n	80101e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	689a      	ldr	r2, [r3, #8]
 80101c4:	4b31      	ldr	r3, [pc, #196]	; (801028c <HAL_RCC_ClockConfig+0x1f0>)
 80101c6:	689b      	ldr	r3, [r3, #8]
 80101c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80101cc:	429a      	cmp	r2, r3
 80101ce:	d208      	bcs.n	80101e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80101d0:	4b2e      	ldr	r3, [pc, #184]	; (801028c <HAL_RCC_ClockConfig+0x1f0>)
 80101d2:	689b      	ldr	r3, [r3, #8]
 80101d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	689b      	ldr	r3, [r3, #8]
 80101dc:	492b      	ldr	r1, [pc, #172]	; (801028c <HAL_RCC_ClockConfig+0x1f0>)
 80101de:	4313      	orrs	r3, r2
 80101e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80101e2:	4b29      	ldr	r3, [pc, #164]	; (8010288 <HAL_RCC_ClockConfig+0x1ec>)
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	f003 0307 	and.w	r3, r3, #7
 80101ea:	683a      	ldr	r2, [r7, #0]
 80101ec:	429a      	cmp	r2, r3
 80101ee:	d210      	bcs.n	8010212 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80101f0:	4b25      	ldr	r3, [pc, #148]	; (8010288 <HAL_RCC_ClockConfig+0x1ec>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	f023 0207 	bic.w	r2, r3, #7
 80101f8:	4923      	ldr	r1, [pc, #140]	; (8010288 <HAL_RCC_ClockConfig+0x1ec>)
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	4313      	orrs	r3, r2
 80101fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010200:	4b21      	ldr	r3, [pc, #132]	; (8010288 <HAL_RCC_ClockConfig+0x1ec>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	f003 0307 	and.w	r3, r3, #7
 8010208:	683a      	ldr	r2, [r7, #0]
 801020a:	429a      	cmp	r2, r3
 801020c:	d001      	beq.n	8010212 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 801020e:	2301      	movs	r3, #1
 8010210:	e036      	b.n	8010280 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	f003 0304 	and.w	r3, r3, #4
 801021a:	2b00      	cmp	r3, #0
 801021c:	d008      	beq.n	8010230 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801021e:	4b1b      	ldr	r3, [pc, #108]	; (801028c <HAL_RCC_ClockConfig+0x1f0>)
 8010220:	689b      	ldr	r3, [r3, #8]
 8010222:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	68db      	ldr	r3, [r3, #12]
 801022a:	4918      	ldr	r1, [pc, #96]	; (801028c <HAL_RCC_ClockConfig+0x1f0>)
 801022c:	4313      	orrs	r3, r2
 801022e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	f003 0308 	and.w	r3, r3, #8
 8010238:	2b00      	cmp	r3, #0
 801023a:	d009      	beq.n	8010250 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801023c:	4b13      	ldr	r3, [pc, #76]	; (801028c <HAL_RCC_ClockConfig+0x1f0>)
 801023e:	689b      	ldr	r3, [r3, #8]
 8010240:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	691b      	ldr	r3, [r3, #16]
 8010248:	00db      	lsls	r3, r3, #3
 801024a:	4910      	ldr	r1, [pc, #64]	; (801028c <HAL_RCC_ClockConfig+0x1f0>)
 801024c:	4313      	orrs	r3, r2
 801024e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8010250:	f000 f824 	bl	801029c <HAL_RCC_GetSysClockFreq>
 8010254:	4602      	mov	r2, r0
 8010256:	4b0d      	ldr	r3, [pc, #52]	; (801028c <HAL_RCC_ClockConfig+0x1f0>)
 8010258:	689b      	ldr	r3, [r3, #8]
 801025a:	091b      	lsrs	r3, r3, #4
 801025c:	f003 030f 	and.w	r3, r3, #15
 8010260:	490b      	ldr	r1, [pc, #44]	; (8010290 <HAL_RCC_ClockConfig+0x1f4>)
 8010262:	5ccb      	ldrb	r3, [r1, r3]
 8010264:	f003 031f 	and.w	r3, r3, #31
 8010268:	fa22 f303 	lsr.w	r3, r2, r3
 801026c:	4a09      	ldr	r2, [pc, #36]	; (8010294 <HAL_RCC_ClockConfig+0x1f8>)
 801026e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8010270:	4b09      	ldr	r3, [pc, #36]	; (8010298 <HAL_RCC_ClockConfig+0x1fc>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	4618      	mov	r0, r3
 8010276:	f7fa fd41 	bl	800acfc <HAL_InitTick>
 801027a:	4603      	mov	r3, r0
 801027c:	72fb      	strb	r3, [r7, #11]

  return status;
 801027e:	7afb      	ldrb	r3, [r7, #11]
}
 8010280:	4618      	mov	r0, r3
 8010282:	3710      	adds	r7, #16
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}
 8010288:	40022000 	.word	0x40022000
 801028c:	40021000 	.word	0x40021000
 8010290:	0801a098 	.word	0x0801a098
 8010294:	20000194 	.word	0x20000194
 8010298:	20000550 	.word	0x20000550

0801029c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801029c:	b480      	push	{r7}
 801029e:	b089      	sub	sp, #36	; 0x24
 80102a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80102a2:	2300      	movs	r3, #0
 80102a4:	61fb      	str	r3, [r7, #28]
 80102a6:	2300      	movs	r3, #0
 80102a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80102aa:	4b3e      	ldr	r3, [pc, #248]	; (80103a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80102ac:	689b      	ldr	r3, [r3, #8]
 80102ae:	f003 030c 	and.w	r3, r3, #12
 80102b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80102b4:	4b3b      	ldr	r3, [pc, #236]	; (80103a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80102b6:	68db      	ldr	r3, [r3, #12]
 80102b8:	f003 0303 	and.w	r3, r3, #3
 80102bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d005      	beq.n	80102d0 <HAL_RCC_GetSysClockFreq+0x34>
 80102c4:	693b      	ldr	r3, [r7, #16]
 80102c6:	2b0c      	cmp	r3, #12
 80102c8:	d121      	bne.n	801030e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	2b01      	cmp	r3, #1
 80102ce:	d11e      	bne.n	801030e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80102d0:	4b34      	ldr	r3, [pc, #208]	; (80103a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	f003 0308 	and.w	r3, r3, #8
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d107      	bne.n	80102ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80102dc:	4b31      	ldr	r3, [pc, #196]	; (80103a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80102de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80102e2:	0a1b      	lsrs	r3, r3, #8
 80102e4:	f003 030f 	and.w	r3, r3, #15
 80102e8:	61fb      	str	r3, [r7, #28]
 80102ea:	e005      	b.n	80102f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80102ec:	4b2d      	ldr	r3, [pc, #180]	; (80103a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	091b      	lsrs	r3, r3, #4
 80102f2:	f003 030f 	and.w	r3, r3, #15
 80102f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80102f8:	4a2b      	ldr	r2, [pc, #172]	; (80103a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80102fa:	69fb      	ldr	r3, [r7, #28]
 80102fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010300:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8010302:	693b      	ldr	r3, [r7, #16]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d10d      	bne.n	8010324 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8010308:	69fb      	ldr	r3, [r7, #28]
 801030a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801030c:	e00a      	b.n	8010324 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 801030e:	693b      	ldr	r3, [r7, #16]
 8010310:	2b04      	cmp	r3, #4
 8010312:	d102      	bne.n	801031a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8010314:	4b25      	ldr	r3, [pc, #148]	; (80103ac <HAL_RCC_GetSysClockFreq+0x110>)
 8010316:	61bb      	str	r3, [r7, #24]
 8010318:	e004      	b.n	8010324 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 801031a:	693b      	ldr	r3, [r7, #16]
 801031c:	2b08      	cmp	r3, #8
 801031e:	d101      	bne.n	8010324 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8010320:	4b23      	ldr	r3, [pc, #140]	; (80103b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8010322:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8010324:	693b      	ldr	r3, [r7, #16]
 8010326:	2b0c      	cmp	r3, #12
 8010328:	d134      	bne.n	8010394 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801032a:	4b1e      	ldr	r3, [pc, #120]	; (80103a4 <HAL_RCC_GetSysClockFreq+0x108>)
 801032c:	68db      	ldr	r3, [r3, #12]
 801032e:	f003 0303 	and.w	r3, r3, #3
 8010332:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	2b02      	cmp	r3, #2
 8010338:	d003      	beq.n	8010342 <HAL_RCC_GetSysClockFreq+0xa6>
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	2b03      	cmp	r3, #3
 801033e:	d003      	beq.n	8010348 <HAL_RCC_GetSysClockFreq+0xac>
 8010340:	e005      	b.n	801034e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8010342:	4b1a      	ldr	r3, [pc, #104]	; (80103ac <HAL_RCC_GetSysClockFreq+0x110>)
 8010344:	617b      	str	r3, [r7, #20]
      break;
 8010346:	e005      	b.n	8010354 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8010348:	4b19      	ldr	r3, [pc, #100]	; (80103b0 <HAL_RCC_GetSysClockFreq+0x114>)
 801034a:	617b      	str	r3, [r7, #20]
      break;
 801034c:	e002      	b.n	8010354 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 801034e:	69fb      	ldr	r3, [r7, #28]
 8010350:	617b      	str	r3, [r7, #20]
      break;
 8010352:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8010354:	4b13      	ldr	r3, [pc, #76]	; (80103a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8010356:	68db      	ldr	r3, [r3, #12]
 8010358:	091b      	lsrs	r3, r3, #4
 801035a:	f003 0307 	and.w	r3, r3, #7
 801035e:	3301      	adds	r3, #1
 8010360:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8010362:	4b10      	ldr	r3, [pc, #64]	; (80103a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8010364:	68db      	ldr	r3, [r3, #12]
 8010366:	0a1b      	lsrs	r3, r3, #8
 8010368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801036c:	697a      	ldr	r2, [r7, #20]
 801036e:	fb03 f202 	mul.w	r2, r3, r2
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	fbb2 f3f3 	udiv	r3, r2, r3
 8010378:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801037a:	4b0a      	ldr	r3, [pc, #40]	; (80103a4 <HAL_RCC_GetSysClockFreq+0x108>)
 801037c:	68db      	ldr	r3, [r3, #12]
 801037e:	0e5b      	lsrs	r3, r3, #25
 8010380:	f003 0303 	and.w	r3, r3, #3
 8010384:	3301      	adds	r3, #1
 8010386:	005b      	lsls	r3, r3, #1
 8010388:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 801038a:	697a      	ldr	r2, [r7, #20]
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010392:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8010394:	69bb      	ldr	r3, [r7, #24]
}
 8010396:	4618      	mov	r0, r3
 8010398:	3724      	adds	r7, #36	; 0x24
 801039a:	46bd      	mov	sp, r7
 801039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a0:	4770      	bx	lr
 80103a2:	bf00      	nop
 80103a4:	40021000 	.word	0x40021000
 80103a8:	0801a0b0 	.word	0x0801a0b0
 80103ac:	00f42400 	.word	0x00f42400
 80103b0:	007a1200 	.word	0x007a1200

080103b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80103b4:	b480      	push	{r7}
 80103b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80103b8:	4b03      	ldr	r3, [pc, #12]	; (80103c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80103ba:	681b      	ldr	r3, [r3, #0]
}
 80103bc:	4618      	mov	r0, r3
 80103be:	46bd      	mov	sp, r7
 80103c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c4:	4770      	bx	lr
 80103c6:	bf00      	nop
 80103c8:	20000194 	.word	0x20000194

080103cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80103d0:	f7ff fff0 	bl	80103b4 <HAL_RCC_GetHCLKFreq>
 80103d4:	4602      	mov	r2, r0
 80103d6:	4b06      	ldr	r3, [pc, #24]	; (80103f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80103d8:	689b      	ldr	r3, [r3, #8]
 80103da:	0a1b      	lsrs	r3, r3, #8
 80103dc:	f003 0307 	and.w	r3, r3, #7
 80103e0:	4904      	ldr	r1, [pc, #16]	; (80103f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80103e2:	5ccb      	ldrb	r3, [r1, r3]
 80103e4:	f003 031f 	and.w	r3, r3, #31
 80103e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80103ec:	4618      	mov	r0, r3
 80103ee:	bd80      	pop	{r7, pc}
 80103f0:	40021000 	.word	0x40021000
 80103f4:	0801a0a8 	.word	0x0801a0a8

080103f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80103fc:	f7ff ffda 	bl	80103b4 <HAL_RCC_GetHCLKFreq>
 8010400:	4602      	mov	r2, r0
 8010402:	4b06      	ldr	r3, [pc, #24]	; (801041c <HAL_RCC_GetPCLK2Freq+0x24>)
 8010404:	689b      	ldr	r3, [r3, #8]
 8010406:	0adb      	lsrs	r3, r3, #11
 8010408:	f003 0307 	and.w	r3, r3, #7
 801040c:	4904      	ldr	r1, [pc, #16]	; (8010420 <HAL_RCC_GetPCLK2Freq+0x28>)
 801040e:	5ccb      	ldrb	r3, [r1, r3]
 8010410:	f003 031f 	and.w	r3, r3, #31
 8010414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010418:	4618      	mov	r0, r3
 801041a:	bd80      	pop	{r7, pc}
 801041c:	40021000 	.word	0x40021000
 8010420:	0801a0a8 	.word	0x0801a0a8

08010424 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b086      	sub	sp, #24
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 801042c:	2300      	movs	r3, #0
 801042e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8010430:	4b2a      	ldr	r3, [pc, #168]	; (80104dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010438:	2b00      	cmp	r3, #0
 801043a:	d003      	beq.n	8010444 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 801043c:	f7ff f886 	bl	800f54c <HAL_PWREx_GetVoltageRange>
 8010440:	6178      	str	r0, [r7, #20]
 8010442:	e014      	b.n	801046e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8010444:	4b25      	ldr	r3, [pc, #148]	; (80104dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010448:	4a24      	ldr	r2, [pc, #144]	; (80104dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801044a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801044e:	6593      	str	r3, [r2, #88]	; 0x58
 8010450:	4b22      	ldr	r3, [pc, #136]	; (80104dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010458:	60fb      	str	r3, [r7, #12]
 801045a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 801045c:	f7ff f876 	bl	800f54c <HAL_PWREx_GetVoltageRange>
 8010460:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8010462:	4b1e      	ldr	r3, [pc, #120]	; (80104dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010466:	4a1d      	ldr	r2, [pc, #116]	; (80104dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801046c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 801046e:	697b      	ldr	r3, [r7, #20]
 8010470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010474:	d10b      	bne.n	801048e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2b80      	cmp	r3, #128	; 0x80
 801047a:	d919      	bls.n	80104b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2ba0      	cmp	r3, #160	; 0xa0
 8010480:	d902      	bls.n	8010488 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8010482:	2302      	movs	r3, #2
 8010484:	613b      	str	r3, [r7, #16]
 8010486:	e013      	b.n	80104b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8010488:	2301      	movs	r3, #1
 801048a:	613b      	str	r3, [r7, #16]
 801048c:	e010      	b.n	80104b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	2b80      	cmp	r3, #128	; 0x80
 8010492:	d902      	bls.n	801049a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8010494:	2303      	movs	r3, #3
 8010496:	613b      	str	r3, [r7, #16]
 8010498:	e00a      	b.n	80104b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2b80      	cmp	r3, #128	; 0x80
 801049e:	d102      	bne.n	80104a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80104a0:	2302      	movs	r3, #2
 80104a2:	613b      	str	r3, [r7, #16]
 80104a4:	e004      	b.n	80104b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2b70      	cmp	r3, #112	; 0x70
 80104aa:	d101      	bne.n	80104b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80104ac:	2301      	movs	r3, #1
 80104ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80104b0:	4b0b      	ldr	r3, [pc, #44]	; (80104e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	f023 0207 	bic.w	r2, r3, #7
 80104b8:	4909      	ldr	r1, [pc, #36]	; (80104e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80104ba:	693b      	ldr	r3, [r7, #16]
 80104bc:	4313      	orrs	r3, r2
 80104be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80104c0:	4b07      	ldr	r3, [pc, #28]	; (80104e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	f003 0307 	and.w	r3, r3, #7
 80104c8:	693a      	ldr	r2, [r7, #16]
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d001      	beq.n	80104d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80104ce:	2301      	movs	r3, #1
 80104d0:	e000      	b.n	80104d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80104d2:	2300      	movs	r3, #0
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	3718      	adds	r7, #24
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}
 80104dc:	40021000 	.word	0x40021000
 80104e0:	40022000 	.word	0x40022000

080104e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b086      	sub	sp, #24
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80104ec:	2300      	movs	r3, #0
 80104ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80104f0:	2300      	movs	r3, #0
 80104f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d041      	beq.n	8010584 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010504:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8010508:	d02a      	beq.n	8010560 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 801050a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801050e:	d824      	bhi.n	801055a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010510:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010514:	d008      	beq.n	8010528 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8010516:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801051a:	d81e      	bhi.n	801055a <HAL_RCCEx_PeriphCLKConfig+0x76>
 801051c:	2b00      	cmp	r3, #0
 801051e:	d00a      	beq.n	8010536 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8010520:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010524:	d010      	beq.n	8010548 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010526:	e018      	b.n	801055a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8010528:	4b86      	ldr	r3, [pc, #536]	; (8010744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801052a:	68db      	ldr	r3, [r3, #12]
 801052c:	4a85      	ldr	r2, [pc, #532]	; (8010744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801052e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010532:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8010534:	e015      	b.n	8010562 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	3304      	adds	r3, #4
 801053a:	2100      	movs	r1, #0
 801053c:	4618      	mov	r0, r3
 801053e:	f001 f895 	bl	801166c <RCCEx_PLLSAI1_Config>
 8010542:	4603      	mov	r3, r0
 8010544:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8010546:	e00c      	b.n	8010562 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	3320      	adds	r3, #32
 801054c:	2100      	movs	r1, #0
 801054e:	4618      	mov	r0, r3
 8010550:	f001 f97e 	bl	8011850 <RCCEx_PLLSAI2_Config>
 8010554:	4603      	mov	r3, r0
 8010556:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8010558:	e003      	b.n	8010562 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801055a:	2301      	movs	r3, #1
 801055c:	74fb      	strb	r3, [r7, #19]
      break;
 801055e:	e000      	b.n	8010562 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8010560:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010562:	7cfb      	ldrb	r3, [r7, #19]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d10b      	bne.n	8010580 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010568:	4b76      	ldr	r3, [pc, #472]	; (8010744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801056a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801056e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010576:	4973      	ldr	r1, [pc, #460]	; (8010744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010578:	4313      	orrs	r3, r2
 801057a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 801057e:	e001      	b.n	8010584 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010580:	7cfb      	ldrb	r3, [r7, #19]
 8010582:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801058c:	2b00      	cmp	r3, #0
 801058e:	d041      	beq.n	8010614 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010594:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010598:	d02a      	beq.n	80105f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 801059a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801059e:	d824      	bhi.n	80105ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80105a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80105a4:	d008      	beq.n	80105b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80105a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80105aa:	d81e      	bhi.n	80105ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d00a      	beq.n	80105c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80105b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80105b4:	d010      	beq.n	80105d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80105b6:	e018      	b.n	80105ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80105b8:	4b62      	ldr	r3, [pc, #392]	; (8010744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80105ba:	68db      	ldr	r3, [r3, #12]
 80105bc:	4a61      	ldr	r2, [pc, #388]	; (8010744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80105be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80105c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80105c4:	e015      	b.n	80105f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	3304      	adds	r3, #4
 80105ca:	2100      	movs	r1, #0
 80105cc:	4618      	mov	r0, r3
 80105ce:	f001 f84d 	bl	801166c <RCCEx_PLLSAI1_Config>
 80105d2:	4603      	mov	r3, r0
 80105d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80105d6:	e00c      	b.n	80105f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	3320      	adds	r3, #32
 80105dc:	2100      	movs	r1, #0
 80105de:	4618      	mov	r0, r3
 80105e0:	f001 f936 	bl	8011850 <RCCEx_PLLSAI2_Config>
 80105e4:	4603      	mov	r3, r0
 80105e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80105e8:	e003      	b.n	80105f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80105ea:	2301      	movs	r3, #1
 80105ec:	74fb      	strb	r3, [r7, #19]
      break;
 80105ee:	e000      	b.n	80105f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80105f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80105f2:	7cfb      	ldrb	r3, [r7, #19]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d10b      	bne.n	8010610 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80105f8:	4b52      	ldr	r3, [pc, #328]	; (8010744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80105fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105fe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010606:	494f      	ldr	r1, [pc, #316]	; (8010744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010608:	4313      	orrs	r3, r2
 801060a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 801060e:	e001      	b.n	8010614 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010610:	7cfb      	ldrb	r3, [r7, #19]
 8010612:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801061c:	2b00      	cmp	r3, #0
 801061e:	f000 80a0 	beq.w	8010762 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010622:	2300      	movs	r3, #0
 8010624:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8010626:	4b47      	ldr	r3, [pc, #284]	; (8010744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801062a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801062e:	2b00      	cmp	r3, #0
 8010630:	d101      	bne.n	8010636 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8010632:	2301      	movs	r3, #1
 8010634:	e000      	b.n	8010638 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8010636:	2300      	movs	r3, #0
 8010638:	2b00      	cmp	r3, #0
 801063a:	d00d      	beq.n	8010658 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801063c:	4b41      	ldr	r3, [pc, #260]	; (8010744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801063e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010640:	4a40      	ldr	r2, [pc, #256]	; (8010744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010646:	6593      	str	r3, [r2, #88]	; 0x58
 8010648:	4b3e      	ldr	r3, [pc, #248]	; (8010744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801064a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010650:	60bb      	str	r3, [r7, #8]
 8010652:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010654:	2301      	movs	r3, #1
 8010656:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010658:	4b3b      	ldr	r3, [pc, #236]	; (8010748 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	4a3a      	ldr	r2, [pc, #232]	; (8010748 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 801065e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010662:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010664:	f7fa fb9a 	bl	800ad9c <HAL_GetTick>
 8010668:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 801066a:	e009      	b.n	8010680 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801066c:	f7fa fb96 	bl	800ad9c <HAL_GetTick>
 8010670:	4602      	mov	r2, r0
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	1ad3      	subs	r3, r2, r3
 8010676:	2b02      	cmp	r3, #2
 8010678:	d902      	bls.n	8010680 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 801067a:	2303      	movs	r3, #3
 801067c:	74fb      	strb	r3, [r7, #19]
        break;
 801067e:	e005      	b.n	801068c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8010680:	4b31      	ldr	r3, [pc, #196]	; (8010748 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010688:	2b00      	cmp	r3, #0
 801068a:	d0ef      	beq.n	801066c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 801068c:	7cfb      	ldrb	r3, [r7, #19]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d15c      	bne.n	801074c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8010692:	4b2c      	ldr	r3, [pc, #176]	; (8010744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801069c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d01f      	beq.n	80106e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80106aa:	697a      	ldr	r2, [r7, #20]
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d019      	beq.n	80106e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80106b0:	4b24      	ldr	r3, [pc, #144]	; (8010744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80106ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80106bc:	4b21      	ldr	r3, [pc, #132]	; (8010744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106c2:	4a20      	ldr	r2, [pc, #128]	; (8010744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80106c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80106cc:	4b1d      	ldr	r3, [pc, #116]	; (8010744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106d2:	4a1c      	ldr	r2, [pc, #112]	; (8010744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80106d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80106dc:	4a19      	ldr	r2, [pc, #100]	; (8010744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80106e4:	697b      	ldr	r3, [r7, #20]
 80106e6:	f003 0301 	and.w	r3, r3, #1
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d016      	beq.n	801071c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80106ee:	f7fa fb55 	bl	800ad9c <HAL_GetTick>
 80106f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80106f4:	e00b      	b.n	801070e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80106f6:	f7fa fb51 	bl	800ad9c <HAL_GetTick>
 80106fa:	4602      	mov	r2, r0
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	1ad3      	subs	r3, r2, r3
 8010700:	f241 3288 	movw	r2, #5000	; 0x1388
 8010704:	4293      	cmp	r3, r2
 8010706:	d902      	bls.n	801070e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8010708:	2303      	movs	r3, #3
 801070a:	74fb      	strb	r3, [r7, #19]
            break;
 801070c:	e006      	b.n	801071c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801070e:	4b0d      	ldr	r3, [pc, #52]	; (8010744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010714:	f003 0302 	and.w	r3, r3, #2
 8010718:	2b00      	cmp	r3, #0
 801071a:	d0ec      	beq.n	80106f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 801071c:	7cfb      	ldrb	r3, [r7, #19]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d10c      	bne.n	801073c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010722:	4b08      	ldr	r3, [pc, #32]	; (8010744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010728:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010732:	4904      	ldr	r1, [pc, #16]	; (8010744 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010734:	4313      	orrs	r3, r2
 8010736:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801073a:	e009      	b.n	8010750 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801073c:	7cfb      	ldrb	r3, [r7, #19]
 801073e:	74bb      	strb	r3, [r7, #18]
 8010740:	e006      	b.n	8010750 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8010742:	bf00      	nop
 8010744:	40021000 	.word	0x40021000
 8010748:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801074c:	7cfb      	ldrb	r3, [r7, #19]
 801074e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010750:	7c7b      	ldrb	r3, [r7, #17]
 8010752:	2b01      	cmp	r3, #1
 8010754:	d105      	bne.n	8010762 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010756:	4ba6      	ldr	r3, [pc, #664]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801075a:	4aa5      	ldr	r2, [pc, #660]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801075c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010760:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	f003 0301 	and.w	r3, r3, #1
 801076a:	2b00      	cmp	r3, #0
 801076c:	d00a      	beq.n	8010784 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801076e:	4ba0      	ldr	r3, [pc, #640]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010774:	f023 0203 	bic.w	r2, r3, #3
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801077c:	499c      	ldr	r1, [pc, #624]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801077e:	4313      	orrs	r3, r2
 8010780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	f003 0302 	and.w	r3, r3, #2
 801078c:	2b00      	cmp	r3, #0
 801078e:	d00a      	beq.n	80107a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8010790:	4b97      	ldr	r3, [pc, #604]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010796:	f023 020c 	bic.w	r2, r3, #12
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801079e:	4994      	ldr	r1, [pc, #592]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80107a0:	4313      	orrs	r3, r2
 80107a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	f003 0304 	and.w	r3, r3, #4
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d00a      	beq.n	80107c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80107b2:	4b8f      	ldr	r3, [pc, #572]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80107b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107c0:	498b      	ldr	r1, [pc, #556]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80107c2:	4313      	orrs	r3, r2
 80107c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	f003 0308 	and.w	r3, r3, #8
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d00a      	beq.n	80107ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80107d4:	4b86      	ldr	r3, [pc, #536]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80107d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107e2:	4983      	ldr	r1, [pc, #524]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80107e4:	4313      	orrs	r3, r2
 80107e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	f003 0310 	and.w	r3, r3, #16
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d00a      	beq.n	801080c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80107f6:	4b7e      	ldr	r3, [pc, #504]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80107f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010804:	497a      	ldr	r1, [pc, #488]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010806:	4313      	orrs	r3, r2
 8010808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	f003 0320 	and.w	r3, r3, #32
 8010814:	2b00      	cmp	r3, #0
 8010816:	d00a      	beq.n	801082e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010818:	4b75      	ldr	r3, [pc, #468]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801081a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801081e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010826:	4972      	ldr	r1, [pc, #456]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010828:	4313      	orrs	r3, r2
 801082a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010836:	2b00      	cmp	r3, #0
 8010838:	d00a      	beq.n	8010850 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801083a:	4b6d      	ldr	r3, [pc, #436]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801083c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010840:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010848:	4969      	ldr	r1, [pc, #420]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801084a:	4313      	orrs	r3, r2
 801084c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010858:	2b00      	cmp	r3, #0
 801085a:	d00a      	beq.n	8010872 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801085c:	4b64      	ldr	r3, [pc, #400]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801085e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010862:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801086a:	4961      	ldr	r1, [pc, #388]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801086c:	4313      	orrs	r3, r2
 801086e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801087a:	2b00      	cmp	r3, #0
 801087c:	d00a      	beq.n	8010894 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801087e:	4b5c      	ldr	r3, [pc, #368]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010884:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801088c:	4958      	ldr	r1, [pc, #352]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801088e:	4313      	orrs	r3, r2
 8010890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801089c:	2b00      	cmp	r3, #0
 801089e:	d00a      	beq.n	80108b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80108a0:	4b53      	ldr	r3, [pc, #332]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80108a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80108a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108ae:	4950      	ldr	r1, [pc, #320]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80108b0:	4313      	orrs	r3, r2
 80108b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d00a      	beq.n	80108d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80108c2:	4b4b      	ldr	r3, [pc, #300]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80108c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80108c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108d0:	4947      	ldr	r1, [pc, #284]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80108d2:	4313      	orrs	r3, r2
 80108d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d00a      	beq.n	80108fa <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80108e4:	4b42      	ldr	r3, [pc, #264]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80108e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80108ea:	f023 0203 	bic.w	r2, r3, #3
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80108f2:	493f      	ldr	r1, [pc, #252]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80108f4:	4313      	orrs	r3, r2
 80108f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010902:	2b00      	cmp	r3, #0
 8010904:	d028      	beq.n	8010958 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010906:	4b3a      	ldr	r3, [pc, #232]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801090c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010914:	4936      	ldr	r1, [pc, #216]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010916:	4313      	orrs	r3, r2
 8010918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010920:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010924:	d106      	bne.n	8010934 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010926:	4b32      	ldr	r3, [pc, #200]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010928:	68db      	ldr	r3, [r3, #12]
 801092a:	4a31      	ldr	r2, [pc, #196]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801092c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010930:	60d3      	str	r3, [r2, #12]
 8010932:	e011      	b.n	8010958 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010938:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801093c:	d10c      	bne.n	8010958 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	3304      	adds	r3, #4
 8010942:	2101      	movs	r1, #1
 8010944:	4618      	mov	r0, r3
 8010946:	f000 fe91 	bl	801166c <RCCEx_PLLSAI1_Config>
 801094a:	4603      	mov	r3, r0
 801094c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 801094e:	7cfb      	ldrb	r3, [r7, #19]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d001      	beq.n	8010958 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8010954:	7cfb      	ldrb	r3, [r7, #19]
 8010956:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010960:	2b00      	cmp	r3, #0
 8010962:	d028      	beq.n	80109b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8010964:	4b22      	ldr	r3, [pc, #136]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801096a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010972:	491f      	ldr	r1, [pc, #124]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010974:	4313      	orrs	r3, r2
 8010976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801097e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010982:	d106      	bne.n	8010992 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010984:	4b1a      	ldr	r3, [pc, #104]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8010986:	68db      	ldr	r3, [r3, #12]
 8010988:	4a19      	ldr	r2, [pc, #100]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801098a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801098e:	60d3      	str	r3, [r2, #12]
 8010990:	e011      	b.n	80109b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010996:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801099a:	d10c      	bne.n	80109b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	3304      	adds	r3, #4
 80109a0:	2101      	movs	r1, #1
 80109a2:	4618      	mov	r0, r3
 80109a4:	f000 fe62 	bl	801166c <RCCEx_PLLSAI1_Config>
 80109a8:	4603      	mov	r3, r0
 80109aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80109ac:	7cfb      	ldrb	r3, [r7, #19]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d001      	beq.n	80109b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80109b2:	7cfb      	ldrb	r3, [r7, #19]
 80109b4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d02a      	beq.n	8010a18 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80109c2:	4b0b      	ldr	r3, [pc, #44]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80109c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80109d0:	4907      	ldr	r1, [pc, #28]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80109d2:	4313      	orrs	r3, r2
 80109d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80109dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80109e0:	d108      	bne.n	80109f4 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80109e2:	4b03      	ldr	r3, [pc, #12]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80109e4:	68db      	ldr	r3, [r3, #12]
 80109e6:	4a02      	ldr	r2, [pc, #8]	; (80109f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80109e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80109ec:	60d3      	str	r3, [r2, #12]
 80109ee:	e013      	b.n	8010a18 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80109f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80109f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80109fc:	d10c      	bne.n	8010a18 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	3304      	adds	r3, #4
 8010a02:	2101      	movs	r1, #1
 8010a04:	4618      	mov	r0, r3
 8010a06:	f000 fe31 	bl	801166c <RCCEx_PLLSAI1_Config>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010a0e:	7cfb      	ldrb	r3, [r7, #19]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d001      	beq.n	8010a18 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8010a14:	7cfb      	ldrb	r3, [r7, #19]
 8010a16:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d02f      	beq.n	8010a84 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010a24:	4b2c      	ldr	r3, [pc, #176]	; (8010ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8010a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010a32:	4929      	ldr	r1, [pc, #164]	; (8010ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8010a34:	4313      	orrs	r3, r2
 8010a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010a42:	d10d      	bne.n	8010a60 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	3304      	adds	r3, #4
 8010a48:	2102      	movs	r1, #2
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f000 fe0e 	bl	801166c <RCCEx_PLLSAI1_Config>
 8010a50:	4603      	mov	r3, r0
 8010a52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010a54:	7cfb      	ldrb	r3, [r7, #19]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d014      	beq.n	8010a84 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8010a5a:	7cfb      	ldrb	r3, [r7, #19]
 8010a5c:	74bb      	strb	r3, [r7, #18]
 8010a5e:	e011      	b.n	8010a84 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010a64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010a68:	d10c      	bne.n	8010a84 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	3320      	adds	r3, #32
 8010a6e:	2102      	movs	r1, #2
 8010a70:	4618      	mov	r0, r3
 8010a72:	f000 feed 	bl	8011850 <RCCEx_PLLSAI2_Config>
 8010a76:	4603      	mov	r3, r0
 8010a78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010a7a:	7cfb      	ldrb	r3, [r7, #19]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d001      	beq.n	8010a84 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8010a80:	7cfb      	ldrb	r3, [r7, #19]
 8010a82:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d00b      	beq.n	8010aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010a90:	4b11      	ldr	r3, [pc, #68]	; (8010ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8010a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010a96:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010aa0:	490d      	ldr	r1, [pc, #52]	; (8010ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8010aa2:	4313      	orrs	r3, r2
 8010aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d00b      	beq.n	8010acc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010ab4:	4b08      	ldr	r3, [pc, #32]	; (8010ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8010ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010aba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010ac4:	4904      	ldr	r1, [pc, #16]	; (8010ad8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8010ac6:	4313      	orrs	r3, r2
 8010ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8010acc:	7cbb      	ldrb	r3, [r7, #18]
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3718      	adds	r7, #24
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}
 8010ad6:	bf00      	nop
 8010ad8:	40021000 	.word	0x40021000

08010adc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b088      	sub	sp, #32
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010aee:	d13e      	bne.n	8010b6e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8010af0:	4bb4      	ldr	r3, [pc, #720]	; (8010dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010afa:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8010afc:	693b      	ldr	r3, [r7, #16]
 8010afe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010b02:	d028      	beq.n	8010b56 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8010b04:	693b      	ldr	r3, [r7, #16]
 8010b06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010b0a:	f200 858c 	bhi.w	8011626 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8010b0e:	693b      	ldr	r3, [r7, #16]
 8010b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b14:	d005      	beq.n	8010b22 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8010b16:	693b      	ldr	r3, [r7, #16]
 8010b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b1c:	d00e      	beq.n	8010b3c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8010b1e:	f000 bd82 	b.w	8011626 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010b22:	4ba8      	ldr	r3, [pc, #672]	; (8010dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b28:	f003 0302 	and.w	r3, r3, #2
 8010b2c:	2b02      	cmp	r3, #2
 8010b2e:	f040 857c 	bne.w	801162a <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 8010b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010b36:	61fb      	str	r3, [r7, #28]
      break;
 8010b38:	f000 bd77 	b.w	801162a <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8010b3c:	4ba1      	ldr	r3, [pc, #644]	; (8010dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010b42:	f003 0302 	and.w	r3, r3, #2
 8010b46:	2b02      	cmp	r3, #2
 8010b48:	f040 8571 	bne.w	801162e <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 8010b4c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8010b50:	61fb      	str	r3, [r7, #28]
      break;
 8010b52:	f000 bd6c 	b.w	801162e <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010b56:	4b9b      	ldr	r3, [pc, #620]	; (8010dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010b5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010b62:	f040 8566 	bne.w	8011632 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 8010b66:	4b98      	ldr	r3, [pc, #608]	; (8010dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8010b68:	61fb      	str	r3, [r7, #28]
      break;
 8010b6a:	f000 bd62 	b.w	8011632 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8010b6e:	4b95      	ldr	r3, [pc, #596]	; (8010dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010b70:	68db      	ldr	r3, [r3, #12]
 8010b72:	f003 0303 	and.w	r3, r3, #3
 8010b76:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8010b78:	697b      	ldr	r3, [r7, #20]
 8010b7a:	2b03      	cmp	r3, #3
 8010b7c:	d036      	beq.n	8010bec <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	2b03      	cmp	r3, #3
 8010b82:	d840      	bhi.n	8010c06 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8010b84:	697b      	ldr	r3, [r7, #20]
 8010b86:	2b01      	cmp	r3, #1
 8010b88:	d003      	beq.n	8010b92 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	2b02      	cmp	r3, #2
 8010b8e:	d020      	beq.n	8010bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8010b90:	e039      	b.n	8010c06 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8010b92:	4b8c      	ldr	r3, [pc, #560]	; (8010dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	f003 0302 	and.w	r3, r3, #2
 8010b9a:	2b02      	cmp	r3, #2
 8010b9c:	d116      	bne.n	8010bcc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8010b9e:	4b89      	ldr	r3, [pc, #548]	; (8010dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	f003 0308 	and.w	r3, r3, #8
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d005      	beq.n	8010bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8010baa:	4b86      	ldr	r3, [pc, #536]	; (8010dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	091b      	lsrs	r3, r3, #4
 8010bb0:	f003 030f 	and.w	r3, r3, #15
 8010bb4:	e005      	b.n	8010bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8010bb6:	4b83      	ldr	r3, [pc, #524]	; (8010dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010bbc:	0a1b      	lsrs	r3, r3, #8
 8010bbe:	f003 030f 	and.w	r3, r3, #15
 8010bc2:	4a82      	ldr	r2, [pc, #520]	; (8010dcc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8010bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010bc8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8010bca:	e01f      	b.n	8010c0c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8010bcc:	2300      	movs	r3, #0
 8010bce:	61bb      	str	r3, [r7, #24]
      break;
 8010bd0:	e01c      	b.n	8010c0c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010bd2:	4b7c      	ldr	r3, [pc, #496]	; (8010dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010bde:	d102      	bne.n	8010be6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8010be0:	4b7b      	ldr	r3, [pc, #492]	; (8010dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8010be2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8010be4:	e012      	b.n	8010c0c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8010be6:	2300      	movs	r3, #0
 8010be8:	61bb      	str	r3, [r7, #24]
      break;
 8010bea:	e00f      	b.n	8010c0c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010bec:	4b75      	ldr	r3, [pc, #468]	; (8010dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010bf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010bf8:	d102      	bne.n	8010c00 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8010bfa:	4b76      	ldr	r3, [pc, #472]	; (8010dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8010bfc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8010bfe:	e005      	b.n	8010c0c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8010c00:	2300      	movs	r3, #0
 8010c02:	61bb      	str	r3, [r7, #24]
      break;
 8010c04:	e002      	b.n	8010c0c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8010c06:	2300      	movs	r3, #0
 8010c08:	61bb      	str	r3, [r7, #24]
      break;
 8010c0a:	bf00      	nop
    }

    switch(PeriphClk)
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010c12:	f000 842a 	beq.w	801146a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010c1c:	f200 850b 	bhi.w	8011636 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8010c26:	f000 80df 	beq.w	8010de8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8010c30:	f200 8501 	bhi.w	8011636 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010c3a:	f000 80d5 	beq.w	8010de8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010c44:	f200 84f7 	bhi.w	8011636 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c4e:	f000 8377 	beq.w	8011340 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c58:	f200 84ed 	bhi.w	8011636 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c62:	f000 84c3 	beq.w	80115ec <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c6c:	f200 84e3 	bhi.w	8011636 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010c76:	f000 82e6 	beq.w	8011246 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010c80:	f200 84d9 	bhi.w	8011636 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010c8a:	f000 80ad 	beq.w	8010de8 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010c94:	f200 84cf 	bhi.w	8011636 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c9e:	f000 809b 	beq.w	8010dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ca8:	f200 84c5 	bhi.w	8011636 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010cb2:	d07f      	beq.n	8010db4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010cba:	f200 84bc 	bhi.w	8011636 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010cc4:	f000 8448 	beq.w	8011558 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010cce:	f200 84b2 	bhi.w	8011636 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010cd8:	f000 83f0 	beq.w	80114bc <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ce2:	f200 84a8 	bhi.w	8011636 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cec:	f000 8391 	beq.w	8011412 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010cf6:	f200 849e 	bhi.w	8011636 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	2b80      	cmp	r3, #128	; 0x80
 8010cfe:	f000 835c 	beq.w	80113ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2b80      	cmp	r3, #128	; 0x80
 8010d06:	f200 8496 	bhi.w	8011636 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2b20      	cmp	r3, #32
 8010d0e:	d84b      	bhi.n	8010da8 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	f000 848f 	beq.w	8011636 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	3b01      	subs	r3, #1
 8010d1c:	2b1f      	cmp	r3, #31
 8010d1e:	f200 848a 	bhi.w	8011636 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8010d22:	a201      	add	r2, pc, #4	; (adr r2, 8010d28 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 8010d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d28:	08010f3f 	.word	0x08010f3f
 8010d2c:	08010faf 	.word	0x08010faf
 8010d30:	08011637 	.word	0x08011637
 8010d34:	08011043 	.word	0x08011043
 8010d38:	08011637 	.word	0x08011637
 8010d3c:	08011637 	.word	0x08011637
 8010d40:	08011637 	.word	0x08011637
 8010d44:	080110cb 	.word	0x080110cb
 8010d48:	08011637 	.word	0x08011637
 8010d4c:	08011637 	.word	0x08011637
 8010d50:	08011637 	.word	0x08011637
 8010d54:	08011637 	.word	0x08011637
 8010d58:	08011637 	.word	0x08011637
 8010d5c:	08011637 	.word	0x08011637
 8010d60:	08011637 	.word	0x08011637
 8010d64:	08011143 	.word	0x08011143
 8010d68:	08011637 	.word	0x08011637
 8010d6c:	08011637 	.word	0x08011637
 8010d70:	08011637 	.word	0x08011637
 8010d74:	08011637 	.word	0x08011637
 8010d78:	08011637 	.word	0x08011637
 8010d7c:	08011637 	.word	0x08011637
 8010d80:	08011637 	.word	0x08011637
 8010d84:	08011637 	.word	0x08011637
 8010d88:	08011637 	.word	0x08011637
 8010d8c:	08011637 	.word	0x08011637
 8010d90:	08011637 	.word	0x08011637
 8010d94:	08011637 	.word	0x08011637
 8010d98:	08011637 	.word	0x08011637
 8010d9c:	08011637 	.word	0x08011637
 8010da0:	08011637 	.word	0x08011637
 8010da4:	080111c5 	.word	0x080111c5
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2b40      	cmp	r3, #64	; 0x40
 8010dac:	f000 82d9 	beq.w	8011362 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8010db0:	f000 bc41 	b.w	8011636 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8010db4:	69b9      	ldr	r1, [r7, #24]
 8010db6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010dba:	f000 fe25 	bl	8011a08 <RCCEx_GetSAIxPeriphCLKFreq>
 8010dbe:	61f8      	str	r0, [r7, #28]
      break;
 8010dc0:	f000 bc3a 	b.w	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8010dc4:	40021000 	.word	0x40021000
 8010dc8:	0003d090 	.word	0x0003d090
 8010dcc:	0801a0b0 	.word	0x0801a0b0
 8010dd0:	00f42400 	.word	0x00f42400
 8010dd4:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8010dd8:	69b9      	ldr	r1, [r7, #24]
 8010dda:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8010dde:	f000 fe13 	bl	8011a08 <RCCEx_GetSAIxPeriphCLKFreq>
 8010de2:	61f8      	str	r0, [r7, #28]
      break;
 8010de4:	f000 bc28 	b.w	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8010de8:	4ba6      	ldr	r3, [pc, #664]	; (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010dee:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8010df2:	613b      	str	r3, [r7, #16]
 8010df4:	693b      	ldr	r3, [r7, #16]
 8010df6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8010dfa:	d015      	beq.n	8010e28 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8010dfc:	693b      	ldr	r3, [r7, #16]
 8010dfe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8010e02:	f200 8092 	bhi.w	8010f2a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8010e06:	693b      	ldr	r3, [r7, #16]
 8010e08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010e0c:	d029      	beq.n	8010e62 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8010e0e:	693b      	ldr	r3, [r7, #16]
 8010e10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010e14:	f200 8089 	bhi.w	8010f2a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8010e18:	693b      	ldr	r3, [r7, #16]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d07b      	beq.n	8010f16 <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010e24:	d04a      	beq.n	8010ebc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 8010e26:	e080      	b.n	8010f2a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8010e28:	4b96      	ldr	r3, [pc, #600]	; (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	f003 0302 	and.w	r3, r3, #2
 8010e30:	2b02      	cmp	r3, #2
 8010e32:	d17c      	bne.n	8010f2e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8010e34:	4b93      	ldr	r3, [pc, #588]	; (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	f003 0308 	and.w	r3, r3, #8
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d005      	beq.n	8010e4c <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8010e40:	4b90      	ldr	r3, [pc, #576]	; (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	091b      	lsrs	r3, r3, #4
 8010e46:	f003 030f 	and.w	r3, r3, #15
 8010e4a:	e005      	b.n	8010e58 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8010e4c:	4b8d      	ldr	r3, [pc, #564]	; (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010e52:	0a1b      	lsrs	r3, r3, #8
 8010e54:	f003 030f 	and.w	r3, r3, #15
 8010e58:	4a8b      	ldr	r2, [pc, #556]	; (8011088 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8010e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e5e:	61fb      	str	r3, [r7, #28]
          break;
 8010e60:	e065      	b.n	8010f2e <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8010e62:	4b88      	ldr	r3, [pc, #544]	; (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010e6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010e6e:	d160      	bne.n	8010f32 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8010e70:	4b84      	ldr	r3, [pc, #528]	; (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010e72:	68db      	ldr	r3, [r3, #12]
 8010e74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010e78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010e7c:	d159      	bne.n	8010f32 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8010e7e:	4b81      	ldr	r3, [pc, #516]	; (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010e80:	68db      	ldr	r3, [r3, #12]
 8010e82:	0a1b      	lsrs	r3, r3, #8
 8010e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e88:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8010e8a:	69bb      	ldr	r3, [r7, #24]
 8010e8c:	68fa      	ldr	r2, [r7, #12]
 8010e8e:	fb03 f202 	mul.w	r2, r3, r2
 8010e92:	4b7c      	ldr	r3, [pc, #496]	; (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010e94:	68db      	ldr	r3, [r3, #12]
 8010e96:	091b      	lsrs	r3, r3, #4
 8010e98:	f003 0307 	and.w	r3, r3, #7
 8010e9c:	3301      	adds	r3, #1
 8010e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ea2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8010ea4:	4b77      	ldr	r3, [pc, #476]	; (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010ea6:	68db      	ldr	r3, [r3, #12]
 8010ea8:	0d5b      	lsrs	r3, r3, #21
 8010eaa:	f003 0303 	and.w	r3, r3, #3
 8010eae:	3301      	adds	r3, #1
 8010eb0:	005b      	lsls	r3, r3, #1
 8010eb2:	69ba      	ldr	r2, [r7, #24]
 8010eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8010eb8:	61fb      	str	r3, [r7, #28]
          break;
 8010eba:	e03a      	b.n	8010f32 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8010ebc:	4b71      	ldr	r3, [pc, #452]	; (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010ec8:	d135      	bne.n	8010f36 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8010eca:	4b6e      	ldr	r3, [pc, #440]	; (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010ecc:	691b      	ldr	r3, [r3, #16]
 8010ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010ed6:	d12e      	bne.n	8010f36 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8010ed8:	4b6a      	ldr	r3, [pc, #424]	; (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010eda:	691b      	ldr	r3, [r3, #16]
 8010edc:	0a1b      	lsrs	r3, r3, #8
 8010ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ee2:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8010ee4:	69bb      	ldr	r3, [r7, #24]
 8010ee6:	68fa      	ldr	r2, [r7, #12]
 8010ee8:	fb03 f202 	mul.w	r2, r3, r2
 8010eec:	4b65      	ldr	r3, [pc, #404]	; (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010eee:	68db      	ldr	r3, [r3, #12]
 8010ef0:	091b      	lsrs	r3, r3, #4
 8010ef2:	f003 0307 	and.w	r3, r3, #7
 8010ef6:	3301      	adds	r3, #1
 8010ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8010efc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8010efe:	4b61      	ldr	r3, [pc, #388]	; (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010f00:	691b      	ldr	r3, [r3, #16]
 8010f02:	0d5b      	lsrs	r3, r3, #21
 8010f04:	f003 0303 	and.w	r3, r3, #3
 8010f08:	3301      	adds	r3, #1
 8010f0a:	005b      	lsls	r3, r3, #1
 8010f0c:	69ba      	ldr	r2, [r7, #24]
 8010f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f12:	61fb      	str	r3, [r7, #28]
          break;
 8010f14:	e00f      	b.n	8010f36 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8010f16:	4b5b      	ldr	r3, [pc, #364]	; (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010f18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010f1c:	f003 0302 	and.w	r3, r3, #2
 8010f20:	2b02      	cmp	r3, #2
 8010f22:	d10a      	bne.n	8010f3a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 8010f24:	4b59      	ldr	r3, [pc, #356]	; (801108c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8010f26:	61fb      	str	r3, [r7, #28]
          break;
 8010f28:	e007      	b.n	8010f3a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 8010f2a:	bf00      	nop
 8010f2c:	e384      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010f2e:	bf00      	nop
 8010f30:	e382      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010f32:	bf00      	nop
 8010f34:	e380      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010f36:	bf00      	nop
 8010f38:	e37e      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010f3a:	bf00      	nop
        break;
 8010f3c:	e37c      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8010f3e:	4b51      	ldr	r3, [pc, #324]	; (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010f44:	f003 0303 	and.w	r3, r3, #3
 8010f48:	613b      	str	r3, [r7, #16]
 8010f4a:	693b      	ldr	r3, [r7, #16]
 8010f4c:	2b03      	cmp	r3, #3
 8010f4e:	d828      	bhi.n	8010fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 8010f50:	a201      	add	r2, pc, #4	; (adr r2, 8010f58 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8010f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f56:	bf00      	nop
 8010f58:	08010f69 	.word	0x08010f69
 8010f5c:	08010f71 	.word	0x08010f71
 8010f60:	08010f79 	.word	0x08010f79
 8010f64:	08010f8d 	.word	0x08010f8d
          frequency = HAL_RCC_GetPCLK2Freq();
 8010f68:	f7ff fa46 	bl	80103f8 <HAL_RCC_GetPCLK2Freq>
 8010f6c:	61f8      	str	r0, [r7, #28]
          break;
 8010f6e:	e01d      	b.n	8010fac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 8010f70:	f7ff f994 	bl	801029c <HAL_RCC_GetSysClockFreq>
 8010f74:	61f8      	str	r0, [r7, #28]
          break;
 8010f76:	e019      	b.n	8010fac <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010f78:	4b42      	ldr	r3, [pc, #264]	; (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010f84:	d10f      	bne.n	8010fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 8010f86:	4b42      	ldr	r3, [pc, #264]	; (8011090 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8010f88:	61fb      	str	r3, [r7, #28]
          break;
 8010f8a:	e00c      	b.n	8010fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8010f8c:	4b3d      	ldr	r3, [pc, #244]	; (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010f92:	f003 0302 	and.w	r3, r3, #2
 8010f96:	2b02      	cmp	r3, #2
 8010f98:	d107      	bne.n	8010faa <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 8010f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f9e:	61fb      	str	r3, [r7, #28]
          break;
 8010fa0:	e003      	b.n	8010faa <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 8010fa2:	bf00      	nop
 8010fa4:	e348      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010fa6:	bf00      	nop
 8010fa8:	e346      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8010faa:	bf00      	nop
        break;
 8010fac:	e344      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8010fae:	4b35      	ldr	r3, [pc, #212]	; (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8010fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010fb4:	f003 030c 	and.w	r3, r3, #12
 8010fb8:	613b      	str	r3, [r7, #16]
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	2b0c      	cmp	r3, #12
 8010fbe:	d83a      	bhi.n	8011036 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 8010fc0:	a201      	add	r2, pc, #4	; (adr r2, 8010fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8010fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fc6:	bf00      	nop
 8010fc8:	08010ffd 	.word	0x08010ffd
 8010fcc:	08011037 	.word	0x08011037
 8010fd0:	08011037 	.word	0x08011037
 8010fd4:	08011037 	.word	0x08011037
 8010fd8:	08011005 	.word	0x08011005
 8010fdc:	08011037 	.word	0x08011037
 8010fe0:	08011037 	.word	0x08011037
 8010fe4:	08011037 	.word	0x08011037
 8010fe8:	0801100d 	.word	0x0801100d
 8010fec:	08011037 	.word	0x08011037
 8010ff0:	08011037 	.word	0x08011037
 8010ff4:	08011037 	.word	0x08011037
 8010ff8:	08011021 	.word	0x08011021
          frequency = HAL_RCC_GetPCLK1Freq();
 8010ffc:	f7ff f9e6 	bl	80103cc <HAL_RCC_GetPCLK1Freq>
 8011000:	61f8      	str	r0, [r7, #28]
          break;
 8011002:	e01d      	b.n	8011040 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 8011004:	f7ff f94a 	bl	801029c <HAL_RCC_GetSysClockFreq>
 8011008:	61f8      	str	r0, [r7, #28]
          break;
 801100a:	e019      	b.n	8011040 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801100c:	4b1d      	ldr	r3, [pc, #116]	; (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011018:	d10f      	bne.n	801103a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 801101a:	4b1d      	ldr	r3, [pc, #116]	; (8011090 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 801101c:	61fb      	str	r3, [r7, #28]
          break;
 801101e:	e00c      	b.n	801103a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011020:	4b18      	ldr	r3, [pc, #96]	; (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011026:	f003 0302 	and.w	r3, r3, #2
 801102a:	2b02      	cmp	r3, #2
 801102c:	d107      	bne.n	801103e <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 801102e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011032:	61fb      	str	r3, [r7, #28]
          break;
 8011034:	e003      	b.n	801103e <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 8011036:	bf00      	nop
 8011038:	e2fe      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801103a:	bf00      	nop
 801103c:	e2fc      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801103e:	bf00      	nop
        break;
 8011040:	e2fa      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8011042:	4b10      	ldr	r3, [pc, #64]	; (8011084 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011048:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801104c:	613b      	str	r3, [r7, #16]
 801104e:	693b      	ldr	r3, [r7, #16]
 8011050:	2b30      	cmp	r3, #48	; 0x30
 8011052:	d029      	beq.n	80110a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	2b30      	cmp	r3, #48	; 0x30
 8011058:	d831      	bhi.n	80110be <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 801105a:	693b      	ldr	r3, [r7, #16]
 801105c:	2b20      	cmp	r3, #32
 801105e:	d019      	beq.n	8011094 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8011060:	693b      	ldr	r3, [r7, #16]
 8011062:	2b20      	cmp	r3, #32
 8011064:	d82b      	bhi.n	80110be <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8011066:	693b      	ldr	r3, [r7, #16]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d003      	beq.n	8011074 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 801106c:	693b      	ldr	r3, [r7, #16]
 801106e:	2b10      	cmp	r3, #16
 8011070:	d004      	beq.n	801107c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 8011072:	e024      	b.n	80110be <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8011074:	f7ff f9aa 	bl	80103cc <HAL_RCC_GetPCLK1Freq>
 8011078:	61f8      	str	r0, [r7, #28]
          break;
 801107a:	e025      	b.n	80110c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 801107c:	f7ff f90e 	bl	801029c <HAL_RCC_GetSysClockFreq>
 8011080:	61f8      	str	r0, [r7, #28]
          break;
 8011082:	e021      	b.n	80110c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8011084:	40021000 	.word	0x40021000
 8011088:	0801a0b0 	.word	0x0801a0b0
 801108c:	02dc6c00 	.word	0x02dc6c00
 8011090:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011094:	4b8f      	ldr	r3, [pc, #572]	; (80112d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801109c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80110a0:	d10f      	bne.n	80110c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 80110a2:	4b8d      	ldr	r3, [pc, #564]	; (80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 80110a4:	61fb      	str	r3, [r7, #28]
          break;
 80110a6:	e00c      	b.n	80110c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80110a8:	4b8a      	ldr	r3, [pc, #552]	; (80112d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80110aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80110ae:	f003 0302 	and.w	r3, r3, #2
 80110b2:	2b02      	cmp	r3, #2
 80110b4:	d107      	bne.n	80110c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 80110b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80110ba:	61fb      	str	r3, [r7, #28]
          break;
 80110bc:	e003      	b.n	80110c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 80110be:	bf00      	nop
 80110c0:	e2ba      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80110c2:	bf00      	nop
 80110c4:	e2b8      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80110c6:	bf00      	nop
        break;
 80110c8:	e2b6      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80110ca:	4b82      	ldr	r3, [pc, #520]	; (80112d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80110cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80110d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80110d4:	613b      	str	r3, [r7, #16]
 80110d6:	693b      	ldr	r3, [r7, #16]
 80110d8:	2bc0      	cmp	r3, #192	; 0xc0
 80110da:	d021      	beq.n	8011120 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 80110dc:	693b      	ldr	r3, [r7, #16]
 80110de:	2bc0      	cmp	r3, #192	; 0xc0
 80110e0:	d829      	bhi.n	8011136 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	2b80      	cmp	r3, #128	; 0x80
 80110e6:	d011      	beq.n	801110c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80110e8:	693b      	ldr	r3, [r7, #16]
 80110ea:	2b80      	cmp	r3, #128	; 0x80
 80110ec:	d823      	bhi.n	8011136 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80110ee:	693b      	ldr	r3, [r7, #16]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d003      	beq.n	80110fc <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 80110f4:	693b      	ldr	r3, [r7, #16]
 80110f6:	2b40      	cmp	r3, #64	; 0x40
 80110f8:	d004      	beq.n	8011104 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 80110fa:	e01c      	b.n	8011136 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80110fc:	f7ff f966 	bl	80103cc <HAL_RCC_GetPCLK1Freq>
 8011100:	61f8      	str	r0, [r7, #28]
          break;
 8011102:	e01d      	b.n	8011140 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 8011104:	f7ff f8ca 	bl	801029c <HAL_RCC_GetSysClockFreq>
 8011108:	61f8      	str	r0, [r7, #28]
          break;
 801110a:	e019      	b.n	8011140 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801110c:	4b71      	ldr	r3, [pc, #452]	; (80112d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011118:	d10f      	bne.n	801113a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 801111a:	4b6f      	ldr	r3, [pc, #444]	; (80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 801111c:	61fb      	str	r3, [r7, #28]
          break;
 801111e:	e00c      	b.n	801113a <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011120:	4b6c      	ldr	r3, [pc, #432]	; (80112d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011126:	f003 0302 	and.w	r3, r3, #2
 801112a:	2b02      	cmp	r3, #2
 801112c:	d107      	bne.n	801113e <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 801112e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011132:	61fb      	str	r3, [r7, #28]
          break;
 8011134:	e003      	b.n	801113e <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 8011136:	bf00      	nop
 8011138:	e27e      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801113a:	bf00      	nop
 801113c:	e27c      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801113e:	bf00      	nop
        break;
 8011140:	e27a      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8011142:	4b64      	ldr	r3, [pc, #400]	; (80112d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801114c:	613b      	str	r3, [r7, #16]
 801114e:	693b      	ldr	r3, [r7, #16]
 8011150:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011154:	d025      	beq.n	80111a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 8011156:	693b      	ldr	r3, [r7, #16]
 8011158:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801115c:	d82c      	bhi.n	80111b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 801115e:	693b      	ldr	r3, [r7, #16]
 8011160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011164:	d013      	beq.n	801118e <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8011166:	693b      	ldr	r3, [r7, #16]
 8011168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801116c:	d824      	bhi.n	80111b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 801116e:	693b      	ldr	r3, [r7, #16]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d004      	beq.n	801117e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8011174:	693b      	ldr	r3, [r7, #16]
 8011176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801117a:	d004      	beq.n	8011186 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 801117c:	e01c      	b.n	80111b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 801117e:	f7ff f925 	bl	80103cc <HAL_RCC_GetPCLK1Freq>
 8011182:	61f8      	str	r0, [r7, #28]
          break;
 8011184:	e01d      	b.n	80111c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 8011186:	f7ff f889 	bl	801029c <HAL_RCC_GetSysClockFreq>
 801118a:	61f8      	str	r0, [r7, #28]
          break;
 801118c:	e019      	b.n	80111c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801118e:	4b51      	ldr	r3, [pc, #324]	; (80112d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801119a:	d10f      	bne.n	80111bc <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 801119c:	4b4e      	ldr	r3, [pc, #312]	; (80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 801119e:	61fb      	str	r3, [r7, #28]
          break;
 80111a0:	e00c      	b.n	80111bc <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80111a2:	4b4c      	ldr	r3, [pc, #304]	; (80112d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80111a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80111a8:	f003 0302 	and.w	r3, r3, #2
 80111ac:	2b02      	cmp	r3, #2
 80111ae:	d107      	bne.n	80111c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 80111b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80111b4:	61fb      	str	r3, [r7, #28]
          break;
 80111b6:	e003      	b.n	80111c0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 80111b8:	bf00      	nop
 80111ba:	e23d      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80111bc:	bf00      	nop
 80111be:	e23b      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80111c0:	bf00      	nop
        break;
 80111c2:	e239      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80111c4:	4b43      	ldr	r3, [pc, #268]	; (80112d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80111c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80111ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80111ce:	613b      	str	r3, [r7, #16]
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80111d6:	d025      	beq.n	8011224 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80111d8:	693b      	ldr	r3, [r7, #16]
 80111da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80111de:	d82c      	bhi.n	801123a <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 80111e0:	693b      	ldr	r3, [r7, #16]
 80111e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80111e6:	d013      	beq.n	8011210 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 80111e8:	693b      	ldr	r3, [r7, #16]
 80111ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80111ee:	d824      	bhi.n	801123a <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 80111f0:	693b      	ldr	r3, [r7, #16]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d004      	beq.n	8011200 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80111f6:	693b      	ldr	r3, [r7, #16]
 80111f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80111fc:	d004      	beq.n	8011208 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 80111fe:	e01c      	b.n	801123a <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8011200:	f7ff f8e4 	bl	80103cc <HAL_RCC_GetPCLK1Freq>
 8011204:	61f8      	str	r0, [r7, #28]
          break;
 8011206:	e01d      	b.n	8011244 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 8011208:	f7ff f848 	bl	801029c <HAL_RCC_GetSysClockFreq>
 801120c:	61f8      	str	r0, [r7, #28]
          break;
 801120e:	e019      	b.n	8011244 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011210:	4b30      	ldr	r3, [pc, #192]	; (80112d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801121c:	d10f      	bne.n	801123e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 801121e:	4b2e      	ldr	r3, [pc, #184]	; (80112d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8011220:	61fb      	str	r3, [r7, #28]
          break;
 8011222:	e00c      	b.n	801123e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011224:	4b2b      	ldr	r3, [pc, #172]	; (80112d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801122a:	f003 0302 	and.w	r3, r3, #2
 801122e:	2b02      	cmp	r3, #2
 8011230:	d107      	bne.n	8011242 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 8011232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011236:	61fb      	str	r3, [r7, #28]
          break;
 8011238:	e003      	b.n	8011242 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 801123a:	bf00      	nop
 801123c:	e1fc      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801123e:	bf00      	nop
 8011240:	e1fa      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011242:	bf00      	nop
        break;
 8011244:	e1f8      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8011246:	4b23      	ldr	r3, [pc, #140]	; (80112d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801124c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011250:	613b      	str	r3, [r7, #16]
 8011252:	693b      	ldr	r3, [r7, #16]
 8011254:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011258:	d00c      	beq.n	8011274 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 801125a:	693b      	ldr	r3, [r7, #16]
 801125c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011260:	d868      	bhi.n	8011334 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 8011262:	693b      	ldr	r3, [r7, #16]
 8011264:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011268:	d008      	beq.n	801127c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 801126a:	693b      	ldr	r3, [r7, #16]
 801126c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011270:	d034      	beq.n	80112dc <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 8011272:	e05f      	b.n	8011334 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 8011274:	f7ff f812 	bl	801029c <HAL_RCC_GetSysClockFreq>
 8011278:	61f8      	str	r0, [r7, #28]
          break;
 801127a:	e060      	b.n	801133e <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 801127c:	4b15      	ldr	r3, [pc, #84]	; (80112d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011288:	d156      	bne.n	8011338 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 801128a:	4b12      	ldr	r3, [pc, #72]	; (80112d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 801128c:	691b      	ldr	r3, [r3, #16]
 801128e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011292:	2b00      	cmp	r3, #0
 8011294:	d050      	beq.n	8011338 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8011296:	4b0f      	ldr	r3, [pc, #60]	; (80112d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011298:	691b      	ldr	r3, [r3, #16]
 801129a:	0a1b      	lsrs	r3, r3, #8
 801129c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112a0:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80112a2:	69bb      	ldr	r3, [r7, #24]
 80112a4:	68fa      	ldr	r2, [r7, #12]
 80112a6:	fb03 f202 	mul.w	r2, r3, r2
 80112aa:	4b0a      	ldr	r3, [pc, #40]	; (80112d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80112ac:	68db      	ldr	r3, [r3, #12]
 80112ae:	091b      	lsrs	r3, r3, #4
 80112b0:	f003 0307 	and.w	r3, r3, #7
 80112b4:	3301      	adds	r3, #1
 80112b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80112ba:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80112bc:	4b05      	ldr	r3, [pc, #20]	; (80112d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80112be:	691b      	ldr	r3, [r3, #16]
 80112c0:	0e5b      	lsrs	r3, r3, #25
 80112c2:	f003 0303 	and.w	r3, r3, #3
 80112c6:	3301      	adds	r3, #1
 80112c8:	005b      	lsls	r3, r3, #1
 80112ca:	69ba      	ldr	r2, [r7, #24]
 80112cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80112d0:	61fb      	str	r3, [r7, #28]
          break;
 80112d2:	e031      	b.n	8011338 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 80112d4:	40021000 	.word	0x40021000
 80112d8:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80112dc:	4b9c      	ldr	r3, [pc, #624]	; (8011550 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80112e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80112e8:	d128      	bne.n	801133c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 80112ea:	4b99      	ldr	r3, [pc, #612]	; (8011550 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80112ec:	695b      	ldr	r3, [r3, #20]
 80112ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d022      	beq.n	801133c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80112f6:	4b96      	ldr	r3, [pc, #600]	; (8011550 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80112f8:	695b      	ldr	r3, [r3, #20]
 80112fa:	0a1b      	lsrs	r3, r3, #8
 80112fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011300:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8011302:	69bb      	ldr	r3, [r7, #24]
 8011304:	68fa      	ldr	r2, [r7, #12]
 8011306:	fb03 f202 	mul.w	r2, r3, r2
 801130a:	4b91      	ldr	r3, [pc, #580]	; (8011550 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801130c:	68db      	ldr	r3, [r3, #12]
 801130e:	091b      	lsrs	r3, r3, #4
 8011310:	f003 0307 	and.w	r3, r3, #7
 8011314:	3301      	adds	r3, #1
 8011316:	fbb2 f3f3 	udiv	r3, r2, r3
 801131a:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 801131c:	4b8c      	ldr	r3, [pc, #560]	; (8011550 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801131e:	695b      	ldr	r3, [r3, #20]
 8011320:	0e5b      	lsrs	r3, r3, #25
 8011322:	f003 0303 	and.w	r3, r3, #3
 8011326:	3301      	adds	r3, #1
 8011328:	005b      	lsls	r3, r3, #1
 801132a:	69ba      	ldr	r2, [r7, #24]
 801132c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011330:	61fb      	str	r3, [r7, #28]
          break;
 8011332:	e003      	b.n	801133c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 8011334:	bf00      	nop
 8011336:	e17f      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011338:	bf00      	nop
 801133a:	e17d      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801133c:	bf00      	nop
        break;
 801133e:	e17b      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8011340:	4b83      	ldr	r3, [pc, #524]	; (8011550 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011346:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801134a:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 801134c:	693b      	ldr	r3, [r7, #16]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d103      	bne.n	801135a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 8011352:	f7ff f851 	bl	80103f8 <HAL_RCC_GetPCLK2Freq>
 8011356:	61f8      	str	r0, [r7, #28]
        break;
 8011358:	e16e      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 801135a:	f7fe ff9f 	bl	801029c <HAL_RCC_GetSysClockFreq>
 801135e:	61f8      	str	r0, [r7, #28]
        break;
 8011360:	e16a      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8011362:	4b7b      	ldr	r3, [pc, #492]	; (8011550 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011368:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801136c:	613b      	str	r3, [r7, #16]
 801136e:	693b      	ldr	r3, [r7, #16]
 8011370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011374:	d013      	beq.n	801139e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 8011376:	693b      	ldr	r3, [r7, #16]
 8011378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801137c:	d819      	bhi.n	80113b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 801137e:	693b      	ldr	r3, [r7, #16]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d004      	beq.n	801138e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8011384:	693b      	ldr	r3, [r7, #16]
 8011386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801138a:	d004      	beq.n	8011396 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 801138c:	e011      	b.n	80113b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 801138e:	f7ff f81d 	bl	80103cc <HAL_RCC_GetPCLK1Freq>
 8011392:	61f8      	str	r0, [r7, #28]
          break;
 8011394:	e010      	b.n	80113b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8011396:	f7fe ff81 	bl	801029c <HAL_RCC_GetSysClockFreq>
 801139a:	61f8      	str	r0, [r7, #28]
          break;
 801139c:	e00c      	b.n	80113b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801139e:	4b6c      	ldr	r3, [pc, #432]	; (8011550 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80113a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80113aa:	d104      	bne.n	80113b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 80113ac:	4b69      	ldr	r3, [pc, #420]	; (8011554 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 80113ae:	61fb      	str	r3, [r7, #28]
          break;
 80113b0:	e001      	b.n	80113b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 80113b2:	bf00      	nop
 80113b4:	e140      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80113b6:	bf00      	nop
        break;
 80113b8:	e13e      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80113ba:	4b65      	ldr	r3, [pc, #404]	; (8011550 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80113bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80113c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80113c4:	613b      	str	r3, [r7, #16]
 80113c6:	693b      	ldr	r3, [r7, #16]
 80113c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80113cc:	d013      	beq.n	80113f6 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 80113ce:	693b      	ldr	r3, [r7, #16]
 80113d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80113d4:	d819      	bhi.n	801140a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80113d6:	693b      	ldr	r3, [r7, #16]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d004      	beq.n	80113e6 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 80113dc:	693b      	ldr	r3, [r7, #16]
 80113de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80113e2:	d004      	beq.n	80113ee <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 80113e4:	e011      	b.n	801140a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 80113e6:	f7fe fff1 	bl	80103cc <HAL_RCC_GetPCLK1Freq>
 80113ea:	61f8      	str	r0, [r7, #28]
          break;
 80113ec:	e010      	b.n	8011410 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 80113ee:	f7fe ff55 	bl	801029c <HAL_RCC_GetSysClockFreq>
 80113f2:	61f8      	str	r0, [r7, #28]
          break;
 80113f4:	e00c      	b.n	8011410 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80113f6:	4b56      	ldr	r3, [pc, #344]	; (8011550 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80113fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011402:	d104      	bne.n	801140e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 8011404:	4b53      	ldr	r3, [pc, #332]	; (8011554 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8011406:	61fb      	str	r3, [r7, #28]
          break;
 8011408:	e001      	b.n	801140e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 801140a:	bf00      	nop
 801140c:	e114      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801140e:	bf00      	nop
        break;
 8011410:	e112      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8011412:	4b4f      	ldr	r3, [pc, #316]	; (8011550 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011418:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801141c:	613b      	str	r3, [r7, #16]
 801141e:	693b      	ldr	r3, [r7, #16]
 8011420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011424:	d013      	beq.n	801144e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 8011426:	693b      	ldr	r3, [r7, #16]
 8011428:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801142c:	d819      	bhi.n	8011462 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 801142e:	693b      	ldr	r3, [r7, #16]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d004      	beq.n	801143e <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 8011434:	693b      	ldr	r3, [r7, #16]
 8011436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801143a:	d004      	beq.n	8011446 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 801143c:	e011      	b.n	8011462 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 801143e:	f7fe ffc5 	bl	80103cc <HAL_RCC_GetPCLK1Freq>
 8011442:	61f8      	str	r0, [r7, #28]
          break;
 8011444:	e010      	b.n	8011468 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 8011446:	f7fe ff29 	bl	801029c <HAL_RCC_GetSysClockFreq>
 801144a:	61f8      	str	r0, [r7, #28]
          break;
 801144c:	e00c      	b.n	8011468 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801144e:	4b40      	ldr	r3, [pc, #256]	; (8011550 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801145a:	d104      	bne.n	8011466 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 801145c:	4b3d      	ldr	r3, [pc, #244]	; (8011554 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 801145e:	61fb      	str	r3, [r7, #28]
          break;
 8011460:	e001      	b.n	8011466 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 8011462:	bf00      	nop
 8011464:	e0e8      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011466:	bf00      	nop
        break;
 8011468:	e0e6      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 801146a:	4b39      	ldr	r3, [pc, #228]	; (8011550 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801146c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011470:	f003 0303 	and.w	r3, r3, #3
 8011474:	613b      	str	r3, [r7, #16]
 8011476:	693b      	ldr	r3, [r7, #16]
 8011478:	2b02      	cmp	r3, #2
 801147a:	d011      	beq.n	80114a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	2b02      	cmp	r3, #2
 8011480:	d818      	bhi.n	80114b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 8011482:	693b      	ldr	r3, [r7, #16]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d003      	beq.n	8011490 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8011488:	693b      	ldr	r3, [r7, #16]
 801148a:	2b01      	cmp	r3, #1
 801148c:	d004      	beq.n	8011498 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 801148e:	e011      	b.n	80114b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8011490:	f7fe ff9c 	bl	80103cc <HAL_RCC_GetPCLK1Freq>
 8011494:	61f8      	str	r0, [r7, #28]
          break;
 8011496:	e010      	b.n	80114ba <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 8011498:	f7fe ff00 	bl	801029c <HAL_RCC_GetSysClockFreq>
 801149c:	61f8      	str	r0, [r7, #28]
          break;
 801149e:	e00c      	b.n	80114ba <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80114a0:	4b2b      	ldr	r3, [pc, #172]	; (8011550 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80114a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80114ac:	d104      	bne.n	80114b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 80114ae:	4b29      	ldr	r3, [pc, #164]	; (8011554 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 80114b0:	61fb      	str	r3, [r7, #28]
          break;
 80114b2:	e001      	b.n	80114b8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 80114b4:	bf00      	nop
 80114b6:	e0bf      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80114b8:	bf00      	nop
        break;
 80114ba:	e0bd      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80114bc:	4b24      	ldr	r3, [pc, #144]	; (8011550 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80114be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80114c2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80114c6:	613b      	str	r3, [r7, #16]
 80114c8:	693b      	ldr	r3, [r7, #16]
 80114ca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80114ce:	d02c      	beq.n	801152a <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 80114d0:	693b      	ldr	r3, [r7, #16]
 80114d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80114d6:	d833      	bhi.n	8011540 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80114d8:	693b      	ldr	r3, [r7, #16]
 80114da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80114de:	d01a      	beq.n	8011516 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 80114e0:	693b      	ldr	r3, [r7, #16]
 80114e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80114e6:	d82b      	bhi.n	8011540 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 80114e8:	693b      	ldr	r3, [r7, #16]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d004      	beq.n	80114f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80114f4:	d004      	beq.n	8011500 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 80114f6:	e023      	b.n	8011540 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 80114f8:	f7fe ff68 	bl	80103cc <HAL_RCC_GetPCLK1Freq>
 80114fc:	61f8      	str	r0, [r7, #28]
          break;
 80114fe:	e026      	b.n	801154e <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8011500:	4b13      	ldr	r3, [pc, #76]	; (8011550 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011506:	f003 0302 	and.w	r3, r3, #2
 801150a:	2b02      	cmp	r3, #2
 801150c:	d11a      	bne.n	8011544 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 801150e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8011512:	61fb      	str	r3, [r7, #28]
          break;
 8011514:	e016      	b.n	8011544 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011516:	4b0e      	ldr	r3, [pc, #56]	; (8011550 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801151e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011522:	d111      	bne.n	8011548 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8011524:	4b0b      	ldr	r3, [pc, #44]	; (8011554 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8011526:	61fb      	str	r3, [r7, #28]
          break;
 8011528:	e00e      	b.n	8011548 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 801152a:	4b09      	ldr	r3, [pc, #36]	; (8011550 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801152c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011530:	f003 0302 	and.w	r3, r3, #2
 8011534:	2b02      	cmp	r3, #2
 8011536:	d109      	bne.n	801154c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 8011538:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801153c:	61fb      	str	r3, [r7, #28]
          break;
 801153e:	e005      	b.n	801154c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 8011540:	bf00      	nop
 8011542:	e079      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011544:	bf00      	nop
 8011546:	e077      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011548:	bf00      	nop
 801154a:	e075      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801154c:	bf00      	nop
        break;
 801154e:	e073      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8011550:	40021000 	.word	0x40021000
 8011554:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8011558:	4b3a      	ldr	r3, [pc, #232]	; (8011644 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 801155a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801155e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8011562:	613b      	str	r3, [r7, #16]
 8011564:	693b      	ldr	r3, [r7, #16]
 8011566:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801156a:	d02c      	beq.n	80115c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 801156c:	693b      	ldr	r3, [r7, #16]
 801156e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011572:	d833      	bhi.n	80115dc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8011574:	693b      	ldr	r3, [r7, #16]
 8011576:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801157a:	d01a      	beq.n	80115b2 <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 801157c:	693b      	ldr	r3, [r7, #16]
 801157e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011582:	d82b      	bhi.n	80115dc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8011584:	693b      	ldr	r3, [r7, #16]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d004      	beq.n	8011594 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 801158a:	693b      	ldr	r3, [r7, #16]
 801158c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011590:	d004      	beq.n	801159c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8011592:	e023      	b.n	80115dc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 8011594:	f7fe ff1a 	bl	80103cc <HAL_RCC_GetPCLK1Freq>
 8011598:	61f8      	str	r0, [r7, #28]
          break;
 801159a:	e026      	b.n	80115ea <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 801159c:	4b29      	ldr	r3, [pc, #164]	; (8011644 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 801159e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80115a2:	f003 0302 	and.w	r3, r3, #2
 80115a6:	2b02      	cmp	r3, #2
 80115a8:	d11a      	bne.n	80115e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 80115aa:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80115ae:	61fb      	str	r3, [r7, #28]
          break;
 80115b0:	e016      	b.n	80115e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80115b2:	4b24      	ldr	r3, [pc, #144]	; (8011644 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80115ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80115be:	d111      	bne.n	80115e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 80115c0:	4b21      	ldr	r3, [pc, #132]	; (8011648 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 80115c2:	61fb      	str	r3, [r7, #28]
          break;
 80115c4:	e00e      	b.n	80115e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80115c6:	4b1f      	ldr	r3, [pc, #124]	; (8011644 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80115c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80115cc:	f003 0302 	and.w	r3, r3, #2
 80115d0:	2b02      	cmp	r3, #2
 80115d2:	d109      	bne.n	80115e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 80115d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80115d8:	61fb      	str	r3, [r7, #28]
          break;
 80115da:	e005      	b.n	80115e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 80115dc:	bf00      	nop
 80115de:	e02b      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80115e0:	bf00      	nop
 80115e2:	e029      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80115e4:	bf00      	nop
 80115e6:	e027      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80115e8:	bf00      	nop
        break;
 80115ea:	e025      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80115ec:	4b15      	ldr	r3, [pc, #84]	; (8011644 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80115ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80115f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80115f6:	613b      	str	r3, [r7, #16]
 80115f8:	693b      	ldr	r3, [r7, #16]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d004      	beq.n	8011608 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 80115fe:	693b      	ldr	r3, [r7, #16]
 8011600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011604:	d004      	beq.n	8011610 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 8011606:	e00d      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 8011608:	f7fe fee0 	bl	80103cc <HAL_RCC_GetPCLK1Freq>
 801160c:	61f8      	str	r0, [r7, #28]
          break;
 801160e:	e009      	b.n	8011624 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011610:	4b0c      	ldr	r3, [pc, #48]	; (8011644 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801161c:	d101      	bne.n	8011622 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 801161e:	4b0a      	ldr	r3, [pc, #40]	; (8011648 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 8011620:	61fb      	str	r3, [r7, #28]
          break;
 8011622:	bf00      	nop
        break;
 8011624:	e008      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8011626:	bf00      	nop
 8011628:	e006      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 801162a:	bf00      	nop
 801162c:	e004      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 801162e:	bf00      	nop
 8011630:	e002      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8011632:	bf00      	nop
 8011634:	e000      	b.n	8011638 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8011636:	bf00      	nop
    }
  }

  return(frequency);
 8011638:	69fb      	ldr	r3, [r7, #28]
}
 801163a:	4618      	mov	r0, r3
 801163c:	3720      	adds	r7, #32
 801163e:	46bd      	mov	sp, r7
 8011640:	bd80      	pop	{r7, pc}
 8011642:	bf00      	nop
 8011644:	40021000 	.word	0x40021000
 8011648:	00f42400 	.word	0x00f42400

0801164c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 801164c:	b480      	push	{r7}
 801164e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8011650:	4b05      	ldr	r3, [pc, #20]	; (8011668 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	4a04      	ldr	r2, [pc, #16]	; (8011668 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8011656:	f043 0304 	orr.w	r3, r3, #4
 801165a:	6013      	str	r3, [r2, #0]
}
 801165c:	bf00      	nop
 801165e:	46bd      	mov	sp, r7
 8011660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011664:	4770      	bx	lr
 8011666:	bf00      	nop
 8011668:	40021000 	.word	0x40021000

0801166c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b084      	sub	sp, #16
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
 8011674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011676:	2300      	movs	r3, #0
 8011678:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801167a:	4b74      	ldr	r3, [pc, #464]	; (801184c <RCCEx_PLLSAI1_Config+0x1e0>)
 801167c:	68db      	ldr	r3, [r3, #12]
 801167e:	f003 0303 	and.w	r3, r3, #3
 8011682:	2b00      	cmp	r3, #0
 8011684:	d018      	beq.n	80116b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8011686:	4b71      	ldr	r3, [pc, #452]	; (801184c <RCCEx_PLLSAI1_Config+0x1e0>)
 8011688:	68db      	ldr	r3, [r3, #12]
 801168a:	f003 0203 	and.w	r2, r3, #3
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	429a      	cmp	r2, r3
 8011694:	d10d      	bne.n	80116b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	681b      	ldr	r3, [r3, #0]
       ||
 801169a:	2b00      	cmp	r3, #0
 801169c:	d009      	beq.n	80116b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 801169e:	4b6b      	ldr	r3, [pc, #428]	; (801184c <RCCEx_PLLSAI1_Config+0x1e0>)
 80116a0:	68db      	ldr	r3, [r3, #12]
 80116a2:	091b      	lsrs	r3, r3, #4
 80116a4:	f003 0307 	and.w	r3, r3, #7
 80116a8:	1c5a      	adds	r2, r3, #1
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	685b      	ldr	r3, [r3, #4]
       ||
 80116ae:	429a      	cmp	r2, r3
 80116b0:	d047      	beq.n	8011742 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80116b2:	2301      	movs	r3, #1
 80116b4:	73fb      	strb	r3, [r7, #15]
 80116b6:	e044      	b.n	8011742 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	2b03      	cmp	r3, #3
 80116be:	d018      	beq.n	80116f2 <RCCEx_PLLSAI1_Config+0x86>
 80116c0:	2b03      	cmp	r3, #3
 80116c2:	d825      	bhi.n	8011710 <RCCEx_PLLSAI1_Config+0xa4>
 80116c4:	2b01      	cmp	r3, #1
 80116c6:	d002      	beq.n	80116ce <RCCEx_PLLSAI1_Config+0x62>
 80116c8:	2b02      	cmp	r3, #2
 80116ca:	d009      	beq.n	80116e0 <RCCEx_PLLSAI1_Config+0x74>
 80116cc:	e020      	b.n	8011710 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80116ce:	4b5f      	ldr	r3, [pc, #380]	; (801184c <RCCEx_PLLSAI1_Config+0x1e0>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	f003 0302 	and.w	r3, r3, #2
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d11d      	bne.n	8011716 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80116da:	2301      	movs	r3, #1
 80116dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80116de:	e01a      	b.n	8011716 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80116e0:	4b5a      	ldr	r3, [pc, #360]	; (801184c <RCCEx_PLLSAI1_Config+0x1e0>)
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d116      	bne.n	801171a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80116ec:	2301      	movs	r3, #1
 80116ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80116f0:	e013      	b.n	801171a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80116f2:	4b56      	ldr	r3, [pc, #344]	; (801184c <RCCEx_PLLSAI1_Config+0x1e0>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d10f      	bne.n	801171e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80116fe:	4b53      	ldr	r3, [pc, #332]	; (801184c <RCCEx_PLLSAI1_Config+0x1e0>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011706:	2b00      	cmp	r3, #0
 8011708:	d109      	bne.n	801171e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 801170a:	2301      	movs	r3, #1
 801170c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801170e:	e006      	b.n	801171e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8011710:	2301      	movs	r3, #1
 8011712:	73fb      	strb	r3, [r7, #15]
      break;
 8011714:	e004      	b.n	8011720 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8011716:	bf00      	nop
 8011718:	e002      	b.n	8011720 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801171a:	bf00      	nop
 801171c:	e000      	b.n	8011720 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801171e:	bf00      	nop
    }

    if(status == HAL_OK)
 8011720:	7bfb      	ldrb	r3, [r7, #15]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d10d      	bne.n	8011742 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8011726:	4b49      	ldr	r3, [pc, #292]	; (801184c <RCCEx_PLLSAI1_Config+0x1e0>)
 8011728:	68db      	ldr	r3, [r3, #12]
 801172a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	6819      	ldr	r1, [r3, #0]
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	685b      	ldr	r3, [r3, #4]
 8011736:	3b01      	subs	r3, #1
 8011738:	011b      	lsls	r3, r3, #4
 801173a:	430b      	orrs	r3, r1
 801173c:	4943      	ldr	r1, [pc, #268]	; (801184c <RCCEx_PLLSAI1_Config+0x1e0>)
 801173e:	4313      	orrs	r3, r2
 8011740:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8011742:	7bfb      	ldrb	r3, [r7, #15]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d17c      	bne.n	8011842 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8011748:	4b40      	ldr	r3, [pc, #256]	; (801184c <RCCEx_PLLSAI1_Config+0x1e0>)
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	4a3f      	ldr	r2, [pc, #252]	; (801184c <RCCEx_PLLSAI1_Config+0x1e0>)
 801174e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011752:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011754:	f7f9 fb22 	bl	800ad9c <HAL_GetTick>
 8011758:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801175a:	e009      	b.n	8011770 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801175c:	f7f9 fb1e 	bl	800ad9c <HAL_GetTick>
 8011760:	4602      	mov	r2, r0
 8011762:	68bb      	ldr	r3, [r7, #8]
 8011764:	1ad3      	subs	r3, r2, r3
 8011766:	2b02      	cmp	r3, #2
 8011768:	d902      	bls.n	8011770 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 801176a:	2303      	movs	r3, #3
 801176c:	73fb      	strb	r3, [r7, #15]
        break;
 801176e:	e005      	b.n	801177c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8011770:	4b36      	ldr	r3, [pc, #216]	; (801184c <RCCEx_PLLSAI1_Config+0x1e0>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011778:	2b00      	cmp	r3, #0
 801177a:	d1ef      	bne.n	801175c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 801177c:	7bfb      	ldrb	r3, [r7, #15]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d15f      	bne.n	8011842 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d110      	bne.n	80117aa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8011788:	4b30      	ldr	r3, [pc, #192]	; (801184c <RCCEx_PLLSAI1_Config+0x1e0>)
 801178a:	691b      	ldr	r3, [r3, #16]
 801178c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8011790:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8011794:	687a      	ldr	r2, [r7, #4]
 8011796:	6892      	ldr	r2, [r2, #8]
 8011798:	0211      	lsls	r1, r2, #8
 801179a:	687a      	ldr	r2, [r7, #4]
 801179c:	68d2      	ldr	r2, [r2, #12]
 801179e:	06d2      	lsls	r2, r2, #27
 80117a0:	430a      	orrs	r2, r1
 80117a2:	492a      	ldr	r1, [pc, #168]	; (801184c <RCCEx_PLLSAI1_Config+0x1e0>)
 80117a4:	4313      	orrs	r3, r2
 80117a6:	610b      	str	r3, [r1, #16]
 80117a8:	e027      	b.n	80117fa <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	2b01      	cmp	r3, #1
 80117ae:	d112      	bne.n	80117d6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80117b0:	4b26      	ldr	r3, [pc, #152]	; (801184c <RCCEx_PLLSAI1_Config+0x1e0>)
 80117b2:	691b      	ldr	r3, [r3, #16]
 80117b4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80117b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80117bc:	687a      	ldr	r2, [r7, #4]
 80117be:	6892      	ldr	r2, [r2, #8]
 80117c0:	0211      	lsls	r1, r2, #8
 80117c2:	687a      	ldr	r2, [r7, #4]
 80117c4:	6912      	ldr	r2, [r2, #16]
 80117c6:	0852      	lsrs	r2, r2, #1
 80117c8:	3a01      	subs	r2, #1
 80117ca:	0552      	lsls	r2, r2, #21
 80117cc:	430a      	orrs	r2, r1
 80117ce:	491f      	ldr	r1, [pc, #124]	; (801184c <RCCEx_PLLSAI1_Config+0x1e0>)
 80117d0:	4313      	orrs	r3, r2
 80117d2:	610b      	str	r3, [r1, #16]
 80117d4:	e011      	b.n	80117fa <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80117d6:	4b1d      	ldr	r3, [pc, #116]	; (801184c <RCCEx_PLLSAI1_Config+0x1e0>)
 80117d8:	691b      	ldr	r3, [r3, #16]
 80117da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80117de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80117e2:	687a      	ldr	r2, [r7, #4]
 80117e4:	6892      	ldr	r2, [r2, #8]
 80117e6:	0211      	lsls	r1, r2, #8
 80117e8:	687a      	ldr	r2, [r7, #4]
 80117ea:	6952      	ldr	r2, [r2, #20]
 80117ec:	0852      	lsrs	r2, r2, #1
 80117ee:	3a01      	subs	r2, #1
 80117f0:	0652      	lsls	r2, r2, #25
 80117f2:	430a      	orrs	r2, r1
 80117f4:	4915      	ldr	r1, [pc, #84]	; (801184c <RCCEx_PLLSAI1_Config+0x1e0>)
 80117f6:	4313      	orrs	r3, r2
 80117f8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80117fa:	4b14      	ldr	r3, [pc, #80]	; (801184c <RCCEx_PLLSAI1_Config+0x1e0>)
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	4a13      	ldr	r2, [pc, #76]	; (801184c <RCCEx_PLLSAI1_Config+0x1e0>)
 8011800:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011804:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011806:	f7f9 fac9 	bl	800ad9c <HAL_GetTick>
 801180a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801180c:	e009      	b.n	8011822 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801180e:	f7f9 fac5 	bl	800ad9c <HAL_GetTick>
 8011812:	4602      	mov	r2, r0
 8011814:	68bb      	ldr	r3, [r7, #8]
 8011816:	1ad3      	subs	r3, r2, r3
 8011818:	2b02      	cmp	r3, #2
 801181a:	d902      	bls.n	8011822 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 801181c:	2303      	movs	r3, #3
 801181e:	73fb      	strb	r3, [r7, #15]
          break;
 8011820:	e005      	b.n	801182e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8011822:	4b0a      	ldr	r3, [pc, #40]	; (801184c <RCCEx_PLLSAI1_Config+0x1e0>)
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801182a:	2b00      	cmp	r3, #0
 801182c:	d0ef      	beq.n	801180e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 801182e:	7bfb      	ldrb	r3, [r7, #15]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d106      	bne.n	8011842 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8011834:	4b05      	ldr	r3, [pc, #20]	; (801184c <RCCEx_PLLSAI1_Config+0x1e0>)
 8011836:	691a      	ldr	r2, [r3, #16]
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	699b      	ldr	r3, [r3, #24]
 801183c:	4903      	ldr	r1, [pc, #12]	; (801184c <RCCEx_PLLSAI1_Config+0x1e0>)
 801183e:	4313      	orrs	r3, r2
 8011840:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8011842:	7bfb      	ldrb	r3, [r7, #15]
}
 8011844:	4618      	mov	r0, r3
 8011846:	3710      	adds	r7, #16
 8011848:	46bd      	mov	sp, r7
 801184a:	bd80      	pop	{r7, pc}
 801184c:	40021000 	.word	0x40021000

08011850 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b084      	sub	sp, #16
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
 8011858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801185a:	2300      	movs	r3, #0
 801185c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801185e:	4b69      	ldr	r3, [pc, #420]	; (8011a04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011860:	68db      	ldr	r3, [r3, #12]
 8011862:	f003 0303 	and.w	r3, r3, #3
 8011866:	2b00      	cmp	r3, #0
 8011868:	d018      	beq.n	801189c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 801186a:	4b66      	ldr	r3, [pc, #408]	; (8011a04 <RCCEx_PLLSAI2_Config+0x1b4>)
 801186c:	68db      	ldr	r3, [r3, #12]
 801186e:	f003 0203 	and.w	r2, r3, #3
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	429a      	cmp	r2, r3
 8011878:	d10d      	bne.n	8011896 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	681b      	ldr	r3, [r3, #0]
       ||
 801187e:	2b00      	cmp	r3, #0
 8011880:	d009      	beq.n	8011896 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8011882:	4b60      	ldr	r3, [pc, #384]	; (8011a04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011884:	68db      	ldr	r3, [r3, #12]
 8011886:	091b      	lsrs	r3, r3, #4
 8011888:	f003 0307 	and.w	r3, r3, #7
 801188c:	1c5a      	adds	r2, r3, #1
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	685b      	ldr	r3, [r3, #4]
       ||
 8011892:	429a      	cmp	r2, r3
 8011894:	d047      	beq.n	8011926 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8011896:	2301      	movs	r3, #1
 8011898:	73fb      	strb	r3, [r7, #15]
 801189a:	e044      	b.n	8011926 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	2b03      	cmp	r3, #3
 80118a2:	d018      	beq.n	80118d6 <RCCEx_PLLSAI2_Config+0x86>
 80118a4:	2b03      	cmp	r3, #3
 80118a6:	d825      	bhi.n	80118f4 <RCCEx_PLLSAI2_Config+0xa4>
 80118a8:	2b01      	cmp	r3, #1
 80118aa:	d002      	beq.n	80118b2 <RCCEx_PLLSAI2_Config+0x62>
 80118ac:	2b02      	cmp	r3, #2
 80118ae:	d009      	beq.n	80118c4 <RCCEx_PLLSAI2_Config+0x74>
 80118b0:	e020      	b.n	80118f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80118b2:	4b54      	ldr	r3, [pc, #336]	; (8011a04 <RCCEx_PLLSAI2_Config+0x1b4>)
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	f003 0302 	and.w	r3, r3, #2
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d11d      	bne.n	80118fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80118be:	2301      	movs	r3, #1
 80118c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80118c2:	e01a      	b.n	80118fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80118c4:	4b4f      	ldr	r3, [pc, #316]	; (8011a04 <RCCEx_PLLSAI2_Config+0x1b4>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d116      	bne.n	80118fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80118d0:	2301      	movs	r3, #1
 80118d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80118d4:	e013      	b.n	80118fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80118d6:	4b4b      	ldr	r3, [pc, #300]	; (8011a04 <RCCEx_PLLSAI2_Config+0x1b4>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d10f      	bne.n	8011902 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80118e2:	4b48      	ldr	r3, [pc, #288]	; (8011a04 <RCCEx_PLLSAI2_Config+0x1b4>)
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d109      	bne.n	8011902 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80118ee:	2301      	movs	r3, #1
 80118f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80118f2:	e006      	b.n	8011902 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80118f4:	2301      	movs	r3, #1
 80118f6:	73fb      	strb	r3, [r7, #15]
      break;
 80118f8:	e004      	b.n	8011904 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80118fa:	bf00      	nop
 80118fc:	e002      	b.n	8011904 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80118fe:	bf00      	nop
 8011900:	e000      	b.n	8011904 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8011902:	bf00      	nop
    }

    if(status == HAL_OK)
 8011904:	7bfb      	ldrb	r3, [r7, #15]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d10d      	bne.n	8011926 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 801190a:	4b3e      	ldr	r3, [pc, #248]	; (8011a04 <RCCEx_PLLSAI2_Config+0x1b4>)
 801190c:	68db      	ldr	r3, [r3, #12]
 801190e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	6819      	ldr	r1, [r3, #0]
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	685b      	ldr	r3, [r3, #4]
 801191a:	3b01      	subs	r3, #1
 801191c:	011b      	lsls	r3, r3, #4
 801191e:	430b      	orrs	r3, r1
 8011920:	4938      	ldr	r1, [pc, #224]	; (8011a04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011922:	4313      	orrs	r3, r2
 8011924:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8011926:	7bfb      	ldrb	r3, [r7, #15]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d166      	bne.n	80119fa <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 801192c:	4b35      	ldr	r3, [pc, #212]	; (8011a04 <RCCEx_PLLSAI2_Config+0x1b4>)
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	4a34      	ldr	r2, [pc, #208]	; (8011a04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011932:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011938:	f7f9 fa30 	bl	800ad9c <HAL_GetTick>
 801193c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801193e:	e009      	b.n	8011954 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8011940:	f7f9 fa2c 	bl	800ad9c <HAL_GetTick>
 8011944:	4602      	mov	r2, r0
 8011946:	68bb      	ldr	r3, [r7, #8]
 8011948:	1ad3      	subs	r3, r2, r3
 801194a:	2b02      	cmp	r3, #2
 801194c:	d902      	bls.n	8011954 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 801194e:	2303      	movs	r3, #3
 8011950:	73fb      	strb	r3, [r7, #15]
        break;
 8011952:	e005      	b.n	8011960 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8011954:	4b2b      	ldr	r3, [pc, #172]	; (8011a04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801195c:	2b00      	cmp	r3, #0
 801195e:	d1ef      	bne.n	8011940 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8011960:	7bfb      	ldrb	r3, [r7, #15]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d149      	bne.n	80119fa <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8011966:	683b      	ldr	r3, [r7, #0]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d110      	bne.n	801198e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 801196c:	4b25      	ldr	r3, [pc, #148]	; (8011a04 <RCCEx_PLLSAI2_Config+0x1b4>)
 801196e:	695b      	ldr	r3, [r3, #20]
 8011970:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8011974:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8011978:	687a      	ldr	r2, [r7, #4]
 801197a:	6892      	ldr	r2, [r2, #8]
 801197c:	0211      	lsls	r1, r2, #8
 801197e:	687a      	ldr	r2, [r7, #4]
 8011980:	68d2      	ldr	r2, [r2, #12]
 8011982:	06d2      	lsls	r2, r2, #27
 8011984:	430a      	orrs	r2, r1
 8011986:	491f      	ldr	r1, [pc, #124]	; (8011a04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011988:	4313      	orrs	r3, r2
 801198a:	614b      	str	r3, [r1, #20]
 801198c:	e011      	b.n	80119b2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 801198e:	4b1d      	ldr	r3, [pc, #116]	; (8011a04 <RCCEx_PLLSAI2_Config+0x1b4>)
 8011990:	695b      	ldr	r3, [r3, #20]
 8011992:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8011996:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801199a:	687a      	ldr	r2, [r7, #4]
 801199c:	6892      	ldr	r2, [r2, #8]
 801199e:	0211      	lsls	r1, r2, #8
 80119a0:	687a      	ldr	r2, [r7, #4]
 80119a2:	6912      	ldr	r2, [r2, #16]
 80119a4:	0852      	lsrs	r2, r2, #1
 80119a6:	3a01      	subs	r2, #1
 80119a8:	0652      	lsls	r2, r2, #25
 80119aa:	430a      	orrs	r2, r1
 80119ac:	4915      	ldr	r1, [pc, #84]	; (8011a04 <RCCEx_PLLSAI2_Config+0x1b4>)
 80119ae:	4313      	orrs	r3, r2
 80119b0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80119b2:	4b14      	ldr	r3, [pc, #80]	; (8011a04 <RCCEx_PLLSAI2_Config+0x1b4>)
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	4a13      	ldr	r2, [pc, #76]	; (8011a04 <RCCEx_PLLSAI2_Config+0x1b4>)
 80119b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80119bc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80119be:	f7f9 f9ed 	bl	800ad9c <HAL_GetTick>
 80119c2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80119c4:	e009      	b.n	80119da <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80119c6:	f7f9 f9e9 	bl	800ad9c <HAL_GetTick>
 80119ca:	4602      	mov	r2, r0
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	1ad3      	subs	r3, r2, r3
 80119d0:	2b02      	cmp	r3, #2
 80119d2:	d902      	bls.n	80119da <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80119d4:	2303      	movs	r3, #3
 80119d6:	73fb      	strb	r3, [r7, #15]
          break;
 80119d8:	e005      	b.n	80119e6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80119da:	4b0a      	ldr	r3, [pc, #40]	; (8011a04 <RCCEx_PLLSAI2_Config+0x1b4>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d0ef      	beq.n	80119c6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80119e6:	7bfb      	ldrb	r3, [r7, #15]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d106      	bne.n	80119fa <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80119ec:	4b05      	ldr	r3, [pc, #20]	; (8011a04 <RCCEx_PLLSAI2_Config+0x1b4>)
 80119ee:	695a      	ldr	r2, [r3, #20]
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	695b      	ldr	r3, [r3, #20]
 80119f4:	4903      	ldr	r1, [pc, #12]	; (8011a04 <RCCEx_PLLSAI2_Config+0x1b4>)
 80119f6:	4313      	orrs	r3, r2
 80119f8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80119fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80119fc:	4618      	mov	r0, r3
 80119fe:	3710      	adds	r7, #16
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd80      	pop	{r7, pc}
 8011a04:	40021000 	.word	0x40021000

08011a08 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8011a08:	b480      	push	{r7}
 8011a0a:	b089      	sub	sp, #36	; 0x24
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8011a12:	2300      	movs	r3, #0
 8011a14:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8011a16:	2300      	movs	r3, #0
 8011a18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011a24:	d10c      	bne.n	8011a40 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8011a26:	4b77      	ldr	r3, [pc, #476]	; (8011c04 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a2c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8011a30:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8011a32:	69bb      	ldr	r3, [r7, #24]
 8011a34:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8011a38:	d112      	bne.n	8011a60 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8011a3a:	4b73      	ldr	r3, [pc, #460]	; (8011c08 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8011a3c:	61fb      	str	r3, [r7, #28]
 8011a3e:	e00f      	b.n	8011a60 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a46:	d10b      	bne.n	8011a60 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8011a48:	4b6e      	ldr	r3, [pc, #440]	; (8011c04 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a4e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8011a52:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8011a54:	69bb      	ldr	r3, [r7, #24]
 8011a56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011a5a:	d101      	bne.n	8011a60 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8011a5c:	4b6a      	ldr	r3, [pc, #424]	; (8011c08 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8011a5e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8011a60:	69fb      	ldr	r3, [r7, #28]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	f040 80c6 	bne.w	8011bf4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8011a6c:	69bb      	ldr	r3, [r7, #24]
 8011a6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011a72:	d003      	beq.n	8011a7c <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8011a74:	69bb      	ldr	r3, [r7, #24]
 8011a76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011a7a:	d13b      	bne.n	8011af4 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8011a7c:	4b61      	ldr	r3, [pc, #388]	; (8011c04 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011a84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011a88:	f040 80b3 	bne.w	8011bf2 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 8011a8c:	4b5d      	ldr	r3, [pc, #372]	; (8011c04 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011a8e:	68db      	ldr	r3, [r3, #12]
 8011a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	f000 80ac 	beq.w	8011bf2 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8011a9a:	4b5a      	ldr	r3, [pc, #360]	; (8011c04 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011a9c:	68db      	ldr	r3, [r3, #12]
 8011a9e:	091b      	lsrs	r3, r3, #4
 8011aa0:	f003 0307 	and.w	r3, r3, #7
 8011aa4:	3301      	adds	r3, #1
 8011aa6:	693a      	ldr	r2, [r7, #16]
 8011aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8011aac:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8011aae:	4b55      	ldr	r3, [pc, #340]	; (8011c04 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011ab0:	68db      	ldr	r3, [r3, #12]
 8011ab2:	0a1b      	lsrs	r3, r3, #8
 8011ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011ab8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8011aba:	4b52      	ldr	r3, [pc, #328]	; (8011c04 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011abc:	68db      	ldr	r3, [r3, #12]
 8011abe:	0edb      	lsrs	r3, r3, #27
 8011ac0:	f003 031f 	and.w	r3, r3, #31
 8011ac4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8011ac6:	697b      	ldr	r3, [r7, #20]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d10a      	bne.n	8011ae2 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8011acc:	4b4d      	ldr	r3, [pc, #308]	; (8011c04 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011ace:	68db      	ldr	r3, [r3, #12]
 8011ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d002      	beq.n	8011ade <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 8011ad8:	2311      	movs	r3, #17
 8011ada:	617b      	str	r3, [r7, #20]
 8011adc:	e001      	b.n	8011ae2 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 8011ade:	2307      	movs	r3, #7
 8011ae0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8011ae2:	693b      	ldr	r3, [r7, #16]
 8011ae4:	68fa      	ldr	r2, [r7, #12]
 8011ae6:	fb03 f202 	mul.w	r2, r3, r2
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8011af0:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8011af2:	e07e      	b.n	8011bf2 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8011af4:	69bb      	ldr	r3, [r7, #24]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d139      	bne.n	8011b6e <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8011afa:	4b42      	ldr	r3, [pc, #264]	; (8011c04 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011b02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011b06:	d175      	bne.n	8011bf4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8011b08:	4b3e      	ldr	r3, [pc, #248]	; (8011c04 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011b0a:	691b      	ldr	r3, [r3, #16]
 8011b0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d06f      	beq.n	8011bf4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8011b14:	4b3b      	ldr	r3, [pc, #236]	; (8011c04 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011b16:	68db      	ldr	r3, [r3, #12]
 8011b18:	091b      	lsrs	r3, r3, #4
 8011b1a:	f003 0307 	and.w	r3, r3, #7
 8011b1e:	3301      	adds	r3, #1
 8011b20:	693a      	ldr	r2, [r7, #16]
 8011b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b26:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8011b28:	4b36      	ldr	r3, [pc, #216]	; (8011c04 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011b2a:	691b      	ldr	r3, [r3, #16]
 8011b2c:	0a1b      	lsrs	r3, r3, #8
 8011b2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b32:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8011b34:	4b33      	ldr	r3, [pc, #204]	; (8011c04 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011b36:	691b      	ldr	r3, [r3, #16]
 8011b38:	0edb      	lsrs	r3, r3, #27
 8011b3a:	f003 031f 	and.w	r3, r3, #31
 8011b3e:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8011b40:	697b      	ldr	r3, [r7, #20]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d10a      	bne.n	8011b5c <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8011b46:	4b2f      	ldr	r3, [pc, #188]	; (8011c04 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011b48:	691b      	ldr	r3, [r3, #16]
 8011b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d002      	beq.n	8011b58 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 8011b52:	2311      	movs	r3, #17
 8011b54:	617b      	str	r3, [r7, #20]
 8011b56:	e001      	b.n	8011b5c <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 8011b58:	2307      	movs	r3, #7
 8011b5a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8011b5c:	693b      	ldr	r3, [r7, #16]
 8011b5e:	68fa      	ldr	r2, [r7, #12]
 8011b60:	fb03 f202 	mul.w	r2, r3, r2
 8011b64:	697b      	ldr	r3, [r7, #20]
 8011b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b6a:	61fb      	str	r3, [r7, #28]
 8011b6c:	e042      	b.n	8011bf4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8011b6e:	69bb      	ldr	r3, [r7, #24]
 8011b70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011b74:	d003      	beq.n	8011b7e <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 8011b76:	69bb      	ldr	r3, [r7, #24]
 8011b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011b7c:	d13a      	bne.n	8011bf4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8011b7e:	4b21      	ldr	r3, [pc, #132]	; (8011c04 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011b8a:	d133      	bne.n	8011bf4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8011b8c:	4b1d      	ldr	r3, [pc, #116]	; (8011c04 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011b8e:	695b      	ldr	r3, [r3, #20]
 8011b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d02d      	beq.n	8011bf4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8011b98:	4b1a      	ldr	r3, [pc, #104]	; (8011c04 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011b9a:	68db      	ldr	r3, [r3, #12]
 8011b9c:	091b      	lsrs	r3, r3, #4
 8011b9e:	f003 0307 	and.w	r3, r3, #7
 8011ba2:	3301      	adds	r3, #1
 8011ba4:	693a      	ldr	r2, [r7, #16]
 8011ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011baa:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8011bac:	4b15      	ldr	r3, [pc, #84]	; (8011c04 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011bae:	695b      	ldr	r3, [r3, #20]
 8011bb0:	0a1b      	lsrs	r3, r3, #8
 8011bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011bb6:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8011bb8:	4b12      	ldr	r3, [pc, #72]	; (8011c04 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011bba:	695b      	ldr	r3, [r3, #20]
 8011bbc:	0edb      	lsrs	r3, r3, #27
 8011bbe:	f003 031f 	and.w	r3, r3, #31
 8011bc2:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8011bc4:	697b      	ldr	r3, [r7, #20]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d10a      	bne.n	8011be0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8011bca:	4b0e      	ldr	r3, [pc, #56]	; (8011c04 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8011bcc:	695b      	ldr	r3, [r3, #20]
 8011bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d002      	beq.n	8011bdc <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8011bd6:	2311      	movs	r3, #17
 8011bd8:	617b      	str	r3, [r7, #20]
 8011bda:	e001      	b.n	8011be0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8011bdc:	2307      	movs	r3, #7
 8011bde:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8011be0:	693b      	ldr	r3, [r7, #16]
 8011be2:	68fa      	ldr	r2, [r7, #12]
 8011be4:	fb03 f202 	mul.w	r2, r3, r2
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8011bee:	61fb      	str	r3, [r7, #28]
 8011bf0:	e000      	b.n	8011bf4 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8011bf2:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8011bf4:	69fb      	ldr	r3, [r7, #28]
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3724      	adds	r7, #36	; 0x24
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c00:	4770      	bx	lr
 8011c02:	bf00      	nop
 8011c04:	40021000 	.word	0x40021000
 8011c08:	001fff68 	.word	0x001fff68

08011c0c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b088      	sub	sp, #32
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d101      	bne.n	8011c1e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	e155      	b.n	8011eca <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8011c24:	b2db      	uxtb	r3, r3
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d106      	bne.n	8011c38 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	2200      	movs	r2, #0
 8011c2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8011c32:	6878      	ldr	r0, [r7, #4]
 8011c34:	f7f0 f964 	bl	8001f00 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f000 f959 	bl	8011ef0 <SAI_Disable>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d001      	beq.n	8011c48 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8011c44:	2301      	movs	r3, #1
 8011c46:	e140      	b.n	8011eca <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	2202      	movs	r2, #2
 8011c4c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	68db      	ldr	r3, [r3, #12]
 8011c54:	2b02      	cmp	r3, #2
 8011c56:	d00c      	beq.n	8011c72 <HAL_SAI_Init+0x66>
 8011c58:	2b02      	cmp	r3, #2
 8011c5a:	d80d      	bhi.n	8011c78 <HAL_SAI_Init+0x6c>
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d002      	beq.n	8011c66 <HAL_SAI_Init+0x5a>
 8011c60:	2b01      	cmp	r3, #1
 8011c62:	d003      	beq.n	8011c6c <HAL_SAI_Init+0x60>
 8011c64:	e008      	b.n	8011c78 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8011c66:	2300      	movs	r3, #0
 8011c68:	61fb      	str	r3, [r7, #28]
      break;
 8011c6a:	e008      	b.n	8011c7e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8011c6c:	2310      	movs	r3, #16
 8011c6e:	61fb      	str	r3, [r7, #28]
      break;
 8011c70:	e005      	b.n	8011c7e <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8011c72:	2320      	movs	r3, #32
 8011c74:	61fb      	str	r3, [r7, #28]
      break;
 8011c76:	e002      	b.n	8011c7e <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8011c78:	2300      	movs	r3, #0
 8011c7a:	61fb      	str	r3, [r7, #28]
      break;
 8011c7c:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	689b      	ldr	r3, [r3, #8]
 8011c82:	2b03      	cmp	r3, #3
 8011c84:	d81d      	bhi.n	8011cc2 <HAL_SAI_Init+0xb6>
 8011c86:	a201      	add	r2, pc, #4	; (adr r2, 8011c8c <HAL_SAI_Init+0x80>)
 8011c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c8c:	08011c9d 	.word	0x08011c9d
 8011c90:	08011ca3 	.word	0x08011ca3
 8011c94:	08011cab 	.word	0x08011cab
 8011c98:	08011cb3 	.word	0x08011cb3
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	617b      	str	r3, [r7, #20]
      break;
 8011ca0:	e012      	b.n	8011cc8 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8011ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ca6:	617b      	str	r3, [r7, #20]
      break;
 8011ca8:	e00e      	b.n	8011cc8 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8011caa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011cae:	617b      	str	r3, [r7, #20]
      break;
 8011cb0:	e00a      	b.n	8011cc8 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8011cb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011cb6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8011cb8:	69fb      	ldr	r3, [r7, #28]
 8011cba:	f043 0301 	orr.w	r3, r3, #1
 8011cbe:	61fb      	str	r3, [r7, #28]
      break;
 8011cc0:	e002      	b.n	8011cc8 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	617b      	str	r3, [r7, #20]
      break;
 8011cc6:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	4a81      	ldr	r2, [pc, #516]	; (8011ed4 <HAL_SAI_Init+0x2c8>)
 8011cce:	4293      	cmp	r3, r2
 8011cd0:	d004      	beq.n	8011cdc <HAL_SAI_Init+0xd0>
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	4a80      	ldr	r2, [pc, #512]	; (8011ed8 <HAL_SAI_Init+0x2cc>)
 8011cd8:	4293      	cmp	r3, r2
 8011cda:	d103      	bne.n	8011ce4 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8011cdc:	4a7f      	ldr	r2, [pc, #508]	; (8011edc <HAL_SAI_Init+0x2d0>)
 8011cde:	69fb      	ldr	r3, [r7, #28]
 8011ce0:	6013      	str	r3, [r2, #0]
 8011ce2:	e002      	b.n	8011cea <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8011ce4:	4a7e      	ldr	r2, [pc, #504]	; (8011ee0 <HAL_SAI_Init+0x2d4>)
 8011ce6:	69fb      	ldr	r3, [r7, #28]
 8011ce8:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	69db      	ldr	r3, [r3, #28]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d041      	beq.n	8011d76 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	4a77      	ldr	r2, [pc, #476]	; (8011ed4 <HAL_SAI_Init+0x2c8>)
 8011cf8:	4293      	cmp	r3, r2
 8011cfa:	d004      	beq.n	8011d06 <HAL_SAI_Init+0xfa>
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	4a75      	ldr	r2, [pc, #468]	; (8011ed8 <HAL_SAI_Init+0x2cc>)
 8011d02:	4293      	cmp	r3, r2
 8011d04:	d105      	bne.n	8011d12 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8011d06:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011d0a:	f7fe fee7 	bl	8010adc <HAL_RCCEx_GetPeriphCLKFreq>
 8011d0e:	6138      	str	r0, [r7, #16]
 8011d10:	e004      	b.n	8011d1c <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8011d12:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011d16:	f7fe fee1 	bl	8010adc <HAL_RCCEx_GetPeriphCLKFreq>
 8011d1a:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8011d1c:	693a      	ldr	r2, [r7, #16]
 8011d1e:	4613      	mov	r3, r2
 8011d20:	009b      	lsls	r3, r3, #2
 8011d22:	4413      	add	r3, r2
 8011d24:	005b      	lsls	r3, r3, #1
 8011d26:	461a      	mov	r2, r3
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	69db      	ldr	r3, [r3, #28]
 8011d2c:	025b      	lsls	r3, r3, #9
 8011d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d32:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	4a6b      	ldr	r2, [pc, #428]	; (8011ee4 <HAL_SAI_Init+0x2d8>)
 8011d38:	fba2 2303 	umull	r2, r3, r2, r3
 8011d3c:	08da      	lsrs	r2, r3, #3
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8011d42:	68f9      	ldr	r1, [r7, #12]
 8011d44:	4b67      	ldr	r3, [pc, #412]	; (8011ee4 <HAL_SAI_Init+0x2d8>)
 8011d46:	fba3 2301 	umull	r2, r3, r3, r1
 8011d4a:	08da      	lsrs	r2, r3, #3
 8011d4c:	4613      	mov	r3, r2
 8011d4e:	009b      	lsls	r3, r3, #2
 8011d50:	4413      	add	r3, r2
 8011d52:	005b      	lsls	r3, r3, #1
 8011d54:	1aca      	subs	r2, r1, r3
 8011d56:	2a08      	cmp	r2, #8
 8011d58:	d904      	bls.n	8011d64 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	6a1b      	ldr	r3, [r3, #32]
 8011d5e:	1c5a      	adds	r2, r3, #1
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d68:	2b04      	cmp	r3, #4
 8011d6a:	d104      	bne.n	8011d76 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	6a1b      	ldr	r3, [r3, #32]
 8011d70:	085a      	lsrs	r2, r3, #1
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	685b      	ldr	r3, [r3, #4]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d003      	beq.n	8011d86 <HAL_SAI_Init+0x17a>
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	685b      	ldr	r3, [r3, #4]
 8011d82:	2b02      	cmp	r3, #2
 8011d84:	d109      	bne.n	8011d9a <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d8a:	2b01      	cmp	r3, #1
 8011d8c:	d101      	bne.n	8011d92 <HAL_SAI_Init+0x186>
 8011d8e:	2300      	movs	r3, #0
 8011d90:	e001      	b.n	8011d96 <HAL_SAI_Init+0x18a>
 8011d92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011d96:	61bb      	str	r3, [r7, #24]
 8011d98:	e008      	b.n	8011dac <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d9e:	2b01      	cmp	r3, #1
 8011da0:	d102      	bne.n	8011da8 <HAL_SAI_Init+0x19c>
 8011da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011da6:	e000      	b.n	8011daa <HAL_SAI_Init+0x19e>
 8011da8:	2300      	movs	r3, #0
 8011daa:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	6819      	ldr	r1, [r3, #0]
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	681a      	ldr	r2, [r3, #0]
 8011db6:	4b4c      	ldr	r3, [pc, #304]	; (8011ee8 <HAL_SAI_Init+0x2dc>)
 8011db8:	400b      	ands	r3, r1
 8011dba:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	6819      	ldr	r1, [r3, #0]
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	685a      	ldr	r2, [r3, #4]
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dca:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8011dd0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dd6:	431a      	orrs	r2, r3
 8011dd8:	69bb      	ldr	r3, [r7, #24]
 8011dda:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8011ddc:	697b      	ldr	r3, [r7, #20]
 8011dde:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8011de4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	691b      	ldr	r3, [r3, #16]
 8011dea:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8011df0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	6a1b      	ldr	r3, [r3, #32]
 8011df6:	051b      	lsls	r3, r3, #20
 8011df8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	430a      	orrs	r2, r1
 8011e00:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	685b      	ldr	r3, [r3, #4]
 8011e08:	687a      	ldr	r2, [r7, #4]
 8011e0a:	6812      	ldr	r2, [r2, #0]
 8011e0c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8011e10:	f023 030f 	bic.w	r3, r3, #15
 8011e14:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	6859      	ldr	r1, [r3, #4]
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	699a      	ldr	r2, [r3, #24]
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e24:	431a      	orrs	r2, r3
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e2a:	431a      	orrs	r2, r3
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	430a      	orrs	r2, r1
 8011e32:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	6899      	ldr	r1, [r3, #8]
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681a      	ldr	r2, [r3, #0]
 8011e3e:	4b2b      	ldr	r3, [pc, #172]	; (8011eec <HAL_SAI_Init+0x2e0>)
 8011e40:	400b      	ands	r3, r1
 8011e42:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	6899      	ldr	r1, [r3, #8]
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e4e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8011e54:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8011e5a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8011e60:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e66:	3b01      	subs	r3, #1
 8011e68:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8011e6a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	430a      	orrs	r2, r1
 8011e72:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	68d9      	ldr	r1, [r3, #12]
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	681a      	ldr	r2, [r3, #0]
 8011e7e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8011e82:	400b      	ands	r3, r1
 8011e84:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	68d9      	ldr	r1, [r3, #12]
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e94:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011e9a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8011e9c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011ea2:	3b01      	subs	r3, #1
 8011ea4:	021b      	lsls	r3, r3, #8
 8011ea6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	430a      	orrs	r2, r1
 8011eae:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	2201      	movs	r2, #1
 8011ebc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8011ec8:	2300      	movs	r3, #0
}
 8011eca:	4618      	mov	r0, r3
 8011ecc:	3720      	adds	r7, #32
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	bd80      	pop	{r7, pc}
 8011ed2:	bf00      	nop
 8011ed4:	40015404 	.word	0x40015404
 8011ed8:	40015424 	.word	0x40015424
 8011edc:	40015400 	.word	0x40015400
 8011ee0:	40015800 	.word	0x40015800
 8011ee4:	cccccccd 	.word	0xcccccccd
 8011ee8:	ff05c010 	.word	0xff05c010
 8011eec:	fff88000 	.word	0xfff88000

08011ef0 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8011ef0:	b480      	push	{r7}
 8011ef2:	b085      	sub	sp, #20
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8011ef8:	4b18      	ldr	r3, [pc, #96]	; (8011f5c <SAI_Disable+0x6c>)
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	4a18      	ldr	r2, [pc, #96]	; (8011f60 <SAI_Disable+0x70>)
 8011efe:	fba2 2303 	umull	r2, r3, r2, r3
 8011f02:	0b1b      	lsrs	r3, r3, #12
 8011f04:	009b      	lsls	r3, r3, #2
 8011f06:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	681a      	ldr	r2, [r3, #0]
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8011f1a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d10a      	bne.n	8011f38 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011f28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8011f32:	2303      	movs	r3, #3
 8011f34:	72fb      	strb	r3, [r7, #11]
      break;
 8011f36:	e009      	b.n	8011f4c <SAI_Disable+0x5c>
    }
    count--;
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	3b01      	subs	r3, #1
 8011f3c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d1e7      	bne.n	8011f1c <SAI_Disable+0x2c>

  return status;
 8011f4c:	7afb      	ldrb	r3, [r7, #11]
}
 8011f4e:	4618      	mov	r0, r3
 8011f50:	3714      	adds	r7, #20
 8011f52:	46bd      	mov	sp, r7
 8011f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f58:	4770      	bx	lr
 8011f5a:	bf00      	nop
 8011f5c:	20000194 	.word	0x20000194
 8011f60:	95cbec1b 	.word	0x95cbec1b

08011f64 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b082      	sub	sp, #8
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d101      	bne.n	8011f76 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8011f72:	2301      	movs	r3, #1
 8011f74:	e022      	b.n	8011fbc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011f7c:	b2db      	uxtb	r3, r3
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d105      	bne.n	8011f8e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	2200      	movs	r2, #0
 8011f86:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8011f88:	6878      	ldr	r0, [r7, #4]
 8011f8a:	f7f0 f863 	bl	8002054 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	2203      	movs	r2, #3
 8011f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	f000 f814 	bl	8011fc4 <HAL_SD_InitCard>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d001      	beq.n	8011fa6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8011fa2:	2301      	movs	r3, #1
 8011fa4:	e00a      	b.n	8011fbc <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2200      	movs	r2, #0
 8011faa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2200      	movs	r2, #0
 8011fb0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	2201      	movs	r2, #1
 8011fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8011fba:	2300      	movs	r3, #0
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3708      	adds	r7, #8
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}

08011fc4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8011fc4:	b5b0      	push	{r4, r5, r7, lr}
 8011fc6:	b08e      	sub	sp, #56	; 0x38
 8011fc8:	af04      	add	r7, sp, #16
 8011fca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8011fcc:	2300      	movs	r3, #0
 8011fce:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8011fd8:	2300      	movs	r3, #0
 8011fda:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8011fdc:	2300      	movs	r3, #0
 8011fde:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8011fe0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8011fe4:	f7fe fd7a 	bl	8010adc <HAL_RCCEx_GetPeriphCLKFreq>
 8011fe8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8011fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d109      	bne.n	8012004 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	2201      	movs	r2, #1
 8011ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011ffe:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8012000:	2301      	movs	r3, #1
 8012002:	e07b      	b.n	80120fc <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8012004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012006:	09db      	lsrs	r3, r3, #7
 8012008:	4a3e      	ldr	r2, [pc, #248]	; (8012104 <HAL_SD_InitCard+0x140>)
 801200a:	fba2 2303 	umull	r2, r3, r2, r3
 801200e:	091b      	lsrs	r3, r3, #4
 8012010:	3b02      	subs	r3, #2
 8012012:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	681d      	ldr	r5, [r3, #0]
 8012018:	466c      	mov	r4, sp
 801201a:	f107 0314 	add.w	r3, r7, #20
 801201e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012022:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012026:	f107 0308 	add.w	r3, r7, #8
 801202a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801202c:	4628      	mov	r0, r5
 801202e:	f002 fcc5 	bl	80149bc <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	685a      	ldr	r2, [r3, #4]
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012040:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	4618      	mov	r0, r3
 8012048:	f002 fcf2 	bl	8014a30 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	685a      	ldr	r2, [r3, #4]
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801205a:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 801205c:	69fb      	ldr	r3, [r7, #28]
 801205e:	3302      	adds	r3, #2
 8012060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012062:	fbb2 f3f3 	udiv	r3, r2, r3
 8012066:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8012068:	4a27      	ldr	r2, [pc, #156]	; (8012108 <HAL_SD_InitCard+0x144>)
 801206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801206c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012070:	3301      	adds	r3, #1
 8012072:	4618      	mov	r0, r3
 8012074:	f7f8 fe9e 	bl	800adb4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8012078:	6878      	ldr	r0, [r7, #4]
 801207a:	f000 fb77 	bl	801276c <SD_PowerON>
 801207e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8012080:	6a3b      	ldr	r3, [r7, #32]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d00b      	beq.n	801209e <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	2201      	movs	r2, #1
 801208a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012092:	6a3b      	ldr	r3, [r7, #32]
 8012094:	431a      	orrs	r2, r3
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 801209a:	2301      	movs	r3, #1
 801209c:	e02e      	b.n	80120fc <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 801209e:	6878      	ldr	r0, [r7, #4]
 80120a0:	f000 fa96 	bl	80125d0 <SD_InitCard>
 80120a4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80120a6:	6a3b      	ldr	r3, [r7, #32]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d00b      	beq.n	80120c4 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	2201      	movs	r2, #1
 80120b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80120b8:	6a3b      	ldr	r3, [r7, #32]
 80120ba:	431a      	orrs	r2, r3
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80120c0:	2301      	movs	r3, #1
 80120c2:	e01b      	b.n	80120fc <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80120cc:	4618      	mov	r0, r3
 80120ce:	f002 fd42 	bl	8014b56 <SDMMC_CmdBlockLength>
 80120d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80120d4:	6a3b      	ldr	r3, [r7, #32]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d00f      	beq.n	80120fa <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	4a0b      	ldr	r2, [pc, #44]	; (801210c <HAL_SD_InitCard+0x148>)
 80120e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80120e6:	6a3b      	ldr	r3, [r7, #32]
 80120e8:	431a      	orrs	r2, r3
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	2201      	movs	r2, #1
 80120f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80120f6:	2301      	movs	r3, #1
 80120f8:	e000      	b.n	80120fc <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 80120fa:	2300      	movs	r3, #0
}
 80120fc:	4618      	mov	r0, r3
 80120fe:	3728      	adds	r7, #40	; 0x28
 8012100:	46bd      	mov	sp, r7
 8012102:	bdb0      	pop	{r4, r5, r7, pc}
 8012104:	014f8b59 	.word	0x014f8b59
 8012108:	00012110 	.word	0x00012110
 801210c:	004005ff 	.word	0x004005ff

08012110 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8012110:	b480      	push	{r7}
 8012112:	b083      	sub	sp, #12
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
 8012118:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801211e:	0f9b      	lsrs	r3, r3, #30
 8012120:	b2da      	uxtb	r2, r3
 8012122:	683b      	ldr	r3, [r7, #0]
 8012124:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801212a:	0e9b      	lsrs	r3, r3, #26
 801212c:	b2db      	uxtb	r3, r3
 801212e:	f003 030f 	and.w	r3, r3, #15
 8012132:	b2da      	uxtb	r2, r3
 8012134:	683b      	ldr	r3, [r7, #0]
 8012136:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801213c:	0e1b      	lsrs	r3, r3, #24
 801213e:	b2db      	uxtb	r3, r3
 8012140:	f003 0303 	and.w	r3, r3, #3
 8012144:	b2da      	uxtb	r2, r3
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801214e:	0c1b      	lsrs	r3, r3, #16
 8012150:	b2da      	uxtb	r2, r3
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801215a:	0a1b      	lsrs	r3, r3, #8
 801215c:	b2da      	uxtb	r2, r3
 801215e:	683b      	ldr	r3, [r7, #0]
 8012160:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012166:	b2da      	uxtb	r2, r3
 8012168:	683b      	ldr	r3, [r7, #0]
 801216a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012170:	0d1b      	lsrs	r3, r3, #20
 8012172:	b29a      	uxth	r2, r3
 8012174:	683b      	ldr	r3, [r7, #0]
 8012176:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801217c:	0c1b      	lsrs	r3, r3, #16
 801217e:	b2db      	uxtb	r3, r3
 8012180:	f003 030f 	and.w	r3, r3, #15
 8012184:	b2da      	uxtb	r2, r3
 8012186:	683b      	ldr	r3, [r7, #0]
 8012188:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801218e:	0bdb      	lsrs	r3, r3, #15
 8012190:	b2db      	uxtb	r3, r3
 8012192:	f003 0301 	and.w	r3, r3, #1
 8012196:	b2da      	uxtb	r2, r3
 8012198:	683b      	ldr	r3, [r7, #0]
 801219a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80121a0:	0b9b      	lsrs	r3, r3, #14
 80121a2:	b2db      	uxtb	r3, r3
 80121a4:	f003 0301 	and.w	r3, r3, #1
 80121a8:	b2da      	uxtb	r2, r3
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80121b2:	0b5b      	lsrs	r3, r3, #13
 80121b4:	b2db      	uxtb	r3, r3
 80121b6:	f003 0301 	and.w	r3, r3, #1
 80121ba:	b2da      	uxtb	r2, r3
 80121bc:	683b      	ldr	r3, [r7, #0]
 80121be:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80121c4:	0b1b      	lsrs	r3, r3, #12
 80121c6:	b2db      	uxtb	r3, r3
 80121c8:	f003 0301 	and.w	r3, r3, #1
 80121cc:	b2da      	uxtb	r2, r3
 80121ce:	683b      	ldr	r3, [r7, #0]
 80121d0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	2200      	movs	r2, #0
 80121d6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d163      	bne.n	80122a8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80121e4:	009a      	lsls	r2, r3, #2
 80121e6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80121ea:	4013      	ands	r3, r2
 80121ec:	687a      	ldr	r2, [r7, #4]
 80121ee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80121f0:	0f92      	lsrs	r2, r2, #30
 80121f2:	431a      	orrs	r2, r3
 80121f4:	683b      	ldr	r3, [r7, #0]
 80121f6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121fc:	0edb      	lsrs	r3, r3, #27
 80121fe:	b2db      	uxtb	r3, r3
 8012200:	f003 0307 	and.w	r3, r3, #7
 8012204:	b2da      	uxtb	r2, r3
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801220e:	0e1b      	lsrs	r3, r3, #24
 8012210:	b2db      	uxtb	r3, r3
 8012212:	f003 0307 	and.w	r3, r3, #7
 8012216:	b2da      	uxtb	r2, r3
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012220:	0d5b      	lsrs	r3, r3, #21
 8012222:	b2db      	uxtb	r3, r3
 8012224:	f003 0307 	and.w	r3, r3, #7
 8012228:	b2da      	uxtb	r2, r3
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012232:	0c9b      	lsrs	r3, r3, #18
 8012234:	b2db      	uxtb	r3, r3
 8012236:	f003 0307 	and.w	r3, r3, #7
 801223a:	b2da      	uxtb	r2, r3
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012244:	0bdb      	lsrs	r3, r3, #15
 8012246:	b2db      	uxtb	r3, r3
 8012248:	f003 0307 	and.w	r3, r3, #7
 801224c:	b2da      	uxtb	r2, r3
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	691b      	ldr	r3, [r3, #16]
 8012256:	1c5a      	adds	r2, r3, #1
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 801225c:	683b      	ldr	r3, [r7, #0]
 801225e:	7e1b      	ldrb	r3, [r3, #24]
 8012260:	b2db      	uxtb	r3, r3
 8012262:	f003 0307 	and.w	r3, r3, #7
 8012266:	3302      	adds	r3, #2
 8012268:	2201      	movs	r2, #1
 801226a:	fa02 f303 	lsl.w	r3, r2, r3
 801226e:	687a      	ldr	r2, [r7, #4]
 8012270:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8012272:	fb03 f202 	mul.w	r2, r3, r2
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	7a1b      	ldrb	r3, [r3, #8]
 801227e:	b2db      	uxtb	r3, r3
 8012280:	f003 030f 	and.w	r3, r3, #15
 8012284:	2201      	movs	r2, #1
 8012286:	409a      	lsls	r2, r3
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012290:	687a      	ldr	r2, [r7, #4]
 8012292:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8012294:	0a52      	lsrs	r2, r2, #9
 8012296:	fb03 f202 	mul.w	r2, r3, r2
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80122a4:	661a      	str	r2, [r3, #96]	; 0x60
 80122a6:	e031      	b.n	801230c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122ac:	2b01      	cmp	r3, #1
 80122ae:	d11d      	bne.n	80122ec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80122b4:	041b      	lsls	r3, r3, #16
 80122b6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122be:	0c1b      	lsrs	r3, r3, #16
 80122c0:	431a      	orrs	r2, r3
 80122c2:	683b      	ldr	r3, [r7, #0]
 80122c4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80122c6:	683b      	ldr	r3, [r7, #0]
 80122c8:	691b      	ldr	r3, [r3, #16]
 80122ca:	3301      	adds	r3, #1
 80122cc:	029a      	lsls	r2, r3, #10
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80122e0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	661a      	str	r2, [r3, #96]	; 0x60
 80122ea:	e00f      	b.n	801230c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	4a58      	ldr	r2, [pc, #352]	; (8012454 <HAL_SD_GetCardCSD+0x344>)
 80122f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	2201      	movs	r2, #1
 8012304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8012308:	2301      	movs	r3, #1
 801230a:	e09d      	b.n	8012448 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012310:	0b9b      	lsrs	r3, r3, #14
 8012312:	b2db      	uxtb	r3, r3
 8012314:	f003 0301 	and.w	r3, r3, #1
 8012318:	b2da      	uxtb	r2, r3
 801231a:	683b      	ldr	r3, [r7, #0]
 801231c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012322:	09db      	lsrs	r3, r3, #7
 8012324:	b2db      	uxtb	r3, r3
 8012326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801232a:	b2da      	uxtb	r2, r3
 801232c:	683b      	ldr	r3, [r7, #0]
 801232e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012334:	b2db      	uxtb	r3, r3
 8012336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801233a:	b2da      	uxtb	r2, r3
 801233c:	683b      	ldr	r3, [r7, #0]
 801233e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012344:	0fdb      	lsrs	r3, r3, #31
 8012346:	b2da      	uxtb	r2, r3
 8012348:	683b      	ldr	r3, [r7, #0]
 801234a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012350:	0f5b      	lsrs	r3, r3, #29
 8012352:	b2db      	uxtb	r3, r3
 8012354:	f003 0303 	and.w	r3, r3, #3
 8012358:	b2da      	uxtb	r2, r3
 801235a:	683b      	ldr	r3, [r7, #0]
 801235c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012362:	0e9b      	lsrs	r3, r3, #26
 8012364:	b2db      	uxtb	r3, r3
 8012366:	f003 0307 	and.w	r3, r3, #7
 801236a:	b2da      	uxtb	r2, r3
 801236c:	683b      	ldr	r3, [r7, #0]
 801236e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012374:	0d9b      	lsrs	r3, r3, #22
 8012376:	b2db      	uxtb	r3, r3
 8012378:	f003 030f 	and.w	r3, r3, #15
 801237c:	b2da      	uxtb	r2, r3
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012386:	0d5b      	lsrs	r3, r3, #21
 8012388:	b2db      	uxtb	r3, r3
 801238a:	f003 0301 	and.w	r3, r3, #1
 801238e:	b2da      	uxtb	r2, r3
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8012396:	683b      	ldr	r3, [r7, #0]
 8012398:	2200      	movs	r2, #0
 801239a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123a2:	0c1b      	lsrs	r3, r3, #16
 80123a4:	b2db      	uxtb	r3, r3
 80123a6:	f003 0301 	and.w	r3, r3, #1
 80123aa:	b2da      	uxtb	r2, r3
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123b6:	0bdb      	lsrs	r3, r3, #15
 80123b8:	b2db      	uxtb	r3, r3
 80123ba:	f003 0301 	and.w	r3, r3, #1
 80123be:	b2da      	uxtb	r2, r3
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123ca:	0b9b      	lsrs	r3, r3, #14
 80123cc:	b2db      	uxtb	r3, r3
 80123ce:	f003 0301 	and.w	r3, r3, #1
 80123d2:	b2da      	uxtb	r2, r3
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123de:	0b5b      	lsrs	r3, r3, #13
 80123e0:	b2db      	uxtb	r3, r3
 80123e2:	f003 0301 	and.w	r3, r3, #1
 80123e6:	b2da      	uxtb	r2, r3
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123f2:	0b1b      	lsrs	r3, r3, #12
 80123f4:	b2db      	uxtb	r3, r3
 80123f6:	f003 0301 	and.w	r3, r3, #1
 80123fa:	b2da      	uxtb	r2, r3
 80123fc:	683b      	ldr	r3, [r7, #0]
 80123fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012406:	0a9b      	lsrs	r3, r3, #10
 8012408:	b2db      	uxtb	r3, r3
 801240a:	f003 0303 	and.w	r3, r3, #3
 801240e:	b2da      	uxtb	r2, r3
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801241a:	0a1b      	lsrs	r3, r3, #8
 801241c:	b2db      	uxtb	r3, r3
 801241e:	f003 0303 	and.w	r3, r3, #3
 8012422:	b2da      	uxtb	r2, r3
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801242e:	085b      	lsrs	r3, r3, #1
 8012430:	b2db      	uxtb	r3, r3
 8012432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012436:	b2da      	uxtb	r2, r3
 8012438:	683b      	ldr	r3, [r7, #0]
 801243a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	2201      	movs	r2, #1
 8012442:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8012446:	2300      	movs	r3, #0
}
 8012448:	4618      	mov	r0, r3
 801244a:	370c      	adds	r7, #12
 801244c:	46bd      	mov	sp, r7
 801244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012452:	4770      	bx	lr
 8012454:	004005ff 	.word	0x004005ff

08012458 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8012458:	b5b0      	push	{r4, r5, r7, lr}
 801245a:	b090      	sub	sp, #64	; 0x40
 801245c:	af04      	add	r7, sp, #16
 801245e:	6078      	str	r0, [r7, #4]
 8012460:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8012462:	2300      	movs	r3, #0
 8012464:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	2203      	movs	r2, #3
 801246c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012474:	2b03      	cmp	r3, #3
 8012476:	d02e      	beq.n	80124d6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8012478:	683b      	ldr	r3, [r7, #0]
 801247a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801247e:	d106      	bne.n	801248e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012484:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	639a      	str	r2, [r3, #56]	; 0x38
 801248c:	e029      	b.n	80124e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012494:	d10a      	bne.n	80124ac <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8012496:	6878      	ldr	r0, [r7, #4]
 8012498:	f000 f9f6 	bl	8012888 <SD_WideBus_Enable>
 801249c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80124a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124a4:	431a      	orrs	r2, r3
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	639a      	str	r2, [r3, #56]	; 0x38
 80124aa:	e01a      	b.n	80124e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80124ac:	683b      	ldr	r3, [r7, #0]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d10a      	bne.n	80124c8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	f000 fa33 	bl	801291e <SD_WideBus_Disable>
 80124b8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80124be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c0:	431a      	orrs	r2, r3
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	639a      	str	r2, [r3, #56]	; 0x38
 80124c6:	e00c      	b.n	80124e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	639a      	str	r2, [r3, #56]	; 0x38
 80124d4:	e005      	b.n	80124e2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124da:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d007      	beq.n	80124fa <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	4a35      	ldr	r2, [pc, #212]	; (80125c4 <HAL_SD_ConfigWideBusOperation+0x16c>)
 80124f0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80124f2:	2301      	movs	r3, #1
 80124f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80124f8:	e042      	b.n	8012580 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80124fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80124fe:	f7fe faed 	bl	8010adc <HAL_RCCEx_GetPeriphCLKFreq>
 8012502:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8012504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012506:	2b00      	cmp	r3, #0
 8012508:	d031      	beq.n	801256e <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	685b      	ldr	r3, [r3, #4]
 801250e:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	689b      	ldr	r3, [r3, #8]
 8012514:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	68db      	ldr	r3, [r3, #12]
 801251a:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	695b      	ldr	r3, [r3, #20]
 8012524:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	699b      	ldr	r3, [r3, #24]
 801252a:	3302      	adds	r3, #2
 801252c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801252e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012532:	4a25      	ldr	r2, [pc, #148]	; (80125c8 <HAL_SD_ConfigWideBusOperation+0x170>)
 8012534:	4293      	cmp	r3, r2
 8012536:	d907      	bls.n	8012548 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8012538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801253a:	4a24      	ldr	r2, [pc, #144]	; (80125cc <HAL_SD_ConfigWideBusOperation+0x174>)
 801253c:	fba2 2303 	umull	r2, r3, r2, r3
 8012540:	0ddb      	lsrs	r3, r3, #23
 8012542:	3b02      	subs	r3, #2
 8012544:	623b      	str	r3, [r7, #32]
 8012546:	e002      	b.n	801254e <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	699b      	ldr	r3, [r3, #24]
 801254c:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681d      	ldr	r5, [r3, #0]
 8012552:	466c      	mov	r4, sp
 8012554:	f107 0318 	add.w	r3, r7, #24
 8012558:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801255c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012560:	f107 030c 	add.w	r3, r7, #12
 8012564:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012566:	4628      	mov	r0, r5
 8012568:	f002 fa28 	bl	80149bc <SDMMC_Init>
 801256c:	e008      	b.n	8012580 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012572:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 801257a:	2301      	movs	r3, #1
 801257c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012588:	4618      	mov	r0, r3
 801258a:	f002 fae4 	bl	8014b56 <SDMMC_CmdBlockLength>
 801258e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8012590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012592:	2b00      	cmp	r3, #0
 8012594:	d00c      	beq.n	80125b0 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	4a0a      	ldr	r2, [pc, #40]	; (80125c4 <HAL_SD_ConfigWideBusOperation+0x16c>)
 801259c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80125a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125a4:	431a      	orrs	r2, r3
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80125aa:	2301      	movs	r3, #1
 80125ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	2201      	movs	r2, #1
 80125b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80125b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80125bc:	4618      	mov	r0, r3
 80125be:	3730      	adds	r7, #48	; 0x30
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bdb0      	pop	{r4, r5, r7, pc}
 80125c4:	004005ff 	.word	0x004005ff
 80125c8:	017d7840 	.word	0x017d7840
 80125cc:	55e63b89 	.word	0x55e63b89

080125d0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80125d0:	b5b0      	push	{r4, r5, r7, lr}
 80125d2:	b094      	sub	sp, #80	; 0x50
 80125d4:	af04      	add	r7, sp, #16
 80125d6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80125d8:	2301      	movs	r3, #1
 80125da:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	4618      	mov	r0, r3
 80125e2:	f002 fa34 	bl	8014a4e <SDMMC_GetPowerState>
 80125e6:	4603      	mov	r3, r0
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d102      	bne.n	80125f2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80125ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80125f0:	e0b8      	b.n	8012764 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125f6:	2b03      	cmp	r3, #3
 80125f8:	d02f      	beq.n	801265a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	4618      	mov	r0, r3
 8012600:	f002 fbb3 	bl	8014d6a <SDMMC_CmdSendCID>
 8012604:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8012606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012608:	2b00      	cmp	r3, #0
 801260a:	d001      	beq.n	8012610 <SD_InitCard+0x40>
    {
      return errorstate;
 801260c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801260e:	e0a9      	b.n	8012764 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	2100      	movs	r1, #0
 8012616:	4618      	mov	r0, r3
 8012618:	f002 fa5e 	bl	8014ad8 <SDMMC_GetResponse>
 801261c:	4602      	mov	r2, r0
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	2104      	movs	r1, #4
 8012628:	4618      	mov	r0, r3
 801262a:	f002 fa55 	bl	8014ad8 <SDMMC_GetResponse>
 801262e:	4602      	mov	r2, r0
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	2108      	movs	r1, #8
 801263a:	4618      	mov	r0, r3
 801263c:	f002 fa4c 	bl	8014ad8 <SDMMC_GetResponse>
 8012640:	4602      	mov	r2, r0
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	210c      	movs	r1, #12
 801264c:	4618      	mov	r0, r3
 801264e:	f002 fa43 	bl	8014ad8 <SDMMC_GetResponse>
 8012652:	4602      	mov	r2, r0
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801265e:	2b03      	cmp	r3, #3
 8012660:	d00d      	beq.n	801267e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	f107 020e 	add.w	r2, r7, #14
 801266a:	4611      	mov	r1, r2
 801266c:	4618      	mov	r0, r3
 801266e:	f002 fbb9 	bl	8014de4 <SDMMC_CmdSetRelAdd>
 8012672:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8012674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012676:	2b00      	cmp	r3, #0
 8012678:	d001      	beq.n	801267e <SD_InitCard+0xae>
    {
      return errorstate;
 801267a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801267c:	e072      	b.n	8012764 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012682:	2b03      	cmp	r3, #3
 8012684:	d036      	beq.n	80126f4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8012686:	89fb      	ldrh	r3, [r7, #14]
 8012688:	461a      	mov	r2, r3
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681a      	ldr	r2, [r3, #0]
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012696:	041b      	lsls	r3, r3, #16
 8012698:	4619      	mov	r1, r3
 801269a:	4610      	mov	r0, r2
 801269c:	f002 fb83 	bl	8014da6 <SDMMC_CmdSendCSD>
 80126a0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80126a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d001      	beq.n	80126ac <SD_InitCard+0xdc>
    {
      return errorstate;
 80126a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126aa:	e05b      	b.n	8012764 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	2100      	movs	r1, #0
 80126b2:	4618      	mov	r0, r3
 80126b4:	f002 fa10 	bl	8014ad8 <SDMMC_GetResponse>
 80126b8:	4602      	mov	r2, r0
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	2104      	movs	r1, #4
 80126c4:	4618      	mov	r0, r3
 80126c6:	f002 fa07 	bl	8014ad8 <SDMMC_GetResponse>
 80126ca:	4602      	mov	r2, r0
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	2108      	movs	r1, #8
 80126d6:	4618      	mov	r0, r3
 80126d8:	f002 f9fe 	bl	8014ad8 <SDMMC_GetResponse>
 80126dc:	4602      	mov	r2, r0
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	210c      	movs	r1, #12
 80126e8:	4618      	mov	r0, r3
 80126ea:	f002 f9f5 	bl	8014ad8 <SDMMC_GetResponse>
 80126ee:	4602      	mov	r2, r0
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	2104      	movs	r1, #4
 80126fa:	4618      	mov	r0, r3
 80126fc:	f002 f9ec 	bl	8014ad8 <SDMMC_GetResponse>
 8012700:	4603      	mov	r3, r0
 8012702:	0d1a      	lsrs	r2, r3, #20
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8012708:	f107 0310 	add.w	r3, r7, #16
 801270c:	4619      	mov	r1, r3
 801270e:	6878      	ldr	r0, [r7, #4]
 8012710:	f7ff fcfe 	bl	8012110 <HAL_SD_GetCardCSD>
 8012714:	4603      	mov	r3, r0
 8012716:	2b00      	cmp	r3, #0
 8012718:	d002      	beq.n	8012720 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801271a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801271e:	e021      	b.n	8012764 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	6819      	ldr	r1, [r3, #0]
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012728:	041b      	lsls	r3, r3, #16
 801272a:	2200      	movs	r2, #0
 801272c:	461c      	mov	r4, r3
 801272e:	4615      	mov	r5, r2
 8012730:	4622      	mov	r2, r4
 8012732:	462b      	mov	r3, r5
 8012734:	4608      	mov	r0, r1
 8012736:	f002 fa30 	bl	8014b9a <SDMMC_CmdSelDesel>
 801273a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 801273c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801273e:	2b00      	cmp	r3, #0
 8012740:	d001      	beq.n	8012746 <SD_InitCard+0x176>
  {
    return errorstate;
 8012742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012744:	e00e      	b.n	8012764 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	681d      	ldr	r5, [r3, #0]
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	466c      	mov	r4, sp
 801274e:	f103 0210 	add.w	r2, r3, #16
 8012752:	ca07      	ldmia	r2, {r0, r1, r2}
 8012754:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012758:	3304      	adds	r3, #4
 801275a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801275c:	4628      	mov	r0, r5
 801275e:	f002 f92d 	bl	80149bc <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8012762:	2300      	movs	r3, #0
}
 8012764:	4618      	mov	r0, r3
 8012766:	3740      	adds	r7, #64	; 0x40
 8012768:	46bd      	mov	sp, r7
 801276a:	bdb0      	pop	{r4, r5, r7, pc}

0801276c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b086      	sub	sp, #24
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012774:	2300      	movs	r3, #0
 8012776:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8012778:	2300      	movs	r3, #0
 801277a:	617b      	str	r3, [r7, #20]
 801277c:	2300      	movs	r3, #0
 801277e:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	4618      	mov	r0, r3
 8012786:	f002 fa2b 	bl	8014be0 <SDMMC_CmdGoIdleState>
 801278a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d001      	beq.n	8012796 <SD_PowerON+0x2a>
  {
    return errorstate;
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	e072      	b.n	801287c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	4618      	mov	r0, r3
 801279c:	f002 fa3e 	bl	8014c1c <SDMMC_CmdOperCond>
 80127a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d00d      	beq.n	80127c4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	2200      	movs	r2, #0
 80127ac:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	4618      	mov	r0, r3
 80127b4:	f002 fa14 	bl	8014be0 <SDMMC_CmdGoIdleState>
 80127b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d004      	beq.n	80127ca <SD_PowerON+0x5e>
    {
      return errorstate;
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	e05b      	b.n	801287c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	2201      	movs	r2, #1
 80127c8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80127ce:	2b01      	cmp	r3, #1
 80127d0:	d137      	bne.n	8012842 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	2100      	movs	r1, #0
 80127d8:	4618      	mov	r0, r3
 80127da:	f002 fa3e 	bl	8014c5a <SDMMC_CmdAppCommand>
 80127de:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d02d      	beq.n	8012842 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80127e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80127ea:	e047      	b.n	801287c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	2100      	movs	r1, #0
 80127f2:	4618      	mov	r0, r3
 80127f4:	f002 fa31 	bl	8014c5a <SDMMC_CmdAppCommand>
 80127f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d001      	beq.n	8012804 <SD_PowerON+0x98>
    {
      return errorstate;
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	e03b      	b.n	801287c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	491e      	ldr	r1, [pc, #120]	; (8012884 <SD_PowerON+0x118>)
 801280a:	4618      	mov	r0, r3
 801280c:	f002 fa47 	bl	8014c9e <SDMMC_CmdAppOperCommand>
 8012810:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d002      	beq.n	801281e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8012818:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801281c:	e02e      	b.n	801287c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	2100      	movs	r1, #0
 8012824:	4618      	mov	r0, r3
 8012826:	f002 f957 	bl	8014ad8 <SDMMC_GetResponse>
 801282a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 801282c:	697b      	ldr	r3, [r7, #20]
 801282e:	0fdb      	lsrs	r3, r3, #31
 8012830:	2b01      	cmp	r3, #1
 8012832:	d101      	bne.n	8012838 <SD_PowerON+0xcc>
 8012834:	2301      	movs	r3, #1
 8012836:	e000      	b.n	801283a <SD_PowerON+0xce>
 8012838:	2300      	movs	r3, #0
 801283a:	613b      	str	r3, [r7, #16]

    count++;
 801283c:	68bb      	ldr	r3, [r7, #8]
 801283e:	3301      	adds	r3, #1
 8012840:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8012842:	68bb      	ldr	r3, [r7, #8]
 8012844:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012848:	4293      	cmp	r3, r2
 801284a:	d802      	bhi.n	8012852 <SD_PowerON+0xe6>
 801284c:	693b      	ldr	r3, [r7, #16]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d0cc      	beq.n	80127ec <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8012852:	68bb      	ldr	r3, [r7, #8]
 8012854:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012858:	4293      	cmp	r3, r2
 801285a:	d902      	bls.n	8012862 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 801285c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8012860:	e00c      	b.n	801287c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012868:	2b00      	cmp	r3, #0
 801286a:	d003      	beq.n	8012874 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	2201      	movs	r2, #1
 8012870:	645a      	str	r2, [r3, #68]	; 0x44
 8012872:	e002      	b.n	801287a <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	2200      	movs	r2, #0
 8012878:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 801287a:	2300      	movs	r3, #0
}
 801287c:	4618      	mov	r0, r3
 801287e:	3718      	adds	r7, #24
 8012880:	46bd      	mov	sp, r7
 8012882:	bd80      	pop	{r7, pc}
 8012884:	c1100000 	.word	0xc1100000

08012888 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b086      	sub	sp, #24
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8012890:	2300      	movs	r3, #0
 8012892:	60fb      	str	r3, [r7, #12]
 8012894:	2300      	movs	r3, #0
 8012896:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	2100      	movs	r1, #0
 801289e:	4618      	mov	r0, r3
 80128a0:	f002 f91a 	bl	8014ad8 <SDMMC_GetResponse>
 80128a4:	4603      	mov	r3, r0
 80128a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80128aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80128ae:	d102      	bne.n	80128b6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80128b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80128b4:	e02f      	b.n	8012916 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80128b6:	f107 030c 	add.w	r3, r7, #12
 80128ba:	4619      	mov	r1, r3
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	f000 f879 	bl	80129b4 <SD_FindSCR>
 80128c2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80128c4:	697b      	ldr	r3, [r7, #20]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d001      	beq.n	80128ce <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80128ca:	697b      	ldr	r3, [r7, #20]
 80128cc:	e023      	b.n	8012916 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80128ce:	693b      	ldr	r3, [r7, #16]
 80128d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d01c      	beq.n	8012912 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	681a      	ldr	r2, [r3, #0]
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80128e0:	041b      	lsls	r3, r3, #16
 80128e2:	4619      	mov	r1, r3
 80128e4:	4610      	mov	r0, r2
 80128e6:	f002 f9b8 	bl	8014c5a <SDMMC_CmdAppCommand>
 80128ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80128ec:	697b      	ldr	r3, [r7, #20]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d001      	beq.n	80128f6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80128f2:	697b      	ldr	r3, [r7, #20]
 80128f4:	e00f      	b.n	8012916 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	2102      	movs	r1, #2
 80128fc:	4618      	mov	r0, r3
 80128fe:	f002 f9f1 	bl	8014ce4 <SDMMC_CmdBusWidth>
 8012902:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8012904:	697b      	ldr	r3, [r7, #20]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d001      	beq.n	801290e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 801290a:	697b      	ldr	r3, [r7, #20]
 801290c:	e003      	b.n	8012916 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801290e:	2300      	movs	r3, #0
 8012910:	e001      	b.n	8012916 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8012912:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8012916:	4618      	mov	r0, r3
 8012918:	3718      	adds	r7, #24
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}

0801291e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 801291e:	b580      	push	{r7, lr}
 8012920:	b086      	sub	sp, #24
 8012922:	af00      	add	r7, sp, #0
 8012924:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8012926:	2300      	movs	r3, #0
 8012928:	60fb      	str	r3, [r7, #12]
 801292a:	2300      	movs	r3, #0
 801292c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	2100      	movs	r1, #0
 8012934:	4618      	mov	r0, r3
 8012936:	f002 f8cf 	bl	8014ad8 <SDMMC_GetResponse>
 801293a:	4603      	mov	r3, r0
 801293c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012940:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012944:	d102      	bne.n	801294c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8012946:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801294a:	e02f      	b.n	80129ac <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 801294c:	f107 030c 	add.w	r3, r7, #12
 8012950:	4619      	mov	r1, r3
 8012952:	6878      	ldr	r0, [r7, #4]
 8012954:	f000 f82e 	bl	80129b4 <SD_FindSCR>
 8012958:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 801295a:	697b      	ldr	r3, [r7, #20]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d001      	beq.n	8012964 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8012960:	697b      	ldr	r3, [r7, #20]
 8012962:	e023      	b.n	80129ac <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8012964:	693b      	ldr	r3, [r7, #16]
 8012966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801296a:	2b00      	cmp	r3, #0
 801296c:	d01c      	beq.n	80129a8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	681a      	ldr	r2, [r3, #0]
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012976:	041b      	lsls	r3, r3, #16
 8012978:	4619      	mov	r1, r3
 801297a:	4610      	mov	r0, r2
 801297c:	f002 f96d 	bl	8014c5a <SDMMC_CmdAppCommand>
 8012980:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8012982:	697b      	ldr	r3, [r7, #20]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d001      	beq.n	801298c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8012988:	697b      	ldr	r3, [r7, #20]
 801298a:	e00f      	b.n	80129ac <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	2100      	movs	r1, #0
 8012992:	4618      	mov	r0, r3
 8012994:	f002 f9a6 	bl	8014ce4 <SDMMC_CmdBusWidth>
 8012998:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d001      	beq.n	80129a4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80129a0:	697b      	ldr	r3, [r7, #20]
 80129a2:	e003      	b.n	80129ac <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80129a4:	2300      	movs	r3, #0
 80129a6:	e001      	b.n	80129ac <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80129a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80129ac:	4618      	mov	r0, r3
 80129ae:	3718      	adds	r7, #24
 80129b0:	46bd      	mov	sp, r7
 80129b2:	bd80      	pop	{r7, pc}

080129b4 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80129b4:	b590      	push	{r4, r7, lr}
 80129b6:	b08f      	sub	sp, #60	; 0x3c
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
 80129bc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80129be:	f7f8 f9ed 	bl	800ad9c <HAL_GetTick>
 80129c2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80129c4:	2300      	movs	r3, #0
 80129c6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80129c8:	2300      	movs	r3, #0
 80129ca:	60bb      	str	r3, [r7, #8]
 80129cc:	2300      	movs	r3, #0
 80129ce:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80129d0:	683b      	ldr	r3, [r7, #0]
 80129d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	2108      	movs	r1, #8
 80129da:	4618      	mov	r0, r3
 80129dc:	f002 f8bb 	bl	8014b56 <SDMMC_CmdBlockLength>
 80129e0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80129e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d001      	beq.n	80129ec <SD_FindSCR+0x38>
  {
    return errorstate;
 80129e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129ea:	e0a9      	b.n	8012b40 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	681a      	ldr	r2, [r3, #0]
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80129f4:	041b      	lsls	r3, r3, #16
 80129f6:	4619      	mov	r1, r3
 80129f8:	4610      	mov	r0, r2
 80129fa:	f002 f92e 	bl	8014c5a <SDMMC_CmdAppCommand>
 80129fe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8012a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d001      	beq.n	8012a0a <SD_FindSCR+0x56>
  {
    return errorstate;
 8012a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a08:	e09a      	b.n	8012b40 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8012a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a0e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8012a10:	2308      	movs	r3, #8
 8012a12:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8012a14:	2330      	movs	r3, #48	; 0x30
 8012a16:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8012a18:	2302      	movs	r3, #2
 8012a1a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8012a20:	2301      	movs	r3, #1
 8012a22:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	f107 0210 	add.w	r2, r7, #16
 8012a2c:	4611      	mov	r1, r2
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f002 f865 	bl	8014afe <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f002 f975 	bl	8014d28 <SDMMC_CmdSendSCR>
 8012a3e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8012a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d022      	beq.n	8012a8c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8012a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a48:	e07a      	b.n	8012b40 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d00e      	beq.n	8012a76 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	6819      	ldr	r1, [r3, #0]
 8012a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a5e:	009b      	lsls	r3, r3, #2
 8012a60:	f107 0208 	add.w	r2, r7, #8
 8012a64:	18d4      	adds	r4, r2, r3
 8012a66:	4608      	mov	r0, r1
 8012a68:	f001 ffd5 	bl	8014a16 <SDMMC_ReadFIFO>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	6023      	str	r3, [r4, #0]
      index++;
 8012a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a72:	3301      	adds	r3, #1
 8012a74:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8012a76:	f7f8 f991 	bl	800ad9c <HAL_GetTick>
 8012a7a:	4602      	mov	r2, r0
 8012a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a7e:	1ad3      	subs	r3, r2, r3
 8012a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012a84:	d102      	bne.n	8012a8c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8012a86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a8a:	e059      	b.n	8012b40 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012a92:	f240 432a 	movw	r3, #1066	; 0x42a
 8012a96:	4013      	ands	r3, r2
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d0d6      	beq.n	8012a4a <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012aa2:	f003 0308 	and.w	r3, r3, #8
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d005      	beq.n	8012ab6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	2208      	movs	r2, #8
 8012ab0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8012ab2:	2308      	movs	r3, #8
 8012ab4:	e044      	b.n	8012b40 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012abc:	f003 0302 	and.w	r3, r3, #2
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d005      	beq.n	8012ad0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	2202      	movs	r2, #2
 8012aca:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8012acc:	2302      	movs	r3, #2
 8012ace:	e037      	b.n	8012b40 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ad6:	f003 0320 	and.w	r3, r3, #32
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d005      	beq.n	8012aea <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	2220      	movs	r2, #32
 8012ae4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8012ae6:	2320      	movs	r3, #32
 8012ae8:	e02a      	b.n	8012b40 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	f240 523a 	movw	r2, #1338	; 0x53a
 8012af2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	061a      	lsls	r2, r3, #24
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	021b      	lsls	r3, r3, #8
 8012afc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012b00:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	0a1b      	lsrs	r3, r3, #8
 8012b06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8012b0a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	0e1b      	lsrs	r3, r3, #24
 8012b10:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8012b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b14:	601a      	str	r2, [r3, #0]
    scr++;
 8012b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b18:	3304      	adds	r3, #4
 8012b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8012b1c:	68bb      	ldr	r3, [r7, #8]
 8012b1e:	061a      	lsls	r2, r3, #24
 8012b20:	68bb      	ldr	r3, [r7, #8]
 8012b22:	021b      	lsls	r3, r3, #8
 8012b24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012b28:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8012b2a:	68bb      	ldr	r3, [r7, #8]
 8012b2c:	0a1b      	lsrs	r3, r3, #8
 8012b2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8012b32:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8012b34:	68bb      	ldr	r3, [r7, #8]
 8012b36:	0e1b      	lsrs	r3, r3, #24
 8012b38:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8012b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b3c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8012b3e:	2300      	movs	r3, #0
}
 8012b40:	4618      	mov	r0, r3
 8012b42:	373c      	adds	r7, #60	; 0x3c
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd90      	pop	{r4, r7, pc}

08012b48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b084      	sub	sp, #16
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d101      	bne.n	8012b5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012b56:	2301      	movs	r3, #1
 8012b58:	e095      	b.n	8012c86 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d108      	bne.n	8012b74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	685b      	ldr	r3, [r3, #4]
 8012b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012b6a:	d009      	beq.n	8012b80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	2200      	movs	r2, #0
 8012b70:	61da      	str	r2, [r3, #28]
 8012b72:	e005      	b.n	8012b80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2200      	movs	r2, #0
 8012b78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	2200      	movs	r2, #0
 8012b84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8012b8c:	b2db      	uxtb	r3, r3
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d106      	bne.n	8012ba0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	2200      	movs	r2, #0
 8012b96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012b9a:	6878      	ldr	r0, [r7, #4]
 8012b9c:	f7ef fb38 	bl	8002210 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	2202      	movs	r2, #2
 8012ba4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	681a      	ldr	r2, [r3, #0]
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012bb6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	68db      	ldr	r3, [r3, #12]
 8012bbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8012bc0:	d902      	bls.n	8012bc8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	60fb      	str	r3, [r7, #12]
 8012bc6:	e002      	b.n	8012bce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8012bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012bcc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	68db      	ldr	r3, [r3, #12]
 8012bd2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8012bd6:	d007      	beq.n	8012be8 <HAL_SPI_Init+0xa0>
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	68db      	ldr	r3, [r3, #12]
 8012bdc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8012be0:	d002      	beq.n	8012be8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	2200      	movs	r2, #0
 8012be6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	685b      	ldr	r3, [r3, #4]
 8012bec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	689b      	ldr	r3, [r3, #8]
 8012bf4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8012bf8:	431a      	orrs	r2, r3
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	691b      	ldr	r3, [r3, #16]
 8012bfe:	f003 0302 	and.w	r3, r3, #2
 8012c02:	431a      	orrs	r2, r3
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	695b      	ldr	r3, [r3, #20]
 8012c08:	f003 0301 	and.w	r3, r3, #1
 8012c0c:	431a      	orrs	r2, r3
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	699b      	ldr	r3, [r3, #24]
 8012c12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012c16:	431a      	orrs	r2, r3
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	69db      	ldr	r3, [r3, #28]
 8012c1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012c20:	431a      	orrs	r2, r3
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	6a1b      	ldr	r3, [r3, #32]
 8012c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c2a:	ea42 0103 	orr.w	r1, r2, r3
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c32:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	430a      	orrs	r2, r1
 8012c3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	699b      	ldr	r3, [r3, #24]
 8012c42:	0c1b      	lsrs	r3, r3, #16
 8012c44:	f003 0204 	and.w	r2, r3, #4
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c4c:	f003 0310 	and.w	r3, r3, #16
 8012c50:	431a      	orrs	r2, r3
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c56:	f003 0308 	and.w	r3, r3, #8
 8012c5a:	431a      	orrs	r2, r3
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	68db      	ldr	r3, [r3, #12]
 8012c60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8012c64:	ea42 0103 	orr.w	r1, r2, r3
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	430a      	orrs	r2, r1
 8012c74:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	2200      	movs	r2, #0
 8012c7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2201      	movs	r2, #1
 8012c80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8012c84:	2300      	movs	r3, #0
}
 8012c86:	4618      	mov	r0, r3
 8012c88:	3710      	adds	r7, #16
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	bd80      	pop	{r7, pc}

08012c8e <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8012c8e:	b580      	push	{r7, lr}
 8012c90:	b084      	sub	sp, #16
 8012c92:	af00      	add	r7, sp, #0
 8012c94:	60f8      	str	r0, [r7, #12]
 8012c96:	60b9      	str	r1, [r7, #8]
 8012c98:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d101      	bne.n	8012ca4 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8012ca0:	2301      	movs	r3, #1
 8012ca2:	e038      	b.n	8012d16 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8012caa:	b2db      	uxtb	r3, r3
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d106      	bne.n	8012cbe <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8012cb0:	68fb      	ldr	r3, [r7, #12]
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8012cb8:	68f8      	ldr	r0, [r7, #12]
 8012cba:	f7ee f93d 	bl	8000f38 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	681a      	ldr	r2, [r3, #0]
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	3308      	adds	r3, #8
 8012cc6:	4619      	mov	r1, r3
 8012cc8:	4610      	mov	r0, r2
 8012cca:	f001 fd5f 	bl	801478c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	6818      	ldr	r0, [r3, #0]
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	689b      	ldr	r3, [r3, #8]
 8012cd6:	461a      	mov	r2, r3
 8012cd8:	68b9      	ldr	r1, [r7, #8]
 8012cda:	f001 fde7 	bl	80148ac <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	6858      	ldr	r0, [r3, #4]
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	689a      	ldr	r2, [r3, #8]
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cea:	6879      	ldr	r1, [r7, #4]
 8012cec:	f001 fe2e 	bl	801494c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	68fa      	ldr	r2, [r7, #12]
 8012cf6:	6892      	ldr	r2, [r2, #8]
 8012cf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	68fa      	ldr	r2, [r7, #12]
 8012d02:	6892      	ldr	r2, [r2, #8]
 8012d04:	f041 0101 	orr.w	r1, r1, #1
 8012d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	2201      	movs	r2, #1
 8012d10:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8012d14:	2300      	movs	r3, #0
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	3710      	adds	r7, #16
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}

08012d1e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012d1e:	b580      	push	{r7, lr}
 8012d20:	b082      	sub	sp, #8
 8012d22:	af00      	add	r7, sp, #0
 8012d24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d101      	bne.n	8012d30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012d2c:	2301      	movs	r3, #1
 8012d2e:	e049      	b.n	8012dc4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012d36:	b2db      	uxtb	r3, r3
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d106      	bne.n	8012d4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2200      	movs	r2, #0
 8012d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012d44:	6878      	ldr	r0, [r7, #4]
 8012d46:	f7ef fc6f 	bl	8002628 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	2202      	movs	r2, #2
 8012d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681a      	ldr	r2, [r3, #0]
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	3304      	adds	r3, #4
 8012d5a:	4619      	mov	r1, r3
 8012d5c:	4610      	mov	r0, r2
 8012d5e:	f000 fbad 	bl	80134bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	2201      	movs	r2, #1
 8012d66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	2201      	movs	r2, #1
 8012d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	2201      	movs	r2, #1
 8012d76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	2201      	movs	r2, #1
 8012d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	2201      	movs	r2, #1
 8012d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	2201      	movs	r2, #1
 8012d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	2201      	movs	r2, #1
 8012d96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	2201      	movs	r2, #1
 8012d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	2201      	movs	r2, #1
 8012da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	2201      	movs	r2, #1
 8012dae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	2201      	movs	r2, #1
 8012db6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	2201      	movs	r2, #1
 8012dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012dc2:	2300      	movs	r3, #0
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	3708      	adds	r7, #8
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}

08012dcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012dcc:	b480      	push	{r7}
 8012dce:	b085      	sub	sp, #20
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012dda:	b2db      	uxtb	r3, r3
 8012ddc:	2b01      	cmp	r3, #1
 8012dde:	d001      	beq.n	8012de4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012de0:	2301      	movs	r3, #1
 8012de2:	e04f      	b.n	8012e84 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2202      	movs	r2, #2
 8012de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	68da      	ldr	r2, [r3, #12]
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	f042 0201 	orr.w	r2, r2, #1
 8012dfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	4a23      	ldr	r2, [pc, #140]	; (8012e90 <HAL_TIM_Base_Start_IT+0xc4>)
 8012e02:	4293      	cmp	r3, r2
 8012e04:	d01d      	beq.n	8012e42 <HAL_TIM_Base_Start_IT+0x76>
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012e0e:	d018      	beq.n	8012e42 <HAL_TIM_Base_Start_IT+0x76>
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	4a1f      	ldr	r2, [pc, #124]	; (8012e94 <HAL_TIM_Base_Start_IT+0xc8>)
 8012e16:	4293      	cmp	r3, r2
 8012e18:	d013      	beq.n	8012e42 <HAL_TIM_Base_Start_IT+0x76>
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	4a1e      	ldr	r2, [pc, #120]	; (8012e98 <HAL_TIM_Base_Start_IT+0xcc>)
 8012e20:	4293      	cmp	r3, r2
 8012e22:	d00e      	beq.n	8012e42 <HAL_TIM_Base_Start_IT+0x76>
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	4a1c      	ldr	r2, [pc, #112]	; (8012e9c <HAL_TIM_Base_Start_IT+0xd0>)
 8012e2a:	4293      	cmp	r3, r2
 8012e2c:	d009      	beq.n	8012e42 <HAL_TIM_Base_Start_IT+0x76>
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	4a1b      	ldr	r2, [pc, #108]	; (8012ea0 <HAL_TIM_Base_Start_IT+0xd4>)
 8012e34:	4293      	cmp	r3, r2
 8012e36:	d004      	beq.n	8012e42 <HAL_TIM_Base_Start_IT+0x76>
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	4a19      	ldr	r2, [pc, #100]	; (8012ea4 <HAL_TIM_Base_Start_IT+0xd8>)
 8012e3e:	4293      	cmp	r3, r2
 8012e40:	d115      	bne.n	8012e6e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	689a      	ldr	r2, [r3, #8]
 8012e48:	4b17      	ldr	r3, [pc, #92]	; (8012ea8 <HAL_TIM_Base_Start_IT+0xdc>)
 8012e4a:	4013      	ands	r3, r2
 8012e4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	2b06      	cmp	r3, #6
 8012e52:	d015      	beq.n	8012e80 <HAL_TIM_Base_Start_IT+0xb4>
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012e5a:	d011      	beq.n	8012e80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	681a      	ldr	r2, [r3, #0]
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	f042 0201 	orr.w	r2, r2, #1
 8012e6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e6c:	e008      	b.n	8012e80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	681a      	ldr	r2, [r3, #0]
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	f042 0201 	orr.w	r2, r2, #1
 8012e7c:	601a      	str	r2, [r3, #0]
 8012e7e:	e000      	b.n	8012e82 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e80:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012e82:	2300      	movs	r3, #0
}
 8012e84:	4618      	mov	r0, r3
 8012e86:	3714      	adds	r7, #20
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8e:	4770      	bx	lr
 8012e90:	40012c00 	.word	0x40012c00
 8012e94:	40000400 	.word	0x40000400
 8012e98:	40000800 	.word	0x40000800
 8012e9c:	40000c00 	.word	0x40000c00
 8012ea0:	40013400 	.word	0x40013400
 8012ea4:	40014000 	.word	0x40014000
 8012ea8:	00010007 	.word	0x00010007

08012eac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b082      	sub	sp, #8
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d101      	bne.n	8012ebe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012eba:	2301      	movs	r3, #1
 8012ebc:	e049      	b.n	8012f52 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012ec4:	b2db      	uxtb	r3, r3
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d106      	bne.n	8012ed8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	2200      	movs	r2, #0
 8012ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012ed2:	6878      	ldr	r0, [r7, #4]
 8012ed4:	f7f7 fc72 	bl	800a7bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	2202      	movs	r2, #2
 8012edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	681a      	ldr	r2, [r3, #0]
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	3304      	adds	r3, #4
 8012ee8:	4619      	mov	r1, r3
 8012eea:	4610      	mov	r0, r2
 8012eec:	f000 fae6 	bl	80134bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	2201      	movs	r2, #1
 8012ef4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	2201      	movs	r2, #1
 8012efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	2201      	movs	r2, #1
 8012f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2201      	movs	r2, #1
 8012f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	2201      	movs	r2, #1
 8012f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2201      	movs	r2, #1
 8012f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	2201      	movs	r2, #1
 8012f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2201      	movs	r2, #1
 8012f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	2201      	movs	r2, #1
 8012f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	2201      	movs	r2, #1
 8012f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2201      	movs	r2, #1
 8012f44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	2201      	movs	r2, #1
 8012f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012f50:	2300      	movs	r3, #0
}
 8012f52:	4618      	mov	r0, r3
 8012f54:	3708      	adds	r7, #8
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}
	...

08012f5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b084      	sub	sp, #16
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	6078      	str	r0, [r7, #4]
 8012f64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012f66:	683b      	ldr	r3, [r7, #0]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d109      	bne.n	8012f80 <HAL_TIM_PWM_Start+0x24>
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012f72:	b2db      	uxtb	r3, r3
 8012f74:	2b01      	cmp	r3, #1
 8012f76:	bf14      	ite	ne
 8012f78:	2301      	movne	r3, #1
 8012f7a:	2300      	moveq	r3, #0
 8012f7c:	b2db      	uxtb	r3, r3
 8012f7e:	e03c      	b.n	8012ffa <HAL_TIM_PWM_Start+0x9e>
 8012f80:	683b      	ldr	r3, [r7, #0]
 8012f82:	2b04      	cmp	r3, #4
 8012f84:	d109      	bne.n	8012f9a <HAL_TIM_PWM_Start+0x3e>
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012f8c:	b2db      	uxtb	r3, r3
 8012f8e:	2b01      	cmp	r3, #1
 8012f90:	bf14      	ite	ne
 8012f92:	2301      	movne	r3, #1
 8012f94:	2300      	moveq	r3, #0
 8012f96:	b2db      	uxtb	r3, r3
 8012f98:	e02f      	b.n	8012ffa <HAL_TIM_PWM_Start+0x9e>
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	2b08      	cmp	r3, #8
 8012f9e:	d109      	bne.n	8012fb4 <HAL_TIM_PWM_Start+0x58>
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012fa6:	b2db      	uxtb	r3, r3
 8012fa8:	2b01      	cmp	r3, #1
 8012faa:	bf14      	ite	ne
 8012fac:	2301      	movne	r3, #1
 8012fae:	2300      	moveq	r3, #0
 8012fb0:	b2db      	uxtb	r3, r3
 8012fb2:	e022      	b.n	8012ffa <HAL_TIM_PWM_Start+0x9e>
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	2b0c      	cmp	r3, #12
 8012fb8:	d109      	bne.n	8012fce <HAL_TIM_PWM_Start+0x72>
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012fc0:	b2db      	uxtb	r3, r3
 8012fc2:	2b01      	cmp	r3, #1
 8012fc4:	bf14      	ite	ne
 8012fc6:	2301      	movne	r3, #1
 8012fc8:	2300      	moveq	r3, #0
 8012fca:	b2db      	uxtb	r3, r3
 8012fcc:	e015      	b.n	8012ffa <HAL_TIM_PWM_Start+0x9e>
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	2b10      	cmp	r3, #16
 8012fd2:	d109      	bne.n	8012fe8 <HAL_TIM_PWM_Start+0x8c>
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012fda:	b2db      	uxtb	r3, r3
 8012fdc:	2b01      	cmp	r3, #1
 8012fde:	bf14      	ite	ne
 8012fe0:	2301      	movne	r3, #1
 8012fe2:	2300      	moveq	r3, #0
 8012fe4:	b2db      	uxtb	r3, r3
 8012fe6:	e008      	b.n	8012ffa <HAL_TIM_PWM_Start+0x9e>
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012fee:	b2db      	uxtb	r3, r3
 8012ff0:	2b01      	cmp	r3, #1
 8012ff2:	bf14      	ite	ne
 8012ff4:	2301      	movne	r3, #1
 8012ff6:	2300      	moveq	r3, #0
 8012ff8:	b2db      	uxtb	r3, r3
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d001      	beq.n	8013002 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8012ffe:	2301      	movs	r3, #1
 8013000:	e09c      	b.n	801313c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d104      	bne.n	8013012 <HAL_TIM_PWM_Start+0xb6>
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	2202      	movs	r2, #2
 801300c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013010:	e023      	b.n	801305a <HAL_TIM_PWM_Start+0xfe>
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	2b04      	cmp	r3, #4
 8013016:	d104      	bne.n	8013022 <HAL_TIM_PWM_Start+0xc6>
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	2202      	movs	r2, #2
 801301c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013020:	e01b      	b.n	801305a <HAL_TIM_PWM_Start+0xfe>
 8013022:	683b      	ldr	r3, [r7, #0]
 8013024:	2b08      	cmp	r3, #8
 8013026:	d104      	bne.n	8013032 <HAL_TIM_PWM_Start+0xd6>
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	2202      	movs	r2, #2
 801302c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013030:	e013      	b.n	801305a <HAL_TIM_PWM_Start+0xfe>
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	2b0c      	cmp	r3, #12
 8013036:	d104      	bne.n	8013042 <HAL_TIM_PWM_Start+0xe6>
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2202      	movs	r2, #2
 801303c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013040:	e00b      	b.n	801305a <HAL_TIM_PWM_Start+0xfe>
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	2b10      	cmp	r3, #16
 8013046:	d104      	bne.n	8013052 <HAL_TIM_PWM_Start+0xf6>
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	2202      	movs	r2, #2
 801304c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013050:	e003      	b.n	801305a <HAL_TIM_PWM_Start+0xfe>
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	2202      	movs	r2, #2
 8013056:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	2201      	movs	r2, #1
 8013060:	6839      	ldr	r1, [r7, #0]
 8013062:	4618      	mov	r0, r3
 8013064:	f000 fd9a 	bl	8013b9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	4a35      	ldr	r2, [pc, #212]	; (8013144 <HAL_TIM_PWM_Start+0x1e8>)
 801306e:	4293      	cmp	r3, r2
 8013070:	d013      	beq.n	801309a <HAL_TIM_PWM_Start+0x13e>
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	4a34      	ldr	r2, [pc, #208]	; (8013148 <HAL_TIM_PWM_Start+0x1ec>)
 8013078:	4293      	cmp	r3, r2
 801307a:	d00e      	beq.n	801309a <HAL_TIM_PWM_Start+0x13e>
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	4a32      	ldr	r2, [pc, #200]	; (801314c <HAL_TIM_PWM_Start+0x1f0>)
 8013082:	4293      	cmp	r3, r2
 8013084:	d009      	beq.n	801309a <HAL_TIM_PWM_Start+0x13e>
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	4a31      	ldr	r2, [pc, #196]	; (8013150 <HAL_TIM_PWM_Start+0x1f4>)
 801308c:	4293      	cmp	r3, r2
 801308e:	d004      	beq.n	801309a <HAL_TIM_PWM_Start+0x13e>
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	4a2f      	ldr	r2, [pc, #188]	; (8013154 <HAL_TIM_PWM_Start+0x1f8>)
 8013096:	4293      	cmp	r3, r2
 8013098:	d101      	bne.n	801309e <HAL_TIM_PWM_Start+0x142>
 801309a:	2301      	movs	r3, #1
 801309c:	e000      	b.n	80130a0 <HAL_TIM_PWM_Start+0x144>
 801309e:	2300      	movs	r3, #0
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d007      	beq.n	80130b4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80130b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	4a22      	ldr	r2, [pc, #136]	; (8013144 <HAL_TIM_PWM_Start+0x1e8>)
 80130ba:	4293      	cmp	r3, r2
 80130bc:	d01d      	beq.n	80130fa <HAL_TIM_PWM_Start+0x19e>
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80130c6:	d018      	beq.n	80130fa <HAL_TIM_PWM_Start+0x19e>
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	4a22      	ldr	r2, [pc, #136]	; (8013158 <HAL_TIM_PWM_Start+0x1fc>)
 80130ce:	4293      	cmp	r3, r2
 80130d0:	d013      	beq.n	80130fa <HAL_TIM_PWM_Start+0x19e>
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	4a21      	ldr	r2, [pc, #132]	; (801315c <HAL_TIM_PWM_Start+0x200>)
 80130d8:	4293      	cmp	r3, r2
 80130da:	d00e      	beq.n	80130fa <HAL_TIM_PWM_Start+0x19e>
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	4a1f      	ldr	r2, [pc, #124]	; (8013160 <HAL_TIM_PWM_Start+0x204>)
 80130e2:	4293      	cmp	r3, r2
 80130e4:	d009      	beq.n	80130fa <HAL_TIM_PWM_Start+0x19e>
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	4a17      	ldr	r2, [pc, #92]	; (8013148 <HAL_TIM_PWM_Start+0x1ec>)
 80130ec:	4293      	cmp	r3, r2
 80130ee:	d004      	beq.n	80130fa <HAL_TIM_PWM_Start+0x19e>
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	4a15      	ldr	r2, [pc, #84]	; (801314c <HAL_TIM_PWM_Start+0x1f0>)
 80130f6:	4293      	cmp	r3, r2
 80130f8:	d115      	bne.n	8013126 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	689a      	ldr	r2, [r3, #8]
 8013100:	4b18      	ldr	r3, [pc, #96]	; (8013164 <HAL_TIM_PWM_Start+0x208>)
 8013102:	4013      	ands	r3, r2
 8013104:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	2b06      	cmp	r3, #6
 801310a:	d015      	beq.n	8013138 <HAL_TIM_PWM_Start+0x1dc>
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013112:	d011      	beq.n	8013138 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	681a      	ldr	r2, [r3, #0]
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	f042 0201 	orr.w	r2, r2, #1
 8013122:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013124:	e008      	b.n	8013138 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	681a      	ldr	r2, [r3, #0]
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	f042 0201 	orr.w	r2, r2, #1
 8013134:	601a      	str	r2, [r3, #0]
 8013136:	e000      	b.n	801313a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013138:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801313a:	2300      	movs	r3, #0
}
 801313c:	4618      	mov	r0, r3
 801313e:	3710      	adds	r7, #16
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}
 8013144:	40012c00 	.word	0x40012c00
 8013148:	40013400 	.word	0x40013400
 801314c:	40014000 	.word	0x40014000
 8013150:	40014400 	.word	0x40014400
 8013154:	40014800 	.word	0x40014800
 8013158:	40000400 	.word	0x40000400
 801315c:	40000800 	.word	0x40000800
 8013160:	40000c00 	.word	0x40000c00
 8013164:	00010007 	.word	0x00010007

08013168 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b082      	sub	sp, #8
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
 8013170:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	2200      	movs	r2, #0
 8013178:	6839      	ldr	r1, [r7, #0]
 801317a:	4618      	mov	r0, r3
 801317c:	f000 fd0e 	bl	8013b9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	4a3e      	ldr	r2, [pc, #248]	; (8013280 <HAL_TIM_PWM_Stop+0x118>)
 8013186:	4293      	cmp	r3, r2
 8013188:	d013      	beq.n	80131b2 <HAL_TIM_PWM_Stop+0x4a>
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	4a3d      	ldr	r2, [pc, #244]	; (8013284 <HAL_TIM_PWM_Stop+0x11c>)
 8013190:	4293      	cmp	r3, r2
 8013192:	d00e      	beq.n	80131b2 <HAL_TIM_PWM_Stop+0x4a>
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	4a3b      	ldr	r2, [pc, #236]	; (8013288 <HAL_TIM_PWM_Stop+0x120>)
 801319a:	4293      	cmp	r3, r2
 801319c:	d009      	beq.n	80131b2 <HAL_TIM_PWM_Stop+0x4a>
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	4a3a      	ldr	r2, [pc, #232]	; (801328c <HAL_TIM_PWM_Stop+0x124>)
 80131a4:	4293      	cmp	r3, r2
 80131a6:	d004      	beq.n	80131b2 <HAL_TIM_PWM_Stop+0x4a>
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	4a38      	ldr	r2, [pc, #224]	; (8013290 <HAL_TIM_PWM_Stop+0x128>)
 80131ae:	4293      	cmp	r3, r2
 80131b0:	d101      	bne.n	80131b6 <HAL_TIM_PWM_Stop+0x4e>
 80131b2:	2301      	movs	r3, #1
 80131b4:	e000      	b.n	80131b8 <HAL_TIM_PWM_Stop+0x50>
 80131b6:	2300      	movs	r3, #0
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d017      	beq.n	80131ec <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	6a1a      	ldr	r2, [r3, #32]
 80131c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80131c6:	4013      	ands	r3, r2
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d10f      	bne.n	80131ec <HAL_TIM_PWM_Stop+0x84>
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	6a1a      	ldr	r2, [r3, #32]
 80131d2:	f240 4344 	movw	r3, #1092	; 0x444
 80131d6:	4013      	ands	r3, r2
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d107      	bne.n	80131ec <HAL_TIM_PWM_Stop+0x84>
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80131ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	6a1a      	ldr	r2, [r3, #32]
 80131f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80131f6:	4013      	ands	r3, r2
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d10f      	bne.n	801321c <HAL_TIM_PWM_Stop+0xb4>
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	6a1a      	ldr	r2, [r3, #32]
 8013202:	f240 4344 	movw	r3, #1092	; 0x444
 8013206:	4013      	ands	r3, r2
 8013208:	2b00      	cmp	r3, #0
 801320a:	d107      	bne.n	801321c <HAL_TIM_PWM_Stop+0xb4>
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	681a      	ldr	r2, [r3, #0]
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	f022 0201 	bic.w	r2, r2, #1
 801321a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801321c:	683b      	ldr	r3, [r7, #0]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d104      	bne.n	801322c <HAL_TIM_PWM_Stop+0xc4>
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	2201      	movs	r2, #1
 8013226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801322a:	e023      	b.n	8013274 <HAL_TIM_PWM_Stop+0x10c>
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	2b04      	cmp	r3, #4
 8013230:	d104      	bne.n	801323c <HAL_TIM_PWM_Stop+0xd4>
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	2201      	movs	r2, #1
 8013236:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801323a:	e01b      	b.n	8013274 <HAL_TIM_PWM_Stop+0x10c>
 801323c:	683b      	ldr	r3, [r7, #0]
 801323e:	2b08      	cmp	r3, #8
 8013240:	d104      	bne.n	801324c <HAL_TIM_PWM_Stop+0xe4>
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	2201      	movs	r2, #1
 8013246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801324a:	e013      	b.n	8013274 <HAL_TIM_PWM_Stop+0x10c>
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	2b0c      	cmp	r3, #12
 8013250:	d104      	bne.n	801325c <HAL_TIM_PWM_Stop+0xf4>
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	2201      	movs	r2, #1
 8013256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801325a:	e00b      	b.n	8013274 <HAL_TIM_PWM_Stop+0x10c>
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	2b10      	cmp	r3, #16
 8013260:	d104      	bne.n	801326c <HAL_TIM_PWM_Stop+0x104>
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	2201      	movs	r2, #1
 8013266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801326a:	e003      	b.n	8013274 <HAL_TIM_PWM_Stop+0x10c>
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	2201      	movs	r2, #1
 8013270:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8013274:	2300      	movs	r3, #0
}
 8013276:	4618      	mov	r0, r3
 8013278:	3708      	adds	r7, #8
 801327a:	46bd      	mov	sp, r7
 801327c:	bd80      	pop	{r7, pc}
 801327e:	bf00      	nop
 8013280:	40012c00 	.word	0x40012c00
 8013284:	40013400 	.word	0x40013400
 8013288:	40014000 	.word	0x40014000
 801328c:	40014400 	.word	0x40014400
 8013290:	40014800 	.word	0x40014800

08013294 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b086      	sub	sp, #24
 8013298:	af00      	add	r7, sp, #0
 801329a:	60f8      	str	r0, [r7, #12]
 801329c:	60b9      	str	r1, [r7, #8]
 801329e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80132a0:	2300      	movs	r3, #0
 80132a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80132aa:	2b01      	cmp	r3, #1
 80132ac:	d101      	bne.n	80132b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80132ae:	2302      	movs	r3, #2
 80132b0:	e0ff      	b.n	80134b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	2201      	movs	r2, #1
 80132b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	2b14      	cmp	r3, #20
 80132be:	f200 80f0 	bhi.w	80134a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80132c2:	a201      	add	r2, pc, #4	; (adr r2, 80132c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80132c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132c8:	0801331d 	.word	0x0801331d
 80132cc:	080134a3 	.word	0x080134a3
 80132d0:	080134a3 	.word	0x080134a3
 80132d4:	080134a3 	.word	0x080134a3
 80132d8:	0801335d 	.word	0x0801335d
 80132dc:	080134a3 	.word	0x080134a3
 80132e0:	080134a3 	.word	0x080134a3
 80132e4:	080134a3 	.word	0x080134a3
 80132e8:	0801339f 	.word	0x0801339f
 80132ec:	080134a3 	.word	0x080134a3
 80132f0:	080134a3 	.word	0x080134a3
 80132f4:	080134a3 	.word	0x080134a3
 80132f8:	080133df 	.word	0x080133df
 80132fc:	080134a3 	.word	0x080134a3
 8013300:	080134a3 	.word	0x080134a3
 8013304:	080134a3 	.word	0x080134a3
 8013308:	08013421 	.word	0x08013421
 801330c:	080134a3 	.word	0x080134a3
 8013310:	080134a3 	.word	0x080134a3
 8013314:	080134a3 	.word	0x080134a3
 8013318:	08013461 	.word	0x08013461
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	68b9      	ldr	r1, [r7, #8]
 8013322:	4618      	mov	r0, r3
 8013324:	f000 f964 	bl	80135f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	699a      	ldr	r2, [r3, #24]
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	f042 0208 	orr.w	r2, r2, #8
 8013336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	699a      	ldr	r2, [r3, #24]
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	f022 0204 	bic.w	r2, r2, #4
 8013346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	6999      	ldr	r1, [r3, #24]
 801334e:	68bb      	ldr	r3, [r7, #8]
 8013350:	691a      	ldr	r2, [r3, #16]
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	430a      	orrs	r2, r1
 8013358:	619a      	str	r2, [r3, #24]
      break;
 801335a:	e0a5      	b.n	80134a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	68b9      	ldr	r1, [r7, #8]
 8013362:	4618      	mov	r0, r3
 8013364:	f000 f9d4 	bl	8013710 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	699a      	ldr	r2, [r3, #24]
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	699a      	ldr	r2, [r3, #24]
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	6999      	ldr	r1, [r3, #24]
 801338e:	68bb      	ldr	r3, [r7, #8]
 8013390:	691b      	ldr	r3, [r3, #16]
 8013392:	021a      	lsls	r2, r3, #8
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	430a      	orrs	r2, r1
 801339a:	619a      	str	r2, [r3, #24]
      break;
 801339c:	e084      	b.n	80134a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	68b9      	ldr	r1, [r7, #8]
 80133a4:	4618      	mov	r0, r3
 80133a6:	f000 fa3d 	bl	8013824 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	69da      	ldr	r2, [r3, #28]
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	f042 0208 	orr.w	r2, r2, #8
 80133b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	69da      	ldr	r2, [r3, #28]
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	f022 0204 	bic.w	r2, r2, #4
 80133c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	69d9      	ldr	r1, [r3, #28]
 80133d0:	68bb      	ldr	r3, [r7, #8]
 80133d2:	691a      	ldr	r2, [r3, #16]
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	430a      	orrs	r2, r1
 80133da:	61da      	str	r2, [r3, #28]
      break;
 80133dc:	e064      	b.n	80134a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	681b      	ldr	r3, [r3, #0]
 80133e2:	68b9      	ldr	r1, [r7, #8]
 80133e4:	4618      	mov	r0, r3
 80133e6:	f000 faa5 	bl	8013934 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	69da      	ldr	r2, [r3, #28]
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80133f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	69da      	ldr	r2, [r3, #28]
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	69d9      	ldr	r1, [r3, #28]
 8013410:	68bb      	ldr	r3, [r7, #8]
 8013412:	691b      	ldr	r3, [r3, #16]
 8013414:	021a      	lsls	r2, r3, #8
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	430a      	orrs	r2, r1
 801341c:	61da      	str	r2, [r3, #28]
      break;
 801341e:	e043      	b.n	80134a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	68b9      	ldr	r1, [r7, #8]
 8013426:	4618      	mov	r0, r3
 8013428:	f000 faee 	bl	8013a08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	f042 0208 	orr.w	r2, r2, #8
 801343a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	f022 0204 	bic.w	r2, r2, #4
 801344a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013452:	68bb      	ldr	r3, [r7, #8]
 8013454:	691a      	ldr	r2, [r3, #16]
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	430a      	orrs	r2, r1
 801345c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801345e:	e023      	b.n	80134a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	68b9      	ldr	r1, [r7, #8]
 8013466:	4618      	mov	r0, r3
 8013468:	f000 fb32 	bl	8013ad0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801347a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801348a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	691b      	ldr	r3, [r3, #16]
 8013496:	021a      	lsls	r2, r3, #8
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	430a      	orrs	r2, r1
 801349e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80134a0:	e002      	b.n	80134a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80134a2:	2301      	movs	r3, #1
 80134a4:	75fb      	strb	r3, [r7, #23]
      break;
 80134a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	2200      	movs	r2, #0
 80134ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80134b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80134b2:	4618      	mov	r0, r3
 80134b4:	3718      	adds	r7, #24
 80134b6:	46bd      	mov	sp, r7
 80134b8:	bd80      	pop	{r7, pc}
 80134ba:	bf00      	nop

080134bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80134bc:	b480      	push	{r7}
 80134be:	b085      	sub	sp, #20
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
 80134c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	4a40      	ldr	r2, [pc, #256]	; (80135d0 <TIM_Base_SetConfig+0x114>)
 80134d0:	4293      	cmp	r3, r2
 80134d2:	d013      	beq.n	80134fc <TIM_Base_SetConfig+0x40>
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80134da:	d00f      	beq.n	80134fc <TIM_Base_SetConfig+0x40>
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	4a3d      	ldr	r2, [pc, #244]	; (80135d4 <TIM_Base_SetConfig+0x118>)
 80134e0:	4293      	cmp	r3, r2
 80134e2:	d00b      	beq.n	80134fc <TIM_Base_SetConfig+0x40>
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	4a3c      	ldr	r2, [pc, #240]	; (80135d8 <TIM_Base_SetConfig+0x11c>)
 80134e8:	4293      	cmp	r3, r2
 80134ea:	d007      	beq.n	80134fc <TIM_Base_SetConfig+0x40>
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	4a3b      	ldr	r2, [pc, #236]	; (80135dc <TIM_Base_SetConfig+0x120>)
 80134f0:	4293      	cmp	r3, r2
 80134f2:	d003      	beq.n	80134fc <TIM_Base_SetConfig+0x40>
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	4a3a      	ldr	r2, [pc, #232]	; (80135e0 <TIM_Base_SetConfig+0x124>)
 80134f8:	4293      	cmp	r3, r2
 80134fa:	d108      	bne.n	801350e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	685b      	ldr	r3, [r3, #4]
 8013508:	68fa      	ldr	r2, [r7, #12]
 801350a:	4313      	orrs	r3, r2
 801350c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	4a2f      	ldr	r2, [pc, #188]	; (80135d0 <TIM_Base_SetConfig+0x114>)
 8013512:	4293      	cmp	r3, r2
 8013514:	d01f      	beq.n	8013556 <TIM_Base_SetConfig+0x9a>
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801351c:	d01b      	beq.n	8013556 <TIM_Base_SetConfig+0x9a>
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	4a2c      	ldr	r2, [pc, #176]	; (80135d4 <TIM_Base_SetConfig+0x118>)
 8013522:	4293      	cmp	r3, r2
 8013524:	d017      	beq.n	8013556 <TIM_Base_SetConfig+0x9a>
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	4a2b      	ldr	r2, [pc, #172]	; (80135d8 <TIM_Base_SetConfig+0x11c>)
 801352a:	4293      	cmp	r3, r2
 801352c:	d013      	beq.n	8013556 <TIM_Base_SetConfig+0x9a>
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	4a2a      	ldr	r2, [pc, #168]	; (80135dc <TIM_Base_SetConfig+0x120>)
 8013532:	4293      	cmp	r3, r2
 8013534:	d00f      	beq.n	8013556 <TIM_Base_SetConfig+0x9a>
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	4a29      	ldr	r2, [pc, #164]	; (80135e0 <TIM_Base_SetConfig+0x124>)
 801353a:	4293      	cmp	r3, r2
 801353c:	d00b      	beq.n	8013556 <TIM_Base_SetConfig+0x9a>
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	4a28      	ldr	r2, [pc, #160]	; (80135e4 <TIM_Base_SetConfig+0x128>)
 8013542:	4293      	cmp	r3, r2
 8013544:	d007      	beq.n	8013556 <TIM_Base_SetConfig+0x9a>
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	4a27      	ldr	r2, [pc, #156]	; (80135e8 <TIM_Base_SetConfig+0x12c>)
 801354a:	4293      	cmp	r3, r2
 801354c:	d003      	beq.n	8013556 <TIM_Base_SetConfig+0x9a>
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	4a26      	ldr	r2, [pc, #152]	; (80135ec <TIM_Base_SetConfig+0x130>)
 8013552:	4293      	cmp	r3, r2
 8013554:	d108      	bne.n	8013568 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801355c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	68db      	ldr	r3, [r3, #12]
 8013562:	68fa      	ldr	r2, [r7, #12]
 8013564:	4313      	orrs	r3, r2
 8013566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801356e:	683b      	ldr	r3, [r7, #0]
 8013570:	695b      	ldr	r3, [r3, #20]
 8013572:	4313      	orrs	r3, r2
 8013574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	68fa      	ldr	r2, [r7, #12]
 801357a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801357c:	683b      	ldr	r3, [r7, #0]
 801357e:	689a      	ldr	r2, [r3, #8]
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013584:	683b      	ldr	r3, [r7, #0]
 8013586:	681a      	ldr	r2, [r3, #0]
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	4a10      	ldr	r2, [pc, #64]	; (80135d0 <TIM_Base_SetConfig+0x114>)
 8013590:	4293      	cmp	r3, r2
 8013592:	d00f      	beq.n	80135b4 <TIM_Base_SetConfig+0xf8>
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	4a12      	ldr	r2, [pc, #72]	; (80135e0 <TIM_Base_SetConfig+0x124>)
 8013598:	4293      	cmp	r3, r2
 801359a:	d00b      	beq.n	80135b4 <TIM_Base_SetConfig+0xf8>
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	4a11      	ldr	r2, [pc, #68]	; (80135e4 <TIM_Base_SetConfig+0x128>)
 80135a0:	4293      	cmp	r3, r2
 80135a2:	d007      	beq.n	80135b4 <TIM_Base_SetConfig+0xf8>
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	4a10      	ldr	r2, [pc, #64]	; (80135e8 <TIM_Base_SetConfig+0x12c>)
 80135a8:	4293      	cmp	r3, r2
 80135aa:	d003      	beq.n	80135b4 <TIM_Base_SetConfig+0xf8>
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	4a0f      	ldr	r2, [pc, #60]	; (80135ec <TIM_Base_SetConfig+0x130>)
 80135b0:	4293      	cmp	r3, r2
 80135b2:	d103      	bne.n	80135bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	691a      	ldr	r2, [r3, #16]
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	2201      	movs	r2, #1
 80135c0:	615a      	str	r2, [r3, #20]
}
 80135c2:	bf00      	nop
 80135c4:	3714      	adds	r7, #20
 80135c6:	46bd      	mov	sp, r7
 80135c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135cc:	4770      	bx	lr
 80135ce:	bf00      	nop
 80135d0:	40012c00 	.word	0x40012c00
 80135d4:	40000400 	.word	0x40000400
 80135d8:	40000800 	.word	0x40000800
 80135dc:	40000c00 	.word	0x40000c00
 80135e0:	40013400 	.word	0x40013400
 80135e4:	40014000 	.word	0x40014000
 80135e8:	40014400 	.word	0x40014400
 80135ec:	40014800 	.word	0x40014800

080135f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80135f0:	b480      	push	{r7}
 80135f2:	b087      	sub	sp, #28
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
 80135f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	6a1b      	ldr	r3, [r3, #32]
 80135fe:	f023 0201 	bic.w	r2, r3, #1
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	6a1b      	ldr	r3, [r3, #32]
 801360a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	685b      	ldr	r3, [r3, #4]
 8013610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	699b      	ldr	r3, [r3, #24]
 8013616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801361e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	f023 0303 	bic.w	r3, r3, #3
 801362a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801362c:	683b      	ldr	r3, [r7, #0]
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	68fa      	ldr	r2, [r7, #12]
 8013632:	4313      	orrs	r3, r2
 8013634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013636:	697b      	ldr	r3, [r7, #20]
 8013638:	f023 0302 	bic.w	r3, r3, #2
 801363c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801363e:	683b      	ldr	r3, [r7, #0]
 8013640:	689b      	ldr	r3, [r3, #8]
 8013642:	697a      	ldr	r2, [r7, #20]
 8013644:	4313      	orrs	r3, r2
 8013646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	4a2c      	ldr	r2, [pc, #176]	; (80136fc <TIM_OC1_SetConfig+0x10c>)
 801364c:	4293      	cmp	r3, r2
 801364e:	d00f      	beq.n	8013670 <TIM_OC1_SetConfig+0x80>
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	4a2b      	ldr	r2, [pc, #172]	; (8013700 <TIM_OC1_SetConfig+0x110>)
 8013654:	4293      	cmp	r3, r2
 8013656:	d00b      	beq.n	8013670 <TIM_OC1_SetConfig+0x80>
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	4a2a      	ldr	r2, [pc, #168]	; (8013704 <TIM_OC1_SetConfig+0x114>)
 801365c:	4293      	cmp	r3, r2
 801365e:	d007      	beq.n	8013670 <TIM_OC1_SetConfig+0x80>
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	4a29      	ldr	r2, [pc, #164]	; (8013708 <TIM_OC1_SetConfig+0x118>)
 8013664:	4293      	cmp	r3, r2
 8013666:	d003      	beq.n	8013670 <TIM_OC1_SetConfig+0x80>
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	4a28      	ldr	r2, [pc, #160]	; (801370c <TIM_OC1_SetConfig+0x11c>)
 801366c:	4293      	cmp	r3, r2
 801366e:	d10c      	bne.n	801368a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013670:	697b      	ldr	r3, [r7, #20]
 8013672:	f023 0308 	bic.w	r3, r3, #8
 8013676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013678:	683b      	ldr	r3, [r7, #0]
 801367a:	68db      	ldr	r3, [r3, #12]
 801367c:	697a      	ldr	r2, [r7, #20]
 801367e:	4313      	orrs	r3, r2
 8013680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013682:	697b      	ldr	r3, [r7, #20]
 8013684:	f023 0304 	bic.w	r3, r3, #4
 8013688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	4a1b      	ldr	r2, [pc, #108]	; (80136fc <TIM_OC1_SetConfig+0x10c>)
 801368e:	4293      	cmp	r3, r2
 8013690:	d00f      	beq.n	80136b2 <TIM_OC1_SetConfig+0xc2>
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	4a1a      	ldr	r2, [pc, #104]	; (8013700 <TIM_OC1_SetConfig+0x110>)
 8013696:	4293      	cmp	r3, r2
 8013698:	d00b      	beq.n	80136b2 <TIM_OC1_SetConfig+0xc2>
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	4a19      	ldr	r2, [pc, #100]	; (8013704 <TIM_OC1_SetConfig+0x114>)
 801369e:	4293      	cmp	r3, r2
 80136a0:	d007      	beq.n	80136b2 <TIM_OC1_SetConfig+0xc2>
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	4a18      	ldr	r2, [pc, #96]	; (8013708 <TIM_OC1_SetConfig+0x118>)
 80136a6:	4293      	cmp	r3, r2
 80136a8:	d003      	beq.n	80136b2 <TIM_OC1_SetConfig+0xc2>
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	4a17      	ldr	r2, [pc, #92]	; (801370c <TIM_OC1_SetConfig+0x11c>)
 80136ae:	4293      	cmp	r3, r2
 80136b0:	d111      	bne.n	80136d6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80136b2:	693b      	ldr	r3, [r7, #16]
 80136b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80136b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80136ba:	693b      	ldr	r3, [r7, #16]
 80136bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80136c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80136c2:	683b      	ldr	r3, [r7, #0]
 80136c4:	695b      	ldr	r3, [r3, #20]
 80136c6:	693a      	ldr	r2, [r7, #16]
 80136c8:	4313      	orrs	r3, r2
 80136ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80136cc:	683b      	ldr	r3, [r7, #0]
 80136ce:	699b      	ldr	r3, [r3, #24]
 80136d0:	693a      	ldr	r2, [r7, #16]
 80136d2:	4313      	orrs	r3, r2
 80136d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	693a      	ldr	r2, [r7, #16]
 80136da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	68fa      	ldr	r2, [r7, #12]
 80136e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80136e2:	683b      	ldr	r3, [r7, #0]
 80136e4:	685a      	ldr	r2, [r3, #4]
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	697a      	ldr	r2, [r7, #20]
 80136ee:	621a      	str	r2, [r3, #32]
}
 80136f0:	bf00      	nop
 80136f2:	371c      	adds	r7, #28
 80136f4:	46bd      	mov	sp, r7
 80136f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136fa:	4770      	bx	lr
 80136fc:	40012c00 	.word	0x40012c00
 8013700:	40013400 	.word	0x40013400
 8013704:	40014000 	.word	0x40014000
 8013708:	40014400 	.word	0x40014400
 801370c:	40014800 	.word	0x40014800

08013710 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013710:	b480      	push	{r7}
 8013712:	b087      	sub	sp, #28
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
 8013718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	6a1b      	ldr	r3, [r3, #32]
 801371e:	f023 0210 	bic.w	r2, r3, #16
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	6a1b      	ldr	r3, [r3, #32]
 801372a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	685b      	ldr	r3, [r3, #4]
 8013730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	699b      	ldr	r3, [r3, #24]
 8013736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801373e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801374a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	021b      	lsls	r3, r3, #8
 8013752:	68fa      	ldr	r2, [r7, #12]
 8013754:	4313      	orrs	r3, r2
 8013756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013758:	697b      	ldr	r3, [r7, #20]
 801375a:	f023 0320 	bic.w	r3, r3, #32
 801375e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013760:	683b      	ldr	r3, [r7, #0]
 8013762:	689b      	ldr	r3, [r3, #8]
 8013764:	011b      	lsls	r3, r3, #4
 8013766:	697a      	ldr	r2, [r7, #20]
 8013768:	4313      	orrs	r3, r2
 801376a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	4a28      	ldr	r2, [pc, #160]	; (8013810 <TIM_OC2_SetConfig+0x100>)
 8013770:	4293      	cmp	r3, r2
 8013772:	d003      	beq.n	801377c <TIM_OC2_SetConfig+0x6c>
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	4a27      	ldr	r2, [pc, #156]	; (8013814 <TIM_OC2_SetConfig+0x104>)
 8013778:	4293      	cmp	r3, r2
 801377a:	d10d      	bne.n	8013798 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801377c:	697b      	ldr	r3, [r7, #20]
 801377e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013784:	683b      	ldr	r3, [r7, #0]
 8013786:	68db      	ldr	r3, [r3, #12]
 8013788:	011b      	lsls	r3, r3, #4
 801378a:	697a      	ldr	r2, [r7, #20]
 801378c:	4313      	orrs	r3, r2
 801378e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013790:	697b      	ldr	r3, [r7, #20]
 8013792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013796:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	4a1d      	ldr	r2, [pc, #116]	; (8013810 <TIM_OC2_SetConfig+0x100>)
 801379c:	4293      	cmp	r3, r2
 801379e:	d00f      	beq.n	80137c0 <TIM_OC2_SetConfig+0xb0>
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	4a1c      	ldr	r2, [pc, #112]	; (8013814 <TIM_OC2_SetConfig+0x104>)
 80137a4:	4293      	cmp	r3, r2
 80137a6:	d00b      	beq.n	80137c0 <TIM_OC2_SetConfig+0xb0>
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	4a1b      	ldr	r2, [pc, #108]	; (8013818 <TIM_OC2_SetConfig+0x108>)
 80137ac:	4293      	cmp	r3, r2
 80137ae:	d007      	beq.n	80137c0 <TIM_OC2_SetConfig+0xb0>
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	4a1a      	ldr	r2, [pc, #104]	; (801381c <TIM_OC2_SetConfig+0x10c>)
 80137b4:	4293      	cmp	r3, r2
 80137b6:	d003      	beq.n	80137c0 <TIM_OC2_SetConfig+0xb0>
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	4a19      	ldr	r2, [pc, #100]	; (8013820 <TIM_OC2_SetConfig+0x110>)
 80137bc:	4293      	cmp	r3, r2
 80137be:	d113      	bne.n	80137e8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80137c0:	693b      	ldr	r3, [r7, #16]
 80137c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80137c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80137c8:	693b      	ldr	r3, [r7, #16]
 80137ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80137ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80137d0:	683b      	ldr	r3, [r7, #0]
 80137d2:	695b      	ldr	r3, [r3, #20]
 80137d4:	009b      	lsls	r3, r3, #2
 80137d6:	693a      	ldr	r2, [r7, #16]
 80137d8:	4313      	orrs	r3, r2
 80137da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80137dc:	683b      	ldr	r3, [r7, #0]
 80137de:	699b      	ldr	r3, [r3, #24]
 80137e0:	009b      	lsls	r3, r3, #2
 80137e2:	693a      	ldr	r2, [r7, #16]
 80137e4:	4313      	orrs	r3, r2
 80137e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	693a      	ldr	r2, [r7, #16]
 80137ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	68fa      	ldr	r2, [r7, #12]
 80137f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80137f4:	683b      	ldr	r3, [r7, #0]
 80137f6:	685a      	ldr	r2, [r3, #4]
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	697a      	ldr	r2, [r7, #20]
 8013800:	621a      	str	r2, [r3, #32]
}
 8013802:	bf00      	nop
 8013804:	371c      	adds	r7, #28
 8013806:	46bd      	mov	sp, r7
 8013808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380c:	4770      	bx	lr
 801380e:	bf00      	nop
 8013810:	40012c00 	.word	0x40012c00
 8013814:	40013400 	.word	0x40013400
 8013818:	40014000 	.word	0x40014000
 801381c:	40014400 	.word	0x40014400
 8013820:	40014800 	.word	0x40014800

08013824 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013824:	b480      	push	{r7}
 8013826:	b087      	sub	sp, #28
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
 801382c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	6a1b      	ldr	r3, [r3, #32]
 8013832:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	6a1b      	ldr	r3, [r3, #32]
 801383e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	685b      	ldr	r3, [r3, #4]
 8013844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	69db      	ldr	r3, [r3, #28]
 801384a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	f023 0303 	bic.w	r3, r3, #3
 801385e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013860:	683b      	ldr	r3, [r7, #0]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	68fa      	ldr	r2, [r7, #12]
 8013866:	4313      	orrs	r3, r2
 8013868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801386a:	697b      	ldr	r3, [r7, #20]
 801386c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013872:	683b      	ldr	r3, [r7, #0]
 8013874:	689b      	ldr	r3, [r3, #8]
 8013876:	021b      	lsls	r3, r3, #8
 8013878:	697a      	ldr	r2, [r7, #20]
 801387a:	4313      	orrs	r3, r2
 801387c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	4a27      	ldr	r2, [pc, #156]	; (8013920 <TIM_OC3_SetConfig+0xfc>)
 8013882:	4293      	cmp	r3, r2
 8013884:	d003      	beq.n	801388e <TIM_OC3_SetConfig+0x6a>
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	4a26      	ldr	r2, [pc, #152]	; (8013924 <TIM_OC3_SetConfig+0x100>)
 801388a:	4293      	cmp	r3, r2
 801388c:	d10d      	bne.n	80138aa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013894:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013896:	683b      	ldr	r3, [r7, #0]
 8013898:	68db      	ldr	r3, [r3, #12]
 801389a:	021b      	lsls	r3, r3, #8
 801389c:	697a      	ldr	r2, [r7, #20]
 801389e:	4313      	orrs	r3, r2
 80138a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80138a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	4a1c      	ldr	r2, [pc, #112]	; (8013920 <TIM_OC3_SetConfig+0xfc>)
 80138ae:	4293      	cmp	r3, r2
 80138b0:	d00f      	beq.n	80138d2 <TIM_OC3_SetConfig+0xae>
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	4a1b      	ldr	r2, [pc, #108]	; (8013924 <TIM_OC3_SetConfig+0x100>)
 80138b6:	4293      	cmp	r3, r2
 80138b8:	d00b      	beq.n	80138d2 <TIM_OC3_SetConfig+0xae>
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	4a1a      	ldr	r2, [pc, #104]	; (8013928 <TIM_OC3_SetConfig+0x104>)
 80138be:	4293      	cmp	r3, r2
 80138c0:	d007      	beq.n	80138d2 <TIM_OC3_SetConfig+0xae>
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	4a19      	ldr	r2, [pc, #100]	; (801392c <TIM_OC3_SetConfig+0x108>)
 80138c6:	4293      	cmp	r3, r2
 80138c8:	d003      	beq.n	80138d2 <TIM_OC3_SetConfig+0xae>
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	4a18      	ldr	r2, [pc, #96]	; (8013930 <TIM_OC3_SetConfig+0x10c>)
 80138ce:	4293      	cmp	r3, r2
 80138d0:	d113      	bne.n	80138fa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80138d2:	693b      	ldr	r3, [r7, #16]
 80138d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80138d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80138da:	693b      	ldr	r3, [r7, #16]
 80138dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80138e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80138e2:	683b      	ldr	r3, [r7, #0]
 80138e4:	695b      	ldr	r3, [r3, #20]
 80138e6:	011b      	lsls	r3, r3, #4
 80138e8:	693a      	ldr	r2, [r7, #16]
 80138ea:	4313      	orrs	r3, r2
 80138ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80138ee:	683b      	ldr	r3, [r7, #0]
 80138f0:	699b      	ldr	r3, [r3, #24]
 80138f2:	011b      	lsls	r3, r3, #4
 80138f4:	693a      	ldr	r2, [r7, #16]
 80138f6:	4313      	orrs	r3, r2
 80138f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	693a      	ldr	r2, [r7, #16]
 80138fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	68fa      	ldr	r2, [r7, #12]
 8013904:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013906:	683b      	ldr	r3, [r7, #0]
 8013908:	685a      	ldr	r2, [r3, #4]
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	697a      	ldr	r2, [r7, #20]
 8013912:	621a      	str	r2, [r3, #32]
}
 8013914:	bf00      	nop
 8013916:	371c      	adds	r7, #28
 8013918:	46bd      	mov	sp, r7
 801391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391e:	4770      	bx	lr
 8013920:	40012c00 	.word	0x40012c00
 8013924:	40013400 	.word	0x40013400
 8013928:	40014000 	.word	0x40014000
 801392c:	40014400 	.word	0x40014400
 8013930:	40014800 	.word	0x40014800

08013934 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013934:	b480      	push	{r7}
 8013936:	b087      	sub	sp, #28
 8013938:	af00      	add	r7, sp, #0
 801393a:	6078      	str	r0, [r7, #4]
 801393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	6a1b      	ldr	r3, [r3, #32]
 8013942:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	6a1b      	ldr	r3, [r3, #32]
 801394e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	685b      	ldr	r3, [r3, #4]
 8013954:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	69db      	ldr	r3, [r3, #28]
 801395a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801396e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013970:	683b      	ldr	r3, [r7, #0]
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	021b      	lsls	r3, r3, #8
 8013976:	68fa      	ldr	r2, [r7, #12]
 8013978:	4313      	orrs	r3, r2
 801397a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801397c:	693b      	ldr	r3, [r7, #16]
 801397e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013982:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013984:	683b      	ldr	r3, [r7, #0]
 8013986:	689b      	ldr	r3, [r3, #8]
 8013988:	031b      	lsls	r3, r3, #12
 801398a:	693a      	ldr	r2, [r7, #16]
 801398c:	4313      	orrs	r3, r2
 801398e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	4a18      	ldr	r2, [pc, #96]	; (80139f4 <TIM_OC4_SetConfig+0xc0>)
 8013994:	4293      	cmp	r3, r2
 8013996:	d00f      	beq.n	80139b8 <TIM_OC4_SetConfig+0x84>
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	4a17      	ldr	r2, [pc, #92]	; (80139f8 <TIM_OC4_SetConfig+0xc4>)
 801399c:	4293      	cmp	r3, r2
 801399e:	d00b      	beq.n	80139b8 <TIM_OC4_SetConfig+0x84>
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	4a16      	ldr	r2, [pc, #88]	; (80139fc <TIM_OC4_SetConfig+0xc8>)
 80139a4:	4293      	cmp	r3, r2
 80139a6:	d007      	beq.n	80139b8 <TIM_OC4_SetConfig+0x84>
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	4a15      	ldr	r2, [pc, #84]	; (8013a00 <TIM_OC4_SetConfig+0xcc>)
 80139ac:	4293      	cmp	r3, r2
 80139ae:	d003      	beq.n	80139b8 <TIM_OC4_SetConfig+0x84>
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	4a14      	ldr	r2, [pc, #80]	; (8013a04 <TIM_OC4_SetConfig+0xd0>)
 80139b4:	4293      	cmp	r3, r2
 80139b6:	d109      	bne.n	80139cc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80139b8:	697b      	ldr	r3, [r7, #20]
 80139ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80139be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80139c0:	683b      	ldr	r3, [r7, #0]
 80139c2:	695b      	ldr	r3, [r3, #20]
 80139c4:	019b      	lsls	r3, r3, #6
 80139c6:	697a      	ldr	r2, [r7, #20]
 80139c8:	4313      	orrs	r3, r2
 80139ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	697a      	ldr	r2, [r7, #20]
 80139d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	68fa      	ldr	r2, [r7, #12]
 80139d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80139d8:	683b      	ldr	r3, [r7, #0]
 80139da:	685a      	ldr	r2, [r3, #4]
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	693a      	ldr	r2, [r7, #16]
 80139e4:	621a      	str	r2, [r3, #32]
}
 80139e6:	bf00      	nop
 80139e8:	371c      	adds	r7, #28
 80139ea:	46bd      	mov	sp, r7
 80139ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f0:	4770      	bx	lr
 80139f2:	bf00      	nop
 80139f4:	40012c00 	.word	0x40012c00
 80139f8:	40013400 	.word	0x40013400
 80139fc:	40014000 	.word	0x40014000
 8013a00:	40014400 	.word	0x40014400
 8013a04:	40014800 	.word	0x40014800

08013a08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013a08:	b480      	push	{r7}
 8013a0a:	b087      	sub	sp, #28
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
 8013a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	6a1b      	ldr	r3, [r3, #32]
 8013a16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	6a1b      	ldr	r3, [r3, #32]
 8013a22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	685b      	ldr	r3, [r3, #4]
 8013a28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	68fa      	ldr	r2, [r7, #12]
 8013a42:	4313      	orrs	r3, r2
 8013a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8013a46:	693b      	ldr	r3, [r7, #16]
 8013a48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8013a4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8013a4e:	683b      	ldr	r3, [r7, #0]
 8013a50:	689b      	ldr	r3, [r3, #8]
 8013a52:	041b      	lsls	r3, r3, #16
 8013a54:	693a      	ldr	r2, [r7, #16]
 8013a56:	4313      	orrs	r3, r2
 8013a58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	4a17      	ldr	r2, [pc, #92]	; (8013abc <TIM_OC5_SetConfig+0xb4>)
 8013a5e:	4293      	cmp	r3, r2
 8013a60:	d00f      	beq.n	8013a82 <TIM_OC5_SetConfig+0x7a>
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	4a16      	ldr	r2, [pc, #88]	; (8013ac0 <TIM_OC5_SetConfig+0xb8>)
 8013a66:	4293      	cmp	r3, r2
 8013a68:	d00b      	beq.n	8013a82 <TIM_OC5_SetConfig+0x7a>
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	4a15      	ldr	r2, [pc, #84]	; (8013ac4 <TIM_OC5_SetConfig+0xbc>)
 8013a6e:	4293      	cmp	r3, r2
 8013a70:	d007      	beq.n	8013a82 <TIM_OC5_SetConfig+0x7a>
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	4a14      	ldr	r2, [pc, #80]	; (8013ac8 <TIM_OC5_SetConfig+0xc0>)
 8013a76:	4293      	cmp	r3, r2
 8013a78:	d003      	beq.n	8013a82 <TIM_OC5_SetConfig+0x7a>
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	4a13      	ldr	r2, [pc, #76]	; (8013acc <TIM_OC5_SetConfig+0xc4>)
 8013a7e:	4293      	cmp	r3, r2
 8013a80:	d109      	bne.n	8013a96 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8013a82:	697b      	ldr	r3, [r7, #20]
 8013a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8013a88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	695b      	ldr	r3, [r3, #20]
 8013a8e:	021b      	lsls	r3, r3, #8
 8013a90:	697a      	ldr	r2, [r7, #20]
 8013a92:	4313      	orrs	r3, r2
 8013a94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	697a      	ldr	r2, [r7, #20]
 8013a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	68fa      	ldr	r2, [r7, #12]
 8013aa0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8013aa2:	683b      	ldr	r3, [r7, #0]
 8013aa4:	685a      	ldr	r2, [r3, #4]
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	693a      	ldr	r2, [r7, #16]
 8013aae:	621a      	str	r2, [r3, #32]
}
 8013ab0:	bf00      	nop
 8013ab2:	371c      	adds	r7, #28
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aba:	4770      	bx	lr
 8013abc:	40012c00 	.word	0x40012c00
 8013ac0:	40013400 	.word	0x40013400
 8013ac4:	40014000 	.word	0x40014000
 8013ac8:	40014400 	.word	0x40014400
 8013acc:	40014800 	.word	0x40014800

08013ad0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8013ad0:	b480      	push	{r7}
 8013ad2:	b087      	sub	sp, #28
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
 8013ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	6a1b      	ldr	r3, [r3, #32]
 8013ade:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	6a1b      	ldr	r3, [r3, #32]
 8013aea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	685b      	ldr	r3, [r3, #4]
 8013af0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013b04:	683b      	ldr	r3, [r7, #0]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	021b      	lsls	r3, r3, #8
 8013b0a:	68fa      	ldr	r2, [r7, #12]
 8013b0c:	4313      	orrs	r3, r2
 8013b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8013b10:	693b      	ldr	r3, [r7, #16]
 8013b12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013b16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8013b18:	683b      	ldr	r3, [r7, #0]
 8013b1a:	689b      	ldr	r3, [r3, #8]
 8013b1c:	051b      	lsls	r3, r3, #20
 8013b1e:	693a      	ldr	r2, [r7, #16]
 8013b20:	4313      	orrs	r3, r2
 8013b22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	4a18      	ldr	r2, [pc, #96]	; (8013b88 <TIM_OC6_SetConfig+0xb8>)
 8013b28:	4293      	cmp	r3, r2
 8013b2a:	d00f      	beq.n	8013b4c <TIM_OC6_SetConfig+0x7c>
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	4a17      	ldr	r2, [pc, #92]	; (8013b8c <TIM_OC6_SetConfig+0xbc>)
 8013b30:	4293      	cmp	r3, r2
 8013b32:	d00b      	beq.n	8013b4c <TIM_OC6_SetConfig+0x7c>
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	4a16      	ldr	r2, [pc, #88]	; (8013b90 <TIM_OC6_SetConfig+0xc0>)
 8013b38:	4293      	cmp	r3, r2
 8013b3a:	d007      	beq.n	8013b4c <TIM_OC6_SetConfig+0x7c>
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	4a15      	ldr	r2, [pc, #84]	; (8013b94 <TIM_OC6_SetConfig+0xc4>)
 8013b40:	4293      	cmp	r3, r2
 8013b42:	d003      	beq.n	8013b4c <TIM_OC6_SetConfig+0x7c>
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	4a14      	ldr	r2, [pc, #80]	; (8013b98 <TIM_OC6_SetConfig+0xc8>)
 8013b48:	4293      	cmp	r3, r2
 8013b4a:	d109      	bne.n	8013b60 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8013b4c:	697b      	ldr	r3, [r7, #20]
 8013b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8013b52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8013b54:	683b      	ldr	r3, [r7, #0]
 8013b56:	695b      	ldr	r3, [r3, #20]
 8013b58:	029b      	lsls	r3, r3, #10
 8013b5a:	697a      	ldr	r2, [r7, #20]
 8013b5c:	4313      	orrs	r3, r2
 8013b5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	697a      	ldr	r2, [r7, #20]
 8013b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	68fa      	ldr	r2, [r7, #12]
 8013b6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8013b6c:	683b      	ldr	r3, [r7, #0]
 8013b6e:	685a      	ldr	r2, [r3, #4]
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	693a      	ldr	r2, [r7, #16]
 8013b78:	621a      	str	r2, [r3, #32]
}
 8013b7a:	bf00      	nop
 8013b7c:	371c      	adds	r7, #28
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b84:	4770      	bx	lr
 8013b86:	bf00      	nop
 8013b88:	40012c00 	.word	0x40012c00
 8013b8c:	40013400 	.word	0x40013400
 8013b90:	40014000 	.word	0x40014000
 8013b94:	40014400 	.word	0x40014400
 8013b98:	40014800 	.word	0x40014800

08013b9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013b9c:	b480      	push	{r7}
 8013b9e:	b087      	sub	sp, #28
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	60f8      	str	r0, [r7, #12]
 8013ba4:	60b9      	str	r1, [r7, #8]
 8013ba6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013ba8:	68bb      	ldr	r3, [r7, #8]
 8013baa:	f003 031f 	and.w	r3, r3, #31
 8013bae:	2201      	movs	r2, #1
 8013bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8013bb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	6a1a      	ldr	r2, [r3, #32]
 8013bba:	697b      	ldr	r3, [r7, #20]
 8013bbc:	43db      	mvns	r3, r3
 8013bbe:	401a      	ands	r2, r3
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	6a1a      	ldr	r2, [r3, #32]
 8013bc8:	68bb      	ldr	r3, [r7, #8]
 8013bca:	f003 031f 	and.w	r3, r3, #31
 8013bce:	6879      	ldr	r1, [r7, #4]
 8013bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8013bd4:	431a      	orrs	r2, r3
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	621a      	str	r2, [r3, #32]
}
 8013bda:	bf00      	nop
 8013bdc:	371c      	adds	r7, #28
 8013bde:	46bd      	mov	sp, r7
 8013be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be4:	4770      	bx	lr
	...

08013be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8013be8:	b480      	push	{r7}
 8013bea:	b085      	sub	sp, #20
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
 8013bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013bf8:	2b01      	cmp	r3, #1
 8013bfa:	d101      	bne.n	8013c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013bfc:	2302      	movs	r3, #2
 8013bfe:	e068      	b.n	8013cd2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	2201      	movs	r2, #1
 8013c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	2202      	movs	r2, #2
 8013c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	685b      	ldr	r3, [r3, #4]
 8013c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	689b      	ldr	r3, [r3, #8]
 8013c1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	4a2e      	ldr	r2, [pc, #184]	; (8013ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8013c26:	4293      	cmp	r3, r2
 8013c28:	d004      	beq.n	8013c34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	4a2d      	ldr	r2, [pc, #180]	; (8013ce4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8013c30:	4293      	cmp	r3, r2
 8013c32:	d108      	bne.n	8013c46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8013c3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8013c3c:	683b      	ldr	r3, [r7, #0]
 8013c3e:	685b      	ldr	r3, [r3, #4]
 8013c40:	68fa      	ldr	r2, [r7, #12]
 8013c42:	4313      	orrs	r3, r2
 8013c44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013c4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8013c4e:	683b      	ldr	r3, [r7, #0]
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	68fa      	ldr	r2, [r7, #12]
 8013c54:	4313      	orrs	r3, r2
 8013c56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	68fa      	ldr	r2, [r7, #12]
 8013c5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	4a1e      	ldr	r2, [pc, #120]	; (8013ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8013c66:	4293      	cmp	r3, r2
 8013c68:	d01d      	beq.n	8013ca6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013c72:	d018      	beq.n	8013ca6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	4a1b      	ldr	r2, [pc, #108]	; (8013ce8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8013c7a:	4293      	cmp	r3, r2
 8013c7c:	d013      	beq.n	8013ca6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	4a1a      	ldr	r2, [pc, #104]	; (8013cec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8013c84:	4293      	cmp	r3, r2
 8013c86:	d00e      	beq.n	8013ca6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	4a18      	ldr	r2, [pc, #96]	; (8013cf0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8013c8e:	4293      	cmp	r3, r2
 8013c90:	d009      	beq.n	8013ca6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	4a13      	ldr	r2, [pc, #76]	; (8013ce4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8013c98:	4293      	cmp	r3, r2
 8013c9a:	d004      	beq.n	8013ca6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	4a14      	ldr	r2, [pc, #80]	; (8013cf4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8013ca2:	4293      	cmp	r3, r2
 8013ca4:	d10c      	bne.n	8013cc0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013ca6:	68bb      	ldr	r3, [r7, #8]
 8013ca8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013cac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013cae:	683b      	ldr	r3, [r7, #0]
 8013cb0:	689b      	ldr	r3, [r3, #8]
 8013cb2:	68ba      	ldr	r2, [r7, #8]
 8013cb4:	4313      	orrs	r3, r2
 8013cb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	68ba      	ldr	r2, [r7, #8]
 8013cbe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	2201      	movs	r2, #1
 8013cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	2200      	movs	r2, #0
 8013ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8013cd0:	2300      	movs	r3, #0
}
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	3714      	adds	r7, #20
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cdc:	4770      	bx	lr
 8013cde:	bf00      	nop
 8013ce0:	40012c00 	.word	0x40012c00
 8013ce4:	40013400 	.word	0x40013400
 8013ce8:	40000400 	.word	0x40000400
 8013cec:	40000800 	.word	0x40000800
 8013cf0:	40000c00 	.word	0x40000c00
 8013cf4:	40014000 	.word	0x40014000

08013cf8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d101      	bne.n	8013d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013d06:	2301      	movs	r3, #1
 8013d08:	e040      	b.n	8013d8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d106      	bne.n	8013d20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	2200      	movs	r2, #0
 8013d16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f7ee fd32 	bl	8002784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	2224      	movs	r2, #36	; 0x24
 8013d24:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	681a      	ldr	r2, [r3, #0]
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	f022 0201 	bic.w	r2, r2, #1
 8013d34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013d36:	6878      	ldr	r0, [r7, #4]
 8013d38:	f000 f8c0 	bl	8013ebc <UART_SetConfig>
 8013d3c:	4603      	mov	r3, r0
 8013d3e:	2b01      	cmp	r3, #1
 8013d40:	d101      	bne.n	8013d46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8013d42:	2301      	movs	r3, #1
 8013d44:	e022      	b.n	8013d8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d002      	beq.n	8013d54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8013d4e:	6878      	ldr	r0, [r7, #4]
 8013d50:	f000 fb6c 	bl	801442c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	685a      	ldr	r2, [r3, #4]
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013d62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	689a      	ldr	r2, [r3, #8]
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013d72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	681a      	ldr	r2, [r3, #0]
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	f042 0201 	orr.w	r2, r2, #1
 8013d82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013d84:	6878      	ldr	r0, [r7, #4]
 8013d86:	f000 fbf3 	bl	8014570 <UART_CheckIdleState>
 8013d8a:	4603      	mov	r3, r0
}
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	3708      	adds	r7, #8
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bd80      	pop	{r7, pc}

08013d94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b08a      	sub	sp, #40	; 0x28
 8013d98:	af02      	add	r7, sp, #8
 8013d9a:	60f8      	str	r0, [r7, #12]
 8013d9c:	60b9      	str	r1, [r7, #8]
 8013d9e:	603b      	str	r3, [r7, #0]
 8013da0:	4613      	mov	r3, r2
 8013da2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013da8:	2b20      	cmp	r3, #32
 8013daa:	f040 8082 	bne.w	8013eb2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8013dae:	68bb      	ldr	r3, [r7, #8]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d002      	beq.n	8013dba <HAL_UART_Transmit+0x26>
 8013db4:	88fb      	ldrh	r3, [r7, #6]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d101      	bne.n	8013dbe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8013dba:	2301      	movs	r3, #1
 8013dbc:	e07a      	b.n	8013eb4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8013dc4:	2b01      	cmp	r3, #1
 8013dc6:	d101      	bne.n	8013dcc <HAL_UART_Transmit+0x38>
 8013dc8:	2302      	movs	r3, #2
 8013dca:	e073      	b.n	8013eb4 <HAL_UART_Transmit+0x120>
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	2201      	movs	r2, #1
 8013dd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	2200      	movs	r2, #0
 8013dd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	2221      	movs	r2, #33	; 0x21
 8013de0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013de2:	f7f6 ffdb 	bl	800ad9c <HAL_GetTick>
 8013de6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	88fa      	ldrh	r2, [r7, #6]
 8013dec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	88fa      	ldrh	r2, [r7, #6]
 8013df4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	689b      	ldr	r3, [r3, #8]
 8013dfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013e00:	d108      	bne.n	8013e14 <HAL_UART_Transmit+0x80>
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	691b      	ldr	r3, [r3, #16]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d104      	bne.n	8013e14 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013e0e:	68bb      	ldr	r3, [r7, #8]
 8013e10:	61bb      	str	r3, [r7, #24]
 8013e12:	e003      	b.n	8013e1c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8013e14:	68bb      	ldr	r3, [r7, #8]
 8013e16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013e18:	2300      	movs	r3, #0
 8013e1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	2200      	movs	r2, #0
 8013e20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8013e24:	e02d      	b.n	8013e82 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013e26:	683b      	ldr	r3, [r7, #0]
 8013e28:	9300      	str	r3, [sp, #0]
 8013e2a:	697b      	ldr	r3, [r7, #20]
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	2180      	movs	r1, #128	; 0x80
 8013e30:	68f8      	ldr	r0, [r7, #12]
 8013e32:	f000 fbe6 	bl	8014602 <UART_WaitOnFlagUntilTimeout>
 8013e36:	4603      	mov	r3, r0
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d001      	beq.n	8013e40 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8013e3c:	2303      	movs	r3, #3
 8013e3e:	e039      	b.n	8013eb4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8013e40:	69fb      	ldr	r3, [r7, #28]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d10b      	bne.n	8013e5e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013e46:	69bb      	ldr	r3, [r7, #24]
 8013e48:	881a      	ldrh	r2, [r3, #0]
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013e52:	b292      	uxth	r2, r2
 8013e54:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8013e56:	69bb      	ldr	r3, [r7, #24]
 8013e58:	3302      	adds	r3, #2
 8013e5a:	61bb      	str	r3, [r7, #24]
 8013e5c:	e008      	b.n	8013e70 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013e5e:	69fb      	ldr	r3, [r7, #28]
 8013e60:	781a      	ldrb	r2, [r3, #0]
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	b292      	uxth	r2, r2
 8013e68:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8013e6a:	69fb      	ldr	r3, [r7, #28]
 8013e6c:	3301      	adds	r3, #1
 8013e6e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8013e76:	b29b      	uxth	r3, r3
 8013e78:	3b01      	subs	r3, #1
 8013e7a:	b29a      	uxth	r2, r3
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8013e88:	b29b      	uxth	r3, r3
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d1cb      	bne.n	8013e26 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	9300      	str	r3, [sp, #0]
 8013e92:	697b      	ldr	r3, [r7, #20]
 8013e94:	2200      	movs	r2, #0
 8013e96:	2140      	movs	r1, #64	; 0x40
 8013e98:	68f8      	ldr	r0, [r7, #12]
 8013e9a:	f000 fbb2 	bl	8014602 <UART_WaitOnFlagUntilTimeout>
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d001      	beq.n	8013ea8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8013ea4:	2303      	movs	r3, #3
 8013ea6:	e005      	b.n	8013eb4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	2220      	movs	r2, #32
 8013eac:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8013eae:	2300      	movs	r3, #0
 8013eb0:	e000      	b.n	8013eb4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8013eb2:	2302      	movs	r3, #2
  }
}
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	3720      	adds	r7, #32
 8013eb8:	46bd      	mov	sp, r7
 8013eba:	bd80      	pop	{r7, pc}

08013ebc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013ec0:	b08a      	sub	sp, #40	; 0x28
 8013ec2:	af00      	add	r7, sp, #0
 8013ec4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	689a      	ldr	r2, [r3, #8]
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	691b      	ldr	r3, [r3, #16]
 8013ed4:	431a      	orrs	r2, r3
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	695b      	ldr	r3, [r3, #20]
 8013eda:	431a      	orrs	r2, r3
 8013edc:	68fb      	ldr	r3, [r7, #12]
 8013ede:	69db      	ldr	r3, [r3, #28]
 8013ee0:	4313      	orrs	r3, r2
 8013ee2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	681a      	ldr	r2, [r3, #0]
 8013eea:	4ba4      	ldr	r3, [pc, #656]	; (801417c <UART_SetConfig+0x2c0>)
 8013eec:	4013      	ands	r3, r2
 8013eee:	68fa      	ldr	r2, [r7, #12]
 8013ef0:	6812      	ldr	r2, [r2, #0]
 8013ef2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013ef4:	430b      	orrs	r3, r1
 8013ef6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	685b      	ldr	r3, [r3, #4]
 8013efe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	68da      	ldr	r2, [r3, #12]
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	430a      	orrs	r2, r1
 8013f0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	699b      	ldr	r3, [r3, #24]
 8013f12:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	4a99      	ldr	r2, [pc, #612]	; (8014180 <UART_SetConfig+0x2c4>)
 8013f1a:	4293      	cmp	r3, r2
 8013f1c:	d004      	beq.n	8013f28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	6a1b      	ldr	r3, [r3, #32]
 8013f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f24:	4313      	orrs	r3, r2
 8013f26:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	689b      	ldr	r3, [r3, #8]
 8013f2e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f38:	430a      	orrs	r2, r1
 8013f3a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	4a90      	ldr	r2, [pc, #576]	; (8014184 <UART_SetConfig+0x2c8>)
 8013f42:	4293      	cmp	r3, r2
 8013f44:	d126      	bne.n	8013f94 <UART_SetConfig+0xd8>
 8013f46:	4b90      	ldr	r3, [pc, #576]	; (8014188 <UART_SetConfig+0x2cc>)
 8013f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013f4c:	f003 0303 	and.w	r3, r3, #3
 8013f50:	2b03      	cmp	r3, #3
 8013f52:	d81b      	bhi.n	8013f8c <UART_SetConfig+0xd0>
 8013f54:	a201      	add	r2, pc, #4	; (adr r2, 8013f5c <UART_SetConfig+0xa0>)
 8013f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f5a:	bf00      	nop
 8013f5c:	08013f6d 	.word	0x08013f6d
 8013f60:	08013f7d 	.word	0x08013f7d
 8013f64:	08013f75 	.word	0x08013f75
 8013f68:	08013f85 	.word	0x08013f85
 8013f6c:	2301      	movs	r3, #1
 8013f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013f72:	e116      	b.n	80141a2 <UART_SetConfig+0x2e6>
 8013f74:	2302      	movs	r3, #2
 8013f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013f7a:	e112      	b.n	80141a2 <UART_SetConfig+0x2e6>
 8013f7c:	2304      	movs	r3, #4
 8013f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013f82:	e10e      	b.n	80141a2 <UART_SetConfig+0x2e6>
 8013f84:	2308      	movs	r3, #8
 8013f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013f8a:	e10a      	b.n	80141a2 <UART_SetConfig+0x2e6>
 8013f8c:	2310      	movs	r3, #16
 8013f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013f92:	e106      	b.n	80141a2 <UART_SetConfig+0x2e6>
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	4a7c      	ldr	r2, [pc, #496]	; (801418c <UART_SetConfig+0x2d0>)
 8013f9a:	4293      	cmp	r3, r2
 8013f9c:	d138      	bne.n	8014010 <UART_SetConfig+0x154>
 8013f9e:	4b7a      	ldr	r3, [pc, #488]	; (8014188 <UART_SetConfig+0x2cc>)
 8013fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013fa4:	f003 030c 	and.w	r3, r3, #12
 8013fa8:	2b0c      	cmp	r3, #12
 8013faa:	d82d      	bhi.n	8014008 <UART_SetConfig+0x14c>
 8013fac:	a201      	add	r2, pc, #4	; (adr r2, 8013fb4 <UART_SetConfig+0xf8>)
 8013fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fb2:	bf00      	nop
 8013fb4:	08013fe9 	.word	0x08013fe9
 8013fb8:	08014009 	.word	0x08014009
 8013fbc:	08014009 	.word	0x08014009
 8013fc0:	08014009 	.word	0x08014009
 8013fc4:	08013ff9 	.word	0x08013ff9
 8013fc8:	08014009 	.word	0x08014009
 8013fcc:	08014009 	.word	0x08014009
 8013fd0:	08014009 	.word	0x08014009
 8013fd4:	08013ff1 	.word	0x08013ff1
 8013fd8:	08014009 	.word	0x08014009
 8013fdc:	08014009 	.word	0x08014009
 8013fe0:	08014009 	.word	0x08014009
 8013fe4:	08014001 	.word	0x08014001
 8013fe8:	2300      	movs	r3, #0
 8013fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013fee:	e0d8      	b.n	80141a2 <UART_SetConfig+0x2e6>
 8013ff0:	2302      	movs	r3, #2
 8013ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013ff6:	e0d4      	b.n	80141a2 <UART_SetConfig+0x2e6>
 8013ff8:	2304      	movs	r3, #4
 8013ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8013ffe:	e0d0      	b.n	80141a2 <UART_SetConfig+0x2e6>
 8014000:	2308      	movs	r3, #8
 8014002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014006:	e0cc      	b.n	80141a2 <UART_SetConfig+0x2e6>
 8014008:	2310      	movs	r3, #16
 801400a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801400e:	e0c8      	b.n	80141a2 <UART_SetConfig+0x2e6>
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	4a5e      	ldr	r2, [pc, #376]	; (8014190 <UART_SetConfig+0x2d4>)
 8014016:	4293      	cmp	r3, r2
 8014018:	d125      	bne.n	8014066 <UART_SetConfig+0x1aa>
 801401a:	4b5b      	ldr	r3, [pc, #364]	; (8014188 <UART_SetConfig+0x2cc>)
 801401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014020:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8014024:	2b30      	cmp	r3, #48	; 0x30
 8014026:	d016      	beq.n	8014056 <UART_SetConfig+0x19a>
 8014028:	2b30      	cmp	r3, #48	; 0x30
 801402a:	d818      	bhi.n	801405e <UART_SetConfig+0x1a2>
 801402c:	2b20      	cmp	r3, #32
 801402e:	d00a      	beq.n	8014046 <UART_SetConfig+0x18a>
 8014030:	2b20      	cmp	r3, #32
 8014032:	d814      	bhi.n	801405e <UART_SetConfig+0x1a2>
 8014034:	2b00      	cmp	r3, #0
 8014036:	d002      	beq.n	801403e <UART_SetConfig+0x182>
 8014038:	2b10      	cmp	r3, #16
 801403a:	d008      	beq.n	801404e <UART_SetConfig+0x192>
 801403c:	e00f      	b.n	801405e <UART_SetConfig+0x1a2>
 801403e:	2300      	movs	r3, #0
 8014040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014044:	e0ad      	b.n	80141a2 <UART_SetConfig+0x2e6>
 8014046:	2302      	movs	r3, #2
 8014048:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801404c:	e0a9      	b.n	80141a2 <UART_SetConfig+0x2e6>
 801404e:	2304      	movs	r3, #4
 8014050:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014054:	e0a5      	b.n	80141a2 <UART_SetConfig+0x2e6>
 8014056:	2308      	movs	r3, #8
 8014058:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801405c:	e0a1      	b.n	80141a2 <UART_SetConfig+0x2e6>
 801405e:	2310      	movs	r3, #16
 8014060:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014064:	e09d      	b.n	80141a2 <UART_SetConfig+0x2e6>
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	4a4a      	ldr	r2, [pc, #296]	; (8014194 <UART_SetConfig+0x2d8>)
 801406c:	4293      	cmp	r3, r2
 801406e:	d125      	bne.n	80140bc <UART_SetConfig+0x200>
 8014070:	4b45      	ldr	r3, [pc, #276]	; (8014188 <UART_SetConfig+0x2cc>)
 8014072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014076:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801407a:	2bc0      	cmp	r3, #192	; 0xc0
 801407c:	d016      	beq.n	80140ac <UART_SetConfig+0x1f0>
 801407e:	2bc0      	cmp	r3, #192	; 0xc0
 8014080:	d818      	bhi.n	80140b4 <UART_SetConfig+0x1f8>
 8014082:	2b80      	cmp	r3, #128	; 0x80
 8014084:	d00a      	beq.n	801409c <UART_SetConfig+0x1e0>
 8014086:	2b80      	cmp	r3, #128	; 0x80
 8014088:	d814      	bhi.n	80140b4 <UART_SetConfig+0x1f8>
 801408a:	2b00      	cmp	r3, #0
 801408c:	d002      	beq.n	8014094 <UART_SetConfig+0x1d8>
 801408e:	2b40      	cmp	r3, #64	; 0x40
 8014090:	d008      	beq.n	80140a4 <UART_SetConfig+0x1e8>
 8014092:	e00f      	b.n	80140b4 <UART_SetConfig+0x1f8>
 8014094:	2300      	movs	r3, #0
 8014096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801409a:	e082      	b.n	80141a2 <UART_SetConfig+0x2e6>
 801409c:	2302      	movs	r3, #2
 801409e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80140a2:	e07e      	b.n	80141a2 <UART_SetConfig+0x2e6>
 80140a4:	2304      	movs	r3, #4
 80140a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80140aa:	e07a      	b.n	80141a2 <UART_SetConfig+0x2e6>
 80140ac:	2308      	movs	r3, #8
 80140ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80140b2:	e076      	b.n	80141a2 <UART_SetConfig+0x2e6>
 80140b4:	2310      	movs	r3, #16
 80140b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80140ba:	e072      	b.n	80141a2 <UART_SetConfig+0x2e6>
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	4a35      	ldr	r2, [pc, #212]	; (8014198 <UART_SetConfig+0x2dc>)
 80140c2:	4293      	cmp	r3, r2
 80140c4:	d12a      	bne.n	801411c <UART_SetConfig+0x260>
 80140c6:	4b30      	ldr	r3, [pc, #192]	; (8014188 <UART_SetConfig+0x2cc>)
 80140c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80140cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80140d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80140d4:	d01a      	beq.n	801410c <UART_SetConfig+0x250>
 80140d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80140da:	d81b      	bhi.n	8014114 <UART_SetConfig+0x258>
 80140dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80140e0:	d00c      	beq.n	80140fc <UART_SetConfig+0x240>
 80140e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80140e6:	d815      	bhi.n	8014114 <UART_SetConfig+0x258>
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d003      	beq.n	80140f4 <UART_SetConfig+0x238>
 80140ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80140f0:	d008      	beq.n	8014104 <UART_SetConfig+0x248>
 80140f2:	e00f      	b.n	8014114 <UART_SetConfig+0x258>
 80140f4:	2300      	movs	r3, #0
 80140f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80140fa:	e052      	b.n	80141a2 <UART_SetConfig+0x2e6>
 80140fc:	2302      	movs	r3, #2
 80140fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014102:	e04e      	b.n	80141a2 <UART_SetConfig+0x2e6>
 8014104:	2304      	movs	r3, #4
 8014106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801410a:	e04a      	b.n	80141a2 <UART_SetConfig+0x2e6>
 801410c:	2308      	movs	r3, #8
 801410e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014112:	e046      	b.n	80141a2 <UART_SetConfig+0x2e6>
 8014114:	2310      	movs	r3, #16
 8014116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801411a:	e042      	b.n	80141a2 <UART_SetConfig+0x2e6>
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	4a17      	ldr	r2, [pc, #92]	; (8014180 <UART_SetConfig+0x2c4>)
 8014122:	4293      	cmp	r3, r2
 8014124:	d13a      	bne.n	801419c <UART_SetConfig+0x2e0>
 8014126:	4b18      	ldr	r3, [pc, #96]	; (8014188 <UART_SetConfig+0x2cc>)
 8014128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801412c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8014130:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8014134:	d01a      	beq.n	801416c <UART_SetConfig+0x2b0>
 8014136:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801413a:	d81b      	bhi.n	8014174 <UART_SetConfig+0x2b8>
 801413c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014140:	d00c      	beq.n	801415c <UART_SetConfig+0x2a0>
 8014142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014146:	d815      	bhi.n	8014174 <UART_SetConfig+0x2b8>
 8014148:	2b00      	cmp	r3, #0
 801414a:	d003      	beq.n	8014154 <UART_SetConfig+0x298>
 801414c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014150:	d008      	beq.n	8014164 <UART_SetConfig+0x2a8>
 8014152:	e00f      	b.n	8014174 <UART_SetConfig+0x2b8>
 8014154:	2300      	movs	r3, #0
 8014156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801415a:	e022      	b.n	80141a2 <UART_SetConfig+0x2e6>
 801415c:	2302      	movs	r3, #2
 801415e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014162:	e01e      	b.n	80141a2 <UART_SetConfig+0x2e6>
 8014164:	2304      	movs	r3, #4
 8014166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801416a:	e01a      	b.n	80141a2 <UART_SetConfig+0x2e6>
 801416c:	2308      	movs	r3, #8
 801416e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014172:	e016      	b.n	80141a2 <UART_SetConfig+0x2e6>
 8014174:	2310      	movs	r3, #16
 8014176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801417a:	e012      	b.n	80141a2 <UART_SetConfig+0x2e6>
 801417c:	efff69f3 	.word	0xefff69f3
 8014180:	40008000 	.word	0x40008000
 8014184:	40013800 	.word	0x40013800
 8014188:	40021000 	.word	0x40021000
 801418c:	40004400 	.word	0x40004400
 8014190:	40004800 	.word	0x40004800
 8014194:	40004c00 	.word	0x40004c00
 8014198:	40005000 	.word	0x40005000
 801419c:	2310      	movs	r3, #16
 801419e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	4a9f      	ldr	r2, [pc, #636]	; (8014424 <UART_SetConfig+0x568>)
 80141a8:	4293      	cmp	r3, r2
 80141aa:	d17a      	bne.n	80142a2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80141ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80141b0:	2b08      	cmp	r3, #8
 80141b2:	d824      	bhi.n	80141fe <UART_SetConfig+0x342>
 80141b4:	a201      	add	r2, pc, #4	; (adr r2, 80141bc <UART_SetConfig+0x300>)
 80141b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141ba:	bf00      	nop
 80141bc:	080141e1 	.word	0x080141e1
 80141c0:	080141ff 	.word	0x080141ff
 80141c4:	080141e9 	.word	0x080141e9
 80141c8:	080141ff 	.word	0x080141ff
 80141cc:	080141ef 	.word	0x080141ef
 80141d0:	080141ff 	.word	0x080141ff
 80141d4:	080141ff 	.word	0x080141ff
 80141d8:	080141ff 	.word	0x080141ff
 80141dc:	080141f7 	.word	0x080141f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80141e0:	f7fc f8f4 	bl	80103cc <HAL_RCC_GetPCLK1Freq>
 80141e4:	61f8      	str	r0, [r7, #28]
        break;
 80141e6:	e010      	b.n	801420a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80141e8:	4b8f      	ldr	r3, [pc, #572]	; (8014428 <UART_SetConfig+0x56c>)
 80141ea:	61fb      	str	r3, [r7, #28]
        break;
 80141ec:	e00d      	b.n	801420a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80141ee:	f7fc f855 	bl	801029c <HAL_RCC_GetSysClockFreq>
 80141f2:	61f8      	str	r0, [r7, #28]
        break;
 80141f4:	e009      	b.n	801420a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80141f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80141fa:	61fb      	str	r3, [r7, #28]
        break;
 80141fc:	e005      	b.n	801420a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80141fe:	2300      	movs	r3, #0
 8014200:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8014202:	2301      	movs	r3, #1
 8014204:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8014208:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801420a:	69fb      	ldr	r3, [r7, #28]
 801420c:	2b00      	cmp	r3, #0
 801420e:	f000 80fb 	beq.w	8014408 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	685a      	ldr	r2, [r3, #4]
 8014216:	4613      	mov	r3, r2
 8014218:	005b      	lsls	r3, r3, #1
 801421a:	4413      	add	r3, r2
 801421c:	69fa      	ldr	r2, [r7, #28]
 801421e:	429a      	cmp	r2, r3
 8014220:	d305      	bcc.n	801422e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8014222:	68fb      	ldr	r3, [r7, #12]
 8014224:	685b      	ldr	r3, [r3, #4]
 8014226:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8014228:	69fa      	ldr	r2, [r7, #28]
 801422a:	429a      	cmp	r2, r3
 801422c:	d903      	bls.n	8014236 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 801422e:	2301      	movs	r3, #1
 8014230:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014234:	e0e8      	b.n	8014408 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8014236:	69fb      	ldr	r3, [r7, #28]
 8014238:	2200      	movs	r2, #0
 801423a:	461c      	mov	r4, r3
 801423c:	4615      	mov	r5, r2
 801423e:	f04f 0200 	mov.w	r2, #0
 8014242:	f04f 0300 	mov.w	r3, #0
 8014246:	022b      	lsls	r3, r5, #8
 8014248:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 801424c:	0222      	lsls	r2, r4, #8
 801424e:	68f9      	ldr	r1, [r7, #12]
 8014250:	6849      	ldr	r1, [r1, #4]
 8014252:	0849      	lsrs	r1, r1, #1
 8014254:	2000      	movs	r0, #0
 8014256:	4688      	mov	r8, r1
 8014258:	4681      	mov	r9, r0
 801425a:	eb12 0a08 	adds.w	sl, r2, r8
 801425e:	eb43 0b09 	adc.w	fp, r3, r9
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	685b      	ldr	r3, [r3, #4]
 8014266:	2200      	movs	r2, #0
 8014268:	603b      	str	r3, [r7, #0]
 801426a:	607a      	str	r2, [r7, #4]
 801426c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014270:	4650      	mov	r0, sl
 8014272:	4659      	mov	r1, fp
 8014274:	f7ec f80c 	bl	8000290 <__aeabi_uldivmod>
 8014278:	4602      	mov	r2, r0
 801427a:	460b      	mov	r3, r1
 801427c:	4613      	mov	r3, r2
 801427e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014280:	69bb      	ldr	r3, [r7, #24]
 8014282:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014286:	d308      	bcc.n	801429a <UART_SetConfig+0x3de>
 8014288:	69bb      	ldr	r3, [r7, #24]
 801428a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801428e:	d204      	bcs.n	801429a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	69ba      	ldr	r2, [r7, #24]
 8014296:	60da      	str	r2, [r3, #12]
 8014298:	e0b6      	b.n	8014408 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 801429a:	2301      	movs	r3, #1
 801429c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80142a0:	e0b2      	b.n	8014408 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	69db      	ldr	r3, [r3, #28]
 80142a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80142aa:	d15e      	bne.n	801436a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80142ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80142b0:	2b08      	cmp	r3, #8
 80142b2:	d828      	bhi.n	8014306 <UART_SetConfig+0x44a>
 80142b4:	a201      	add	r2, pc, #4	; (adr r2, 80142bc <UART_SetConfig+0x400>)
 80142b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142ba:	bf00      	nop
 80142bc:	080142e1 	.word	0x080142e1
 80142c0:	080142e9 	.word	0x080142e9
 80142c4:	080142f1 	.word	0x080142f1
 80142c8:	08014307 	.word	0x08014307
 80142cc:	080142f7 	.word	0x080142f7
 80142d0:	08014307 	.word	0x08014307
 80142d4:	08014307 	.word	0x08014307
 80142d8:	08014307 	.word	0x08014307
 80142dc:	080142ff 	.word	0x080142ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80142e0:	f7fc f874 	bl	80103cc <HAL_RCC_GetPCLK1Freq>
 80142e4:	61f8      	str	r0, [r7, #28]
        break;
 80142e6:	e014      	b.n	8014312 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80142e8:	f7fc f886 	bl	80103f8 <HAL_RCC_GetPCLK2Freq>
 80142ec:	61f8      	str	r0, [r7, #28]
        break;
 80142ee:	e010      	b.n	8014312 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80142f0:	4b4d      	ldr	r3, [pc, #308]	; (8014428 <UART_SetConfig+0x56c>)
 80142f2:	61fb      	str	r3, [r7, #28]
        break;
 80142f4:	e00d      	b.n	8014312 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80142f6:	f7fb ffd1 	bl	801029c <HAL_RCC_GetSysClockFreq>
 80142fa:	61f8      	str	r0, [r7, #28]
        break;
 80142fc:	e009      	b.n	8014312 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80142fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014302:	61fb      	str	r3, [r7, #28]
        break;
 8014304:	e005      	b.n	8014312 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8014306:	2300      	movs	r3, #0
 8014308:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 801430a:	2301      	movs	r3, #1
 801430c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8014310:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8014312:	69fb      	ldr	r3, [r7, #28]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d077      	beq.n	8014408 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8014318:	69fb      	ldr	r3, [r7, #28]
 801431a:	005a      	lsls	r2, r3, #1
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	685b      	ldr	r3, [r3, #4]
 8014320:	085b      	lsrs	r3, r3, #1
 8014322:	441a      	add	r2, r3
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	685b      	ldr	r3, [r3, #4]
 8014328:	fbb2 f3f3 	udiv	r3, r2, r3
 801432c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801432e:	69bb      	ldr	r3, [r7, #24]
 8014330:	2b0f      	cmp	r3, #15
 8014332:	d916      	bls.n	8014362 <UART_SetConfig+0x4a6>
 8014334:	69bb      	ldr	r3, [r7, #24]
 8014336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801433a:	d212      	bcs.n	8014362 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801433c:	69bb      	ldr	r3, [r7, #24]
 801433e:	b29b      	uxth	r3, r3
 8014340:	f023 030f 	bic.w	r3, r3, #15
 8014344:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014346:	69bb      	ldr	r3, [r7, #24]
 8014348:	085b      	lsrs	r3, r3, #1
 801434a:	b29b      	uxth	r3, r3
 801434c:	f003 0307 	and.w	r3, r3, #7
 8014350:	b29a      	uxth	r2, r3
 8014352:	8afb      	ldrh	r3, [r7, #22]
 8014354:	4313      	orrs	r3, r2
 8014356:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	8afa      	ldrh	r2, [r7, #22]
 801435e:	60da      	str	r2, [r3, #12]
 8014360:	e052      	b.n	8014408 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8014362:	2301      	movs	r3, #1
 8014364:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014368:	e04e      	b.n	8014408 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801436a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801436e:	2b08      	cmp	r3, #8
 8014370:	d827      	bhi.n	80143c2 <UART_SetConfig+0x506>
 8014372:	a201      	add	r2, pc, #4	; (adr r2, 8014378 <UART_SetConfig+0x4bc>)
 8014374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014378:	0801439d 	.word	0x0801439d
 801437c:	080143a5 	.word	0x080143a5
 8014380:	080143ad 	.word	0x080143ad
 8014384:	080143c3 	.word	0x080143c3
 8014388:	080143b3 	.word	0x080143b3
 801438c:	080143c3 	.word	0x080143c3
 8014390:	080143c3 	.word	0x080143c3
 8014394:	080143c3 	.word	0x080143c3
 8014398:	080143bb 	.word	0x080143bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801439c:	f7fc f816 	bl	80103cc <HAL_RCC_GetPCLK1Freq>
 80143a0:	61f8      	str	r0, [r7, #28]
        break;
 80143a2:	e014      	b.n	80143ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80143a4:	f7fc f828 	bl	80103f8 <HAL_RCC_GetPCLK2Freq>
 80143a8:	61f8      	str	r0, [r7, #28]
        break;
 80143aa:	e010      	b.n	80143ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80143ac:	4b1e      	ldr	r3, [pc, #120]	; (8014428 <UART_SetConfig+0x56c>)
 80143ae:	61fb      	str	r3, [r7, #28]
        break;
 80143b0:	e00d      	b.n	80143ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80143b2:	f7fb ff73 	bl	801029c <HAL_RCC_GetSysClockFreq>
 80143b6:	61f8      	str	r0, [r7, #28]
        break;
 80143b8:	e009      	b.n	80143ce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80143ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80143be:	61fb      	str	r3, [r7, #28]
        break;
 80143c0:	e005      	b.n	80143ce <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80143c2:	2300      	movs	r3, #0
 80143c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80143c6:	2301      	movs	r3, #1
 80143c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80143cc:	bf00      	nop
    }

    if (pclk != 0U)
 80143ce:	69fb      	ldr	r3, [r7, #28]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d019      	beq.n	8014408 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	685b      	ldr	r3, [r3, #4]
 80143d8:	085a      	lsrs	r2, r3, #1
 80143da:	69fb      	ldr	r3, [r7, #28]
 80143dc:	441a      	add	r2, r3
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	685b      	ldr	r3, [r3, #4]
 80143e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80143e6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80143e8:	69bb      	ldr	r3, [r7, #24]
 80143ea:	2b0f      	cmp	r3, #15
 80143ec:	d909      	bls.n	8014402 <UART_SetConfig+0x546>
 80143ee:	69bb      	ldr	r3, [r7, #24]
 80143f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80143f4:	d205      	bcs.n	8014402 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80143f6:	69bb      	ldr	r3, [r7, #24]
 80143f8:	b29a      	uxth	r2, r3
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	60da      	str	r2, [r3, #12]
 8014400:	e002      	b.n	8014408 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8014402:	2301      	movs	r3, #1
 8014404:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	2200      	movs	r2, #0
 801440c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	2200      	movs	r2, #0
 8014412:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8014414:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8014418:	4618      	mov	r0, r3
 801441a:	3728      	adds	r7, #40	; 0x28
 801441c:	46bd      	mov	sp, r7
 801441e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014422:	bf00      	nop
 8014424:	40008000 	.word	0x40008000
 8014428:	00f42400 	.word	0x00f42400

0801442c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801442c:	b480      	push	{r7}
 801442e:	b083      	sub	sp, #12
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014438:	f003 0301 	and.w	r3, r3, #1
 801443c:	2b00      	cmp	r3, #0
 801443e:	d00a      	beq.n	8014456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	685b      	ldr	r3, [r3, #4]
 8014446:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	430a      	orrs	r2, r1
 8014454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801445a:	f003 0302 	and.w	r3, r3, #2
 801445e:	2b00      	cmp	r3, #0
 8014460:	d00a      	beq.n	8014478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	685b      	ldr	r3, [r3, #4]
 8014468:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	430a      	orrs	r2, r1
 8014476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801447c:	f003 0304 	and.w	r3, r3, #4
 8014480:	2b00      	cmp	r3, #0
 8014482:	d00a      	beq.n	801449a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	685b      	ldr	r3, [r3, #4]
 801448a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	430a      	orrs	r2, r1
 8014498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801449e:	f003 0308 	and.w	r3, r3, #8
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d00a      	beq.n	80144bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	685b      	ldr	r3, [r3, #4]
 80144ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	430a      	orrs	r2, r1
 80144ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144c0:	f003 0310 	and.w	r3, r3, #16
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d00a      	beq.n	80144de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	689b      	ldr	r3, [r3, #8]
 80144ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	430a      	orrs	r2, r1
 80144dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144e2:	f003 0320 	and.w	r3, r3, #32
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d00a      	beq.n	8014500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	689b      	ldr	r3, [r3, #8]
 80144f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	430a      	orrs	r2, r1
 80144fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014508:	2b00      	cmp	r3, #0
 801450a:	d01a      	beq.n	8014542 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	685b      	ldr	r3, [r3, #4]
 8014512:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	430a      	orrs	r2, r1
 8014520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014526:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801452a:	d10a      	bne.n	8014542 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	685b      	ldr	r3, [r3, #4]
 8014532:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	430a      	orrs	r2, r1
 8014540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801454a:	2b00      	cmp	r3, #0
 801454c:	d00a      	beq.n	8014564 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	685b      	ldr	r3, [r3, #4]
 8014554:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	430a      	orrs	r2, r1
 8014562:	605a      	str	r2, [r3, #4]
  }
}
 8014564:	bf00      	nop
 8014566:	370c      	adds	r7, #12
 8014568:	46bd      	mov	sp, r7
 801456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456e:	4770      	bx	lr

08014570 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b086      	sub	sp, #24
 8014574:	af02      	add	r7, sp, #8
 8014576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	2200      	movs	r2, #0
 801457c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014580:	f7f6 fc0c 	bl	800ad9c <HAL_GetTick>
 8014584:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	f003 0308 	and.w	r3, r3, #8
 8014590:	2b08      	cmp	r3, #8
 8014592:	d10e      	bne.n	80145b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014594:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014598:	9300      	str	r3, [sp, #0]
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	2200      	movs	r2, #0
 801459e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80145a2:	6878      	ldr	r0, [r7, #4]
 80145a4:	f000 f82d 	bl	8014602 <UART_WaitOnFlagUntilTimeout>
 80145a8:	4603      	mov	r3, r0
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d001      	beq.n	80145b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80145ae:	2303      	movs	r3, #3
 80145b0:	e023      	b.n	80145fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	f003 0304 	and.w	r3, r3, #4
 80145bc:	2b04      	cmp	r3, #4
 80145be:	d10e      	bne.n	80145de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80145c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80145c4:	9300      	str	r3, [sp, #0]
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	2200      	movs	r2, #0
 80145ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80145ce:	6878      	ldr	r0, [r7, #4]
 80145d0:	f000 f817 	bl	8014602 <UART_WaitOnFlagUntilTimeout>
 80145d4:	4603      	mov	r3, r0
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d001      	beq.n	80145de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80145da:	2303      	movs	r3, #3
 80145dc:	e00d      	b.n	80145fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	2220      	movs	r2, #32
 80145e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	2220      	movs	r2, #32
 80145e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	2200      	movs	r2, #0
 80145ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	2200      	movs	r2, #0
 80145f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80145f8:	2300      	movs	r3, #0
}
 80145fa:	4618      	mov	r0, r3
 80145fc:	3710      	adds	r7, #16
 80145fe:	46bd      	mov	sp, r7
 8014600:	bd80      	pop	{r7, pc}

08014602 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014602:	b580      	push	{r7, lr}
 8014604:	b09c      	sub	sp, #112	; 0x70
 8014606:	af00      	add	r7, sp, #0
 8014608:	60f8      	str	r0, [r7, #12]
 801460a:	60b9      	str	r1, [r7, #8]
 801460c:	603b      	str	r3, [r7, #0]
 801460e:	4613      	mov	r3, r2
 8014610:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014612:	e0a5      	b.n	8014760 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801461a:	f000 80a1 	beq.w	8014760 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801461e:	f7f6 fbbd 	bl	800ad9c <HAL_GetTick>
 8014622:	4602      	mov	r2, r0
 8014624:	683b      	ldr	r3, [r7, #0]
 8014626:	1ad3      	subs	r3, r2, r3
 8014628:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801462a:	429a      	cmp	r2, r3
 801462c:	d302      	bcc.n	8014634 <UART_WaitOnFlagUntilTimeout+0x32>
 801462e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014630:	2b00      	cmp	r3, #0
 8014632:	d13e      	bne.n	80146b2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801463a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801463c:	e853 3f00 	ldrex	r3, [r3]
 8014640:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014644:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8014648:	667b      	str	r3, [r7, #100]	; 0x64
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	461a      	mov	r2, r3
 8014650:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014652:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014654:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014656:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014658:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801465a:	e841 2300 	strex	r3, r2, [r1]
 801465e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8014660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014662:	2b00      	cmp	r3, #0
 8014664:	d1e6      	bne.n	8014634 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	3308      	adds	r3, #8
 801466c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801466e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014670:	e853 3f00 	ldrex	r3, [r3]
 8014674:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014678:	f023 0301 	bic.w	r3, r3, #1
 801467c:	663b      	str	r3, [r7, #96]	; 0x60
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	3308      	adds	r3, #8
 8014684:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014686:	64ba      	str	r2, [r7, #72]	; 0x48
 8014688:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801468a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801468c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801468e:	e841 2300 	strex	r3, r2, [r1]
 8014692:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8014694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014696:	2b00      	cmp	r3, #0
 8014698:	d1e5      	bne.n	8014666 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	2220      	movs	r2, #32
 801469e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	2220      	movs	r2, #32
 80146a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	2200      	movs	r2, #0
 80146aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80146ae:	2303      	movs	r3, #3
 80146b0:	e067      	b.n	8014782 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	f003 0304 	and.w	r3, r3, #4
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d04f      	beq.n	8014760 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	69db      	ldr	r3, [r3, #28]
 80146c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80146ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80146ce:	d147      	bne.n	8014760 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80146d8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146e2:	e853 3f00 	ldrex	r3, [r3]
 80146e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80146e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80146ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	461a      	mov	r2, r3
 80146f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80146f8:	637b      	str	r3, [r7, #52]	; 0x34
 80146fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80146fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80146fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014700:	e841 2300 	strex	r3, r2, [r1]
 8014704:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014708:	2b00      	cmp	r3, #0
 801470a:	d1e6      	bne.n	80146da <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	3308      	adds	r3, #8
 8014712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014714:	697b      	ldr	r3, [r7, #20]
 8014716:	e853 3f00 	ldrex	r3, [r3]
 801471a:	613b      	str	r3, [r7, #16]
   return(result);
 801471c:	693b      	ldr	r3, [r7, #16]
 801471e:	f023 0301 	bic.w	r3, r3, #1
 8014722:	66bb      	str	r3, [r7, #104]	; 0x68
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	3308      	adds	r3, #8
 801472a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801472c:	623a      	str	r2, [r7, #32]
 801472e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014730:	69f9      	ldr	r1, [r7, #28]
 8014732:	6a3a      	ldr	r2, [r7, #32]
 8014734:	e841 2300 	strex	r3, r2, [r1]
 8014738:	61bb      	str	r3, [r7, #24]
   return(result);
 801473a:	69bb      	ldr	r3, [r7, #24]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d1e5      	bne.n	801470c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	2220      	movs	r2, #32
 8014744:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	2220      	movs	r2, #32
 801474a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	2220      	movs	r2, #32
 8014750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	2200      	movs	r2, #0
 8014758:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 801475c:	2303      	movs	r3, #3
 801475e:	e010      	b.n	8014782 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	69da      	ldr	r2, [r3, #28]
 8014766:	68bb      	ldr	r3, [r7, #8]
 8014768:	4013      	ands	r3, r2
 801476a:	68ba      	ldr	r2, [r7, #8]
 801476c:	429a      	cmp	r2, r3
 801476e:	bf0c      	ite	eq
 8014770:	2301      	moveq	r3, #1
 8014772:	2300      	movne	r3, #0
 8014774:	b2db      	uxtb	r3, r3
 8014776:	461a      	mov	r2, r3
 8014778:	79fb      	ldrb	r3, [r7, #7]
 801477a:	429a      	cmp	r2, r3
 801477c:	f43f af4a 	beq.w	8014614 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014780:	2300      	movs	r3, #0
}
 8014782:	4618      	mov	r0, r3
 8014784:	3770      	adds	r7, #112	; 0x70
 8014786:	46bd      	mov	sp, r7
 8014788:	bd80      	pop	{r7, pc}
	...

0801478c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 801478c:	b480      	push	{r7}
 801478e:	b087      	sub	sp, #28
 8014790:	af00      	add	r7, sp, #0
 8014792:	6078      	str	r0, [r7, #4]
 8014794:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8014796:	683b      	ldr	r3, [r7, #0]
 8014798:	681a      	ldr	r2, [r3, #0]
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147a0:	683a      	ldr	r2, [r7, #0]
 80147a2:	6812      	ldr	r2, [r2, #0]
 80147a4:	f023 0101 	bic.w	r1, r3, #1
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80147ae:	683b      	ldr	r3, [r7, #0]
 80147b0:	689b      	ldr	r3, [r3, #8]
 80147b2:	2b08      	cmp	r3, #8
 80147b4:	d102      	bne.n	80147bc <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80147b6:	2340      	movs	r3, #64	; 0x40
 80147b8:	617b      	str	r3, [r7, #20]
 80147ba:	e001      	b.n	80147c0 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80147bc:	2300      	movs	r3, #0
 80147be:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80147c0:	683b      	ldr	r3, [r7, #0]
 80147c2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80147c4:	697b      	ldr	r3, [r7, #20]
 80147c6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80147c8:	683b      	ldr	r3, [r7, #0]
 80147ca:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80147cc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80147ce:	683b      	ldr	r3, [r7, #0]
 80147d0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80147d2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80147d4:	683b      	ldr	r3, [r7, #0]
 80147d6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80147d8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80147da:	683b      	ldr	r3, [r7, #0]
 80147dc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80147de:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80147e0:	683b      	ldr	r3, [r7, #0]
 80147e2:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80147e4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80147e6:	683b      	ldr	r3, [r7, #0]
 80147e8:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80147ea:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80147ec:	683b      	ldr	r3, [r7, #0]
 80147ee:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80147f0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80147f6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80147f8:	683b      	ldr	r3, [r7, #0]
 80147fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80147fc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80147fe:	683b      	ldr	r3, [r7, #0]
 8014800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8014802:	4313      	orrs	r3, r2
 8014804:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8014806:	683b      	ldr	r3, [r7, #0]
 8014808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801480a:	693a      	ldr	r2, [r7, #16]
 801480c:	4313      	orrs	r3, r2
 801480e:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8014810:	683b      	ldr	r3, [r7, #0]
 8014812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014814:	693a      	ldr	r2, [r7, #16]
 8014816:	4313      	orrs	r3, r2
 8014818:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801481e:	693a      	ldr	r2, [r7, #16]
 8014820:	4313      	orrs	r3, r2
 8014822:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8014824:	4b20      	ldr	r3, [pc, #128]	; (80148a8 <FMC_NORSRAM_Init+0x11c>)
 8014826:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801482e:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014836:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 801483e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8014840:	683b      	ldr	r3, [r7, #0]
 8014842:	681a      	ldr	r2, [r3, #0]
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801484a:	68fb      	ldr	r3, [r7, #12]
 801484c:	43db      	mvns	r3, r3
 801484e:	ea02 0103 	and.w	r1, r2, r3
 8014852:	683b      	ldr	r3, [r7, #0]
 8014854:	681a      	ldr	r2, [r3, #0]
 8014856:	693b      	ldr	r3, [r7, #16]
 8014858:	4319      	orrs	r1, r3
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8014860:	683b      	ldr	r3, [r7, #0]
 8014862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014864:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014868:	d10c      	bne.n	8014884 <FMC_NORSRAM_Init+0xf8>
 801486a:	683b      	ldr	r3, [r7, #0]
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d008      	beq.n	8014884 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801487a:	683b      	ldr	r3, [r7, #0]
 801487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801487e:	431a      	orrs	r2, r3
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d006      	beq.n	801489a <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	681a      	ldr	r2, [r3, #0]
 8014890:	683b      	ldr	r3, [r7, #0]
 8014892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014894:	431a      	orrs	r2, r3
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 801489a:	2300      	movs	r3, #0
}
 801489c:	4618      	mov	r0, r3
 801489e:	371c      	adds	r7, #28
 80148a0:	46bd      	mov	sp, r7
 80148a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a6:	4770      	bx	lr
 80148a8:	0008fb7f 	.word	0x0008fb7f

080148ac <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80148ac:	b480      	push	{r7}
 80148ae:	b087      	sub	sp, #28
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	60f8      	str	r0, [r7, #12]
 80148b4:	60b9      	str	r1, [r7, #8]
 80148b6:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	1c5a      	adds	r2, r3, #1
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148c2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80148c6:	68bb      	ldr	r3, [r7, #8]
 80148c8:	681a      	ldr	r2, [r3, #0]
 80148ca:	68bb      	ldr	r3, [r7, #8]
 80148cc:	685b      	ldr	r3, [r3, #4]
 80148ce:	011b      	lsls	r3, r3, #4
 80148d0:	431a      	orrs	r2, r3
 80148d2:	68bb      	ldr	r3, [r7, #8]
 80148d4:	689b      	ldr	r3, [r3, #8]
 80148d6:	021b      	lsls	r3, r3, #8
 80148d8:	431a      	orrs	r2, r3
 80148da:	68bb      	ldr	r3, [r7, #8]
 80148dc:	691b      	ldr	r3, [r3, #16]
 80148de:	041b      	lsls	r3, r3, #16
 80148e0:	431a      	orrs	r2, r3
 80148e2:	68bb      	ldr	r3, [r7, #8]
 80148e4:	695b      	ldr	r3, [r3, #20]
 80148e6:	3b01      	subs	r3, #1
 80148e8:	051b      	lsls	r3, r3, #20
 80148ea:	431a      	orrs	r2, r3
 80148ec:	68bb      	ldr	r3, [r7, #8]
 80148ee:	699b      	ldr	r3, [r3, #24]
 80148f0:	3b02      	subs	r3, #2
 80148f2:	061b      	lsls	r3, r3, #24
 80148f4:	431a      	orrs	r2, r3
 80148f6:	68bb      	ldr	r3, [r7, #8]
 80148f8:	69db      	ldr	r3, [r3, #28]
 80148fa:	4313      	orrs	r3, r2
 80148fc:	687a      	ldr	r2, [r7, #4]
 80148fe:	3201      	adds	r2, #1
 8014900:	4319      	orrs	r1, r3
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014910:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014914:	d113      	bne.n	801493e <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	685b      	ldr	r3, [r3, #4]
 801491a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801491e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8014920:	68bb      	ldr	r3, [r7, #8]
 8014922:	695b      	ldr	r3, [r3, #20]
 8014924:	3b01      	subs	r3, #1
 8014926:	051b      	lsls	r3, r3, #20
 8014928:	697a      	ldr	r2, [r7, #20]
 801492a:	4313      	orrs	r3, r2
 801492c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	685b      	ldr	r3, [r3, #4]
 8014932:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8014936:	697b      	ldr	r3, [r7, #20]
 8014938:	431a      	orrs	r2, r3
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 801493e:	2300      	movs	r3, #0
}
 8014940:	4618      	mov	r0, r3
 8014942:	371c      	adds	r7, #28
 8014944:	46bd      	mov	sp, r7
 8014946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801494a:	4770      	bx	lr

0801494c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 801494c:	b480      	push	{r7}
 801494e:	b085      	sub	sp, #20
 8014950:	af00      	add	r7, sp, #0
 8014952:	60f8      	str	r0, [r7, #12]
 8014954:	60b9      	str	r1, [r7, #8]
 8014956:	607a      	str	r2, [r7, #4]
 8014958:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 801495a:	683b      	ldr	r3, [r7, #0]
 801495c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8014960:	d11d      	bne.n	801499e <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	687a      	ldr	r2, [r7, #4]
 8014966:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801496a:	4b13      	ldr	r3, [pc, #76]	; (80149b8 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 801496c:	4013      	ands	r3, r2
 801496e:	68ba      	ldr	r2, [r7, #8]
 8014970:	6811      	ldr	r1, [r2, #0]
 8014972:	68ba      	ldr	r2, [r7, #8]
 8014974:	6852      	ldr	r2, [r2, #4]
 8014976:	0112      	lsls	r2, r2, #4
 8014978:	4311      	orrs	r1, r2
 801497a:	68ba      	ldr	r2, [r7, #8]
 801497c:	6892      	ldr	r2, [r2, #8]
 801497e:	0212      	lsls	r2, r2, #8
 8014980:	4311      	orrs	r1, r2
 8014982:	68ba      	ldr	r2, [r7, #8]
 8014984:	69d2      	ldr	r2, [r2, #28]
 8014986:	4311      	orrs	r1, r2
 8014988:	68ba      	ldr	r2, [r7, #8]
 801498a:	6912      	ldr	r2, [r2, #16]
 801498c:	0412      	lsls	r2, r2, #16
 801498e:	430a      	orrs	r2, r1
 8014990:	ea43 0102 	orr.w	r1, r3, r2
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	687a      	ldr	r2, [r7, #4]
 8014998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801499c:	e005      	b.n	80149aa <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	687a      	ldr	r2, [r7, #4]
 80149a2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80149a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80149aa:	2300      	movs	r3, #0
}
 80149ac:	4618      	mov	r0, r3
 80149ae:	3714      	adds	r7, #20
 80149b0:	46bd      	mov	sp, r7
 80149b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b6:	4770      	bx	lr
 80149b8:	cff00000 	.word	0xcff00000

080149bc <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80149bc:	b084      	sub	sp, #16
 80149be:	b480      	push	{r7}
 80149c0:	b085      	sub	sp, #20
 80149c2:	af00      	add	r7, sp, #0
 80149c4:	6078      	str	r0, [r7, #4]
 80149c6:	f107 001c 	add.w	r0, r7, #28
 80149ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80149ce:	2300      	movs	r3, #0
 80149d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 80149d2:	6a3b      	ldr	r3, [r7, #32]
 80149d4:	68fa      	ldr	r2, [r7, #12]
 80149d6:	4313      	orrs	r3, r2
 80149d8:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 80149da:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80149dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 80149de:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80149e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80149e2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80149e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80149e6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80149e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80149ea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80149ec:	68fa      	ldr	r2, [r7, #12]
 80149ee:	4313      	orrs	r3, r2
 80149f0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	685b      	ldr	r3, [r3, #4]
 80149f6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80149fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80149fe:	68fa      	ldr	r2, [r7, #12]
 8014a00:	431a      	orrs	r2, r3
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8014a06:	2300      	movs	r3, #0
}
 8014a08:	4618      	mov	r0, r3
 8014a0a:	3714      	adds	r7, #20
 8014a0c:	46bd      	mov	sp, r7
 8014a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a12:	b004      	add	sp, #16
 8014a14:	4770      	bx	lr

08014a16 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8014a16:	b480      	push	{r7}
 8014a18:	b083      	sub	sp, #12
 8014a1a:	af00      	add	r7, sp, #0
 8014a1c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8014a24:	4618      	mov	r0, r3
 8014a26:	370c      	adds	r7, #12
 8014a28:	46bd      	mov	sp, r7
 8014a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a2e:	4770      	bx	lr

08014a30 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b082      	sub	sp, #8
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	2203      	movs	r2, #3
 8014a3c:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8014a3e:	2002      	movs	r0, #2
 8014a40:	f7f6 f9b8 	bl	800adb4 <HAL_Delay>

  return HAL_OK;
 8014a44:	2300      	movs	r3, #0
}
 8014a46:	4618      	mov	r0, r3
 8014a48:	3708      	adds	r7, #8
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	bd80      	pop	{r7, pc}

08014a4e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8014a4e:	b480      	push	{r7}
 8014a50:	b083      	sub	sp, #12
 8014a52:	af00      	add	r7, sp, #0
 8014a54:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	f003 0303 	and.w	r3, r3, #3
}
 8014a5e:	4618      	mov	r0, r3
 8014a60:	370c      	adds	r7, #12
 8014a62:	46bd      	mov	sp, r7
 8014a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a68:	4770      	bx	lr

08014a6a <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8014a6a:	b480      	push	{r7}
 8014a6c:	b085      	sub	sp, #20
 8014a6e:	af00      	add	r7, sp, #0
 8014a70:	6078      	str	r0, [r7, #4]
 8014a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8014a74:	2300      	movs	r3, #0
 8014a76:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8014a78:	683b      	ldr	r3, [r7, #0]
 8014a7a:	681a      	ldr	r2, [r3, #0]
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8014a80:	683b      	ldr	r3, [r7, #0]
 8014a82:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8014a84:	683b      	ldr	r3, [r7, #0]
 8014a86:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8014a88:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8014a8a:	683b      	ldr	r3, [r7, #0]
 8014a8c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8014a8e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8014a90:	683b      	ldr	r3, [r7, #0]
 8014a92:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8014a94:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8014a96:	68fa      	ldr	r2, [r7, #12]
 8014a98:	4313      	orrs	r3, r2
 8014a9a:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	68db      	ldr	r3, [r3, #12]
 8014aa0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014aa4:	f023 030f 	bic.w	r3, r3, #15
 8014aa8:	68fa      	ldr	r2, [r7, #12]
 8014aaa:	431a      	orrs	r2, r3
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8014ab0:	2300      	movs	r3, #0
}
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	3714      	adds	r7, #20
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014abc:	4770      	bx	lr

08014abe <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8014abe:	b480      	push	{r7}
 8014ac0:	b083      	sub	sp, #12
 8014ac2:	af00      	add	r7, sp, #0
 8014ac4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	691b      	ldr	r3, [r3, #16]
 8014aca:	b2db      	uxtb	r3, r3
}
 8014acc:	4618      	mov	r0, r3
 8014ace:	370c      	adds	r7, #12
 8014ad0:	46bd      	mov	sp, r7
 8014ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad6:	4770      	bx	lr

08014ad8 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8014ad8:	b480      	push	{r7}
 8014ada:	b085      	sub	sp, #20
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
 8014ae0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	3314      	adds	r3, #20
 8014ae6:	461a      	mov	r2, r3
 8014ae8:	683b      	ldr	r3, [r7, #0]
 8014aea:	4413      	add	r3, r2
 8014aec:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	681b      	ldr	r3, [r3, #0]
}
 8014af2:	4618      	mov	r0, r3
 8014af4:	3714      	adds	r7, #20
 8014af6:	46bd      	mov	sp, r7
 8014af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014afc:	4770      	bx	lr

08014afe <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8014afe:	b480      	push	{r7}
 8014b00:	b085      	sub	sp, #20
 8014b02:	af00      	add	r7, sp, #0
 8014b04:	6078      	str	r0, [r7, #4]
 8014b06:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8014b08:	2300      	movs	r3, #0
 8014b0a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	681a      	ldr	r2, [r3, #0]
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8014b14:	683b      	ldr	r3, [r7, #0]
 8014b16:	685a      	ldr	r2, [r3, #4]
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8014b1c:	683b      	ldr	r3, [r7, #0]
 8014b1e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8014b20:	683b      	ldr	r3, [r7, #0]
 8014b22:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8014b24:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8014b26:	683b      	ldr	r3, [r7, #0]
 8014b28:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8014b2a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8014b2c:	683b      	ldr	r3, [r7, #0]
 8014b2e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8014b30:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8014b32:	68fa      	ldr	r2, [r7, #12]
 8014b34:	4313      	orrs	r3, r2
 8014b36:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b3c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	431a      	orrs	r2, r3
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8014b48:	2300      	movs	r3, #0

}
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	3714      	adds	r7, #20
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b54:	4770      	bx	lr

08014b56 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8014b56:	b580      	push	{r7, lr}
 8014b58:	b088      	sub	sp, #32
 8014b5a:	af00      	add	r7, sp, #0
 8014b5c:	6078      	str	r0, [r7, #4]
 8014b5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8014b60:	683b      	ldr	r3, [r7, #0]
 8014b62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8014b64:	2310      	movs	r3, #16
 8014b66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014b68:	2340      	movs	r3, #64	; 0x40
 8014b6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014b74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014b76:	f107 0308 	add.w	r3, r7, #8
 8014b7a:	4619      	mov	r1, r3
 8014b7c:	6878      	ldr	r0, [r7, #4]
 8014b7e:	f7ff ff74 	bl	8014a6a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8014b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8014b86:	2110      	movs	r1, #16
 8014b88:	6878      	ldr	r0, [r7, #4]
 8014b8a:	f000 f94d 	bl	8014e28 <SDMMC_GetCmdResp1>
 8014b8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014b90:	69fb      	ldr	r3, [r7, #28]
}
 8014b92:	4618      	mov	r0, r3
 8014b94:	3720      	adds	r7, #32
 8014b96:	46bd      	mov	sp, r7
 8014b98:	bd80      	pop	{r7, pc}

08014b9a <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8014b9a:	b580      	push	{r7, lr}
 8014b9c:	b08a      	sub	sp, #40	; 0x28
 8014b9e:	af00      	add	r7, sp, #0
 8014ba0:	60f8      	str	r0, [r7, #12]
 8014ba2:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8014ba6:	683b      	ldr	r3, [r7, #0]
 8014ba8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8014baa:	2307      	movs	r3, #7
 8014bac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014bae:	2340      	movs	r3, #64	; 0x40
 8014bb0:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014bba:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014bbc:	f107 0310 	add.w	r3, r7, #16
 8014bc0:	4619      	mov	r1, r3
 8014bc2:	68f8      	ldr	r0, [r7, #12]
 8014bc4:	f7ff ff51 	bl	8014a6a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8014bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8014bcc:	2107      	movs	r1, #7
 8014bce:	68f8      	ldr	r0, [r7, #12]
 8014bd0:	f000 f92a 	bl	8014e28 <SDMMC_GetCmdResp1>
 8014bd4:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8014bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014bd8:	4618      	mov	r0, r3
 8014bda:	3728      	adds	r7, #40	; 0x28
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	bd80      	pop	{r7, pc}

08014be0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b088      	sub	sp, #32
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8014be8:	2300      	movs	r3, #0
 8014bea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8014bec:	2300      	movs	r3, #0
 8014bee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014bfc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014bfe:	f107 0308 	add.w	r3, r7, #8
 8014c02:	4619      	mov	r1, r3
 8014c04:	6878      	ldr	r0, [r7, #4]
 8014c06:	f7ff ff30 	bl	8014a6a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8014c0a:	6878      	ldr	r0, [r7, #4]
 8014c0c:	f000 fb44 	bl	8015298 <SDMMC_GetCmdError>
 8014c10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014c12:	69fb      	ldr	r3, [r7, #28]
}
 8014c14:	4618      	mov	r0, r3
 8014c16:	3720      	adds	r7, #32
 8014c18:	46bd      	mov	sp, r7
 8014c1a:	bd80      	pop	{r7, pc}

08014c1c <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b088      	sub	sp, #32
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8014c24:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8014c28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8014c2a:	2308      	movs	r3, #8
 8014c2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014c2e:	2340      	movs	r3, #64	; 0x40
 8014c30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014c32:	2300      	movs	r3, #0
 8014c34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014c3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014c3c:	f107 0308 	add.w	r3, r7, #8
 8014c40:	4619      	mov	r1, r3
 8014c42:	6878      	ldr	r0, [r7, #4]
 8014c44:	f7ff ff11 	bl	8014a6a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8014c48:	6878      	ldr	r0, [r7, #4]
 8014c4a:	f000 fad7 	bl	80151fc <SDMMC_GetCmdResp7>
 8014c4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014c50:	69fb      	ldr	r3, [r7, #28]
}
 8014c52:	4618      	mov	r0, r3
 8014c54:	3720      	adds	r7, #32
 8014c56:	46bd      	mov	sp, r7
 8014c58:	bd80      	pop	{r7, pc}

08014c5a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8014c5a:	b580      	push	{r7, lr}
 8014c5c:	b088      	sub	sp, #32
 8014c5e:	af00      	add	r7, sp, #0
 8014c60:	6078      	str	r0, [r7, #4]
 8014c62:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8014c64:	683b      	ldr	r3, [r7, #0]
 8014c66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8014c68:	2337      	movs	r3, #55	; 0x37
 8014c6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014c6c:	2340      	movs	r3, #64	; 0x40
 8014c6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014c70:	2300      	movs	r3, #0
 8014c72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014c78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014c7a:	f107 0308 	add.w	r3, r7, #8
 8014c7e:	4619      	mov	r1, r3
 8014c80:	6878      	ldr	r0, [r7, #4]
 8014c82:	f7ff fef2 	bl	8014a6a <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8014c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8014c8a:	2137      	movs	r1, #55	; 0x37
 8014c8c:	6878      	ldr	r0, [r7, #4]
 8014c8e:	f000 f8cb 	bl	8014e28 <SDMMC_GetCmdResp1>
 8014c92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014c94:	69fb      	ldr	r3, [r7, #28]
}
 8014c96:	4618      	mov	r0, r3
 8014c98:	3720      	adds	r7, #32
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	bd80      	pop	{r7, pc}

08014c9e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8014c9e:	b580      	push	{r7, lr}
 8014ca0:	b088      	sub	sp, #32
 8014ca2:	af00      	add	r7, sp, #0
 8014ca4:	6078      	str	r0, [r7, #4]
 8014ca6:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8014ca8:	683b      	ldr	r3, [r7, #0]
 8014caa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8014cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014cb2:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8014cb4:	2329      	movs	r3, #41	; 0x29
 8014cb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014cb8:	2340      	movs	r3, #64	; 0x40
 8014cba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014cc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014cc6:	f107 0308 	add.w	r3, r7, #8
 8014cca:	4619      	mov	r1, r3
 8014ccc:	6878      	ldr	r0, [r7, #4]
 8014cce:	f7ff fecc 	bl	8014a6a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8014cd2:	6878      	ldr	r0, [r7, #4]
 8014cd4:	f000 f9de 	bl	8015094 <SDMMC_GetCmdResp3>
 8014cd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014cda:	69fb      	ldr	r3, [r7, #28]
}
 8014cdc:	4618      	mov	r0, r3
 8014cde:	3720      	adds	r7, #32
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	bd80      	pop	{r7, pc}

08014ce4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b088      	sub	sp, #32
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	6078      	str	r0, [r7, #4]
 8014cec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8014cee:	683b      	ldr	r3, [r7, #0]
 8014cf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8014cf2:	2306      	movs	r3, #6
 8014cf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014cf6:	2340      	movs	r3, #64	; 0x40
 8014cf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014d02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014d04:	f107 0308 	add.w	r3, r7, #8
 8014d08:	4619      	mov	r1, r3
 8014d0a:	6878      	ldr	r0, [r7, #4]
 8014d0c:	f7ff fead 	bl	8014a6a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8014d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8014d14:	2106      	movs	r1, #6
 8014d16:	6878      	ldr	r0, [r7, #4]
 8014d18:	f000 f886 	bl	8014e28 <SDMMC_GetCmdResp1>
 8014d1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014d1e:	69fb      	ldr	r3, [r7, #28]
}
 8014d20:	4618      	mov	r0, r3
 8014d22:	3720      	adds	r7, #32
 8014d24:	46bd      	mov	sp, r7
 8014d26:	bd80      	pop	{r7, pc}

08014d28 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8014d28:	b580      	push	{r7, lr}
 8014d2a:	b088      	sub	sp, #32
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8014d30:	2300      	movs	r3, #0
 8014d32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8014d34:	2333      	movs	r3, #51	; 0x33
 8014d36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014d38:	2340      	movs	r3, #64	; 0x40
 8014d3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014d44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014d46:	f107 0308 	add.w	r3, r7, #8
 8014d4a:	4619      	mov	r1, r3
 8014d4c:	6878      	ldr	r0, [r7, #4]
 8014d4e:	f7ff fe8c 	bl	8014a6a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8014d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8014d56:	2133      	movs	r1, #51	; 0x33
 8014d58:	6878      	ldr	r0, [r7, #4]
 8014d5a:	f000 f865 	bl	8014e28 <SDMMC_GetCmdResp1>
 8014d5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014d60:	69fb      	ldr	r3, [r7, #28]
}
 8014d62:	4618      	mov	r0, r3
 8014d64:	3720      	adds	r7, #32
 8014d66:	46bd      	mov	sp, r7
 8014d68:	bd80      	pop	{r7, pc}

08014d6a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8014d6a:	b580      	push	{r7, lr}
 8014d6c:	b088      	sub	sp, #32
 8014d6e:	af00      	add	r7, sp, #0
 8014d70:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8014d72:	2300      	movs	r3, #0
 8014d74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8014d76:	2302      	movs	r3, #2
 8014d78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8014d7a:	23c0      	movs	r3, #192	; 0xc0
 8014d7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014d7e:	2300      	movs	r3, #0
 8014d80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014d86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014d88:	f107 0308 	add.w	r3, r7, #8
 8014d8c:	4619      	mov	r1, r3
 8014d8e:	6878      	ldr	r0, [r7, #4]
 8014d90:	f7ff fe6b 	bl	8014a6a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8014d94:	6878      	ldr	r0, [r7, #4]
 8014d96:	f000 f935 	bl	8015004 <SDMMC_GetCmdResp2>
 8014d9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014d9c:	69fb      	ldr	r3, [r7, #28]
}
 8014d9e:	4618      	mov	r0, r3
 8014da0:	3720      	adds	r7, #32
 8014da2:	46bd      	mov	sp, r7
 8014da4:	bd80      	pop	{r7, pc}

08014da6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8014da6:	b580      	push	{r7, lr}
 8014da8:	b088      	sub	sp, #32
 8014daa:	af00      	add	r7, sp, #0
 8014dac:	6078      	str	r0, [r7, #4]
 8014dae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8014db0:	683b      	ldr	r3, [r7, #0]
 8014db2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8014db4:	2309      	movs	r3, #9
 8014db6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8014db8:	23c0      	movs	r3, #192	; 0xc0
 8014dba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014dc4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014dc6:	f107 0308 	add.w	r3, r7, #8
 8014dca:	4619      	mov	r1, r3
 8014dcc:	6878      	ldr	r0, [r7, #4]
 8014dce:	f7ff fe4c 	bl	8014a6a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8014dd2:	6878      	ldr	r0, [r7, #4]
 8014dd4:	f000 f916 	bl	8015004 <SDMMC_GetCmdResp2>
 8014dd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014dda:	69fb      	ldr	r3, [r7, #28]
}
 8014ddc:	4618      	mov	r0, r3
 8014dde:	3720      	adds	r7, #32
 8014de0:	46bd      	mov	sp, r7
 8014de2:	bd80      	pop	{r7, pc}

08014de4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b088      	sub	sp, #32
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
 8014dec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8014dee:	2300      	movs	r3, #0
 8014df0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8014df2:	2303      	movs	r3, #3
 8014df4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8014df6:	2340      	movs	r3, #64	; 0x40
 8014df8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8014dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014e02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8014e04:	f107 0308 	add.w	r3, r7, #8
 8014e08:	4619      	mov	r1, r3
 8014e0a:	6878      	ldr	r0, [r7, #4]
 8014e0c:	f7ff fe2d 	bl	8014a6a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8014e10:	683a      	ldr	r2, [r7, #0]
 8014e12:	2103      	movs	r1, #3
 8014e14:	6878      	ldr	r0, [r7, #4]
 8014e16:	f000 f97b 	bl	8015110 <SDMMC_GetCmdResp6>
 8014e1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8014e1c:	69fb      	ldr	r3, [r7, #28]
}
 8014e1e:	4618      	mov	r0, r3
 8014e20:	3720      	adds	r7, #32
 8014e22:	46bd      	mov	sp, r7
 8014e24:	bd80      	pop	{r7, pc}
	...

08014e28 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b088      	sub	sp, #32
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	60f8      	str	r0, [r7, #12]
 8014e30:	460b      	mov	r3, r1
 8014e32:	607a      	str	r2, [r7, #4]
 8014e34:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8014e36:	4b70      	ldr	r3, [pc, #448]	; (8014ff8 <SDMMC_GetCmdResp1+0x1d0>)
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	4a70      	ldr	r2, [pc, #448]	; (8014ffc <SDMMC_GetCmdResp1+0x1d4>)
 8014e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8014e40:	0a5a      	lsrs	r2, r3, #9
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	fb02 f303 	mul.w	r3, r2, r3
 8014e48:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8014e4a:	69fb      	ldr	r3, [r7, #28]
 8014e4c:	1e5a      	subs	r2, r3, #1
 8014e4e:	61fa      	str	r2, [r7, #28]
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	d102      	bne.n	8014e5a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8014e54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8014e58:	e0c9      	b.n	8014fee <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e5e:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014e60:	69bb      	ldr	r3, [r7, #24]
 8014e62:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d0ef      	beq.n	8014e4a <SDMMC_GetCmdResp1+0x22>
 8014e6a:	69bb      	ldr	r3, [r7, #24]
 8014e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d1ea      	bne.n	8014e4a <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e78:	f003 0304 	and.w	r3, r3, #4
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d004      	beq.n	8014e8a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	2204      	movs	r2, #4
 8014e84:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8014e86:	2304      	movs	r3, #4
 8014e88:	e0b1      	b.n	8014fee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e8e:	f003 0301 	and.w	r3, r3, #1
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d004      	beq.n	8014ea0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	2201      	movs	r2, #1
 8014e9a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014e9c:	2301      	movs	r3, #1
 8014e9e:	e0a6      	b.n	8014fee <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	22c5      	movs	r2, #197	; 0xc5
 8014ea4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8014ea6:	68f8      	ldr	r0, [r7, #12]
 8014ea8:	f7ff fe09 	bl	8014abe <SDMMC_GetCommandResponse>
 8014eac:	4603      	mov	r3, r0
 8014eae:	461a      	mov	r2, r3
 8014eb0:	7afb      	ldrb	r3, [r7, #11]
 8014eb2:	4293      	cmp	r3, r2
 8014eb4:	d001      	beq.n	8014eba <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8014eb6:	2301      	movs	r3, #1
 8014eb8:	e099      	b.n	8014fee <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8014eba:	2100      	movs	r1, #0
 8014ebc:	68f8      	ldr	r0, [r7, #12]
 8014ebe:	f7ff fe0b 	bl	8014ad8 <SDMMC_GetResponse>
 8014ec2:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8014ec4:	697a      	ldr	r2, [r7, #20]
 8014ec6:	4b4e      	ldr	r3, [pc, #312]	; (8015000 <SDMMC_GetCmdResp1+0x1d8>)
 8014ec8:	4013      	ands	r3, r2
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d101      	bne.n	8014ed2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8014ece:	2300      	movs	r3, #0
 8014ed0:	e08d      	b.n	8014fee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8014ed2:	697b      	ldr	r3, [r7, #20]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	da02      	bge.n	8014ede <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8014ed8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8014edc:	e087      	b.n	8014fee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8014ede:	697b      	ldr	r3, [r7, #20]
 8014ee0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d001      	beq.n	8014eec <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8014ee8:	2340      	movs	r3, #64	; 0x40
 8014eea:	e080      	b.n	8014fee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8014eec:	697b      	ldr	r3, [r7, #20]
 8014eee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d001      	beq.n	8014efa <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8014ef6:	2380      	movs	r3, #128	; 0x80
 8014ef8:	e079      	b.n	8014fee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8014efa:	697b      	ldr	r3, [r7, #20]
 8014efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d002      	beq.n	8014f0a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8014f04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014f08:	e071      	b.n	8014fee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8014f0a:	697b      	ldr	r3, [r7, #20]
 8014f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d002      	beq.n	8014f1a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8014f14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014f18:	e069      	b.n	8014fee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8014f1a:	697b      	ldr	r3, [r7, #20]
 8014f1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d002      	beq.n	8014f2a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8014f24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014f28:	e061      	b.n	8014fee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8014f2a:	697b      	ldr	r3, [r7, #20]
 8014f2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d002      	beq.n	8014f3a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8014f34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014f38:	e059      	b.n	8014fee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8014f3a:	697b      	ldr	r3, [r7, #20]
 8014f3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d002      	beq.n	8014f4a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8014f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014f48:	e051      	b.n	8014fee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8014f4a:	697b      	ldr	r3, [r7, #20]
 8014f4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d002      	beq.n	8014f5a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8014f54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8014f58:	e049      	b.n	8014fee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8014f5a:	697b      	ldr	r3, [r7, #20]
 8014f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d002      	beq.n	8014f6a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8014f64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014f68:	e041      	b.n	8014fee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8014f6a:	697b      	ldr	r3, [r7, #20]
 8014f6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d002      	beq.n	8014f7a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8014f74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014f78:	e039      	b.n	8014fee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8014f7a:	697b      	ldr	r3, [r7, #20]
 8014f7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d002      	beq.n	8014f8a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8014f84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8014f88:	e031      	b.n	8014fee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8014f8a:	697b      	ldr	r3, [r7, #20]
 8014f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d002      	beq.n	8014f9a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8014f94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8014f98:	e029      	b.n	8014fee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8014f9a:	697b      	ldr	r3, [r7, #20]
 8014f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d002      	beq.n	8014faa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8014fa4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014fa8:	e021      	b.n	8014fee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8014faa:	697b      	ldr	r3, [r7, #20]
 8014fac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d002      	beq.n	8014fba <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8014fb4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8014fb8:	e019      	b.n	8014fee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8014fba:	697b      	ldr	r3, [r7, #20]
 8014fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d002      	beq.n	8014fca <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8014fc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8014fc8:	e011      	b.n	8014fee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8014fca:	697b      	ldr	r3, [r7, #20]
 8014fcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d002      	beq.n	8014fda <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8014fd4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8014fd8:	e009      	b.n	8014fee <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8014fda:	697b      	ldr	r3, [r7, #20]
 8014fdc:	f003 0308 	and.w	r3, r3, #8
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d002      	beq.n	8014fea <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8014fe4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8014fe8:	e001      	b.n	8014fee <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8014fea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8014fee:	4618      	mov	r0, r3
 8014ff0:	3720      	adds	r7, #32
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	bd80      	pop	{r7, pc}
 8014ff6:	bf00      	nop
 8014ff8:	20000194 	.word	0x20000194
 8014ffc:	10624dd3 	.word	0x10624dd3
 8015000:	fdffe008 	.word	0xfdffe008

08015004 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8015004:	b480      	push	{r7}
 8015006:	b085      	sub	sp, #20
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801500c:	4b1f      	ldr	r3, [pc, #124]	; (801508c <SDMMC_GetCmdResp2+0x88>)
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	4a1f      	ldr	r2, [pc, #124]	; (8015090 <SDMMC_GetCmdResp2+0x8c>)
 8015012:	fba2 2303 	umull	r2, r3, r2, r3
 8015016:	0a5b      	lsrs	r3, r3, #9
 8015018:	f241 3288 	movw	r2, #5000	; 0x1388
 801501c:	fb02 f303 	mul.w	r3, r2, r3
 8015020:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	1e5a      	subs	r2, r3, #1
 8015026:	60fa      	str	r2, [r7, #12]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d102      	bne.n	8015032 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801502c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015030:	e026      	b.n	8015080 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015036:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8015038:	68bb      	ldr	r3, [r7, #8]
 801503a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801503e:	2b00      	cmp	r3, #0
 8015040:	d0ef      	beq.n	8015022 <SDMMC_GetCmdResp2+0x1e>
 8015042:	68bb      	ldr	r3, [r7, #8]
 8015044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8015048:	2b00      	cmp	r3, #0
 801504a:	d1ea      	bne.n	8015022 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015050:	f003 0304 	and.w	r3, r3, #4
 8015054:	2b00      	cmp	r3, #0
 8015056:	d004      	beq.n	8015062 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	2204      	movs	r2, #4
 801505c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801505e:	2304      	movs	r3, #4
 8015060:	e00e      	b.n	8015080 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015066:	f003 0301 	and.w	r3, r3, #1
 801506a:	2b00      	cmp	r3, #0
 801506c:	d004      	beq.n	8015078 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	2201      	movs	r2, #1
 8015072:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015074:	2301      	movs	r3, #1
 8015076:	e003      	b.n	8015080 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	22c5      	movs	r2, #197	; 0xc5
 801507c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801507e:	2300      	movs	r3, #0
}
 8015080:	4618      	mov	r0, r3
 8015082:	3714      	adds	r7, #20
 8015084:	46bd      	mov	sp, r7
 8015086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508a:	4770      	bx	lr
 801508c:	20000194 	.word	0x20000194
 8015090:	10624dd3 	.word	0x10624dd3

08015094 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8015094:	b480      	push	{r7}
 8015096:	b085      	sub	sp, #20
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801509c:	4b1a      	ldr	r3, [pc, #104]	; (8015108 <SDMMC_GetCmdResp3+0x74>)
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	4a1a      	ldr	r2, [pc, #104]	; (801510c <SDMMC_GetCmdResp3+0x78>)
 80150a2:	fba2 2303 	umull	r2, r3, r2, r3
 80150a6:	0a5b      	lsrs	r3, r3, #9
 80150a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80150ac:	fb02 f303 	mul.w	r3, r2, r3
 80150b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	1e5a      	subs	r2, r3, #1
 80150b6:	60fa      	str	r2, [r7, #12]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d102      	bne.n	80150c2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80150bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80150c0:	e01b      	b.n	80150fa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150c6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80150c8:	68bb      	ldr	r3, [r7, #8]
 80150ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d0ef      	beq.n	80150b2 <SDMMC_GetCmdResp3+0x1e>
 80150d2:	68bb      	ldr	r3, [r7, #8]
 80150d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d1ea      	bne.n	80150b2 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150e0:	f003 0304 	and.w	r3, r3, #4
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d004      	beq.n	80150f2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	2204      	movs	r2, #4
 80150ec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80150ee:	2304      	movs	r3, #4
 80150f0:	e003      	b.n	80150fa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	22c5      	movs	r2, #197	; 0xc5
 80150f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80150f8:	2300      	movs	r3, #0
}
 80150fa:	4618      	mov	r0, r3
 80150fc:	3714      	adds	r7, #20
 80150fe:	46bd      	mov	sp, r7
 8015100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015104:	4770      	bx	lr
 8015106:	bf00      	nop
 8015108:	20000194 	.word	0x20000194
 801510c:	10624dd3 	.word	0x10624dd3

08015110 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b088      	sub	sp, #32
 8015114:	af00      	add	r7, sp, #0
 8015116:	60f8      	str	r0, [r7, #12]
 8015118:	460b      	mov	r3, r1
 801511a:	607a      	str	r2, [r7, #4]
 801511c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801511e:	4b35      	ldr	r3, [pc, #212]	; (80151f4 <SDMMC_GetCmdResp6+0xe4>)
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	4a35      	ldr	r2, [pc, #212]	; (80151f8 <SDMMC_GetCmdResp6+0xe8>)
 8015124:	fba2 2303 	umull	r2, r3, r2, r3
 8015128:	0a5b      	lsrs	r3, r3, #9
 801512a:	f241 3288 	movw	r2, #5000	; 0x1388
 801512e:	fb02 f303 	mul.w	r3, r2, r3
 8015132:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8015134:	69fb      	ldr	r3, [r7, #28]
 8015136:	1e5a      	subs	r2, r3, #1
 8015138:	61fa      	str	r2, [r7, #28]
 801513a:	2b00      	cmp	r3, #0
 801513c:	d102      	bne.n	8015144 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801513e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015142:	e052      	b.n	80151ea <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015148:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801514a:	69bb      	ldr	r3, [r7, #24]
 801514c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8015150:	2b00      	cmp	r3, #0
 8015152:	d0ef      	beq.n	8015134 <SDMMC_GetCmdResp6+0x24>
 8015154:	69bb      	ldr	r3, [r7, #24]
 8015156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801515a:	2b00      	cmp	r3, #0
 801515c:	d1ea      	bne.n	8015134 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015162:	f003 0304 	and.w	r3, r3, #4
 8015166:	2b00      	cmp	r3, #0
 8015168:	d004      	beq.n	8015174 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	2204      	movs	r2, #4
 801516e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8015170:	2304      	movs	r3, #4
 8015172:	e03a      	b.n	80151ea <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015178:	f003 0301 	and.w	r3, r3, #1
 801517c:	2b00      	cmp	r3, #0
 801517e:	d004      	beq.n	801518a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	2201      	movs	r2, #1
 8015184:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015186:	2301      	movs	r3, #1
 8015188:	e02f      	b.n	80151ea <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801518a:	68f8      	ldr	r0, [r7, #12]
 801518c:	f7ff fc97 	bl	8014abe <SDMMC_GetCommandResponse>
 8015190:	4603      	mov	r3, r0
 8015192:	461a      	mov	r2, r3
 8015194:	7afb      	ldrb	r3, [r7, #11]
 8015196:	4293      	cmp	r3, r2
 8015198:	d001      	beq.n	801519e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801519a:	2301      	movs	r3, #1
 801519c:	e025      	b.n	80151ea <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	22c5      	movs	r2, #197	; 0xc5
 80151a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80151a4:	2100      	movs	r1, #0
 80151a6:	68f8      	ldr	r0, [r7, #12]
 80151a8:	f7ff fc96 	bl	8014ad8 <SDMMC_GetResponse>
 80151ac:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80151ae:	697b      	ldr	r3, [r7, #20]
 80151b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d106      	bne.n	80151c6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80151b8:	697b      	ldr	r3, [r7, #20]
 80151ba:	0c1b      	lsrs	r3, r3, #16
 80151bc:	b29a      	uxth	r2, r3
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80151c2:	2300      	movs	r3, #0
 80151c4:	e011      	b.n	80151ea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80151c6:	697b      	ldr	r3, [r7, #20]
 80151c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d002      	beq.n	80151d6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80151d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80151d4:	e009      	b.n	80151ea <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80151d6:	697b      	ldr	r3, [r7, #20]
 80151d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d002      	beq.n	80151e6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80151e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80151e4:	e001      	b.n	80151ea <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80151e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80151ea:	4618      	mov	r0, r3
 80151ec:	3720      	adds	r7, #32
 80151ee:	46bd      	mov	sp, r7
 80151f0:	bd80      	pop	{r7, pc}
 80151f2:	bf00      	nop
 80151f4:	20000194 	.word	0x20000194
 80151f8:	10624dd3 	.word	0x10624dd3

080151fc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80151fc:	b480      	push	{r7}
 80151fe:	b085      	sub	sp, #20
 8015200:	af00      	add	r7, sp, #0
 8015202:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8015204:	4b22      	ldr	r3, [pc, #136]	; (8015290 <SDMMC_GetCmdResp7+0x94>)
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	4a22      	ldr	r2, [pc, #136]	; (8015294 <SDMMC_GetCmdResp7+0x98>)
 801520a:	fba2 2303 	umull	r2, r3, r2, r3
 801520e:	0a5b      	lsrs	r3, r3, #9
 8015210:	f241 3288 	movw	r2, #5000	; 0x1388
 8015214:	fb02 f303 	mul.w	r3, r2, r3
 8015218:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	1e5a      	subs	r2, r3, #1
 801521e:	60fa      	str	r2, [r7, #12]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d102      	bne.n	801522a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8015224:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015228:	e02c      	b.n	8015284 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801522e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8015230:	68bb      	ldr	r3, [r7, #8]
 8015232:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8015236:	2b00      	cmp	r3, #0
 8015238:	d0ef      	beq.n	801521a <SDMMC_GetCmdResp7+0x1e>
 801523a:	68bb      	ldr	r3, [r7, #8]
 801523c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8015240:	2b00      	cmp	r3, #0
 8015242:	d1ea      	bne.n	801521a <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015248:	f003 0304 	and.w	r3, r3, #4
 801524c:	2b00      	cmp	r3, #0
 801524e:	d004      	beq.n	801525a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	2204      	movs	r2, #4
 8015254:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8015256:	2304      	movs	r3, #4
 8015258:	e014      	b.n	8015284 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801525e:	f003 0301 	and.w	r3, r3, #1
 8015262:	2b00      	cmp	r3, #0
 8015264:	d004      	beq.n	8015270 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	2201      	movs	r2, #1
 801526a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801526c:	2301      	movs	r3, #1
 801526e:	e009      	b.n	8015284 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015278:	2b00      	cmp	r3, #0
 801527a:	d002      	beq.n	8015282 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	2240      	movs	r2, #64	; 0x40
 8015280:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8015282:	2300      	movs	r3, #0

}
 8015284:	4618      	mov	r0, r3
 8015286:	3714      	adds	r7, #20
 8015288:	46bd      	mov	sp, r7
 801528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801528e:	4770      	bx	lr
 8015290:	20000194 	.word	0x20000194
 8015294:	10624dd3 	.word	0x10624dd3

08015298 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8015298:	b480      	push	{r7}
 801529a:	b085      	sub	sp, #20
 801529c:	af00      	add	r7, sp, #0
 801529e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80152a0:	4b11      	ldr	r3, [pc, #68]	; (80152e8 <SDMMC_GetCmdError+0x50>)
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	4a11      	ldr	r2, [pc, #68]	; (80152ec <SDMMC_GetCmdError+0x54>)
 80152a6:	fba2 2303 	umull	r2, r3, r2, r3
 80152aa:	0a5b      	lsrs	r3, r3, #9
 80152ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80152b0:	fb02 f303 	mul.w	r3, r2, r3
 80152b4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	1e5a      	subs	r2, r3, #1
 80152ba:	60fa      	str	r2, [r7, #12]
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d102      	bne.n	80152c6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80152c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80152c4:	e009      	b.n	80152da <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80152ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d0f1      	beq.n	80152b6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	22c5      	movs	r2, #197	; 0xc5
 80152d6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80152d8:	2300      	movs	r3, #0
}
 80152da:	4618      	mov	r0, r3
 80152dc:	3714      	adds	r7, #20
 80152de:	46bd      	mov	sp, r7
 80152e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e4:	4770      	bx	lr
 80152e6:	bf00      	nop
 80152e8:	20000194 	.word	0x20000194
 80152ec:	10624dd3 	.word	0x10624dd3

080152f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80152f0:	b084      	sub	sp, #16
 80152f2:	b580      	push	{r7, lr}
 80152f4:	b084      	sub	sp, #16
 80152f6:	af00      	add	r7, sp, #0
 80152f8:	6078      	str	r0, [r7, #4]
 80152fa:	f107 001c 	add.w	r0, r7, #28
 80152fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	68db      	ldr	r3, [r3, #12]
 8015306:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 801530e:	6878      	ldr	r0, [r7, #4]
 8015310:	f001 faf6 	bl	8016900 <USB_CoreReset>
 8015314:	4603      	mov	r3, r0
 8015316:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8015318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801531a:	2b00      	cmp	r3, #0
 801531c:	d106      	bne.n	801532c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015322:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	639a      	str	r2, [r3, #56]	; 0x38
 801532a:	e005      	b.n	8015338 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015330:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8015338:	7bfb      	ldrb	r3, [r7, #15]
}
 801533a:	4618      	mov	r0, r3
 801533c:	3710      	adds	r7, #16
 801533e:	46bd      	mov	sp, r7
 8015340:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015344:	b004      	add	sp, #16
 8015346:	4770      	bx	lr

08015348 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8015348:	b480      	push	{r7}
 801534a:	b087      	sub	sp, #28
 801534c:	af00      	add	r7, sp, #0
 801534e:	60f8      	str	r0, [r7, #12]
 8015350:	60b9      	str	r1, [r7, #8]
 8015352:	4613      	mov	r3, r2
 8015354:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8015356:	79fb      	ldrb	r3, [r7, #7]
 8015358:	2b02      	cmp	r3, #2
 801535a:	d165      	bne.n	8015428 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801535c:	68bb      	ldr	r3, [r7, #8]
 801535e:	4a3e      	ldr	r2, [pc, #248]	; (8015458 <USB_SetTurnaroundTime+0x110>)
 8015360:	4293      	cmp	r3, r2
 8015362:	d906      	bls.n	8015372 <USB_SetTurnaroundTime+0x2a>
 8015364:	68bb      	ldr	r3, [r7, #8]
 8015366:	4a3d      	ldr	r2, [pc, #244]	; (801545c <USB_SetTurnaroundTime+0x114>)
 8015368:	4293      	cmp	r3, r2
 801536a:	d202      	bcs.n	8015372 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801536c:	230f      	movs	r3, #15
 801536e:	617b      	str	r3, [r7, #20]
 8015370:	e05c      	b.n	801542c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8015372:	68bb      	ldr	r3, [r7, #8]
 8015374:	4a39      	ldr	r2, [pc, #228]	; (801545c <USB_SetTurnaroundTime+0x114>)
 8015376:	4293      	cmp	r3, r2
 8015378:	d306      	bcc.n	8015388 <USB_SetTurnaroundTime+0x40>
 801537a:	68bb      	ldr	r3, [r7, #8]
 801537c:	4a38      	ldr	r2, [pc, #224]	; (8015460 <USB_SetTurnaroundTime+0x118>)
 801537e:	4293      	cmp	r3, r2
 8015380:	d202      	bcs.n	8015388 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8015382:	230e      	movs	r3, #14
 8015384:	617b      	str	r3, [r7, #20]
 8015386:	e051      	b.n	801542c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8015388:	68bb      	ldr	r3, [r7, #8]
 801538a:	4a35      	ldr	r2, [pc, #212]	; (8015460 <USB_SetTurnaroundTime+0x118>)
 801538c:	4293      	cmp	r3, r2
 801538e:	d306      	bcc.n	801539e <USB_SetTurnaroundTime+0x56>
 8015390:	68bb      	ldr	r3, [r7, #8]
 8015392:	4a34      	ldr	r2, [pc, #208]	; (8015464 <USB_SetTurnaroundTime+0x11c>)
 8015394:	4293      	cmp	r3, r2
 8015396:	d202      	bcs.n	801539e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8015398:	230d      	movs	r3, #13
 801539a:	617b      	str	r3, [r7, #20]
 801539c:	e046      	b.n	801542c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801539e:	68bb      	ldr	r3, [r7, #8]
 80153a0:	4a30      	ldr	r2, [pc, #192]	; (8015464 <USB_SetTurnaroundTime+0x11c>)
 80153a2:	4293      	cmp	r3, r2
 80153a4:	d306      	bcc.n	80153b4 <USB_SetTurnaroundTime+0x6c>
 80153a6:	68bb      	ldr	r3, [r7, #8]
 80153a8:	4a2f      	ldr	r2, [pc, #188]	; (8015468 <USB_SetTurnaroundTime+0x120>)
 80153aa:	4293      	cmp	r3, r2
 80153ac:	d802      	bhi.n	80153b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80153ae:	230c      	movs	r3, #12
 80153b0:	617b      	str	r3, [r7, #20]
 80153b2:	e03b      	b.n	801542c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80153b4:	68bb      	ldr	r3, [r7, #8]
 80153b6:	4a2c      	ldr	r2, [pc, #176]	; (8015468 <USB_SetTurnaroundTime+0x120>)
 80153b8:	4293      	cmp	r3, r2
 80153ba:	d906      	bls.n	80153ca <USB_SetTurnaroundTime+0x82>
 80153bc:	68bb      	ldr	r3, [r7, #8]
 80153be:	4a2b      	ldr	r2, [pc, #172]	; (801546c <USB_SetTurnaroundTime+0x124>)
 80153c0:	4293      	cmp	r3, r2
 80153c2:	d802      	bhi.n	80153ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80153c4:	230b      	movs	r3, #11
 80153c6:	617b      	str	r3, [r7, #20]
 80153c8:	e030      	b.n	801542c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80153ca:	68bb      	ldr	r3, [r7, #8]
 80153cc:	4a27      	ldr	r2, [pc, #156]	; (801546c <USB_SetTurnaroundTime+0x124>)
 80153ce:	4293      	cmp	r3, r2
 80153d0:	d906      	bls.n	80153e0 <USB_SetTurnaroundTime+0x98>
 80153d2:	68bb      	ldr	r3, [r7, #8]
 80153d4:	4a26      	ldr	r2, [pc, #152]	; (8015470 <USB_SetTurnaroundTime+0x128>)
 80153d6:	4293      	cmp	r3, r2
 80153d8:	d802      	bhi.n	80153e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80153da:	230a      	movs	r3, #10
 80153dc:	617b      	str	r3, [r7, #20]
 80153de:	e025      	b.n	801542c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80153e0:	68bb      	ldr	r3, [r7, #8]
 80153e2:	4a23      	ldr	r2, [pc, #140]	; (8015470 <USB_SetTurnaroundTime+0x128>)
 80153e4:	4293      	cmp	r3, r2
 80153e6:	d906      	bls.n	80153f6 <USB_SetTurnaroundTime+0xae>
 80153e8:	68bb      	ldr	r3, [r7, #8]
 80153ea:	4a22      	ldr	r2, [pc, #136]	; (8015474 <USB_SetTurnaroundTime+0x12c>)
 80153ec:	4293      	cmp	r3, r2
 80153ee:	d202      	bcs.n	80153f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80153f0:	2309      	movs	r3, #9
 80153f2:	617b      	str	r3, [r7, #20]
 80153f4:	e01a      	b.n	801542c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80153f6:	68bb      	ldr	r3, [r7, #8]
 80153f8:	4a1e      	ldr	r2, [pc, #120]	; (8015474 <USB_SetTurnaroundTime+0x12c>)
 80153fa:	4293      	cmp	r3, r2
 80153fc:	d306      	bcc.n	801540c <USB_SetTurnaroundTime+0xc4>
 80153fe:	68bb      	ldr	r3, [r7, #8]
 8015400:	4a1d      	ldr	r2, [pc, #116]	; (8015478 <USB_SetTurnaroundTime+0x130>)
 8015402:	4293      	cmp	r3, r2
 8015404:	d802      	bhi.n	801540c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8015406:	2308      	movs	r3, #8
 8015408:	617b      	str	r3, [r7, #20]
 801540a:	e00f      	b.n	801542c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801540c:	68bb      	ldr	r3, [r7, #8]
 801540e:	4a1a      	ldr	r2, [pc, #104]	; (8015478 <USB_SetTurnaroundTime+0x130>)
 8015410:	4293      	cmp	r3, r2
 8015412:	d906      	bls.n	8015422 <USB_SetTurnaroundTime+0xda>
 8015414:	68bb      	ldr	r3, [r7, #8]
 8015416:	4a19      	ldr	r2, [pc, #100]	; (801547c <USB_SetTurnaroundTime+0x134>)
 8015418:	4293      	cmp	r3, r2
 801541a:	d202      	bcs.n	8015422 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801541c:	2307      	movs	r3, #7
 801541e:	617b      	str	r3, [r7, #20]
 8015420:	e004      	b.n	801542c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8015422:	2306      	movs	r3, #6
 8015424:	617b      	str	r3, [r7, #20]
 8015426:	e001      	b.n	801542c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8015428:	2309      	movs	r3, #9
 801542a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	68db      	ldr	r3, [r3, #12]
 8015430:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	68da      	ldr	r2, [r3, #12]
 801543c:	697b      	ldr	r3, [r7, #20]
 801543e:	029b      	lsls	r3, r3, #10
 8015440:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8015444:	431a      	orrs	r2, r3
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801544a:	2300      	movs	r3, #0
}
 801544c:	4618      	mov	r0, r3
 801544e:	371c      	adds	r7, #28
 8015450:	46bd      	mov	sp, r7
 8015452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015456:	4770      	bx	lr
 8015458:	00d8acbf 	.word	0x00d8acbf
 801545c:	00e4e1c0 	.word	0x00e4e1c0
 8015460:	00f42400 	.word	0x00f42400
 8015464:	01067380 	.word	0x01067380
 8015468:	011a499f 	.word	0x011a499f
 801546c:	01312cff 	.word	0x01312cff
 8015470:	014ca43f 	.word	0x014ca43f
 8015474:	016e3600 	.word	0x016e3600
 8015478:	01a6ab1f 	.word	0x01a6ab1f
 801547c:	01e84800 	.word	0x01e84800

08015480 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8015480:	b480      	push	{r7}
 8015482:	b083      	sub	sp, #12
 8015484:	af00      	add	r7, sp, #0
 8015486:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	689b      	ldr	r3, [r3, #8]
 801548c:	f043 0201 	orr.w	r2, r3, #1
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8015494:	2300      	movs	r3, #0
}
 8015496:	4618      	mov	r0, r3
 8015498:	370c      	adds	r7, #12
 801549a:	46bd      	mov	sp, r7
 801549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154a0:	4770      	bx	lr

080154a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80154a2:	b480      	push	{r7}
 80154a4:	b083      	sub	sp, #12
 80154a6:	af00      	add	r7, sp, #0
 80154a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	689b      	ldr	r3, [r3, #8]
 80154ae:	f023 0201 	bic.w	r2, r3, #1
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80154b6:	2300      	movs	r3, #0
}
 80154b8:	4618      	mov	r0, r3
 80154ba:	370c      	adds	r7, #12
 80154bc:	46bd      	mov	sp, r7
 80154be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154c2:	4770      	bx	lr

080154c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b084      	sub	sp, #16
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	6078      	str	r0, [r7, #4]
 80154cc:	460b      	mov	r3, r1
 80154ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80154d0:	2300      	movs	r3, #0
 80154d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	68db      	ldr	r3, [r3, #12]
 80154d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80154e0:	78fb      	ldrb	r3, [r7, #3]
 80154e2:	2b01      	cmp	r3, #1
 80154e4:	d115      	bne.n	8015512 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	68db      	ldr	r3, [r3, #12]
 80154ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80154f2:	2001      	movs	r0, #1
 80154f4:	f7f5 fc5e 	bl	800adb4 <HAL_Delay>
      ms++;
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	3301      	adds	r3, #1
 80154fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80154fe:	6878      	ldr	r0, [r7, #4]
 8015500:	f001 f985 	bl	801680e <USB_GetMode>
 8015504:	4603      	mov	r3, r0
 8015506:	2b01      	cmp	r3, #1
 8015508:	d01e      	beq.n	8015548 <USB_SetCurrentMode+0x84>
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	2b31      	cmp	r3, #49	; 0x31
 801550e:	d9f0      	bls.n	80154f2 <USB_SetCurrentMode+0x2e>
 8015510:	e01a      	b.n	8015548 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8015512:	78fb      	ldrb	r3, [r7, #3]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d115      	bne.n	8015544 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	68db      	ldr	r3, [r3, #12]
 801551c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8015524:	2001      	movs	r0, #1
 8015526:	f7f5 fc45 	bl	800adb4 <HAL_Delay>
      ms++;
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	3301      	adds	r3, #1
 801552e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8015530:	6878      	ldr	r0, [r7, #4]
 8015532:	f001 f96c 	bl	801680e <USB_GetMode>
 8015536:	4603      	mov	r3, r0
 8015538:	2b00      	cmp	r3, #0
 801553a:	d005      	beq.n	8015548 <USB_SetCurrentMode+0x84>
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	2b31      	cmp	r3, #49	; 0x31
 8015540:	d9f0      	bls.n	8015524 <USB_SetCurrentMode+0x60>
 8015542:	e001      	b.n	8015548 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8015544:	2301      	movs	r3, #1
 8015546:	e005      	b.n	8015554 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	2b32      	cmp	r3, #50	; 0x32
 801554c:	d101      	bne.n	8015552 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801554e:	2301      	movs	r3, #1
 8015550:	e000      	b.n	8015554 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8015552:	2300      	movs	r3, #0
}
 8015554:	4618      	mov	r0, r3
 8015556:	3710      	adds	r7, #16
 8015558:	46bd      	mov	sp, r7
 801555a:	bd80      	pop	{r7, pc}

0801555c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801555c:	b084      	sub	sp, #16
 801555e:	b580      	push	{r7, lr}
 8015560:	b086      	sub	sp, #24
 8015562:	af00      	add	r7, sp, #0
 8015564:	6078      	str	r0, [r7, #4]
 8015566:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801556a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801556e:	2300      	movs	r3, #0
 8015570:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8015576:	2300      	movs	r3, #0
 8015578:	613b      	str	r3, [r7, #16]
 801557a:	e009      	b.n	8015590 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801557c:	687a      	ldr	r2, [r7, #4]
 801557e:	693b      	ldr	r3, [r7, #16]
 8015580:	3340      	adds	r3, #64	; 0x40
 8015582:	009b      	lsls	r3, r3, #2
 8015584:	4413      	add	r3, r2
 8015586:	2200      	movs	r2, #0
 8015588:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801558a:	693b      	ldr	r3, [r7, #16]
 801558c:	3301      	adds	r3, #1
 801558e:	613b      	str	r3, [r7, #16]
 8015590:	693b      	ldr	r3, [r7, #16]
 8015592:	2b0e      	cmp	r3, #14
 8015594:	d9f2      	bls.n	801557c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8015596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015598:	2b00      	cmp	r3, #0
 801559a:	d11c      	bne.n	80155d6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80155a2:	685b      	ldr	r3, [r3, #4]
 80155a4:	68fa      	ldr	r2, [r7, #12]
 80155a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80155aa:	f043 0302 	orr.w	r3, r3, #2
 80155ae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80155b4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	601a      	str	r2, [r3, #0]
 80155d4:	e005      	b.n	80155e2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80155da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80155e2:	68fb      	ldr	r3, [r7, #12]
 80155e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80155e8:	461a      	mov	r2, r3
 80155ea:	2300      	movs	r3, #0
 80155ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80155f4:	4619      	mov	r1, r3
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80155fc:	461a      	mov	r2, r3
 80155fe:	680b      	ldr	r3, [r1, #0]
 8015600:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8015602:	2103      	movs	r1, #3
 8015604:	6878      	ldr	r0, [r7, #4]
 8015606:	f000 f959 	bl	80158bc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801560a:	2110      	movs	r1, #16
 801560c:	6878      	ldr	r0, [r7, #4]
 801560e:	f000 f8f1 	bl	80157f4 <USB_FlushTxFifo>
 8015612:	4603      	mov	r3, r0
 8015614:	2b00      	cmp	r3, #0
 8015616:	d001      	beq.n	801561c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8015618:	2301      	movs	r3, #1
 801561a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801561c:	6878      	ldr	r0, [r7, #4]
 801561e:	f000 f91d 	bl	801585c <USB_FlushRxFifo>
 8015622:	4603      	mov	r3, r0
 8015624:	2b00      	cmp	r3, #0
 8015626:	d001      	beq.n	801562c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8015628:	2301      	movs	r3, #1
 801562a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015632:	461a      	mov	r2, r3
 8015634:	2300      	movs	r3, #0
 8015636:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801563e:	461a      	mov	r2, r3
 8015640:	2300      	movs	r3, #0
 8015642:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801564a:	461a      	mov	r2, r3
 801564c:	2300      	movs	r3, #0
 801564e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8015650:	2300      	movs	r3, #0
 8015652:	613b      	str	r3, [r7, #16]
 8015654:	e043      	b.n	80156de <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015656:	693b      	ldr	r3, [r7, #16]
 8015658:	015a      	lsls	r2, r3, #5
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	4413      	add	r3, r2
 801565e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015662:	681b      	ldr	r3, [r3, #0]
 8015664:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015668:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801566c:	d118      	bne.n	80156a0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 801566e:	693b      	ldr	r3, [r7, #16]
 8015670:	2b00      	cmp	r3, #0
 8015672:	d10a      	bne.n	801568a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8015674:	693b      	ldr	r3, [r7, #16]
 8015676:	015a      	lsls	r2, r3, #5
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	4413      	add	r3, r2
 801567c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015680:	461a      	mov	r2, r3
 8015682:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8015686:	6013      	str	r3, [r2, #0]
 8015688:	e013      	b.n	80156b2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801568a:	693b      	ldr	r3, [r7, #16]
 801568c:	015a      	lsls	r2, r3, #5
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	4413      	add	r3, r2
 8015692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015696:	461a      	mov	r2, r3
 8015698:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801569c:	6013      	str	r3, [r2, #0]
 801569e:	e008      	b.n	80156b2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80156a0:	693b      	ldr	r3, [r7, #16]
 80156a2:	015a      	lsls	r2, r3, #5
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	4413      	add	r3, r2
 80156a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80156ac:	461a      	mov	r2, r3
 80156ae:	2300      	movs	r3, #0
 80156b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80156b2:	693b      	ldr	r3, [r7, #16]
 80156b4:	015a      	lsls	r2, r3, #5
 80156b6:	68fb      	ldr	r3, [r7, #12]
 80156b8:	4413      	add	r3, r2
 80156ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80156be:	461a      	mov	r2, r3
 80156c0:	2300      	movs	r3, #0
 80156c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80156c4:	693b      	ldr	r3, [r7, #16]
 80156c6:	015a      	lsls	r2, r3, #5
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	4413      	add	r3, r2
 80156cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80156d0:	461a      	mov	r2, r3
 80156d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80156d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80156d8:	693b      	ldr	r3, [r7, #16]
 80156da:	3301      	adds	r3, #1
 80156dc:	613b      	str	r3, [r7, #16]
 80156de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156e0:	693a      	ldr	r2, [r7, #16]
 80156e2:	429a      	cmp	r2, r3
 80156e4:	d3b7      	bcc.n	8015656 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80156e6:	2300      	movs	r3, #0
 80156e8:	613b      	str	r3, [r7, #16]
 80156ea:	e043      	b.n	8015774 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80156ec:	693b      	ldr	r3, [r7, #16]
 80156ee:	015a      	lsls	r2, r3, #5
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	4413      	add	r3, r2
 80156f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80156fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015702:	d118      	bne.n	8015736 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8015704:	693b      	ldr	r3, [r7, #16]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d10a      	bne.n	8015720 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801570a:	693b      	ldr	r3, [r7, #16]
 801570c:	015a      	lsls	r2, r3, #5
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	4413      	add	r3, r2
 8015712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015716:	461a      	mov	r2, r3
 8015718:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801571c:	6013      	str	r3, [r2, #0]
 801571e:	e013      	b.n	8015748 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8015720:	693b      	ldr	r3, [r7, #16]
 8015722:	015a      	lsls	r2, r3, #5
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	4413      	add	r3, r2
 8015728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801572c:	461a      	mov	r2, r3
 801572e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8015732:	6013      	str	r3, [r2, #0]
 8015734:	e008      	b.n	8015748 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8015736:	693b      	ldr	r3, [r7, #16]
 8015738:	015a      	lsls	r2, r3, #5
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	4413      	add	r3, r2
 801573e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015742:	461a      	mov	r2, r3
 8015744:	2300      	movs	r3, #0
 8015746:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8015748:	693b      	ldr	r3, [r7, #16]
 801574a:	015a      	lsls	r2, r3, #5
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	4413      	add	r3, r2
 8015750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015754:	461a      	mov	r2, r3
 8015756:	2300      	movs	r3, #0
 8015758:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801575a:	693b      	ldr	r3, [r7, #16]
 801575c:	015a      	lsls	r2, r3, #5
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	4413      	add	r3, r2
 8015762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015766:	461a      	mov	r2, r3
 8015768:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801576c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801576e:	693b      	ldr	r3, [r7, #16]
 8015770:	3301      	adds	r3, #1
 8015772:	613b      	str	r3, [r7, #16]
 8015774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015776:	693a      	ldr	r2, [r7, #16]
 8015778:	429a      	cmp	r2, r3
 801577a:	d3b7      	bcc.n	80156ec <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015782:	691b      	ldr	r3, [r3, #16]
 8015784:	68fa      	ldr	r2, [r7, #12]
 8015786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801578a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801578e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	2200      	movs	r2, #0
 8015794:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801579c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	699b      	ldr	r3, [r3, #24]
 80157a2:	f043 0210 	orr.w	r2, r3, #16
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	699a      	ldr	r2, [r3, #24]
 80157ae:	4b10      	ldr	r3, [pc, #64]	; (80157f0 <USB_DevInit+0x294>)
 80157b0:	4313      	orrs	r3, r2
 80157b2:	687a      	ldr	r2, [r7, #4]
 80157b4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80157b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d005      	beq.n	80157c8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	699b      	ldr	r3, [r3, #24]
 80157c0:	f043 0208 	orr.w	r2, r3, #8
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80157c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80157ca:	2b01      	cmp	r3, #1
 80157cc:	d107      	bne.n	80157de <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	699b      	ldr	r3, [r3, #24]
 80157d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80157d6:	f043 0304 	orr.w	r3, r3, #4
 80157da:	687a      	ldr	r2, [r7, #4]
 80157dc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80157de:	7dfb      	ldrb	r3, [r7, #23]
}
 80157e0:	4618      	mov	r0, r3
 80157e2:	3718      	adds	r7, #24
 80157e4:	46bd      	mov	sp, r7
 80157e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80157ea:	b004      	add	sp, #16
 80157ec:	4770      	bx	lr
 80157ee:	bf00      	nop
 80157f0:	803c3800 	.word	0x803c3800

080157f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80157f4:	b480      	push	{r7}
 80157f6:	b085      	sub	sp, #20
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	6078      	str	r0, [r7, #4]
 80157fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80157fe:	2300      	movs	r3, #0
 8015800:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015802:	68fb      	ldr	r3, [r7, #12]
 8015804:	3301      	adds	r3, #1
 8015806:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	4a13      	ldr	r2, [pc, #76]	; (8015858 <USB_FlushTxFifo+0x64>)
 801580c:	4293      	cmp	r3, r2
 801580e:	d901      	bls.n	8015814 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8015810:	2303      	movs	r3, #3
 8015812:	e01b      	b.n	801584c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	691b      	ldr	r3, [r3, #16]
 8015818:	2b00      	cmp	r3, #0
 801581a:	daf2      	bge.n	8015802 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801581c:	2300      	movs	r3, #0
 801581e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8015820:	683b      	ldr	r3, [r7, #0]
 8015822:	019b      	lsls	r3, r3, #6
 8015824:	f043 0220 	orr.w	r2, r3, #32
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	3301      	adds	r3, #1
 8015830:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015832:	68fb      	ldr	r3, [r7, #12]
 8015834:	4a08      	ldr	r2, [pc, #32]	; (8015858 <USB_FlushTxFifo+0x64>)
 8015836:	4293      	cmp	r3, r2
 8015838:	d901      	bls.n	801583e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801583a:	2303      	movs	r3, #3
 801583c:	e006      	b.n	801584c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	691b      	ldr	r3, [r3, #16]
 8015842:	f003 0320 	and.w	r3, r3, #32
 8015846:	2b20      	cmp	r3, #32
 8015848:	d0f0      	beq.n	801582c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801584a:	2300      	movs	r3, #0
}
 801584c:	4618      	mov	r0, r3
 801584e:	3714      	adds	r7, #20
 8015850:	46bd      	mov	sp, r7
 8015852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015856:	4770      	bx	lr
 8015858:	00030d40 	.word	0x00030d40

0801585c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801585c:	b480      	push	{r7}
 801585e:	b085      	sub	sp, #20
 8015860:	af00      	add	r7, sp, #0
 8015862:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8015864:	2300      	movs	r3, #0
 8015866:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	3301      	adds	r3, #1
 801586c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	4a11      	ldr	r2, [pc, #68]	; (80158b8 <USB_FlushRxFifo+0x5c>)
 8015872:	4293      	cmp	r3, r2
 8015874:	d901      	bls.n	801587a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8015876:	2303      	movs	r3, #3
 8015878:	e018      	b.n	80158ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	691b      	ldr	r3, [r3, #16]
 801587e:	2b00      	cmp	r3, #0
 8015880:	daf2      	bge.n	8015868 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8015882:	2300      	movs	r3, #0
 8015884:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	2210      	movs	r2, #16
 801588a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	3301      	adds	r3, #1
 8015890:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	4a08      	ldr	r2, [pc, #32]	; (80158b8 <USB_FlushRxFifo+0x5c>)
 8015896:	4293      	cmp	r3, r2
 8015898:	d901      	bls.n	801589e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801589a:	2303      	movs	r3, #3
 801589c:	e006      	b.n	80158ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	691b      	ldr	r3, [r3, #16]
 80158a2:	f003 0310 	and.w	r3, r3, #16
 80158a6:	2b10      	cmp	r3, #16
 80158a8:	d0f0      	beq.n	801588c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80158aa:	2300      	movs	r3, #0
}
 80158ac:	4618      	mov	r0, r3
 80158ae:	3714      	adds	r7, #20
 80158b0:	46bd      	mov	sp, r7
 80158b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b6:	4770      	bx	lr
 80158b8:	00030d40 	.word	0x00030d40

080158bc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80158bc:	b480      	push	{r7}
 80158be:	b085      	sub	sp, #20
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
 80158c4:	460b      	mov	r3, r1
 80158c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80158d2:	681a      	ldr	r2, [r3, #0]
 80158d4:	78fb      	ldrb	r3, [r7, #3]
 80158d6:	68f9      	ldr	r1, [r7, #12]
 80158d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80158dc:	4313      	orrs	r3, r2
 80158de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80158e0:	2300      	movs	r3, #0
}
 80158e2:	4618      	mov	r0, r3
 80158e4:	3714      	adds	r7, #20
 80158e6:	46bd      	mov	sp, r7
 80158e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ec:	4770      	bx	lr

080158ee <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80158ee:	b480      	push	{r7}
 80158f0:	b087      	sub	sp, #28
 80158f2:	af00      	add	r7, sp, #0
 80158f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80158fa:	693b      	ldr	r3, [r7, #16]
 80158fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015900:	689b      	ldr	r3, [r3, #8]
 8015902:	f003 0306 	and.w	r3, r3, #6
 8015906:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	2b02      	cmp	r3, #2
 801590c:	d002      	beq.n	8015914 <USB_GetDevSpeed+0x26>
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	2b06      	cmp	r3, #6
 8015912:	d102      	bne.n	801591a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8015914:	2302      	movs	r3, #2
 8015916:	75fb      	strb	r3, [r7, #23]
 8015918:	e001      	b.n	801591e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 801591a:	230f      	movs	r3, #15
 801591c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801591e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015920:	4618      	mov	r0, r3
 8015922:	371c      	adds	r7, #28
 8015924:	46bd      	mov	sp, r7
 8015926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801592a:	4770      	bx	lr

0801592c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801592c:	b480      	push	{r7}
 801592e:	b085      	sub	sp, #20
 8015930:	af00      	add	r7, sp, #0
 8015932:	6078      	str	r0, [r7, #4]
 8015934:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801593a:	683b      	ldr	r3, [r7, #0]
 801593c:	781b      	ldrb	r3, [r3, #0]
 801593e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8015940:	683b      	ldr	r3, [r7, #0]
 8015942:	785b      	ldrb	r3, [r3, #1]
 8015944:	2b01      	cmp	r3, #1
 8015946:	d13a      	bne.n	80159be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801594e:	69da      	ldr	r2, [r3, #28]
 8015950:	683b      	ldr	r3, [r7, #0]
 8015952:	781b      	ldrb	r3, [r3, #0]
 8015954:	f003 030f 	and.w	r3, r3, #15
 8015958:	2101      	movs	r1, #1
 801595a:	fa01 f303 	lsl.w	r3, r1, r3
 801595e:	b29b      	uxth	r3, r3
 8015960:	68f9      	ldr	r1, [r7, #12]
 8015962:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015966:	4313      	orrs	r3, r2
 8015968:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801596a:	68bb      	ldr	r3, [r7, #8]
 801596c:	015a      	lsls	r2, r3, #5
 801596e:	68fb      	ldr	r3, [r7, #12]
 8015970:	4413      	add	r3, r2
 8015972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801597c:	2b00      	cmp	r3, #0
 801597e:	d155      	bne.n	8015a2c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8015980:	68bb      	ldr	r3, [r7, #8]
 8015982:	015a      	lsls	r2, r3, #5
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	4413      	add	r3, r2
 8015988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801598c:	681a      	ldr	r2, [r3, #0]
 801598e:	683b      	ldr	r3, [r7, #0]
 8015990:	68db      	ldr	r3, [r3, #12]
 8015992:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8015996:	683b      	ldr	r3, [r7, #0]
 8015998:	791b      	ldrb	r3, [r3, #4]
 801599a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801599c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801599e:	68bb      	ldr	r3, [r7, #8]
 80159a0:	059b      	lsls	r3, r3, #22
 80159a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80159a4:	4313      	orrs	r3, r2
 80159a6:	68ba      	ldr	r2, [r7, #8]
 80159a8:	0151      	lsls	r1, r2, #5
 80159aa:	68fa      	ldr	r2, [r7, #12]
 80159ac:	440a      	add	r2, r1
 80159ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80159b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80159b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80159ba:	6013      	str	r3, [r2, #0]
 80159bc:	e036      	b.n	8015a2c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80159c4:	69da      	ldr	r2, [r3, #28]
 80159c6:	683b      	ldr	r3, [r7, #0]
 80159c8:	781b      	ldrb	r3, [r3, #0]
 80159ca:	f003 030f 	and.w	r3, r3, #15
 80159ce:	2101      	movs	r1, #1
 80159d0:	fa01 f303 	lsl.w	r3, r1, r3
 80159d4:	041b      	lsls	r3, r3, #16
 80159d6:	68f9      	ldr	r1, [r7, #12]
 80159d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80159dc:	4313      	orrs	r3, r2
 80159de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80159e0:	68bb      	ldr	r3, [r7, #8]
 80159e2:	015a      	lsls	r2, r3, #5
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	4413      	add	r3, r2
 80159e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d11a      	bne.n	8015a2c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80159f6:	68bb      	ldr	r3, [r7, #8]
 80159f8:	015a      	lsls	r2, r3, #5
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	4413      	add	r3, r2
 80159fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015a02:	681a      	ldr	r2, [r3, #0]
 8015a04:	683b      	ldr	r3, [r7, #0]
 8015a06:	68db      	ldr	r3, [r3, #12]
 8015a08:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8015a0c:	683b      	ldr	r3, [r7, #0]
 8015a0e:	791b      	ldrb	r3, [r3, #4]
 8015a10:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8015a12:	430b      	orrs	r3, r1
 8015a14:	4313      	orrs	r3, r2
 8015a16:	68ba      	ldr	r2, [r7, #8]
 8015a18:	0151      	lsls	r1, r2, #5
 8015a1a:	68fa      	ldr	r2, [r7, #12]
 8015a1c:	440a      	add	r2, r1
 8015a1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015a2a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8015a2c:	2300      	movs	r3, #0
}
 8015a2e:	4618      	mov	r0, r3
 8015a30:	3714      	adds	r7, #20
 8015a32:	46bd      	mov	sp, r7
 8015a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a38:	4770      	bx	lr
	...

08015a3c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015a3c:	b480      	push	{r7}
 8015a3e:	b085      	sub	sp, #20
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
 8015a44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015a4a:	683b      	ldr	r3, [r7, #0]
 8015a4c:	781b      	ldrb	r3, [r3, #0]
 8015a4e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8015a50:	683b      	ldr	r3, [r7, #0]
 8015a52:	785b      	ldrb	r3, [r3, #1]
 8015a54:	2b01      	cmp	r3, #1
 8015a56:	d161      	bne.n	8015b1c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8015a58:	68bb      	ldr	r3, [r7, #8]
 8015a5a:	015a      	lsls	r2, r3, #5
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	4413      	add	r3, r2
 8015a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015a6e:	d11f      	bne.n	8015ab0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8015a70:	68bb      	ldr	r3, [r7, #8]
 8015a72:	015a      	lsls	r2, r3, #5
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	4413      	add	r3, r2
 8015a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	68ba      	ldr	r2, [r7, #8]
 8015a80:	0151      	lsls	r1, r2, #5
 8015a82:	68fa      	ldr	r2, [r7, #12]
 8015a84:	440a      	add	r2, r1
 8015a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015a8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015a8e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8015a90:	68bb      	ldr	r3, [r7, #8]
 8015a92:	015a      	lsls	r2, r3, #5
 8015a94:	68fb      	ldr	r3, [r7, #12]
 8015a96:	4413      	add	r3, r2
 8015a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	68ba      	ldr	r2, [r7, #8]
 8015aa0:	0151      	lsls	r1, r2, #5
 8015aa2:	68fa      	ldr	r2, [r7, #12]
 8015aa4:	440a      	add	r2, r1
 8015aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015aaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015aae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015ab6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015ab8:	683b      	ldr	r3, [r7, #0]
 8015aba:	781b      	ldrb	r3, [r3, #0]
 8015abc:	f003 030f 	and.w	r3, r3, #15
 8015ac0:	2101      	movs	r1, #1
 8015ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8015ac6:	b29b      	uxth	r3, r3
 8015ac8:	43db      	mvns	r3, r3
 8015aca:	68f9      	ldr	r1, [r7, #12]
 8015acc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015ad0:	4013      	ands	r3, r2
 8015ad2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015ada:	69da      	ldr	r2, [r3, #28]
 8015adc:	683b      	ldr	r3, [r7, #0]
 8015ade:	781b      	ldrb	r3, [r3, #0]
 8015ae0:	f003 030f 	and.w	r3, r3, #15
 8015ae4:	2101      	movs	r1, #1
 8015ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8015aea:	b29b      	uxth	r3, r3
 8015aec:	43db      	mvns	r3, r3
 8015aee:	68f9      	ldr	r1, [r7, #12]
 8015af0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015af4:	4013      	ands	r3, r2
 8015af6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8015af8:	68bb      	ldr	r3, [r7, #8]
 8015afa:	015a      	lsls	r2, r3, #5
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	4413      	add	r3, r2
 8015b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b04:	681a      	ldr	r2, [r3, #0]
 8015b06:	68bb      	ldr	r3, [r7, #8]
 8015b08:	0159      	lsls	r1, r3, #5
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	440b      	add	r3, r1
 8015b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015b12:	4619      	mov	r1, r3
 8015b14:	4b35      	ldr	r3, [pc, #212]	; (8015bec <USB_DeactivateEndpoint+0x1b0>)
 8015b16:	4013      	ands	r3, r2
 8015b18:	600b      	str	r3, [r1, #0]
 8015b1a:	e060      	b.n	8015bde <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8015b1c:	68bb      	ldr	r3, [r7, #8]
 8015b1e:	015a      	lsls	r2, r3, #5
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	4413      	add	r3, r2
 8015b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015b2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8015b32:	d11f      	bne.n	8015b74 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8015b34:	68bb      	ldr	r3, [r7, #8]
 8015b36:	015a      	lsls	r2, r3, #5
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	4413      	add	r3, r2
 8015b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	68ba      	ldr	r2, [r7, #8]
 8015b44:	0151      	lsls	r1, r2, #5
 8015b46:	68fa      	ldr	r2, [r7, #12]
 8015b48:	440a      	add	r2, r1
 8015b4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015b4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8015b52:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8015b54:	68bb      	ldr	r3, [r7, #8]
 8015b56:	015a      	lsls	r2, r3, #5
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	4413      	add	r3, r2
 8015b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	68ba      	ldr	r2, [r7, #8]
 8015b64:	0151      	lsls	r1, r2, #5
 8015b66:	68fa      	ldr	r2, [r7, #12]
 8015b68:	440a      	add	r2, r1
 8015b6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015b6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8015b72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015b7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015b7c:	683b      	ldr	r3, [r7, #0]
 8015b7e:	781b      	ldrb	r3, [r3, #0]
 8015b80:	f003 030f 	and.w	r3, r3, #15
 8015b84:	2101      	movs	r1, #1
 8015b86:	fa01 f303 	lsl.w	r3, r1, r3
 8015b8a:	041b      	lsls	r3, r3, #16
 8015b8c:	43db      	mvns	r3, r3
 8015b8e:	68f9      	ldr	r1, [r7, #12]
 8015b90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015b94:	4013      	ands	r3, r2
 8015b96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015b9e:	69da      	ldr	r2, [r3, #28]
 8015ba0:	683b      	ldr	r3, [r7, #0]
 8015ba2:	781b      	ldrb	r3, [r3, #0]
 8015ba4:	f003 030f 	and.w	r3, r3, #15
 8015ba8:	2101      	movs	r1, #1
 8015baa:	fa01 f303 	lsl.w	r3, r1, r3
 8015bae:	041b      	lsls	r3, r3, #16
 8015bb0:	43db      	mvns	r3, r3
 8015bb2:	68f9      	ldr	r1, [r7, #12]
 8015bb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015bb8:	4013      	ands	r3, r2
 8015bba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8015bbc:	68bb      	ldr	r3, [r7, #8]
 8015bbe:	015a      	lsls	r2, r3, #5
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	4413      	add	r3, r2
 8015bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015bc8:	681a      	ldr	r2, [r3, #0]
 8015bca:	68bb      	ldr	r3, [r7, #8]
 8015bcc:	0159      	lsls	r1, r3, #5
 8015bce:	68fb      	ldr	r3, [r7, #12]
 8015bd0:	440b      	add	r3, r1
 8015bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015bd6:	4619      	mov	r1, r3
 8015bd8:	4b05      	ldr	r3, [pc, #20]	; (8015bf0 <USB_DeactivateEndpoint+0x1b4>)
 8015bda:	4013      	ands	r3, r2
 8015bdc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8015bde:	2300      	movs	r3, #0
}
 8015be0:	4618      	mov	r0, r3
 8015be2:	3714      	adds	r7, #20
 8015be4:	46bd      	mov	sp, r7
 8015be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bea:	4770      	bx	lr
 8015bec:	ec337800 	.word	0xec337800
 8015bf0:	eff37800 	.word	0xeff37800

08015bf4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b086      	sub	sp, #24
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	6078      	str	r0, [r7, #4]
 8015bfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8015c02:	683b      	ldr	r3, [r7, #0]
 8015c04:	781b      	ldrb	r3, [r3, #0]
 8015c06:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015c08:	683b      	ldr	r3, [r7, #0]
 8015c0a:	785b      	ldrb	r3, [r3, #1]
 8015c0c:	2b01      	cmp	r3, #1
 8015c0e:	f040 810a 	bne.w	8015e26 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8015c12:	683b      	ldr	r3, [r7, #0]
 8015c14:	699b      	ldr	r3, [r3, #24]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d132      	bne.n	8015c80 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015c1a:	693b      	ldr	r3, [r7, #16]
 8015c1c:	015a      	lsls	r2, r3, #5
 8015c1e:	697b      	ldr	r3, [r7, #20]
 8015c20:	4413      	add	r3, r2
 8015c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015c26:	691b      	ldr	r3, [r3, #16]
 8015c28:	693a      	ldr	r2, [r7, #16]
 8015c2a:	0151      	lsls	r1, r2, #5
 8015c2c:	697a      	ldr	r2, [r7, #20]
 8015c2e:	440a      	add	r2, r1
 8015c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015c34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015c38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8015c3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015c3e:	693b      	ldr	r3, [r7, #16]
 8015c40:	015a      	lsls	r2, r3, #5
 8015c42:	697b      	ldr	r3, [r7, #20]
 8015c44:	4413      	add	r3, r2
 8015c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015c4a:	691b      	ldr	r3, [r3, #16]
 8015c4c:	693a      	ldr	r2, [r7, #16]
 8015c4e:	0151      	lsls	r1, r2, #5
 8015c50:	697a      	ldr	r2, [r7, #20]
 8015c52:	440a      	add	r2, r1
 8015c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015c58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015c5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015c5e:	693b      	ldr	r3, [r7, #16]
 8015c60:	015a      	lsls	r2, r3, #5
 8015c62:	697b      	ldr	r3, [r7, #20]
 8015c64:	4413      	add	r3, r2
 8015c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015c6a:	691b      	ldr	r3, [r3, #16]
 8015c6c:	693a      	ldr	r2, [r7, #16]
 8015c6e:	0151      	lsls	r1, r2, #5
 8015c70:	697a      	ldr	r2, [r7, #20]
 8015c72:	440a      	add	r2, r1
 8015c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015c78:	0cdb      	lsrs	r3, r3, #19
 8015c7a:	04db      	lsls	r3, r3, #19
 8015c7c:	6113      	str	r3, [r2, #16]
 8015c7e:	e074      	b.n	8015d6a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8015c80:	693b      	ldr	r3, [r7, #16]
 8015c82:	015a      	lsls	r2, r3, #5
 8015c84:	697b      	ldr	r3, [r7, #20]
 8015c86:	4413      	add	r3, r2
 8015c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015c8c:	691b      	ldr	r3, [r3, #16]
 8015c8e:	693a      	ldr	r2, [r7, #16]
 8015c90:	0151      	lsls	r1, r2, #5
 8015c92:	697a      	ldr	r2, [r7, #20]
 8015c94:	440a      	add	r2, r1
 8015c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015c9a:	0cdb      	lsrs	r3, r3, #19
 8015c9c:	04db      	lsls	r3, r3, #19
 8015c9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015ca0:	693b      	ldr	r3, [r7, #16]
 8015ca2:	015a      	lsls	r2, r3, #5
 8015ca4:	697b      	ldr	r3, [r7, #20]
 8015ca6:	4413      	add	r3, r2
 8015ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015cac:	691b      	ldr	r3, [r3, #16]
 8015cae:	693a      	ldr	r2, [r7, #16]
 8015cb0:	0151      	lsls	r1, r2, #5
 8015cb2:	697a      	ldr	r2, [r7, #20]
 8015cb4:	440a      	add	r2, r1
 8015cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015cba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015cbe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8015cc2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8015cc4:	693b      	ldr	r3, [r7, #16]
 8015cc6:	015a      	lsls	r2, r3, #5
 8015cc8:	697b      	ldr	r3, [r7, #20]
 8015cca:	4413      	add	r3, r2
 8015ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015cd0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8015cd2:	683b      	ldr	r3, [r7, #0]
 8015cd4:	6999      	ldr	r1, [r3, #24]
 8015cd6:	683b      	ldr	r3, [r7, #0]
 8015cd8:	68db      	ldr	r3, [r3, #12]
 8015cda:	440b      	add	r3, r1
 8015cdc:	1e59      	subs	r1, r3, #1
 8015cde:	683b      	ldr	r3, [r7, #0]
 8015ce0:	68db      	ldr	r3, [r3, #12]
 8015ce2:	fbb1 f3f3 	udiv	r3, r1, r3
 8015ce6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8015ce8:	4b9e      	ldr	r3, [pc, #632]	; (8015f64 <USB_EPStartXfer+0x370>)
 8015cea:	400b      	ands	r3, r1
 8015cec:	6939      	ldr	r1, [r7, #16]
 8015cee:	0148      	lsls	r0, r1, #5
 8015cf0:	6979      	ldr	r1, [r7, #20]
 8015cf2:	4401      	add	r1, r0
 8015cf4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8015cf8:	4313      	orrs	r3, r2
 8015cfa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8015cfc:	693b      	ldr	r3, [r7, #16]
 8015cfe:	015a      	lsls	r2, r3, #5
 8015d00:	697b      	ldr	r3, [r7, #20]
 8015d02:	4413      	add	r3, r2
 8015d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015d08:	691a      	ldr	r2, [r3, #16]
 8015d0a:	683b      	ldr	r3, [r7, #0]
 8015d0c:	699b      	ldr	r3, [r3, #24]
 8015d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015d12:	6939      	ldr	r1, [r7, #16]
 8015d14:	0148      	lsls	r0, r1, #5
 8015d16:	6979      	ldr	r1, [r7, #20]
 8015d18:	4401      	add	r1, r0
 8015d1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8015d1e:	4313      	orrs	r3, r2
 8015d20:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8015d22:	683b      	ldr	r3, [r7, #0]
 8015d24:	791b      	ldrb	r3, [r3, #4]
 8015d26:	2b01      	cmp	r3, #1
 8015d28:	d11f      	bne.n	8015d6a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8015d2a:	693b      	ldr	r3, [r7, #16]
 8015d2c:	015a      	lsls	r2, r3, #5
 8015d2e:	697b      	ldr	r3, [r7, #20]
 8015d30:	4413      	add	r3, r2
 8015d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015d36:	691b      	ldr	r3, [r3, #16]
 8015d38:	693a      	ldr	r2, [r7, #16]
 8015d3a:	0151      	lsls	r1, r2, #5
 8015d3c:	697a      	ldr	r2, [r7, #20]
 8015d3e:	440a      	add	r2, r1
 8015d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015d44:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8015d48:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8015d4a:	693b      	ldr	r3, [r7, #16]
 8015d4c:	015a      	lsls	r2, r3, #5
 8015d4e:	697b      	ldr	r3, [r7, #20]
 8015d50:	4413      	add	r3, r2
 8015d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015d56:	691b      	ldr	r3, [r3, #16]
 8015d58:	693a      	ldr	r2, [r7, #16]
 8015d5a:	0151      	lsls	r1, r2, #5
 8015d5c:	697a      	ldr	r2, [r7, #20]
 8015d5e:	440a      	add	r2, r1
 8015d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015d64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015d68:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8015d6a:	693b      	ldr	r3, [r7, #16]
 8015d6c:	015a      	lsls	r2, r3, #5
 8015d6e:	697b      	ldr	r3, [r7, #20]
 8015d70:	4413      	add	r3, r2
 8015d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	693a      	ldr	r2, [r7, #16]
 8015d7a:	0151      	lsls	r1, r2, #5
 8015d7c:	697a      	ldr	r2, [r7, #20]
 8015d7e:	440a      	add	r2, r1
 8015d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015d84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015d88:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8015d8a:	683b      	ldr	r3, [r7, #0]
 8015d8c:	791b      	ldrb	r3, [r3, #4]
 8015d8e:	2b01      	cmp	r3, #1
 8015d90:	d015      	beq.n	8015dbe <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8015d92:	683b      	ldr	r3, [r7, #0]
 8015d94:	699b      	ldr	r3, [r3, #24]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	f000 8106 	beq.w	8015fa8 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8015d9c:	697b      	ldr	r3, [r7, #20]
 8015d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015da4:	683b      	ldr	r3, [r7, #0]
 8015da6:	781b      	ldrb	r3, [r3, #0]
 8015da8:	f003 030f 	and.w	r3, r3, #15
 8015dac:	2101      	movs	r1, #1
 8015dae:	fa01 f303 	lsl.w	r3, r1, r3
 8015db2:	6979      	ldr	r1, [r7, #20]
 8015db4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8015db8:	4313      	orrs	r3, r2
 8015dba:	634b      	str	r3, [r1, #52]	; 0x34
 8015dbc:	e0f4      	b.n	8015fa8 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015dbe:	697b      	ldr	r3, [r7, #20]
 8015dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015dc4:	689b      	ldr	r3, [r3, #8]
 8015dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d110      	bne.n	8015df0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8015dce:	693b      	ldr	r3, [r7, #16]
 8015dd0:	015a      	lsls	r2, r3, #5
 8015dd2:	697b      	ldr	r3, [r7, #20]
 8015dd4:	4413      	add	r3, r2
 8015dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	693a      	ldr	r2, [r7, #16]
 8015dde:	0151      	lsls	r1, r2, #5
 8015de0:	697a      	ldr	r2, [r7, #20]
 8015de2:	440a      	add	r2, r1
 8015de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015de8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015dec:	6013      	str	r3, [r2, #0]
 8015dee:	e00f      	b.n	8015e10 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8015df0:	693b      	ldr	r3, [r7, #16]
 8015df2:	015a      	lsls	r2, r3, #5
 8015df4:	697b      	ldr	r3, [r7, #20]
 8015df6:	4413      	add	r3, r2
 8015df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	693a      	ldr	r2, [r7, #16]
 8015e00:	0151      	lsls	r1, r2, #5
 8015e02:	697a      	ldr	r2, [r7, #20]
 8015e04:	440a      	add	r2, r1
 8015e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015e0e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8015e10:	683b      	ldr	r3, [r7, #0]
 8015e12:	6919      	ldr	r1, [r3, #16]
 8015e14:	683b      	ldr	r3, [r7, #0]
 8015e16:	781a      	ldrb	r2, [r3, #0]
 8015e18:	683b      	ldr	r3, [r7, #0]
 8015e1a:	699b      	ldr	r3, [r3, #24]
 8015e1c:	b29b      	uxth	r3, r3
 8015e1e:	6878      	ldr	r0, [r7, #4]
 8015e20:	f000 fa94 	bl	801634c <USB_WritePacket>
 8015e24:	e0c0      	b.n	8015fa8 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8015e26:	693b      	ldr	r3, [r7, #16]
 8015e28:	015a      	lsls	r2, r3, #5
 8015e2a:	697b      	ldr	r3, [r7, #20]
 8015e2c:	4413      	add	r3, r2
 8015e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e32:	691b      	ldr	r3, [r3, #16]
 8015e34:	693a      	ldr	r2, [r7, #16]
 8015e36:	0151      	lsls	r1, r2, #5
 8015e38:	697a      	ldr	r2, [r7, #20]
 8015e3a:	440a      	add	r2, r1
 8015e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015e40:	0cdb      	lsrs	r3, r3, #19
 8015e42:	04db      	lsls	r3, r3, #19
 8015e44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8015e46:	693b      	ldr	r3, [r7, #16]
 8015e48:	015a      	lsls	r2, r3, #5
 8015e4a:	697b      	ldr	r3, [r7, #20]
 8015e4c:	4413      	add	r3, r2
 8015e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e52:	691b      	ldr	r3, [r3, #16]
 8015e54:	693a      	ldr	r2, [r7, #16]
 8015e56:	0151      	lsls	r1, r2, #5
 8015e58:	697a      	ldr	r2, [r7, #20]
 8015e5a:	440a      	add	r2, r1
 8015e5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015e60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015e64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8015e68:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8015e6a:	683b      	ldr	r3, [r7, #0]
 8015e6c:	699b      	ldr	r3, [r3, #24]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d123      	bne.n	8015eba <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8015e72:	693b      	ldr	r3, [r7, #16]
 8015e74:	015a      	lsls	r2, r3, #5
 8015e76:	697b      	ldr	r3, [r7, #20]
 8015e78:	4413      	add	r3, r2
 8015e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015e7e:	691a      	ldr	r2, [r3, #16]
 8015e80:	683b      	ldr	r3, [r7, #0]
 8015e82:	68db      	ldr	r3, [r3, #12]
 8015e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015e88:	6939      	ldr	r1, [r7, #16]
 8015e8a:	0148      	lsls	r0, r1, #5
 8015e8c:	6979      	ldr	r1, [r7, #20]
 8015e8e:	4401      	add	r1, r0
 8015e90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015e94:	4313      	orrs	r3, r2
 8015e96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8015e98:	693b      	ldr	r3, [r7, #16]
 8015e9a:	015a      	lsls	r2, r3, #5
 8015e9c:	697b      	ldr	r3, [r7, #20]
 8015e9e:	4413      	add	r3, r2
 8015ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015ea4:	691b      	ldr	r3, [r3, #16]
 8015ea6:	693a      	ldr	r2, [r7, #16]
 8015ea8:	0151      	lsls	r1, r2, #5
 8015eaa:	697a      	ldr	r2, [r7, #20]
 8015eac:	440a      	add	r2, r1
 8015eae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015eb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8015eb6:	6113      	str	r3, [r2, #16]
 8015eb8:	e037      	b.n	8015f2a <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8015eba:	683b      	ldr	r3, [r7, #0]
 8015ebc:	699a      	ldr	r2, [r3, #24]
 8015ebe:	683b      	ldr	r3, [r7, #0]
 8015ec0:	68db      	ldr	r3, [r3, #12]
 8015ec2:	4413      	add	r3, r2
 8015ec4:	1e5a      	subs	r2, r3, #1
 8015ec6:	683b      	ldr	r3, [r7, #0]
 8015ec8:	68db      	ldr	r3, [r3, #12]
 8015eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8015ece:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8015ed0:	683b      	ldr	r3, [r7, #0]
 8015ed2:	68db      	ldr	r3, [r3, #12]
 8015ed4:	89fa      	ldrh	r2, [r7, #14]
 8015ed6:	fb03 f202 	mul.w	r2, r3, r2
 8015eda:	683b      	ldr	r3, [r7, #0]
 8015edc:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8015ede:	693b      	ldr	r3, [r7, #16]
 8015ee0:	015a      	lsls	r2, r3, #5
 8015ee2:	697b      	ldr	r3, [r7, #20]
 8015ee4:	4413      	add	r3, r2
 8015ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015eea:	691a      	ldr	r2, [r3, #16]
 8015eec:	89fb      	ldrh	r3, [r7, #14]
 8015eee:	04d9      	lsls	r1, r3, #19
 8015ef0:	4b1c      	ldr	r3, [pc, #112]	; (8015f64 <USB_EPStartXfer+0x370>)
 8015ef2:	400b      	ands	r3, r1
 8015ef4:	6939      	ldr	r1, [r7, #16]
 8015ef6:	0148      	lsls	r0, r1, #5
 8015ef8:	6979      	ldr	r1, [r7, #20]
 8015efa:	4401      	add	r1, r0
 8015efc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015f00:	4313      	orrs	r3, r2
 8015f02:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8015f04:	693b      	ldr	r3, [r7, #16]
 8015f06:	015a      	lsls	r2, r3, #5
 8015f08:	697b      	ldr	r3, [r7, #20]
 8015f0a:	4413      	add	r3, r2
 8015f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015f10:	691a      	ldr	r2, [r3, #16]
 8015f12:	683b      	ldr	r3, [r7, #0]
 8015f14:	69db      	ldr	r3, [r3, #28]
 8015f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8015f1a:	6939      	ldr	r1, [r7, #16]
 8015f1c:	0148      	lsls	r0, r1, #5
 8015f1e:	6979      	ldr	r1, [r7, #20]
 8015f20:	4401      	add	r1, r0
 8015f22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8015f26:	4313      	orrs	r3, r2
 8015f28:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8015f2a:	683b      	ldr	r3, [r7, #0]
 8015f2c:	791b      	ldrb	r3, [r3, #4]
 8015f2e:	2b01      	cmp	r3, #1
 8015f30:	d12a      	bne.n	8015f88 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8015f32:	697b      	ldr	r3, [r7, #20]
 8015f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8015f38:	689b      	ldr	r3, [r3, #8]
 8015f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d112      	bne.n	8015f68 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8015f42:	693b      	ldr	r3, [r7, #16]
 8015f44:	015a      	lsls	r2, r3, #5
 8015f46:	697b      	ldr	r3, [r7, #20]
 8015f48:	4413      	add	r3, r2
 8015f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	693a      	ldr	r2, [r7, #16]
 8015f52:	0151      	lsls	r1, r2, #5
 8015f54:	697a      	ldr	r2, [r7, #20]
 8015f56:	440a      	add	r2, r1
 8015f58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015f5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8015f60:	6013      	str	r3, [r2, #0]
 8015f62:	e011      	b.n	8015f88 <USB_EPStartXfer+0x394>
 8015f64:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8015f68:	693b      	ldr	r3, [r7, #16]
 8015f6a:	015a      	lsls	r2, r3, #5
 8015f6c:	697b      	ldr	r3, [r7, #20]
 8015f6e:	4413      	add	r3, r2
 8015f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	693a      	ldr	r2, [r7, #16]
 8015f78:	0151      	lsls	r1, r2, #5
 8015f7a:	697a      	ldr	r2, [r7, #20]
 8015f7c:	440a      	add	r2, r1
 8015f7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015f86:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8015f88:	693b      	ldr	r3, [r7, #16]
 8015f8a:	015a      	lsls	r2, r3, #5
 8015f8c:	697b      	ldr	r3, [r7, #20]
 8015f8e:	4413      	add	r3, r2
 8015f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	693a      	ldr	r2, [r7, #16]
 8015f98:	0151      	lsls	r1, r2, #5
 8015f9a:	697a      	ldr	r2, [r7, #20]
 8015f9c:	440a      	add	r2, r1
 8015f9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8015fa2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8015fa6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8015fa8:	2300      	movs	r3, #0
}
 8015faa:	4618      	mov	r0, r3
 8015fac:	3718      	adds	r7, #24
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	bd80      	pop	{r7, pc}
 8015fb2:	bf00      	nop

08015fb4 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8015fb4:	b480      	push	{r7}
 8015fb6:	b085      	sub	sp, #20
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	6078      	str	r0, [r7, #4]
 8015fbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8015fc2:	683b      	ldr	r3, [r7, #0]
 8015fc4:	781b      	ldrb	r3, [r3, #0]
 8015fc6:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8015fc8:	683b      	ldr	r3, [r7, #0]
 8015fca:	785b      	ldrb	r3, [r3, #1]
 8015fcc:	2b01      	cmp	r3, #1
 8015fce:	f040 80ab 	bne.w	8016128 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8015fd2:	683b      	ldr	r3, [r7, #0]
 8015fd4:	699b      	ldr	r3, [r3, #24]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d132      	bne.n	8016040 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8015fda:	68bb      	ldr	r3, [r7, #8]
 8015fdc:	015a      	lsls	r2, r3, #5
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	4413      	add	r3, r2
 8015fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8015fe6:	691b      	ldr	r3, [r3, #16]
 8015fe8:	68ba      	ldr	r2, [r7, #8]
 8015fea:	0151      	lsls	r1, r2, #5
 8015fec:	68fa      	ldr	r2, [r7, #12]
 8015fee:	440a      	add	r2, r1
 8015ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8015ff4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015ff8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8015ffc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8015ffe:	68bb      	ldr	r3, [r7, #8]
 8016000:	015a      	lsls	r2, r3, #5
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	4413      	add	r3, r2
 8016006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801600a:	691b      	ldr	r3, [r3, #16]
 801600c:	68ba      	ldr	r2, [r7, #8]
 801600e:	0151      	lsls	r1, r2, #5
 8016010:	68fa      	ldr	r2, [r7, #12]
 8016012:	440a      	add	r2, r1
 8016014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016018:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801601c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801601e:	68bb      	ldr	r3, [r7, #8]
 8016020:	015a      	lsls	r2, r3, #5
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	4413      	add	r3, r2
 8016026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801602a:	691b      	ldr	r3, [r3, #16]
 801602c:	68ba      	ldr	r2, [r7, #8]
 801602e:	0151      	lsls	r1, r2, #5
 8016030:	68fa      	ldr	r2, [r7, #12]
 8016032:	440a      	add	r2, r1
 8016034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016038:	0cdb      	lsrs	r3, r3, #19
 801603a:	04db      	lsls	r3, r3, #19
 801603c:	6113      	str	r3, [r2, #16]
 801603e:	e04e      	b.n	80160de <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016040:	68bb      	ldr	r3, [r7, #8]
 8016042:	015a      	lsls	r2, r3, #5
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	4413      	add	r3, r2
 8016048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801604c:	691b      	ldr	r3, [r3, #16]
 801604e:	68ba      	ldr	r2, [r7, #8]
 8016050:	0151      	lsls	r1, r2, #5
 8016052:	68fa      	ldr	r2, [r7, #12]
 8016054:	440a      	add	r2, r1
 8016056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801605a:	0cdb      	lsrs	r3, r3, #19
 801605c:	04db      	lsls	r3, r3, #19
 801605e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8016060:	68bb      	ldr	r3, [r7, #8]
 8016062:	015a      	lsls	r2, r3, #5
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	4413      	add	r3, r2
 8016068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801606c:	691b      	ldr	r3, [r3, #16]
 801606e:	68ba      	ldr	r2, [r7, #8]
 8016070:	0151      	lsls	r1, r2, #5
 8016072:	68fa      	ldr	r2, [r7, #12]
 8016074:	440a      	add	r2, r1
 8016076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801607a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801607e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8016082:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8016084:	683b      	ldr	r3, [r7, #0]
 8016086:	699a      	ldr	r2, [r3, #24]
 8016088:	683b      	ldr	r3, [r7, #0]
 801608a:	68db      	ldr	r3, [r3, #12]
 801608c:	429a      	cmp	r2, r3
 801608e:	d903      	bls.n	8016098 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8016090:	683b      	ldr	r3, [r7, #0]
 8016092:	68da      	ldr	r2, [r3, #12]
 8016094:	683b      	ldr	r3, [r7, #0]
 8016096:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8016098:	68bb      	ldr	r3, [r7, #8]
 801609a:	015a      	lsls	r2, r3, #5
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	4413      	add	r3, r2
 80160a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80160a4:	691b      	ldr	r3, [r3, #16]
 80160a6:	68ba      	ldr	r2, [r7, #8]
 80160a8:	0151      	lsls	r1, r2, #5
 80160aa:	68fa      	ldr	r2, [r7, #12]
 80160ac:	440a      	add	r2, r1
 80160ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80160b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80160b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80160b8:	68bb      	ldr	r3, [r7, #8]
 80160ba:	015a      	lsls	r2, r3, #5
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	4413      	add	r3, r2
 80160c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80160c4:	691a      	ldr	r2, [r3, #16]
 80160c6:	683b      	ldr	r3, [r7, #0]
 80160c8:	699b      	ldr	r3, [r3, #24]
 80160ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80160ce:	68b9      	ldr	r1, [r7, #8]
 80160d0:	0148      	lsls	r0, r1, #5
 80160d2:	68f9      	ldr	r1, [r7, #12]
 80160d4:	4401      	add	r1, r0
 80160d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80160da:	4313      	orrs	r3, r2
 80160dc:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80160de:	68bb      	ldr	r3, [r7, #8]
 80160e0:	015a      	lsls	r2, r3, #5
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	4413      	add	r3, r2
 80160e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	68ba      	ldr	r2, [r7, #8]
 80160ee:	0151      	lsls	r1, r2, #5
 80160f0:	68fa      	ldr	r2, [r7, #12]
 80160f2:	440a      	add	r2, r1
 80160f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80160f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80160fc:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80160fe:	683b      	ldr	r3, [r7, #0]
 8016100:	699b      	ldr	r3, [r3, #24]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d071      	beq.n	80161ea <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801610c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801610e:	683b      	ldr	r3, [r7, #0]
 8016110:	781b      	ldrb	r3, [r3, #0]
 8016112:	f003 030f 	and.w	r3, r3, #15
 8016116:	2101      	movs	r1, #1
 8016118:	fa01 f303 	lsl.w	r3, r1, r3
 801611c:	68f9      	ldr	r1, [r7, #12]
 801611e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016122:	4313      	orrs	r3, r2
 8016124:	634b      	str	r3, [r1, #52]	; 0x34
 8016126:	e060      	b.n	80161ea <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8016128:	68bb      	ldr	r3, [r7, #8]
 801612a:	015a      	lsls	r2, r3, #5
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	4413      	add	r3, r2
 8016130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016134:	691b      	ldr	r3, [r3, #16]
 8016136:	68ba      	ldr	r2, [r7, #8]
 8016138:	0151      	lsls	r1, r2, #5
 801613a:	68fa      	ldr	r2, [r7, #12]
 801613c:	440a      	add	r2, r1
 801613e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016142:	0cdb      	lsrs	r3, r3, #19
 8016144:	04db      	lsls	r3, r3, #19
 8016146:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8016148:	68bb      	ldr	r3, [r7, #8]
 801614a:	015a      	lsls	r2, r3, #5
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	4413      	add	r3, r2
 8016150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016154:	691b      	ldr	r3, [r3, #16]
 8016156:	68ba      	ldr	r2, [r7, #8]
 8016158:	0151      	lsls	r1, r2, #5
 801615a:	68fa      	ldr	r2, [r7, #12]
 801615c:	440a      	add	r2, r1
 801615e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016162:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8016166:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801616a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801616c:	683b      	ldr	r3, [r7, #0]
 801616e:	699b      	ldr	r3, [r3, #24]
 8016170:	2b00      	cmp	r3, #0
 8016172:	d003      	beq.n	801617c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8016174:	683b      	ldr	r3, [r7, #0]
 8016176:	68da      	ldr	r2, [r3, #12]
 8016178:	683b      	ldr	r3, [r7, #0]
 801617a:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 801617c:	683b      	ldr	r3, [r7, #0]
 801617e:	68da      	ldr	r2, [r3, #12]
 8016180:	683b      	ldr	r3, [r7, #0]
 8016182:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8016184:	68bb      	ldr	r3, [r7, #8]
 8016186:	015a      	lsls	r2, r3, #5
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	4413      	add	r3, r2
 801618c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016190:	691b      	ldr	r3, [r3, #16]
 8016192:	68ba      	ldr	r2, [r7, #8]
 8016194:	0151      	lsls	r1, r2, #5
 8016196:	68fa      	ldr	r2, [r7, #12]
 8016198:	440a      	add	r2, r1
 801619a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801619e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80161a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80161a4:	68bb      	ldr	r3, [r7, #8]
 80161a6:	015a      	lsls	r2, r3, #5
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	4413      	add	r3, r2
 80161ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80161b0:	691a      	ldr	r2, [r3, #16]
 80161b2:	683b      	ldr	r3, [r7, #0]
 80161b4:	69db      	ldr	r3, [r3, #28]
 80161b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80161ba:	68b9      	ldr	r1, [r7, #8]
 80161bc:	0148      	lsls	r0, r1, #5
 80161be:	68f9      	ldr	r1, [r7, #12]
 80161c0:	4401      	add	r1, r0
 80161c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80161c6:	4313      	orrs	r3, r2
 80161c8:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80161ca:	68bb      	ldr	r3, [r7, #8]
 80161cc:	015a      	lsls	r2, r3, #5
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	4413      	add	r3, r2
 80161d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	68ba      	ldr	r2, [r7, #8]
 80161da:	0151      	lsls	r1, r2, #5
 80161dc:	68fa      	ldr	r2, [r7, #12]
 80161de:	440a      	add	r2, r1
 80161e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80161e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80161e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80161ea:	2300      	movs	r3, #0
}
 80161ec:	4618      	mov	r0, r3
 80161ee:	3714      	adds	r7, #20
 80161f0:	46bd      	mov	sp, r7
 80161f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f6:	4770      	bx	lr

080161f8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80161f8:	b480      	push	{r7}
 80161fa:	b087      	sub	sp, #28
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
 8016200:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8016202:	2300      	movs	r3, #0
 8016204:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8016206:	2300      	movs	r3, #0
 8016208:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801620e:	683b      	ldr	r3, [r7, #0]
 8016210:	785b      	ldrb	r3, [r3, #1]
 8016212:	2b01      	cmp	r3, #1
 8016214:	d14a      	bne.n	80162ac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8016216:	683b      	ldr	r3, [r7, #0]
 8016218:	781b      	ldrb	r3, [r3, #0]
 801621a:	015a      	lsls	r2, r3, #5
 801621c:	693b      	ldr	r3, [r7, #16]
 801621e:	4413      	add	r3, r2
 8016220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801622a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801622e:	f040 8086 	bne.w	801633e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8016232:	683b      	ldr	r3, [r7, #0]
 8016234:	781b      	ldrb	r3, [r3, #0]
 8016236:	015a      	lsls	r2, r3, #5
 8016238:	693b      	ldr	r3, [r7, #16]
 801623a:	4413      	add	r3, r2
 801623c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016240:	681b      	ldr	r3, [r3, #0]
 8016242:	683a      	ldr	r2, [r7, #0]
 8016244:	7812      	ldrb	r2, [r2, #0]
 8016246:	0151      	lsls	r1, r2, #5
 8016248:	693a      	ldr	r2, [r7, #16]
 801624a:	440a      	add	r2, r1
 801624c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016250:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8016254:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8016256:	683b      	ldr	r3, [r7, #0]
 8016258:	781b      	ldrb	r3, [r3, #0]
 801625a:	015a      	lsls	r2, r3, #5
 801625c:	693b      	ldr	r3, [r7, #16]
 801625e:	4413      	add	r3, r2
 8016260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	683a      	ldr	r2, [r7, #0]
 8016268:	7812      	ldrb	r2, [r2, #0]
 801626a:	0151      	lsls	r1, r2, #5
 801626c:	693a      	ldr	r2, [r7, #16]
 801626e:	440a      	add	r2, r1
 8016270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016274:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016278:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	3301      	adds	r3, #1
 801627e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	f242 7210 	movw	r2, #10000	; 0x2710
 8016286:	4293      	cmp	r3, r2
 8016288:	d902      	bls.n	8016290 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801628a:	2301      	movs	r3, #1
 801628c:	75fb      	strb	r3, [r7, #23]
          break;
 801628e:	e056      	b.n	801633e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8016290:	683b      	ldr	r3, [r7, #0]
 8016292:	781b      	ldrb	r3, [r3, #0]
 8016294:	015a      	lsls	r2, r3, #5
 8016296:	693b      	ldr	r3, [r7, #16]
 8016298:	4413      	add	r3, r2
 801629a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80162a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80162a8:	d0e7      	beq.n	801627a <USB_EPStopXfer+0x82>
 80162aa:	e048      	b.n	801633e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80162ac:	683b      	ldr	r3, [r7, #0]
 80162ae:	781b      	ldrb	r3, [r3, #0]
 80162b0:	015a      	lsls	r2, r3, #5
 80162b2:	693b      	ldr	r3, [r7, #16]
 80162b4:	4413      	add	r3, r2
 80162b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80162c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80162c4:	d13b      	bne.n	801633e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80162c6:	683b      	ldr	r3, [r7, #0]
 80162c8:	781b      	ldrb	r3, [r3, #0]
 80162ca:	015a      	lsls	r2, r3, #5
 80162cc:	693b      	ldr	r3, [r7, #16]
 80162ce:	4413      	add	r3, r2
 80162d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	683a      	ldr	r2, [r7, #0]
 80162d8:	7812      	ldrb	r2, [r2, #0]
 80162da:	0151      	lsls	r1, r2, #5
 80162dc:	693a      	ldr	r2, [r7, #16]
 80162de:	440a      	add	r2, r1
 80162e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80162e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80162e8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80162ea:	683b      	ldr	r3, [r7, #0]
 80162ec:	781b      	ldrb	r3, [r3, #0]
 80162ee:	015a      	lsls	r2, r3, #5
 80162f0:	693b      	ldr	r3, [r7, #16]
 80162f2:	4413      	add	r3, r2
 80162f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	683a      	ldr	r2, [r7, #0]
 80162fc:	7812      	ldrb	r2, [r2, #0]
 80162fe:	0151      	lsls	r1, r2, #5
 8016300:	693a      	ldr	r2, [r7, #16]
 8016302:	440a      	add	r2, r1
 8016304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016308:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801630c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	3301      	adds	r3, #1
 8016312:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	f242 7210 	movw	r2, #10000	; 0x2710
 801631a:	4293      	cmp	r3, r2
 801631c:	d902      	bls.n	8016324 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801631e:	2301      	movs	r3, #1
 8016320:	75fb      	strb	r3, [r7, #23]
          break;
 8016322:	e00c      	b.n	801633e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8016324:	683b      	ldr	r3, [r7, #0]
 8016326:	781b      	ldrb	r3, [r3, #0]
 8016328:	015a      	lsls	r2, r3, #5
 801632a:	693b      	ldr	r3, [r7, #16]
 801632c:	4413      	add	r3, r2
 801632e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016338:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801633c:	d0e7      	beq.n	801630e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801633e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016340:	4618      	mov	r0, r3
 8016342:	371c      	adds	r7, #28
 8016344:	46bd      	mov	sp, r7
 8016346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801634a:	4770      	bx	lr

0801634c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 801634c:	b480      	push	{r7}
 801634e:	b089      	sub	sp, #36	; 0x24
 8016350:	af00      	add	r7, sp, #0
 8016352:	60f8      	str	r0, [r7, #12]
 8016354:	60b9      	str	r1, [r7, #8]
 8016356:	4611      	mov	r1, r2
 8016358:	461a      	mov	r2, r3
 801635a:	460b      	mov	r3, r1
 801635c:	71fb      	strb	r3, [r7, #7]
 801635e:	4613      	mov	r3, r2
 8016360:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8016366:	68bb      	ldr	r3, [r7, #8]
 8016368:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 801636a:	88bb      	ldrh	r3, [r7, #4]
 801636c:	3303      	adds	r3, #3
 801636e:	089b      	lsrs	r3, r3, #2
 8016370:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8016372:	2300      	movs	r3, #0
 8016374:	61bb      	str	r3, [r7, #24]
 8016376:	e018      	b.n	80163aa <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8016378:	79fb      	ldrb	r3, [r7, #7]
 801637a:	031a      	lsls	r2, r3, #12
 801637c:	697b      	ldr	r3, [r7, #20]
 801637e:	4413      	add	r3, r2
 8016380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016384:	461a      	mov	r2, r3
 8016386:	69fb      	ldr	r3, [r7, #28]
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	6013      	str	r3, [r2, #0]
    pSrc++;
 801638c:	69fb      	ldr	r3, [r7, #28]
 801638e:	3301      	adds	r3, #1
 8016390:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8016392:	69fb      	ldr	r3, [r7, #28]
 8016394:	3301      	adds	r3, #1
 8016396:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8016398:	69fb      	ldr	r3, [r7, #28]
 801639a:	3301      	adds	r3, #1
 801639c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 801639e:	69fb      	ldr	r3, [r7, #28]
 80163a0:	3301      	adds	r3, #1
 80163a2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80163a4:	69bb      	ldr	r3, [r7, #24]
 80163a6:	3301      	adds	r3, #1
 80163a8:	61bb      	str	r3, [r7, #24]
 80163aa:	69ba      	ldr	r2, [r7, #24]
 80163ac:	693b      	ldr	r3, [r7, #16]
 80163ae:	429a      	cmp	r2, r3
 80163b0:	d3e2      	bcc.n	8016378 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80163b2:	2300      	movs	r3, #0
}
 80163b4:	4618      	mov	r0, r3
 80163b6:	3724      	adds	r7, #36	; 0x24
 80163b8:	46bd      	mov	sp, r7
 80163ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163be:	4770      	bx	lr

080163c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80163c0:	b480      	push	{r7}
 80163c2:	b08b      	sub	sp, #44	; 0x2c
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	60f8      	str	r0, [r7, #12]
 80163c8:	60b9      	str	r1, [r7, #8]
 80163ca:	4613      	mov	r3, r2
 80163cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80163ce:	68fb      	ldr	r3, [r7, #12]
 80163d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80163d2:	68bb      	ldr	r3, [r7, #8]
 80163d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80163d6:	88fb      	ldrh	r3, [r7, #6]
 80163d8:	089b      	lsrs	r3, r3, #2
 80163da:	b29b      	uxth	r3, r3
 80163dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80163de:	88fb      	ldrh	r3, [r7, #6]
 80163e0:	f003 0303 	and.w	r3, r3, #3
 80163e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80163e6:	2300      	movs	r3, #0
 80163e8:	623b      	str	r3, [r7, #32]
 80163ea:	e014      	b.n	8016416 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80163ec:	69bb      	ldr	r3, [r7, #24]
 80163ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80163f2:	681a      	ldr	r2, [r3, #0]
 80163f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80163f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163fa:	3301      	adds	r3, #1
 80163fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80163fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016400:	3301      	adds	r3, #1
 8016402:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8016404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016406:	3301      	adds	r3, #1
 8016408:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801640c:	3301      	adds	r3, #1
 801640e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8016410:	6a3b      	ldr	r3, [r7, #32]
 8016412:	3301      	adds	r3, #1
 8016414:	623b      	str	r3, [r7, #32]
 8016416:	6a3a      	ldr	r2, [r7, #32]
 8016418:	697b      	ldr	r3, [r7, #20]
 801641a:	429a      	cmp	r2, r3
 801641c:	d3e6      	bcc.n	80163ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801641e:	8bfb      	ldrh	r3, [r7, #30]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d01e      	beq.n	8016462 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8016424:	2300      	movs	r3, #0
 8016426:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8016428:	69bb      	ldr	r3, [r7, #24]
 801642a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801642e:	461a      	mov	r2, r3
 8016430:	f107 0310 	add.w	r3, r7, #16
 8016434:	6812      	ldr	r2, [r2, #0]
 8016436:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8016438:	693a      	ldr	r2, [r7, #16]
 801643a:	6a3b      	ldr	r3, [r7, #32]
 801643c:	b2db      	uxtb	r3, r3
 801643e:	00db      	lsls	r3, r3, #3
 8016440:	fa22 f303 	lsr.w	r3, r2, r3
 8016444:	b2da      	uxtb	r2, r3
 8016446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016448:	701a      	strb	r2, [r3, #0]
      i++;
 801644a:	6a3b      	ldr	r3, [r7, #32]
 801644c:	3301      	adds	r3, #1
 801644e:	623b      	str	r3, [r7, #32]
      pDest++;
 8016450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016452:	3301      	adds	r3, #1
 8016454:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8016456:	8bfb      	ldrh	r3, [r7, #30]
 8016458:	3b01      	subs	r3, #1
 801645a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801645c:	8bfb      	ldrh	r3, [r7, #30]
 801645e:	2b00      	cmp	r3, #0
 8016460:	d1ea      	bne.n	8016438 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8016462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016464:	4618      	mov	r0, r3
 8016466:	372c      	adds	r7, #44	; 0x2c
 8016468:	46bd      	mov	sp, r7
 801646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801646e:	4770      	bx	lr

08016470 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016470:	b480      	push	{r7}
 8016472:	b085      	sub	sp, #20
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
 8016478:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801647e:	683b      	ldr	r3, [r7, #0]
 8016480:	781b      	ldrb	r3, [r3, #0]
 8016482:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016484:	683b      	ldr	r3, [r7, #0]
 8016486:	785b      	ldrb	r3, [r3, #1]
 8016488:	2b01      	cmp	r3, #1
 801648a:	d12c      	bne.n	80164e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801648c:	68bb      	ldr	r3, [r7, #8]
 801648e:	015a      	lsls	r2, r3, #5
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	4413      	add	r3, r2
 8016494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	2b00      	cmp	r3, #0
 801649c:	db12      	blt.n	80164c4 <USB_EPSetStall+0x54>
 801649e:	68bb      	ldr	r3, [r7, #8]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d00f      	beq.n	80164c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80164a4:	68bb      	ldr	r3, [r7, #8]
 80164a6:	015a      	lsls	r2, r3, #5
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	4413      	add	r3, r2
 80164ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	68ba      	ldr	r2, [r7, #8]
 80164b4:	0151      	lsls	r1, r2, #5
 80164b6:	68fa      	ldr	r2, [r7, #12]
 80164b8:	440a      	add	r2, r1
 80164ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80164be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80164c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80164c4:	68bb      	ldr	r3, [r7, #8]
 80164c6:	015a      	lsls	r2, r3, #5
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	4413      	add	r3, r2
 80164cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	68ba      	ldr	r2, [r7, #8]
 80164d4:	0151      	lsls	r1, r2, #5
 80164d6:	68fa      	ldr	r2, [r7, #12]
 80164d8:	440a      	add	r2, r1
 80164da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80164de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80164e2:	6013      	str	r3, [r2, #0]
 80164e4:	e02b      	b.n	801653e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80164e6:	68bb      	ldr	r3, [r7, #8]
 80164e8:	015a      	lsls	r2, r3, #5
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	4413      	add	r3, r2
 80164ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	db12      	blt.n	801651e <USB_EPSetStall+0xae>
 80164f8:	68bb      	ldr	r3, [r7, #8]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d00f      	beq.n	801651e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80164fe:	68bb      	ldr	r3, [r7, #8]
 8016500:	015a      	lsls	r2, r3, #5
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	4413      	add	r3, r2
 8016506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	68ba      	ldr	r2, [r7, #8]
 801650e:	0151      	lsls	r1, r2, #5
 8016510:	68fa      	ldr	r2, [r7, #12]
 8016512:	440a      	add	r2, r1
 8016514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016518:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801651c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801651e:	68bb      	ldr	r3, [r7, #8]
 8016520:	015a      	lsls	r2, r3, #5
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	4413      	add	r3, r2
 8016526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	68ba      	ldr	r2, [r7, #8]
 801652e:	0151      	lsls	r1, r2, #5
 8016530:	68fa      	ldr	r2, [r7, #12]
 8016532:	440a      	add	r2, r1
 8016534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016538:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801653c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801653e:	2300      	movs	r3, #0
}
 8016540:	4618      	mov	r0, r3
 8016542:	3714      	adds	r7, #20
 8016544:	46bd      	mov	sp, r7
 8016546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801654a:	4770      	bx	lr

0801654c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801654c:	b480      	push	{r7}
 801654e:	b085      	sub	sp, #20
 8016550:	af00      	add	r7, sp, #0
 8016552:	6078      	str	r0, [r7, #4]
 8016554:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801655a:	683b      	ldr	r3, [r7, #0]
 801655c:	781b      	ldrb	r3, [r3, #0]
 801655e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016560:	683b      	ldr	r3, [r7, #0]
 8016562:	785b      	ldrb	r3, [r3, #1]
 8016564:	2b01      	cmp	r3, #1
 8016566:	d128      	bne.n	80165ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8016568:	68bb      	ldr	r3, [r7, #8]
 801656a:	015a      	lsls	r2, r3, #5
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	4413      	add	r3, r2
 8016570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	68ba      	ldr	r2, [r7, #8]
 8016578:	0151      	lsls	r1, r2, #5
 801657a:	68fa      	ldr	r2, [r7, #12]
 801657c:	440a      	add	r2, r1
 801657e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016582:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8016586:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8016588:	683b      	ldr	r3, [r7, #0]
 801658a:	791b      	ldrb	r3, [r3, #4]
 801658c:	2b03      	cmp	r3, #3
 801658e:	d003      	beq.n	8016598 <USB_EPClearStall+0x4c>
 8016590:	683b      	ldr	r3, [r7, #0]
 8016592:	791b      	ldrb	r3, [r3, #4]
 8016594:	2b02      	cmp	r3, #2
 8016596:	d138      	bne.n	801660a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8016598:	68bb      	ldr	r3, [r7, #8]
 801659a:	015a      	lsls	r2, r3, #5
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	4413      	add	r3, r2
 80165a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	68ba      	ldr	r2, [r7, #8]
 80165a8:	0151      	lsls	r1, r2, #5
 80165aa:	68fa      	ldr	r2, [r7, #12]
 80165ac:	440a      	add	r2, r1
 80165ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80165b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80165b6:	6013      	str	r3, [r2, #0]
 80165b8:	e027      	b.n	801660a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80165ba:	68bb      	ldr	r3, [r7, #8]
 80165bc:	015a      	lsls	r2, r3, #5
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	4413      	add	r3, r2
 80165c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	68ba      	ldr	r2, [r7, #8]
 80165ca:	0151      	lsls	r1, r2, #5
 80165cc:	68fa      	ldr	r2, [r7, #12]
 80165ce:	440a      	add	r2, r1
 80165d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80165d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80165d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80165da:	683b      	ldr	r3, [r7, #0]
 80165dc:	791b      	ldrb	r3, [r3, #4]
 80165de:	2b03      	cmp	r3, #3
 80165e0:	d003      	beq.n	80165ea <USB_EPClearStall+0x9e>
 80165e2:	683b      	ldr	r3, [r7, #0]
 80165e4:	791b      	ldrb	r3, [r3, #4]
 80165e6:	2b02      	cmp	r3, #2
 80165e8:	d10f      	bne.n	801660a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80165ea:	68bb      	ldr	r3, [r7, #8]
 80165ec:	015a      	lsls	r2, r3, #5
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	4413      	add	r3, r2
 80165f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	68ba      	ldr	r2, [r7, #8]
 80165fa:	0151      	lsls	r1, r2, #5
 80165fc:	68fa      	ldr	r2, [r7, #12]
 80165fe:	440a      	add	r2, r1
 8016600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016608:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801660a:	2300      	movs	r3, #0
}
 801660c:	4618      	mov	r0, r3
 801660e:	3714      	adds	r7, #20
 8016610:	46bd      	mov	sp, r7
 8016612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016616:	4770      	bx	lr

08016618 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8016618:	b480      	push	{r7}
 801661a:	b085      	sub	sp, #20
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
 8016620:	460b      	mov	r3, r1
 8016622:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	68fa      	ldr	r2, [r7, #12]
 8016632:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016636:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801663a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016642:	681a      	ldr	r2, [r3, #0]
 8016644:	78fb      	ldrb	r3, [r7, #3]
 8016646:	011b      	lsls	r3, r3, #4
 8016648:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801664c:	68f9      	ldr	r1, [r7, #12]
 801664e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016652:	4313      	orrs	r3, r2
 8016654:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8016656:	2300      	movs	r3, #0
}
 8016658:	4618      	mov	r0, r3
 801665a:	3714      	adds	r7, #20
 801665c:	46bd      	mov	sp, r7
 801665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016662:	4770      	bx	lr

08016664 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8016664:	b480      	push	{r7}
 8016666:	b085      	sub	sp, #20
 8016668:	af00      	add	r7, sp, #0
 801666a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	68fa      	ldr	r2, [r7, #12]
 801667a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801667e:	f023 0303 	bic.w	r3, r3, #3
 8016682:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801668a:	685b      	ldr	r3, [r3, #4]
 801668c:	68fa      	ldr	r2, [r7, #12]
 801668e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8016692:	f023 0302 	bic.w	r3, r3, #2
 8016696:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016698:	2300      	movs	r3, #0
}
 801669a:	4618      	mov	r0, r3
 801669c:	3714      	adds	r7, #20
 801669e:	46bd      	mov	sp, r7
 80166a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a4:	4770      	bx	lr

080166a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80166a6:	b480      	push	{r7}
 80166a8:	b085      	sub	sp, #20
 80166aa:	af00      	add	r7, sp, #0
 80166ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80166b2:	68fb      	ldr	r3, [r7, #12]
 80166b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	68fa      	ldr	r2, [r7, #12]
 80166bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80166c0:	f023 0303 	bic.w	r3, r3, #3
 80166c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80166cc:	685b      	ldr	r3, [r3, #4]
 80166ce:	68fa      	ldr	r2, [r7, #12]
 80166d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80166d4:	f043 0302 	orr.w	r3, r3, #2
 80166d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80166da:	2300      	movs	r3, #0
}
 80166dc:	4618      	mov	r0, r3
 80166de:	3714      	adds	r7, #20
 80166e0:	46bd      	mov	sp, r7
 80166e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e6:	4770      	bx	lr

080166e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80166e8:	b480      	push	{r7}
 80166ea:	b085      	sub	sp, #20
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	695b      	ldr	r3, [r3, #20]
 80166f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	699b      	ldr	r3, [r3, #24]
 80166fa:	68fa      	ldr	r2, [r7, #12]
 80166fc:	4013      	ands	r3, r2
 80166fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8016700:	68fb      	ldr	r3, [r7, #12]
}
 8016702:	4618      	mov	r0, r3
 8016704:	3714      	adds	r7, #20
 8016706:	46bd      	mov	sp, r7
 8016708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801670c:	4770      	bx	lr

0801670e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801670e:	b480      	push	{r7}
 8016710:	b085      	sub	sp, #20
 8016712:	af00      	add	r7, sp, #0
 8016714:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016720:	699b      	ldr	r3, [r3, #24]
 8016722:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801672a:	69db      	ldr	r3, [r3, #28]
 801672c:	68ba      	ldr	r2, [r7, #8]
 801672e:	4013      	ands	r3, r2
 8016730:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8016732:	68bb      	ldr	r3, [r7, #8]
 8016734:	0c1b      	lsrs	r3, r3, #16
}
 8016736:	4618      	mov	r0, r3
 8016738:	3714      	adds	r7, #20
 801673a:	46bd      	mov	sp, r7
 801673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016740:	4770      	bx	lr

08016742 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8016742:	b480      	push	{r7}
 8016744:	b085      	sub	sp, #20
 8016746:	af00      	add	r7, sp, #0
 8016748:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016754:	699b      	ldr	r3, [r3, #24]
 8016756:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801675e:	69db      	ldr	r3, [r3, #28]
 8016760:	68ba      	ldr	r2, [r7, #8]
 8016762:	4013      	ands	r3, r2
 8016764:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8016766:	68bb      	ldr	r3, [r7, #8]
 8016768:	b29b      	uxth	r3, r3
}
 801676a:	4618      	mov	r0, r3
 801676c:	3714      	adds	r7, #20
 801676e:	46bd      	mov	sp, r7
 8016770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016774:	4770      	bx	lr

08016776 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8016776:	b480      	push	{r7}
 8016778:	b085      	sub	sp, #20
 801677a:	af00      	add	r7, sp, #0
 801677c:	6078      	str	r0, [r7, #4]
 801677e:	460b      	mov	r3, r1
 8016780:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8016786:	78fb      	ldrb	r3, [r7, #3]
 8016788:	015a      	lsls	r2, r3, #5
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	4413      	add	r3, r2
 801678e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016792:	689b      	ldr	r3, [r3, #8]
 8016794:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801679c:	695b      	ldr	r3, [r3, #20]
 801679e:	68ba      	ldr	r2, [r7, #8]
 80167a0:	4013      	ands	r3, r2
 80167a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80167a4:	68bb      	ldr	r3, [r7, #8]
}
 80167a6:	4618      	mov	r0, r3
 80167a8:	3714      	adds	r7, #20
 80167aa:	46bd      	mov	sp, r7
 80167ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167b0:	4770      	bx	lr

080167b2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80167b2:	b480      	push	{r7}
 80167b4:	b087      	sub	sp, #28
 80167b6:	af00      	add	r7, sp, #0
 80167b8:	6078      	str	r0, [r7, #4]
 80167ba:	460b      	mov	r3, r1
 80167bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80167c2:	697b      	ldr	r3, [r7, #20]
 80167c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80167c8:	691b      	ldr	r3, [r3, #16]
 80167ca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80167cc:	697b      	ldr	r3, [r7, #20]
 80167ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80167d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80167d4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80167d6:	78fb      	ldrb	r3, [r7, #3]
 80167d8:	f003 030f 	and.w	r3, r3, #15
 80167dc:	68fa      	ldr	r2, [r7, #12]
 80167de:	fa22 f303 	lsr.w	r3, r2, r3
 80167e2:	01db      	lsls	r3, r3, #7
 80167e4:	b2db      	uxtb	r3, r3
 80167e6:	693a      	ldr	r2, [r7, #16]
 80167e8:	4313      	orrs	r3, r2
 80167ea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80167ec:	78fb      	ldrb	r3, [r7, #3]
 80167ee:	015a      	lsls	r2, r3, #5
 80167f0:	697b      	ldr	r3, [r7, #20]
 80167f2:	4413      	add	r3, r2
 80167f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80167f8:	689b      	ldr	r3, [r3, #8]
 80167fa:	693a      	ldr	r2, [r7, #16]
 80167fc:	4013      	ands	r3, r2
 80167fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8016800:	68bb      	ldr	r3, [r7, #8]
}
 8016802:	4618      	mov	r0, r3
 8016804:	371c      	adds	r7, #28
 8016806:	46bd      	mov	sp, r7
 8016808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801680c:	4770      	bx	lr

0801680e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801680e:	b480      	push	{r7}
 8016810:	b083      	sub	sp, #12
 8016812:	af00      	add	r7, sp, #0
 8016814:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	695b      	ldr	r3, [r3, #20]
 801681a:	f003 0301 	and.w	r3, r3, #1
}
 801681e:	4618      	mov	r0, r3
 8016820:	370c      	adds	r7, #12
 8016822:	46bd      	mov	sp, r7
 8016824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016828:	4770      	bx	lr

0801682a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801682a:	b480      	push	{r7}
 801682c:	b085      	sub	sp, #20
 801682e:	af00      	add	r7, sp, #0
 8016830:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	68fa      	ldr	r2, [r7, #12]
 8016840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016844:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8016848:	f023 0307 	bic.w	r3, r3, #7
 801684c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016854:	685b      	ldr	r3, [r3, #4]
 8016856:	68fa      	ldr	r2, [r7, #12]
 8016858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801685c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016860:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8016862:	2300      	movs	r3, #0
}
 8016864:	4618      	mov	r0, r3
 8016866:	3714      	adds	r7, #20
 8016868:	46bd      	mov	sp, r7
 801686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801686e:	4770      	bx	lr

08016870 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8016870:	b480      	push	{r7}
 8016872:	b085      	sub	sp, #20
 8016874:	af00      	add	r7, sp, #0
 8016876:	6078      	str	r0, [r7, #4]
 8016878:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	333c      	adds	r3, #60	; 0x3c
 8016882:	3304      	adds	r3, #4
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8016888:	68bb      	ldr	r3, [r7, #8]
 801688a:	4a1c      	ldr	r2, [pc, #112]	; (80168fc <USB_EP0_OutStart+0x8c>)
 801688c:	4293      	cmp	r3, r2
 801688e:	d90a      	bls.n	80168a6 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801689c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80168a0:	d101      	bne.n	80168a6 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80168a2:	2300      	movs	r3, #0
 80168a4:	e024      	b.n	80168f0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80168ac:	461a      	mov	r2, r3
 80168ae:	2300      	movs	r3, #0
 80168b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80168b8:	691b      	ldr	r3, [r3, #16]
 80168ba:	68fa      	ldr	r2, [r7, #12]
 80168bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80168c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80168c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80168cc:	691b      	ldr	r3, [r3, #16]
 80168ce:	68fa      	ldr	r2, [r7, #12]
 80168d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80168d4:	f043 0318 	orr.w	r3, r3, #24
 80168d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80168e0:	691b      	ldr	r3, [r3, #16]
 80168e2:	68fa      	ldr	r2, [r7, #12]
 80168e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80168e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80168ec:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80168ee:	2300      	movs	r3, #0
}
 80168f0:	4618      	mov	r0, r3
 80168f2:	3714      	adds	r7, #20
 80168f4:	46bd      	mov	sp, r7
 80168f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168fa:	4770      	bx	lr
 80168fc:	4f54300a 	.word	0x4f54300a

08016900 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8016900:	b480      	push	{r7}
 8016902:	b085      	sub	sp, #20
 8016904:	af00      	add	r7, sp, #0
 8016906:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8016908:	2300      	movs	r3, #0
 801690a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801690c:	68fb      	ldr	r3, [r7, #12]
 801690e:	3301      	adds	r3, #1
 8016910:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	4a13      	ldr	r2, [pc, #76]	; (8016964 <USB_CoreReset+0x64>)
 8016916:	4293      	cmp	r3, r2
 8016918:	d901      	bls.n	801691e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801691a:	2303      	movs	r3, #3
 801691c:	e01b      	b.n	8016956 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	691b      	ldr	r3, [r3, #16]
 8016922:	2b00      	cmp	r3, #0
 8016924:	daf2      	bge.n	801690c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8016926:	2300      	movs	r3, #0
 8016928:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	691b      	ldr	r3, [r3, #16]
 801692e:	f043 0201 	orr.w	r2, r3, #1
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	3301      	adds	r3, #1
 801693a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	4a09      	ldr	r2, [pc, #36]	; (8016964 <USB_CoreReset+0x64>)
 8016940:	4293      	cmp	r3, r2
 8016942:	d901      	bls.n	8016948 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8016944:	2303      	movs	r3, #3
 8016946:	e006      	b.n	8016956 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	691b      	ldr	r3, [r3, #16]
 801694c:	f003 0301 	and.w	r3, r3, #1
 8016950:	2b01      	cmp	r3, #1
 8016952:	d0f0      	beq.n	8016936 <USB_CoreReset+0x36>

  return HAL_OK;
 8016954:	2300      	movs	r3, #0
}
 8016956:	4618      	mov	r0, r3
 8016958:	3714      	adds	r7, #20
 801695a:	46bd      	mov	sp, r7
 801695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016960:	4770      	bx	lr
 8016962:	bf00      	nop
 8016964:	00030d40 	.word	0x00030d40

08016968 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016968:	b580      	push	{r7, lr}
 801696a:	b084      	sub	sp, #16
 801696c:	af00      	add	r7, sp, #0
 801696e:	6078      	str	r0, [r7, #4]
 8016970:	460b      	mov	r3, r1
 8016972:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8016974:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8016978:	f002 fa6c 	bl	8018e54 <USBD_static_malloc>
 801697c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	2b00      	cmp	r3, #0
 8016982:	d105      	bne.n	8016990 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	2200      	movs	r2, #0
 8016988:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801698c:	2302      	movs	r3, #2
 801698e:	e066      	b.n	8016a5e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	68fa      	ldr	r2, [r7, #12]
 8016994:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	7c1b      	ldrb	r3, [r3, #16]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d119      	bne.n	80169d4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80169a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80169a4:	2202      	movs	r2, #2
 80169a6:	2181      	movs	r1, #129	; 0x81
 80169a8:	6878      	ldr	r0, [r7, #4]
 80169aa:	f002 f83f 	bl	8018a2c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	2201      	movs	r2, #1
 80169b2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80169b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80169b8:	2202      	movs	r2, #2
 80169ba:	2101      	movs	r1, #1
 80169bc:	6878      	ldr	r0, [r7, #4]
 80169be:	f002 f835 	bl	8018a2c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	2201      	movs	r2, #1
 80169c6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	2210      	movs	r2, #16
 80169ce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80169d2:	e016      	b.n	8016a02 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80169d4:	2340      	movs	r3, #64	; 0x40
 80169d6:	2202      	movs	r2, #2
 80169d8:	2181      	movs	r1, #129	; 0x81
 80169da:	6878      	ldr	r0, [r7, #4]
 80169dc:	f002 f826 	bl	8018a2c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	2201      	movs	r2, #1
 80169e4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80169e6:	2340      	movs	r3, #64	; 0x40
 80169e8:	2202      	movs	r2, #2
 80169ea:	2101      	movs	r1, #1
 80169ec:	6878      	ldr	r0, [r7, #4]
 80169ee:	f002 f81d 	bl	8018a2c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	2201      	movs	r2, #1
 80169f6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	2210      	movs	r2, #16
 80169fe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8016a02:	2308      	movs	r3, #8
 8016a04:	2203      	movs	r2, #3
 8016a06:	2182      	movs	r1, #130	; 0x82
 8016a08:	6878      	ldr	r0, [r7, #4]
 8016a0a:	f002 f80f 	bl	8018a2c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	2201      	movs	r2, #1
 8016a12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	2200      	movs	r2, #0
 8016a24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	2200      	movs	r2, #0
 8016a2c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	7c1b      	ldrb	r3, [r3, #16]
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d109      	bne.n	8016a4c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016a3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016a42:	2101      	movs	r1, #1
 8016a44:	6878      	ldr	r0, [r7, #4]
 8016a46:	f002 f96b 	bl	8018d20 <USBD_LL_PrepareReceive>
 8016a4a:	e007      	b.n	8016a5c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016a52:	2340      	movs	r3, #64	; 0x40
 8016a54:	2101      	movs	r1, #1
 8016a56:	6878      	ldr	r0, [r7, #4]
 8016a58:	f002 f962 	bl	8018d20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016a5c:	2300      	movs	r3, #0
}
 8016a5e:	4618      	mov	r0, r3
 8016a60:	3710      	adds	r7, #16
 8016a62:	46bd      	mov	sp, r7
 8016a64:	bd80      	pop	{r7, pc}

08016a66 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016a66:	b580      	push	{r7, lr}
 8016a68:	b082      	sub	sp, #8
 8016a6a:	af00      	add	r7, sp, #0
 8016a6c:	6078      	str	r0, [r7, #4]
 8016a6e:	460b      	mov	r3, r1
 8016a70:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8016a72:	2181      	movs	r1, #129	; 0x81
 8016a74:	6878      	ldr	r0, [r7, #4]
 8016a76:	f002 f817 	bl	8018aa8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	2200      	movs	r2, #0
 8016a7e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8016a80:	2101      	movs	r1, #1
 8016a82:	6878      	ldr	r0, [r7, #4]
 8016a84:	f002 f810 	bl	8018aa8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	2200      	movs	r2, #0
 8016a8c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8016a90:	2182      	movs	r1, #130	; 0x82
 8016a92:	6878      	ldr	r0, [r7, #4]
 8016a94:	f002 f808 	bl	8018aa8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	2200      	movs	r2, #0
 8016a9c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	2200      	movs	r2, #0
 8016aa4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d00e      	beq.n	8016ad0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016ab8:	685b      	ldr	r3, [r3, #4]
 8016aba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	f002 f9d4 	bl	8018e70 <USBD_static_free>
    pdev->pClassData = NULL;
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	2200      	movs	r2, #0
 8016acc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8016ad0:	2300      	movs	r3, #0
}
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	3708      	adds	r7, #8
 8016ad6:	46bd      	mov	sp, r7
 8016ad8:	bd80      	pop	{r7, pc}
	...

08016adc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8016adc:	b580      	push	{r7, lr}
 8016ade:	b086      	sub	sp, #24
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	6078      	str	r0, [r7, #4]
 8016ae4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016aec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8016aee:	2300      	movs	r3, #0
 8016af0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8016af2:	2300      	movs	r3, #0
 8016af4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8016af6:	2300      	movs	r3, #0
 8016af8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8016afa:	693b      	ldr	r3, [r7, #16]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d101      	bne.n	8016b04 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8016b00:	2303      	movs	r3, #3
 8016b02:	e0af      	b.n	8016c64 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016b04:	683b      	ldr	r3, [r7, #0]
 8016b06:	781b      	ldrb	r3, [r3, #0]
 8016b08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d03f      	beq.n	8016b90 <USBD_CDC_Setup+0xb4>
 8016b10:	2b20      	cmp	r3, #32
 8016b12:	f040 809f 	bne.w	8016c54 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8016b16:	683b      	ldr	r3, [r7, #0]
 8016b18:	88db      	ldrh	r3, [r3, #6]
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d02e      	beq.n	8016b7c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8016b1e:	683b      	ldr	r3, [r7, #0]
 8016b20:	781b      	ldrb	r3, [r3, #0]
 8016b22:	b25b      	sxtb	r3, r3
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	da16      	bge.n	8016b56 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016b2e:	689b      	ldr	r3, [r3, #8]
 8016b30:	683a      	ldr	r2, [r7, #0]
 8016b32:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8016b34:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8016b36:	683a      	ldr	r2, [r7, #0]
 8016b38:	88d2      	ldrh	r2, [r2, #6]
 8016b3a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8016b3c:	683b      	ldr	r3, [r7, #0]
 8016b3e:	88db      	ldrh	r3, [r3, #6]
 8016b40:	2b07      	cmp	r3, #7
 8016b42:	bf28      	it	cs
 8016b44:	2307      	movcs	r3, #7
 8016b46:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8016b48:	693b      	ldr	r3, [r7, #16]
 8016b4a:	89fa      	ldrh	r2, [r7, #14]
 8016b4c:	4619      	mov	r1, r3
 8016b4e:	6878      	ldr	r0, [r7, #4]
 8016b50:	f001 fb13 	bl	801817a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8016b54:	e085      	b.n	8016c62 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8016b56:	683b      	ldr	r3, [r7, #0]
 8016b58:	785a      	ldrb	r2, [r3, #1]
 8016b5a:	693b      	ldr	r3, [r7, #16]
 8016b5c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8016b60:	683b      	ldr	r3, [r7, #0]
 8016b62:	88db      	ldrh	r3, [r3, #6]
 8016b64:	b2da      	uxtb	r2, r3
 8016b66:	693b      	ldr	r3, [r7, #16]
 8016b68:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8016b6c:	6939      	ldr	r1, [r7, #16]
 8016b6e:	683b      	ldr	r3, [r7, #0]
 8016b70:	88db      	ldrh	r3, [r3, #6]
 8016b72:	461a      	mov	r2, r3
 8016b74:	6878      	ldr	r0, [r7, #4]
 8016b76:	f001 fb2c 	bl	80181d2 <USBD_CtlPrepareRx>
      break;
 8016b7a:	e072      	b.n	8016c62 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016b82:	689b      	ldr	r3, [r3, #8]
 8016b84:	683a      	ldr	r2, [r7, #0]
 8016b86:	7850      	ldrb	r0, [r2, #1]
 8016b88:	2200      	movs	r2, #0
 8016b8a:	6839      	ldr	r1, [r7, #0]
 8016b8c:	4798      	blx	r3
      break;
 8016b8e:	e068      	b.n	8016c62 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016b90:	683b      	ldr	r3, [r7, #0]
 8016b92:	785b      	ldrb	r3, [r3, #1]
 8016b94:	2b0b      	cmp	r3, #11
 8016b96:	d852      	bhi.n	8016c3e <USBD_CDC_Setup+0x162>
 8016b98:	a201      	add	r2, pc, #4	; (adr r2, 8016ba0 <USBD_CDC_Setup+0xc4>)
 8016b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b9e:	bf00      	nop
 8016ba0:	08016bd1 	.word	0x08016bd1
 8016ba4:	08016c4d 	.word	0x08016c4d
 8016ba8:	08016c3f 	.word	0x08016c3f
 8016bac:	08016c3f 	.word	0x08016c3f
 8016bb0:	08016c3f 	.word	0x08016c3f
 8016bb4:	08016c3f 	.word	0x08016c3f
 8016bb8:	08016c3f 	.word	0x08016c3f
 8016bbc:	08016c3f 	.word	0x08016c3f
 8016bc0:	08016c3f 	.word	0x08016c3f
 8016bc4:	08016c3f 	.word	0x08016c3f
 8016bc8:	08016bfb 	.word	0x08016bfb
 8016bcc:	08016c25 	.word	0x08016c25
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016bd6:	b2db      	uxtb	r3, r3
 8016bd8:	2b03      	cmp	r3, #3
 8016bda:	d107      	bne.n	8016bec <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8016bdc:	f107 030a 	add.w	r3, r7, #10
 8016be0:	2202      	movs	r2, #2
 8016be2:	4619      	mov	r1, r3
 8016be4:	6878      	ldr	r0, [r7, #4]
 8016be6:	f001 fac8 	bl	801817a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016bea:	e032      	b.n	8016c52 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8016bec:	6839      	ldr	r1, [r7, #0]
 8016bee:	6878      	ldr	r0, [r7, #4]
 8016bf0:	f001 fa52 	bl	8018098 <USBD_CtlError>
            ret = USBD_FAIL;
 8016bf4:	2303      	movs	r3, #3
 8016bf6:	75fb      	strb	r3, [r7, #23]
          break;
 8016bf8:	e02b      	b.n	8016c52 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016c00:	b2db      	uxtb	r3, r3
 8016c02:	2b03      	cmp	r3, #3
 8016c04:	d107      	bne.n	8016c16 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8016c06:	f107 030d 	add.w	r3, r7, #13
 8016c0a:	2201      	movs	r2, #1
 8016c0c:	4619      	mov	r1, r3
 8016c0e:	6878      	ldr	r0, [r7, #4]
 8016c10:	f001 fab3 	bl	801817a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8016c14:	e01d      	b.n	8016c52 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8016c16:	6839      	ldr	r1, [r7, #0]
 8016c18:	6878      	ldr	r0, [r7, #4]
 8016c1a:	f001 fa3d 	bl	8018098 <USBD_CtlError>
            ret = USBD_FAIL;
 8016c1e:	2303      	movs	r3, #3
 8016c20:	75fb      	strb	r3, [r7, #23]
          break;
 8016c22:	e016      	b.n	8016c52 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016c2a:	b2db      	uxtb	r3, r3
 8016c2c:	2b03      	cmp	r3, #3
 8016c2e:	d00f      	beq.n	8016c50 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8016c30:	6839      	ldr	r1, [r7, #0]
 8016c32:	6878      	ldr	r0, [r7, #4]
 8016c34:	f001 fa30 	bl	8018098 <USBD_CtlError>
            ret = USBD_FAIL;
 8016c38:	2303      	movs	r3, #3
 8016c3a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8016c3c:	e008      	b.n	8016c50 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8016c3e:	6839      	ldr	r1, [r7, #0]
 8016c40:	6878      	ldr	r0, [r7, #4]
 8016c42:	f001 fa29 	bl	8018098 <USBD_CtlError>
          ret = USBD_FAIL;
 8016c46:	2303      	movs	r3, #3
 8016c48:	75fb      	strb	r3, [r7, #23]
          break;
 8016c4a:	e002      	b.n	8016c52 <USBD_CDC_Setup+0x176>
          break;
 8016c4c:	bf00      	nop
 8016c4e:	e008      	b.n	8016c62 <USBD_CDC_Setup+0x186>
          break;
 8016c50:	bf00      	nop
      }
      break;
 8016c52:	e006      	b.n	8016c62 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8016c54:	6839      	ldr	r1, [r7, #0]
 8016c56:	6878      	ldr	r0, [r7, #4]
 8016c58:	f001 fa1e 	bl	8018098 <USBD_CtlError>
      ret = USBD_FAIL;
 8016c5c:	2303      	movs	r3, #3
 8016c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8016c60:	bf00      	nop
  }

  return (uint8_t)ret;
 8016c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c64:	4618      	mov	r0, r3
 8016c66:	3718      	adds	r7, #24
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	bd80      	pop	{r7, pc}

08016c6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016c6c:	b580      	push	{r7, lr}
 8016c6e:	b084      	sub	sp, #16
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	6078      	str	r0, [r7, #4]
 8016c74:	460b      	mov	r3, r1
 8016c76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016c7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d101      	bne.n	8016c8e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8016c8a:	2303      	movs	r3, #3
 8016c8c:	e04f      	b.n	8016d2e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016c94:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8016c96:	78fa      	ldrb	r2, [r7, #3]
 8016c98:	6879      	ldr	r1, [r7, #4]
 8016c9a:	4613      	mov	r3, r2
 8016c9c:	009b      	lsls	r3, r3, #2
 8016c9e:	4413      	add	r3, r2
 8016ca0:	009b      	lsls	r3, r3, #2
 8016ca2:	440b      	add	r3, r1
 8016ca4:	3318      	adds	r3, #24
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d029      	beq.n	8016d00 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8016cac:	78fa      	ldrb	r2, [r7, #3]
 8016cae:	6879      	ldr	r1, [r7, #4]
 8016cb0:	4613      	mov	r3, r2
 8016cb2:	009b      	lsls	r3, r3, #2
 8016cb4:	4413      	add	r3, r2
 8016cb6:	009b      	lsls	r3, r3, #2
 8016cb8:	440b      	add	r3, r1
 8016cba:	3318      	adds	r3, #24
 8016cbc:	681a      	ldr	r2, [r3, #0]
 8016cbe:	78f9      	ldrb	r1, [r7, #3]
 8016cc0:	68f8      	ldr	r0, [r7, #12]
 8016cc2:	460b      	mov	r3, r1
 8016cc4:	00db      	lsls	r3, r3, #3
 8016cc6:	440b      	add	r3, r1
 8016cc8:	009b      	lsls	r3, r3, #2
 8016cca:	4403      	add	r3, r0
 8016ccc:	3348      	adds	r3, #72	; 0x48
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	fbb2 f1f3 	udiv	r1, r2, r3
 8016cd4:	fb01 f303 	mul.w	r3, r1, r3
 8016cd8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d110      	bne.n	8016d00 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8016cde:	78fa      	ldrb	r2, [r7, #3]
 8016ce0:	6879      	ldr	r1, [r7, #4]
 8016ce2:	4613      	mov	r3, r2
 8016ce4:	009b      	lsls	r3, r3, #2
 8016ce6:	4413      	add	r3, r2
 8016ce8:	009b      	lsls	r3, r3, #2
 8016cea:	440b      	add	r3, r1
 8016cec:	3318      	adds	r3, #24
 8016cee:	2200      	movs	r2, #0
 8016cf0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8016cf2:	78f9      	ldrb	r1, [r7, #3]
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	2200      	movs	r2, #0
 8016cf8:	6878      	ldr	r0, [r7, #4]
 8016cfa:	f001 ffd9 	bl	8018cb0 <USBD_LL_Transmit>
 8016cfe:	e015      	b.n	8016d2c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8016d00:	68bb      	ldr	r3, [r7, #8]
 8016d02:	2200      	movs	r2, #0
 8016d04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016d0e:	691b      	ldr	r3, [r3, #16]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d00b      	beq.n	8016d2c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016d1a:	691b      	ldr	r3, [r3, #16]
 8016d1c:	68ba      	ldr	r2, [r7, #8]
 8016d1e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8016d22:	68ba      	ldr	r2, [r7, #8]
 8016d24:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8016d28:	78fa      	ldrb	r2, [r7, #3]
 8016d2a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8016d2c:	2300      	movs	r3, #0
}
 8016d2e:	4618      	mov	r0, r3
 8016d30:	3710      	adds	r7, #16
 8016d32:	46bd      	mov	sp, r7
 8016d34:	bd80      	pop	{r7, pc}

08016d36 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8016d36:	b580      	push	{r7, lr}
 8016d38:	b084      	sub	sp, #16
 8016d3a:	af00      	add	r7, sp, #0
 8016d3c:	6078      	str	r0, [r7, #4]
 8016d3e:	460b      	mov	r3, r1
 8016d40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016d48:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d101      	bne.n	8016d58 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8016d54:	2303      	movs	r3, #3
 8016d56:	e015      	b.n	8016d84 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8016d58:	78fb      	ldrb	r3, [r7, #3]
 8016d5a:	4619      	mov	r1, r3
 8016d5c:	6878      	ldr	r0, [r7, #4]
 8016d5e:	f002 f817 	bl	8018d90 <USBD_LL_GetRxDataSize>
 8016d62:	4602      	mov	r2, r0
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016d70:	68db      	ldr	r3, [r3, #12]
 8016d72:	68fa      	ldr	r2, [r7, #12]
 8016d74:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8016d78:	68fa      	ldr	r2, [r7, #12]
 8016d7a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8016d7e:	4611      	mov	r1, r2
 8016d80:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8016d82:	2300      	movs	r3, #0
}
 8016d84:	4618      	mov	r0, r3
 8016d86:	3710      	adds	r7, #16
 8016d88:	46bd      	mov	sp, r7
 8016d8a:	bd80      	pop	{r7, pc}

08016d8c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b084      	sub	sp, #16
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016d9a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d101      	bne.n	8016da6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8016da2:	2303      	movs	r3, #3
 8016da4:	e01b      	b.n	8016dde <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d015      	beq.n	8016ddc <USBD_CDC_EP0_RxReady+0x50>
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8016db6:	2bff      	cmp	r3, #255	; 0xff
 8016db8:	d010      	beq.n	8016ddc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8016dc0:	689b      	ldr	r3, [r3, #8]
 8016dc2:	68fa      	ldr	r2, [r7, #12]
 8016dc4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8016dc8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8016dca:	68fa      	ldr	r2, [r7, #12]
 8016dcc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8016dd0:	b292      	uxth	r2, r2
 8016dd2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	22ff      	movs	r2, #255	; 0xff
 8016dd8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8016ddc:	2300      	movs	r3, #0
}
 8016dde:	4618      	mov	r0, r3
 8016de0:	3710      	adds	r7, #16
 8016de2:	46bd      	mov	sp, r7
 8016de4:	bd80      	pop	{r7, pc}
	...

08016de8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8016de8:	b480      	push	{r7}
 8016dea:	b083      	sub	sp, #12
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	2243      	movs	r2, #67	; 0x43
 8016df4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8016df6:	4b03      	ldr	r3, [pc, #12]	; (8016e04 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8016df8:	4618      	mov	r0, r3
 8016dfa:	370c      	adds	r7, #12
 8016dfc:	46bd      	mov	sp, r7
 8016dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e02:	4770      	bx	lr
 8016e04:	200005e0 	.word	0x200005e0

08016e08 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8016e08:	b480      	push	{r7}
 8016e0a:	b083      	sub	sp, #12
 8016e0c:	af00      	add	r7, sp, #0
 8016e0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	2243      	movs	r2, #67	; 0x43
 8016e14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8016e16:	4b03      	ldr	r3, [pc, #12]	; (8016e24 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8016e18:	4618      	mov	r0, r3
 8016e1a:	370c      	adds	r7, #12
 8016e1c:	46bd      	mov	sp, r7
 8016e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e22:	4770      	bx	lr
 8016e24:	2000059c 	.word	0x2000059c

08016e28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8016e28:	b480      	push	{r7}
 8016e2a:	b083      	sub	sp, #12
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	2243      	movs	r2, #67	; 0x43
 8016e34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8016e36:	4b03      	ldr	r3, [pc, #12]	; (8016e44 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8016e38:	4618      	mov	r0, r3
 8016e3a:	370c      	adds	r7, #12
 8016e3c:	46bd      	mov	sp, r7
 8016e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e42:	4770      	bx	lr
 8016e44:	20000624 	.word	0x20000624

08016e48 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8016e48:	b480      	push	{r7}
 8016e4a:	b083      	sub	sp, #12
 8016e4c:	af00      	add	r7, sp, #0
 8016e4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	220a      	movs	r2, #10
 8016e54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8016e56:	4b03      	ldr	r3, [pc, #12]	; (8016e64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8016e58:	4618      	mov	r0, r3
 8016e5a:	370c      	adds	r7, #12
 8016e5c:	46bd      	mov	sp, r7
 8016e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e62:	4770      	bx	lr
 8016e64:	20000558 	.word	0x20000558

08016e68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8016e68:	b480      	push	{r7}
 8016e6a:	b083      	sub	sp, #12
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	6078      	str	r0, [r7, #4]
 8016e70:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8016e72:	683b      	ldr	r3, [r7, #0]
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d101      	bne.n	8016e7c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8016e78:	2303      	movs	r3, #3
 8016e7a:	e004      	b.n	8016e86 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	683a      	ldr	r2, [r7, #0]
 8016e80:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8016e84:	2300      	movs	r3, #0
}
 8016e86:	4618      	mov	r0, r3
 8016e88:	370c      	adds	r7, #12
 8016e8a:	46bd      	mov	sp, r7
 8016e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e90:	4770      	bx	lr

08016e92 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8016e92:	b480      	push	{r7}
 8016e94:	b087      	sub	sp, #28
 8016e96:	af00      	add	r7, sp, #0
 8016e98:	60f8      	str	r0, [r7, #12]
 8016e9a:	60b9      	str	r1, [r7, #8]
 8016e9c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016ea4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8016ea6:	697b      	ldr	r3, [r7, #20]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d101      	bne.n	8016eb0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8016eac:	2303      	movs	r3, #3
 8016eae:	e008      	b.n	8016ec2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8016eb0:	697b      	ldr	r3, [r7, #20]
 8016eb2:	68ba      	ldr	r2, [r7, #8]
 8016eb4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8016eb8:	697b      	ldr	r3, [r7, #20]
 8016eba:	687a      	ldr	r2, [r7, #4]
 8016ebc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8016ec0:	2300      	movs	r3, #0
}
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	371c      	adds	r7, #28
 8016ec6:	46bd      	mov	sp, r7
 8016ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ecc:	4770      	bx	lr

08016ece <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8016ece:	b480      	push	{r7}
 8016ed0:	b085      	sub	sp, #20
 8016ed2:	af00      	add	r7, sp, #0
 8016ed4:	6078      	str	r0, [r7, #4]
 8016ed6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016ede:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d101      	bne.n	8016eea <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8016ee6:	2303      	movs	r3, #3
 8016ee8:	e004      	b.n	8016ef4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	683a      	ldr	r2, [r7, #0]
 8016eee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8016ef2:	2300      	movs	r3, #0
}
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	3714      	adds	r7, #20
 8016ef8:	46bd      	mov	sp, r7
 8016efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016efe:	4770      	bx	lr

08016f00 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8016f00:	b580      	push	{r7, lr}
 8016f02:	b084      	sub	sp, #16
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016f0e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	d101      	bne.n	8016f1e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8016f1a:	2303      	movs	r3, #3
 8016f1c:	e016      	b.n	8016f4c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	7c1b      	ldrb	r3, [r3, #16]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d109      	bne.n	8016f3a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016f2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016f30:	2101      	movs	r1, #1
 8016f32:	6878      	ldr	r0, [r7, #4]
 8016f34:	f001 fef4 	bl	8018d20 <USBD_LL_PrepareReceive>
 8016f38:	e007      	b.n	8016f4a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8016f40:	2340      	movs	r3, #64	; 0x40
 8016f42:	2101      	movs	r1, #1
 8016f44:	6878      	ldr	r0, [r7, #4]
 8016f46:	f001 feeb 	bl	8018d20 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8016f4a:	2300      	movs	r3, #0
}
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	3710      	adds	r7, #16
 8016f50:	46bd      	mov	sp, r7
 8016f52:	bd80      	pop	{r7, pc}

08016f54 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016f54:	b580      	push	{r7, lr}
 8016f56:	b086      	sub	sp, #24
 8016f58:	af00      	add	r7, sp, #0
 8016f5a:	60f8      	str	r0, [r7, #12]
 8016f5c:	60b9      	str	r1, [r7, #8]
 8016f5e:	4613      	mov	r3, r2
 8016f60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d101      	bne.n	8016f6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8016f68:	2303      	movs	r3, #3
 8016f6a:	e01f      	b.n	8016fac <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	2200      	movs	r2, #0
 8016f70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	2200      	movs	r2, #0
 8016f78:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	2200      	movs	r2, #0
 8016f80:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016f84:	68bb      	ldr	r3, [r7, #8]
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d003      	beq.n	8016f92 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	68ba      	ldr	r2, [r7, #8]
 8016f8e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	2201      	movs	r2, #1
 8016f96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	79fa      	ldrb	r2, [r7, #7]
 8016f9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016fa0:	68f8      	ldr	r0, [r7, #12]
 8016fa2:	f001 fcc5 	bl	8018930 <USBD_LL_Init>
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8016faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8016fac:	4618      	mov	r0, r3
 8016fae:	3718      	adds	r7, #24
 8016fb0:	46bd      	mov	sp, r7
 8016fb2:	bd80      	pop	{r7, pc}

08016fb4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016fb4:	b580      	push	{r7, lr}
 8016fb6:	b084      	sub	sp, #16
 8016fb8:	af00      	add	r7, sp, #0
 8016fba:	6078      	str	r0, [r7, #4]
 8016fbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016fbe:	2300      	movs	r3, #0
 8016fc0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8016fc2:	683b      	ldr	r3, [r7, #0]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d101      	bne.n	8016fcc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8016fc8:	2303      	movs	r3, #3
 8016fca:	e016      	b.n	8016ffa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	683a      	ldr	r2, [r7, #0]
 8016fd0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d00b      	beq.n	8016ff8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fe8:	f107 020e 	add.w	r2, r7, #14
 8016fec:	4610      	mov	r0, r2
 8016fee:	4798      	blx	r3
 8016ff0:	4602      	mov	r2, r0
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8016ff8:	2300      	movs	r3, #0
}
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	3710      	adds	r7, #16
 8016ffe:	46bd      	mov	sp, r7
 8017000:	bd80      	pop	{r7, pc}

08017002 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8017002:	b580      	push	{r7, lr}
 8017004:	b082      	sub	sp, #8
 8017006:	af00      	add	r7, sp, #0
 8017008:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801700a:	6878      	ldr	r0, [r7, #4]
 801700c:	f001 fcdc 	bl	80189c8 <USBD_LL_Start>
 8017010:	4603      	mov	r3, r0
}
 8017012:	4618      	mov	r0, r3
 8017014:	3708      	adds	r7, #8
 8017016:	46bd      	mov	sp, r7
 8017018:	bd80      	pop	{r7, pc}

0801701a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801701a:	b480      	push	{r7}
 801701c:	b083      	sub	sp, #12
 801701e:	af00      	add	r7, sp, #0
 8017020:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017022:	2300      	movs	r3, #0
}
 8017024:	4618      	mov	r0, r3
 8017026:	370c      	adds	r7, #12
 8017028:	46bd      	mov	sp, r7
 801702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801702e:	4770      	bx	lr

08017030 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017030:	b580      	push	{r7, lr}
 8017032:	b084      	sub	sp, #16
 8017034:	af00      	add	r7, sp, #0
 8017036:	6078      	str	r0, [r7, #4]
 8017038:	460b      	mov	r3, r1
 801703a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801703c:	2303      	movs	r3, #3
 801703e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017046:	2b00      	cmp	r3, #0
 8017048:	d009      	beq.n	801705e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	78fa      	ldrb	r2, [r7, #3]
 8017054:	4611      	mov	r1, r2
 8017056:	6878      	ldr	r0, [r7, #4]
 8017058:	4798      	blx	r3
 801705a:	4603      	mov	r3, r0
 801705c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801705e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017060:	4618      	mov	r0, r3
 8017062:	3710      	adds	r7, #16
 8017064:	46bd      	mov	sp, r7
 8017066:	bd80      	pop	{r7, pc}

08017068 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017068:	b580      	push	{r7, lr}
 801706a:	b082      	sub	sp, #8
 801706c:	af00      	add	r7, sp, #0
 801706e:	6078      	str	r0, [r7, #4]
 8017070:	460b      	mov	r3, r1
 8017072:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801707a:	2b00      	cmp	r3, #0
 801707c:	d007      	beq.n	801708e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017084:	685b      	ldr	r3, [r3, #4]
 8017086:	78fa      	ldrb	r2, [r7, #3]
 8017088:	4611      	mov	r1, r2
 801708a:	6878      	ldr	r0, [r7, #4]
 801708c:	4798      	blx	r3
  }

  return USBD_OK;
 801708e:	2300      	movs	r3, #0
}
 8017090:	4618      	mov	r0, r3
 8017092:	3708      	adds	r7, #8
 8017094:	46bd      	mov	sp, r7
 8017096:	bd80      	pop	{r7, pc}

08017098 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8017098:	b580      	push	{r7, lr}
 801709a:	b084      	sub	sp, #16
 801709c:	af00      	add	r7, sp, #0
 801709e:	6078      	str	r0, [r7, #4]
 80170a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80170a8:	6839      	ldr	r1, [r7, #0]
 80170aa:	4618      	mov	r0, r3
 80170ac:	f000 ffba 	bl	8018024 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	2201      	movs	r2, #1
 80170b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80170be:	461a      	mov	r2, r3
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80170cc:	f003 031f 	and.w	r3, r3, #31
 80170d0:	2b02      	cmp	r3, #2
 80170d2:	d01a      	beq.n	801710a <USBD_LL_SetupStage+0x72>
 80170d4:	2b02      	cmp	r3, #2
 80170d6:	d822      	bhi.n	801711e <USBD_LL_SetupStage+0x86>
 80170d8:	2b00      	cmp	r3, #0
 80170da:	d002      	beq.n	80170e2 <USBD_LL_SetupStage+0x4a>
 80170dc:	2b01      	cmp	r3, #1
 80170de:	d00a      	beq.n	80170f6 <USBD_LL_SetupStage+0x5e>
 80170e0:	e01d      	b.n	801711e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80170e8:	4619      	mov	r1, r3
 80170ea:	6878      	ldr	r0, [r7, #4]
 80170ec:	f000 fa62 	bl	80175b4 <USBD_StdDevReq>
 80170f0:	4603      	mov	r3, r0
 80170f2:	73fb      	strb	r3, [r7, #15]
      break;
 80170f4:	e020      	b.n	8017138 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80170f6:	687b      	ldr	r3, [r7, #4]
 80170f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80170fc:	4619      	mov	r1, r3
 80170fe:	6878      	ldr	r0, [r7, #4]
 8017100:	f000 fac6 	bl	8017690 <USBD_StdItfReq>
 8017104:	4603      	mov	r3, r0
 8017106:	73fb      	strb	r3, [r7, #15]
      break;
 8017108:	e016      	b.n	8017138 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8017110:	4619      	mov	r1, r3
 8017112:	6878      	ldr	r0, [r7, #4]
 8017114:	f000 fb05 	bl	8017722 <USBD_StdEPReq>
 8017118:	4603      	mov	r3, r0
 801711a:	73fb      	strb	r3, [r7, #15]
      break;
 801711c:	e00c      	b.n	8017138 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8017124:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8017128:	b2db      	uxtb	r3, r3
 801712a:	4619      	mov	r1, r3
 801712c:	6878      	ldr	r0, [r7, #4]
 801712e:	f001 fcf1 	bl	8018b14 <USBD_LL_StallEP>
 8017132:	4603      	mov	r3, r0
 8017134:	73fb      	strb	r3, [r7, #15]
      break;
 8017136:	bf00      	nop
  }

  return ret;
 8017138:	7bfb      	ldrb	r3, [r7, #15]
}
 801713a:	4618      	mov	r0, r3
 801713c:	3710      	adds	r7, #16
 801713e:	46bd      	mov	sp, r7
 8017140:	bd80      	pop	{r7, pc}

08017142 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8017142:	b580      	push	{r7, lr}
 8017144:	b086      	sub	sp, #24
 8017146:	af00      	add	r7, sp, #0
 8017148:	60f8      	str	r0, [r7, #12]
 801714a:	460b      	mov	r3, r1
 801714c:	607a      	str	r2, [r7, #4]
 801714e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8017150:	7afb      	ldrb	r3, [r7, #11]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d138      	bne.n	80171c8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801715c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8017164:	2b03      	cmp	r3, #3
 8017166:	d14a      	bne.n	80171fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8017168:	693b      	ldr	r3, [r7, #16]
 801716a:	689a      	ldr	r2, [r3, #8]
 801716c:	693b      	ldr	r3, [r7, #16]
 801716e:	68db      	ldr	r3, [r3, #12]
 8017170:	429a      	cmp	r2, r3
 8017172:	d913      	bls.n	801719c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8017174:	693b      	ldr	r3, [r7, #16]
 8017176:	689a      	ldr	r2, [r3, #8]
 8017178:	693b      	ldr	r3, [r7, #16]
 801717a:	68db      	ldr	r3, [r3, #12]
 801717c:	1ad2      	subs	r2, r2, r3
 801717e:	693b      	ldr	r3, [r7, #16]
 8017180:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8017182:	693b      	ldr	r3, [r7, #16]
 8017184:	68da      	ldr	r2, [r3, #12]
 8017186:	693b      	ldr	r3, [r7, #16]
 8017188:	689b      	ldr	r3, [r3, #8]
 801718a:	4293      	cmp	r3, r2
 801718c:	bf28      	it	cs
 801718e:	4613      	movcs	r3, r2
 8017190:	461a      	mov	r2, r3
 8017192:	6879      	ldr	r1, [r7, #4]
 8017194:	68f8      	ldr	r0, [r7, #12]
 8017196:	f001 f839 	bl	801820c <USBD_CtlContinueRx>
 801719a:	e030      	b.n	80171fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80171a2:	b2db      	uxtb	r3, r3
 80171a4:	2b03      	cmp	r3, #3
 80171a6:	d10b      	bne.n	80171c0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80171ae:	691b      	ldr	r3, [r3, #16]
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d005      	beq.n	80171c0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80171ba:	691b      	ldr	r3, [r3, #16]
 80171bc:	68f8      	ldr	r0, [r7, #12]
 80171be:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80171c0:	68f8      	ldr	r0, [r7, #12]
 80171c2:	f001 f834 	bl	801822e <USBD_CtlSendStatus>
 80171c6:	e01a      	b.n	80171fe <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80171ce:	b2db      	uxtb	r3, r3
 80171d0:	2b03      	cmp	r3, #3
 80171d2:	d114      	bne.n	80171fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80171da:	699b      	ldr	r3, [r3, #24]
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d00e      	beq.n	80171fe <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80171e6:	699b      	ldr	r3, [r3, #24]
 80171e8:	7afa      	ldrb	r2, [r7, #11]
 80171ea:	4611      	mov	r1, r2
 80171ec:	68f8      	ldr	r0, [r7, #12]
 80171ee:	4798      	blx	r3
 80171f0:	4603      	mov	r3, r0
 80171f2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80171f4:	7dfb      	ldrb	r3, [r7, #23]
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d001      	beq.n	80171fe <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80171fa:	7dfb      	ldrb	r3, [r7, #23]
 80171fc:	e000      	b.n	8017200 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80171fe:	2300      	movs	r3, #0
}
 8017200:	4618      	mov	r0, r3
 8017202:	3718      	adds	r7, #24
 8017204:	46bd      	mov	sp, r7
 8017206:	bd80      	pop	{r7, pc}

08017208 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8017208:	b580      	push	{r7, lr}
 801720a:	b086      	sub	sp, #24
 801720c:	af00      	add	r7, sp, #0
 801720e:	60f8      	str	r0, [r7, #12]
 8017210:	460b      	mov	r3, r1
 8017212:	607a      	str	r2, [r7, #4]
 8017214:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8017216:	7afb      	ldrb	r3, [r7, #11]
 8017218:	2b00      	cmp	r3, #0
 801721a:	d16b      	bne.n	80172f4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	3314      	adds	r3, #20
 8017220:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8017222:	68fb      	ldr	r3, [r7, #12]
 8017224:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8017228:	2b02      	cmp	r3, #2
 801722a:	d156      	bne.n	80172da <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801722c:	693b      	ldr	r3, [r7, #16]
 801722e:	689a      	ldr	r2, [r3, #8]
 8017230:	693b      	ldr	r3, [r7, #16]
 8017232:	68db      	ldr	r3, [r3, #12]
 8017234:	429a      	cmp	r2, r3
 8017236:	d914      	bls.n	8017262 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8017238:	693b      	ldr	r3, [r7, #16]
 801723a:	689a      	ldr	r2, [r3, #8]
 801723c:	693b      	ldr	r3, [r7, #16]
 801723e:	68db      	ldr	r3, [r3, #12]
 8017240:	1ad2      	subs	r2, r2, r3
 8017242:	693b      	ldr	r3, [r7, #16]
 8017244:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8017246:	693b      	ldr	r3, [r7, #16]
 8017248:	689b      	ldr	r3, [r3, #8]
 801724a:	461a      	mov	r2, r3
 801724c:	6879      	ldr	r1, [r7, #4]
 801724e:	68f8      	ldr	r0, [r7, #12]
 8017250:	f000 ffae 	bl	80181b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017254:	2300      	movs	r3, #0
 8017256:	2200      	movs	r2, #0
 8017258:	2100      	movs	r1, #0
 801725a:	68f8      	ldr	r0, [r7, #12]
 801725c:	f001 fd60 	bl	8018d20 <USBD_LL_PrepareReceive>
 8017260:	e03b      	b.n	80172da <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8017262:	693b      	ldr	r3, [r7, #16]
 8017264:	68da      	ldr	r2, [r3, #12]
 8017266:	693b      	ldr	r3, [r7, #16]
 8017268:	689b      	ldr	r3, [r3, #8]
 801726a:	429a      	cmp	r2, r3
 801726c:	d11c      	bne.n	80172a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801726e:	693b      	ldr	r3, [r7, #16]
 8017270:	685a      	ldr	r2, [r3, #4]
 8017272:	693b      	ldr	r3, [r7, #16]
 8017274:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8017276:	429a      	cmp	r2, r3
 8017278:	d316      	bcc.n	80172a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801727a:	693b      	ldr	r3, [r7, #16]
 801727c:	685a      	ldr	r2, [r3, #4]
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8017284:	429a      	cmp	r2, r3
 8017286:	d20f      	bcs.n	80172a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8017288:	2200      	movs	r2, #0
 801728a:	2100      	movs	r1, #0
 801728c:	68f8      	ldr	r0, [r7, #12]
 801728e:	f000 ff8f 	bl	80181b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	2200      	movs	r2, #0
 8017296:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801729a:	2300      	movs	r3, #0
 801729c:	2200      	movs	r2, #0
 801729e:	2100      	movs	r1, #0
 80172a0:	68f8      	ldr	r0, [r7, #12]
 80172a2:	f001 fd3d 	bl	8018d20 <USBD_LL_PrepareReceive>
 80172a6:	e018      	b.n	80172da <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80172ae:	b2db      	uxtb	r3, r3
 80172b0:	2b03      	cmp	r3, #3
 80172b2:	d10b      	bne.n	80172cc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80172ba:	68db      	ldr	r3, [r3, #12]
 80172bc:	2b00      	cmp	r3, #0
 80172be:	d005      	beq.n	80172cc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80172c6:	68db      	ldr	r3, [r3, #12]
 80172c8:	68f8      	ldr	r0, [r7, #12]
 80172ca:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80172cc:	2180      	movs	r1, #128	; 0x80
 80172ce:	68f8      	ldr	r0, [r7, #12]
 80172d0:	f001 fc20 	bl	8018b14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80172d4:	68f8      	ldr	r0, [r7, #12]
 80172d6:	f000 ffbd 	bl	8018254 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80172da:	68fb      	ldr	r3, [r7, #12]
 80172dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80172e0:	2b01      	cmp	r3, #1
 80172e2:	d122      	bne.n	801732a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80172e4:	68f8      	ldr	r0, [r7, #12]
 80172e6:	f7ff fe98 	bl	801701a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	2200      	movs	r2, #0
 80172ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80172f2:	e01a      	b.n	801732a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80172fa:	b2db      	uxtb	r3, r3
 80172fc:	2b03      	cmp	r3, #3
 80172fe:	d114      	bne.n	801732a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017306:	695b      	ldr	r3, [r3, #20]
 8017308:	2b00      	cmp	r3, #0
 801730a:	d00e      	beq.n	801732a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801730c:	68fb      	ldr	r3, [r7, #12]
 801730e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017312:	695b      	ldr	r3, [r3, #20]
 8017314:	7afa      	ldrb	r2, [r7, #11]
 8017316:	4611      	mov	r1, r2
 8017318:	68f8      	ldr	r0, [r7, #12]
 801731a:	4798      	blx	r3
 801731c:	4603      	mov	r3, r0
 801731e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8017320:	7dfb      	ldrb	r3, [r7, #23]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d001      	beq.n	801732a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8017326:	7dfb      	ldrb	r3, [r7, #23]
 8017328:	e000      	b.n	801732c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801732a:	2300      	movs	r3, #0
}
 801732c:	4618      	mov	r0, r3
 801732e:	3718      	adds	r7, #24
 8017330:	46bd      	mov	sp, r7
 8017332:	bd80      	pop	{r7, pc}

08017334 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8017334:	b580      	push	{r7, lr}
 8017336:	b082      	sub	sp, #8
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	2201      	movs	r2, #1
 8017340:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	2200      	movs	r2, #0
 8017348:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	2200      	movs	r2, #0
 8017350:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	2200      	movs	r2, #0
 8017356:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017360:	2b00      	cmp	r3, #0
 8017362:	d101      	bne.n	8017368 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8017364:	2303      	movs	r3, #3
 8017366:	e02f      	b.n	80173c8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801736e:	2b00      	cmp	r3, #0
 8017370:	d00f      	beq.n	8017392 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017378:	685b      	ldr	r3, [r3, #4]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d009      	beq.n	8017392 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017384:	685b      	ldr	r3, [r3, #4]
 8017386:	687a      	ldr	r2, [r7, #4]
 8017388:	6852      	ldr	r2, [r2, #4]
 801738a:	b2d2      	uxtb	r2, r2
 801738c:	4611      	mov	r1, r2
 801738e:	6878      	ldr	r0, [r7, #4]
 8017390:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8017392:	2340      	movs	r3, #64	; 0x40
 8017394:	2200      	movs	r2, #0
 8017396:	2100      	movs	r1, #0
 8017398:	6878      	ldr	r0, [r7, #4]
 801739a:	f001 fb47 	bl	8018a2c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	2201      	movs	r2, #1
 80173a2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	2240      	movs	r2, #64	; 0x40
 80173aa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80173ae:	2340      	movs	r3, #64	; 0x40
 80173b0:	2200      	movs	r2, #0
 80173b2:	2180      	movs	r1, #128	; 0x80
 80173b4:	6878      	ldr	r0, [r7, #4]
 80173b6:	f001 fb39 	bl	8018a2c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	2201      	movs	r2, #1
 80173be:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	2240      	movs	r2, #64	; 0x40
 80173c4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80173c6:	2300      	movs	r3, #0
}
 80173c8:	4618      	mov	r0, r3
 80173ca:	3708      	adds	r7, #8
 80173cc:	46bd      	mov	sp, r7
 80173ce:	bd80      	pop	{r7, pc}

080173d0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80173d0:	b480      	push	{r7}
 80173d2:	b083      	sub	sp, #12
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
 80173d8:	460b      	mov	r3, r1
 80173da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	78fa      	ldrb	r2, [r7, #3]
 80173e0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80173e2:	2300      	movs	r3, #0
}
 80173e4:	4618      	mov	r0, r3
 80173e6:	370c      	adds	r7, #12
 80173e8:	46bd      	mov	sp, r7
 80173ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ee:	4770      	bx	lr

080173f0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80173f0:	b480      	push	{r7}
 80173f2:	b083      	sub	sp, #12
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80173fe:	b2da      	uxtb	r2, r3
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	2204      	movs	r2, #4
 801740a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801740e:	2300      	movs	r3, #0
}
 8017410:	4618      	mov	r0, r3
 8017412:	370c      	adds	r7, #12
 8017414:	46bd      	mov	sp, r7
 8017416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801741a:	4770      	bx	lr

0801741c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801741c:	b480      	push	{r7}
 801741e:	b083      	sub	sp, #12
 8017420:	af00      	add	r7, sp, #0
 8017422:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801742a:	b2db      	uxtb	r3, r3
 801742c:	2b04      	cmp	r3, #4
 801742e:	d106      	bne.n	801743e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8017436:	b2da      	uxtb	r2, r3
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801743e:	2300      	movs	r3, #0
}
 8017440:	4618      	mov	r0, r3
 8017442:	370c      	adds	r7, #12
 8017444:	46bd      	mov	sp, r7
 8017446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801744a:	4770      	bx	lr

0801744c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801744c:	b580      	push	{r7, lr}
 801744e:	b082      	sub	sp, #8
 8017450:	af00      	add	r7, sp, #0
 8017452:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801745a:	2b00      	cmp	r3, #0
 801745c:	d101      	bne.n	8017462 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801745e:	2303      	movs	r3, #3
 8017460:	e012      	b.n	8017488 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017468:	b2db      	uxtb	r3, r3
 801746a:	2b03      	cmp	r3, #3
 801746c:	d10b      	bne.n	8017486 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017474:	69db      	ldr	r3, [r3, #28]
 8017476:	2b00      	cmp	r3, #0
 8017478:	d005      	beq.n	8017486 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017480:	69db      	ldr	r3, [r3, #28]
 8017482:	6878      	ldr	r0, [r7, #4]
 8017484:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8017486:	2300      	movs	r3, #0
}
 8017488:	4618      	mov	r0, r3
 801748a:	3708      	adds	r7, #8
 801748c:	46bd      	mov	sp, r7
 801748e:	bd80      	pop	{r7, pc}

08017490 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8017490:	b580      	push	{r7, lr}
 8017492:	b082      	sub	sp, #8
 8017494:	af00      	add	r7, sp, #0
 8017496:	6078      	str	r0, [r7, #4]
 8017498:	460b      	mov	r3, r1
 801749a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d101      	bne.n	80174aa <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80174a6:	2303      	movs	r3, #3
 80174a8:	e014      	b.n	80174d4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80174b0:	b2db      	uxtb	r3, r3
 80174b2:	2b03      	cmp	r3, #3
 80174b4:	d10d      	bne.n	80174d2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80174bc:	6a1b      	ldr	r3, [r3, #32]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d007      	beq.n	80174d2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80174c8:	6a1b      	ldr	r3, [r3, #32]
 80174ca:	78fa      	ldrb	r2, [r7, #3]
 80174cc:	4611      	mov	r1, r2
 80174ce:	6878      	ldr	r0, [r7, #4]
 80174d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80174d2:	2300      	movs	r3, #0
}
 80174d4:	4618      	mov	r0, r3
 80174d6:	3708      	adds	r7, #8
 80174d8:	46bd      	mov	sp, r7
 80174da:	bd80      	pop	{r7, pc}

080174dc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80174dc:	b580      	push	{r7, lr}
 80174de:	b082      	sub	sp, #8
 80174e0:	af00      	add	r7, sp, #0
 80174e2:	6078      	str	r0, [r7, #4]
 80174e4:	460b      	mov	r3, r1
 80174e6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d101      	bne.n	80174f6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80174f2:	2303      	movs	r3, #3
 80174f4:	e014      	b.n	8017520 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80174fc:	b2db      	uxtb	r3, r3
 80174fe:	2b03      	cmp	r3, #3
 8017500:	d10d      	bne.n	801751e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801750a:	2b00      	cmp	r3, #0
 801750c:	d007      	beq.n	801751e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017516:	78fa      	ldrb	r2, [r7, #3]
 8017518:	4611      	mov	r1, r2
 801751a:	6878      	ldr	r0, [r7, #4]
 801751c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801751e:	2300      	movs	r3, #0
}
 8017520:	4618      	mov	r0, r3
 8017522:	3708      	adds	r7, #8
 8017524:	46bd      	mov	sp, r7
 8017526:	bd80      	pop	{r7, pc}

08017528 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8017528:	b480      	push	{r7}
 801752a:	b083      	sub	sp, #12
 801752c:	af00      	add	r7, sp, #0
 801752e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017530:	2300      	movs	r3, #0
}
 8017532:	4618      	mov	r0, r3
 8017534:	370c      	adds	r7, #12
 8017536:	46bd      	mov	sp, r7
 8017538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801753c:	4770      	bx	lr

0801753e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801753e:	b580      	push	{r7, lr}
 8017540:	b082      	sub	sp, #8
 8017542:	af00      	add	r7, sp, #0
 8017544:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	2201      	movs	r2, #1
 801754a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017554:	2b00      	cmp	r3, #0
 8017556:	d009      	beq.n	801756c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801755e:	685b      	ldr	r3, [r3, #4]
 8017560:	687a      	ldr	r2, [r7, #4]
 8017562:	6852      	ldr	r2, [r2, #4]
 8017564:	b2d2      	uxtb	r2, r2
 8017566:	4611      	mov	r1, r2
 8017568:	6878      	ldr	r0, [r7, #4]
 801756a:	4798      	blx	r3
  }

  return USBD_OK;
 801756c:	2300      	movs	r3, #0
}
 801756e:	4618      	mov	r0, r3
 8017570:	3708      	adds	r7, #8
 8017572:	46bd      	mov	sp, r7
 8017574:	bd80      	pop	{r7, pc}

08017576 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8017576:	b480      	push	{r7}
 8017578:	b087      	sub	sp, #28
 801757a:	af00      	add	r7, sp, #0
 801757c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8017582:	697b      	ldr	r3, [r7, #20]
 8017584:	781b      	ldrb	r3, [r3, #0]
 8017586:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8017588:	697b      	ldr	r3, [r7, #20]
 801758a:	3301      	adds	r3, #1
 801758c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801758e:	697b      	ldr	r3, [r7, #20]
 8017590:	781b      	ldrb	r3, [r3, #0]
 8017592:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8017594:	8a3b      	ldrh	r3, [r7, #16]
 8017596:	021b      	lsls	r3, r3, #8
 8017598:	b21a      	sxth	r2, r3
 801759a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801759e:	4313      	orrs	r3, r2
 80175a0:	b21b      	sxth	r3, r3
 80175a2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80175a4:	89fb      	ldrh	r3, [r7, #14]
}
 80175a6:	4618      	mov	r0, r3
 80175a8:	371c      	adds	r7, #28
 80175aa:	46bd      	mov	sp, r7
 80175ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b0:	4770      	bx	lr
	...

080175b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80175b4:	b580      	push	{r7, lr}
 80175b6:	b084      	sub	sp, #16
 80175b8:	af00      	add	r7, sp, #0
 80175ba:	6078      	str	r0, [r7, #4]
 80175bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80175be:	2300      	movs	r3, #0
 80175c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80175c2:	683b      	ldr	r3, [r7, #0]
 80175c4:	781b      	ldrb	r3, [r3, #0]
 80175c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80175ca:	2b40      	cmp	r3, #64	; 0x40
 80175cc:	d005      	beq.n	80175da <USBD_StdDevReq+0x26>
 80175ce:	2b40      	cmp	r3, #64	; 0x40
 80175d0:	d853      	bhi.n	801767a <USBD_StdDevReq+0xc6>
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d00b      	beq.n	80175ee <USBD_StdDevReq+0x3a>
 80175d6:	2b20      	cmp	r3, #32
 80175d8:	d14f      	bne.n	801767a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80175e0:	689b      	ldr	r3, [r3, #8]
 80175e2:	6839      	ldr	r1, [r7, #0]
 80175e4:	6878      	ldr	r0, [r7, #4]
 80175e6:	4798      	blx	r3
 80175e8:	4603      	mov	r3, r0
 80175ea:	73fb      	strb	r3, [r7, #15]
      break;
 80175ec:	e04a      	b.n	8017684 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80175ee:	683b      	ldr	r3, [r7, #0]
 80175f0:	785b      	ldrb	r3, [r3, #1]
 80175f2:	2b09      	cmp	r3, #9
 80175f4:	d83b      	bhi.n	801766e <USBD_StdDevReq+0xba>
 80175f6:	a201      	add	r2, pc, #4	; (adr r2, 80175fc <USBD_StdDevReq+0x48>)
 80175f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80175fc:	08017651 	.word	0x08017651
 8017600:	08017665 	.word	0x08017665
 8017604:	0801766f 	.word	0x0801766f
 8017608:	0801765b 	.word	0x0801765b
 801760c:	0801766f 	.word	0x0801766f
 8017610:	0801762f 	.word	0x0801762f
 8017614:	08017625 	.word	0x08017625
 8017618:	0801766f 	.word	0x0801766f
 801761c:	08017647 	.word	0x08017647
 8017620:	08017639 	.word	0x08017639
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8017624:	6839      	ldr	r1, [r7, #0]
 8017626:	6878      	ldr	r0, [r7, #4]
 8017628:	f000 f9de 	bl	80179e8 <USBD_GetDescriptor>
          break;
 801762c:	e024      	b.n	8017678 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801762e:	6839      	ldr	r1, [r7, #0]
 8017630:	6878      	ldr	r0, [r7, #4]
 8017632:	f000 fb6d 	bl	8017d10 <USBD_SetAddress>
          break;
 8017636:	e01f      	b.n	8017678 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8017638:	6839      	ldr	r1, [r7, #0]
 801763a:	6878      	ldr	r0, [r7, #4]
 801763c:	f000 fbac 	bl	8017d98 <USBD_SetConfig>
 8017640:	4603      	mov	r3, r0
 8017642:	73fb      	strb	r3, [r7, #15]
          break;
 8017644:	e018      	b.n	8017678 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8017646:	6839      	ldr	r1, [r7, #0]
 8017648:	6878      	ldr	r0, [r7, #4]
 801764a:	f000 fc4b 	bl	8017ee4 <USBD_GetConfig>
          break;
 801764e:	e013      	b.n	8017678 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8017650:	6839      	ldr	r1, [r7, #0]
 8017652:	6878      	ldr	r0, [r7, #4]
 8017654:	f000 fc7c 	bl	8017f50 <USBD_GetStatus>
          break;
 8017658:	e00e      	b.n	8017678 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801765a:	6839      	ldr	r1, [r7, #0]
 801765c:	6878      	ldr	r0, [r7, #4]
 801765e:	f000 fcab 	bl	8017fb8 <USBD_SetFeature>
          break;
 8017662:	e009      	b.n	8017678 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8017664:	6839      	ldr	r1, [r7, #0]
 8017666:	6878      	ldr	r0, [r7, #4]
 8017668:	f000 fcba 	bl	8017fe0 <USBD_ClrFeature>
          break;
 801766c:	e004      	b.n	8017678 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801766e:	6839      	ldr	r1, [r7, #0]
 8017670:	6878      	ldr	r0, [r7, #4]
 8017672:	f000 fd11 	bl	8018098 <USBD_CtlError>
          break;
 8017676:	bf00      	nop
      }
      break;
 8017678:	e004      	b.n	8017684 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801767a:	6839      	ldr	r1, [r7, #0]
 801767c:	6878      	ldr	r0, [r7, #4]
 801767e:	f000 fd0b 	bl	8018098 <USBD_CtlError>
      break;
 8017682:	bf00      	nop
  }

  return ret;
 8017684:	7bfb      	ldrb	r3, [r7, #15]
}
 8017686:	4618      	mov	r0, r3
 8017688:	3710      	adds	r7, #16
 801768a:	46bd      	mov	sp, r7
 801768c:	bd80      	pop	{r7, pc}
 801768e:	bf00      	nop

08017690 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017690:	b580      	push	{r7, lr}
 8017692:	b084      	sub	sp, #16
 8017694:	af00      	add	r7, sp, #0
 8017696:	6078      	str	r0, [r7, #4]
 8017698:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801769a:	2300      	movs	r3, #0
 801769c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801769e:	683b      	ldr	r3, [r7, #0]
 80176a0:	781b      	ldrb	r3, [r3, #0]
 80176a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80176a6:	2b40      	cmp	r3, #64	; 0x40
 80176a8:	d005      	beq.n	80176b6 <USBD_StdItfReq+0x26>
 80176aa:	2b40      	cmp	r3, #64	; 0x40
 80176ac:	d82f      	bhi.n	801770e <USBD_StdItfReq+0x7e>
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d001      	beq.n	80176b6 <USBD_StdItfReq+0x26>
 80176b2:	2b20      	cmp	r3, #32
 80176b4:	d12b      	bne.n	801770e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80176bc:	b2db      	uxtb	r3, r3
 80176be:	3b01      	subs	r3, #1
 80176c0:	2b02      	cmp	r3, #2
 80176c2:	d81d      	bhi.n	8017700 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80176c4:	683b      	ldr	r3, [r7, #0]
 80176c6:	889b      	ldrh	r3, [r3, #4]
 80176c8:	b2db      	uxtb	r3, r3
 80176ca:	2b01      	cmp	r3, #1
 80176cc:	d813      	bhi.n	80176f6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80176d4:	689b      	ldr	r3, [r3, #8]
 80176d6:	6839      	ldr	r1, [r7, #0]
 80176d8:	6878      	ldr	r0, [r7, #4]
 80176da:	4798      	blx	r3
 80176dc:	4603      	mov	r3, r0
 80176de:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80176e0:	683b      	ldr	r3, [r7, #0]
 80176e2:	88db      	ldrh	r3, [r3, #6]
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d110      	bne.n	801770a <USBD_StdItfReq+0x7a>
 80176e8:	7bfb      	ldrb	r3, [r7, #15]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d10d      	bne.n	801770a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80176ee:	6878      	ldr	r0, [r7, #4]
 80176f0:	f000 fd9d 	bl	801822e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80176f4:	e009      	b.n	801770a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80176f6:	6839      	ldr	r1, [r7, #0]
 80176f8:	6878      	ldr	r0, [r7, #4]
 80176fa:	f000 fccd 	bl	8018098 <USBD_CtlError>
          break;
 80176fe:	e004      	b.n	801770a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8017700:	6839      	ldr	r1, [r7, #0]
 8017702:	6878      	ldr	r0, [r7, #4]
 8017704:	f000 fcc8 	bl	8018098 <USBD_CtlError>
          break;
 8017708:	e000      	b.n	801770c <USBD_StdItfReq+0x7c>
          break;
 801770a:	bf00      	nop
      }
      break;
 801770c:	e004      	b.n	8017718 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801770e:	6839      	ldr	r1, [r7, #0]
 8017710:	6878      	ldr	r0, [r7, #4]
 8017712:	f000 fcc1 	bl	8018098 <USBD_CtlError>
      break;
 8017716:	bf00      	nop
  }

  return ret;
 8017718:	7bfb      	ldrb	r3, [r7, #15]
}
 801771a:	4618      	mov	r0, r3
 801771c:	3710      	adds	r7, #16
 801771e:	46bd      	mov	sp, r7
 8017720:	bd80      	pop	{r7, pc}

08017722 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017722:	b580      	push	{r7, lr}
 8017724:	b084      	sub	sp, #16
 8017726:	af00      	add	r7, sp, #0
 8017728:	6078      	str	r0, [r7, #4]
 801772a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801772c:	2300      	movs	r3, #0
 801772e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8017730:	683b      	ldr	r3, [r7, #0]
 8017732:	889b      	ldrh	r3, [r3, #4]
 8017734:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017736:	683b      	ldr	r3, [r7, #0]
 8017738:	781b      	ldrb	r3, [r3, #0]
 801773a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801773e:	2b40      	cmp	r3, #64	; 0x40
 8017740:	d007      	beq.n	8017752 <USBD_StdEPReq+0x30>
 8017742:	2b40      	cmp	r3, #64	; 0x40
 8017744:	f200 8145 	bhi.w	80179d2 <USBD_StdEPReq+0x2b0>
 8017748:	2b00      	cmp	r3, #0
 801774a:	d00c      	beq.n	8017766 <USBD_StdEPReq+0x44>
 801774c:	2b20      	cmp	r3, #32
 801774e:	f040 8140 	bne.w	80179d2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017758:	689b      	ldr	r3, [r3, #8]
 801775a:	6839      	ldr	r1, [r7, #0]
 801775c:	6878      	ldr	r0, [r7, #4]
 801775e:	4798      	blx	r3
 8017760:	4603      	mov	r3, r0
 8017762:	73fb      	strb	r3, [r7, #15]
      break;
 8017764:	e13a      	b.n	80179dc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017766:	683b      	ldr	r3, [r7, #0]
 8017768:	785b      	ldrb	r3, [r3, #1]
 801776a:	2b03      	cmp	r3, #3
 801776c:	d007      	beq.n	801777e <USBD_StdEPReq+0x5c>
 801776e:	2b03      	cmp	r3, #3
 8017770:	f300 8129 	bgt.w	80179c6 <USBD_StdEPReq+0x2a4>
 8017774:	2b00      	cmp	r3, #0
 8017776:	d07f      	beq.n	8017878 <USBD_StdEPReq+0x156>
 8017778:	2b01      	cmp	r3, #1
 801777a:	d03c      	beq.n	80177f6 <USBD_StdEPReq+0xd4>
 801777c:	e123      	b.n	80179c6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017784:	b2db      	uxtb	r3, r3
 8017786:	2b02      	cmp	r3, #2
 8017788:	d002      	beq.n	8017790 <USBD_StdEPReq+0x6e>
 801778a:	2b03      	cmp	r3, #3
 801778c:	d016      	beq.n	80177bc <USBD_StdEPReq+0x9a>
 801778e:	e02c      	b.n	80177ea <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017790:	7bbb      	ldrb	r3, [r7, #14]
 8017792:	2b00      	cmp	r3, #0
 8017794:	d00d      	beq.n	80177b2 <USBD_StdEPReq+0x90>
 8017796:	7bbb      	ldrb	r3, [r7, #14]
 8017798:	2b80      	cmp	r3, #128	; 0x80
 801779a:	d00a      	beq.n	80177b2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801779c:	7bbb      	ldrb	r3, [r7, #14]
 801779e:	4619      	mov	r1, r3
 80177a0:	6878      	ldr	r0, [r7, #4]
 80177a2:	f001 f9b7 	bl	8018b14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80177a6:	2180      	movs	r1, #128	; 0x80
 80177a8:	6878      	ldr	r0, [r7, #4]
 80177aa:	f001 f9b3 	bl	8018b14 <USBD_LL_StallEP>
 80177ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80177b0:	e020      	b.n	80177f4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80177b2:	6839      	ldr	r1, [r7, #0]
 80177b4:	6878      	ldr	r0, [r7, #4]
 80177b6:	f000 fc6f 	bl	8018098 <USBD_CtlError>
              break;
 80177ba:	e01b      	b.n	80177f4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80177bc:	683b      	ldr	r3, [r7, #0]
 80177be:	885b      	ldrh	r3, [r3, #2]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d10e      	bne.n	80177e2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80177c4:	7bbb      	ldrb	r3, [r7, #14]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d00b      	beq.n	80177e2 <USBD_StdEPReq+0xc0>
 80177ca:	7bbb      	ldrb	r3, [r7, #14]
 80177cc:	2b80      	cmp	r3, #128	; 0x80
 80177ce:	d008      	beq.n	80177e2 <USBD_StdEPReq+0xc0>
 80177d0:	683b      	ldr	r3, [r7, #0]
 80177d2:	88db      	ldrh	r3, [r3, #6]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d104      	bne.n	80177e2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80177d8:	7bbb      	ldrb	r3, [r7, #14]
 80177da:	4619      	mov	r1, r3
 80177dc:	6878      	ldr	r0, [r7, #4]
 80177de:	f001 f999 	bl	8018b14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80177e2:	6878      	ldr	r0, [r7, #4]
 80177e4:	f000 fd23 	bl	801822e <USBD_CtlSendStatus>

              break;
 80177e8:	e004      	b.n	80177f4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80177ea:	6839      	ldr	r1, [r7, #0]
 80177ec:	6878      	ldr	r0, [r7, #4]
 80177ee:	f000 fc53 	bl	8018098 <USBD_CtlError>
              break;
 80177f2:	bf00      	nop
          }
          break;
 80177f4:	e0ec      	b.n	80179d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80177fc:	b2db      	uxtb	r3, r3
 80177fe:	2b02      	cmp	r3, #2
 8017800:	d002      	beq.n	8017808 <USBD_StdEPReq+0xe6>
 8017802:	2b03      	cmp	r3, #3
 8017804:	d016      	beq.n	8017834 <USBD_StdEPReq+0x112>
 8017806:	e030      	b.n	801786a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8017808:	7bbb      	ldrb	r3, [r7, #14]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d00d      	beq.n	801782a <USBD_StdEPReq+0x108>
 801780e:	7bbb      	ldrb	r3, [r7, #14]
 8017810:	2b80      	cmp	r3, #128	; 0x80
 8017812:	d00a      	beq.n	801782a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8017814:	7bbb      	ldrb	r3, [r7, #14]
 8017816:	4619      	mov	r1, r3
 8017818:	6878      	ldr	r0, [r7, #4]
 801781a:	f001 f97b 	bl	8018b14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801781e:	2180      	movs	r1, #128	; 0x80
 8017820:	6878      	ldr	r0, [r7, #4]
 8017822:	f001 f977 	bl	8018b14 <USBD_LL_StallEP>
 8017826:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8017828:	e025      	b.n	8017876 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801782a:	6839      	ldr	r1, [r7, #0]
 801782c:	6878      	ldr	r0, [r7, #4]
 801782e:	f000 fc33 	bl	8018098 <USBD_CtlError>
              break;
 8017832:	e020      	b.n	8017876 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8017834:	683b      	ldr	r3, [r7, #0]
 8017836:	885b      	ldrh	r3, [r3, #2]
 8017838:	2b00      	cmp	r3, #0
 801783a:	d11b      	bne.n	8017874 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801783c:	7bbb      	ldrb	r3, [r7, #14]
 801783e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017842:	2b00      	cmp	r3, #0
 8017844:	d004      	beq.n	8017850 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8017846:	7bbb      	ldrb	r3, [r7, #14]
 8017848:	4619      	mov	r1, r3
 801784a:	6878      	ldr	r0, [r7, #4]
 801784c:	f001 f998 	bl	8018b80 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8017850:	6878      	ldr	r0, [r7, #4]
 8017852:	f000 fcec 	bl	801822e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801785c:	689b      	ldr	r3, [r3, #8]
 801785e:	6839      	ldr	r1, [r7, #0]
 8017860:	6878      	ldr	r0, [r7, #4]
 8017862:	4798      	blx	r3
 8017864:	4603      	mov	r3, r0
 8017866:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8017868:	e004      	b.n	8017874 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801786a:	6839      	ldr	r1, [r7, #0]
 801786c:	6878      	ldr	r0, [r7, #4]
 801786e:	f000 fc13 	bl	8018098 <USBD_CtlError>
              break;
 8017872:	e000      	b.n	8017876 <USBD_StdEPReq+0x154>
              break;
 8017874:	bf00      	nop
          }
          break;
 8017876:	e0ab      	b.n	80179d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801787e:	b2db      	uxtb	r3, r3
 8017880:	2b02      	cmp	r3, #2
 8017882:	d002      	beq.n	801788a <USBD_StdEPReq+0x168>
 8017884:	2b03      	cmp	r3, #3
 8017886:	d032      	beq.n	80178ee <USBD_StdEPReq+0x1cc>
 8017888:	e097      	b.n	80179ba <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801788a:	7bbb      	ldrb	r3, [r7, #14]
 801788c:	2b00      	cmp	r3, #0
 801788e:	d007      	beq.n	80178a0 <USBD_StdEPReq+0x17e>
 8017890:	7bbb      	ldrb	r3, [r7, #14]
 8017892:	2b80      	cmp	r3, #128	; 0x80
 8017894:	d004      	beq.n	80178a0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8017896:	6839      	ldr	r1, [r7, #0]
 8017898:	6878      	ldr	r0, [r7, #4]
 801789a:	f000 fbfd 	bl	8018098 <USBD_CtlError>
                break;
 801789e:	e091      	b.n	80179c4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80178a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	da0b      	bge.n	80178c0 <USBD_StdEPReq+0x19e>
 80178a8:	7bbb      	ldrb	r3, [r7, #14]
 80178aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80178ae:	4613      	mov	r3, r2
 80178b0:	009b      	lsls	r3, r3, #2
 80178b2:	4413      	add	r3, r2
 80178b4:	009b      	lsls	r3, r3, #2
 80178b6:	3310      	adds	r3, #16
 80178b8:	687a      	ldr	r2, [r7, #4]
 80178ba:	4413      	add	r3, r2
 80178bc:	3304      	adds	r3, #4
 80178be:	e00b      	b.n	80178d8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80178c0:	7bbb      	ldrb	r3, [r7, #14]
 80178c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80178c6:	4613      	mov	r3, r2
 80178c8:	009b      	lsls	r3, r3, #2
 80178ca:	4413      	add	r3, r2
 80178cc:	009b      	lsls	r3, r3, #2
 80178ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80178d2:	687a      	ldr	r2, [r7, #4]
 80178d4:	4413      	add	r3, r2
 80178d6:	3304      	adds	r3, #4
 80178d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80178da:	68bb      	ldr	r3, [r7, #8]
 80178dc:	2200      	movs	r2, #0
 80178de:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80178e0:	68bb      	ldr	r3, [r7, #8]
 80178e2:	2202      	movs	r2, #2
 80178e4:	4619      	mov	r1, r3
 80178e6:	6878      	ldr	r0, [r7, #4]
 80178e8:	f000 fc47 	bl	801817a <USBD_CtlSendData>
              break;
 80178ec:	e06a      	b.n	80179c4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80178ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	da11      	bge.n	801791a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80178f6:	7bbb      	ldrb	r3, [r7, #14]
 80178f8:	f003 020f 	and.w	r2, r3, #15
 80178fc:	6879      	ldr	r1, [r7, #4]
 80178fe:	4613      	mov	r3, r2
 8017900:	009b      	lsls	r3, r3, #2
 8017902:	4413      	add	r3, r2
 8017904:	009b      	lsls	r3, r3, #2
 8017906:	440b      	add	r3, r1
 8017908:	3324      	adds	r3, #36	; 0x24
 801790a:	881b      	ldrh	r3, [r3, #0]
 801790c:	2b00      	cmp	r3, #0
 801790e:	d117      	bne.n	8017940 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8017910:	6839      	ldr	r1, [r7, #0]
 8017912:	6878      	ldr	r0, [r7, #4]
 8017914:	f000 fbc0 	bl	8018098 <USBD_CtlError>
                  break;
 8017918:	e054      	b.n	80179c4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801791a:	7bbb      	ldrb	r3, [r7, #14]
 801791c:	f003 020f 	and.w	r2, r3, #15
 8017920:	6879      	ldr	r1, [r7, #4]
 8017922:	4613      	mov	r3, r2
 8017924:	009b      	lsls	r3, r3, #2
 8017926:	4413      	add	r3, r2
 8017928:	009b      	lsls	r3, r3, #2
 801792a:	440b      	add	r3, r1
 801792c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8017930:	881b      	ldrh	r3, [r3, #0]
 8017932:	2b00      	cmp	r3, #0
 8017934:	d104      	bne.n	8017940 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8017936:	6839      	ldr	r1, [r7, #0]
 8017938:	6878      	ldr	r0, [r7, #4]
 801793a:	f000 fbad 	bl	8018098 <USBD_CtlError>
                  break;
 801793e:	e041      	b.n	80179c4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017940:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017944:	2b00      	cmp	r3, #0
 8017946:	da0b      	bge.n	8017960 <USBD_StdEPReq+0x23e>
 8017948:	7bbb      	ldrb	r3, [r7, #14]
 801794a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801794e:	4613      	mov	r3, r2
 8017950:	009b      	lsls	r3, r3, #2
 8017952:	4413      	add	r3, r2
 8017954:	009b      	lsls	r3, r3, #2
 8017956:	3310      	adds	r3, #16
 8017958:	687a      	ldr	r2, [r7, #4]
 801795a:	4413      	add	r3, r2
 801795c:	3304      	adds	r3, #4
 801795e:	e00b      	b.n	8017978 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8017960:	7bbb      	ldrb	r3, [r7, #14]
 8017962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8017966:	4613      	mov	r3, r2
 8017968:	009b      	lsls	r3, r3, #2
 801796a:	4413      	add	r3, r2
 801796c:	009b      	lsls	r3, r3, #2
 801796e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8017972:	687a      	ldr	r2, [r7, #4]
 8017974:	4413      	add	r3, r2
 8017976:	3304      	adds	r3, #4
 8017978:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801797a:	7bbb      	ldrb	r3, [r7, #14]
 801797c:	2b00      	cmp	r3, #0
 801797e:	d002      	beq.n	8017986 <USBD_StdEPReq+0x264>
 8017980:	7bbb      	ldrb	r3, [r7, #14]
 8017982:	2b80      	cmp	r3, #128	; 0x80
 8017984:	d103      	bne.n	801798e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8017986:	68bb      	ldr	r3, [r7, #8]
 8017988:	2200      	movs	r2, #0
 801798a:	601a      	str	r2, [r3, #0]
 801798c:	e00e      	b.n	80179ac <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801798e:	7bbb      	ldrb	r3, [r7, #14]
 8017990:	4619      	mov	r1, r3
 8017992:	6878      	ldr	r0, [r7, #4]
 8017994:	f001 f92a 	bl	8018bec <USBD_LL_IsStallEP>
 8017998:	4603      	mov	r3, r0
 801799a:	2b00      	cmp	r3, #0
 801799c:	d003      	beq.n	80179a6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801799e:	68bb      	ldr	r3, [r7, #8]
 80179a0:	2201      	movs	r2, #1
 80179a2:	601a      	str	r2, [r3, #0]
 80179a4:	e002      	b.n	80179ac <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80179a6:	68bb      	ldr	r3, [r7, #8]
 80179a8:	2200      	movs	r2, #0
 80179aa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80179ac:	68bb      	ldr	r3, [r7, #8]
 80179ae:	2202      	movs	r2, #2
 80179b0:	4619      	mov	r1, r3
 80179b2:	6878      	ldr	r0, [r7, #4]
 80179b4:	f000 fbe1 	bl	801817a <USBD_CtlSendData>
              break;
 80179b8:	e004      	b.n	80179c4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80179ba:	6839      	ldr	r1, [r7, #0]
 80179bc:	6878      	ldr	r0, [r7, #4]
 80179be:	f000 fb6b 	bl	8018098 <USBD_CtlError>
              break;
 80179c2:	bf00      	nop
          }
          break;
 80179c4:	e004      	b.n	80179d0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80179c6:	6839      	ldr	r1, [r7, #0]
 80179c8:	6878      	ldr	r0, [r7, #4]
 80179ca:	f000 fb65 	bl	8018098 <USBD_CtlError>
          break;
 80179ce:	bf00      	nop
      }
      break;
 80179d0:	e004      	b.n	80179dc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80179d2:	6839      	ldr	r1, [r7, #0]
 80179d4:	6878      	ldr	r0, [r7, #4]
 80179d6:	f000 fb5f 	bl	8018098 <USBD_CtlError>
      break;
 80179da:	bf00      	nop
  }

  return ret;
 80179dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80179de:	4618      	mov	r0, r3
 80179e0:	3710      	adds	r7, #16
 80179e2:	46bd      	mov	sp, r7
 80179e4:	bd80      	pop	{r7, pc}
	...

080179e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80179e8:	b580      	push	{r7, lr}
 80179ea:	b084      	sub	sp, #16
 80179ec:	af00      	add	r7, sp, #0
 80179ee:	6078      	str	r0, [r7, #4]
 80179f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80179f2:	2300      	movs	r3, #0
 80179f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80179f6:	2300      	movs	r3, #0
 80179f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80179fa:	2300      	movs	r3, #0
 80179fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80179fe:	683b      	ldr	r3, [r7, #0]
 8017a00:	885b      	ldrh	r3, [r3, #2]
 8017a02:	0a1b      	lsrs	r3, r3, #8
 8017a04:	b29b      	uxth	r3, r3
 8017a06:	3b01      	subs	r3, #1
 8017a08:	2b0e      	cmp	r3, #14
 8017a0a:	f200 8152 	bhi.w	8017cb2 <USBD_GetDescriptor+0x2ca>
 8017a0e:	a201      	add	r2, pc, #4	; (adr r2, 8017a14 <USBD_GetDescriptor+0x2c>)
 8017a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a14:	08017a85 	.word	0x08017a85
 8017a18:	08017a9d 	.word	0x08017a9d
 8017a1c:	08017add 	.word	0x08017add
 8017a20:	08017cb3 	.word	0x08017cb3
 8017a24:	08017cb3 	.word	0x08017cb3
 8017a28:	08017c53 	.word	0x08017c53
 8017a2c:	08017c7f 	.word	0x08017c7f
 8017a30:	08017cb3 	.word	0x08017cb3
 8017a34:	08017cb3 	.word	0x08017cb3
 8017a38:	08017cb3 	.word	0x08017cb3
 8017a3c:	08017cb3 	.word	0x08017cb3
 8017a40:	08017cb3 	.word	0x08017cb3
 8017a44:	08017cb3 	.word	0x08017cb3
 8017a48:	08017cb3 	.word	0x08017cb3
 8017a4c:	08017a51 	.word	0x08017a51
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017a56:	69db      	ldr	r3, [r3, #28]
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d00b      	beq.n	8017a74 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017a62:	69db      	ldr	r3, [r3, #28]
 8017a64:	687a      	ldr	r2, [r7, #4]
 8017a66:	7c12      	ldrb	r2, [r2, #16]
 8017a68:	f107 0108 	add.w	r1, r7, #8
 8017a6c:	4610      	mov	r0, r2
 8017a6e:	4798      	blx	r3
 8017a70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017a72:	e126      	b.n	8017cc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017a74:	6839      	ldr	r1, [r7, #0]
 8017a76:	6878      	ldr	r0, [r7, #4]
 8017a78:	f000 fb0e 	bl	8018098 <USBD_CtlError>
        err++;
 8017a7c:	7afb      	ldrb	r3, [r7, #11]
 8017a7e:	3301      	adds	r3, #1
 8017a80:	72fb      	strb	r3, [r7, #11]
      break;
 8017a82:	e11e      	b.n	8017cc2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	687a      	ldr	r2, [r7, #4]
 8017a8e:	7c12      	ldrb	r2, [r2, #16]
 8017a90:	f107 0108 	add.w	r1, r7, #8
 8017a94:	4610      	mov	r0, r2
 8017a96:	4798      	blx	r3
 8017a98:	60f8      	str	r0, [r7, #12]
      break;
 8017a9a:	e112      	b.n	8017cc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	7c1b      	ldrb	r3, [r3, #16]
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d10d      	bne.n	8017ac0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017aac:	f107 0208 	add.w	r2, r7, #8
 8017ab0:	4610      	mov	r0, r2
 8017ab2:	4798      	blx	r3
 8017ab4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	3301      	adds	r3, #1
 8017aba:	2202      	movs	r2, #2
 8017abc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8017abe:	e100      	b.n	8017cc2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ac8:	f107 0208 	add.w	r2, r7, #8
 8017acc:	4610      	mov	r0, r2
 8017ace:	4798      	blx	r3
 8017ad0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	3301      	adds	r3, #1
 8017ad6:	2202      	movs	r2, #2
 8017ad8:	701a      	strb	r2, [r3, #0]
      break;
 8017ada:	e0f2      	b.n	8017cc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8017adc:	683b      	ldr	r3, [r7, #0]
 8017ade:	885b      	ldrh	r3, [r3, #2]
 8017ae0:	b2db      	uxtb	r3, r3
 8017ae2:	2b05      	cmp	r3, #5
 8017ae4:	f200 80ac 	bhi.w	8017c40 <USBD_GetDescriptor+0x258>
 8017ae8:	a201      	add	r2, pc, #4	; (adr r2, 8017af0 <USBD_GetDescriptor+0x108>)
 8017aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017aee:	bf00      	nop
 8017af0:	08017b09 	.word	0x08017b09
 8017af4:	08017b3d 	.word	0x08017b3d
 8017af8:	08017b71 	.word	0x08017b71
 8017afc:	08017ba5 	.word	0x08017ba5
 8017b00:	08017bd9 	.word	0x08017bd9
 8017b04:	08017c0d 	.word	0x08017c0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017b0e:	685b      	ldr	r3, [r3, #4]
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d00b      	beq.n	8017b2c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017b1a:	685b      	ldr	r3, [r3, #4]
 8017b1c:	687a      	ldr	r2, [r7, #4]
 8017b1e:	7c12      	ldrb	r2, [r2, #16]
 8017b20:	f107 0108 	add.w	r1, r7, #8
 8017b24:	4610      	mov	r0, r2
 8017b26:	4798      	blx	r3
 8017b28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017b2a:	e091      	b.n	8017c50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017b2c:	6839      	ldr	r1, [r7, #0]
 8017b2e:	6878      	ldr	r0, [r7, #4]
 8017b30:	f000 fab2 	bl	8018098 <USBD_CtlError>
            err++;
 8017b34:	7afb      	ldrb	r3, [r7, #11]
 8017b36:	3301      	adds	r3, #1
 8017b38:	72fb      	strb	r3, [r7, #11]
          break;
 8017b3a:	e089      	b.n	8017c50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017b42:	689b      	ldr	r3, [r3, #8]
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d00b      	beq.n	8017b60 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017b4e:	689b      	ldr	r3, [r3, #8]
 8017b50:	687a      	ldr	r2, [r7, #4]
 8017b52:	7c12      	ldrb	r2, [r2, #16]
 8017b54:	f107 0108 	add.w	r1, r7, #8
 8017b58:	4610      	mov	r0, r2
 8017b5a:	4798      	blx	r3
 8017b5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017b5e:	e077      	b.n	8017c50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017b60:	6839      	ldr	r1, [r7, #0]
 8017b62:	6878      	ldr	r0, [r7, #4]
 8017b64:	f000 fa98 	bl	8018098 <USBD_CtlError>
            err++;
 8017b68:	7afb      	ldrb	r3, [r7, #11]
 8017b6a:	3301      	adds	r3, #1
 8017b6c:	72fb      	strb	r3, [r7, #11]
          break;
 8017b6e:	e06f      	b.n	8017c50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017b76:	68db      	ldr	r3, [r3, #12]
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d00b      	beq.n	8017b94 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017b82:	68db      	ldr	r3, [r3, #12]
 8017b84:	687a      	ldr	r2, [r7, #4]
 8017b86:	7c12      	ldrb	r2, [r2, #16]
 8017b88:	f107 0108 	add.w	r1, r7, #8
 8017b8c:	4610      	mov	r0, r2
 8017b8e:	4798      	blx	r3
 8017b90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017b92:	e05d      	b.n	8017c50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017b94:	6839      	ldr	r1, [r7, #0]
 8017b96:	6878      	ldr	r0, [r7, #4]
 8017b98:	f000 fa7e 	bl	8018098 <USBD_CtlError>
            err++;
 8017b9c:	7afb      	ldrb	r3, [r7, #11]
 8017b9e:	3301      	adds	r3, #1
 8017ba0:	72fb      	strb	r3, [r7, #11]
          break;
 8017ba2:	e055      	b.n	8017c50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017baa:	691b      	ldr	r3, [r3, #16]
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d00b      	beq.n	8017bc8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017bb6:	691b      	ldr	r3, [r3, #16]
 8017bb8:	687a      	ldr	r2, [r7, #4]
 8017bba:	7c12      	ldrb	r2, [r2, #16]
 8017bbc:	f107 0108 	add.w	r1, r7, #8
 8017bc0:	4610      	mov	r0, r2
 8017bc2:	4798      	blx	r3
 8017bc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017bc6:	e043      	b.n	8017c50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017bc8:	6839      	ldr	r1, [r7, #0]
 8017bca:	6878      	ldr	r0, [r7, #4]
 8017bcc:	f000 fa64 	bl	8018098 <USBD_CtlError>
            err++;
 8017bd0:	7afb      	ldrb	r3, [r7, #11]
 8017bd2:	3301      	adds	r3, #1
 8017bd4:	72fb      	strb	r3, [r7, #11]
          break;
 8017bd6:	e03b      	b.n	8017c50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017bde:	695b      	ldr	r3, [r3, #20]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d00b      	beq.n	8017bfc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017bea:	695b      	ldr	r3, [r3, #20]
 8017bec:	687a      	ldr	r2, [r7, #4]
 8017bee:	7c12      	ldrb	r2, [r2, #16]
 8017bf0:	f107 0108 	add.w	r1, r7, #8
 8017bf4:	4610      	mov	r0, r2
 8017bf6:	4798      	blx	r3
 8017bf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017bfa:	e029      	b.n	8017c50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017bfc:	6839      	ldr	r1, [r7, #0]
 8017bfe:	6878      	ldr	r0, [r7, #4]
 8017c00:	f000 fa4a 	bl	8018098 <USBD_CtlError>
            err++;
 8017c04:	7afb      	ldrb	r3, [r7, #11]
 8017c06:	3301      	adds	r3, #1
 8017c08:	72fb      	strb	r3, [r7, #11]
          break;
 8017c0a:	e021      	b.n	8017c50 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017c12:	699b      	ldr	r3, [r3, #24]
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d00b      	beq.n	8017c30 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8017c1e:	699b      	ldr	r3, [r3, #24]
 8017c20:	687a      	ldr	r2, [r7, #4]
 8017c22:	7c12      	ldrb	r2, [r2, #16]
 8017c24:	f107 0108 	add.w	r1, r7, #8
 8017c28:	4610      	mov	r0, r2
 8017c2a:	4798      	blx	r3
 8017c2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8017c2e:	e00f      	b.n	8017c50 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8017c30:	6839      	ldr	r1, [r7, #0]
 8017c32:	6878      	ldr	r0, [r7, #4]
 8017c34:	f000 fa30 	bl	8018098 <USBD_CtlError>
            err++;
 8017c38:	7afb      	ldrb	r3, [r7, #11]
 8017c3a:	3301      	adds	r3, #1
 8017c3c:	72fb      	strb	r3, [r7, #11]
          break;
 8017c3e:	e007      	b.n	8017c50 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8017c40:	6839      	ldr	r1, [r7, #0]
 8017c42:	6878      	ldr	r0, [r7, #4]
 8017c44:	f000 fa28 	bl	8018098 <USBD_CtlError>
          err++;
 8017c48:	7afb      	ldrb	r3, [r7, #11]
 8017c4a:	3301      	adds	r3, #1
 8017c4c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8017c4e:	bf00      	nop
      }
      break;
 8017c50:	e037      	b.n	8017cc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	7c1b      	ldrb	r3, [r3, #16]
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d109      	bne.n	8017c6e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017c62:	f107 0208 	add.w	r2, r7, #8
 8017c66:	4610      	mov	r0, r2
 8017c68:	4798      	blx	r3
 8017c6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017c6c:	e029      	b.n	8017cc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017c6e:	6839      	ldr	r1, [r7, #0]
 8017c70:	6878      	ldr	r0, [r7, #4]
 8017c72:	f000 fa11 	bl	8018098 <USBD_CtlError>
        err++;
 8017c76:	7afb      	ldrb	r3, [r7, #11]
 8017c78:	3301      	adds	r3, #1
 8017c7a:	72fb      	strb	r3, [r7, #11]
      break;
 8017c7c:	e021      	b.n	8017cc2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	7c1b      	ldrb	r3, [r3, #16]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d10d      	bne.n	8017ca2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017c8e:	f107 0208 	add.w	r2, r7, #8
 8017c92:	4610      	mov	r0, r2
 8017c94:	4798      	blx	r3
 8017c96:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	3301      	adds	r3, #1
 8017c9c:	2207      	movs	r2, #7
 8017c9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8017ca0:	e00f      	b.n	8017cc2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8017ca2:	6839      	ldr	r1, [r7, #0]
 8017ca4:	6878      	ldr	r0, [r7, #4]
 8017ca6:	f000 f9f7 	bl	8018098 <USBD_CtlError>
        err++;
 8017caa:	7afb      	ldrb	r3, [r7, #11]
 8017cac:	3301      	adds	r3, #1
 8017cae:	72fb      	strb	r3, [r7, #11]
      break;
 8017cb0:	e007      	b.n	8017cc2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8017cb2:	6839      	ldr	r1, [r7, #0]
 8017cb4:	6878      	ldr	r0, [r7, #4]
 8017cb6:	f000 f9ef 	bl	8018098 <USBD_CtlError>
      err++;
 8017cba:	7afb      	ldrb	r3, [r7, #11]
 8017cbc:	3301      	adds	r3, #1
 8017cbe:	72fb      	strb	r3, [r7, #11]
      break;
 8017cc0:	bf00      	nop
  }

  if (err != 0U)
 8017cc2:	7afb      	ldrb	r3, [r7, #11]
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d11e      	bne.n	8017d06 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8017cc8:	683b      	ldr	r3, [r7, #0]
 8017cca:	88db      	ldrh	r3, [r3, #6]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d016      	beq.n	8017cfe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8017cd0:	893b      	ldrh	r3, [r7, #8]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d00e      	beq.n	8017cf4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8017cd6:	683b      	ldr	r3, [r7, #0]
 8017cd8:	88da      	ldrh	r2, [r3, #6]
 8017cda:	893b      	ldrh	r3, [r7, #8]
 8017cdc:	4293      	cmp	r3, r2
 8017cde:	bf28      	it	cs
 8017ce0:	4613      	movcs	r3, r2
 8017ce2:	b29b      	uxth	r3, r3
 8017ce4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8017ce6:	893b      	ldrh	r3, [r7, #8]
 8017ce8:	461a      	mov	r2, r3
 8017cea:	68f9      	ldr	r1, [r7, #12]
 8017cec:	6878      	ldr	r0, [r7, #4]
 8017cee:	f000 fa44 	bl	801817a <USBD_CtlSendData>
 8017cf2:	e009      	b.n	8017d08 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8017cf4:	6839      	ldr	r1, [r7, #0]
 8017cf6:	6878      	ldr	r0, [r7, #4]
 8017cf8:	f000 f9ce 	bl	8018098 <USBD_CtlError>
 8017cfc:	e004      	b.n	8017d08 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8017cfe:	6878      	ldr	r0, [r7, #4]
 8017d00:	f000 fa95 	bl	801822e <USBD_CtlSendStatus>
 8017d04:	e000      	b.n	8017d08 <USBD_GetDescriptor+0x320>
    return;
 8017d06:	bf00      	nop
  }
}
 8017d08:	3710      	adds	r7, #16
 8017d0a:	46bd      	mov	sp, r7
 8017d0c:	bd80      	pop	{r7, pc}
 8017d0e:	bf00      	nop

08017d10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017d10:	b580      	push	{r7, lr}
 8017d12:	b084      	sub	sp, #16
 8017d14:	af00      	add	r7, sp, #0
 8017d16:	6078      	str	r0, [r7, #4]
 8017d18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8017d1a:	683b      	ldr	r3, [r7, #0]
 8017d1c:	889b      	ldrh	r3, [r3, #4]
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d131      	bne.n	8017d86 <USBD_SetAddress+0x76>
 8017d22:	683b      	ldr	r3, [r7, #0]
 8017d24:	88db      	ldrh	r3, [r3, #6]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d12d      	bne.n	8017d86 <USBD_SetAddress+0x76>
 8017d2a:	683b      	ldr	r3, [r7, #0]
 8017d2c:	885b      	ldrh	r3, [r3, #2]
 8017d2e:	2b7f      	cmp	r3, #127	; 0x7f
 8017d30:	d829      	bhi.n	8017d86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8017d32:	683b      	ldr	r3, [r7, #0]
 8017d34:	885b      	ldrh	r3, [r3, #2]
 8017d36:	b2db      	uxtb	r3, r3
 8017d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017d3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017d44:	b2db      	uxtb	r3, r3
 8017d46:	2b03      	cmp	r3, #3
 8017d48:	d104      	bne.n	8017d54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8017d4a:	6839      	ldr	r1, [r7, #0]
 8017d4c:	6878      	ldr	r0, [r7, #4]
 8017d4e:	f000 f9a3 	bl	8018098 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017d52:	e01d      	b.n	8017d90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	7bfa      	ldrb	r2, [r7, #15]
 8017d58:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8017d5c:	7bfb      	ldrb	r3, [r7, #15]
 8017d5e:	4619      	mov	r1, r3
 8017d60:	6878      	ldr	r0, [r7, #4]
 8017d62:	f000 ff6f 	bl	8018c44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8017d66:	6878      	ldr	r0, [r7, #4]
 8017d68:	f000 fa61 	bl	801822e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8017d6c:	7bfb      	ldrb	r3, [r7, #15]
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d004      	beq.n	8017d7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	2202      	movs	r2, #2
 8017d76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017d7a:	e009      	b.n	8017d90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	2201      	movs	r2, #1
 8017d80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017d84:	e004      	b.n	8017d90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8017d86:	6839      	ldr	r1, [r7, #0]
 8017d88:	6878      	ldr	r0, [r7, #4]
 8017d8a:	f000 f985 	bl	8018098 <USBD_CtlError>
  }
}
 8017d8e:	bf00      	nop
 8017d90:	bf00      	nop
 8017d92:	3710      	adds	r7, #16
 8017d94:	46bd      	mov	sp, r7
 8017d96:	bd80      	pop	{r7, pc}

08017d98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017d98:	b580      	push	{r7, lr}
 8017d9a:	b084      	sub	sp, #16
 8017d9c:	af00      	add	r7, sp, #0
 8017d9e:	6078      	str	r0, [r7, #4]
 8017da0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8017da2:	2300      	movs	r3, #0
 8017da4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8017da6:	683b      	ldr	r3, [r7, #0]
 8017da8:	885b      	ldrh	r3, [r3, #2]
 8017daa:	b2da      	uxtb	r2, r3
 8017dac:	4b4c      	ldr	r3, [pc, #304]	; (8017ee0 <USBD_SetConfig+0x148>)
 8017dae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8017db0:	4b4b      	ldr	r3, [pc, #300]	; (8017ee0 <USBD_SetConfig+0x148>)
 8017db2:	781b      	ldrb	r3, [r3, #0]
 8017db4:	2b01      	cmp	r3, #1
 8017db6:	d905      	bls.n	8017dc4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8017db8:	6839      	ldr	r1, [r7, #0]
 8017dba:	6878      	ldr	r0, [r7, #4]
 8017dbc:	f000 f96c 	bl	8018098 <USBD_CtlError>
    return USBD_FAIL;
 8017dc0:	2303      	movs	r3, #3
 8017dc2:	e088      	b.n	8017ed6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017dca:	b2db      	uxtb	r3, r3
 8017dcc:	2b02      	cmp	r3, #2
 8017dce:	d002      	beq.n	8017dd6 <USBD_SetConfig+0x3e>
 8017dd0:	2b03      	cmp	r3, #3
 8017dd2:	d025      	beq.n	8017e20 <USBD_SetConfig+0x88>
 8017dd4:	e071      	b.n	8017eba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8017dd6:	4b42      	ldr	r3, [pc, #264]	; (8017ee0 <USBD_SetConfig+0x148>)
 8017dd8:	781b      	ldrb	r3, [r3, #0]
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d01c      	beq.n	8017e18 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8017dde:	4b40      	ldr	r3, [pc, #256]	; (8017ee0 <USBD_SetConfig+0x148>)
 8017de0:	781b      	ldrb	r3, [r3, #0]
 8017de2:	461a      	mov	r2, r3
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017de8:	4b3d      	ldr	r3, [pc, #244]	; (8017ee0 <USBD_SetConfig+0x148>)
 8017dea:	781b      	ldrb	r3, [r3, #0]
 8017dec:	4619      	mov	r1, r3
 8017dee:	6878      	ldr	r0, [r7, #4]
 8017df0:	f7ff f91e 	bl	8017030 <USBD_SetClassConfig>
 8017df4:	4603      	mov	r3, r0
 8017df6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8017df8:	7bfb      	ldrb	r3, [r7, #15]
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d004      	beq.n	8017e08 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8017dfe:	6839      	ldr	r1, [r7, #0]
 8017e00:	6878      	ldr	r0, [r7, #4]
 8017e02:	f000 f949 	bl	8018098 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017e06:	e065      	b.n	8017ed4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8017e08:	6878      	ldr	r0, [r7, #4]
 8017e0a:	f000 fa10 	bl	801822e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	2203      	movs	r2, #3
 8017e12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8017e16:	e05d      	b.n	8017ed4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8017e18:	6878      	ldr	r0, [r7, #4]
 8017e1a:	f000 fa08 	bl	801822e <USBD_CtlSendStatus>
      break;
 8017e1e:	e059      	b.n	8017ed4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8017e20:	4b2f      	ldr	r3, [pc, #188]	; (8017ee0 <USBD_SetConfig+0x148>)
 8017e22:	781b      	ldrb	r3, [r3, #0]
 8017e24:	2b00      	cmp	r3, #0
 8017e26:	d112      	bne.n	8017e4e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	2202      	movs	r2, #2
 8017e2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8017e30:	4b2b      	ldr	r3, [pc, #172]	; (8017ee0 <USBD_SetConfig+0x148>)
 8017e32:	781b      	ldrb	r3, [r3, #0]
 8017e34:	461a      	mov	r2, r3
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017e3a:	4b29      	ldr	r3, [pc, #164]	; (8017ee0 <USBD_SetConfig+0x148>)
 8017e3c:	781b      	ldrb	r3, [r3, #0]
 8017e3e:	4619      	mov	r1, r3
 8017e40:	6878      	ldr	r0, [r7, #4]
 8017e42:	f7ff f911 	bl	8017068 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8017e46:	6878      	ldr	r0, [r7, #4]
 8017e48:	f000 f9f1 	bl	801822e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8017e4c:	e042      	b.n	8017ed4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8017e4e:	4b24      	ldr	r3, [pc, #144]	; (8017ee0 <USBD_SetConfig+0x148>)
 8017e50:	781b      	ldrb	r3, [r3, #0]
 8017e52:	461a      	mov	r2, r3
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	685b      	ldr	r3, [r3, #4]
 8017e58:	429a      	cmp	r2, r3
 8017e5a:	d02a      	beq.n	8017eb2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	685b      	ldr	r3, [r3, #4]
 8017e60:	b2db      	uxtb	r3, r3
 8017e62:	4619      	mov	r1, r3
 8017e64:	6878      	ldr	r0, [r7, #4]
 8017e66:	f7ff f8ff 	bl	8017068 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8017e6a:	4b1d      	ldr	r3, [pc, #116]	; (8017ee0 <USBD_SetConfig+0x148>)
 8017e6c:	781b      	ldrb	r3, [r3, #0]
 8017e6e:	461a      	mov	r2, r3
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8017e74:	4b1a      	ldr	r3, [pc, #104]	; (8017ee0 <USBD_SetConfig+0x148>)
 8017e76:	781b      	ldrb	r3, [r3, #0]
 8017e78:	4619      	mov	r1, r3
 8017e7a:	6878      	ldr	r0, [r7, #4]
 8017e7c:	f7ff f8d8 	bl	8017030 <USBD_SetClassConfig>
 8017e80:	4603      	mov	r3, r0
 8017e82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8017e84:	7bfb      	ldrb	r3, [r7, #15]
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d00f      	beq.n	8017eaa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8017e8a:	6839      	ldr	r1, [r7, #0]
 8017e8c:	6878      	ldr	r0, [r7, #4]
 8017e8e:	f000 f903 	bl	8018098 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	685b      	ldr	r3, [r3, #4]
 8017e96:	b2db      	uxtb	r3, r3
 8017e98:	4619      	mov	r1, r3
 8017e9a:	6878      	ldr	r0, [r7, #4]
 8017e9c:	f7ff f8e4 	bl	8017068 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	2202      	movs	r2, #2
 8017ea4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8017ea8:	e014      	b.n	8017ed4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8017eaa:	6878      	ldr	r0, [r7, #4]
 8017eac:	f000 f9bf 	bl	801822e <USBD_CtlSendStatus>
      break;
 8017eb0:	e010      	b.n	8017ed4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8017eb2:	6878      	ldr	r0, [r7, #4]
 8017eb4:	f000 f9bb 	bl	801822e <USBD_CtlSendStatus>
      break;
 8017eb8:	e00c      	b.n	8017ed4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8017eba:	6839      	ldr	r1, [r7, #0]
 8017ebc:	6878      	ldr	r0, [r7, #4]
 8017ebe:	f000 f8eb 	bl	8018098 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8017ec2:	4b07      	ldr	r3, [pc, #28]	; (8017ee0 <USBD_SetConfig+0x148>)
 8017ec4:	781b      	ldrb	r3, [r3, #0]
 8017ec6:	4619      	mov	r1, r3
 8017ec8:	6878      	ldr	r0, [r7, #4]
 8017eca:	f7ff f8cd 	bl	8017068 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8017ece:	2303      	movs	r3, #3
 8017ed0:	73fb      	strb	r3, [r7, #15]
      break;
 8017ed2:	bf00      	nop
  }

  return ret;
 8017ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ed6:	4618      	mov	r0, r3
 8017ed8:	3710      	adds	r7, #16
 8017eda:	46bd      	mov	sp, r7
 8017edc:	bd80      	pop	{r7, pc}
 8017ede:	bf00      	nop
 8017ee0:	200013c0 	.word	0x200013c0

08017ee4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017ee4:	b580      	push	{r7, lr}
 8017ee6:	b082      	sub	sp, #8
 8017ee8:	af00      	add	r7, sp, #0
 8017eea:	6078      	str	r0, [r7, #4]
 8017eec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017eee:	683b      	ldr	r3, [r7, #0]
 8017ef0:	88db      	ldrh	r3, [r3, #6]
 8017ef2:	2b01      	cmp	r3, #1
 8017ef4:	d004      	beq.n	8017f00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8017ef6:	6839      	ldr	r1, [r7, #0]
 8017ef8:	6878      	ldr	r0, [r7, #4]
 8017efa:	f000 f8cd 	bl	8018098 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017efe:	e023      	b.n	8017f48 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017f06:	b2db      	uxtb	r3, r3
 8017f08:	2b02      	cmp	r3, #2
 8017f0a:	dc02      	bgt.n	8017f12 <USBD_GetConfig+0x2e>
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	dc03      	bgt.n	8017f18 <USBD_GetConfig+0x34>
 8017f10:	e015      	b.n	8017f3e <USBD_GetConfig+0x5a>
 8017f12:	2b03      	cmp	r3, #3
 8017f14:	d00b      	beq.n	8017f2e <USBD_GetConfig+0x4a>
 8017f16:	e012      	b.n	8017f3e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	2200      	movs	r2, #0
 8017f1c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	3308      	adds	r3, #8
 8017f22:	2201      	movs	r2, #1
 8017f24:	4619      	mov	r1, r3
 8017f26:	6878      	ldr	r0, [r7, #4]
 8017f28:	f000 f927 	bl	801817a <USBD_CtlSendData>
        break;
 8017f2c:	e00c      	b.n	8017f48 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	3304      	adds	r3, #4
 8017f32:	2201      	movs	r2, #1
 8017f34:	4619      	mov	r1, r3
 8017f36:	6878      	ldr	r0, [r7, #4]
 8017f38:	f000 f91f 	bl	801817a <USBD_CtlSendData>
        break;
 8017f3c:	e004      	b.n	8017f48 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017f3e:	6839      	ldr	r1, [r7, #0]
 8017f40:	6878      	ldr	r0, [r7, #4]
 8017f42:	f000 f8a9 	bl	8018098 <USBD_CtlError>
        break;
 8017f46:	bf00      	nop
}
 8017f48:	bf00      	nop
 8017f4a:	3708      	adds	r7, #8
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	bd80      	pop	{r7, pc}

08017f50 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017f50:	b580      	push	{r7, lr}
 8017f52:	b082      	sub	sp, #8
 8017f54:	af00      	add	r7, sp, #0
 8017f56:	6078      	str	r0, [r7, #4]
 8017f58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017f60:	b2db      	uxtb	r3, r3
 8017f62:	3b01      	subs	r3, #1
 8017f64:	2b02      	cmp	r3, #2
 8017f66:	d81e      	bhi.n	8017fa6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8017f68:	683b      	ldr	r3, [r7, #0]
 8017f6a:	88db      	ldrh	r3, [r3, #6]
 8017f6c:	2b02      	cmp	r3, #2
 8017f6e:	d004      	beq.n	8017f7a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017f70:	6839      	ldr	r1, [r7, #0]
 8017f72:	6878      	ldr	r0, [r7, #4]
 8017f74:	f000 f890 	bl	8018098 <USBD_CtlError>
        break;
 8017f78:	e01a      	b.n	8017fb0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	2201      	movs	r2, #1
 8017f7e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d005      	beq.n	8017f96 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	68db      	ldr	r3, [r3, #12]
 8017f8e:	f043 0202 	orr.w	r2, r3, #2
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	330c      	adds	r3, #12
 8017f9a:	2202      	movs	r2, #2
 8017f9c:	4619      	mov	r1, r3
 8017f9e:	6878      	ldr	r0, [r7, #4]
 8017fa0:	f000 f8eb 	bl	801817a <USBD_CtlSendData>
      break;
 8017fa4:	e004      	b.n	8017fb0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8017fa6:	6839      	ldr	r1, [r7, #0]
 8017fa8:	6878      	ldr	r0, [r7, #4]
 8017faa:	f000 f875 	bl	8018098 <USBD_CtlError>
      break;
 8017fae:	bf00      	nop
  }
}
 8017fb0:	bf00      	nop
 8017fb2:	3708      	adds	r7, #8
 8017fb4:	46bd      	mov	sp, r7
 8017fb6:	bd80      	pop	{r7, pc}

08017fb8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017fb8:	b580      	push	{r7, lr}
 8017fba:	b082      	sub	sp, #8
 8017fbc:	af00      	add	r7, sp, #0
 8017fbe:	6078      	str	r0, [r7, #4]
 8017fc0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017fc2:	683b      	ldr	r3, [r7, #0]
 8017fc4:	885b      	ldrh	r3, [r3, #2]
 8017fc6:	2b01      	cmp	r3, #1
 8017fc8:	d106      	bne.n	8017fd8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	2201      	movs	r2, #1
 8017fce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8017fd2:	6878      	ldr	r0, [r7, #4]
 8017fd4:	f000 f92b 	bl	801822e <USBD_CtlSendStatus>
  }
}
 8017fd8:	bf00      	nop
 8017fda:	3708      	adds	r7, #8
 8017fdc:	46bd      	mov	sp, r7
 8017fde:	bd80      	pop	{r7, pc}

08017fe0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b082      	sub	sp, #8
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	6078      	str	r0, [r7, #4]
 8017fe8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017ff0:	b2db      	uxtb	r3, r3
 8017ff2:	3b01      	subs	r3, #1
 8017ff4:	2b02      	cmp	r3, #2
 8017ff6:	d80b      	bhi.n	8018010 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017ff8:	683b      	ldr	r3, [r7, #0]
 8017ffa:	885b      	ldrh	r3, [r3, #2]
 8017ffc:	2b01      	cmp	r3, #1
 8017ffe:	d10c      	bne.n	801801a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	2200      	movs	r2, #0
 8018004:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8018008:	6878      	ldr	r0, [r7, #4]
 801800a:	f000 f910 	bl	801822e <USBD_CtlSendStatus>
      }
      break;
 801800e:	e004      	b.n	801801a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8018010:	6839      	ldr	r1, [r7, #0]
 8018012:	6878      	ldr	r0, [r7, #4]
 8018014:	f000 f840 	bl	8018098 <USBD_CtlError>
      break;
 8018018:	e000      	b.n	801801c <USBD_ClrFeature+0x3c>
      break;
 801801a:	bf00      	nop
  }
}
 801801c:	bf00      	nop
 801801e:	3708      	adds	r7, #8
 8018020:	46bd      	mov	sp, r7
 8018022:	bd80      	pop	{r7, pc}

08018024 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8018024:	b580      	push	{r7, lr}
 8018026:	b084      	sub	sp, #16
 8018028:	af00      	add	r7, sp, #0
 801802a:	6078      	str	r0, [r7, #4]
 801802c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801802e:	683b      	ldr	r3, [r7, #0]
 8018030:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8018032:	68fb      	ldr	r3, [r7, #12]
 8018034:	781a      	ldrb	r2, [r3, #0]
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	3301      	adds	r3, #1
 801803e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8018040:	68fb      	ldr	r3, [r7, #12]
 8018042:	781a      	ldrb	r2, [r3, #0]
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8018048:	68fb      	ldr	r3, [r7, #12]
 801804a:	3301      	adds	r3, #1
 801804c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801804e:	68f8      	ldr	r0, [r7, #12]
 8018050:	f7ff fa91 	bl	8017576 <SWAPBYTE>
 8018054:	4603      	mov	r3, r0
 8018056:	461a      	mov	r2, r3
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	3301      	adds	r3, #1
 8018060:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8018062:	68fb      	ldr	r3, [r7, #12]
 8018064:	3301      	adds	r3, #1
 8018066:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8018068:	68f8      	ldr	r0, [r7, #12]
 801806a:	f7ff fa84 	bl	8017576 <SWAPBYTE>
 801806e:	4603      	mov	r3, r0
 8018070:	461a      	mov	r2, r3
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	3301      	adds	r3, #1
 801807a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801807c:	68fb      	ldr	r3, [r7, #12]
 801807e:	3301      	adds	r3, #1
 8018080:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8018082:	68f8      	ldr	r0, [r7, #12]
 8018084:	f7ff fa77 	bl	8017576 <SWAPBYTE>
 8018088:	4603      	mov	r3, r0
 801808a:	461a      	mov	r2, r3
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	80da      	strh	r2, [r3, #6]
}
 8018090:	bf00      	nop
 8018092:	3710      	adds	r7, #16
 8018094:	46bd      	mov	sp, r7
 8018096:	bd80      	pop	{r7, pc}

08018098 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018098:	b580      	push	{r7, lr}
 801809a:	b082      	sub	sp, #8
 801809c:	af00      	add	r7, sp, #0
 801809e:	6078      	str	r0, [r7, #4]
 80180a0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80180a2:	2180      	movs	r1, #128	; 0x80
 80180a4:	6878      	ldr	r0, [r7, #4]
 80180a6:	f000 fd35 	bl	8018b14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80180aa:	2100      	movs	r1, #0
 80180ac:	6878      	ldr	r0, [r7, #4]
 80180ae:	f000 fd31 	bl	8018b14 <USBD_LL_StallEP>
}
 80180b2:	bf00      	nop
 80180b4:	3708      	adds	r7, #8
 80180b6:	46bd      	mov	sp, r7
 80180b8:	bd80      	pop	{r7, pc}

080180ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80180ba:	b580      	push	{r7, lr}
 80180bc:	b086      	sub	sp, #24
 80180be:	af00      	add	r7, sp, #0
 80180c0:	60f8      	str	r0, [r7, #12]
 80180c2:	60b9      	str	r1, [r7, #8]
 80180c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80180c6:	2300      	movs	r3, #0
 80180c8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d036      	beq.n	801813e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80180d4:	6938      	ldr	r0, [r7, #16]
 80180d6:	f000 f836 	bl	8018146 <USBD_GetLen>
 80180da:	4603      	mov	r3, r0
 80180dc:	3301      	adds	r3, #1
 80180de:	b29b      	uxth	r3, r3
 80180e0:	005b      	lsls	r3, r3, #1
 80180e2:	b29a      	uxth	r2, r3
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80180e8:	7dfb      	ldrb	r3, [r7, #23]
 80180ea:	68ba      	ldr	r2, [r7, #8]
 80180ec:	4413      	add	r3, r2
 80180ee:	687a      	ldr	r2, [r7, #4]
 80180f0:	7812      	ldrb	r2, [r2, #0]
 80180f2:	701a      	strb	r2, [r3, #0]
  idx++;
 80180f4:	7dfb      	ldrb	r3, [r7, #23]
 80180f6:	3301      	adds	r3, #1
 80180f8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80180fa:	7dfb      	ldrb	r3, [r7, #23]
 80180fc:	68ba      	ldr	r2, [r7, #8]
 80180fe:	4413      	add	r3, r2
 8018100:	2203      	movs	r2, #3
 8018102:	701a      	strb	r2, [r3, #0]
  idx++;
 8018104:	7dfb      	ldrb	r3, [r7, #23]
 8018106:	3301      	adds	r3, #1
 8018108:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801810a:	e013      	b.n	8018134 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801810c:	7dfb      	ldrb	r3, [r7, #23]
 801810e:	68ba      	ldr	r2, [r7, #8]
 8018110:	4413      	add	r3, r2
 8018112:	693a      	ldr	r2, [r7, #16]
 8018114:	7812      	ldrb	r2, [r2, #0]
 8018116:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8018118:	693b      	ldr	r3, [r7, #16]
 801811a:	3301      	adds	r3, #1
 801811c:	613b      	str	r3, [r7, #16]
    idx++;
 801811e:	7dfb      	ldrb	r3, [r7, #23]
 8018120:	3301      	adds	r3, #1
 8018122:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8018124:	7dfb      	ldrb	r3, [r7, #23]
 8018126:	68ba      	ldr	r2, [r7, #8]
 8018128:	4413      	add	r3, r2
 801812a:	2200      	movs	r2, #0
 801812c:	701a      	strb	r2, [r3, #0]
    idx++;
 801812e:	7dfb      	ldrb	r3, [r7, #23]
 8018130:	3301      	adds	r3, #1
 8018132:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8018134:	693b      	ldr	r3, [r7, #16]
 8018136:	781b      	ldrb	r3, [r3, #0]
 8018138:	2b00      	cmp	r3, #0
 801813a:	d1e7      	bne.n	801810c <USBD_GetString+0x52>
 801813c:	e000      	b.n	8018140 <USBD_GetString+0x86>
    return;
 801813e:	bf00      	nop
  }
}
 8018140:	3718      	adds	r7, #24
 8018142:	46bd      	mov	sp, r7
 8018144:	bd80      	pop	{r7, pc}

08018146 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8018146:	b480      	push	{r7}
 8018148:	b085      	sub	sp, #20
 801814a:	af00      	add	r7, sp, #0
 801814c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801814e:	2300      	movs	r3, #0
 8018150:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8018156:	e005      	b.n	8018164 <USBD_GetLen+0x1e>
  {
    len++;
 8018158:	7bfb      	ldrb	r3, [r7, #15]
 801815a:	3301      	adds	r3, #1
 801815c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801815e:	68bb      	ldr	r3, [r7, #8]
 8018160:	3301      	adds	r3, #1
 8018162:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8018164:	68bb      	ldr	r3, [r7, #8]
 8018166:	781b      	ldrb	r3, [r3, #0]
 8018168:	2b00      	cmp	r3, #0
 801816a:	d1f5      	bne.n	8018158 <USBD_GetLen+0x12>
  }

  return len;
 801816c:	7bfb      	ldrb	r3, [r7, #15]
}
 801816e:	4618      	mov	r0, r3
 8018170:	3714      	adds	r7, #20
 8018172:	46bd      	mov	sp, r7
 8018174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018178:	4770      	bx	lr

0801817a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801817a:	b580      	push	{r7, lr}
 801817c:	b084      	sub	sp, #16
 801817e:	af00      	add	r7, sp, #0
 8018180:	60f8      	str	r0, [r7, #12]
 8018182:	60b9      	str	r1, [r7, #8]
 8018184:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8018186:	68fb      	ldr	r3, [r7, #12]
 8018188:	2202      	movs	r2, #2
 801818a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801818e:	68fb      	ldr	r3, [r7, #12]
 8018190:	687a      	ldr	r2, [r7, #4]
 8018192:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	687a      	ldr	r2, [r7, #4]
 8018198:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	68ba      	ldr	r2, [r7, #8]
 801819e:	2100      	movs	r1, #0
 80181a0:	68f8      	ldr	r0, [r7, #12]
 80181a2:	f000 fd85 	bl	8018cb0 <USBD_LL_Transmit>

  return USBD_OK;
 80181a6:	2300      	movs	r3, #0
}
 80181a8:	4618      	mov	r0, r3
 80181aa:	3710      	adds	r7, #16
 80181ac:	46bd      	mov	sp, r7
 80181ae:	bd80      	pop	{r7, pc}

080181b0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80181b0:	b580      	push	{r7, lr}
 80181b2:	b084      	sub	sp, #16
 80181b4:	af00      	add	r7, sp, #0
 80181b6:	60f8      	str	r0, [r7, #12]
 80181b8:	60b9      	str	r1, [r7, #8]
 80181ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	68ba      	ldr	r2, [r7, #8]
 80181c0:	2100      	movs	r1, #0
 80181c2:	68f8      	ldr	r0, [r7, #12]
 80181c4:	f000 fd74 	bl	8018cb0 <USBD_LL_Transmit>

  return USBD_OK;
 80181c8:	2300      	movs	r3, #0
}
 80181ca:	4618      	mov	r0, r3
 80181cc:	3710      	adds	r7, #16
 80181ce:	46bd      	mov	sp, r7
 80181d0:	bd80      	pop	{r7, pc}

080181d2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80181d2:	b580      	push	{r7, lr}
 80181d4:	b084      	sub	sp, #16
 80181d6:	af00      	add	r7, sp, #0
 80181d8:	60f8      	str	r0, [r7, #12]
 80181da:	60b9      	str	r1, [r7, #8]
 80181dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	2203      	movs	r2, #3
 80181e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80181e6:	68fb      	ldr	r3, [r7, #12]
 80181e8:	687a      	ldr	r2, [r7, #4]
 80181ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80181ee:	68fb      	ldr	r3, [r7, #12]
 80181f0:	687a      	ldr	r2, [r7, #4]
 80181f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	68ba      	ldr	r2, [r7, #8]
 80181fa:	2100      	movs	r1, #0
 80181fc:	68f8      	ldr	r0, [r7, #12]
 80181fe:	f000 fd8f 	bl	8018d20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018202:	2300      	movs	r3, #0
}
 8018204:	4618      	mov	r0, r3
 8018206:	3710      	adds	r7, #16
 8018208:	46bd      	mov	sp, r7
 801820a:	bd80      	pop	{r7, pc}

0801820c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801820c:	b580      	push	{r7, lr}
 801820e:	b084      	sub	sp, #16
 8018210:	af00      	add	r7, sp, #0
 8018212:	60f8      	str	r0, [r7, #12]
 8018214:	60b9      	str	r1, [r7, #8]
 8018216:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	68ba      	ldr	r2, [r7, #8]
 801821c:	2100      	movs	r1, #0
 801821e:	68f8      	ldr	r0, [r7, #12]
 8018220:	f000 fd7e 	bl	8018d20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018224:	2300      	movs	r3, #0
}
 8018226:	4618      	mov	r0, r3
 8018228:	3710      	adds	r7, #16
 801822a:	46bd      	mov	sp, r7
 801822c:	bd80      	pop	{r7, pc}

0801822e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801822e:	b580      	push	{r7, lr}
 8018230:	b082      	sub	sp, #8
 8018232:	af00      	add	r7, sp, #0
 8018234:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	2204      	movs	r2, #4
 801823a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801823e:	2300      	movs	r3, #0
 8018240:	2200      	movs	r2, #0
 8018242:	2100      	movs	r1, #0
 8018244:	6878      	ldr	r0, [r7, #4]
 8018246:	f000 fd33 	bl	8018cb0 <USBD_LL_Transmit>

  return USBD_OK;
 801824a:	2300      	movs	r3, #0
}
 801824c:	4618      	mov	r0, r3
 801824e:	3708      	adds	r7, #8
 8018250:	46bd      	mov	sp, r7
 8018252:	bd80      	pop	{r7, pc}

08018254 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8018254:	b580      	push	{r7, lr}
 8018256:	b082      	sub	sp, #8
 8018258:	af00      	add	r7, sp, #0
 801825a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	2205      	movs	r2, #5
 8018260:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018264:	2300      	movs	r3, #0
 8018266:	2200      	movs	r2, #0
 8018268:	2100      	movs	r1, #0
 801826a:	6878      	ldr	r0, [r7, #4]
 801826c:	f000 fd58 	bl	8018d20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8018270:	2300      	movs	r3, #0
}
 8018272:	4618      	mov	r0, r3
 8018274:	3708      	adds	r7, #8
 8018276:	46bd      	mov	sp, r7
 8018278:	bd80      	pop	{r7, pc}
	...

0801827c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801827c:	b580      	push	{r7, lr}
 801827e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8018280:	2200      	movs	r2, #0
 8018282:	4912      	ldr	r1, [pc, #72]	; (80182cc <MX_USB_DEVICE_Init+0x50>)
 8018284:	4812      	ldr	r0, [pc, #72]	; (80182d0 <MX_USB_DEVICE_Init+0x54>)
 8018286:	f7fe fe65 	bl	8016f54 <USBD_Init>
 801828a:	4603      	mov	r3, r0
 801828c:	2b00      	cmp	r3, #0
 801828e:	d001      	beq.n	8018294 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018290:	f7e9 fcfa 	bl	8001c88 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8018294:	490f      	ldr	r1, [pc, #60]	; (80182d4 <MX_USB_DEVICE_Init+0x58>)
 8018296:	480e      	ldr	r0, [pc, #56]	; (80182d0 <MX_USB_DEVICE_Init+0x54>)
 8018298:	f7fe fe8c 	bl	8016fb4 <USBD_RegisterClass>
 801829c:	4603      	mov	r3, r0
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d001      	beq.n	80182a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80182a2:	f7e9 fcf1 	bl	8001c88 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80182a6:	490c      	ldr	r1, [pc, #48]	; (80182d8 <MX_USB_DEVICE_Init+0x5c>)
 80182a8:	4809      	ldr	r0, [pc, #36]	; (80182d0 <MX_USB_DEVICE_Init+0x54>)
 80182aa:	f7fe fddd 	bl	8016e68 <USBD_CDC_RegisterInterface>
 80182ae:	4603      	mov	r3, r0
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	d001      	beq.n	80182b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80182b4:	f7e9 fce8 	bl	8001c88 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80182b8:	4805      	ldr	r0, [pc, #20]	; (80182d0 <MX_USB_DEVICE_Init+0x54>)
 80182ba:	f7fe fea2 	bl	8017002 <USBD_Start>
 80182be:	4603      	mov	r3, r0
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d001      	beq.n	80182c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80182c4:	f7e9 fce0 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80182c8:	bf00      	nop
 80182ca:	bd80      	pop	{r7, pc}
 80182cc:	2000067c 	.word	0x2000067c
 80182d0:	200013c4 	.word	0x200013c4
 80182d4:	20000564 	.word	0x20000564
 80182d8:	20000668 	.word	0x20000668

080182dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80182dc:	b580      	push	{r7, lr}
 80182de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80182e0:	2200      	movs	r2, #0
 80182e2:	4905      	ldr	r1, [pc, #20]	; (80182f8 <CDC_Init_FS+0x1c>)
 80182e4:	4805      	ldr	r0, [pc, #20]	; (80182fc <CDC_Init_FS+0x20>)
 80182e6:	f7fe fdd4 	bl	8016e92 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80182ea:	4905      	ldr	r1, [pc, #20]	; (8018300 <CDC_Init_FS+0x24>)
 80182ec:	4803      	ldr	r0, [pc, #12]	; (80182fc <CDC_Init_FS+0x20>)
 80182ee:	f7fe fdee 	bl	8016ece <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80182f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80182f4:	4618      	mov	r0, r3
 80182f6:	bd80      	pop	{r7, pc}
 80182f8:	20001e94 	.word	0x20001e94
 80182fc:	200013c4 	.word	0x200013c4
 8018300:	20001694 	.word	0x20001694

08018304 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018304:	b480      	push	{r7}
 8018306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018308:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801830a:	4618      	mov	r0, r3
 801830c:	46bd      	mov	sp, r7
 801830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018312:	4770      	bx	lr

08018314 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018314:	b480      	push	{r7}
 8018316:	b083      	sub	sp, #12
 8018318:	af00      	add	r7, sp, #0
 801831a:	4603      	mov	r3, r0
 801831c:	6039      	str	r1, [r7, #0]
 801831e:	71fb      	strb	r3, [r7, #7]
 8018320:	4613      	mov	r3, r2
 8018322:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8018324:	79fb      	ldrb	r3, [r7, #7]
 8018326:	2b23      	cmp	r3, #35	; 0x23
 8018328:	d84a      	bhi.n	80183c0 <CDC_Control_FS+0xac>
 801832a:	a201      	add	r2, pc, #4	; (adr r2, 8018330 <CDC_Control_FS+0x1c>)
 801832c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018330:	080183c1 	.word	0x080183c1
 8018334:	080183c1 	.word	0x080183c1
 8018338:	080183c1 	.word	0x080183c1
 801833c:	080183c1 	.word	0x080183c1
 8018340:	080183c1 	.word	0x080183c1
 8018344:	080183c1 	.word	0x080183c1
 8018348:	080183c1 	.word	0x080183c1
 801834c:	080183c1 	.word	0x080183c1
 8018350:	080183c1 	.word	0x080183c1
 8018354:	080183c1 	.word	0x080183c1
 8018358:	080183c1 	.word	0x080183c1
 801835c:	080183c1 	.word	0x080183c1
 8018360:	080183c1 	.word	0x080183c1
 8018364:	080183c1 	.word	0x080183c1
 8018368:	080183c1 	.word	0x080183c1
 801836c:	080183c1 	.word	0x080183c1
 8018370:	080183c1 	.word	0x080183c1
 8018374:	080183c1 	.word	0x080183c1
 8018378:	080183c1 	.word	0x080183c1
 801837c:	080183c1 	.word	0x080183c1
 8018380:	080183c1 	.word	0x080183c1
 8018384:	080183c1 	.word	0x080183c1
 8018388:	080183c1 	.word	0x080183c1
 801838c:	080183c1 	.word	0x080183c1
 8018390:	080183c1 	.word	0x080183c1
 8018394:	080183c1 	.word	0x080183c1
 8018398:	080183c1 	.word	0x080183c1
 801839c:	080183c1 	.word	0x080183c1
 80183a0:	080183c1 	.word	0x080183c1
 80183a4:	080183c1 	.word	0x080183c1
 80183a8:	080183c1 	.word	0x080183c1
 80183ac:	080183c1 	.word	0x080183c1
 80183b0:	080183c1 	.word	0x080183c1
 80183b4:	080183c1 	.word	0x080183c1
 80183b8:	080183c1 	.word	0x080183c1
 80183bc:	080183c1 	.word	0x080183c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80183c0:	bf00      	nop
  }

  return (USBD_OK);
 80183c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80183c4:	4618      	mov	r0, r3
 80183c6:	370c      	adds	r7, #12
 80183c8:	46bd      	mov	sp, r7
 80183ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ce:	4770      	bx	lr

080183d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80183d0:	b580      	push	{r7, lr}
 80183d2:	b082      	sub	sp, #8
 80183d4:	af00      	add	r7, sp, #0
 80183d6:	6078      	str	r0, [r7, #4]
 80183d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80183da:	6879      	ldr	r1, [r7, #4]
 80183dc:	4805      	ldr	r0, [pc, #20]	; (80183f4 <CDC_Receive_FS+0x24>)
 80183de:	f7fe fd76 	bl	8016ece <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80183e2:	4804      	ldr	r0, [pc, #16]	; (80183f4 <CDC_Receive_FS+0x24>)
 80183e4:	f7fe fd8c 	bl	8016f00 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80183e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80183ea:	4618      	mov	r0, r3
 80183ec:	3708      	adds	r7, #8
 80183ee:	46bd      	mov	sp, r7
 80183f0:	bd80      	pop	{r7, pc}
 80183f2:	bf00      	nop
 80183f4:	200013c4 	.word	0x200013c4

080183f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80183f8:	b480      	push	{r7}
 80183fa:	b087      	sub	sp, #28
 80183fc:	af00      	add	r7, sp, #0
 80183fe:	60f8      	str	r0, [r7, #12]
 8018400:	60b9      	str	r1, [r7, #8]
 8018402:	4613      	mov	r3, r2
 8018404:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018406:	2300      	movs	r3, #0
 8018408:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801840a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801840e:	4618      	mov	r0, r3
 8018410:	371c      	adds	r7, #28
 8018412:	46bd      	mov	sp, r7
 8018414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018418:	4770      	bx	lr
	...

0801841c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801841c:	b480      	push	{r7}
 801841e:	b083      	sub	sp, #12
 8018420:	af00      	add	r7, sp, #0
 8018422:	4603      	mov	r3, r0
 8018424:	6039      	str	r1, [r7, #0]
 8018426:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018428:	683b      	ldr	r3, [r7, #0]
 801842a:	2212      	movs	r2, #18
 801842c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801842e:	4b03      	ldr	r3, [pc, #12]	; (801843c <USBD_FS_DeviceDescriptor+0x20>)
}
 8018430:	4618      	mov	r0, r3
 8018432:	370c      	adds	r7, #12
 8018434:	46bd      	mov	sp, r7
 8018436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801843a:	4770      	bx	lr
 801843c:	2000069c 	.word	0x2000069c

08018440 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018440:	b480      	push	{r7}
 8018442:	b083      	sub	sp, #12
 8018444:	af00      	add	r7, sp, #0
 8018446:	4603      	mov	r3, r0
 8018448:	6039      	str	r1, [r7, #0]
 801844a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801844c:	683b      	ldr	r3, [r7, #0]
 801844e:	2204      	movs	r2, #4
 8018450:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018452:	4b03      	ldr	r3, [pc, #12]	; (8018460 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018454:	4618      	mov	r0, r3
 8018456:	370c      	adds	r7, #12
 8018458:	46bd      	mov	sp, r7
 801845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801845e:	4770      	bx	lr
 8018460:	200006bc 	.word	0x200006bc

08018464 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018464:	b580      	push	{r7, lr}
 8018466:	b082      	sub	sp, #8
 8018468:	af00      	add	r7, sp, #0
 801846a:	4603      	mov	r3, r0
 801846c:	6039      	str	r1, [r7, #0]
 801846e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018470:	79fb      	ldrb	r3, [r7, #7]
 8018472:	2b00      	cmp	r3, #0
 8018474:	d105      	bne.n	8018482 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018476:	683a      	ldr	r2, [r7, #0]
 8018478:	4907      	ldr	r1, [pc, #28]	; (8018498 <USBD_FS_ProductStrDescriptor+0x34>)
 801847a:	4808      	ldr	r0, [pc, #32]	; (801849c <USBD_FS_ProductStrDescriptor+0x38>)
 801847c:	f7ff fe1d 	bl	80180ba <USBD_GetString>
 8018480:	e004      	b.n	801848c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018482:	683a      	ldr	r2, [r7, #0]
 8018484:	4904      	ldr	r1, [pc, #16]	; (8018498 <USBD_FS_ProductStrDescriptor+0x34>)
 8018486:	4805      	ldr	r0, [pc, #20]	; (801849c <USBD_FS_ProductStrDescriptor+0x38>)
 8018488:	f7ff fe17 	bl	80180ba <USBD_GetString>
  }
  return USBD_StrDesc;
 801848c:	4b02      	ldr	r3, [pc, #8]	; (8018498 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801848e:	4618      	mov	r0, r3
 8018490:	3708      	adds	r7, #8
 8018492:	46bd      	mov	sp, r7
 8018494:	bd80      	pop	{r7, pc}
 8018496:	bf00      	nop
 8018498:	20002694 	.word	0x20002694
 801849c:	0801a050 	.word	0x0801a050

080184a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80184a0:	b580      	push	{r7, lr}
 80184a2:	b082      	sub	sp, #8
 80184a4:	af00      	add	r7, sp, #0
 80184a6:	4603      	mov	r3, r0
 80184a8:	6039      	str	r1, [r7, #0]
 80184aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80184ac:	683a      	ldr	r2, [r7, #0]
 80184ae:	4904      	ldr	r1, [pc, #16]	; (80184c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80184b0:	4804      	ldr	r0, [pc, #16]	; (80184c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80184b2:	f7ff fe02 	bl	80180ba <USBD_GetString>
  return USBD_StrDesc;
 80184b6:	4b02      	ldr	r3, [pc, #8]	; (80184c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80184b8:	4618      	mov	r0, r3
 80184ba:	3708      	adds	r7, #8
 80184bc:	46bd      	mov	sp, r7
 80184be:	bd80      	pop	{r7, pc}
 80184c0:	20002694 	.word	0x20002694
 80184c4:	0801a068 	.word	0x0801a068

080184c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80184c8:	b580      	push	{r7, lr}
 80184ca:	b082      	sub	sp, #8
 80184cc:	af00      	add	r7, sp, #0
 80184ce:	4603      	mov	r3, r0
 80184d0:	6039      	str	r1, [r7, #0]
 80184d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80184d4:	683b      	ldr	r3, [r7, #0]
 80184d6:	221a      	movs	r2, #26
 80184d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80184da:	f000 f855 	bl	8018588 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80184de:	4b02      	ldr	r3, [pc, #8]	; (80184e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80184e0:	4618      	mov	r0, r3
 80184e2:	3708      	adds	r7, #8
 80184e4:	46bd      	mov	sp, r7
 80184e6:	bd80      	pop	{r7, pc}
 80184e8:	200006c0 	.word	0x200006c0

080184ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80184ec:	b580      	push	{r7, lr}
 80184ee:	b082      	sub	sp, #8
 80184f0:	af00      	add	r7, sp, #0
 80184f2:	4603      	mov	r3, r0
 80184f4:	6039      	str	r1, [r7, #0]
 80184f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80184f8:	79fb      	ldrb	r3, [r7, #7]
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	d105      	bne.n	801850a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80184fe:	683a      	ldr	r2, [r7, #0]
 8018500:	4907      	ldr	r1, [pc, #28]	; (8018520 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018502:	4808      	ldr	r0, [pc, #32]	; (8018524 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018504:	f7ff fdd9 	bl	80180ba <USBD_GetString>
 8018508:	e004      	b.n	8018514 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801850a:	683a      	ldr	r2, [r7, #0]
 801850c:	4904      	ldr	r1, [pc, #16]	; (8018520 <USBD_FS_ConfigStrDescriptor+0x34>)
 801850e:	4805      	ldr	r0, [pc, #20]	; (8018524 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018510:	f7ff fdd3 	bl	80180ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8018514:	4b02      	ldr	r3, [pc, #8]	; (8018520 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018516:	4618      	mov	r0, r3
 8018518:	3708      	adds	r7, #8
 801851a:	46bd      	mov	sp, r7
 801851c:	bd80      	pop	{r7, pc}
 801851e:	bf00      	nop
 8018520:	20002694 	.word	0x20002694
 8018524:	0801a07c 	.word	0x0801a07c

08018528 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018528:	b580      	push	{r7, lr}
 801852a:	b082      	sub	sp, #8
 801852c:	af00      	add	r7, sp, #0
 801852e:	4603      	mov	r3, r0
 8018530:	6039      	str	r1, [r7, #0]
 8018532:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018534:	79fb      	ldrb	r3, [r7, #7]
 8018536:	2b00      	cmp	r3, #0
 8018538:	d105      	bne.n	8018546 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801853a:	683a      	ldr	r2, [r7, #0]
 801853c:	4907      	ldr	r1, [pc, #28]	; (801855c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801853e:	4808      	ldr	r0, [pc, #32]	; (8018560 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018540:	f7ff fdbb 	bl	80180ba <USBD_GetString>
 8018544:	e004      	b.n	8018550 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018546:	683a      	ldr	r2, [r7, #0]
 8018548:	4904      	ldr	r1, [pc, #16]	; (801855c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801854a:	4805      	ldr	r0, [pc, #20]	; (8018560 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801854c:	f7ff fdb5 	bl	80180ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8018550:	4b02      	ldr	r3, [pc, #8]	; (801855c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018552:	4618      	mov	r0, r3
 8018554:	3708      	adds	r7, #8
 8018556:	46bd      	mov	sp, r7
 8018558:	bd80      	pop	{r7, pc}
 801855a:	bf00      	nop
 801855c:	20002694 	.word	0x20002694
 8018560:	0801a088 	.word	0x0801a088

08018564 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018564:	b480      	push	{r7}
 8018566:	b083      	sub	sp, #12
 8018568:	af00      	add	r7, sp, #0
 801856a:	4603      	mov	r3, r0
 801856c:	6039      	str	r1, [r7, #0]
 801856e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8018570:	683b      	ldr	r3, [r7, #0]
 8018572:	220c      	movs	r2, #12
 8018574:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8018576:	4b03      	ldr	r3, [pc, #12]	; (8018584 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8018578:	4618      	mov	r0, r3
 801857a:	370c      	adds	r7, #12
 801857c:	46bd      	mov	sp, r7
 801857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018582:	4770      	bx	lr
 8018584:	200006b0 	.word	0x200006b0

08018588 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018588:	b580      	push	{r7, lr}
 801858a:	b084      	sub	sp, #16
 801858c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801858e:	4b0f      	ldr	r3, [pc, #60]	; (80185cc <Get_SerialNum+0x44>)
 8018590:	681b      	ldr	r3, [r3, #0]
 8018592:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018594:	4b0e      	ldr	r3, [pc, #56]	; (80185d0 <Get_SerialNum+0x48>)
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801859a:	4b0e      	ldr	r3, [pc, #56]	; (80185d4 <Get_SerialNum+0x4c>)
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80185a0:	68fa      	ldr	r2, [r7, #12]
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	4413      	add	r3, r2
 80185a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80185a8:	68fb      	ldr	r3, [r7, #12]
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d009      	beq.n	80185c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80185ae:	2208      	movs	r2, #8
 80185b0:	4909      	ldr	r1, [pc, #36]	; (80185d8 <Get_SerialNum+0x50>)
 80185b2:	68f8      	ldr	r0, [r7, #12]
 80185b4:	f000 f814 	bl	80185e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80185b8:	2204      	movs	r2, #4
 80185ba:	4908      	ldr	r1, [pc, #32]	; (80185dc <Get_SerialNum+0x54>)
 80185bc:	68b8      	ldr	r0, [r7, #8]
 80185be:	f000 f80f 	bl	80185e0 <IntToUnicode>
  }
}
 80185c2:	bf00      	nop
 80185c4:	3710      	adds	r7, #16
 80185c6:	46bd      	mov	sp, r7
 80185c8:	bd80      	pop	{r7, pc}
 80185ca:	bf00      	nop
 80185cc:	1fff7590 	.word	0x1fff7590
 80185d0:	1fff7594 	.word	0x1fff7594
 80185d4:	1fff7598 	.word	0x1fff7598
 80185d8:	200006c2 	.word	0x200006c2
 80185dc:	200006d2 	.word	0x200006d2

080185e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80185e0:	b480      	push	{r7}
 80185e2:	b087      	sub	sp, #28
 80185e4:	af00      	add	r7, sp, #0
 80185e6:	60f8      	str	r0, [r7, #12]
 80185e8:	60b9      	str	r1, [r7, #8]
 80185ea:	4613      	mov	r3, r2
 80185ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80185ee:	2300      	movs	r3, #0
 80185f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80185f2:	2300      	movs	r3, #0
 80185f4:	75fb      	strb	r3, [r7, #23]
 80185f6:	e027      	b.n	8018648 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	0f1b      	lsrs	r3, r3, #28
 80185fc:	2b09      	cmp	r3, #9
 80185fe:	d80b      	bhi.n	8018618 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	0f1b      	lsrs	r3, r3, #28
 8018604:	b2da      	uxtb	r2, r3
 8018606:	7dfb      	ldrb	r3, [r7, #23]
 8018608:	005b      	lsls	r3, r3, #1
 801860a:	4619      	mov	r1, r3
 801860c:	68bb      	ldr	r3, [r7, #8]
 801860e:	440b      	add	r3, r1
 8018610:	3230      	adds	r2, #48	; 0x30
 8018612:	b2d2      	uxtb	r2, r2
 8018614:	701a      	strb	r2, [r3, #0]
 8018616:	e00a      	b.n	801862e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	0f1b      	lsrs	r3, r3, #28
 801861c:	b2da      	uxtb	r2, r3
 801861e:	7dfb      	ldrb	r3, [r7, #23]
 8018620:	005b      	lsls	r3, r3, #1
 8018622:	4619      	mov	r1, r3
 8018624:	68bb      	ldr	r3, [r7, #8]
 8018626:	440b      	add	r3, r1
 8018628:	3237      	adds	r2, #55	; 0x37
 801862a:	b2d2      	uxtb	r2, r2
 801862c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	011b      	lsls	r3, r3, #4
 8018632:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018634:	7dfb      	ldrb	r3, [r7, #23]
 8018636:	005b      	lsls	r3, r3, #1
 8018638:	3301      	adds	r3, #1
 801863a:	68ba      	ldr	r2, [r7, #8]
 801863c:	4413      	add	r3, r2
 801863e:	2200      	movs	r2, #0
 8018640:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018642:	7dfb      	ldrb	r3, [r7, #23]
 8018644:	3301      	adds	r3, #1
 8018646:	75fb      	strb	r3, [r7, #23]
 8018648:	7dfa      	ldrb	r2, [r7, #23]
 801864a:	79fb      	ldrb	r3, [r7, #7]
 801864c:	429a      	cmp	r2, r3
 801864e:	d3d3      	bcc.n	80185f8 <IntToUnicode+0x18>
  }
}
 8018650:	bf00      	nop
 8018652:	bf00      	nop
 8018654:	371c      	adds	r7, #28
 8018656:	46bd      	mov	sp, r7
 8018658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801865c:	4770      	bx	lr
	...

08018660 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018660:	b580      	push	{r7, lr}
 8018662:	b08a      	sub	sp, #40	; 0x28
 8018664:	af00      	add	r7, sp, #0
 8018666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018668:	f107 0314 	add.w	r3, r7, #20
 801866c:	2200      	movs	r2, #0
 801866e:	601a      	str	r2, [r3, #0]
 8018670:	605a      	str	r2, [r3, #4]
 8018672:	609a      	str	r2, [r3, #8]
 8018674:	60da      	str	r2, [r3, #12]
 8018676:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018680:	d14e      	bne.n	8018720 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018682:	4b29      	ldr	r3, [pc, #164]	; (8018728 <HAL_PCD_MspInit+0xc8>)
 8018684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018686:	4a28      	ldr	r2, [pc, #160]	; (8018728 <HAL_PCD_MspInit+0xc8>)
 8018688:	f043 0301 	orr.w	r3, r3, #1
 801868c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801868e:	4b26      	ldr	r3, [pc, #152]	; (8018728 <HAL_PCD_MspInit+0xc8>)
 8018690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018692:	f003 0301 	and.w	r3, r3, #1
 8018696:	613b      	str	r3, [r7, #16]
 8018698:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 801869a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801869e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80186a0:	2302      	movs	r3, #2
 80186a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80186a4:	2300      	movs	r3, #0
 80186a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80186a8:	2303      	movs	r3, #3
 80186aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80186ac:	230a      	movs	r3, #10
 80186ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80186b0:	f107 0314 	add.w	r3, r7, #20
 80186b4:	4619      	mov	r1, r3
 80186b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80186ba:	f7f4 f8ed 	bl	800c898 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80186be:	4b1a      	ldr	r3, [pc, #104]	; (8018728 <HAL_PCD_MspInit+0xc8>)
 80186c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80186c2:	4a19      	ldr	r2, [pc, #100]	; (8018728 <HAL_PCD_MspInit+0xc8>)
 80186c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80186c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80186ca:	4b17      	ldr	r3, [pc, #92]	; (8018728 <HAL_PCD_MspInit+0xc8>)
 80186cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80186ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80186d2:	60fb      	str	r3, [r7, #12]
 80186d4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80186d6:	4b14      	ldr	r3, [pc, #80]	; (8018728 <HAL_PCD_MspInit+0xc8>)
 80186d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80186da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d114      	bne.n	801870c <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80186e2:	4b11      	ldr	r3, [pc, #68]	; (8018728 <HAL_PCD_MspInit+0xc8>)
 80186e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80186e6:	4a10      	ldr	r2, [pc, #64]	; (8018728 <HAL_PCD_MspInit+0xc8>)
 80186e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80186ec:	6593      	str	r3, [r2, #88]	; 0x58
 80186ee:	4b0e      	ldr	r3, [pc, #56]	; (8018728 <HAL_PCD_MspInit+0xc8>)
 80186f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80186f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80186f6:	60bb      	str	r3, [r7, #8]
 80186f8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80186fa:	f7f6 ff8b 	bl	800f614 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80186fe:	4b0a      	ldr	r3, [pc, #40]	; (8018728 <HAL_PCD_MspInit+0xc8>)
 8018700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018702:	4a09      	ldr	r2, [pc, #36]	; (8018728 <HAL_PCD_MspInit+0xc8>)
 8018704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018708:	6593      	str	r3, [r2, #88]	; 0x58
 801870a:	e001      	b.n	8018710 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 801870c:	f7f6 ff82 	bl	800f614 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8018710:	2200      	movs	r2, #0
 8018712:	2100      	movs	r1, #0
 8018714:	2043      	movs	r0, #67	; 0x43
 8018716:	f7f3 fee8 	bl	800c4ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801871a:	2043      	movs	r0, #67	; 0x43
 801871c:	f7f3 ff01 	bl	800c522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018720:	bf00      	nop
 8018722:	3728      	adds	r7, #40	; 0x28
 8018724:	46bd      	mov	sp, r7
 8018726:	bd80      	pop	{r7, pc}
 8018728:	40021000 	.word	0x40021000

0801872c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801872c:	b580      	push	{r7, lr}
 801872e:	b082      	sub	sp, #8
 8018730:	af00      	add	r7, sp, #0
 8018732:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8018740:	4619      	mov	r1, r3
 8018742:	4610      	mov	r0, r2
 8018744:	f7fe fca8 	bl	8017098 <USBD_LL_SetupStage>
}
 8018748:	bf00      	nop
 801874a:	3708      	adds	r7, #8
 801874c:	46bd      	mov	sp, r7
 801874e:	bd80      	pop	{r7, pc}

08018750 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018750:	b580      	push	{r7, lr}
 8018752:	b082      	sub	sp, #8
 8018754:	af00      	add	r7, sp, #0
 8018756:	6078      	str	r0, [r7, #4]
 8018758:	460b      	mov	r3, r1
 801875a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018762:	78fa      	ldrb	r2, [r7, #3]
 8018764:	6879      	ldr	r1, [r7, #4]
 8018766:	4613      	mov	r3, r2
 8018768:	00db      	lsls	r3, r3, #3
 801876a:	4413      	add	r3, r2
 801876c:	009b      	lsls	r3, r3, #2
 801876e:	440b      	add	r3, r1
 8018770:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8018774:	681a      	ldr	r2, [r3, #0]
 8018776:	78fb      	ldrb	r3, [r7, #3]
 8018778:	4619      	mov	r1, r3
 801877a:	f7fe fce2 	bl	8017142 <USBD_LL_DataOutStage>
}
 801877e:	bf00      	nop
 8018780:	3708      	adds	r7, #8
 8018782:	46bd      	mov	sp, r7
 8018784:	bd80      	pop	{r7, pc}

08018786 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018786:	b580      	push	{r7, lr}
 8018788:	b082      	sub	sp, #8
 801878a:	af00      	add	r7, sp, #0
 801878c:	6078      	str	r0, [r7, #4]
 801878e:	460b      	mov	r3, r1
 8018790:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018792:	687b      	ldr	r3, [r7, #4]
 8018794:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018798:	78fa      	ldrb	r2, [r7, #3]
 801879a:	6879      	ldr	r1, [r7, #4]
 801879c:	4613      	mov	r3, r2
 801879e:	00db      	lsls	r3, r3, #3
 80187a0:	4413      	add	r3, r2
 80187a2:	009b      	lsls	r3, r3, #2
 80187a4:	440b      	add	r3, r1
 80187a6:	334c      	adds	r3, #76	; 0x4c
 80187a8:	681a      	ldr	r2, [r3, #0]
 80187aa:	78fb      	ldrb	r3, [r7, #3]
 80187ac:	4619      	mov	r1, r3
 80187ae:	f7fe fd2b 	bl	8017208 <USBD_LL_DataInStage>
}
 80187b2:	bf00      	nop
 80187b4:	3708      	adds	r7, #8
 80187b6:	46bd      	mov	sp, r7
 80187b8:	bd80      	pop	{r7, pc}

080187ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80187ba:	b580      	push	{r7, lr}
 80187bc:	b082      	sub	sp, #8
 80187be:	af00      	add	r7, sp, #0
 80187c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80187c8:	4618      	mov	r0, r3
 80187ca:	f7fe fe3f 	bl	801744c <USBD_LL_SOF>
}
 80187ce:	bf00      	nop
 80187d0:	3708      	adds	r7, #8
 80187d2:	46bd      	mov	sp, r7
 80187d4:	bd80      	pop	{r7, pc}

080187d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80187d6:	b580      	push	{r7, lr}
 80187d8:	b084      	sub	sp, #16
 80187da:	af00      	add	r7, sp, #0
 80187dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80187de:	2301      	movs	r3, #1
 80187e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	68db      	ldr	r3, [r3, #12]
 80187e6:	2b02      	cmp	r3, #2
 80187e8:	d001      	beq.n	80187ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80187ea:	f7e9 fa4d 	bl	8001c88 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80187f4:	7bfa      	ldrb	r2, [r7, #15]
 80187f6:	4611      	mov	r1, r2
 80187f8:	4618      	mov	r0, r3
 80187fa:	f7fe fde9 	bl	80173d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018804:	4618      	mov	r0, r3
 8018806:	f7fe fd95 	bl	8017334 <USBD_LL_Reset>
}
 801880a:	bf00      	nop
 801880c:	3710      	adds	r7, #16
 801880e:	46bd      	mov	sp, r7
 8018810:	bd80      	pop	{r7, pc}
	...

08018814 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018814:	b580      	push	{r7, lr}
 8018816:	b082      	sub	sp, #8
 8018818:	af00      	add	r7, sp, #0
 801881a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	681b      	ldr	r3, [r3, #0]
 8018820:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	687a      	ldr	r2, [r7, #4]
 8018828:	6812      	ldr	r2, [r2, #0]
 801882a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801882e:	f043 0301 	orr.w	r3, r3, #1
 8018832:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801883a:	4618      	mov	r0, r3
 801883c:	f7fe fdd8 	bl	80173f0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	6a1b      	ldr	r3, [r3, #32]
 8018844:	2b00      	cmp	r3, #0
 8018846:	d005      	beq.n	8018854 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018848:	4b04      	ldr	r3, [pc, #16]	; (801885c <HAL_PCD_SuspendCallback+0x48>)
 801884a:	691b      	ldr	r3, [r3, #16]
 801884c:	4a03      	ldr	r2, [pc, #12]	; (801885c <HAL_PCD_SuspendCallback+0x48>)
 801884e:	f043 0306 	orr.w	r3, r3, #6
 8018852:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018854:	bf00      	nop
 8018856:	3708      	adds	r7, #8
 8018858:	46bd      	mov	sp, r7
 801885a:	bd80      	pop	{r7, pc}
 801885c:	e000ed00 	.word	0xe000ed00

08018860 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018860:	b580      	push	{r7, lr}
 8018862:	b082      	sub	sp, #8
 8018864:	af00      	add	r7, sp, #0
 8018866:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	687a      	ldr	r2, [r7, #4]
 8018874:	6812      	ldr	r2, [r2, #0]
 8018876:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801887a:	f023 0301 	bic.w	r3, r3, #1
 801887e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	6a1b      	ldr	r3, [r3, #32]
 8018884:	2b00      	cmp	r3, #0
 8018886:	d007      	beq.n	8018898 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018888:	4b08      	ldr	r3, [pc, #32]	; (80188ac <HAL_PCD_ResumeCallback+0x4c>)
 801888a:	691b      	ldr	r3, [r3, #16]
 801888c:	4a07      	ldr	r2, [pc, #28]	; (80188ac <HAL_PCD_ResumeCallback+0x4c>)
 801888e:	f023 0306 	bic.w	r3, r3, #6
 8018892:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8018894:	f000 faf6 	bl	8018e84 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801889e:	4618      	mov	r0, r3
 80188a0:	f7fe fdbc 	bl	801741c <USBD_LL_Resume>
}
 80188a4:	bf00      	nop
 80188a6:	3708      	adds	r7, #8
 80188a8:	46bd      	mov	sp, r7
 80188aa:	bd80      	pop	{r7, pc}
 80188ac:	e000ed00 	.word	0xe000ed00

080188b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b082      	sub	sp, #8
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	6078      	str	r0, [r7, #4]
 80188b8:	460b      	mov	r3, r1
 80188ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80188c2:	78fa      	ldrb	r2, [r7, #3]
 80188c4:	4611      	mov	r1, r2
 80188c6:	4618      	mov	r0, r3
 80188c8:	f7fe fe08 	bl	80174dc <USBD_LL_IsoOUTIncomplete>
}
 80188cc:	bf00      	nop
 80188ce:	3708      	adds	r7, #8
 80188d0:	46bd      	mov	sp, r7
 80188d2:	bd80      	pop	{r7, pc}

080188d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80188d4:	b580      	push	{r7, lr}
 80188d6:	b082      	sub	sp, #8
 80188d8:	af00      	add	r7, sp, #0
 80188da:	6078      	str	r0, [r7, #4]
 80188dc:	460b      	mov	r3, r1
 80188de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80188e6:	78fa      	ldrb	r2, [r7, #3]
 80188e8:	4611      	mov	r1, r2
 80188ea:	4618      	mov	r0, r3
 80188ec:	f7fe fdd0 	bl	8017490 <USBD_LL_IsoINIncomplete>
}
 80188f0:	bf00      	nop
 80188f2:	3708      	adds	r7, #8
 80188f4:	46bd      	mov	sp, r7
 80188f6:	bd80      	pop	{r7, pc}

080188f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80188f8:	b580      	push	{r7, lr}
 80188fa:	b082      	sub	sp, #8
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018906:	4618      	mov	r0, r3
 8018908:	f7fe fe0e 	bl	8017528 <USBD_LL_DevConnected>
}
 801890c:	bf00      	nop
 801890e:	3708      	adds	r7, #8
 8018910:	46bd      	mov	sp, r7
 8018912:	bd80      	pop	{r7, pc}

08018914 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018914:	b580      	push	{r7, lr}
 8018916:	b082      	sub	sp, #8
 8018918:	af00      	add	r7, sp, #0
 801891a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018922:	4618      	mov	r0, r3
 8018924:	f7fe fe0b 	bl	801753e <USBD_LL_DevDisconnected>
}
 8018928:	bf00      	nop
 801892a:	3708      	adds	r7, #8
 801892c:	46bd      	mov	sp, r7
 801892e:	bd80      	pop	{r7, pc}

08018930 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018930:	b580      	push	{r7, lr}
 8018932:	b082      	sub	sp, #8
 8018934:	af00      	add	r7, sp, #0
 8018936:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	781b      	ldrb	r3, [r3, #0]
 801893c:	2b00      	cmp	r3, #0
 801893e:	d13c      	bne.n	80189ba <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018940:	4a20      	ldr	r2, [pc, #128]	; (80189c4 <USBD_LL_Init+0x94>)
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	4a1e      	ldr	r2, [pc, #120]	; (80189c4 <USBD_LL_Init+0x94>)
 801894c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018950:	4b1c      	ldr	r3, [pc, #112]	; (80189c4 <USBD_LL_Init+0x94>)
 8018952:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8018956:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8018958:	4b1a      	ldr	r3, [pc, #104]	; (80189c4 <USBD_LL_Init+0x94>)
 801895a:	2206      	movs	r2, #6
 801895c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801895e:	4b19      	ldr	r3, [pc, #100]	; (80189c4 <USBD_LL_Init+0x94>)
 8018960:	2202      	movs	r2, #2
 8018962:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018964:	4b17      	ldr	r3, [pc, #92]	; (80189c4 <USBD_LL_Init+0x94>)
 8018966:	2202      	movs	r2, #2
 8018968:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801896a:	4b16      	ldr	r3, [pc, #88]	; (80189c4 <USBD_LL_Init+0x94>)
 801896c:	2200      	movs	r2, #0
 801896e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018970:	4b14      	ldr	r3, [pc, #80]	; (80189c4 <USBD_LL_Init+0x94>)
 8018972:	2200      	movs	r2, #0
 8018974:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018976:	4b13      	ldr	r3, [pc, #76]	; (80189c4 <USBD_LL_Init+0x94>)
 8018978:	2200      	movs	r2, #0
 801897a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801897c:	4b11      	ldr	r3, [pc, #68]	; (80189c4 <USBD_LL_Init+0x94>)
 801897e:	2200      	movs	r2, #0
 8018980:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018982:	4b10      	ldr	r3, [pc, #64]	; (80189c4 <USBD_LL_Init+0x94>)
 8018984:	2200      	movs	r2, #0
 8018986:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8018988:	4b0e      	ldr	r3, [pc, #56]	; (80189c4 <USBD_LL_Init+0x94>)
 801898a:	2200      	movs	r2, #0
 801898c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801898e:	480d      	ldr	r0, [pc, #52]	; (80189c4 <USBD_LL_Init+0x94>)
 8018990:	f7f5 fbd9 	bl	800e146 <HAL_PCD_Init>
 8018994:	4603      	mov	r3, r0
 8018996:	2b00      	cmp	r3, #0
 8018998:	d001      	beq.n	801899e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801899a:	f7e9 f975 	bl	8001c88 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801899e:	2180      	movs	r1, #128	; 0x80
 80189a0:	4808      	ldr	r0, [pc, #32]	; (80189c4 <USBD_LL_Init+0x94>)
 80189a2:	f7f6 fd5a 	bl	800f45a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80189a6:	2240      	movs	r2, #64	; 0x40
 80189a8:	2100      	movs	r1, #0
 80189aa:	4806      	ldr	r0, [pc, #24]	; (80189c4 <USBD_LL_Init+0x94>)
 80189ac:	f7f6 fd0e 	bl	800f3cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80189b0:	2280      	movs	r2, #128	; 0x80
 80189b2:	2101      	movs	r1, #1
 80189b4:	4803      	ldr	r0, [pc, #12]	; (80189c4 <USBD_LL_Init+0x94>)
 80189b6:	f7f6 fd09 	bl	800f3cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80189ba:	2300      	movs	r3, #0
}
 80189bc:	4618      	mov	r0, r3
 80189be:	3708      	adds	r7, #8
 80189c0:	46bd      	mov	sp, r7
 80189c2:	bd80      	pop	{r7, pc}
 80189c4:	20002894 	.word	0x20002894

080189c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80189c8:	b580      	push	{r7, lr}
 80189ca:	b084      	sub	sp, #16
 80189cc:	af00      	add	r7, sp, #0
 80189ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80189d0:	2300      	movs	r3, #0
 80189d2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80189d4:	2300      	movs	r3, #0
 80189d6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80189de:	4618      	mov	r0, r3
 80189e0:	f7f5 fcd5 	bl	800e38e <HAL_PCD_Start>
 80189e4:	4603      	mov	r3, r0
 80189e6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80189e8:	7bbb      	ldrb	r3, [r7, #14]
 80189ea:	2b03      	cmp	r3, #3
 80189ec:	d816      	bhi.n	8018a1c <USBD_LL_Start+0x54>
 80189ee:	a201      	add	r2, pc, #4	; (adr r2, 80189f4 <USBD_LL_Start+0x2c>)
 80189f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189f4:	08018a05 	.word	0x08018a05
 80189f8:	08018a0b 	.word	0x08018a0b
 80189fc:	08018a11 	.word	0x08018a11
 8018a00:	08018a17 	.word	0x08018a17
    case HAL_OK :
      usb_status = USBD_OK;
 8018a04:	2300      	movs	r3, #0
 8018a06:	73fb      	strb	r3, [r7, #15]
    break;
 8018a08:	e00b      	b.n	8018a22 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018a0a:	2303      	movs	r3, #3
 8018a0c:	73fb      	strb	r3, [r7, #15]
    break;
 8018a0e:	e008      	b.n	8018a22 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018a10:	2301      	movs	r3, #1
 8018a12:	73fb      	strb	r3, [r7, #15]
    break;
 8018a14:	e005      	b.n	8018a22 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018a16:	2303      	movs	r3, #3
 8018a18:	73fb      	strb	r3, [r7, #15]
    break;
 8018a1a:	e002      	b.n	8018a22 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8018a1c:	2303      	movs	r3, #3
 8018a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8018a20:	bf00      	nop
  }
  return usb_status;
 8018a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8018a24:	4618      	mov	r0, r3
 8018a26:	3710      	adds	r7, #16
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	bd80      	pop	{r7, pc}

08018a2c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018a2c:	b580      	push	{r7, lr}
 8018a2e:	b084      	sub	sp, #16
 8018a30:	af00      	add	r7, sp, #0
 8018a32:	6078      	str	r0, [r7, #4]
 8018a34:	4608      	mov	r0, r1
 8018a36:	4611      	mov	r1, r2
 8018a38:	461a      	mov	r2, r3
 8018a3a:	4603      	mov	r3, r0
 8018a3c:	70fb      	strb	r3, [r7, #3]
 8018a3e:	460b      	mov	r3, r1
 8018a40:	70bb      	strb	r3, [r7, #2]
 8018a42:	4613      	mov	r3, r2
 8018a44:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018a46:	2300      	movs	r3, #0
 8018a48:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018a4a:	2300      	movs	r3, #0
 8018a4c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018a54:	78bb      	ldrb	r3, [r7, #2]
 8018a56:	883a      	ldrh	r2, [r7, #0]
 8018a58:	78f9      	ldrb	r1, [r7, #3]
 8018a5a:	f7f6 f97f 	bl	800ed5c <HAL_PCD_EP_Open>
 8018a5e:	4603      	mov	r3, r0
 8018a60:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8018a62:	7bbb      	ldrb	r3, [r7, #14]
 8018a64:	2b03      	cmp	r3, #3
 8018a66:	d817      	bhi.n	8018a98 <USBD_LL_OpenEP+0x6c>
 8018a68:	a201      	add	r2, pc, #4	; (adr r2, 8018a70 <USBD_LL_OpenEP+0x44>)
 8018a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a6e:	bf00      	nop
 8018a70:	08018a81 	.word	0x08018a81
 8018a74:	08018a87 	.word	0x08018a87
 8018a78:	08018a8d 	.word	0x08018a8d
 8018a7c:	08018a93 	.word	0x08018a93
    case HAL_OK :
      usb_status = USBD_OK;
 8018a80:	2300      	movs	r3, #0
 8018a82:	73fb      	strb	r3, [r7, #15]
    break;
 8018a84:	e00b      	b.n	8018a9e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018a86:	2303      	movs	r3, #3
 8018a88:	73fb      	strb	r3, [r7, #15]
    break;
 8018a8a:	e008      	b.n	8018a9e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018a8c:	2301      	movs	r3, #1
 8018a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8018a90:	e005      	b.n	8018a9e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018a92:	2303      	movs	r3, #3
 8018a94:	73fb      	strb	r3, [r7, #15]
    break;
 8018a96:	e002      	b.n	8018a9e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8018a98:	2303      	movs	r3, #3
 8018a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8018a9c:	bf00      	nop
  }
  return usb_status;
 8018a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	3710      	adds	r7, #16
 8018aa4:	46bd      	mov	sp, r7
 8018aa6:	bd80      	pop	{r7, pc}

08018aa8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b084      	sub	sp, #16
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	6078      	str	r0, [r7, #4]
 8018ab0:	460b      	mov	r3, r1
 8018ab2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018ab4:	2300      	movs	r3, #0
 8018ab6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ab8:	2300      	movs	r3, #0
 8018aba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018ac2:	78fa      	ldrb	r2, [r7, #3]
 8018ac4:	4611      	mov	r1, r2
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	f7f6 f9b0 	bl	800ee2c <HAL_PCD_EP_Close>
 8018acc:	4603      	mov	r3, r0
 8018ace:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8018ad0:	7bbb      	ldrb	r3, [r7, #14]
 8018ad2:	2b03      	cmp	r3, #3
 8018ad4:	d816      	bhi.n	8018b04 <USBD_LL_CloseEP+0x5c>
 8018ad6:	a201      	add	r2, pc, #4	; (adr r2, 8018adc <USBD_LL_CloseEP+0x34>)
 8018ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018adc:	08018aed 	.word	0x08018aed
 8018ae0:	08018af3 	.word	0x08018af3
 8018ae4:	08018af9 	.word	0x08018af9
 8018ae8:	08018aff 	.word	0x08018aff
    case HAL_OK :
      usb_status = USBD_OK;
 8018aec:	2300      	movs	r3, #0
 8018aee:	73fb      	strb	r3, [r7, #15]
    break;
 8018af0:	e00b      	b.n	8018b0a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018af2:	2303      	movs	r3, #3
 8018af4:	73fb      	strb	r3, [r7, #15]
    break;
 8018af6:	e008      	b.n	8018b0a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018af8:	2301      	movs	r3, #1
 8018afa:	73fb      	strb	r3, [r7, #15]
    break;
 8018afc:	e005      	b.n	8018b0a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018afe:	2303      	movs	r3, #3
 8018b00:	73fb      	strb	r3, [r7, #15]
    break;
 8018b02:	e002      	b.n	8018b0a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8018b04:	2303      	movs	r3, #3
 8018b06:	73fb      	strb	r3, [r7, #15]
    break;
 8018b08:	bf00      	nop
  }
  return usb_status;
 8018b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b0c:	4618      	mov	r0, r3
 8018b0e:	3710      	adds	r7, #16
 8018b10:	46bd      	mov	sp, r7
 8018b12:	bd80      	pop	{r7, pc}

08018b14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018b14:	b580      	push	{r7, lr}
 8018b16:	b084      	sub	sp, #16
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	6078      	str	r0, [r7, #4]
 8018b1c:	460b      	mov	r3, r1
 8018b1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018b20:	2300      	movs	r3, #0
 8018b22:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018b24:	2300      	movs	r3, #0
 8018b26:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018b2e:	78fa      	ldrb	r2, [r7, #3]
 8018b30:	4611      	mov	r1, r2
 8018b32:	4618      	mov	r0, r3
 8018b34:	f7f6 fa57 	bl	800efe6 <HAL_PCD_EP_SetStall>
 8018b38:	4603      	mov	r3, r0
 8018b3a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8018b3c:	7bbb      	ldrb	r3, [r7, #14]
 8018b3e:	2b03      	cmp	r3, #3
 8018b40:	d816      	bhi.n	8018b70 <USBD_LL_StallEP+0x5c>
 8018b42:	a201      	add	r2, pc, #4	; (adr r2, 8018b48 <USBD_LL_StallEP+0x34>)
 8018b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b48:	08018b59 	.word	0x08018b59
 8018b4c:	08018b5f 	.word	0x08018b5f
 8018b50:	08018b65 	.word	0x08018b65
 8018b54:	08018b6b 	.word	0x08018b6b
    case HAL_OK :
      usb_status = USBD_OK;
 8018b58:	2300      	movs	r3, #0
 8018b5a:	73fb      	strb	r3, [r7, #15]
    break;
 8018b5c:	e00b      	b.n	8018b76 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018b5e:	2303      	movs	r3, #3
 8018b60:	73fb      	strb	r3, [r7, #15]
    break;
 8018b62:	e008      	b.n	8018b76 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018b64:	2301      	movs	r3, #1
 8018b66:	73fb      	strb	r3, [r7, #15]
    break;
 8018b68:	e005      	b.n	8018b76 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018b6a:	2303      	movs	r3, #3
 8018b6c:	73fb      	strb	r3, [r7, #15]
    break;
 8018b6e:	e002      	b.n	8018b76 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8018b70:	2303      	movs	r3, #3
 8018b72:	73fb      	strb	r3, [r7, #15]
    break;
 8018b74:	bf00      	nop
  }
  return usb_status;
 8018b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b78:	4618      	mov	r0, r3
 8018b7a:	3710      	adds	r7, #16
 8018b7c:	46bd      	mov	sp, r7
 8018b7e:	bd80      	pop	{r7, pc}

08018b80 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018b80:	b580      	push	{r7, lr}
 8018b82:	b084      	sub	sp, #16
 8018b84:	af00      	add	r7, sp, #0
 8018b86:	6078      	str	r0, [r7, #4]
 8018b88:	460b      	mov	r3, r1
 8018b8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018b8c:	2300      	movs	r3, #0
 8018b8e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018b90:	2300      	movs	r3, #0
 8018b92:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018b9a:	78fa      	ldrb	r2, [r7, #3]
 8018b9c:	4611      	mov	r1, r2
 8018b9e:	4618      	mov	r0, r3
 8018ba0:	f7f6 fa83 	bl	800f0aa <HAL_PCD_EP_ClrStall>
 8018ba4:	4603      	mov	r3, r0
 8018ba6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8018ba8:	7bbb      	ldrb	r3, [r7, #14]
 8018baa:	2b03      	cmp	r3, #3
 8018bac:	d816      	bhi.n	8018bdc <USBD_LL_ClearStallEP+0x5c>
 8018bae:	a201      	add	r2, pc, #4	; (adr r2, 8018bb4 <USBD_LL_ClearStallEP+0x34>)
 8018bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018bb4:	08018bc5 	.word	0x08018bc5
 8018bb8:	08018bcb 	.word	0x08018bcb
 8018bbc:	08018bd1 	.word	0x08018bd1
 8018bc0:	08018bd7 	.word	0x08018bd7
    case HAL_OK :
      usb_status = USBD_OK;
 8018bc4:	2300      	movs	r3, #0
 8018bc6:	73fb      	strb	r3, [r7, #15]
    break;
 8018bc8:	e00b      	b.n	8018be2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018bca:	2303      	movs	r3, #3
 8018bcc:	73fb      	strb	r3, [r7, #15]
    break;
 8018bce:	e008      	b.n	8018be2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018bd0:	2301      	movs	r3, #1
 8018bd2:	73fb      	strb	r3, [r7, #15]
    break;
 8018bd4:	e005      	b.n	8018be2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018bd6:	2303      	movs	r3, #3
 8018bd8:	73fb      	strb	r3, [r7, #15]
    break;
 8018bda:	e002      	b.n	8018be2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8018bdc:	2303      	movs	r3, #3
 8018bde:	73fb      	strb	r3, [r7, #15]
    break;
 8018be0:	bf00      	nop
  }
  return usb_status;
 8018be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8018be4:	4618      	mov	r0, r3
 8018be6:	3710      	adds	r7, #16
 8018be8:	46bd      	mov	sp, r7
 8018bea:	bd80      	pop	{r7, pc}

08018bec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018bec:	b480      	push	{r7}
 8018bee:	b085      	sub	sp, #20
 8018bf0:	af00      	add	r7, sp, #0
 8018bf2:	6078      	str	r0, [r7, #4]
 8018bf4:	460b      	mov	r3, r1
 8018bf6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018bfe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018c00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	da0b      	bge.n	8018c20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018c08:	78fb      	ldrb	r3, [r7, #3]
 8018c0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018c0e:	68f9      	ldr	r1, [r7, #12]
 8018c10:	4613      	mov	r3, r2
 8018c12:	00db      	lsls	r3, r3, #3
 8018c14:	4413      	add	r3, r2
 8018c16:	009b      	lsls	r3, r3, #2
 8018c18:	440b      	add	r3, r1
 8018c1a:	333e      	adds	r3, #62	; 0x3e
 8018c1c:	781b      	ldrb	r3, [r3, #0]
 8018c1e:	e00b      	b.n	8018c38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018c20:	78fb      	ldrb	r3, [r7, #3]
 8018c22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018c26:	68f9      	ldr	r1, [r7, #12]
 8018c28:	4613      	mov	r3, r2
 8018c2a:	00db      	lsls	r3, r3, #3
 8018c2c:	4413      	add	r3, r2
 8018c2e:	009b      	lsls	r3, r3, #2
 8018c30:	440b      	add	r3, r1
 8018c32:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8018c36:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018c38:	4618      	mov	r0, r3
 8018c3a:	3714      	adds	r7, #20
 8018c3c:	46bd      	mov	sp, r7
 8018c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c42:	4770      	bx	lr

08018c44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018c44:	b580      	push	{r7, lr}
 8018c46:	b084      	sub	sp, #16
 8018c48:	af00      	add	r7, sp, #0
 8018c4a:	6078      	str	r0, [r7, #4]
 8018c4c:	460b      	mov	r3, r1
 8018c4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018c50:	2300      	movs	r3, #0
 8018c52:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018c54:	2300      	movs	r3, #0
 8018c56:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018c5e:	78fa      	ldrb	r2, [r7, #3]
 8018c60:	4611      	mov	r1, r2
 8018c62:	4618      	mov	r0, r3
 8018c64:	f7f6 f855 	bl	800ed12 <HAL_PCD_SetAddress>
 8018c68:	4603      	mov	r3, r0
 8018c6a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8018c6c:	7bbb      	ldrb	r3, [r7, #14]
 8018c6e:	2b03      	cmp	r3, #3
 8018c70:	d816      	bhi.n	8018ca0 <USBD_LL_SetUSBAddress+0x5c>
 8018c72:	a201      	add	r2, pc, #4	; (adr r2, 8018c78 <USBD_LL_SetUSBAddress+0x34>)
 8018c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c78:	08018c89 	.word	0x08018c89
 8018c7c:	08018c8f 	.word	0x08018c8f
 8018c80:	08018c95 	.word	0x08018c95
 8018c84:	08018c9b 	.word	0x08018c9b
    case HAL_OK :
      usb_status = USBD_OK;
 8018c88:	2300      	movs	r3, #0
 8018c8a:	73fb      	strb	r3, [r7, #15]
    break;
 8018c8c:	e00b      	b.n	8018ca6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018c8e:	2303      	movs	r3, #3
 8018c90:	73fb      	strb	r3, [r7, #15]
    break;
 8018c92:	e008      	b.n	8018ca6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018c94:	2301      	movs	r3, #1
 8018c96:	73fb      	strb	r3, [r7, #15]
    break;
 8018c98:	e005      	b.n	8018ca6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018c9a:	2303      	movs	r3, #3
 8018c9c:	73fb      	strb	r3, [r7, #15]
    break;
 8018c9e:	e002      	b.n	8018ca6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8018ca0:	2303      	movs	r3, #3
 8018ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8018ca4:	bf00      	nop
  }
  return usb_status;
 8018ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8018ca8:	4618      	mov	r0, r3
 8018caa:	3710      	adds	r7, #16
 8018cac:	46bd      	mov	sp, r7
 8018cae:	bd80      	pop	{r7, pc}

08018cb0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018cb0:	b580      	push	{r7, lr}
 8018cb2:	b086      	sub	sp, #24
 8018cb4:	af00      	add	r7, sp, #0
 8018cb6:	60f8      	str	r0, [r7, #12]
 8018cb8:	607a      	str	r2, [r7, #4]
 8018cba:	603b      	str	r3, [r7, #0]
 8018cbc:	460b      	mov	r3, r1
 8018cbe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018cc0:	2300      	movs	r3, #0
 8018cc2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018cc4:	2300      	movs	r3, #0
 8018cc6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018cc8:	68fb      	ldr	r3, [r7, #12]
 8018cca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018cce:	7af9      	ldrb	r1, [r7, #11]
 8018cd0:	683b      	ldr	r3, [r7, #0]
 8018cd2:	687a      	ldr	r2, [r7, #4]
 8018cd4:	f7f6 f94a 	bl	800ef6c <HAL_PCD_EP_Transmit>
 8018cd8:	4603      	mov	r3, r0
 8018cda:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8018cdc:	7dbb      	ldrb	r3, [r7, #22]
 8018cde:	2b03      	cmp	r3, #3
 8018ce0:	d816      	bhi.n	8018d10 <USBD_LL_Transmit+0x60>
 8018ce2:	a201      	add	r2, pc, #4	; (adr r2, 8018ce8 <USBD_LL_Transmit+0x38>)
 8018ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ce8:	08018cf9 	.word	0x08018cf9
 8018cec:	08018cff 	.word	0x08018cff
 8018cf0:	08018d05 	.word	0x08018d05
 8018cf4:	08018d0b 	.word	0x08018d0b
    case HAL_OK :
      usb_status = USBD_OK;
 8018cf8:	2300      	movs	r3, #0
 8018cfa:	75fb      	strb	r3, [r7, #23]
    break;
 8018cfc:	e00b      	b.n	8018d16 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018cfe:	2303      	movs	r3, #3
 8018d00:	75fb      	strb	r3, [r7, #23]
    break;
 8018d02:	e008      	b.n	8018d16 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018d04:	2301      	movs	r3, #1
 8018d06:	75fb      	strb	r3, [r7, #23]
    break;
 8018d08:	e005      	b.n	8018d16 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018d0a:	2303      	movs	r3, #3
 8018d0c:	75fb      	strb	r3, [r7, #23]
    break;
 8018d0e:	e002      	b.n	8018d16 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8018d10:	2303      	movs	r3, #3
 8018d12:	75fb      	strb	r3, [r7, #23]
    break;
 8018d14:	bf00      	nop
  }
  return usb_status;
 8018d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8018d18:	4618      	mov	r0, r3
 8018d1a:	3718      	adds	r7, #24
 8018d1c:	46bd      	mov	sp, r7
 8018d1e:	bd80      	pop	{r7, pc}

08018d20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018d20:	b580      	push	{r7, lr}
 8018d22:	b086      	sub	sp, #24
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	60f8      	str	r0, [r7, #12]
 8018d28:	607a      	str	r2, [r7, #4]
 8018d2a:	603b      	str	r3, [r7, #0]
 8018d2c:	460b      	mov	r3, r1
 8018d2e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018d30:	2300      	movs	r3, #0
 8018d32:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018d34:	2300      	movs	r3, #0
 8018d36:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018d38:	68fb      	ldr	r3, [r7, #12]
 8018d3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018d3e:	7af9      	ldrb	r1, [r7, #11]
 8018d40:	683b      	ldr	r3, [r7, #0]
 8018d42:	687a      	ldr	r2, [r7, #4]
 8018d44:	f7f6 f8bc 	bl	800eec0 <HAL_PCD_EP_Receive>
 8018d48:	4603      	mov	r3, r0
 8018d4a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8018d4c:	7dbb      	ldrb	r3, [r7, #22]
 8018d4e:	2b03      	cmp	r3, #3
 8018d50:	d816      	bhi.n	8018d80 <USBD_LL_PrepareReceive+0x60>
 8018d52:	a201      	add	r2, pc, #4	; (adr r2, 8018d58 <USBD_LL_PrepareReceive+0x38>)
 8018d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018d58:	08018d69 	.word	0x08018d69
 8018d5c:	08018d6f 	.word	0x08018d6f
 8018d60:	08018d75 	.word	0x08018d75
 8018d64:	08018d7b 	.word	0x08018d7b
    case HAL_OK :
      usb_status = USBD_OK;
 8018d68:	2300      	movs	r3, #0
 8018d6a:	75fb      	strb	r3, [r7, #23]
    break;
 8018d6c:	e00b      	b.n	8018d86 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018d6e:	2303      	movs	r3, #3
 8018d70:	75fb      	strb	r3, [r7, #23]
    break;
 8018d72:	e008      	b.n	8018d86 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018d74:	2301      	movs	r3, #1
 8018d76:	75fb      	strb	r3, [r7, #23]
    break;
 8018d78:	e005      	b.n	8018d86 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018d7a:	2303      	movs	r3, #3
 8018d7c:	75fb      	strb	r3, [r7, #23]
    break;
 8018d7e:	e002      	b.n	8018d86 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8018d80:	2303      	movs	r3, #3
 8018d82:	75fb      	strb	r3, [r7, #23]
    break;
 8018d84:	bf00      	nop
  }
  return usb_status;
 8018d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8018d88:	4618      	mov	r0, r3
 8018d8a:	3718      	adds	r7, #24
 8018d8c:	46bd      	mov	sp, r7
 8018d8e:	bd80      	pop	{r7, pc}

08018d90 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018d90:	b580      	push	{r7, lr}
 8018d92:	b082      	sub	sp, #8
 8018d94:	af00      	add	r7, sp, #0
 8018d96:	6078      	str	r0, [r7, #4]
 8018d98:	460b      	mov	r3, r1
 8018d9a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018da2:	78fa      	ldrb	r2, [r7, #3]
 8018da4:	4611      	mov	r1, r2
 8018da6:	4618      	mov	r0, r3
 8018da8:	f7f6 f8c8 	bl	800ef3c <HAL_PCD_EP_GetRxCount>
 8018dac:	4603      	mov	r3, r0
}
 8018dae:	4618      	mov	r0, r3
 8018db0:	3708      	adds	r7, #8
 8018db2:	46bd      	mov	sp, r7
 8018db4:	bd80      	pop	{r7, pc}
	...

08018db8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8018db8:	b580      	push	{r7, lr}
 8018dba:	b082      	sub	sp, #8
 8018dbc:	af00      	add	r7, sp, #0
 8018dbe:	6078      	str	r0, [r7, #4]
 8018dc0:	460b      	mov	r3, r1
 8018dc2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8018dc4:	78fb      	ldrb	r3, [r7, #3]
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d002      	beq.n	8018dd0 <HAL_PCDEx_LPM_Callback+0x18>
 8018dca:	2b01      	cmp	r3, #1
 8018dcc:	d01f      	beq.n	8018e0e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8018dce:	e03b      	b.n	8018e48 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	6a1b      	ldr	r3, [r3, #32]
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d007      	beq.n	8018de8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8018dd8:	f000 f854 	bl	8018e84 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018ddc:	4b1c      	ldr	r3, [pc, #112]	; (8018e50 <HAL_PCDEx_LPM_Callback+0x98>)
 8018dde:	691b      	ldr	r3, [r3, #16]
 8018de0:	4a1b      	ldr	r2, [pc, #108]	; (8018e50 <HAL_PCDEx_LPM_Callback+0x98>)
 8018de2:	f023 0306 	bic.w	r3, r3, #6
 8018de6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	681b      	ldr	r3, [r3, #0]
 8018dec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	687a      	ldr	r2, [r7, #4]
 8018df4:	6812      	ldr	r2, [r2, #0]
 8018df6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018dfa:	f023 0301 	bic.w	r3, r3, #1
 8018dfe:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018e06:	4618      	mov	r0, r3
 8018e08:	f7fe fb08 	bl	801741c <USBD_LL_Resume>
    break;
 8018e0c:	e01c      	b.n	8018e48 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018e16:	681b      	ldr	r3, [r3, #0]
 8018e18:	687a      	ldr	r2, [r7, #4]
 8018e1a:	6812      	ldr	r2, [r2, #0]
 8018e1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018e20:	f043 0301 	orr.w	r3, r3, #1
 8018e24:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018e2c:	4618      	mov	r0, r3
 8018e2e:	f7fe fadf 	bl	80173f0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	6a1b      	ldr	r3, [r3, #32]
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	d005      	beq.n	8018e46 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018e3a:	4b05      	ldr	r3, [pc, #20]	; (8018e50 <HAL_PCDEx_LPM_Callback+0x98>)
 8018e3c:	691b      	ldr	r3, [r3, #16]
 8018e3e:	4a04      	ldr	r2, [pc, #16]	; (8018e50 <HAL_PCDEx_LPM_Callback+0x98>)
 8018e40:	f043 0306 	orr.w	r3, r3, #6
 8018e44:	6113      	str	r3, [r2, #16]
    break;
 8018e46:	bf00      	nop
}
 8018e48:	bf00      	nop
 8018e4a:	3708      	adds	r7, #8
 8018e4c:	46bd      	mov	sp, r7
 8018e4e:	bd80      	pop	{r7, pc}
 8018e50:	e000ed00 	.word	0xe000ed00

08018e54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018e54:	b480      	push	{r7}
 8018e56:	b083      	sub	sp, #12
 8018e58:	af00      	add	r7, sp, #0
 8018e5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018e5c:	4b03      	ldr	r3, [pc, #12]	; (8018e6c <USBD_static_malloc+0x18>)
}
 8018e5e:	4618      	mov	r0, r3
 8018e60:	370c      	adds	r7, #12
 8018e62:	46bd      	mov	sp, r7
 8018e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e68:	4770      	bx	lr
 8018e6a:	bf00      	nop
 8018e6c:	20002da0 	.word	0x20002da0

08018e70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018e70:	b480      	push	{r7}
 8018e72:	b083      	sub	sp, #12
 8018e74:	af00      	add	r7, sp, #0
 8018e76:	6078      	str	r0, [r7, #4]

}
 8018e78:	bf00      	nop
 8018e7a:	370c      	adds	r7, #12
 8018e7c:	46bd      	mov	sp, r7
 8018e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e82:	4770      	bx	lr

08018e84 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8018e84:	b580      	push	{r7, lr}
 8018e86:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8018e88:	f7e8 fe38 	bl	8001afc <SystemClock_Config>
}
 8018e8c:	bf00      	nop
 8018e8e:	bd80      	pop	{r7, pc}

08018e90 <__errno>:
 8018e90:	4b01      	ldr	r3, [pc, #4]	; (8018e98 <__errno+0x8>)
 8018e92:	6818      	ldr	r0, [r3, #0]
 8018e94:	4770      	bx	lr
 8018e96:	bf00      	nop
 8018e98:	200006dc 	.word	0x200006dc

08018e9c <__libc_init_array>:
 8018e9c:	b570      	push	{r4, r5, r6, lr}
 8018e9e:	4d0d      	ldr	r5, [pc, #52]	; (8018ed4 <__libc_init_array+0x38>)
 8018ea0:	4c0d      	ldr	r4, [pc, #52]	; (8018ed8 <__libc_init_array+0x3c>)
 8018ea2:	1b64      	subs	r4, r4, r5
 8018ea4:	10a4      	asrs	r4, r4, #2
 8018ea6:	2600      	movs	r6, #0
 8018ea8:	42a6      	cmp	r6, r4
 8018eaa:	d109      	bne.n	8018ec0 <__libc_init_array+0x24>
 8018eac:	4d0b      	ldr	r5, [pc, #44]	; (8018edc <__libc_init_array+0x40>)
 8018eae:	4c0c      	ldr	r4, [pc, #48]	; (8018ee0 <__libc_init_array+0x44>)
 8018eb0:	f001 f83a 	bl	8019f28 <_init>
 8018eb4:	1b64      	subs	r4, r4, r5
 8018eb6:	10a4      	asrs	r4, r4, #2
 8018eb8:	2600      	movs	r6, #0
 8018eba:	42a6      	cmp	r6, r4
 8018ebc:	d105      	bne.n	8018eca <__libc_init_array+0x2e>
 8018ebe:	bd70      	pop	{r4, r5, r6, pc}
 8018ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8018ec4:	4798      	blx	r3
 8018ec6:	3601      	adds	r6, #1
 8018ec8:	e7ee      	b.n	8018ea8 <__libc_init_array+0xc>
 8018eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8018ece:	4798      	blx	r3
 8018ed0:	3601      	adds	r6, #1
 8018ed2:	e7f2      	b.n	8018eba <__libc_init_array+0x1e>
 8018ed4:	0801c0b0 	.word	0x0801c0b0
 8018ed8:	0801c0b0 	.word	0x0801c0b0
 8018edc:	0801c0b0 	.word	0x0801c0b0
 8018ee0:	0801c0b4 	.word	0x0801c0b4

08018ee4 <memcpy>:
 8018ee4:	440a      	add	r2, r1
 8018ee6:	4291      	cmp	r1, r2
 8018ee8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8018eec:	d100      	bne.n	8018ef0 <memcpy+0xc>
 8018eee:	4770      	bx	lr
 8018ef0:	b510      	push	{r4, lr}
 8018ef2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018ef6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018efa:	4291      	cmp	r1, r2
 8018efc:	d1f9      	bne.n	8018ef2 <memcpy+0xe>
 8018efe:	bd10      	pop	{r4, pc}

08018f00 <memset>:
 8018f00:	4402      	add	r2, r0
 8018f02:	4603      	mov	r3, r0
 8018f04:	4293      	cmp	r3, r2
 8018f06:	d100      	bne.n	8018f0a <memset+0xa>
 8018f08:	4770      	bx	lr
 8018f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8018f0e:	e7f9      	b.n	8018f04 <memset+0x4>

08018f10 <_free_r>:
 8018f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018f12:	2900      	cmp	r1, #0
 8018f14:	d044      	beq.n	8018fa0 <_free_r+0x90>
 8018f16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018f1a:	9001      	str	r0, [sp, #4]
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	f1a1 0404 	sub.w	r4, r1, #4
 8018f22:	bfb8      	it	lt
 8018f24:	18e4      	addlt	r4, r4, r3
 8018f26:	f000 fc59 	bl	80197dc <__malloc_lock>
 8018f2a:	4a1e      	ldr	r2, [pc, #120]	; (8018fa4 <_free_r+0x94>)
 8018f2c:	9801      	ldr	r0, [sp, #4]
 8018f2e:	6813      	ldr	r3, [r2, #0]
 8018f30:	b933      	cbnz	r3, 8018f40 <_free_r+0x30>
 8018f32:	6063      	str	r3, [r4, #4]
 8018f34:	6014      	str	r4, [r2, #0]
 8018f36:	b003      	add	sp, #12
 8018f38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018f3c:	f000 bc54 	b.w	80197e8 <__malloc_unlock>
 8018f40:	42a3      	cmp	r3, r4
 8018f42:	d908      	bls.n	8018f56 <_free_r+0x46>
 8018f44:	6825      	ldr	r5, [r4, #0]
 8018f46:	1961      	adds	r1, r4, r5
 8018f48:	428b      	cmp	r3, r1
 8018f4a:	bf01      	itttt	eq
 8018f4c:	6819      	ldreq	r1, [r3, #0]
 8018f4e:	685b      	ldreq	r3, [r3, #4]
 8018f50:	1949      	addeq	r1, r1, r5
 8018f52:	6021      	streq	r1, [r4, #0]
 8018f54:	e7ed      	b.n	8018f32 <_free_r+0x22>
 8018f56:	461a      	mov	r2, r3
 8018f58:	685b      	ldr	r3, [r3, #4]
 8018f5a:	b10b      	cbz	r3, 8018f60 <_free_r+0x50>
 8018f5c:	42a3      	cmp	r3, r4
 8018f5e:	d9fa      	bls.n	8018f56 <_free_r+0x46>
 8018f60:	6811      	ldr	r1, [r2, #0]
 8018f62:	1855      	adds	r5, r2, r1
 8018f64:	42a5      	cmp	r5, r4
 8018f66:	d10b      	bne.n	8018f80 <_free_r+0x70>
 8018f68:	6824      	ldr	r4, [r4, #0]
 8018f6a:	4421      	add	r1, r4
 8018f6c:	1854      	adds	r4, r2, r1
 8018f6e:	42a3      	cmp	r3, r4
 8018f70:	6011      	str	r1, [r2, #0]
 8018f72:	d1e0      	bne.n	8018f36 <_free_r+0x26>
 8018f74:	681c      	ldr	r4, [r3, #0]
 8018f76:	685b      	ldr	r3, [r3, #4]
 8018f78:	6053      	str	r3, [r2, #4]
 8018f7a:	4421      	add	r1, r4
 8018f7c:	6011      	str	r1, [r2, #0]
 8018f7e:	e7da      	b.n	8018f36 <_free_r+0x26>
 8018f80:	d902      	bls.n	8018f88 <_free_r+0x78>
 8018f82:	230c      	movs	r3, #12
 8018f84:	6003      	str	r3, [r0, #0]
 8018f86:	e7d6      	b.n	8018f36 <_free_r+0x26>
 8018f88:	6825      	ldr	r5, [r4, #0]
 8018f8a:	1961      	adds	r1, r4, r5
 8018f8c:	428b      	cmp	r3, r1
 8018f8e:	bf04      	itt	eq
 8018f90:	6819      	ldreq	r1, [r3, #0]
 8018f92:	685b      	ldreq	r3, [r3, #4]
 8018f94:	6063      	str	r3, [r4, #4]
 8018f96:	bf04      	itt	eq
 8018f98:	1949      	addeq	r1, r1, r5
 8018f9a:	6021      	streq	r1, [r4, #0]
 8018f9c:	6054      	str	r4, [r2, #4]
 8018f9e:	e7ca      	b.n	8018f36 <_free_r+0x26>
 8018fa0:	b003      	add	sp, #12
 8018fa2:	bd30      	pop	{r4, r5, pc}
 8018fa4:	20002fc0 	.word	0x20002fc0

08018fa8 <sbrk_aligned>:
 8018fa8:	b570      	push	{r4, r5, r6, lr}
 8018faa:	4e0e      	ldr	r6, [pc, #56]	; (8018fe4 <sbrk_aligned+0x3c>)
 8018fac:	460c      	mov	r4, r1
 8018fae:	6831      	ldr	r1, [r6, #0]
 8018fb0:	4605      	mov	r5, r0
 8018fb2:	b911      	cbnz	r1, 8018fba <sbrk_aligned+0x12>
 8018fb4:	f000 f91a 	bl	80191ec <_sbrk_r>
 8018fb8:	6030      	str	r0, [r6, #0]
 8018fba:	4621      	mov	r1, r4
 8018fbc:	4628      	mov	r0, r5
 8018fbe:	f000 f915 	bl	80191ec <_sbrk_r>
 8018fc2:	1c43      	adds	r3, r0, #1
 8018fc4:	d00a      	beq.n	8018fdc <sbrk_aligned+0x34>
 8018fc6:	1cc4      	adds	r4, r0, #3
 8018fc8:	f024 0403 	bic.w	r4, r4, #3
 8018fcc:	42a0      	cmp	r0, r4
 8018fce:	d007      	beq.n	8018fe0 <sbrk_aligned+0x38>
 8018fd0:	1a21      	subs	r1, r4, r0
 8018fd2:	4628      	mov	r0, r5
 8018fd4:	f000 f90a 	bl	80191ec <_sbrk_r>
 8018fd8:	3001      	adds	r0, #1
 8018fda:	d101      	bne.n	8018fe0 <sbrk_aligned+0x38>
 8018fdc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8018fe0:	4620      	mov	r0, r4
 8018fe2:	bd70      	pop	{r4, r5, r6, pc}
 8018fe4:	20002fc4 	.word	0x20002fc4

08018fe8 <_malloc_r>:
 8018fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018fec:	1ccd      	adds	r5, r1, #3
 8018fee:	f025 0503 	bic.w	r5, r5, #3
 8018ff2:	3508      	adds	r5, #8
 8018ff4:	2d0c      	cmp	r5, #12
 8018ff6:	bf38      	it	cc
 8018ff8:	250c      	movcc	r5, #12
 8018ffa:	2d00      	cmp	r5, #0
 8018ffc:	4607      	mov	r7, r0
 8018ffe:	db01      	blt.n	8019004 <_malloc_r+0x1c>
 8019000:	42a9      	cmp	r1, r5
 8019002:	d905      	bls.n	8019010 <_malloc_r+0x28>
 8019004:	230c      	movs	r3, #12
 8019006:	603b      	str	r3, [r7, #0]
 8019008:	2600      	movs	r6, #0
 801900a:	4630      	mov	r0, r6
 801900c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019010:	4e2e      	ldr	r6, [pc, #184]	; (80190cc <_malloc_r+0xe4>)
 8019012:	f000 fbe3 	bl	80197dc <__malloc_lock>
 8019016:	6833      	ldr	r3, [r6, #0]
 8019018:	461c      	mov	r4, r3
 801901a:	bb34      	cbnz	r4, 801906a <_malloc_r+0x82>
 801901c:	4629      	mov	r1, r5
 801901e:	4638      	mov	r0, r7
 8019020:	f7ff ffc2 	bl	8018fa8 <sbrk_aligned>
 8019024:	1c43      	adds	r3, r0, #1
 8019026:	4604      	mov	r4, r0
 8019028:	d14d      	bne.n	80190c6 <_malloc_r+0xde>
 801902a:	6834      	ldr	r4, [r6, #0]
 801902c:	4626      	mov	r6, r4
 801902e:	2e00      	cmp	r6, #0
 8019030:	d140      	bne.n	80190b4 <_malloc_r+0xcc>
 8019032:	6823      	ldr	r3, [r4, #0]
 8019034:	4631      	mov	r1, r6
 8019036:	4638      	mov	r0, r7
 8019038:	eb04 0803 	add.w	r8, r4, r3
 801903c:	f000 f8d6 	bl	80191ec <_sbrk_r>
 8019040:	4580      	cmp	r8, r0
 8019042:	d13a      	bne.n	80190ba <_malloc_r+0xd2>
 8019044:	6821      	ldr	r1, [r4, #0]
 8019046:	3503      	adds	r5, #3
 8019048:	1a6d      	subs	r5, r5, r1
 801904a:	f025 0503 	bic.w	r5, r5, #3
 801904e:	3508      	adds	r5, #8
 8019050:	2d0c      	cmp	r5, #12
 8019052:	bf38      	it	cc
 8019054:	250c      	movcc	r5, #12
 8019056:	4629      	mov	r1, r5
 8019058:	4638      	mov	r0, r7
 801905a:	f7ff ffa5 	bl	8018fa8 <sbrk_aligned>
 801905e:	3001      	adds	r0, #1
 8019060:	d02b      	beq.n	80190ba <_malloc_r+0xd2>
 8019062:	6823      	ldr	r3, [r4, #0]
 8019064:	442b      	add	r3, r5
 8019066:	6023      	str	r3, [r4, #0]
 8019068:	e00e      	b.n	8019088 <_malloc_r+0xa0>
 801906a:	6822      	ldr	r2, [r4, #0]
 801906c:	1b52      	subs	r2, r2, r5
 801906e:	d41e      	bmi.n	80190ae <_malloc_r+0xc6>
 8019070:	2a0b      	cmp	r2, #11
 8019072:	d916      	bls.n	80190a2 <_malloc_r+0xba>
 8019074:	1961      	adds	r1, r4, r5
 8019076:	42a3      	cmp	r3, r4
 8019078:	6025      	str	r5, [r4, #0]
 801907a:	bf18      	it	ne
 801907c:	6059      	strne	r1, [r3, #4]
 801907e:	6863      	ldr	r3, [r4, #4]
 8019080:	bf08      	it	eq
 8019082:	6031      	streq	r1, [r6, #0]
 8019084:	5162      	str	r2, [r4, r5]
 8019086:	604b      	str	r3, [r1, #4]
 8019088:	4638      	mov	r0, r7
 801908a:	f104 060b 	add.w	r6, r4, #11
 801908e:	f000 fbab 	bl	80197e8 <__malloc_unlock>
 8019092:	f026 0607 	bic.w	r6, r6, #7
 8019096:	1d23      	adds	r3, r4, #4
 8019098:	1af2      	subs	r2, r6, r3
 801909a:	d0b6      	beq.n	801900a <_malloc_r+0x22>
 801909c:	1b9b      	subs	r3, r3, r6
 801909e:	50a3      	str	r3, [r4, r2]
 80190a0:	e7b3      	b.n	801900a <_malloc_r+0x22>
 80190a2:	6862      	ldr	r2, [r4, #4]
 80190a4:	42a3      	cmp	r3, r4
 80190a6:	bf0c      	ite	eq
 80190a8:	6032      	streq	r2, [r6, #0]
 80190aa:	605a      	strne	r2, [r3, #4]
 80190ac:	e7ec      	b.n	8019088 <_malloc_r+0xa0>
 80190ae:	4623      	mov	r3, r4
 80190b0:	6864      	ldr	r4, [r4, #4]
 80190b2:	e7b2      	b.n	801901a <_malloc_r+0x32>
 80190b4:	4634      	mov	r4, r6
 80190b6:	6876      	ldr	r6, [r6, #4]
 80190b8:	e7b9      	b.n	801902e <_malloc_r+0x46>
 80190ba:	230c      	movs	r3, #12
 80190bc:	603b      	str	r3, [r7, #0]
 80190be:	4638      	mov	r0, r7
 80190c0:	f000 fb92 	bl	80197e8 <__malloc_unlock>
 80190c4:	e7a1      	b.n	801900a <_malloc_r+0x22>
 80190c6:	6025      	str	r5, [r4, #0]
 80190c8:	e7de      	b.n	8019088 <_malloc_r+0xa0>
 80190ca:	bf00      	nop
 80190cc:	20002fc0 	.word	0x20002fc0

080190d0 <iprintf>:
 80190d0:	b40f      	push	{r0, r1, r2, r3}
 80190d2:	4b0a      	ldr	r3, [pc, #40]	; (80190fc <iprintf+0x2c>)
 80190d4:	b513      	push	{r0, r1, r4, lr}
 80190d6:	681c      	ldr	r4, [r3, #0]
 80190d8:	b124      	cbz	r4, 80190e4 <iprintf+0x14>
 80190da:	69a3      	ldr	r3, [r4, #24]
 80190dc:	b913      	cbnz	r3, 80190e4 <iprintf+0x14>
 80190de:	4620      	mov	r0, r4
 80190e0:	f000 fa76 	bl	80195d0 <__sinit>
 80190e4:	ab05      	add	r3, sp, #20
 80190e6:	9a04      	ldr	r2, [sp, #16]
 80190e8:	68a1      	ldr	r1, [r4, #8]
 80190ea:	9301      	str	r3, [sp, #4]
 80190ec:	4620      	mov	r0, r4
 80190ee:	f000 fbab 	bl	8019848 <_vfiprintf_r>
 80190f2:	b002      	add	sp, #8
 80190f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80190f8:	b004      	add	sp, #16
 80190fa:	4770      	bx	lr
 80190fc:	200006dc 	.word	0x200006dc

08019100 <_puts_r>:
 8019100:	b570      	push	{r4, r5, r6, lr}
 8019102:	460e      	mov	r6, r1
 8019104:	4605      	mov	r5, r0
 8019106:	b118      	cbz	r0, 8019110 <_puts_r+0x10>
 8019108:	6983      	ldr	r3, [r0, #24]
 801910a:	b90b      	cbnz	r3, 8019110 <_puts_r+0x10>
 801910c:	f000 fa60 	bl	80195d0 <__sinit>
 8019110:	69ab      	ldr	r3, [r5, #24]
 8019112:	68ac      	ldr	r4, [r5, #8]
 8019114:	b913      	cbnz	r3, 801911c <_puts_r+0x1c>
 8019116:	4628      	mov	r0, r5
 8019118:	f000 fa5a 	bl	80195d0 <__sinit>
 801911c:	4b2c      	ldr	r3, [pc, #176]	; (80191d0 <_puts_r+0xd0>)
 801911e:	429c      	cmp	r4, r3
 8019120:	d120      	bne.n	8019164 <_puts_r+0x64>
 8019122:	686c      	ldr	r4, [r5, #4]
 8019124:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019126:	07db      	lsls	r3, r3, #31
 8019128:	d405      	bmi.n	8019136 <_puts_r+0x36>
 801912a:	89a3      	ldrh	r3, [r4, #12]
 801912c:	0598      	lsls	r0, r3, #22
 801912e:	d402      	bmi.n	8019136 <_puts_r+0x36>
 8019130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019132:	f000 faeb 	bl	801970c <__retarget_lock_acquire_recursive>
 8019136:	89a3      	ldrh	r3, [r4, #12]
 8019138:	0719      	lsls	r1, r3, #28
 801913a:	d51d      	bpl.n	8019178 <_puts_r+0x78>
 801913c:	6923      	ldr	r3, [r4, #16]
 801913e:	b1db      	cbz	r3, 8019178 <_puts_r+0x78>
 8019140:	3e01      	subs	r6, #1
 8019142:	68a3      	ldr	r3, [r4, #8]
 8019144:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019148:	3b01      	subs	r3, #1
 801914a:	60a3      	str	r3, [r4, #8]
 801914c:	bb39      	cbnz	r1, 801919e <_puts_r+0x9e>
 801914e:	2b00      	cmp	r3, #0
 8019150:	da38      	bge.n	80191c4 <_puts_r+0xc4>
 8019152:	4622      	mov	r2, r4
 8019154:	210a      	movs	r1, #10
 8019156:	4628      	mov	r0, r5
 8019158:	f000 f860 	bl	801921c <__swbuf_r>
 801915c:	3001      	adds	r0, #1
 801915e:	d011      	beq.n	8019184 <_puts_r+0x84>
 8019160:	250a      	movs	r5, #10
 8019162:	e011      	b.n	8019188 <_puts_r+0x88>
 8019164:	4b1b      	ldr	r3, [pc, #108]	; (80191d4 <_puts_r+0xd4>)
 8019166:	429c      	cmp	r4, r3
 8019168:	d101      	bne.n	801916e <_puts_r+0x6e>
 801916a:	68ac      	ldr	r4, [r5, #8]
 801916c:	e7da      	b.n	8019124 <_puts_r+0x24>
 801916e:	4b1a      	ldr	r3, [pc, #104]	; (80191d8 <_puts_r+0xd8>)
 8019170:	429c      	cmp	r4, r3
 8019172:	bf08      	it	eq
 8019174:	68ec      	ldreq	r4, [r5, #12]
 8019176:	e7d5      	b.n	8019124 <_puts_r+0x24>
 8019178:	4621      	mov	r1, r4
 801917a:	4628      	mov	r0, r5
 801917c:	f000 f8a0 	bl	80192c0 <__swsetup_r>
 8019180:	2800      	cmp	r0, #0
 8019182:	d0dd      	beq.n	8019140 <_puts_r+0x40>
 8019184:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8019188:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801918a:	07da      	lsls	r2, r3, #31
 801918c:	d405      	bmi.n	801919a <_puts_r+0x9a>
 801918e:	89a3      	ldrh	r3, [r4, #12]
 8019190:	059b      	lsls	r3, r3, #22
 8019192:	d402      	bmi.n	801919a <_puts_r+0x9a>
 8019194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019196:	f000 faba 	bl	801970e <__retarget_lock_release_recursive>
 801919a:	4628      	mov	r0, r5
 801919c:	bd70      	pop	{r4, r5, r6, pc}
 801919e:	2b00      	cmp	r3, #0
 80191a0:	da04      	bge.n	80191ac <_puts_r+0xac>
 80191a2:	69a2      	ldr	r2, [r4, #24]
 80191a4:	429a      	cmp	r2, r3
 80191a6:	dc06      	bgt.n	80191b6 <_puts_r+0xb6>
 80191a8:	290a      	cmp	r1, #10
 80191aa:	d004      	beq.n	80191b6 <_puts_r+0xb6>
 80191ac:	6823      	ldr	r3, [r4, #0]
 80191ae:	1c5a      	adds	r2, r3, #1
 80191b0:	6022      	str	r2, [r4, #0]
 80191b2:	7019      	strb	r1, [r3, #0]
 80191b4:	e7c5      	b.n	8019142 <_puts_r+0x42>
 80191b6:	4622      	mov	r2, r4
 80191b8:	4628      	mov	r0, r5
 80191ba:	f000 f82f 	bl	801921c <__swbuf_r>
 80191be:	3001      	adds	r0, #1
 80191c0:	d1bf      	bne.n	8019142 <_puts_r+0x42>
 80191c2:	e7df      	b.n	8019184 <_puts_r+0x84>
 80191c4:	6823      	ldr	r3, [r4, #0]
 80191c6:	250a      	movs	r5, #10
 80191c8:	1c5a      	adds	r2, r3, #1
 80191ca:	6022      	str	r2, [r4, #0]
 80191cc:	701d      	strb	r5, [r3, #0]
 80191ce:	e7db      	b.n	8019188 <_puts_r+0x88>
 80191d0:	0801c034 	.word	0x0801c034
 80191d4:	0801c054 	.word	0x0801c054
 80191d8:	0801c014 	.word	0x0801c014

080191dc <puts>:
 80191dc:	4b02      	ldr	r3, [pc, #8]	; (80191e8 <puts+0xc>)
 80191de:	4601      	mov	r1, r0
 80191e0:	6818      	ldr	r0, [r3, #0]
 80191e2:	f7ff bf8d 	b.w	8019100 <_puts_r>
 80191e6:	bf00      	nop
 80191e8:	200006dc 	.word	0x200006dc

080191ec <_sbrk_r>:
 80191ec:	b538      	push	{r3, r4, r5, lr}
 80191ee:	4d06      	ldr	r5, [pc, #24]	; (8019208 <_sbrk_r+0x1c>)
 80191f0:	2300      	movs	r3, #0
 80191f2:	4604      	mov	r4, r0
 80191f4:	4608      	mov	r0, r1
 80191f6:	602b      	str	r3, [r5, #0]
 80191f8:	f7e9 f998 	bl	800252c <_sbrk>
 80191fc:	1c43      	adds	r3, r0, #1
 80191fe:	d102      	bne.n	8019206 <_sbrk_r+0x1a>
 8019200:	682b      	ldr	r3, [r5, #0]
 8019202:	b103      	cbz	r3, 8019206 <_sbrk_r+0x1a>
 8019204:	6023      	str	r3, [r4, #0]
 8019206:	bd38      	pop	{r3, r4, r5, pc}
 8019208:	20002fcc 	.word	0x20002fcc

0801920c <strcpy>:
 801920c:	4603      	mov	r3, r0
 801920e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019212:	f803 2b01 	strb.w	r2, [r3], #1
 8019216:	2a00      	cmp	r2, #0
 8019218:	d1f9      	bne.n	801920e <strcpy+0x2>
 801921a:	4770      	bx	lr

0801921c <__swbuf_r>:
 801921c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801921e:	460e      	mov	r6, r1
 8019220:	4614      	mov	r4, r2
 8019222:	4605      	mov	r5, r0
 8019224:	b118      	cbz	r0, 801922e <__swbuf_r+0x12>
 8019226:	6983      	ldr	r3, [r0, #24]
 8019228:	b90b      	cbnz	r3, 801922e <__swbuf_r+0x12>
 801922a:	f000 f9d1 	bl	80195d0 <__sinit>
 801922e:	4b21      	ldr	r3, [pc, #132]	; (80192b4 <__swbuf_r+0x98>)
 8019230:	429c      	cmp	r4, r3
 8019232:	d12b      	bne.n	801928c <__swbuf_r+0x70>
 8019234:	686c      	ldr	r4, [r5, #4]
 8019236:	69a3      	ldr	r3, [r4, #24]
 8019238:	60a3      	str	r3, [r4, #8]
 801923a:	89a3      	ldrh	r3, [r4, #12]
 801923c:	071a      	lsls	r2, r3, #28
 801923e:	d52f      	bpl.n	80192a0 <__swbuf_r+0x84>
 8019240:	6923      	ldr	r3, [r4, #16]
 8019242:	b36b      	cbz	r3, 80192a0 <__swbuf_r+0x84>
 8019244:	6923      	ldr	r3, [r4, #16]
 8019246:	6820      	ldr	r0, [r4, #0]
 8019248:	1ac0      	subs	r0, r0, r3
 801924a:	6963      	ldr	r3, [r4, #20]
 801924c:	b2f6      	uxtb	r6, r6
 801924e:	4283      	cmp	r3, r0
 8019250:	4637      	mov	r7, r6
 8019252:	dc04      	bgt.n	801925e <__swbuf_r+0x42>
 8019254:	4621      	mov	r1, r4
 8019256:	4628      	mov	r0, r5
 8019258:	f000 f926 	bl	80194a8 <_fflush_r>
 801925c:	bb30      	cbnz	r0, 80192ac <__swbuf_r+0x90>
 801925e:	68a3      	ldr	r3, [r4, #8]
 8019260:	3b01      	subs	r3, #1
 8019262:	60a3      	str	r3, [r4, #8]
 8019264:	6823      	ldr	r3, [r4, #0]
 8019266:	1c5a      	adds	r2, r3, #1
 8019268:	6022      	str	r2, [r4, #0]
 801926a:	701e      	strb	r6, [r3, #0]
 801926c:	6963      	ldr	r3, [r4, #20]
 801926e:	3001      	adds	r0, #1
 8019270:	4283      	cmp	r3, r0
 8019272:	d004      	beq.n	801927e <__swbuf_r+0x62>
 8019274:	89a3      	ldrh	r3, [r4, #12]
 8019276:	07db      	lsls	r3, r3, #31
 8019278:	d506      	bpl.n	8019288 <__swbuf_r+0x6c>
 801927a:	2e0a      	cmp	r6, #10
 801927c:	d104      	bne.n	8019288 <__swbuf_r+0x6c>
 801927e:	4621      	mov	r1, r4
 8019280:	4628      	mov	r0, r5
 8019282:	f000 f911 	bl	80194a8 <_fflush_r>
 8019286:	b988      	cbnz	r0, 80192ac <__swbuf_r+0x90>
 8019288:	4638      	mov	r0, r7
 801928a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801928c:	4b0a      	ldr	r3, [pc, #40]	; (80192b8 <__swbuf_r+0x9c>)
 801928e:	429c      	cmp	r4, r3
 8019290:	d101      	bne.n	8019296 <__swbuf_r+0x7a>
 8019292:	68ac      	ldr	r4, [r5, #8]
 8019294:	e7cf      	b.n	8019236 <__swbuf_r+0x1a>
 8019296:	4b09      	ldr	r3, [pc, #36]	; (80192bc <__swbuf_r+0xa0>)
 8019298:	429c      	cmp	r4, r3
 801929a:	bf08      	it	eq
 801929c:	68ec      	ldreq	r4, [r5, #12]
 801929e:	e7ca      	b.n	8019236 <__swbuf_r+0x1a>
 80192a0:	4621      	mov	r1, r4
 80192a2:	4628      	mov	r0, r5
 80192a4:	f000 f80c 	bl	80192c0 <__swsetup_r>
 80192a8:	2800      	cmp	r0, #0
 80192aa:	d0cb      	beq.n	8019244 <__swbuf_r+0x28>
 80192ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80192b0:	e7ea      	b.n	8019288 <__swbuf_r+0x6c>
 80192b2:	bf00      	nop
 80192b4:	0801c034 	.word	0x0801c034
 80192b8:	0801c054 	.word	0x0801c054
 80192bc:	0801c014 	.word	0x0801c014

080192c0 <__swsetup_r>:
 80192c0:	4b32      	ldr	r3, [pc, #200]	; (801938c <__swsetup_r+0xcc>)
 80192c2:	b570      	push	{r4, r5, r6, lr}
 80192c4:	681d      	ldr	r5, [r3, #0]
 80192c6:	4606      	mov	r6, r0
 80192c8:	460c      	mov	r4, r1
 80192ca:	b125      	cbz	r5, 80192d6 <__swsetup_r+0x16>
 80192cc:	69ab      	ldr	r3, [r5, #24]
 80192ce:	b913      	cbnz	r3, 80192d6 <__swsetup_r+0x16>
 80192d0:	4628      	mov	r0, r5
 80192d2:	f000 f97d 	bl	80195d0 <__sinit>
 80192d6:	4b2e      	ldr	r3, [pc, #184]	; (8019390 <__swsetup_r+0xd0>)
 80192d8:	429c      	cmp	r4, r3
 80192da:	d10f      	bne.n	80192fc <__swsetup_r+0x3c>
 80192dc:	686c      	ldr	r4, [r5, #4]
 80192de:	89a3      	ldrh	r3, [r4, #12]
 80192e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80192e4:	0719      	lsls	r1, r3, #28
 80192e6:	d42c      	bmi.n	8019342 <__swsetup_r+0x82>
 80192e8:	06dd      	lsls	r5, r3, #27
 80192ea:	d411      	bmi.n	8019310 <__swsetup_r+0x50>
 80192ec:	2309      	movs	r3, #9
 80192ee:	6033      	str	r3, [r6, #0]
 80192f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80192f4:	81a3      	strh	r3, [r4, #12]
 80192f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80192fa:	e03e      	b.n	801937a <__swsetup_r+0xba>
 80192fc:	4b25      	ldr	r3, [pc, #148]	; (8019394 <__swsetup_r+0xd4>)
 80192fe:	429c      	cmp	r4, r3
 8019300:	d101      	bne.n	8019306 <__swsetup_r+0x46>
 8019302:	68ac      	ldr	r4, [r5, #8]
 8019304:	e7eb      	b.n	80192de <__swsetup_r+0x1e>
 8019306:	4b24      	ldr	r3, [pc, #144]	; (8019398 <__swsetup_r+0xd8>)
 8019308:	429c      	cmp	r4, r3
 801930a:	bf08      	it	eq
 801930c:	68ec      	ldreq	r4, [r5, #12]
 801930e:	e7e6      	b.n	80192de <__swsetup_r+0x1e>
 8019310:	0758      	lsls	r0, r3, #29
 8019312:	d512      	bpl.n	801933a <__swsetup_r+0x7a>
 8019314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019316:	b141      	cbz	r1, 801932a <__swsetup_r+0x6a>
 8019318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801931c:	4299      	cmp	r1, r3
 801931e:	d002      	beq.n	8019326 <__swsetup_r+0x66>
 8019320:	4630      	mov	r0, r6
 8019322:	f7ff fdf5 	bl	8018f10 <_free_r>
 8019326:	2300      	movs	r3, #0
 8019328:	6363      	str	r3, [r4, #52]	; 0x34
 801932a:	89a3      	ldrh	r3, [r4, #12]
 801932c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019330:	81a3      	strh	r3, [r4, #12]
 8019332:	2300      	movs	r3, #0
 8019334:	6063      	str	r3, [r4, #4]
 8019336:	6923      	ldr	r3, [r4, #16]
 8019338:	6023      	str	r3, [r4, #0]
 801933a:	89a3      	ldrh	r3, [r4, #12]
 801933c:	f043 0308 	orr.w	r3, r3, #8
 8019340:	81a3      	strh	r3, [r4, #12]
 8019342:	6923      	ldr	r3, [r4, #16]
 8019344:	b94b      	cbnz	r3, 801935a <__swsetup_r+0x9a>
 8019346:	89a3      	ldrh	r3, [r4, #12]
 8019348:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801934c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019350:	d003      	beq.n	801935a <__swsetup_r+0x9a>
 8019352:	4621      	mov	r1, r4
 8019354:	4630      	mov	r0, r6
 8019356:	f000 fa01 	bl	801975c <__smakebuf_r>
 801935a:	89a0      	ldrh	r0, [r4, #12]
 801935c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019360:	f010 0301 	ands.w	r3, r0, #1
 8019364:	d00a      	beq.n	801937c <__swsetup_r+0xbc>
 8019366:	2300      	movs	r3, #0
 8019368:	60a3      	str	r3, [r4, #8]
 801936a:	6963      	ldr	r3, [r4, #20]
 801936c:	425b      	negs	r3, r3
 801936e:	61a3      	str	r3, [r4, #24]
 8019370:	6923      	ldr	r3, [r4, #16]
 8019372:	b943      	cbnz	r3, 8019386 <__swsetup_r+0xc6>
 8019374:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019378:	d1ba      	bne.n	80192f0 <__swsetup_r+0x30>
 801937a:	bd70      	pop	{r4, r5, r6, pc}
 801937c:	0781      	lsls	r1, r0, #30
 801937e:	bf58      	it	pl
 8019380:	6963      	ldrpl	r3, [r4, #20]
 8019382:	60a3      	str	r3, [r4, #8]
 8019384:	e7f4      	b.n	8019370 <__swsetup_r+0xb0>
 8019386:	2000      	movs	r0, #0
 8019388:	e7f7      	b.n	801937a <__swsetup_r+0xba>
 801938a:	bf00      	nop
 801938c:	200006dc 	.word	0x200006dc
 8019390:	0801c034 	.word	0x0801c034
 8019394:	0801c054 	.word	0x0801c054
 8019398:	0801c014 	.word	0x0801c014

0801939c <__sflush_r>:
 801939c:	898a      	ldrh	r2, [r1, #12]
 801939e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80193a2:	4605      	mov	r5, r0
 80193a4:	0710      	lsls	r0, r2, #28
 80193a6:	460c      	mov	r4, r1
 80193a8:	d458      	bmi.n	801945c <__sflush_r+0xc0>
 80193aa:	684b      	ldr	r3, [r1, #4]
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	dc05      	bgt.n	80193bc <__sflush_r+0x20>
 80193b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	dc02      	bgt.n	80193bc <__sflush_r+0x20>
 80193b6:	2000      	movs	r0, #0
 80193b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80193be:	2e00      	cmp	r6, #0
 80193c0:	d0f9      	beq.n	80193b6 <__sflush_r+0x1a>
 80193c2:	2300      	movs	r3, #0
 80193c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80193c8:	682f      	ldr	r7, [r5, #0]
 80193ca:	602b      	str	r3, [r5, #0]
 80193cc:	d032      	beq.n	8019434 <__sflush_r+0x98>
 80193ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80193d0:	89a3      	ldrh	r3, [r4, #12]
 80193d2:	075a      	lsls	r2, r3, #29
 80193d4:	d505      	bpl.n	80193e2 <__sflush_r+0x46>
 80193d6:	6863      	ldr	r3, [r4, #4]
 80193d8:	1ac0      	subs	r0, r0, r3
 80193da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80193dc:	b10b      	cbz	r3, 80193e2 <__sflush_r+0x46>
 80193de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80193e0:	1ac0      	subs	r0, r0, r3
 80193e2:	2300      	movs	r3, #0
 80193e4:	4602      	mov	r2, r0
 80193e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80193e8:	6a21      	ldr	r1, [r4, #32]
 80193ea:	4628      	mov	r0, r5
 80193ec:	47b0      	blx	r6
 80193ee:	1c43      	adds	r3, r0, #1
 80193f0:	89a3      	ldrh	r3, [r4, #12]
 80193f2:	d106      	bne.n	8019402 <__sflush_r+0x66>
 80193f4:	6829      	ldr	r1, [r5, #0]
 80193f6:	291d      	cmp	r1, #29
 80193f8:	d82c      	bhi.n	8019454 <__sflush_r+0xb8>
 80193fa:	4a2a      	ldr	r2, [pc, #168]	; (80194a4 <__sflush_r+0x108>)
 80193fc:	40ca      	lsrs	r2, r1
 80193fe:	07d6      	lsls	r6, r2, #31
 8019400:	d528      	bpl.n	8019454 <__sflush_r+0xb8>
 8019402:	2200      	movs	r2, #0
 8019404:	6062      	str	r2, [r4, #4]
 8019406:	04d9      	lsls	r1, r3, #19
 8019408:	6922      	ldr	r2, [r4, #16]
 801940a:	6022      	str	r2, [r4, #0]
 801940c:	d504      	bpl.n	8019418 <__sflush_r+0x7c>
 801940e:	1c42      	adds	r2, r0, #1
 8019410:	d101      	bne.n	8019416 <__sflush_r+0x7a>
 8019412:	682b      	ldr	r3, [r5, #0]
 8019414:	b903      	cbnz	r3, 8019418 <__sflush_r+0x7c>
 8019416:	6560      	str	r0, [r4, #84]	; 0x54
 8019418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801941a:	602f      	str	r7, [r5, #0]
 801941c:	2900      	cmp	r1, #0
 801941e:	d0ca      	beq.n	80193b6 <__sflush_r+0x1a>
 8019420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019424:	4299      	cmp	r1, r3
 8019426:	d002      	beq.n	801942e <__sflush_r+0x92>
 8019428:	4628      	mov	r0, r5
 801942a:	f7ff fd71 	bl	8018f10 <_free_r>
 801942e:	2000      	movs	r0, #0
 8019430:	6360      	str	r0, [r4, #52]	; 0x34
 8019432:	e7c1      	b.n	80193b8 <__sflush_r+0x1c>
 8019434:	6a21      	ldr	r1, [r4, #32]
 8019436:	2301      	movs	r3, #1
 8019438:	4628      	mov	r0, r5
 801943a:	47b0      	blx	r6
 801943c:	1c41      	adds	r1, r0, #1
 801943e:	d1c7      	bne.n	80193d0 <__sflush_r+0x34>
 8019440:	682b      	ldr	r3, [r5, #0]
 8019442:	2b00      	cmp	r3, #0
 8019444:	d0c4      	beq.n	80193d0 <__sflush_r+0x34>
 8019446:	2b1d      	cmp	r3, #29
 8019448:	d001      	beq.n	801944e <__sflush_r+0xb2>
 801944a:	2b16      	cmp	r3, #22
 801944c:	d101      	bne.n	8019452 <__sflush_r+0xb6>
 801944e:	602f      	str	r7, [r5, #0]
 8019450:	e7b1      	b.n	80193b6 <__sflush_r+0x1a>
 8019452:	89a3      	ldrh	r3, [r4, #12]
 8019454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019458:	81a3      	strh	r3, [r4, #12]
 801945a:	e7ad      	b.n	80193b8 <__sflush_r+0x1c>
 801945c:	690f      	ldr	r7, [r1, #16]
 801945e:	2f00      	cmp	r7, #0
 8019460:	d0a9      	beq.n	80193b6 <__sflush_r+0x1a>
 8019462:	0793      	lsls	r3, r2, #30
 8019464:	680e      	ldr	r6, [r1, #0]
 8019466:	bf08      	it	eq
 8019468:	694b      	ldreq	r3, [r1, #20]
 801946a:	600f      	str	r7, [r1, #0]
 801946c:	bf18      	it	ne
 801946e:	2300      	movne	r3, #0
 8019470:	eba6 0807 	sub.w	r8, r6, r7
 8019474:	608b      	str	r3, [r1, #8]
 8019476:	f1b8 0f00 	cmp.w	r8, #0
 801947a:	dd9c      	ble.n	80193b6 <__sflush_r+0x1a>
 801947c:	6a21      	ldr	r1, [r4, #32]
 801947e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019480:	4643      	mov	r3, r8
 8019482:	463a      	mov	r2, r7
 8019484:	4628      	mov	r0, r5
 8019486:	47b0      	blx	r6
 8019488:	2800      	cmp	r0, #0
 801948a:	dc06      	bgt.n	801949a <__sflush_r+0xfe>
 801948c:	89a3      	ldrh	r3, [r4, #12]
 801948e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019492:	81a3      	strh	r3, [r4, #12]
 8019494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019498:	e78e      	b.n	80193b8 <__sflush_r+0x1c>
 801949a:	4407      	add	r7, r0
 801949c:	eba8 0800 	sub.w	r8, r8, r0
 80194a0:	e7e9      	b.n	8019476 <__sflush_r+0xda>
 80194a2:	bf00      	nop
 80194a4:	20400001 	.word	0x20400001

080194a8 <_fflush_r>:
 80194a8:	b538      	push	{r3, r4, r5, lr}
 80194aa:	690b      	ldr	r3, [r1, #16]
 80194ac:	4605      	mov	r5, r0
 80194ae:	460c      	mov	r4, r1
 80194b0:	b913      	cbnz	r3, 80194b8 <_fflush_r+0x10>
 80194b2:	2500      	movs	r5, #0
 80194b4:	4628      	mov	r0, r5
 80194b6:	bd38      	pop	{r3, r4, r5, pc}
 80194b8:	b118      	cbz	r0, 80194c2 <_fflush_r+0x1a>
 80194ba:	6983      	ldr	r3, [r0, #24]
 80194bc:	b90b      	cbnz	r3, 80194c2 <_fflush_r+0x1a>
 80194be:	f000 f887 	bl	80195d0 <__sinit>
 80194c2:	4b14      	ldr	r3, [pc, #80]	; (8019514 <_fflush_r+0x6c>)
 80194c4:	429c      	cmp	r4, r3
 80194c6:	d11b      	bne.n	8019500 <_fflush_r+0x58>
 80194c8:	686c      	ldr	r4, [r5, #4]
 80194ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d0ef      	beq.n	80194b2 <_fflush_r+0xa>
 80194d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80194d4:	07d0      	lsls	r0, r2, #31
 80194d6:	d404      	bmi.n	80194e2 <_fflush_r+0x3a>
 80194d8:	0599      	lsls	r1, r3, #22
 80194da:	d402      	bmi.n	80194e2 <_fflush_r+0x3a>
 80194dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80194de:	f000 f915 	bl	801970c <__retarget_lock_acquire_recursive>
 80194e2:	4628      	mov	r0, r5
 80194e4:	4621      	mov	r1, r4
 80194e6:	f7ff ff59 	bl	801939c <__sflush_r>
 80194ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80194ec:	07da      	lsls	r2, r3, #31
 80194ee:	4605      	mov	r5, r0
 80194f0:	d4e0      	bmi.n	80194b4 <_fflush_r+0xc>
 80194f2:	89a3      	ldrh	r3, [r4, #12]
 80194f4:	059b      	lsls	r3, r3, #22
 80194f6:	d4dd      	bmi.n	80194b4 <_fflush_r+0xc>
 80194f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80194fa:	f000 f908 	bl	801970e <__retarget_lock_release_recursive>
 80194fe:	e7d9      	b.n	80194b4 <_fflush_r+0xc>
 8019500:	4b05      	ldr	r3, [pc, #20]	; (8019518 <_fflush_r+0x70>)
 8019502:	429c      	cmp	r4, r3
 8019504:	d101      	bne.n	801950a <_fflush_r+0x62>
 8019506:	68ac      	ldr	r4, [r5, #8]
 8019508:	e7df      	b.n	80194ca <_fflush_r+0x22>
 801950a:	4b04      	ldr	r3, [pc, #16]	; (801951c <_fflush_r+0x74>)
 801950c:	429c      	cmp	r4, r3
 801950e:	bf08      	it	eq
 8019510:	68ec      	ldreq	r4, [r5, #12]
 8019512:	e7da      	b.n	80194ca <_fflush_r+0x22>
 8019514:	0801c034 	.word	0x0801c034
 8019518:	0801c054 	.word	0x0801c054
 801951c:	0801c014 	.word	0x0801c014

08019520 <std>:
 8019520:	2300      	movs	r3, #0
 8019522:	b510      	push	{r4, lr}
 8019524:	4604      	mov	r4, r0
 8019526:	e9c0 3300 	strd	r3, r3, [r0]
 801952a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801952e:	6083      	str	r3, [r0, #8]
 8019530:	8181      	strh	r1, [r0, #12]
 8019532:	6643      	str	r3, [r0, #100]	; 0x64
 8019534:	81c2      	strh	r2, [r0, #14]
 8019536:	6183      	str	r3, [r0, #24]
 8019538:	4619      	mov	r1, r3
 801953a:	2208      	movs	r2, #8
 801953c:	305c      	adds	r0, #92	; 0x5c
 801953e:	f7ff fcdf 	bl	8018f00 <memset>
 8019542:	4b05      	ldr	r3, [pc, #20]	; (8019558 <std+0x38>)
 8019544:	6263      	str	r3, [r4, #36]	; 0x24
 8019546:	4b05      	ldr	r3, [pc, #20]	; (801955c <std+0x3c>)
 8019548:	62a3      	str	r3, [r4, #40]	; 0x28
 801954a:	4b05      	ldr	r3, [pc, #20]	; (8019560 <std+0x40>)
 801954c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801954e:	4b05      	ldr	r3, [pc, #20]	; (8019564 <std+0x44>)
 8019550:	6224      	str	r4, [r4, #32]
 8019552:	6323      	str	r3, [r4, #48]	; 0x30
 8019554:	bd10      	pop	{r4, pc}
 8019556:	bf00      	nop
 8019558:	08019dd1 	.word	0x08019dd1
 801955c:	08019df3 	.word	0x08019df3
 8019560:	08019e2b 	.word	0x08019e2b
 8019564:	08019e4f 	.word	0x08019e4f

08019568 <_cleanup_r>:
 8019568:	4901      	ldr	r1, [pc, #4]	; (8019570 <_cleanup_r+0x8>)
 801956a:	f000 b8af 	b.w	80196cc <_fwalk_reent>
 801956e:	bf00      	nop
 8019570:	080194a9 	.word	0x080194a9

08019574 <__sfmoreglue>:
 8019574:	b570      	push	{r4, r5, r6, lr}
 8019576:	2268      	movs	r2, #104	; 0x68
 8019578:	1e4d      	subs	r5, r1, #1
 801957a:	4355      	muls	r5, r2
 801957c:	460e      	mov	r6, r1
 801957e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019582:	f7ff fd31 	bl	8018fe8 <_malloc_r>
 8019586:	4604      	mov	r4, r0
 8019588:	b140      	cbz	r0, 801959c <__sfmoreglue+0x28>
 801958a:	2100      	movs	r1, #0
 801958c:	e9c0 1600 	strd	r1, r6, [r0]
 8019590:	300c      	adds	r0, #12
 8019592:	60a0      	str	r0, [r4, #8]
 8019594:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019598:	f7ff fcb2 	bl	8018f00 <memset>
 801959c:	4620      	mov	r0, r4
 801959e:	bd70      	pop	{r4, r5, r6, pc}

080195a0 <__sfp_lock_acquire>:
 80195a0:	4801      	ldr	r0, [pc, #4]	; (80195a8 <__sfp_lock_acquire+0x8>)
 80195a2:	f000 b8b3 	b.w	801970c <__retarget_lock_acquire_recursive>
 80195a6:	bf00      	nop
 80195a8:	20002fc9 	.word	0x20002fc9

080195ac <__sfp_lock_release>:
 80195ac:	4801      	ldr	r0, [pc, #4]	; (80195b4 <__sfp_lock_release+0x8>)
 80195ae:	f000 b8ae 	b.w	801970e <__retarget_lock_release_recursive>
 80195b2:	bf00      	nop
 80195b4:	20002fc9 	.word	0x20002fc9

080195b8 <__sinit_lock_acquire>:
 80195b8:	4801      	ldr	r0, [pc, #4]	; (80195c0 <__sinit_lock_acquire+0x8>)
 80195ba:	f000 b8a7 	b.w	801970c <__retarget_lock_acquire_recursive>
 80195be:	bf00      	nop
 80195c0:	20002fca 	.word	0x20002fca

080195c4 <__sinit_lock_release>:
 80195c4:	4801      	ldr	r0, [pc, #4]	; (80195cc <__sinit_lock_release+0x8>)
 80195c6:	f000 b8a2 	b.w	801970e <__retarget_lock_release_recursive>
 80195ca:	bf00      	nop
 80195cc:	20002fca 	.word	0x20002fca

080195d0 <__sinit>:
 80195d0:	b510      	push	{r4, lr}
 80195d2:	4604      	mov	r4, r0
 80195d4:	f7ff fff0 	bl	80195b8 <__sinit_lock_acquire>
 80195d8:	69a3      	ldr	r3, [r4, #24]
 80195da:	b11b      	cbz	r3, 80195e4 <__sinit+0x14>
 80195dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80195e0:	f7ff bff0 	b.w	80195c4 <__sinit_lock_release>
 80195e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80195e8:	6523      	str	r3, [r4, #80]	; 0x50
 80195ea:	4b13      	ldr	r3, [pc, #76]	; (8019638 <__sinit+0x68>)
 80195ec:	4a13      	ldr	r2, [pc, #76]	; (801963c <__sinit+0x6c>)
 80195ee:	681b      	ldr	r3, [r3, #0]
 80195f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80195f2:	42a3      	cmp	r3, r4
 80195f4:	bf04      	itt	eq
 80195f6:	2301      	moveq	r3, #1
 80195f8:	61a3      	streq	r3, [r4, #24]
 80195fa:	4620      	mov	r0, r4
 80195fc:	f000 f820 	bl	8019640 <__sfp>
 8019600:	6060      	str	r0, [r4, #4]
 8019602:	4620      	mov	r0, r4
 8019604:	f000 f81c 	bl	8019640 <__sfp>
 8019608:	60a0      	str	r0, [r4, #8]
 801960a:	4620      	mov	r0, r4
 801960c:	f000 f818 	bl	8019640 <__sfp>
 8019610:	2200      	movs	r2, #0
 8019612:	60e0      	str	r0, [r4, #12]
 8019614:	2104      	movs	r1, #4
 8019616:	6860      	ldr	r0, [r4, #4]
 8019618:	f7ff ff82 	bl	8019520 <std>
 801961c:	68a0      	ldr	r0, [r4, #8]
 801961e:	2201      	movs	r2, #1
 8019620:	2109      	movs	r1, #9
 8019622:	f7ff ff7d 	bl	8019520 <std>
 8019626:	68e0      	ldr	r0, [r4, #12]
 8019628:	2202      	movs	r2, #2
 801962a:	2112      	movs	r1, #18
 801962c:	f7ff ff78 	bl	8019520 <std>
 8019630:	2301      	movs	r3, #1
 8019632:	61a3      	str	r3, [r4, #24]
 8019634:	e7d2      	b.n	80195dc <__sinit+0xc>
 8019636:	bf00      	nop
 8019638:	0801c010 	.word	0x0801c010
 801963c:	08019569 	.word	0x08019569

08019640 <__sfp>:
 8019640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019642:	4607      	mov	r7, r0
 8019644:	f7ff ffac 	bl	80195a0 <__sfp_lock_acquire>
 8019648:	4b1e      	ldr	r3, [pc, #120]	; (80196c4 <__sfp+0x84>)
 801964a:	681e      	ldr	r6, [r3, #0]
 801964c:	69b3      	ldr	r3, [r6, #24]
 801964e:	b913      	cbnz	r3, 8019656 <__sfp+0x16>
 8019650:	4630      	mov	r0, r6
 8019652:	f7ff ffbd 	bl	80195d0 <__sinit>
 8019656:	3648      	adds	r6, #72	; 0x48
 8019658:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801965c:	3b01      	subs	r3, #1
 801965e:	d503      	bpl.n	8019668 <__sfp+0x28>
 8019660:	6833      	ldr	r3, [r6, #0]
 8019662:	b30b      	cbz	r3, 80196a8 <__sfp+0x68>
 8019664:	6836      	ldr	r6, [r6, #0]
 8019666:	e7f7      	b.n	8019658 <__sfp+0x18>
 8019668:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801966c:	b9d5      	cbnz	r5, 80196a4 <__sfp+0x64>
 801966e:	4b16      	ldr	r3, [pc, #88]	; (80196c8 <__sfp+0x88>)
 8019670:	60e3      	str	r3, [r4, #12]
 8019672:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019676:	6665      	str	r5, [r4, #100]	; 0x64
 8019678:	f000 f847 	bl	801970a <__retarget_lock_init_recursive>
 801967c:	f7ff ff96 	bl	80195ac <__sfp_lock_release>
 8019680:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019684:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019688:	6025      	str	r5, [r4, #0]
 801968a:	61a5      	str	r5, [r4, #24]
 801968c:	2208      	movs	r2, #8
 801968e:	4629      	mov	r1, r5
 8019690:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019694:	f7ff fc34 	bl	8018f00 <memset>
 8019698:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801969c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80196a0:	4620      	mov	r0, r4
 80196a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196a4:	3468      	adds	r4, #104	; 0x68
 80196a6:	e7d9      	b.n	801965c <__sfp+0x1c>
 80196a8:	2104      	movs	r1, #4
 80196aa:	4638      	mov	r0, r7
 80196ac:	f7ff ff62 	bl	8019574 <__sfmoreglue>
 80196b0:	4604      	mov	r4, r0
 80196b2:	6030      	str	r0, [r6, #0]
 80196b4:	2800      	cmp	r0, #0
 80196b6:	d1d5      	bne.n	8019664 <__sfp+0x24>
 80196b8:	f7ff ff78 	bl	80195ac <__sfp_lock_release>
 80196bc:	230c      	movs	r3, #12
 80196be:	603b      	str	r3, [r7, #0]
 80196c0:	e7ee      	b.n	80196a0 <__sfp+0x60>
 80196c2:	bf00      	nop
 80196c4:	0801c010 	.word	0x0801c010
 80196c8:	ffff0001 	.word	0xffff0001

080196cc <_fwalk_reent>:
 80196cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80196d0:	4606      	mov	r6, r0
 80196d2:	4688      	mov	r8, r1
 80196d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80196d8:	2700      	movs	r7, #0
 80196da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80196de:	f1b9 0901 	subs.w	r9, r9, #1
 80196e2:	d505      	bpl.n	80196f0 <_fwalk_reent+0x24>
 80196e4:	6824      	ldr	r4, [r4, #0]
 80196e6:	2c00      	cmp	r4, #0
 80196e8:	d1f7      	bne.n	80196da <_fwalk_reent+0xe>
 80196ea:	4638      	mov	r0, r7
 80196ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80196f0:	89ab      	ldrh	r3, [r5, #12]
 80196f2:	2b01      	cmp	r3, #1
 80196f4:	d907      	bls.n	8019706 <_fwalk_reent+0x3a>
 80196f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80196fa:	3301      	adds	r3, #1
 80196fc:	d003      	beq.n	8019706 <_fwalk_reent+0x3a>
 80196fe:	4629      	mov	r1, r5
 8019700:	4630      	mov	r0, r6
 8019702:	47c0      	blx	r8
 8019704:	4307      	orrs	r7, r0
 8019706:	3568      	adds	r5, #104	; 0x68
 8019708:	e7e9      	b.n	80196de <_fwalk_reent+0x12>

0801970a <__retarget_lock_init_recursive>:
 801970a:	4770      	bx	lr

0801970c <__retarget_lock_acquire_recursive>:
 801970c:	4770      	bx	lr

0801970e <__retarget_lock_release_recursive>:
 801970e:	4770      	bx	lr

08019710 <__swhatbuf_r>:
 8019710:	b570      	push	{r4, r5, r6, lr}
 8019712:	460e      	mov	r6, r1
 8019714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019718:	2900      	cmp	r1, #0
 801971a:	b096      	sub	sp, #88	; 0x58
 801971c:	4614      	mov	r4, r2
 801971e:	461d      	mov	r5, r3
 8019720:	da08      	bge.n	8019734 <__swhatbuf_r+0x24>
 8019722:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019726:	2200      	movs	r2, #0
 8019728:	602a      	str	r2, [r5, #0]
 801972a:	061a      	lsls	r2, r3, #24
 801972c:	d410      	bmi.n	8019750 <__swhatbuf_r+0x40>
 801972e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019732:	e00e      	b.n	8019752 <__swhatbuf_r+0x42>
 8019734:	466a      	mov	r2, sp
 8019736:	f000 fbb1 	bl	8019e9c <_fstat_r>
 801973a:	2800      	cmp	r0, #0
 801973c:	dbf1      	blt.n	8019722 <__swhatbuf_r+0x12>
 801973e:	9a01      	ldr	r2, [sp, #4]
 8019740:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019744:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019748:	425a      	negs	r2, r3
 801974a:	415a      	adcs	r2, r3
 801974c:	602a      	str	r2, [r5, #0]
 801974e:	e7ee      	b.n	801972e <__swhatbuf_r+0x1e>
 8019750:	2340      	movs	r3, #64	; 0x40
 8019752:	2000      	movs	r0, #0
 8019754:	6023      	str	r3, [r4, #0]
 8019756:	b016      	add	sp, #88	; 0x58
 8019758:	bd70      	pop	{r4, r5, r6, pc}
	...

0801975c <__smakebuf_r>:
 801975c:	898b      	ldrh	r3, [r1, #12]
 801975e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019760:	079d      	lsls	r5, r3, #30
 8019762:	4606      	mov	r6, r0
 8019764:	460c      	mov	r4, r1
 8019766:	d507      	bpl.n	8019778 <__smakebuf_r+0x1c>
 8019768:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801976c:	6023      	str	r3, [r4, #0]
 801976e:	6123      	str	r3, [r4, #16]
 8019770:	2301      	movs	r3, #1
 8019772:	6163      	str	r3, [r4, #20]
 8019774:	b002      	add	sp, #8
 8019776:	bd70      	pop	{r4, r5, r6, pc}
 8019778:	ab01      	add	r3, sp, #4
 801977a:	466a      	mov	r2, sp
 801977c:	f7ff ffc8 	bl	8019710 <__swhatbuf_r>
 8019780:	9900      	ldr	r1, [sp, #0]
 8019782:	4605      	mov	r5, r0
 8019784:	4630      	mov	r0, r6
 8019786:	f7ff fc2f 	bl	8018fe8 <_malloc_r>
 801978a:	b948      	cbnz	r0, 80197a0 <__smakebuf_r+0x44>
 801978c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019790:	059a      	lsls	r2, r3, #22
 8019792:	d4ef      	bmi.n	8019774 <__smakebuf_r+0x18>
 8019794:	f023 0303 	bic.w	r3, r3, #3
 8019798:	f043 0302 	orr.w	r3, r3, #2
 801979c:	81a3      	strh	r3, [r4, #12]
 801979e:	e7e3      	b.n	8019768 <__smakebuf_r+0xc>
 80197a0:	4b0d      	ldr	r3, [pc, #52]	; (80197d8 <__smakebuf_r+0x7c>)
 80197a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80197a4:	89a3      	ldrh	r3, [r4, #12]
 80197a6:	6020      	str	r0, [r4, #0]
 80197a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80197ac:	81a3      	strh	r3, [r4, #12]
 80197ae:	9b00      	ldr	r3, [sp, #0]
 80197b0:	6163      	str	r3, [r4, #20]
 80197b2:	9b01      	ldr	r3, [sp, #4]
 80197b4:	6120      	str	r0, [r4, #16]
 80197b6:	b15b      	cbz	r3, 80197d0 <__smakebuf_r+0x74>
 80197b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80197bc:	4630      	mov	r0, r6
 80197be:	f000 fb7f 	bl	8019ec0 <_isatty_r>
 80197c2:	b128      	cbz	r0, 80197d0 <__smakebuf_r+0x74>
 80197c4:	89a3      	ldrh	r3, [r4, #12]
 80197c6:	f023 0303 	bic.w	r3, r3, #3
 80197ca:	f043 0301 	orr.w	r3, r3, #1
 80197ce:	81a3      	strh	r3, [r4, #12]
 80197d0:	89a0      	ldrh	r0, [r4, #12]
 80197d2:	4305      	orrs	r5, r0
 80197d4:	81a5      	strh	r5, [r4, #12]
 80197d6:	e7cd      	b.n	8019774 <__smakebuf_r+0x18>
 80197d8:	08019569 	.word	0x08019569

080197dc <__malloc_lock>:
 80197dc:	4801      	ldr	r0, [pc, #4]	; (80197e4 <__malloc_lock+0x8>)
 80197de:	f7ff bf95 	b.w	801970c <__retarget_lock_acquire_recursive>
 80197e2:	bf00      	nop
 80197e4:	20002fc8 	.word	0x20002fc8

080197e8 <__malloc_unlock>:
 80197e8:	4801      	ldr	r0, [pc, #4]	; (80197f0 <__malloc_unlock+0x8>)
 80197ea:	f7ff bf90 	b.w	801970e <__retarget_lock_release_recursive>
 80197ee:	bf00      	nop
 80197f0:	20002fc8 	.word	0x20002fc8

080197f4 <__sfputc_r>:
 80197f4:	6893      	ldr	r3, [r2, #8]
 80197f6:	3b01      	subs	r3, #1
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	b410      	push	{r4}
 80197fc:	6093      	str	r3, [r2, #8]
 80197fe:	da08      	bge.n	8019812 <__sfputc_r+0x1e>
 8019800:	6994      	ldr	r4, [r2, #24]
 8019802:	42a3      	cmp	r3, r4
 8019804:	db01      	blt.n	801980a <__sfputc_r+0x16>
 8019806:	290a      	cmp	r1, #10
 8019808:	d103      	bne.n	8019812 <__sfputc_r+0x1e>
 801980a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801980e:	f7ff bd05 	b.w	801921c <__swbuf_r>
 8019812:	6813      	ldr	r3, [r2, #0]
 8019814:	1c58      	adds	r0, r3, #1
 8019816:	6010      	str	r0, [r2, #0]
 8019818:	7019      	strb	r1, [r3, #0]
 801981a:	4608      	mov	r0, r1
 801981c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019820:	4770      	bx	lr

08019822 <__sfputs_r>:
 8019822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019824:	4606      	mov	r6, r0
 8019826:	460f      	mov	r7, r1
 8019828:	4614      	mov	r4, r2
 801982a:	18d5      	adds	r5, r2, r3
 801982c:	42ac      	cmp	r4, r5
 801982e:	d101      	bne.n	8019834 <__sfputs_r+0x12>
 8019830:	2000      	movs	r0, #0
 8019832:	e007      	b.n	8019844 <__sfputs_r+0x22>
 8019834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019838:	463a      	mov	r2, r7
 801983a:	4630      	mov	r0, r6
 801983c:	f7ff ffda 	bl	80197f4 <__sfputc_r>
 8019840:	1c43      	adds	r3, r0, #1
 8019842:	d1f3      	bne.n	801982c <__sfputs_r+0xa>
 8019844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019848 <_vfiprintf_r>:
 8019848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801984c:	460d      	mov	r5, r1
 801984e:	b09d      	sub	sp, #116	; 0x74
 8019850:	4614      	mov	r4, r2
 8019852:	4698      	mov	r8, r3
 8019854:	4606      	mov	r6, r0
 8019856:	b118      	cbz	r0, 8019860 <_vfiprintf_r+0x18>
 8019858:	6983      	ldr	r3, [r0, #24]
 801985a:	b90b      	cbnz	r3, 8019860 <_vfiprintf_r+0x18>
 801985c:	f7ff feb8 	bl	80195d0 <__sinit>
 8019860:	4b89      	ldr	r3, [pc, #548]	; (8019a88 <_vfiprintf_r+0x240>)
 8019862:	429d      	cmp	r5, r3
 8019864:	d11b      	bne.n	801989e <_vfiprintf_r+0x56>
 8019866:	6875      	ldr	r5, [r6, #4]
 8019868:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801986a:	07d9      	lsls	r1, r3, #31
 801986c:	d405      	bmi.n	801987a <_vfiprintf_r+0x32>
 801986e:	89ab      	ldrh	r3, [r5, #12]
 8019870:	059a      	lsls	r2, r3, #22
 8019872:	d402      	bmi.n	801987a <_vfiprintf_r+0x32>
 8019874:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019876:	f7ff ff49 	bl	801970c <__retarget_lock_acquire_recursive>
 801987a:	89ab      	ldrh	r3, [r5, #12]
 801987c:	071b      	lsls	r3, r3, #28
 801987e:	d501      	bpl.n	8019884 <_vfiprintf_r+0x3c>
 8019880:	692b      	ldr	r3, [r5, #16]
 8019882:	b9eb      	cbnz	r3, 80198c0 <_vfiprintf_r+0x78>
 8019884:	4629      	mov	r1, r5
 8019886:	4630      	mov	r0, r6
 8019888:	f7ff fd1a 	bl	80192c0 <__swsetup_r>
 801988c:	b1c0      	cbz	r0, 80198c0 <_vfiprintf_r+0x78>
 801988e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019890:	07dc      	lsls	r4, r3, #31
 8019892:	d50e      	bpl.n	80198b2 <_vfiprintf_r+0x6a>
 8019894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019898:	b01d      	add	sp, #116	; 0x74
 801989a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801989e:	4b7b      	ldr	r3, [pc, #492]	; (8019a8c <_vfiprintf_r+0x244>)
 80198a0:	429d      	cmp	r5, r3
 80198a2:	d101      	bne.n	80198a8 <_vfiprintf_r+0x60>
 80198a4:	68b5      	ldr	r5, [r6, #8]
 80198a6:	e7df      	b.n	8019868 <_vfiprintf_r+0x20>
 80198a8:	4b79      	ldr	r3, [pc, #484]	; (8019a90 <_vfiprintf_r+0x248>)
 80198aa:	429d      	cmp	r5, r3
 80198ac:	bf08      	it	eq
 80198ae:	68f5      	ldreq	r5, [r6, #12]
 80198b0:	e7da      	b.n	8019868 <_vfiprintf_r+0x20>
 80198b2:	89ab      	ldrh	r3, [r5, #12]
 80198b4:	0598      	lsls	r0, r3, #22
 80198b6:	d4ed      	bmi.n	8019894 <_vfiprintf_r+0x4c>
 80198b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80198ba:	f7ff ff28 	bl	801970e <__retarget_lock_release_recursive>
 80198be:	e7e9      	b.n	8019894 <_vfiprintf_r+0x4c>
 80198c0:	2300      	movs	r3, #0
 80198c2:	9309      	str	r3, [sp, #36]	; 0x24
 80198c4:	2320      	movs	r3, #32
 80198c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80198ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80198ce:	2330      	movs	r3, #48	; 0x30
 80198d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019a94 <_vfiprintf_r+0x24c>
 80198d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80198d8:	f04f 0901 	mov.w	r9, #1
 80198dc:	4623      	mov	r3, r4
 80198de:	469a      	mov	sl, r3
 80198e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80198e4:	b10a      	cbz	r2, 80198ea <_vfiprintf_r+0xa2>
 80198e6:	2a25      	cmp	r2, #37	; 0x25
 80198e8:	d1f9      	bne.n	80198de <_vfiprintf_r+0x96>
 80198ea:	ebba 0b04 	subs.w	fp, sl, r4
 80198ee:	d00b      	beq.n	8019908 <_vfiprintf_r+0xc0>
 80198f0:	465b      	mov	r3, fp
 80198f2:	4622      	mov	r2, r4
 80198f4:	4629      	mov	r1, r5
 80198f6:	4630      	mov	r0, r6
 80198f8:	f7ff ff93 	bl	8019822 <__sfputs_r>
 80198fc:	3001      	adds	r0, #1
 80198fe:	f000 80aa 	beq.w	8019a56 <_vfiprintf_r+0x20e>
 8019902:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019904:	445a      	add	r2, fp
 8019906:	9209      	str	r2, [sp, #36]	; 0x24
 8019908:	f89a 3000 	ldrb.w	r3, [sl]
 801990c:	2b00      	cmp	r3, #0
 801990e:	f000 80a2 	beq.w	8019a56 <_vfiprintf_r+0x20e>
 8019912:	2300      	movs	r3, #0
 8019914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019918:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801991c:	f10a 0a01 	add.w	sl, sl, #1
 8019920:	9304      	str	r3, [sp, #16]
 8019922:	9307      	str	r3, [sp, #28]
 8019924:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019928:	931a      	str	r3, [sp, #104]	; 0x68
 801992a:	4654      	mov	r4, sl
 801992c:	2205      	movs	r2, #5
 801992e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019932:	4858      	ldr	r0, [pc, #352]	; (8019a94 <_vfiprintf_r+0x24c>)
 8019934:	f7e6 fc5c 	bl	80001f0 <memchr>
 8019938:	9a04      	ldr	r2, [sp, #16]
 801993a:	b9d8      	cbnz	r0, 8019974 <_vfiprintf_r+0x12c>
 801993c:	06d1      	lsls	r1, r2, #27
 801993e:	bf44      	itt	mi
 8019940:	2320      	movmi	r3, #32
 8019942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019946:	0713      	lsls	r3, r2, #28
 8019948:	bf44      	itt	mi
 801994a:	232b      	movmi	r3, #43	; 0x2b
 801994c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019950:	f89a 3000 	ldrb.w	r3, [sl]
 8019954:	2b2a      	cmp	r3, #42	; 0x2a
 8019956:	d015      	beq.n	8019984 <_vfiprintf_r+0x13c>
 8019958:	9a07      	ldr	r2, [sp, #28]
 801995a:	4654      	mov	r4, sl
 801995c:	2000      	movs	r0, #0
 801995e:	f04f 0c0a 	mov.w	ip, #10
 8019962:	4621      	mov	r1, r4
 8019964:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019968:	3b30      	subs	r3, #48	; 0x30
 801996a:	2b09      	cmp	r3, #9
 801996c:	d94e      	bls.n	8019a0c <_vfiprintf_r+0x1c4>
 801996e:	b1b0      	cbz	r0, 801999e <_vfiprintf_r+0x156>
 8019970:	9207      	str	r2, [sp, #28]
 8019972:	e014      	b.n	801999e <_vfiprintf_r+0x156>
 8019974:	eba0 0308 	sub.w	r3, r0, r8
 8019978:	fa09 f303 	lsl.w	r3, r9, r3
 801997c:	4313      	orrs	r3, r2
 801997e:	9304      	str	r3, [sp, #16]
 8019980:	46a2      	mov	sl, r4
 8019982:	e7d2      	b.n	801992a <_vfiprintf_r+0xe2>
 8019984:	9b03      	ldr	r3, [sp, #12]
 8019986:	1d19      	adds	r1, r3, #4
 8019988:	681b      	ldr	r3, [r3, #0]
 801998a:	9103      	str	r1, [sp, #12]
 801998c:	2b00      	cmp	r3, #0
 801998e:	bfbb      	ittet	lt
 8019990:	425b      	neglt	r3, r3
 8019992:	f042 0202 	orrlt.w	r2, r2, #2
 8019996:	9307      	strge	r3, [sp, #28]
 8019998:	9307      	strlt	r3, [sp, #28]
 801999a:	bfb8      	it	lt
 801999c:	9204      	strlt	r2, [sp, #16]
 801999e:	7823      	ldrb	r3, [r4, #0]
 80199a0:	2b2e      	cmp	r3, #46	; 0x2e
 80199a2:	d10c      	bne.n	80199be <_vfiprintf_r+0x176>
 80199a4:	7863      	ldrb	r3, [r4, #1]
 80199a6:	2b2a      	cmp	r3, #42	; 0x2a
 80199a8:	d135      	bne.n	8019a16 <_vfiprintf_r+0x1ce>
 80199aa:	9b03      	ldr	r3, [sp, #12]
 80199ac:	1d1a      	adds	r2, r3, #4
 80199ae:	681b      	ldr	r3, [r3, #0]
 80199b0:	9203      	str	r2, [sp, #12]
 80199b2:	2b00      	cmp	r3, #0
 80199b4:	bfb8      	it	lt
 80199b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80199ba:	3402      	adds	r4, #2
 80199bc:	9305      	str	r3, [sp, #20]
 80199be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019aa4 <_vfiprintf_r+0x25c>
 80199c2:	7821      	ldrb	r1, [r4, #0]
 80199c4:	2203      	movs	r2, #3
 80199c6:	4650      	mov	r0, sl
 80199c8:	f7e6 fc12 	bl	80001f0 <memchr>
 80199cc:	b140      	cbz	r0, 80199e0 <_vfiprintf_r+0x198>
 80199ce:	2340      	movs	r3, #64	; 0x40
 80199d0:	eba0 000a 	sub.w	r0, r0, sl
 80199d4:	fa03 f000 	lsl.w	r0, r3, r0
 80199d8:	9b04      	ldr	r3, [sp, #16]
 80199da:	4303      	orrs	r3, r0
 80199dc:	3401      	adds	r4, #1
 80199de:	9304      	str	r3, [sp, #16]
 80199e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80199e4:	482c      	ldr	r0, [pc, #176]	; (8019a98 <_vfiprintf_r+0x250>)
 80199e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80199ea:	2206      	movs	r2, #6
 80199ec:	f7e6 fc00 	bl	80001f0 <memchr>
 80199f0:	2800      	cmp	r0, #0
 80199f2:	d03f      	beq.n	8019a74 <_vfiprintf_r+0x22c>
 80199f4:	4b29      	ldr	r3, [pc, #164]	; (8019a9c <_vfiprintf_r+0x254>)
 80199f6:	bb1b      	cbnz	r3, 8019a40 <_vfiprintf_r+0x1f8>
 80199f8:	9b03      	ldr	r3, [sp, #12]
 80199fa:	3307      	adds	r3, #7
 80199fc:	f023 0307 	bic.w	r3, r3, #7
 8019a00:	3308      	adds	r3, #8
 8019a02:	9303      	str	r3, [sp, #12]
 8019a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a06:	443b      	add	r3, r7
 8019a08:	9309      	str	r3, [sp, #36]	; 0x24
 8019a0a:	e767      	b.n	80198dc <_vfiprintf_r+0x94>
 8019a0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019a10:	460c      	mov	r4, r1
 8019a12:	2001      	movs	r0, #1
 8019a14:	e7a5      	b.n	8019962 <_vfiprintf_r+0x11a>
 8019a16:	2300      	movs	r3, #0
 8019a18:	3401      	adds	r4, #1
 8019a1a:	9305      	str	r3, [sp, #20]
 8019a1c:	4619      	mov	r1, r3
 8019a1e:	f04f 0c0a 	mov.w	ip, #10
 8019a22:	4620      	mov	r0, r4
 8019a24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019a28:	3a30      	subs	r2, #48	; 0x30
 8019a2a:	2a09      	cmp	r2, #9
 8019a2c:	d903      	bls.n	8019a36 <_vfiprintf_r+0x1ee>
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d0c5      	beq.n	80199be <_vfiprintf_r+0x176>
 8019a32:	9105      	str	r1, [sp, #20]
 8019a34:	e7c3      	b.n	80199be <_vfiprintf_r+0x176>
 8019a36:	fb0c 2101 	mla	r1, ip, r1, r2
 8019a3a:	4604      	mov	r4, r0
 8019a3c:	2301      	movs	r3, #1
 8019a3e:	e7f0      	b.n	8019a22 <_vfiprintf_r+0x1da>
 8019a40:	ab03      	add	r3, sp, #12
 8019a42:	9300      	str	r3, [sp, #0]
 8019a44:	462a      	mov	r2, r5
 8019a46:	4b16      	ldr	r3, [pc, #88]	; (8019aa0 <_vfiprintf_r+0x258>)
 8019a48:	a904      	add	r1, sp, #16
 8019a4a:	4630      	mov	r0, r6
 8019a4c:	f3af 8000 	nop.w
 8019a50:	4607      	mov	r7, r0
 8019a52:	1c78      	adds	r0, r7, #1
 8019a54:	d1d6      	bne.n	8019a04 <_vfiprintf_r+0x1bc>
 8019a56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019a58:	07d9      	lsls	r1, r3, #31
 8019a5a:	d405      	bmi.n	8019a68 <_vfiprintf_r+0x220>
 8019a5c:	89ab      	ldrh	r3, [r5, #12]
 8019a5e:	059a      	lsls	r2, r3, #22
 8019a60:	d402      	bmi.n	8019a68 <_vfiprintf_r+0x220>
 8019a62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019a64:	f7ff fe53 	bl	801970e <__retarget_lock_release_recursive>
 8019a68:	89ab      	ldrh	r3, [r5, #12]
 8019a6a:	065b      	lsls	r3, r3, #25
 8019a6c:	f53f af12 	bmi.w	8019894 <_vfiprintf_r+0x4c>
 8019a70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019a72:	e711      	b.n	8019898 <_vfiprintf_r+0x50>
 8019a74:	ab03      	add	r3, sp, #12
 8019a76:	9300      	str	r3, [sp, #0]
 8019a78:	462a      	mov	r2, r5
 8019a7a:	4b09      	ldr	r3, [pc, #36]	; (8019aa0 <_vfiprintf_r+0x258>)
 8019a7c:	a904      	add	r1, sp, #16
 8019a7e:	4630      	mov	r0, r6
 8019a80:	f000 f880 	bl	8019b84 <_printf_i>
 8019a84:	e7e4      	b.n	8019a50 <_vfiprintf_r+0x208>
 8019a86:	bf00      	nop
 8019a88:	0801c034 	.word	0x0801c034
 8019a8c:	0801c054 	.word	0x0801c054
 8019a90:	0801c014 	.word	0x0801c014
 8019a94:	0801c074 	.word	0x0801c074
 8019a98:	0801c07e 	.word	0x0801c07e
 8019a9c:	00000000 	.word	0x00000000
 8019aa0:	08019823 	.word	0x08019823
 8019aa4:	0801c07a 	.word	0x0801c07a

08019aa8 <_printf_common>:
 8019aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019aac:	4616      	mov	r6, r2
 8019aae:	4699      	mov	r9, r3
 8019ab0:	688a      	ldr	r2, [r1, #8]
 8019ab2:	690b      	ldr	r3, [r1, #16]
 8019ab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019ab8:	4293      	cmp	r3, r2
 8019aba:	bfb8      	it	lt
 8019abc:	4613      	movlt	r3, r2
 8019abe:	6033      	str	r3, [r6, #0]
 8019ac0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019ac4:	4607      	mov	r7, r0
 8019ac6:	460c      	mov	r4, r1
 8019ac8:	b10a      	cbz	r2, 8019ace <_printf_common+0x26>
 8019aca:	3301      	adds	r3, #1
 8019acc:	6033      	str	r3, [r6, #0]
 8019ace:	6823      	ldr	r3, [r4, #0]
 8019ad0:	0699      	lsls	r1, r3, #26
 8019ad2:	bf42      	ittt	mi
 8019ad4:	6833      	ldrmi	r3, [r6, #0]
 8019ad6:	3302      	addmi	r3, #2
 8019ad8:	6033      	strmi	r3, [r6, #0]
 8019ada:	6825      	ldr	r5, [r4, #0]
 8019adc:	f015 0506 	ands.w	r5, r5, #6
 8019ae0:	d106      	bne.n	8019af0 <_printf_common+0x48>
 8019ae2:	f104 0a19 	add.w	sl, r4, #25
 8019ae6:	68e3      	ldr	r3, [r4, #12]
 8019ae8:	6832      	ldr	r2, [r6, #0]
 8019aea:	1a9b      	subs	r3, r3, r2
 8019aec:	42ab      	cmp	r3, r5
 8019aee:	dc26      	bgt.n	8019b3e <_printf_common+0x96>
 8019af0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019af4:	1e13      	subs	r3, r2, #0
 8019af6:	6822      	ldr	r2, [r4, #0]
 8019af8:	bf18      	it	ne
 8019afa:	2301      	movne	r3, #1
 8019afc:	0692      	lsls	r2, r2, #26
 8019afe:	d42b      	bmi.n	8019b58 <_printf_common+0xb0>
 8019b00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019b04:	4649      	mov	r1, r9
 8019b06:	4638      	mov	r0, r7
 8019b08:	47c0      	blx	r8
 8019b0a:	3001      	adds	r0, #1
 8019b0c:	d01e      	beq.n	8019b4c <_printf_common+0xa4>
 8019b0e:	6823      	ldr	r3, [r4, #0]
 8019b10:	68e5      	ldr	r5, [r4, #12]
 8019b12:	6832      	ldr	r2, [r6, #0]
 8019b14:	f003 0306 	and.w	r3, r3, #6
 8019b18:	2b04      	cmp	r3, #4
 8019b1a:	bf08      	it	eq
 8019b1c:	1aad      	subeq	r5, r5, r2
 8019b1e:	68a3      	ldr	r3, [r4, #8]
 8019b20:	6922      	ldr	r2, [r4, #16]
 8019b22:	bf0c      	ite	eq
 8019b24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019b28:	2500      	movne	r5, #0
 8019b2a:	4293      	cmp	r3, r2
 8019b2c:	bfc4      	itt	gt
 8019b2e:	1a9b      	subgt	r3, r3, r2
 8019b30:	18ed      	addgt	r5, r5, r3
 8019b32:	2600      	movs	r6, #0
 8019b34:	341a      	adds	r4, #26
 8019b36:	42b5      	cmp	r5, r6
 8019b38:	d11a      	bne.n	8019b70 <_printf_common+0xc8>
 8019b3a:	2000      	movs	r0, #0
 8019b3c:	e008      	b.n	8019b50 <_printf_common+0xa8>
 8019b3e:	2301      	movs	r3, #1
 8019b40:	4652      	mov	r2, sl
 8019b42:	4649      	mov	r1, r9
 8019b44:	4638      	mov	r0, r7
 8019b46:	47c0      	blx	r8
 8019b48:	3001      	adds	r0, #1
 8019b4a:	d103      	bne.n	8019b54 <_printf_common+0xac>
 8019b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b54:	3501      	adds	r5, #1
 8019b56:	e7c6      	b.n	8019ae6 <_printf_common+0x3e>
 8019b58:	18e1      	adds	r1, r4, r3
 8019b5a:	1c5a      	adds	r2, r3, #1
 8019b5c:	2030      	movs	r0, #48	; 0x30
 8019b5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019b62:	4422      	add	r2, r4
 8019b64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019b68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019b6c:	3302      	adds	r3, #2
 8019b6e:	e7c7      	b.n	8019b00 <_printf_common+0x58>
 8019b70:	2301      	movs	r3, #1
 8019b72:	4622      	mov	r2, r4
 8019b74:	4649      	mov	r1, r9
 8019b76:	4638      	mov	r0, r7
 8019b78:	47c0      	blx	r8
 8019b7a:	3001      	adds	r0, #1
 8019b7c:	d0e6      	beq.n	8019b4c <_printf_common+0xa4>
 8019b7e:	3601      	adds	r6, #1
 8019b80:	e7d9      	b.n	8019b36 <_printf_common+0x8e>
	...

08019b84 <_printf_i>:
 8019b84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019b88:	7e0f      	ldrb	r7, [r1, #24]
 8019b8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019b8c:	2f78      	cmp	r7, #120	; 0x78
 8019b8e:	4691      	mov	r9, r2
 8019b90:	4680      	mov	r8, r0
 8019b92:	460c      	mov	r4, r1
 8019b94:	469a      	mov	sl, r3
 8019b96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019b9a:	d807      	bhi.n	8019bac <_printf_i+0x28>
 8019b9c:	2f62      	cmp	r7, #98	; 0x62
 8019b9e:	d80a      	bhi.n	8019bb6 <_printf_i+0x32>
 8019ba0:	2f00      	cmp	r7, #0
 8019ba2:	f000 80d8 	beq.w	8019d56 <_printf_i+0x1d2>
 8019ba6:	2f58      	cmp	r7, #88	; 0x58
 8019ba8:	f000 80a3 	beq.w	8019cf2 <_printf_i+0x16e>
 8019bac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019bb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019bb4:	e03a      	b.n	8019c2c <_printf_i+0xa8>
 8019bb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019bba:	2b15      	cmp	r3, #21
 8019bbc:	d8f6      	bhi.n	8019bac <_printf_i+0x28>
 8019bbe:	a101      	add	r1, pc, #4	; (adr r1, 8019bc4 <_printf_i+0x40>)
 8019bc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019bc4:	08019c1d 	.word	0x08019c1d
 8019bc8:	08019c31 	.word	0x08019c31
 8019bcc:	08019bad 	.word	0x08019bad
 8019bd0:	08019bad 	.word	0x08019bad
 8019bd4:	08019bad 	.word	0x08019bad
 8019bd8:	08019bad 	.word	0x08019bad
 8019bdc:	08019c31 	.word	0x08019c31
 8019be0:	08019bad 	.word	0x08019bad
 8019be4:	08019bad 	.word	0x08019bad
 8019be8:	08019bad 	.word	0x08019bad
 8019bec:	08019bad 	.word	0x08019bad
 8019bf0:	08019d3d 	.word	0x08019d3d
 8019bf4:	08019c61 	.word	0x08019c61
 8019bf8:	08019d1f 	.word	0x08019d1f
 8019bfc:	08019bad 	.word	0x08019bad
 8019c00:	08019bad 	.word	0x08019bad
 8019c04:	08019d5f 	.word	0x08019d5f
 8019c08:	08019bad 	.word	0x08019bad
 8019c0c:	08019c61 	.word	0x08019c61
 8019c10:	08019bad 	.word	0x08019bad
 8019c14:	08019bad 	.word	0x08019bad
 8019c18:	08019d27 	.word	0x08019d27
 8019c1c:	682b      	ldr	r3, [r5, #0]
 8019c1e:	1d1a      	adds	r2, r3, #4
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	602a      	str	r2, [r5, #0]
 8019c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019c28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019c2c:	2301      	movs	r3, #1
 8019c2e:	e0a3      	b.n	8019d78 <_printf_i+0x1f4>
 8019c30:	6820      	ldr	r0, [r4, #0]
 8019c32:	6829      	ldr	r1, [r5, #0]
 8019c34:	0606      	lsls	r6, r0, #24
 8019c36:	f101 0304 	add.w	r3, r1, #4
 8019c3a:	d50a      	bpl.n	8019c52 <_printf_i+0xce>
 8019c3c:	680e      	ldr	r6, [r1, #0]
 8019c3e:	602b      	str	r3, [r5, #0]
 8019c40:	2e00      	cmp	r6, #0
 8019c42:	da03      	bge.n	8019c4c <_printf_i+0xc8>
 8019c44:	232d      	movs	r3, #45	; 0x2d
 8019c46:	4276      	negs	r6, r6
 8019c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019c4c:	485e      	ldr	r0, [pc, #376]	; (8019dc8 <_printf_i+0x244>)
 8019c4e:	230a      	movs	r3, #10
 8019c50:	e019      	b.n	8019c86 <_printf_i+0x102>
 8019c52:	680e      	ldr	r6, [r1, #0]
 8019c54:	602b      	str	r3, [r5, #0]
 8019c56:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019c5a:	bf18      	it	ne
 8019c5c:	b236      	sxthne	r6, r6
 8019c5e:	e7ef      	b.n	8019c40 <_printf_i+0xbc>
 8019c60:	682b      	ldr	r3, [r5, #0]
 8019c62:	6820      	ldr	r0, [r4, #0]
 8019c64:	1d19      	adds	r1, r3, #4
 8019c66:	6029      	str	r1, [r5, #0]
 8019c68:	0601      	lsls	r1, r0, #24
 8019c6a:	d501      	bpl.n	8019c70 <_printf_i+0xec>
 8019c6c:	681e      	ldr	r6, [r3, #0]
 8019c6e:	e002      	b.n	8019c76 <_printf_i+0xf2>
 8019c70:	0646      	lsls	r6, r0, #25
 8019c72:	d5fb      	bpl.n	8019c6c <_printf_i+0xe8>
 8019c74:	881e      	ldrh	r6, [r3, #0]
 8019c76:	4854      	ldr	r0, [pc, #336]	; (8019dc8 <_printf_i+0x244>)
 8019c78:	2f6f      	cmp	r7, #111	; 0x6f
 8019c7a:	bf0c      	ite	eq
 8019c7c:	2308      	moveq	r3, #8
 8019c7e:	230a      	movne	r3, #10
 8019c80:	2100      	movs	r1, #0
 8019c82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019c86:	6865      	ldr	r5, [r4, #4]
 8019c88:	60a5      	str	r5, [r4, #8]
 8019c8a:	2d00      	cmp	r5, #0
 8019c8c:	bfa2      	ittt	ge
 8019c8e:	6821      	ldrge	r1, [r4, #0]
 8019c90:	f021 0104 	bicge.w	r1, r1, #4
 8019c94:	6021      	strge	r1, [r4, #0]
 8019c96:	b90e      	cbnz	r6, 8019c9c <_printf_i+0x118>
 8019c98:	2d00      	cmp	r5, #0
 8019c9a:	d04d      	beq.n	8019d38 <_printf_i+0x1b4>
 8019c9c:	4615      	mov	r5, r2
 8019c9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8019ca2:	fb03 6711 	mls	r7, r3, r1, r6
 8019ca6:	5dc7      	ldrb	r7, [r0, r7]
 8019ca8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019cac:	4637      	mov	r7, r6
 8019cae:	42bb      	cmp	r3, r7
 8019cb0:	460e      	mov	r6, r1
 8019cb2:	d9f4      	bls.n	8019c9e <_printf_i+0x11a>
 8019cb4:	2b08      	cmp	r3, #8
 8019cb6:	d10b      	bne.n	8019cd0 <_printf_i+0x14c>
 8019cb8:	6823      	ldr	r3, [r4, #0]
 8019cba:	07de      	lsls	r6, r3, #31
 8019cbc:	d508      	bpl.n	8019cd0 <_printf_i+0x14c>
 8019cbe:	6923      	ldr	r3, [r4, #16]
 8019cc0:	6861      	ldr	r1, [r4, #4]
 8019cc2:	4299      	cmp	r1, r3
 8019cc4:	bfde      	ittt	le
 8019cc6:	2330      	movle	r3, #48	; 0x30
 8019cc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019ccc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8019cd0:	1b52      	subs	r2, r2, r5
 8019cd2:	6122      	str	r2, [r4, #16]
 8019cd4:	f8cd a000 	str.w	sl, [sp]
 8019cd8:	464b      	mov	r3, r9
 8019cda:	aa03      	add	r2, sp, #12
 8019cdc:	4621      	mov	r1, r4
 8019cde:	4640      	mov	r0, r8
 8019ce0:	f7ff fee2 	bl	8019aa8 <_printf_common>
 8019ce4:	3001      	adds	r0, #1
 8019ce6:	d14c      	bne.n	8019d82 <_printf_i+0x1fe>
 8019ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019cec:	b004      	add	sp, #16
 8019cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019cf2:	4835      	ldr	r0, [pc, #212]	; (8019dc8 <_printf_i+0x244>)
 8019cf4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019cf8:	6829      	ldr	r1, [r5, #0]
 8019cfa:	6823      	ldr	r3, [r4, #0]
 8019cfc:	f851 6b04 	ldr.w	r6, [r1], #4
 8019d00:	6029      	str	r1, [r5, #0]
 8019d02:	061d      	lsls	r5, r3, #24
 8019d04:	d514      	bpl.n	8019d30 <_printf_i+0x1ac>
 8019d06:	07df      	lsls	r7, r3, #31
 8019d08:	bf44      	itt	mi
 8019d0a:	f043 0320 	orrmi.w	r3, r3, #32
 8019d0e:	6023      	strmi	r3, [r4, #0]
 8019d10:	b91e      	cbnz	r6, 8019d1a <_printf_i+0x196>
 8019d12:	6823      	ldr	r3, [r4, #0]
 8019d14:	f023 0320 	bic.w	r3, r3, #32
 8019d18:	6023      	str	r3, [r4, #0]
 8019d1a:	2310      	movs	r3, #16
 8019d1c:	e7b0      	b.n	8019c80 <_printf_i+0xfc>
 8019d1e:	6823      	ldr	r3, [r4, #0]
 8019d20:	f043 0320 	orr.w	r3, r3, #32
 8019d24:	6023      	str	r3, [r4, #0]
 8019d26:	2378      	movs	r3, #120	; 0x78
 8019d28:	4828      	ldr	r0, [pc, #160]	; (8019dcc <_printf_i+0x248>)
 8019d2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019d2e:	e7e3      	b.n	8019cf8 <_printf_i+0x174>
 8019d30:	0659      	lsls	r1, r3, #25
 8019d32:	bf48      	it	mi
 8019d34:	b2b6      	uxthmi	r6, r6
 8019d36:	e7e6      	b.n	8019d06 <_printf_i+0x182>
 8019d38:	4615      	mov	r5, r2
 8019d3a:	e7bb      	b.n	8019cb4 <_printf_i+0x130>
 8019d3c:	682b      	ldr	r3, [r5, #0]
 8019d3e:	6826      	ldr	r6, [r4, #0]
 8019d40:	6961      	ldr	r1, [r4, #20]
 8019d42:	1d18      	adds	r0, r3, #4
 8019d44:	6028      	str	r0, [r5, #0]
 8019d46:	0635      	lsls	r5, r6, #24
 8019d48:	681b      	ldr	r3, [r3, #0]
 8019d4a:	d501      	bpl.n	8019d50 <_printf_i+0x1cc>
 8019d4c:	6019      	str	r1, [r3, #0]
 8019d4e:	e002      	b.n	8019d56 <_printf_i+0x1d2>
 8019d50:	0670      	lsls	r0, r6, #25
 8019d52:	d5fb      	bpl.n	8019d4c <_printf_i+0x1c8>
 8019d54:	8019      	strh	r1, [r3, #0]
 8019d56:	2300      	movs	r3, #0
 8019d58:	6123      	str	r3, [r4, #16]
 8019d5a:	4615      	mov	r5, r2
 8019d5c:	e7ba      	b.n	8019cd4 <_printf_i+0x150>
 8019d5e:	682b      	ldr	r3, [r5, #0]
 8019d60:	1d1a      	adds	r2, r3, #4
 8019d62:	602a      	str	r2, [r5, #0]
 8019d64:	681d      	ldr	r5, [r3, #0]
 8019d66:	6862      	ldr	r2, [r4, #4]
 8019d68:	2100      	movs	r1, #0
 8019d6a:	4628      	mov	r0, r5
 8019d6c:	f7e6 fa40 	bl	80001f0 <memchr>
 8019d70:	b108      	cbz	r0, 8019d76 <_printf_i+0x1f2>
 8019d72:	1b40      	subs	r0, r0, r5
 8019d74:	6060      	str	r0, [r4, #4]
 8019d76:	6863      	ldr	r3, [r4, #4]
 8019d78:	6123      	str	r3, [r4, #16]
 8019d7a:	2300      	movs	r3, #0
 8019d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019d80:	e7a8      	b.n	8019cd4 <_printf_i+0x150>
 8019d82:	6923      	ldr	r3, [r4, #16]
 8019d84:	462a      	mov	r2, r5
 8019d86:	4649      	mov	r1, r9
 8019d88:	4640      	mov	r0, r8
 8019d8a:	47d0      	blx	sl
 8019d8c:	3001      	adds	r0, #1
 8019d8e:	d0ab      	beq.n	8019ce8 <_printf_i+0x164>
 8019d90:	6823      	ldr	r3, [r4, #0]
 8019d92:	079b      	lsls	r3, r3, #30
 8019d94:	d413      	bmi.n	8019dbe <_printf_i+0x23a>
 8019d96:	68e0      	ldr	r0, [r4, #12]
 8019d98:	9b03      	ldr	r3, [sp, #12]
 8019d9a:	4298      	cmp	r0, r3
 8019d9c:	bfb8      	it	lt
 8019d9e:	4618      	movlt	r0, r3
 8019da0:	e7a4      	b.n	8019cec <_printf_i+0x168>
 8019da2:	2301      	movs	r3, #1
 8019da4:	4632      	mov	r2, r6
 8019da6:	4649      	mov	r1, r9
 8019da8:	4640      	mov	r0, r8
 8019daa:	47d0      	blx	sl
 8019dac:	3001      	adds	r0, #1
 8019dae:	d09b      	beq.n	8019ce8 <_printf_i+0x164>
 8019db0:	3501      	adds	r5, #1
 8019db2:	68e3      	ldr	r3, [r4, #12]
 8019db4:	9903      	ldr	r1, [sp, #12]
 8019db6:	1a5b      	subs	r3, r3, r1
 8019db8:	42ab      	cmp	r3, r5
 8019dba:	dcf2      	bgt.n	8019da2 <_printf_i+0x21e>
 8019dbc:	e7eb      	b.n	8019d96 <_printf_i+0x212>
 8019dbe:	2500      	movs	r5, #0
 8019dc0:	f104 0619 	add.w	r6, r4, #25
 8019dc4:	e7f5      	b.n	8019db2 <_printf_i+0x22e>
 8019dc6:	bf00      	nop
 8019dc8:	0801c085 	.word	0x0801c085
 8019dcc:	0801c096 	.word	0x0801c096

08019dd0 <__sread>:
 8019dd0:	b510      	push	{r4, lr}
 8019dd2:	460c      	mov	r4, r1
 8019dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019dd8:	f000 f894 	bl	8019f04 <_read_r>
 8019ddc:	2800      	cmp	r0, #0
 8019dde:	bfab      	itete	ge
 8019de0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019de2:	89a3      	ldrhlt	r3, [r4, #12]
 8019de4:	181b      	addge	r3, r3, r0
 8019de6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019dea:	bfac      	ite	ge
 8019dec:	6563      	strge	r3, [r4, #84]	; 0x54
 8019dee:	81a3      	strhlt	r3, [r4, #12]
 8019df0:	bd10      	pop	{r4, pc}

08019df2 <__swrite>:
 8019df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019df6:	461f      	mov	r7, r3
 8019df8:	898b      	ldrh	r3, [r1, #12]
 8019dfa:	05db      	lsls	r3, r3, #23
 8019dfc:	4605      	mov	r5, r0
 8019dfe:	460c      	mov	r4, r1
 8019e00:	4616      	mov	r6, r2
 8019e02:	d505      	bpl.n	8019e10 <__swrite+0x1e>
 8019e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e08:	2302      	movs	r3, #2
 8019e0a:	2200      	movs	r2, #0
 8019e0c:	f000 f868 	bl	8019ee0 <_lseek_r>
 8019e10:	89a3      	ldrh	r3, [r4, #12]
 8019e12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019e16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019e1a:	81a3      	strh	r3, [r4, #12]
 8019e1c:	4632      	mov	r2, r6
 8019e1e:	463b      	mov	r3, r7
 8019e20:	4628      	mov	r0, r5
 8019e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019e26:	f000 b817 	b.w	8019e58 <_write_r>

08019e2a <__sseek>:
 8019e2a:	b510      	push	{r4, lr}
 8019e2c:	460c      	mov	r4, r1
 8019e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e32:	f000 f855 	bl	8019ee0 <_lseek_r>
 8019e36:	1c43      	adds	r3, r0, #1
 8019e38:	89a3      	ldrh	r3, [r4, #12]
 8019e3a:	bf15      	itete	ne
 8019e3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8019e3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019e42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019e46:	81a3      	strheq	r3, [r4, #12]
 8019e48:	bf18      	it	ne
 8019e4a:	81a3      	strhne	r3, [r4, #12]
 8019e4c:	bd10      	pop	{r4, pc}

08019e4e <__sclose>:
 8019e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019e52:	f000 b813 	b.w	8019e7c <_close_r>
	...

08019e58 <_write_r>:
 8019e58:	b538      	push	{r3, r4, r5, lr}
 8019e5a:	4d07      	ldr	r5, [pc, #28]	; (8019e78 <_write_r+0x20>)
 8019e5c:	4604      	mov	r4, r0
 8019e5e:	4608      	mov	r0, r1
 8019e60:	4611      	mov	r1, r2
 8019e62:	2200      	movs	r2, #0
 8019e64:	602a      	str	r2, [r5, #0]
 8019e66:	461a      	mov	r2, r3
 8019e68:	f7e8 fb0f 	bl	800248a <_write>
 8019e6c:	1c43      	adds	r3, r0, #1
 8019e6e:	d102      	bne.n	8019e76 <_write_r+0x1e>
 8019e70:	682b      	ldr	r3, [r5, #0]
 8019e72:	b103      	cbz	r3, 8019e76 <_write_r+0x1e>
 8019e74:	6023      	str	r3, [r4, #0]
 8019e76:	bd38      	pop	{r3, r4, r5, pc}
 8019e78:	20002fcc 	.word	0x20002fcc

08019e7c <_close_r>:
 8019e7c:	b538      	push	{r3, r4, r5, lr}
 8019e7e:	4d06      	ldr	r5, [pc, #24]	; (8019e98 <_close_r+0x1c>)
 8019e80:	2300      	movs	r3, #0
 8019e82:	4604      	mov	r4, r0
 8019e84:	4608      	mov	r0, r1
 8019e86:	602b      	str	r3, [r5, #0]
 8019e88:	f7e8 fb1b 	bl	80024c2 <_close>
 8019e8c:	1c43      	adds	r3, r0, #1
 8019e8e:	d102      	bne.n	8019e96 <_close_r+0x1a>
 8019e90:	682b      	ldr	r3, [r5, #0]
 8019e92:	b103      	cbz	r3, 8019e96 <_close_r+0x1a>
 8019e94:	6023      	str	r3, [r4, #0]
 8019e96:	bd38      	pop	{r3, r4, r5, pc}
 8019e98:	20002fcc 	.word	0x20002fcc

08019e9c <_fstat_r>:
 8019e9c:	b538      	push	{r3, r4, r5, lr}
 8019e9e:	4d07      	ldr	r5, [pc, #28]	; (8019ebc <_fstat_r+0x20>)
 8019ea0:	2300      	movs	r3, #0
 8019ea2:	4604      	mov	r4, r0
 8019ea4:	4608      	mov	r0, r1
 8019ea6:	4611      	mov	r1, r2
 8019ea8:	602b      	str	r3, [r5, #0]
 8019eaa:	f7e8 fb16 	bl	80024da <_fstat>
 8019eae:	1c43      	adds	r3, r0, #1
 8019eb0:	d102      	bne.n	8019eb8 <_fstat_r+0x1c>
 8019eb2:	682b      	ldr	r3, [r5, #0]
 8019eb4:	b103      	cbz	r3, 8019eb8 <_fstat_r+0x1c>
 8019eb6:	6023      	str	r3, [r4, #0]
 8019eb8:	bd38      	pop	{r3, r4, r5, pc}
 8019eba:	bf00      	nop
 8019ebc:	20002fcc 	.word	0x20002fcc

08019ec0 <_isatty_r>:
 8019ec0:	b538      	push	{r3, r4, r5, lr}
 8019ec2:	4d06      	ldr	r5, [pc, #24]	; (8019edc <_isatty_r+0x1c>)
 8019ec4:	2300      	movs	r3, #0
 8019ec6:	4604      	mov	r4, r0
 8019ec8:	4608      	mov	r0, r1
 8019eca:	602b      	str	r3, [r5, #0]
 8019ecc:	f7e8 fb15 	bl	80024fa <_isatty>
 8019ed0:	1c43      	adds	r3, r0, #1
 8019ed2:	d102      	bne.n	8019eda <_isatty_r+0x1a>
 8019ed4:	682b      	ldr	r3, [r5, #0]
 8019ed6:	b103      	cbz	r3, 8019eda <_isatty_r+0x1a>
 8019ed8:	6023      	str	r3, [r4, #0]
 8019eda:	bd38      	pop	{r3, r4, r5, pc}
 8019edc:	20002fcc 	.word	0x20002fcc

08019ee0 <_lseek_r>:
 8019ee0:	b538      	push	{r3, r4, r5, lr}
 8019ee2:	4d07      	ldr	r5, [pc, #28]	; (8019f00 <_lseek_r+0x20>)
 8019ee4:	4604      	mov	r4, r0
 8019ee6:	4608      	mov	r0, r1
 8019ee8:	4611      	mov	r1, r2
 8019eea:	2200      	movs	r2, #0
 8019eec:	602a      	str	r2, [r5, #0]
 8019eee:	461a      	mov	r2, r3
 8019ef0:	f7e8 fb0e 	bl	8002510 <_lseek>
 8019ef4:	1c43      	adds	r3, r0, #1
 8019ef6:	d102      	bne.n	8019efe <_lseek_r+0x1e>
 8019ef8:	682b      	ldr	r3, [r5, #0]
 8019efa:	b103      	cbz	r3, 8019efe <_lseek_r+0x1e>
 8019efc:	6023      	str	r3, [r4, #0]
 8019efe:	bd38      	pop	{r3, r4, r5, pc}
 8019f00:	20002fcc 	.word	0x20002fcc

08019f04 <_read_r>:
 8019f04:	b538      	push	{r3, r4, r5, lr}
 8019f06:	4d07      	ldr	r5, [pc, #28]	; (8019f24 <_read_r+0x20>)
 8019f08:	4604      	mov	r4, r0
 8019f0a:	4608      	mov	r0, r1
 8019f0c:	4611      	mov	r1, r2
 8019f0e:	2200      	movs	r2, #0
 8019f10:	602a      	str	r2, [r5, #0]
 8019f12:	461a      	mov	r2, r3
 8019f14:	f7e8 fa9c 	bl	8002450 <_read>
 8019f18:	1c43      	adds	r3, r0, #1
 8019f1a:	d102      	bne.n	8019f22 <_read_r+0x1e>
 8019f1c:	682b      	ldr	r3, [r5, #0]
 8019f1e:	b103      	cbz	r3, 8019f22 <_read_r+0x1e>
 8019f20:	6023      	str	r3, [r4, #0]
 8019f22:	bd38      	pop	{r3, r4, r5, pc}
 8019f24:	20002fcc 	.word	0x20002fcc

08019f28 <_init>:
 8019f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f2a:	bf00      	nop
 8019f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019f2e:	bc08      	pop	{r3}
 8019f30:	469e      	mov	lr, r3
 8019f32:	4770      	bx	lr

08019f34 <_fini>:
 8019f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f36:	bf00      	nop
 8019f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019f3a:	bc08      	pop	{r3}
 8019f3c:	469e      	mov	lr, r3
 8019f3e:	4770      	bx	lr
