
AccioRange_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ad70  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020c0  0801af20  0801af20  0002af20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cfe0  0801cfe0  00030740  2**0
                  CONTENTS
  4 .ARM          00000008  0801cfe0  0801cfe0  0002cfe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cfe8  0801cfe8  00030740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cfe8  0801cfe8  0002cfe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cfec  0801cfec  0002cfec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000740  20000000  0801cff0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002718  20000740  0801d730  00030740  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e58  0801d730  00032e58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030740  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046dfc  00000000  00000000  00030770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008ba4  00000000  00000000  0007756c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000038f8  00000000  00000000  00080110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003548  00000000  00000000  00083a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003af45  00000000  00000000  00086f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046d49  00000000  00000000  000c1e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013fdbe  00000000  00000000  00108bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0024899c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000fb20  00000000  00000000  002489ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000740 	.word	0x20000740
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801af08 	.word	0x0801af08

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000744 	.word	0x20000744
 80001ec:	0801af08 	.word	0x0801af08

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ae0:	f000 b974 	b.w	8000dcc <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	4604      	mov	r4, r0
 8000b04:	468e      	mov	lr, r1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d14d      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b0a:	428a      	cmp	r2, r1
 8000b0c:	4694      	mov	ip, r2
 8000b0e:	d969      	bls.n	8000be4 <__udivmoddi4+0xe8>
 8000b10:	fab2 f282 	clz	r2, r2
 8000b14:	b152      	cbz	r2, 8000b2c <__udivmoddi4+0x30>
 8000b16:	fa01 f302 	lsl.w	r3, r1, r2
 8000b1a:	f1c2 0120 	rsb	r1, r2, #32
 8000b1e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b22:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b26:	ea41 0e03 	orr.w	lr, r1, r3
 8000b2a:	4094      	lsls	r4, r2
 8000b2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b30:	0c21      	lsrs	r1, r4, #16
 8000b32:	fbbe f6f8 	udiv	r6, lr, r8
 8000b36:	fa1f f78c 	uxth.w	r7, ip
 8000b3a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b42:	fb06 f107 	mul.w	r1, r6, r7
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b52:	f080 811f 	bcs.w	8000d94 <__udivmoddi4+0x298>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 811c 	bls.w	8000d94 <__udivmoddi4+0x298>
 8000b5c:	3e02      	subs	r6, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a5b      	subs	r3, r3, r1
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b68:	fb08 3310 	mls	r3, r8, r0, r3
 8000b6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b70:	fb00 f707 	mul.w	r7, r0, r7
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x92>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b80:	f080 810a 	bcs.w	8000d98 <__udivmoddi4+0x29c>
 8000b84:	42a7      	cmp	r7, r4
 8000b86:	f240 8107 	bls.w	8000d98 <__udivmoddi4+0x29c>
 8000b8a:	4464      	add	r4, ip
 8000b8c:	3802      	subs	r0, #2
 8000b8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b92:	1be4      	subs	r4, r4, r7
 8000b94:	2600      	movs	r6, #0
 8000b96:	b11d      	cbz	r5, 8000ba0 <__udivmoddi4+0xa4>
 8000b98:	40d4      	lsrs	r4, r2
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e9c5 4300 	strd	r4, r3, [r5]
 8000ba0:	4631      	mov	r1, r6
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d909      	bls.n	8000bbe <__udivmoddi4+0xc2>
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	f000 80ef 	beq.w	8000d8e <__udivmoddi4+0x292>
 8000bb0:	2600      	movs	r6, #0
 8000bb2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb6:	4630      	mov	r0, r6
 8000bb8:	4631      	mov	r1, r6
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	fab3 f683 	clz	r6, r3
 8000bc2:	2e00      	cmp	r6, #0
 8000bc4:	d14a      	bne.n	8000c5c <__udivmoddi4+0x160>
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d302      	bcc.n	8000bd0 <__udivmoddi4+0xd4>
 8000bca:	4282      	cmp	r2, r0
 8000bcc:	f200 80f9 	bhi.w	8000dc2 <__udivmoddi4+0x2c6>
 8000bd0:	1a84      	subs	r4, r0, r2
 8000bd2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	469e      	mov	lr, r3
 8000bda:	2d00      	cmp	r5, #0
 8000bdc:	d0e0      	beq.n	8000ba0 <__udivmoddi4+0xa4>
 8000bde:	e9c5 4e00 	strd	r4, lr, [r5]
 8000be2:	e7dd      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000be4:	b902      	cbnz	r2, 8000be8 <__udivmoddi4+0xec>
 8000be6:	deff      	udf	#255	; 0xff
 8000be8:	fab2 f282 	clz	r2, r2
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	f040 8092 	bne.w	8000d16 <__udivmoddi4+0x21a>
 8000bf2:	eba1 010c 	sub.w	r1, r1, ip
 8000bf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bfa:	fa1f fe8c 	uxth.w	lr, ip
 8000bfe:	2601      	movs	r6, #1
 8000c00:	0c20      	lsrs	r0, r4, #16
 8000c02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c06:	fb07 1113 	mls	r1, r7, r3, r1
 8000c0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c0e:	fb0e f003 	mul.w	r0, lr, r3
 8000c12:	4288      	cmp	r0, r1
 8000c14:	d908      	bls.n	8000c28 <__udivmoddi4+0x12c>
 8000c16:	eb1c 0101 	adds.w	r1, ip, r1
 8000c1a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c1e:	d202      	bcs.n	8000c26 <__udivmoddi4+0x12a>
 8000c20:	4288      	cmp	r0, r1
 8000c22:	f200 80cb 	bhi.w	8000dbc <__udivmoddi4+0x2c0>
 8000c26:	4643      	mov	r3, r8
 8000c28:	1a09      	subs	r1, r1, r0
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c30:	fb07 1110 	mls	r1, r7, r0, r1
 8000c34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c38:	fb0e fe00 	mul.w	lr, lr, r0
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d908      	bls.n	8000c52 <__udivmoddi4+0x156>
 8000c40:	eb1c 0404 	adds.w	r4, ip, r4
 8000c44:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c48:	d202      	bcs.n	8000c50 <__udivmoddi4+0x154>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f200 80bb 	bhi.w	8000dc6 <__udivmoddi4+0x2ca>
 8000c50:	4608      	mov	r0, r1
 8000c52:	eba4 040e 	sub.w	r4, r4, lr
 8000c56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c5a:	e79c      	b.n	8000b96 <__udivmoddi4+0x9a>
 8000c5c:	f1c6 0720 	rsb	r7, r6, #32
 8000c60:	40b3      	lsls	r3, r6
 8000c62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c72:	431c      	orrs	r4, r3
 8000c74:	40f9      	lsrs	r1, r7
 8000c76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c82:	0c20      	lsrs	r0, r4, #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fb09 1118 	mls	r1, r9, r8, r1
 8000c8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c90:	fb08 f00e 	mul.w	r0, r8, lr
 8000c94:	4288      	cmp	r0, r1
 8000c96:	fa02 f206 	lsl.w	r2, r2, r6
 8000c9a:	d90b      	bls.n	8000cb4 <__udivmoddi4+0x1b8>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ca4:	f080 8088 	bcs.w	8000db8 <__udivmoddi4+0x2bc>
 8000ca8:	4288      	cmp	r0, r1
 8000caa:	f240 8085 	bls.w	8000db8 <__udivmoddi4+0x2bc>
 8000cae:	f1a8 0802 	sub.w	r8, r8, #2
 8000cb2:	4461      	add	r1, ip
 8000cb4:	1a09      	subs	r1, r1, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cbc:	fb09 1110 	mls	r1, r9, r0, r1
 8000cc0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cc4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cc8:	458e      	cmp	lr, r1
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x1e2>
 8000ccc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000cd4:	d26c      	bcs.n	8000db0 <__udivmoddi4+0x2b4>
 8000cd6:	458e      	cmp	lr, r1
 8000cd8:	d96a      	bls.n	8000db0 <__udivmoddi4+0x2b4>
 8000cda:	3802      	subs	r0, #2
 8000cdc:	4461      	add	r1, ip
 8000cde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ce2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ce6:	eba1 010e 	sub.w	r1, r1, lr
 8000cea:	42a1      	cmp	r1, r4
 8000cec:	46c8      	mov	r8, r9
 8000cee:	46a6      	mov	lr, r4
 8000cf0:	d356      	bcc.n	8000da0 <__udivmoddi4+0x2a4>
 8000cf2:	d053      	beq.n	8000d9c <__udivmoddi4+0x2a0>
 8000cf4:	b15d      	cbz	r5, 8000d0e <__udivmoddi4+0x212>
 8000cf6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cfa:	eb61 010e 	sbc.w	r1, r1, lr
 8000cfe:	fa01 f707 	lsl.w	r7, r1, r7
 8000d02:	fa22 f306 	lsr.w	r3, r2, r6
 8000d06:	40f1      	lsrs	r1, r6
 8000d08:	431f      	orrs	r7, r3
 8000d0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d0e:	2600      	movs	r6, #0
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	f1c2 0320 	rsb	r3, r2, #32
 8000d1a:	40d8      	lsrs	r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	fa21 f303 	lsr.w	r3, r1, r3
 8000d24:	4091      	lsls	r1, r2
 8000d26:	4301      	orrs	r1, r0
 8000d28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d34:	fb07 3610 	mls	r6, r7, r0, r3
 8000d38:	0c0b      	lsrs	r3, r1, #16
 8000d3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d42:	429e      	cmp	r6, r3
 8000d44:	fa04 f402 	lsl.w	r4, r4, r2
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x260>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d52:	d22f      	bcs.n	8000db4 <__udivmoddi4+0x2b8>
 8000d54:	429e      	cmp	r6, r3
 8000d56:	d92d      	bls.n	8000db4 <__udivmoddi4+0x2b8>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	b289      	uxth	r1, r1
 8000d60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d64:	fb07 3316 	mls	r3, r7, r6, r3
 8000d68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x28a>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d7c:	d216      	bcs.n	8000dac <__udivmoddi4+0x2b0>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d914      	bls.n	8000dac <__udivmoddi4+0x2b0>
 8000d82:	3e02      	subs	r6, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	1ac9      	subs	r1, r1, r3
 8000d88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d8c:	e738      	b.n	8000c00 <__udivmoddi4+0x104>
 8000d8e:	462e      	mov	r6, r5
 8000d90:	4628      	mov	r0, r5
 8000d92:	e705      	b.n	8000ba0 <__udivmoddi4+0xa4>
 8000d94:	4606      	mov	r6, r0
 8000d96:	e6e3      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d98:	4618      	mov	r0, r3
 8000d9a:	e6f8      	b.n	8000b8e <__udivmoddi4+0x92>
 8000d9c:	454b      	cmp	r3, r9
 8000d9e:	d2a9      	bcs.n	8000cf4 <__udivmoddi4+0x1f8>
 8000da0:	ebb9 0802 	subs.w	r8, r9, r2
 8000da4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000da8:	3801      	subs	r0, #1
 8000daa:	e7a3      	b.n	8000cf4 <__udivmoddi4+0x1f8>
 8000dac:	4646      	mov	r6, r8
 8000dae:	e7ea      	b.n	8000d86 <__udivmoddi4+0x28a>
 8000db0:	4620      	mov	r0, r4
 8000db2:	e794      	b.n	8000cde <__udivmoddi4+0x1e2>
 8000db4:	4640      	mov	r0, r8
 8000db6:	e7d1      	b.n	8000d5c <__udivmoddi4+0x260>
 8000db8:	46d0      	mov	r8, sl
 8000dba:	e77b      	b.n	8000cb4 <__udivmoddi4+0x1b8>
 8000dbc:	3b02      	subs	r3, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	e732      	b.n	8000c28 <__udivmoddi4+0x12c>
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	e709      	b.n	8000bda <__udivmoddi4+0xde>
 8000dc6:	4464      	add	r4, ip
 8000dc8:	3802      	subs	r0, #2
 8000dca:	e742      	b.n	8000c52 <__udivmoddi4+0x156>

08000dcc <__aeabi_idiv0>:
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000df2:	4b2f      	ldr	r3, [pc, #188]	; (8000eb0 <MX_ADC1_Init+0xe0>)
 8000df4:	4a2f      	ldr	r2, [pc, #188]	; (8000eb4 <MX_ADC1_Init+0xe4>)
 8000df6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000df8:	4b2d      	ldr	r3, [pc, #180]	; (8000eb0 <MX_ADC1_Init+0xe0>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8000dfe:	4b2c      	ldr	r3, [pc, #176]	; (8000eb0 <MX_ADC1_Init+0xe0>)
 8000e00:	2208      	movs	r2, #8
 8000e02:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e04:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <MX_ADC1_Init+0xe0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e0a:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <MX_ADC1_Init+0xe0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e10:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <MX_ADC1_Init+0xe0>)
 8000e12:	2204      	movs	r2, #4
 8000e14:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e16:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <MX_ADC1_Init+0xe0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e1c:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <MX_ADC1_Init+0xe0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e22:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <MX_ADC1_Init+0xe0>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e28:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <MX_ADC1_Init+0xe0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e30:	4b1f      	ldr	r3, [pc, #124]	; (8000eb0 <MX_ADC1_Init+0xe0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e36:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <MX_ADC1_Init+0xe0>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e3c:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <MX_ADC1_Init+0xe0>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e44:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <MX_ADC1_Init+0xe0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e4a:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <MX_ADC1_Init+0xe0>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e52:	4817      	ldr	r0, [pc, #92]	; (8000eb0 <MX_ADC1_Init+0xe0>)
 8000e54:	f00b f8ec 	bl	800c030 <HAL_ADC_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000e5e:	f001 fd3f 	bl	80028e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4810      	ldr	r0, [pc, #64]	; (8000eb0 <MX_ADC1_Init+0xe0>)
 8000e6e:	f00c f891 	bl	800cf94 <HAL_ADCEx_MultiModeConfigChannel>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000e78:	f001 fd32 	bl	80028e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_ADC1_Init+0xe8>)
 8000e7e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e80:	2306      	movs	r3, #6
 8000e82:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e88:	237f      	movs	r3, #127	; 0x7f
 8000e8a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e94:	1d3b      	adds	r3, r7, #4
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_ADC1_Init+0xe0>)
 8000e9a:	f00b fbc3 	bl	800c624 <HAL_ADC_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000ea4:	f001 fd1c 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	3728      	adds	r7, #40	; 0x28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	2000075c 	.word	0x2000075c
 8000eb4:	50040000 	.word	0x50040000
 8000eb8:	36902000 	.word	0x36902000

08000ebc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
 8000ed0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ed2:	4b29      	ldr	r3, [pc, #164]	; (8000f78 <MX_ADC2_Init+0xbc>)
 8000ed4:	4a29      	ldr	r2, [pc, #164]	; (8000f7c <MX_ADC2_Init+0xc0>)
 8000ed6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ed8:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <MX_ADC2_Init+0xbc>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000ede:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <MX_ADC2_Init+0xbc>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee4:	4b24      	ldr	r3, [pc, #144]	; (8000f78 <MX_ADC2_Init+0xbc>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eea:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <MX_ADC2_Init+0xbc>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef0:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <MX_ADC2_Init+0xbc>)
 8000ef2:	2204      	movs	r2, #4
 8000ef4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <MX_ADC2_Init+0xbc>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000efc:	4b1e      	ldr	r3, [pc, #120]	; (8000f78 <MX_ADC2_Init+0xbc>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000f02:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <MX_ADC2_Init+0xbc>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <MX_ADC2_Init+0xbc>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f10:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <MX_ADC2_Init+0xbc>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <MX_ADC2_Init+0xbc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f1c:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <MX_ADC2_Init+0xbc>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_ADC2_Init+0xbc>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <MX_ADC2_Init+0xbc>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f32:	4811      	ldr	r0, [pc, #68]	; (8000f78 <MX_ADC2_Init+0xbc>)
 8000f34:	f00b f87c 	bl	800c030 <HAL_ADC_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000f3e:	f001 fccf 	bl	80028e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <MX_ADC2_Init+0xc4>)
 8000f44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f46:	2306      	movs	r3, #6
 8000f48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f4e:	237f      	movs	r3, #127	; 0x7f
 8000f50:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f52:	2304      	movs	r3, #4
 8000f54:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4806      	ldr	r0, [pc, #24]	; (8000f78 <MX_ADC2_Init+0xbc>)
 8000f60:	f00b fb60 	bl	800c624 <HAL_ADC_ConfigChannel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000f6a:	f001 fcb9 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200007c4 	.word	0x200007c4
 8000f7c:	50040100 	.word	0x50040100
 8000f80:	25b00200 	.word	0x25b00200

08000f84 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
 8000f98:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <MX_ADC3_Init+0xbc>)
 8000f9c:	4a29      	ldr	r2, [pc, #164]	; (8001044 <MX_ADC3_Init+0xc0>)
 8000f9e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fa0:	4b27      	ldr	r3, [pc, #156]	; (8001040 <MX_ADC3_Init+0xbc>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <MX_ADC3_Init+0xbc>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fac:	4b24      	ldr	r3, [pc, #144]	; (8001040 <MX_ADC3_Init+0xbc>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fb2:	4b23      	ldr	r3, [pc, #140]	; (8001040 <MX_ADC3_Init+0xbc>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb8:	4b21      	ldr	r3, [pc, #132]	; (8001040 <MX_ADC3_Init+0xbc>)
 8000fba:	2204      	movs	r2, #4
 8000fbc:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000fbe:	4b20      	ldr	r3, [pc, #128]	; (8001040 <MX_ADC3_Init+0xbc>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <MX_ADC3_Init+0xbc>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000fca:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <MX_ADC3_Init+0xbc>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <MX_ADC3_Init+0xbc>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <MX_ADC3_Init+0xbc>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <MX_ADC3_Init+0xbc>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000fe4:	4b16      	ldr	r3, [pc, #88]	; (8001040 <MX_ADC3_Init+0xbc>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <MX_ADC3_Init+0xbc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000ff2:	4b13      	ldr	r3, [pc, #76]	; (8001040 <MX_ADC3_Init+0xbc>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ffa:	4811      	ldr	r0, [pc, #68]	; (8001040 <MX_ADC3_Init+0xbc>)
 8000ffc:	f00b f818 	bl	800c030 <HAL_ADC_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8001006:	f001 fc6b 	bl	80028e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800100a:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <MX_ADC3_Init+0xc4>)
 800100c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800100e:	2306      	movs	r3, #6
 8001010:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001016:	237f      	movs	r3, #127	; 0x7f
 8001018:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800101a:	2304      	movs	r3, #4
 800101c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	4619      	mov	r1, r3
 8001026:	4806      	ldr	r0, [pc, #24]	; (8001040 <MX_ADC3_Init+0xbc>)
 8001028:	f00b fafc 	bl	800c624 <HAL_ADC_ConfigChannel>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001032:	f001 fc55 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000082c 	.word	0x2000082c
 8001044:	50040200 	.word	0x50040200
 8001048:	36902000 	.word	0x36902000

0800104c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	; 0x38
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a59      	ldr	r2, [pc, #356]	; (80011d0 <HAL_ADC_MspInit+0x184>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d12d      	bne.n	80010ca <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800106e:	4b59      	ldr	r3, [pc, #356]	; (80011d4 <HAL_ADC_MspInit+0x188>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	4a57      	ldr	r2, [pc, #348]	; (80011d4 <HAL_ADC_MspInit+0x188>)
 8001076:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001078:	4b56      	ldr	r3, [pc, #344]	; (80011d4 <HAL_ADC_MspInit+0x188>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d10b      	bne.n	8001098 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001080:	4b55      	ldr	r3, [pc, #340]	; (80011d8 <HAL_ADC_MspInit+0x18c>)
 8001082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001084:	4a54      	ldr	r2, [pc, #336]	; (80011d8 <HAL_ADC_MspInit+0x18c>)
 8001086:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800108a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108c:	4b52      	ldr	r3, [pc, #328]	; (80011d8 <HAL_ADC_MspInit+0x18c>)
 800108e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001090:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001094:	623b      	str	r3, [r7, #32]
 8001096:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001098:	4b4f      	ldr	r3, [pc, #316]	; (80011d8 <HAL_ADC_MspInit+0x18c>)
 800109a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109c:	4a4e      	ldr	r2, [pc, #312]	; (80011d8 <HAL_ADC_MspInit+0x18c>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a4:	4b4c      	ldr	r3, [pc, #304]	; (80011d8 <HAL_ADC_MspInit+0x18c>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	61fb      	str	r3, [r7, #28]
 80010ae:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 80010b0:	2318      	movs	r3, #24
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010b4:	230b      	movs	r3, #11
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	4846      	ldr	r0, [pc, #280]	; (80011dc <HAL_ADC_MspInit+0x190>)
 80010c4:	f00c faec 	bl	800d6a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80010c8:	e07e      	b.n	80011c8 <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC2)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a44      	ldr	r2, [pc, #272]	; (80011e0 <HAL_ADC_MspInit+0x194>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d146      	bne.n	8001162 <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC_CLK_ENABLED++;
 80010d4:	4b3f      	ldr	r3, [pc, #252]	; (80011d4 <HAL_ADC_MspInit+0x188>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3301      	adds	r3, #1
 80010da:	4a3e      	ldr	r2, [pc, #248]	; (80011d4 <HAL_ADC_MspInit+0x188>)
 80010dc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80010de:	4b3d      	ldr	r3, [pc, #244]	; (80011d4 <HAL_ADC_MspInit+0x188>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d10b      	bne.n	80010fe <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80010e6:	4b3c      	ldr	r3, [pc, #240]	; (80011d8 <HAL_ADC_MspInit+0x18c>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	4a3b      	ldr	r2, [pc, #236]	; (80011d8 <HAL_ADC_MspInit+0x18c>)
 80010ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f2:	4b39      	ldr	r3, [pc, #228]	; (80011d8 <HAL_ADC_MspInit+0x18c>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010fe:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <HAL_ADC_MspInit+0x18c>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001102:	4a35      	ldr	r2, [pc, #212]	; (80011d8 <HAL_ADC_MspInit+0x18c>)
 8001104:	f043 0304 	orr.w	r3, r3, #4
 8001108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110a:	4b33      	ldr	r3, [pc, #204]	; (80011d8 <HAL_ADC_MspInit+0x18c>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110e:	f003 0304 	and.w	r3, r3, #4
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <HAL_ADC_MspInit+0x18c>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	4a2f      	ldr	r2, [pc, #188]	; (80011d8 <HAL_ADC_MspInit+0x18c>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001122:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_ADC_MspInit+0x18c>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 800112e:	2303      	movs	r3, #3
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001132:	230b      	movs	r3, #11
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113e:	4619      	mov	r1, r3
 8001140:	4826      	ldr	r0, [pc, #152]	; (80011dc <HAL_ADC_MspInit+0x190>)
 8001142:	f00c faad 	bl	800d6a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 8001146:	2312      	movs	r3, #18
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800114a:	230b      	movs	r3, #11
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001156:	4619      	mov	r1, r3
 8001158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115c:	f00c faa0 	bl	800d6a0 <HAL_GPIO_Init>
}
 8001160:	e032      	b.n	80011c8 <HAL_ADC_MspInit+0x17c>
  else if(adcHandle->Instance==ADC3)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a1f      	ldr	r2, [pc, #124]	; (80011e4 <HAL_ADC_MspInit+0x198>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d12d      	bne.n	80011c8 <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC_CLK_ENABLED++;
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_ADC_MspInit+0x188>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	3301      	adds	r3, #1
 8001172:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <HAL_ADC_MspInit+0x188>)
 8001174:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <HAL_ADC_MspInit+0x188>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d10b      	bne.n	8001196 <HAL_ADC_MspInit+0x14a>
      __HAL_RCC_ADC_CLK_ENABLE();
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <HAL_ADC_MspInit+0x18c>)
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001182:	4a15      	ldr	r2, [pc, #84]	; (80011d8 <HAL_ADC_MspInit+0x18c>)
 8001184:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001188:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <HAL_ADC_MspInit+0x18c>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <HAL_ADC_MspInit+0x18c>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <HAL_ADC_MspInit+0x18c>)
 800119c:	f043 0320 	orr.w	r3, r3, #32
 80011a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <HAL_ADC_MspInit+0x18c>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	f003 0320 	and.w	r3, r3, #32
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 80011ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011b4:	230b      	movs	r3, #11
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c0:	4619      	mov	r1, r3
 80011c2:	4809      	ldr	r0, [pc, #36]	; (80011e8 <HAL_ADC_MspInit+0x19c>)
 80011c4:	f00c fa6c 	bl	800d6a0 <HAL_GPIO_Init>
}
 80011c8:	bf00      	nop
 80011ca:	3738      	adds	r7, #56	; 0x38
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	50040000 	.word	0x50040000
 80011d4:	20000894 	.word	0x20000894
 80011d8:	40021000 	.word	0x40021000
 80011dc:	48000800 	.word	0x48000800
 80011e0:	50040100 	.word	0x50040100
 80011e4:	50040200 	.word	0x50040200
 80011e8:	48001400 	.word	0x48001400

080011ec <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <MX_DCMI_Init+0x60>)
 80011f2:	4a17      	ldr	r2, [pc, #92]	; (8001250 <MX_DCMI_Init+0x64>)
 80011f4:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <MX_DCMI_Init+0x60>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <MX_DCMI_Init+0x60>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <MX_DCMI_Init+0x60>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8001208:	4b10      	ldr	r3, [pc, #64]	; (800124c <MX_DCMI_Init+0x60>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800120e:	4b0f      	ldr	r3, [pc, #60]	; (800124c <MX_DCMI_Init+0x60>)
 8001210:	2200      	movs	r2, #0
 8001212:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8001214:	4b0d      	ldr	r3, [pc, #52]	; (800124c <MX_DCMI_Init+0x60>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_DCMI_Init+0x60>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <MX_DCMI_Init+0x60>)
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_DCMI_Init+0x60>)
 8001228:	2200      	movs	r2, #0
 800122a:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <MX_DCMI_Init+0x60>)
 800122e:	2200      	movs	r2, #0
 8001230:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <MX_DCMI_Init+0x60>)
 8001234:	2200      	movs	r2, #0
 8001236:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8001238:	4804      	ldr	r0, [pc, #16]	; (800124c <MX_DCMI_Init+0x60>)
 800123a:	f00c f89f 	bl	800d37c <HAL_DCMI_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8001244:	f001 fb4c 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000898 	.word	0x20000898
 8001250:	50050000 	.word	0x50050000

08001254 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	; 0x30
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a33      	ldr	r2, [pc, #204]	; (8001340 <HAL_DCMI_MspInit+0xec>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d160      	bne.n	8001338 <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001276:	4b33      	ldr	r3, [pc, #204]	; (8001344 <HAL_DCMI_MspInit+0xf0>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	4a32      	ldr	r2, [pc, #200]	; (8001344 <HAL_DCMI_MspInit+0xf0>)
 800127c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001282:	4b30      	ldr	r3, [pc, #192]	; (8001344 <HAL_DCMI_MspInit+0xf0>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800128e:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <HAL_DCMI_MspInit+0xf0>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	4a2c      	ldr	r2, [pc, #176]	; (8001344 <HAL_DCMI_MspInit+0xf0>)
 8001294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001298:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129a:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <HAL_DCMI_MspInit+0xf0>)
 800129c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80012a6:	4b27      	ldr	r3, [pc, #156]	; (8001344 <HAL_DCMI_MspInit+0xf0>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012aa:	4a26      	ldr	r2, [pc, #152]	; (8001344 <HAL_DCMI_MspInit+0xf0>)
 80012ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b2:	4b24      	ldr	r3, [pc, #144]	; (8001344 <HAL_DCMI_MspInit+0xf0>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80012be:	4b21      	ldr	r3, [pc, #132]	; (8001344 <HAL_DCMI_MspInit+0xf0>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	4a20      	ldr	r2, [pc, #128]	; (8001344 <HAL_DCMI_MspInit+0xf0>)
 80012c4:	f043 0310 	orr.w	r3, r3, #16
 80012c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ca:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <HAL_DCMI_MspInit+0xf0>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 80012d6:	f645 7320 	movw	r3, #24352	; 0x5f20
 80012da:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80012e8:	230a      	movs	r3, #10
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	4815      	ldr	r0, [pc, #84]	; (8001348 <HAL_DCMI_MspInit+0xf4>)
 80012f4:	f00c f9d4 	bl	800d6a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 80012f8:	23b0      	movs	r3, #176	; 0xb0
 80012fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001308:	230a      	movs	r3, #10
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	480e      	ldr	r0, [pc, #56]	; (800134c <HAL_DCMI_MspInit+0xf8>)
 8001314:	f00c f9c4 	bl	800d6a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8001318:	2320      	movs	r3, #32
 800131a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001328:	230a      	movs	r3, #10
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	4807      	ldr	r0, [pc, #28]	; (8001350 <HAL_DCMI_MspInit+0xfc>)
 8001334:	f00c f9b4 	bl	800d6a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8001338:	bf00      	nop
 800133a:	3730      	adds	r7, #48	; 0x30
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	50050000 	.word	0x50050000
 8001344:	40021000 	.word	0x40021000
 8001348:	48001c00 	.word	0x48001c00
 800134c:	48002000 	.word	0x48002000
 8001350:	48001000 	.word	0x48001000

08001354 <MX_DFSDM1_Init>:
DFSDM_Channel_HandleTypeDef hdfsdm1_channel1;
DFSDM_Channel_HandleTypeDef hdfsdm1_channel2;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001358:	4b30      	ldr	r3, [pc, #192]	; (800141c <MX_DFSDM1_Init+0xc8>)
 800135a:	4a31      	ldr	r2, [pc, #196]	; (8001420 <MX_DFSDM1_Init+0xcc>)
 800135c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800135e:	4b2f      	ldr	r3, [pc, #188]	; (800141c <MX_DFSDM1_Init+0xc8>)
 8001360:	2201      	movs	r2, #1
 8001362:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001364:	4b2d      	ldr	r3, [pc, #180]	; (800141c <MX_DFSDM1_Init+0xc8>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800136a:	4b2c      	ldr	r3, [pc, #176]	; (800141c <MX_DFSDM1_Init+0xc8>)
 800136c:	2202      	movs	r2, #2
 800136e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001370:	4b2a      	ldr	r3, [pc, #168]	; (800141c <MX_DFSDM1_Init+0xc8>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001376:	4b29      	ldr	r3, [pc, #164]	; (800141c <MX_DFSDM1_Init+0xc8>)
 8001378:	2200      	movs	r2, #0
 800137a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800137c:	4b27      	ldr	r3, [pc, #156]	; (800141c <MX_DFSDM1_Init+0xc8>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001382:	4b26      	ldr	r3, [pc, #152]	; (800141c <MX_DFSDM1_Init+0xc8>)
 8001384:	2200      	movs	r2, #0
 8001386:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001388:	4b24      	ldr	r3, [pc, #144]	; (800141c <MX_DFSDM1_Init+0xc8>)
 800138a:	2204      	movs	r2, #4
 800138c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800138e:	4b23      	ldr	r3, [pc, #140]	; (800141c <MX_DFSDM1_Init+0xc8>)
 8001390:	2200      	movs	r2, #0
 8001392:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001394:	4b21      	ldr	r3, [pc, #132]	; (800141c <MX_DFSDM1_Init+0xc8>)
 8001396:	2201      	movs	r2, #1
 8001398:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <MX_DFSDM1_Init+0xc8>)
 800139c:	2200      	movs	r2, #0
 800139e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80013a0:	4b1e      	ldr	r3, [pc, #120]	; (800141c <MX_DFSDM1_Init+0xc8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80013a6:	481d      	ldr	r0, [pc, #116]	; (800141c <MX_DFSDM1_Init+0xc8>)
 80013a8:	f00c f86e 	bl	800d488 <HAL_DFSDM_ChannelInit>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80013b2:	f001 fa95 	bl	80028e0 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80013b6:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <MX_DFSDM1_Init+0xd0>)
 80013b8:	4a1b      	ldr	r2, [pc, #108]	; (8001428 <MX_DFSDM1_Init+0xd4>)
 80013ba:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80013bc:	4b19      	ldr	r3, [pc, #100]	; (8001424 <MX_DFSDM1_Init+0xd0>)
 80013be:	2201      	movs	r2, #1
 80013c0:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <MX_DFSDM1_Init+0xd0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <MX_DFSDM1_Init+0xd0>)
 80013ca:	2202      	movs	r2, #2
 80013cc:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <MX_DFSDM1_Init+0xd0>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80013d4:	4b13      	ldr	r3, [pc, #76]	; (8001424 <MX_DFSDM1_Init+0xd0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <MX_DFSDM1_Init+0xd0>)
 80013dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013e0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <MX_DFSDM1_Init+0xd0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_DFSDM1_Init+0xd0>)
 80013ea:	2204      	movs	r2, #4
 80013ec:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80013ee:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <MX_DFSDM1_Init+0xd0>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80013f4:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_DFSDM1_Init+0xd0>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <MX_DFSDM1_Init+0xd0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <MX_DFSDM1_Init+0xd0>)
 8001402:	2200      	movs	r2, #0
 8001404:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8001406:	4807      	ldr	r0, [pc, #28]	; (8001424 <MX_DFSDM1_Init+0xd0>)
 8001408:	f00c f83e 	bl	800d488 <HAL_DFSDM_ChannelInit>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 8001412:	f001 fa65 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200008fc 	.word	0x200008fc
 8001420:	40016020 	.word	0x40016020
 8001424:	20000934 	.word	0x20000934
 8001428:	40016040 	.word	0x40016040

0800142c <HAL_DFSDM_ChannelMspInit>:

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b0ae      	sub	sp, #184	; 0xb8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001434:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]
 8001442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001444:	f107 0318 	add.w	r3, r7, #24
 8001448:	228c      	movs	r2, #140	; 0x8c
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f018 fd47 	bl	8019ee0 <memset>
  if(DFSDM1_Init == 0)
 8001452:	4b36      	ldr	r3, [pc, #216]	; (800152c <HAL_DFSDM_ChannelMspInit+0x100>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d163      	bne.n	8001522 <HAL_DFSDM_ChannelMspInit+0xf6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800145a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800145e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001460:	2300      	movs	r3, #0
 8001462:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001466:	f107 0318 	add.w	r3, r7, #24
 800146a:	4618      	mov	r0, r3
 800146c:	f00f ff58 	bl	8011320 <HAL_RCCEx_PeriphCLKConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001476:	f001 fa33 	bl	80028e0 <Error_Handler>
    }

    /* DFSDM1 clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800147a:	4b2d      	ldr	r3, [pc, #180]	; (8001530 <HAL_DFSDM_ChannelMspInit+0x104>)
 800147c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147e:	4a2c      	ldr	r2, [pc, #176]	; (8001530 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001480:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001484:	6613      	str	r3, [r2, #96]	; 0x60
 8001486:	4b2a      	ldr	r3, [pc, #168]	; (8001530 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800148a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001492:	4b27      	ldr	r3, [pc, #156]	; (8001530 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	4a26      	ldr	r2, [pc, #152]	; (8001530 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001498:	f043 0304 	orr.w	r3, r3, #4
 800149c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149e:	4b24      	ldr	r3, [pc, #144]	; (8001530 <HAL_DFSDM_ChannelMspInit+0x104>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	4b21      	ldr	r3, [pc, #132]	; (8001530 <HAL_DFSDM_ChannelMspInit+0x104>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	4a20      	ldr	r2, [pc, #128]	; (8001530 <HAL_DFSDM_ChannelMspInit+0x104>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b6:	4b1e      	ldr	r3, [pc, #120]	; (8001530 <HAL_DFSDM_ChannelMspInit+0x104>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 80014c2:	2384      	movs	r3, #132	; 0x84
 80014c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c8:	2302      	movs	r3, #2
 80014ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80014da:	2306      	movs	r3, #6
 80014dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014e4:	4619      	mov	r1, r3
 80014e6:	4813      	ldr	r0, [pc, #76]	; (8001534 <HAL_DFSDM_ChannelMspInit+0x108>)
 80014e8:	f00c f8da 	bl	800d6a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 80014ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001506:	2306      	movs	r3, #6
 8001508:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 800150c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001510:	4619      	mov	r1, r3
 8001512:	4809      	ldr	r0, [pc, #36]	; (8001538 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8001514:	f00c f8c4 	bl	800d6a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <HAL_DFSDM_ChannelMspInit+0x100>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	3301      	adds	r3, #1
 800151e:	4a03      	ldr	r2, [pc, #12]	; (800152c <HAL_DFSDM_ChannelMspInit+0x100>)
 8001520:	6013      	str	r3, [r2, #0]
  }
}
 8001522:	bf00      	nop
 8001524:	37b8      	adds	r7, #184	; 0xb8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	2000096c 	.word	0x2000096c
 8001530:	40021000 	.word	0x40021000
 8001534:	48000800 	.word	0x48000800
 8001538:	48000400 	.word	0x48000400

0800153c <MX_FMC_Init>:
SRAM_HandleTypeDef hsram1;
SRAM_HandleTypeDef hsram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001542:	463b      	mov	r3, r7
 8001544:	2220      	movs	r2, #32
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f018 fcc9 	bl	8019ee0 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 800154e:	4b4f      	ldr	r3, [pc, #316]	; (800168c <MX_FMC_Init+0x150>)
 8001550:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001554:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001556:	4b4d      	ldr	r3, [pc, #308]	; (800168c <MX_FMC_Init+0x150>)
 8001558:	4a4d      	ldr	r2, [pc, #308]	; (8001690 <MX_FMC_Init+0x154>)
 800155a:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 800155c:	4b4b      	ldr	r3, [pc, #300]	; (800168c <MX_FMC_Init+0x150>)
 800155e:	2202      	movs	r2, #2
 8001560:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001562:	4b4a      	ldr	r3, [pc, #296]	; (800168c <MX_FMC_Init+0x150>)
 8001564:	2200      	movs	r2, #0
 8001566:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001568:	4b48      	ldr	r3, [pc, #288]	; (800168c <MX_FMC_Init+0x150>)
 800156a:	2200      	movs	r2, #0
 800156c:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800156e:	4b47      	ldr	r3, [pc, #284]	; (800168c <MX_FMC_Init+0x150>)
 8001570:	2210      	movs	r2, #16
 8001572:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001574:	4b45      	ldr	r3, [pc, #276]	; (800168c <MX_FMC_Init+0x150>)
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800157a:	4b44      	ldr	r3, [pc, #272]	; (800168c <MX_FMC_Init+0x150>)
 800157c:	2200      	movs	r2, #0
 800157e:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001580:	4b42      	ldr	r3, [pc, #264]	; (800168c <MX_FMC_Init+0x150>)
 8001582:	2200      	movs	r2, #0
 8001584:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8001586:	4b41      	ldr	r3, [pc, #260]	; (800168c <MX_FMC_Init+0x150>)
 8001588:	2200      	movs	r2, #0
 800158a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800158c:	4b3f      	ldr	r3, [pc, #252]	; (800168c <MX_FMC_Init+0x150>)
 800158e:	2200      	movs	r2, #0
 8001590:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001592:	4b3e      	ldr	r3, [pc, #248]	; (800168c <MX_FMC_Init+0x150>)
 8001594:	2200      	movs	r2, #0
 8001596:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001598:	4b3c      	ldr	r3, [pc, #240]	; (800168c <MX_FMC_Init+0x150>)
 800159a:	2200      	movs	r2, #0
 800159c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800159e:	4b3b      	ldr	r3, [pc, #236]	; (800168c <MX_FMC_Init+0x150>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80015a4:	4b39      	ldr	r3, [pc, #228]	; (800168c <MX_FMC_Init+0x150>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80015aa:	4b38      	ldr	r3, [pc, #224]	; (800168c <MX_FMC_Init+0x150>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80015b0:	4b36      	ldr	r3, [pc, #216]	; (800168c <MX_FMC_Init+0x150>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80015b6:	230f      	movs	r3, #15
 80015b8:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80015ba:	230f      	movs	r3, #15
 80015bc:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 80015be:	23ff      	movs	r3, #255	; 0xff
 80015c0:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 80015c2:	230f      	movs	r3, #15
 80015c4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80015c6:	2310      	movs	r3, #16
 80015c8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80015ca:	2311      	movs	r3, #17
 80015cc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80015d2:	463b      	mov	r3, r7
 80015d4:	2200      	movs	r2, #0
 80015d6:	4619      	mov	r1, r3
 80015d8:	482c      	ldr	r0, [pc, #176]	; (800168c <MX_FMC_Init+0x150>)
 80015da:	f012 fa76 	bl	8013aca <HAL_SRAM_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 80015e4:	f001 f97c 	bl	80028e0 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 80015e8:	4b2a      	ldr	r3, [pc, #168]	; (8001694 <MX_FMC_Init+0x158>)
 80015ea:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80015ee:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80015f0:	4b28      	ldr	r3, [pc, #160]	; (8001694 <MX_FMC_Init+0x158>)
 80015f2:	4a27      	ldr	r2, [pc, #156]	; (8001690 <MX_FMC_Init+0x154>)
 80015f4:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 80015f6:	4b27      	ldr	r3, [pc, #156]	; (8001694 <MX_FMC_Init+0x158>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80015fc:	4b25      	ldr	r3, [pc, #148]	; (8001694 <MX_FMC_Init+0x158>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001602:	4b24      	ldr	r3, [pc, #144]	; (8001694 <MX_FMC_Init+0x158>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001608:	4b22      	ldr	r3, [pc, #136]	; (8001694 <MX_FMC_Init+0x158>)
 800160a:	2210      	movs	r2, #16
 800160c:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800160e:	4b21      	ldr	r3, [pc, #132]	; (8001694 <MX_FMC_Init+0x158>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001614:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <MX_FMC_Init+0x158>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800161a:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <MX_FMC_Init+0x158>)
 800161c:	2200      	movs	r2, #0
 800161e:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001620:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <MX_FMC_Init+0x158>)
 8001622:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001628:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <MX_FMC_Init+0x158>)
 800162a:	2200      	movs	r2, #0
 800162c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <MX_FMC_Init+0x158>)
 8001630:	2200      	movs	r2, #0
 8001632:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001634:	4b17      	ldr	r3, [pc, #92]	; (8001694 <MX_FMC_Init+0x158>)
 8001636:	2200      	movs	r2, #0
 8001638:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800163a:	4b16      	ldr	r3, [pc, #88]	; (8001694 <MX_FMC_Init+0x158>)
 800163c:	2200      	movs	r2, #0
 800163e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <MX_FMC_Init+0x158>)
 8001642:	2200      	movs	r2, #0
 8001644:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <MX_FMC_Init+0x158>)
 8001648:	2200      	movs	r2, #0
 800164a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800164c:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_FMC_Init+0x158>)
 800164e:	2200      	movs	r2, #0
 8001650:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001652:	230f      	movs	r3, #15
 8001654:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8001656:	230f      	movs	r3, #15
 8001658:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800165a:	23ff      	movs	r3, #255	; 0xff
 800165c:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 800165e:	230f      	movs	r3, #15
 8001660:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001662:	2310      	movs	r3, #16
 8001664:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001666:	2311      	movs	r3, #17
 8001668:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800166e:	463b      	mov	r3, r7
 8001670:	2200      	movs	r2, #0
 8001672:	4619      	mov	r1, r3
 8001674:	4807      	ldr	r0, [pc, #28]	; (8001694 <MX_FMC_Init+0x158>)
 8001676:	f012 fa28 	bl	8013aca <HAL_SRAM_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 8001680:	f001 f92e 	bl	80028e0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001684:	bf00      	nop
 8001686:	3720      	adds	r7, #32
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000970 	.word	0x20000970
 8001690:	a0000104 	.word	0xa0000104
 8001694:	200009c0 	.word	0x200009c0

08001698 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80016ac:	4b2b      	ldr	r3, [pc, #172]	; (800175c <HAL_FMC_MspInit+0xc4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d14f      	bne.n	8001754 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 80016b4:	4b29      	ldr	r3, [pc, #164]	; (800175c <HAL_FMC_MspInit+0xc4>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80016ba:	4b29      	ldr	r3, [pc, #164]	; (8001760 <HAL_FMC_MspInit+0xc8>)
 80016bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016be:	4a28      	ldr	r2, [pc, #160]	; (8001760 <HAL_FMC_MspInit+0xc8>)
 80016c0:	f043 0301 	orr.w	r3, r3, #1
 80016c4:	6513      	str	r3, [r2, #80]	; 0x50
 80016c6:	4b26      	ldr	r3, [pc, #152]	; (8001760 <HAL_FMC_MspInit+0xc8>)
 80016c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 80016d2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80016d6:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016e4:	230c      	movs	r3, #12
 80016e6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	4619      	mov	r1, r3
 80016ec:	481d      	ldr	r0, [pc, #116]	; (8001764 <HAL_FMC_MspInit+0xcc>)
 80016ee:	f00b ffd7 	bl	800d6a0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 80016f2:	f240 233f 	movw	r3, #575	; 0x23f
 80016f6:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001700:	2303      	movs	r3, #3
 8001702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001704:	230c      	movs	r3, #12
 8001706:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	4619      	mov	r1, r3
 800170c:	4816      	ldr	r0, [pc, #88]	; (8001768 <HAL_FMC_MspInit+0xd0>)
 800170e:	f00b ffc7 	bl	800d6a0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 8001712:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8001716:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001720:	2303      	movs	r3, #3
 8001722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001724:	230c      	movs	r3, #12
 8001726:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	4619      	mov	r1, r3
 800172c:	480f      	ldr	r0, [pc, #60]	; (800176c <HAL_FMC_MspInit+0xd4>)
 800172e:	f00b ffb7 	bl	800d6a0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 8001732:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001736:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001740:	2303      	movs	r3, #3
 8001742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001744:	230c      	movs	r3, #12
 8001746:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	4619      	mov	r1, r3
 800174c:	4808      	ldr	r0, [pc, #32]	; (8001770 <HAL_FMC_MspInit+0xd8>)
 800174e:	f00b ffa7 	bl	800d6a0 <HAL_GPIO_Init>
 8001752:	e000      	b.n	8001756 <HAL_FMC_MspInit+0xbe>
    return;
 8001754:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20000a10 	.word	0x20000a10
 8001760:	40021000 	.word	0x40021000
 8001764:	48001000 	.word	0x48001000
 8001768:	48001800 	.word	0x48001800
 800176c:	48000c00 	.word	0x48000c00
 8001770:	48001400 	.word	0x48001400

08001774 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800177c:	f7ff ff8c 	bl	8001698 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <MX_GPIO_Init>:
     PH13   ------> TIM8_CH1N
     PB9   ------> S_TIM4_CH4
     PA8   ------> LPTIM2_OUT
*/
void MX_GPIO_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08e      	sub	sp, #56	; 0x38
 800178c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
 800179c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800179e:	4bb4      	ldr	r3, [pc, #720]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 80017a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a2:	4ab3      	ldr	r2, [pc, #716]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 80017a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017aa:	4bb1      	ldr	r3, [pc, #708]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 80017ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b2:	623b      	str	r3, [r7, #32]
 80017b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017b6:	4bae      	ldr	r3, [pc, #696]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 80017b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ba:	4aad      	ldr	r2, [pc, #692]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 80017bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c2:	4bab      	ldr	r3, [pc, #684]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 80017c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ca:	61fb      	str	r3, [r7, #28]
 80017cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ce:	4ba8      	ldr	r3, [pc, #672]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 80017d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d2:	4aa7      	ldr	r2, [pc, #668]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 80017d4:	f043 0310 	orr.w	r3, r3, #16
 80017d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017da:	4ba5      	ldr	r3, [pc, #660]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017de:	f003 0310 	and.w	r3, r3, #16
 80017e2:	61bb      	str	r3, [r7, #24]
 80017e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	4ba2      	ldr	r3, [pc, #648]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ea:	4aa1      	ldr	r2, [pc, #644]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f2:	4b9f      	ldr	r3, [pc, #636]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	4b9c      	ldr	r3, [pc, #624]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	4a9b      	ldr	r2, [pc, #620]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180a:	4b99      	ldr	r3, [pc, #612]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001816:	4b96      	ldr	r3, [pc, #600]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	4a95      	ldr	r2, [pc, #596]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 800181c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001822:	4b93      	ldr	r3, [pc, #588]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 800182e:	f00e fe1f 	bl	8010470 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001832:	4b8f      	ldr	r3, [pc, #572]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	4a8e      	ldr	r2, [pc, #568]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 8001838:	f043 0308 	orr.w	r3, r3, #8
 800183c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183e:	4b8c      	ldr	r3, [pc, #560]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800184a:	4b89      	ldr	r3, [pc, #548]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	4a88      	ldr	r2, [pc, #544]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001856:	4b86      	ldr	r3, [pc, #536]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001862:	4b83      	ldr	r3, [pc, #524]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	4a82      	ldr	r2, [pc, #520]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 8001868:	f043 0320 	orr.w	r3, r3, #32
 800186c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186e:	4b80      	ldr	r3, [pc, #512]	; (8001a70 <MX_GPIO_Init+0x2e8>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	f003 0320 	and.w	r3, r3, #32
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LCD_BL_Pin|ARD_D4_Pin, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	f640 0101 	movw	r1, #2049	; 0x801
 8001880:	487c      	ldr	r0, [pc, #496]	; (8001a74 <MX_GPIO_Init+0x2ec>)
 8001882:	f00c f991 	bl	800dba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 8001886:	2200      	movs	r2, #0
 8001888:	2143      	movs	r1, #67	; 0x43
 800188a:	487b      	ldr	r0, [pc, #492]	; (8001a78 <MX_GPIO_Init+0x2f0>)
 800188c:	f00c f98c 	bl	800dba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 8001890:	2200      	movs	r2, #0
 8001892:	2140      	movs	r1, #64	; 0x40
 8001894:	4879      	ldr	r0, [pc, #484]	; (8001a7c <MX_GPIO_Init+0x2f4>)
 8001896:	f00c f987 	bl	800dba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARD_D2_Pin|ARD_D7_Pin, GPIO_PIN_RESET);
 800189a:	2200      	movs	r2, #0
 800189c:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 80018a0:	4877      	ldr	r0, [pc, #476]	; (8001a80 <MX_GPIO_Init+0x2f8>)
 80018a2:	f00c f981 	bl	800dba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ac:	4875      	ldr	r0, [pc, #468]	; (8001a84 <MX_GPIO_Init+0x2fc>)
 80018ae:	f00c f97b 	bl	800dba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin;
 80018b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018be:	2302      	movs	r3, #2
 80018c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_DOWN_GPIO_Port, &GPIO_InitStruct);
 80018c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c6:	4619      	mov	r1, r3
 80018c8:	486a      	ldr	r0, [pc, #424]	; (8001a74 <MX_GPIO_Init+0x2ec>)
 80018ca:	f00b fee9 	bl	800d6a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 80018ce:	2304      	movs	r3, #4
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 80018dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e0:	4619      	mov	r1, r3
 80018e2:	4865      	ldr	r0, [pc, #404]	; (8001a78 <MX_GPIO_Init+0x2f0>)
 80018e4:	f00b fedc 	bl	800d6a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|ARD_D4_Pin;
 80018e8:	f640 0301 	movw	r3, #2049	; 0x801
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ee:	2301      	movs	r3, #1
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fe:	4619      	mov	r1, r3
 8001900:	485c      	ldr	r0, [pc, #368]	; (8001a74 <MX_GPIO_Init+0x2ec>)
 8001902:	f00b fecd 	bl	800d6a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_LEFT_Pin;
 8001906:	f44f 7300 	mov.w	r3, #512	; 0x200
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800190c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001912:	2302      	movs	r3, #2
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_LEFT_GPIO_Port, &GPIO_InitStruct);
 8001916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191a:	4619      	mov	r1, r3
 800191c:	4855      	ldr	r0, [pc, #340]	; (8001a74 <MX_GPIO_Init+0x2ec>)
 800191e:	f00b febf 	bl	800d6a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001922:	2340      	movs	r3, #64	; 0x40
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001926:	2302      	movs	r3, #2
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192e:	2300      	movs	r3, #0
 8001930:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001932:	2303      	movs	r3, #3
 8001934:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193a:	4619      	mov	r1, r3
 800193c:	484d      	ldr	r0, [pc, #308]	; (8001a74 <MX_GPIO_Init+0x2ec>)
 800193e:	f00b feaf 	bl	800d6a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 8001942:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001950:	2300      	movs	r3, #0
 8001952:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001954:	2303      	movs	r3, #3
 8001956:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800195c:	4619      	mov	r1, r3
 800195e:	4846      	ldr	r0, [pc, #280]	; (8001a78 <MX_GPIO_Init+0x2f0>)
 8001960:	f00b fe9e 	bl	800d6a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_UP_Pin;
 8001964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196a:	2300      	movs	r3, #0
 800196c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800196e:	2302      	movs	r3, #2
 8001970:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_UP_GPIO_Port, &GPIO_InitStruct);
 8001972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001976:	4619      	mov	r1, r3
 8001978:	483e      	ldr	r0, [pc, #248]	; (8001a74 <MX_GPIO_Init+0x2ec>)
 800197a:	f00b fe91 	bl	800d6a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 800197e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001990:	2302      	movs	r3, #2
 8001992:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8001994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001998:	4619      	mov	r1, r3
 800199a:	483a      	ldr	r0, [pc, #232]	; (8001a84 <MX_GPIO_Init+0x2fc>)
 800199c:	f00b fe80 	bl	800d6a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 80019ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b0:	4619      	mov	r1, r3
 80019b2:	4831      	ldr	r0, [pc, #196]	; (8001a78 <MX_GPIO_Init+0x2f0>)
 80019b4:	f00b fe74 	bl	800d6a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 80019b8:	2343      	movs	r3, #67	; 0x43
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019bc:	2301      	movs	r3, #1
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019cc:	4619      	mov	r1, r3
 80019ce:	482a      	ldr	r0, [pc, #168]	; (8001a78 <MX_GPIO_Init+0x2f0>)
 80019d0:	f00b fe66 	bl	800d6a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 80019d4:	2340      	movs	r3, #64	; 0x40
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d8:	2301      	movs	r3, #1
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2300      	movs	r3, #0
 80019e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 80019e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e8:	4619      	mov	r1, r3
 80019ea:	4824      	ldr	r0, [pc, #144]	; (8001a7c <MX_GPIO_Init+0x2f4>)
 80019ec:	f00b fe58 	bl	800d6a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 80019f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001a00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a04:	4619      	mov	r1, r3
 8001a06:	481e      	ldr	r0, [pc, #120]	; (8001a80 <MX_GPIO_Init+0x2f8>)
 8001a08:	f00b fe4a 	bl	800d6a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = ARD_D2_Pin|ARD_D7_Pin;
 8001a0c:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a22:	4619      	mov	r1, r3
 8001a24:	4816      	ldr	r0, [pc, #88]	; (8001a80 <MX_GPIO_Init+0x2f8>)
 8001a26:	f00b fe3b 	bl	800d6a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 8001a2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a30:	2302      	movs	r3, #2
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8001a3c:	230e      	movs	r3, #14
 8001a3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a44:	4619      	mov	r1, r3
 8001a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4a:	f00b fe29 	bl	800d6a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8001a4e:	2320      	movs	r3, #32
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a60:	4619      	mov	r1, r3
 8001a62:	4806      	ldr	r0, [pc, #24]	; (8001a7c <MX_GPIO_Init+0x2f4>)
 8001a64:	f00b fe1c 	bl	800d6a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 8001a68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a6c:	e00c      	b.n	8001a88 <MX_GPIO_Init+0x300>
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	48002000 	.word	0x48002000
 8001a78:	48001c00 	.word	0x48001c00
 8001a7c:	48000800 	.word	0x48000800
 8001a80:	48001800 	.word	0x48001800
 8001a84:	48000400 	.word	0x48000400
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a90:	2302      	movs	r3, #2
 8001a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 8001a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4819      	ldr	r0, [pc, #100]	; (8001b00 <MX_GPIO_Init+0x378>)
 8001a9c:	f00b fe00 	bl	800d6a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4814      	ldr	r0, [pc, #80]	; (8001b04 <MX_GPIO_Init+0x37c>)
 8001ab4:	f00b fdf4 	bl	800d6a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001abe:	2311      	movs	r3, #17
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ace:	4619      	mov	r1, r3
 8001ad0:	480c      	ldr	r0, [pc, #48]	; (8001b04 <MX_GPIO_Init+0x37c>)
 8001ad2:	f00b fde5 	bl	800d6a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2017      	movs	r0, #23
 8001adc:	f00b fc09 	bl	800d2f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ae0:	2017      	movs	r0, #23
 8001ae2:	f00b fc22 	bl	800d32a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2028      	movs	r0, #40	; 0x28
 8001aec:	f00b fc01 	bl	800d2f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001af0:	2028      	movs	r0, #40	; 0x28
 8001af2:	f00b fc1a 	bl	800d32a <HAL_NVIC_EnableIRQ>

}
 8001af6:	bf00      	nop
 8001af8:	3738      	adds	r7, #56	; 0x38
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	48001400 	.word	0x48001400
 8001b04:	48000400 	.word	0x48000400

08001b08 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b0e:	4a1c      	ldr	r2, [pc, #112]	; (8001b80 <MX_I2C1_Init+0x78>)
 8001b10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001b12:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b14:	4a1b      	ldr	r2, [pc, #108]	; (8001b84 <MX_I2C1_Init+0x7c>)
 8001b16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b18:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b1e:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b24:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b30:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b42:	480e      	ldr	r0, [pc, #56]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b44:	f00c f87a 	bl	800dc3c <HAL_I2C_Init>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b4e:	f000 fec7 	bl	80028e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b52:	2100      	movs	r1, #0
 8001b54:	4809      	ldr	r0, [pc, #36]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b56:	f00d f97d 	bl	800ee54 <HAL_I2CEx_ConfigAnalogFilter>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b60:	f000 febe 	bl	80028e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b64:	2100      	movs	r1, #0
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <MX_I2C1_Init+0x74>)
 8001b68:	f00d f9bf 	bl	800eeea <HAL_I2CEx_ConfigDigitalFilter>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b72:	f000 feb5 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000a14 	.word	0x20000a14
 8001b80:	40005400 	.word	0x40005400
 8001b84:	20303e5d 	.word	0x20303e5d

08001b88 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <MX_I2C2_Init+0x74>)
 8001b8e:	4a1c      	ldr	r2, [pc, #112]	; (8001c00 <MX_I2C2_Init+0x78>)
 8001b90:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001b92:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <MX_I2C2_Init+0x74>)
 8001b94:	4a1b      	ldr	r2, [pc, #108]	; (8001c04 <MX_I2C2_Init+0x7c>)
 8001b96:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001b98:	4b18      	ldr	r3, [pc, #96]	; (8001bfc <MX_I2C2_Init+0x74>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <MX_I2C2_Init+0x74>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <MX_I2C2_Init+0x74>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001baa:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <MX_I2C2_Init+0x74>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <MX_I2C2_Init+0x74>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <MX_I2C2_Init+0x74>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bbc:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <MX_I2C2_Init+0x74>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bc2:	480e      	ldr	r0, [pc, #56]	; (8001bfc <MX_I2C2_Init+0x74>)
 8001bc4:	f00c f83a 	bl	800dc3c <HAL_I2C_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001bce:	f000 fe87 	bl	80028e0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4809      	ldr	r0, [pc, #36]	; (8001bfc <MX_I2C2_Init+0x74>)
 8001bd6:	f00d f93d 	bl	800ee54 <HAL_I2CEx_ConfigAnalogFilter>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001be0:	f000 fe7e 	bl	80028e0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001be4:	2100      	movs	r1, #0
 8001be6:	4805      	ldr	r0, [pc, #20]	; (8001bfc <MX_I2C2_Init+0x74>)
 8001be8:	f00d f97f 	bl	800eeea <HAL_I2CEx_ConfigDigitalFilter>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001bf2:	f000 fe75 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000a68 	.word	0x20000a68
 8001c00:	40005800 	.word	0x40005800
 8001c04:	20303e5d 	.word	0x20303e5d

08001c08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b0b0      	sub	sp, #192	; 0xc0
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c20:	f107 0320 	add.w	r3, r7, #32
 8001c24:	228c      	movs	r2, #140	; 0x8c
 8001c26:	2100      	movs	r1, #0
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f018 f959 	bl	8019ee0 <memset>
  if(i2cHandle->Instance==I2C1)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a53      	ldr	r2, [pc, #332]	; (8001d80 <HAL_I2C_MspInit+0x178>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d13c      	bne.n	8001cb2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c38:	2340      	movs	r3, #64	; 0x40
 8001c3a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c40:	f107 0320 	add.w	r3, r7, #32
 8001c44:	4618      	mov	r0, r3
 8001c46:	f00f fb6b 	bl	8011320 <HAL_RCCEx_PeriphCLKConfig>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c50:	f000 fe46 	bl	80028e0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c54:	4b4b      	ldr	r3, [pc, #300]	; (8001d84 <HAL_I2C_MspInit+0x17c>)
 8001c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c58:	4a4a      	ldr	r2, [pc, #296]	; (8001d84 <HAL_I2C_MspInit+0x17c>)
 8001c5a:	f043 0302 	orr.w	r3, r3, #2
 8001c5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c60:	4b48      	ldr	r3, [pc, #288]	; (8001d84 <HAL_I2C_MspInit+0x17c>)
 8001c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001c6c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c74:	2312      	movs	r3, #18
 8001c76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c80:	2303      	movs	r3, #3
 8001c82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c86:	2304      	movs	r3, #4
 8001c88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c90:	4619      	mov	r1, r3
 8001c92:	483d      	ldr	r0, [pc, #244]	; (8001d88 <HAL_I2C_MspInit+0x180>)
 8001c94:	f00b fd04 	bl	800d6a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c98:	4b3a      	ldr	r3, [pc, #232]	; (8001d84 <HAL_I2C_MspInit+0x17c>)
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9c:	4a39      	ldr	r2, [pc, #228]	; (8001d84 <HAL_I2C_MspInit+0x17c>)
 8001c9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ca2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca4:	4b37      	ldr	r3, [pc, #220]	; (8001d84 <HAL_I2C_MspInit+0x17c>)
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001cb0:	e061      	b.n	8001d76 <HAL_I2C_MspInit+0x16e>
  else if(i2cHandle->Instance==I2C2)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a35      	ldr	r2, [pc, #212]	; (8001d8c <HAL_I2C_MspInit+0x184>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d15c      	bne.n	8001d76 <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc4:	f107 0320 	add.w	r3, r7, #32
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f00f fb29 	bl	8011320 <HAL_RCCEx_PeriphCLKConfig>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001cd4:	f000 fe04 	bl	80028e0 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cd8:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <HAL_I2C_MspInit+0x17c>)
 8001cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cdc:	4a29      	ldr	r2, [pc, #164]	; (8001d84 <HAL_I2C_MspInit+0x17c>)
 8001cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce4:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <HAL_I2C_MspInit+0x17c>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf0:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <HAL_I2C_MspInit+0x17c>)
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf4:	4a23      	ldr	r2, [pc, #140]	; (8001d84 <HAL_I2C_MspInit+0x17c>)
 8001cf6:	f043 0302 	orr.w	r3, r3, #2
 8001cfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cfc:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <HAL_I2C_MspInit+0x17c>)
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8001d08:	2310      	movs	r3, #16
 8001d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d0e:	2312      	movs	r3, #18
 8001d10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d14:	2301      	movs	r3, #1
 8001d16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d20:	2304      	movs	r3, #4
 8001d22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8001d26:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4818      	ldr	r0, [pc, #96]	; (8001d90 <HAL_I2C_MspInit+0x188>)
 8001d2e:	f00b fcb7 	bl	800d6a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8001d32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d3a:	2312      	movs	r3, #18
 8001d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d40:	2301      	movs	r3, #1
 8001d42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d46:	2303      	movs	r3, #3
 8001d48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d4c:	2304      	movs	r3, #4
 8001d4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8001d52:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d56:	4619      	mov	r1, r3
 8001d58:	480b      	ldr	r0, [pc, #44]	; (8001d88 <HAL_I2C_MspInit+0x180>)
 8001d5a:	f00b fca1 	bl	800d6a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_I2C_MspInit+0x17c>)
 8001d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d62:	4a08      	ldr	r2, [pc, #32]	; (8001d84 <HAL_I2C_MspInit+0x17c>)
 8001d64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d68:	6593      	str	r3, [r2, #88]	; 0x58
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_I2C_MspInit+0x17c>)
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
}
 8001d76:	bf00      	nop
 8001d78:	37c0      	adds	r7, #192	; 0xc0
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40005400 	.word	0x40005400
 8001d84:	40021000 	.word	0x40021000
 8001d88:	48000400 	.word	0x48000400
 8001d8c:	40005800 	.word	0x40005800
 8001d90:	48001c00 	.word	0x48001c00

08001d94 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a15      	ldr	r2, [pc, #84]	; (8001df8 <HAL_I2C_MspDeInit+0x64>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d10f      	bne.n	8001dc6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <HAL_I2C_MspDeInit+0x68>)
 8001da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001daa:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <HAL_I2C_MspDeInit+0x68>)
 8001dac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001db0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8001db2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001db6:	4812      	ldr	r0, [pc, #72]	; (8001e00 <HAL_I2C_MspDeInit+0x6c>)
 8001db8:	f00b fe04 	bl	800d9c4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8001dbc:	2180      	movs	r1, #128	; 0x80
 8001dbe:	4810      	ldr	r0, [pc, #64]	; (8001e00 <HAL_I2C_MspDeInit+0x6c>)
 8001dc0:	f00b fe00 	bl	800d9c4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8001dc4:	e013      	b.n	8001dee <HAL_I2C_MspDeInit+0x5a>
  else if(i2cHandle->Instance==I2C2)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a0e      	ldr	r2, [pc, #56]	; (8001e04 <HAL_I2C_MspDeInit+0x70>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d10e      	bne.n	8001dee <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <HAL_I2C_MspDeInit+0x68>)
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd4:	4a09      	ldr	r2, [pc, #36]	; (8001dfc <HAL_I2C_MspDeInit+0x68>)
 8001dd6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001dda:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(I2C2_SCL_GPIO_Port, I2C2_SCL_Pin);
 8001ddc:	2110      	movs	r1, #16
 8001dde:	480a      	ldr	r0, [pc, #40]	; (8001e08 <HAL_I2C_MspDeInit+0x74>)
 8001de0:	f00b fdf0 	bl	800d9c4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(I2C2_SDA_GPIO_Port, I2C2_SDA_Pin);
 8001de4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001de8:	4805      	ldr	r0, [pc, #20]	; (8001e00 <HAL_I2C_MspDeInit+0x6c>)
 8001dea:	f00b fdeb 	bl	800d9c4 <HAL_GPIO_DeInit>
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40005400 	.word	0x40005400
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	48000400 	.word	0x48000400
 8001e04:	40005800 	.word	0x40005800
 8001e08:	48001c00 	.word	0x48001c00

08001e0c <HAL_TIM_PeriodElapsedCallback>:
    char msg[16];
    sprintf(msg,"Er%d", err);
    while(1){};
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

	if(htim == &htim6) {
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a07      	ldr	r2, [pc, #28]	; (8001e34 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d106      	bne.n	8001e2a <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL_GPIO_TogglePin(ARD_D7_GPIO_Port, ARD_D7_Pin); // test point for profiling
 8001e1c:	2140      	movs	r1, #64	; 0x40
 8001e1e:	4806      	ldr	r0, [pc, #24]	; (8001e38 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001e20:	f00b feda 	bl	800dbd8 <HAL_GPIO_TogglePin>
		SAMPLE_SENSOR = true;
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
	}

}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000e00 	.word	0x20000e00
 8001e38:	48001800 	.word	0x48001800
 8001e3c:	20000acc 	.word	0x20000acc

08001e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e46:	f009 fe45 	bl	800bad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e4a:	f000 fa8d 	bl	8002368 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001e4e:	f000 faed 	bl	800242c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e52:	f7ff fc99 	bl	8001788 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001e56:	f7fe ffbb 	bl	8000dd0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001e5a:	f7ff f82f 	bl	8000ebc <MX_ADC2_Init>
  MX_ADC3_Init();
 8001e5e:	f7ff f891 	bl	8000f84 <MX_ADC3_Init>
  MX_DCMI_Init();
 8001e62:	f7ff f9c3 	bl	80011ec <MX_DCMI_Init>
  MX_DFSDM1_Init();
 8001e66:	f7ff fa75 	bl	8001354 <MX_DFSDM1_Init>
  MX_FMC_Init();
 8001e6a:	f7ff fb67 	bl	800153c <MX_FMC_Init>
  MX_I2C1_Init();
 8001e6e:	f7ff fe4b 	bl	8001b08 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001e72:	f7ff fe89 	bl	8001b88 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8001e76:	f001 fa33 	bl	80032e0 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8001e7a:	f001 fa5f 	bl	800333c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001e7e:	f001 fa8d 	bl	800339c <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 8001e82:	f000 fd33 	bl	80028ec <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8001e86:	f000 fdbf 	bl	8002a08 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8001e8a:	f000 fedf 	bl	8002c4c <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 8001e8e:	f000 ff6f 	bl	8002d70 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001e92:	f000 ffab 	bl	8002dec <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8001e96:	f017 f9e1 	bl	801925c <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8001e9a:	f001 f9c5 	bl	8003228 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  // above: MX_SDMMC1_SD_Init(); has to be commented out to not be called

  // lcd init
	if (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE) == LCD_ERROR) {
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f008 fe08 	bl	800aab4 <BSP_LCD_InitEx>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d101      	bne.n	8001eae <main+0x6e>
		Error_Handler();
 8001eaa:	f000 fd19 	bl	80028e0 <Error_Handler>
	}

	// touchscreen init
	if(BSP_TS_InitEx(BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), LCD_ORIENTATION_LANDSCAPE) != TS_OK) {
 8001eae:	f008 fea7 	bl	800ac00 <BSP_LCD_GetXSize>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	b29c      	uxth	r4, r3
 8001eb6:	f008 feaf 	bl	800ac18 <BSP_LCD_GetYSize>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	f009 fbe8 	bl	800b698 <BSP_TS_InitEx>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <main+0x92>
		Error_Handler();
 8001ece:	f000 fd07 	bl	80028e0 <Error_Handler>
	}

	// LED GPIO
	BSP_LED_Init(LED2_PIN); // LD1
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f007 ff98 	bl	8009e08 <BSP_LED_Init>
	BSP_LED_On(LED2_PIN); // LD1 orange turns on
 8001ed8:	2000      	movs	r0, #0
 8001eda:	f007 ffe3 	bl	8009ea4 <BSP_LED_On>
	HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET); // LD2 green turns on
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ee4:	4896      	ldr	r0, [pc, #600]	; (8002140 <main+0x300>)
 8001ee6:	f00b fe5f 	bl	800dba8 <HAL_GPIO_WritePin>
	// LD3 is attached to ARD_D13, which is not an output, it's attached to SPI
	HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_RESET); // laser
 8001eea:	2200      	movs	r2, #0
 8001eec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ef0:	4894      	ldr	r0, [pc, #592]	; (8002144 <main+0x304>)
 8001ef2:	f00b fe59 	bl	800dba8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D7_GPIO_Port, ARD_D7_Pin, GPIO_PIN_RESET); // test point: timer frequency
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2140      	movs	r1, #64	; 0x40
 8001efa:	4893      	ldr	r0, [pc, #588]	; (8002148 <main+0x308>)
 8001efc:	f00b fe54 	bl	800dba8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_SET); // turn on BT pwr transistor
 8001f00:	2201      	movs	r2, #1
 8001f02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f06:	4890      	ldr	r0, [pc, #576]	; (8002148 <main+0x308>)
 8001f08:	f00b fe4e 	bl	800dba8 <HAL_GPIO_WritePin>


	// tof related
	VL53L0X_Dev_t *pDev;
	pDev = &VL53L0XDev;
 8001f0c:	4b8f      	ldr	r3, [pc, #572]	; (800214c <main+0x30c>)
 8001f0e:	61bb      	str	r3, [r7, #24]
	tofTestRegisterRead();
 8001f10:	f000 fac2 	bl	8002498 <tofTestRegisterRead>
	//tofInit();

	pDev->I2cDevAddr = 0x52;
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	2252      	movs	r2, #82	; 0x52
 8001f18:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	pDev->Present = 0;
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

	int status = VL53L0X_DataInit(pDev);
 8001f24:	69b8      	ldr	r0, [r7, #24]
 8001f26:	f003 fbdb 	bl	80056e0 <VL53L0X_DataInit>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	617b      	str	r3, [r7, #20]
	if(status == 0) {
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d12f      	bne.n	8001f94 <main+0x154>
			pDev->Present = 1;
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
	} else {
			printf("VL53L0X_DataInit fail\n");
			return;
	}
	printf("VL53L0X %d Present and initiated to final 0x%x\n", pDev->Id, pDev->I2cDevAddr);
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	f8d3 1164 	ldr.w	r1, [r3, #356]	; 0x164
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4881      	ldr	r0, [pc, #516]	; (8002150 <main+0x310>)
 8001f4c:	f018 f8b0 	bl	801a0b0 <iprintf>
	pDev->Present = 1;
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

	// Initialize the device in continuous ranging mode
	VL53L0X_StaticInit(pDev);
 8001f58:	69b8      	ldr	r0, [r7, #24]
 8001f5a:	f003 fd25 	bl	80059a8 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(pDev, &VhvSettings, &PhaseCal);
 8001f5e:	4a7d      	ldr	r2, [pc, #500]	; (8002154 <main+0x314>)
 8001f60:	497d      	ldr	r1, [pc, #500]	; (8002158 <main+0x318>)
 8001f62:	69b8      	ldr	r0, [r7, #24]
 8001f64:	f004 fbd0 	bl	8006708 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(pDev, &refSpadCount, &isApertureSpads);
 8001f68:	4a7c      	ldr	r2, [pc, #496]	; (800215c <main+0x31c>)
 8001f6a:	497d      	ldr	r1, [pc, #500]	; (8002160 <main+0x320>)
 8001f6c:	69b8      	ldr	r0, [r7, #24]
 8001f6e:	f005 f859 	bl	8007024 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetInterMeasurementPeriodMilliSeconds(pDev, TIMED_RANGING_PERIOD);
 8001f72:	2132      	movs	r1, #50	; 0x32
 8001f74:	69b8      	ldr	r0, [r7, #24]
 8001f76:	f004 f911 	bl	800619c <VL53L0X_SetInterMeasurementPeriodMilliSeconds>
	VL53L0X_SetDeviceMode(pDev, VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING);
 8001f7a:	2103      	movs	r1, #3
 8001f7c:	69b8      	ldr	r0, [r7, #24]
 8001f7e:	f003 ff25 	bl	8005dcc <VL53L0X_SetDeviceMode>
	VL53L0X_StartMeasurement(pDev);
 8001f82:	69b8      	ldr	r0, [r7, #24]
 8001f84:	f004 fc3c 	bl	8006800 <VL53L0X_StartMeasurement>


	// ui related
	uiSetup();
 8001f88:	f000 fb12 	bl	80025b0 <uiSetup>


	// start timer
  HAL_TIM_Base_Start_IT(&htim6);
 8001f8c:	4875      	ldr	r0, [pc, #468]	; (8002164 <main+0x324>)
 8001f8e:	f011 fe3b 	bl	8013c08 <HAL_TIM_Base_Start_IT>
 8001f92:	e003      	b.n	8001f9c <main+0x15c>
			printf("VL53L0X_DataInit fail\n");
 8001f94:	4874      	ldr	r0, [pc, #464]	; (8002168 <main+0x328>)
 8001f96:	f018 f911 	bl	801a1bc <puts>
			return;
 8001f9a:	e1d4      	b.n	8002346 <main+0x506>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

  	// wake from event, the first thing seen after exiting sleep mode
  	if(SLEEP_MODE_ACTIVE) {
 8001f9c:	4b73      	ldr	r3, [pc, #460]	; (800216c <main+0x32c>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d01c      	beq.n	8001fde <main+0x19e>
			reconfigureFromSleep();
 8001fa4:	f000 fba0 	bl	80026e8 <reconfigureFromSleep>
			awakeFromSleep();
 8001fa8:	f000 fbac 	bl	8002704 <awakeFromSleep>
			// refresh ui
			for(uint8_t i=0; i<num_bubbles; i++) {
 8001fac:	2300      	movs	r3, #0
 8001fae:	77fb      	strb	r3, [r7, #31]
 8001fb0:	e00d      	b.n	8001fce <main+0x18e>
				struct Bubble *b = &ui_bubbles[i];
 8001fb2:	7ffa      	ldrb	r2, [r7, #31]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	4a6c      	ldr	r2, [pc, #432]	; (8002170 <main+0x330>)
 8001fbe:	4413      	add	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
				b->redraw = true;
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	739a      	strb	r2, [r3, #14]
			for(uint8_t i=0; i<num_bubbles; i++) {
 8001fc8:	7ffb      	ldrb	r3, [r7, #31]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	77fb      	strb	r3, [r7, #31]
 8001fce:	4b69      	ldr	r3, [pc, #420]	; (8002174 <main+0x334>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	7ffa      	ldrb	r2, [r7, #31]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d3ec      	bcc.n	8001fb2 <main+0x172>
			}
			bubble_label_redraw = true;
 8001fd8:	4b67      	ldr	r3, [pc, #412]	; (8002178 <main+0x338>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]
		}


  	// flag set from interrupt to enter in to sleep mode
  	if(ENTER_SLEEP_MODE) {
 8001fde:	4b67      	ldr	r3, [pc, #412]	; (800217c <main+0x33c>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d007      	beq.n	8001ff6 <main+0x1b6>
  		enterSleep();
 8001fe6:	f000 fbdd 	bl	80027a4 <enterSleep>
  		HAL_SuspendTick();
 8001fea:	f009 fe0b 	bl	800bc04 <HAL_SuspendTick>
			HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFE); // left button configured as event
 8001fee:	2102      	movs	r1, #2
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f00e f995 	bl	8010320 <HAL_PWR_EnterSLEEPMode>




  	// sampling every 50 ms
  	if(SAMPLE_SENSOR) {
 8001ff6:	4b62      	ldr	r3, [pc, #392]	; (8002180 <main+0x340>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d045      	beq.n	800208a <main+0x24a>

  		// get sonar ADC value
			// "10-bit ADC, divide the ADC output by 2 for the range in inches."
			HAL_ADC_Start(&hadc1);
 8001ffe:	4861      	ldr	r0, [pc, #388]	; (8002184 <main+0x344>)
 8002000:	f00a f970 	bl	800c2e4 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002004:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002008:	485e      	ldr	r0, [pc, #376]	; (8002184 <main+0x344>)
 800200a:	f00a fa25 	bl	800c458 <HAL_ADC_PollForConversion>
			sonar_raw = HAL_ADC_GetValue(&hadc1);
 800200e:	485d      	ldr	r0, [pc, #372]	; (8002184 <main+0x344>)
 8002010:	f00a fafa 	bl	800c608 <HAL_ADC_GetValue>
 8002014:	4603      	mov	r3, r0
 8002016:	b29a      	uxth	r2, r3
 8002018:	4b5b      	ldr	r3, [pc, #364]	; (8002188 <main+0x348>)
 800201a:	801a      	strh	r2, [r3, #0]
			sonar_raw_mm = (float)(sonar_raw/2.0)*2.54*10;
 800201c:	4b5a      	ldr	r3, [pc, #360]	; (8002188 <main+0x348>)
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fa87 	bl	8000534 <__aeabi_i2d>
 8002026:	f04f 0200 	mov.w	r2, #0
 800202a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800202e:	f7fe fc15 	bl	800085c <__aeabi_ddiv>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	f7fe fcf7 	bl	8000a2c <__aeabi_d2f>
 800203e:	4603      	mov	r3, r0
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe fa89 	bl	8000558 <__aeabi_f2d>
 8002046:	a33c      	add	r3, pc, #240	; (adr r3, 8002138 <main+0x2f8>)
 8002048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204c:	f7fe fadc 	bl	8000608 <__aeabi_dmul>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4610      	mov	r0, r2
 8002056:	4619      	mov	r1, r3
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	4b4b      	ldr	r3, [pc, #300]	; (800218c <main+0x34c>)
 800205e:	f7fe fad3 	bl	8000608 <__aeabi_dmul>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4610      	mov	r0, r2
 8002068:	4619      	mov	r1, r3
 800206a:	f7fe fcdf 	bl	8000a2c <__aeabi_d2f>
 800206e:	4603      	mov	r3, r0
 8002070:	4a47      	ldr	r2, [pc, #284]	; (8002190 <main+0x350>)
 8002072:	6013      	str	r3, [r2, #0]

			// get time of flight i2c value
			VL53L0X_GetRangingMeasurementData(pDev, &RangingMeasurementData);
 8002074:	4947      	ldr	r1, [pc, #284]	; (8002194 <main+0x354>)
 8002076:	69b8      	ldr	r0, [r7, #24]
 8002078:	f004 fcc4 	bl	8006a04 <VL53L0X_GetRangingMeasurementData>
			tof_raw_mm = RangingMeasurementData.RangeMilliMeter; // mm
 800207c:	4b45      	ldr	r3, [pc, #276]	; (8002194 <main+0x354>)
 800207e:	891a      	ldrh	r2, [r3, #8]
 8002080:	4b45      	ldr	r3, [pc, #276]	; (8002198 <main+0x358>)
 8002082:	801a      	strh	r2, [r3, #0]
				}

			}
			*/

  		SAMPLE_SENSOR = false; // hope all of this takes < 50 ms
 8002084:	4b3e      	ldr	r3, [pc, #248]	; (8002180 <main+0x340>)
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]




		// update ui
		for(uint8_t i=0; i<num_bubbles; i++) {
 800208a:	2300      	movs	r3, #0
 800208c:	77bb      	strb	r3, [r7, #30]
 800208e:	e00c      	b.n	80020aa <main+0x26a>
			drawBubble(&ui_bubbles[i]);
 8002090:	7fba      	ldrb	r2, [r7, #30]
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4a35      	ldr	r2, [pc, #212]	; (8002170 <main+0x330>)
 800209c:	4413      	add	r3, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fa1a 	bl	80024d8 <drawBubble>
		for(uint8_t i=0; i<num_bubbles; i++) {
 80020a4:	7fbb      	ldrb	r3, [r7, #30]
 80020a6:	3301      	adds	r3, #1
 80020a8:	77bb      	strb	r3, [r7, #30]
 80020aa:	4b32      	ldr	r3, [pc, #200]	; (8002174 <main+0x334>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	7fba      	ldrb	r2, [r7, #30]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d3ed      	bcc.n	8002090 <main+0x250>
		}
		if(bubble_label_redraw) {
 80020b4:	4b30      	ldr	r3, [pc, #192]	; (8002178 <main+0x338>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00f      	beq.n	80020dc <main+0x29c>
			BSP_LCD_SetTextColor( LCD_COLOR_DARKGREEN );
 80020bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80020c0:	f008 fdb6 	bl	800ac30 <BSP_LCD_SetTextColor>
			BSP_LCD_SetFont(&Font24);
 80020c4:	4835      	ldr	r0, [pc, #212]	; (800219c <main+0x35c>)
 80020c6:	f008 fdc3 	bl	800ac50 <BSP_LCD_SetFont>
			BSP_LCD_DisplayStringAt(0, 90, (uint8_t *)" 10   30   90", LEFT_MODE);
 80020ca:	2303      	movs	r3, #3
 80020cc:	4a34      	ldr	r2, [pc, #208]	; (80021a0 <main+0x360>)
 80020ce:	215a      	movs	r1, #90	; 0x5a
 80020d0:	2000      	movs	r0, #0
 80020d2:	f008 fe2d 	bl	800ad30 <BSP_LCD_DisplayStringAt>
			bubble_label_redraw = false;
 80020d6:	4b28      	ldr	r3, [pc, #160]	; (8002178 <main+0x338>)
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
		}

		// update ts
		BSP_TS_GetState(&ts_result);
 80020dc:	4831      	ldr	r0, [pc, #196]	; (80021a4 <main+0x364>)
 80020de:	f009 fb63 	bl	800b7a8 <BSP_TS_GetState>
		uint8_t num_touches = ts_result.touchDetected;
 80020e2:	4b30      	ldr	r3, [pc, #192]	; (80021a4 <main+0x364>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	73fb      	strb	r3, [r7, #15]

		// wake up the screen on touch
		if(num_touches > 0 && DIMMED_SCREEN == true) {
 80020e8:	7bfb      	ldrb	r3, [r7, #15]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00d      	beq.n	800210a <main+0x2ca>
 80020ee:	4b2e      	ldr	r3, [pc, #184]	; (80021a8 <main+0x368>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d009      	beq.n	800210a <main+0x2ca>
			BSP_LCD_ScreenDimmingOff();
 80020f6:	f009 f98b 	bl	800b410 <BSP_LCD_ScreenDimmingOff>
			DIMMED_SCREEN = false;
 80020fa:	4b2b      	ldr	r3, [pc, #172]	; (80021a8 <main+0x368>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
			last_ts = HAL_GetTick();
 8002100:	f009 fd50 	bl	800bba4 <HAL_GetTick>
 8002104:	4603      	mov	r3, r0
 8002106:	4a29      	ldr	r2, [pc, #164]	; (80021ac <main+0x36c>)
 8002108:	6013      	str	r3, [r2, #0]
		}

		// hit testing selected bubbles
		for(uint8_t i=0; i<num_touches; i++) {
 800210a:	2300      	movs	r3, #0
 800210c:	777b      	strb	r3, [r7, #29]
 800210e:	e0d9      	b.n	80022c4 <main+0x484>
			Point touch;
			touch.X = ts_result.touchX[i];
 8002110:	7f7b      	ldrb	r3, [r7, #29]
 8002112:	4a24      	ldr	r2, [pc, #144]	; (80021a4 <main+0x364>)
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	885b      	ldrh	r3, [r3, #2]
 800211a:	b21b      	sxth	r3, r3
 800211c:	80bb      	strh	r3, [r7, #4]
			touch.Y = ts_result.touchY[i];
 800211e:	7f7b      	ldrb	r3, [r7, #29]
 8002120:	4a20      	ldr	r2, [pc, #128]	; (80021a4 <main+0x364>)
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4413      	add	r3, r2
 8002126:	88db      	ldrh	r3, [r3, #6]
 8002128:	b21b      	sxth	r3, r3
 800212a:	80fb      	strh	r3, [r7, #6]

			for(uint8_t j=0; j<num_bubbles; j++) {
 800212c:	2300      	movs	r3, #0
 800212e:	773b      	strb	r3, [r7, #28]
 8002130:	e0bf      	b.n	80022b2 <main+0x472>
 8002132:	bf00      	nop
 8002134:	f3af 8000 	nop.w
 8002138:	851eb852 	.word	0x851eb852
 800213c:	400451eb 	.word	0x400451eb
 8002140:	48000400 	.word	0x48000400
 8002144:	48002000 	.word	0x48002000
 8002148:	48001800 	.word	0x48001800
 800214c:	20000004 	.word	0x20000004
 8002150:	0801af40 	.word	0x0801af40
 8002154:	20000b45 	.word	0x20000b45
 8002158:	20000b44 	.word	0x20000b44
 800215c:	20000b4c 	.word	0x20000b4c
 8002160:	20000b48 	.word	0x20000b48
 8002164:	20000e00 	.word	0x20000e00
 8002168:	0801af28 	.word	0x0801af28
 800216c:	20000ace 	.word	0x20000ace
 8002170:	20000ad8 	.word	0x20000ad8
 8002174:	20000001 	.word	0x20000001
 8002178:	20000002 	.word	0x20000002
 800217c:	20000acf 	.word	0x20000acf
 8002180:	20000acc 	.word	0x20000acc
 8002184:	2000075c 	.word	0x2000075c
 8002188:	20000b4e 	.word	0x20000b4e
 800218c:	40240000 	.word	0x40240000
 8002190:	20000b50 	.word	0x20000b50
 8002194:	20000b28 	.word	0x20000b28
 8002198:	20000b54 	.word	0x20000b54
 800219c:	20000534 	.word	0x20000534
 80021a0:	0801af70 	.word	0x0801af70
 80021a4:	20000abc 	.word	0x20000abc
 80021a8:	20000acd 	.word	0x20000acd
 80021ac:	20000ac8 	.word	0x20000ac8
				struct Bubble *b = &ui_bubbles[j];
 80021b0:	7f3a      	ldrb	r2, [r7, #28]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4a65      	ldr	r2, [pc, #404]	; (8002350 <main+0x510>)
 80021bc:	4413      	add	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]

				// hit testing
				if(touch.X < b->x + b->hit_diameter && touch.X > b->x - b->hit_diameter) {
 80021c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021c4:	461a      	mov	r2, r3
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	4619      	mov	r1, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	88db      	ldrh	r3, [r3, #6]
 80021d0:	440b      	add	r3, r1
 80021d2:	429a      	cmp	r2, r3
 80021d4:	da6a      	bge.n	80022ac <main+0x46c>
 80021d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80021da:	461a      	mov	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	4619      	mov	r1, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	88db      	ldrh	r3, [r3, #6]
 80021e6:	1acb      	subs	r3, r1, r3
 80021e8:	429a      	cmp	r2, r3
 80021ea:	dd5f      	ble.n	80022ac <main+0x46c>
					if(touch.Y < b->y + b->hit_diameter && touch.Y > b->y - b->hit_diameter) {
 80021ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021f0:	461a      	mov	r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	885b      	ldrh	r3, [r3, #2]
 80021f6:	4619      	mov	r1, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	88db      	ldrh	r3, [r3, #6]
 80021fc:	440b      	add	r3, r1
 80021fe:	429a      	cmp	r2, r3
 8002200:	da54      	bge.n	80022ac <main+0x46c>
 8002202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002206:	461a      	mov	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	885b      	ldrh	r3, [r3, #2]
 800220c:	4619      	mov	r1, r3
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	88db      	ldrh	r3, [r3, #6]
 8002212:	1acb      	subs	r3, r1, r3
 8002214:	429a      	cmp	r2, r3
 8002216:	dd49      	ble.n	80022ac <main+0x46c>

						if(b->type == 1) { // ui bubbles
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	7bdb      	ldrb	r3, [r3, #15]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d122      	bne.n	8002266 <main+0x426>

							if(!b->selected) { // not selected prior
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	7a1b      	ldrb	r3, [r3, #8]
 8002224:	f083 0301 	eor.w	r3, r3, #1
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d03e      	beq.n	80022ac <main+0x46c>
								b->selected = !b->selected;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	7a1b      	ldrb	r3, [r3, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	bf14      	ite	ne
 8002236:	2301      	movne	r3, #1
 8002238:	2300      	moveq	r3, #0
 800223a:	b2db      	uxtb	r3, r3
 800223c:	f083 0301 	eor.w	r3, r3, #1
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	b2da      	uxtb	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	721a      	strb	r2, [r3, #8]
								deselectBubbles(j); // "single touch"
 800224c:	7f3b      	ldrb	r3, [r7, #28]
 800224e:	4618      	mov	r0, r3
 8002250:	f000 f97a 	bl	8002548 <deselectBubbles>
								b->redraw = true;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2201      	movs	r2, #1
 8002258:	739a      	strb	r2, [r3, #14]
								b->last_selected = HAL_GetTick();
 800225a:	f009 fca3 	bl	800bba4 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	611a      	str	r2, [r3, #16]
 8002264:	e022      	b.n	80022ac <main+0x46c>
							}

						} else if(b->type == 2) { // go bubble
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	7bdb      	ldrb	r3, [r3, #15]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d11e      	bne.n	80022ac <main+0x46c>

							if(HAL_GetTick()-b->last_selected > 80) { // 80 ms debounce
 800226e:	f009 fc99 	bl	800bba4 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b50      	cmp	r3, #80	; 0x50
 800227c:	d916      	bls.n	80022ac <main+0x46c>
								b->selected = !b->selected;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	7a1b      	ldrb	r3, [r3, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	bf14      	ite	ne
 8002286:	2301      	movne	r3, #1
 8002288:	2300      	moveq	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	f083 0301 	eor.w	r3, r3, #1
 8002290:	b2db      	uxtb	r3, r3
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	b2da      	uxtb	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	721a      	strb	r2, [r3, #8]
								b->redraw = true;
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2201      	movs	r2, #1
 80022a0:	739a      	strb	r2, [r3, #14]
								b->last_selected = HAL_GetTick();
 80022a2:	f009 fc7f 	bl	800bba4 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	611a      	str	r2, [r3, #16]
			for(uint8_t j=0; j<num_bubbles; j++) {
 80022ac:	7f3b      	ldrb	r3, [r7, #28]
 80022ae:	3301      	adds	r3, #1
 80022b0:	773b      	strb	r3, [r7, #28]
 80022b2:	4b28      	ldr	r3, [pc, #160]	; (8002354 <main+0x514>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	7f3a      	ldrb	r2, [r7, #28]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	f4ff af79 	bcc.w	80021b0 <main+0x370>
		for(uint8_t i=0; i<num_touches; i++) {
 80022be:	7f7b      	ldrb	r3, [r7, #29]
 80022c0:	3301      	adds	r3, #1
 80022c2:	777b      	strb	r3, [r7, #29]
 80022c4:	7f7a      	ldrb	r2, [r7, #29]
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	f4ff af21 	bcc.w	8002110 <main+0x2d0>
		// imagine the case where gettick has overflowed, but last_ts has not
		// eg 100-30000
		// abs could be used to prevent this from being a negative number, however
		// in this case, it is not needed, because two unsigned integers being
		// subtracted results in an unsigned integer
		if( HAL_GetTick()-last_ts >= 5000 && DIMMED_SCREEN == false) {
 80022ce:	f009 fc69 	bl	800bba4 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	4b20      	ldr	r3, [pc, #128]	; (8002358 <main+0x518>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3287 	movw	r2, #4999	; 0x1387
 80022de:	4293      	cmp	r3, r2
 80022e0:	d911      	bls.n	8002306 <main+0x4c6>
 80022e2:	4b1e      	ldr	r3, [pc, #120]	; (800235c <main+0x51c>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	f083 0301 	eor.w	r3, r3, #1
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00a      	beq.n	8002306 <main+0x4c6>
			//BSP_LCD_ScreenDimmingConfig(100, 5, 5, 20); // 100-5=95/5=19*20=380ms
			BSP_LCD_ScreenDimmingConfig(100, 5, 5, 1); // 100-5=95/5=19*20=380ms
 80022f0:	2301      	movs	r3, #1
 80022f2:	2205      	movs	r2, #5
 80022f4:	2105      	movs	r1, #5
 80022f6:	2064      	movs	r0, #100	; 0x64
 80022f8:	f008 ff5e 	bl	800b1b8 <BSP_LCD_ScreenDimmingConfig>
			BSP_LCD_ScreenDimmingOn();
 80022fc:	f008 ff8e 	bl	800b21c <BSP_LCD_ScreenDimmingOn>
			DIMMED_SCREEN = true;
 8002300:	4b16      	ldr	r3, [pc, #88]	; (800235c <main+0x51c>)
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]
		}


		// led heartbeat
		if(TimingDelay == 0) {
 8002306:	4b16      	ldr	r3, [pc, #88]	; (8002360 <main+0x520>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f47f ae46 	bne.w	8001f9c <main+0x15c>
			if(led_on) {
 8002310:	4b14      	ldr	r3, [pc, #80]	; (8002364 <main+0x524>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <main+0x4e0>
				BSP_LED_On(LED2_PIN); // LD1 orange
 8002318:	2000      	movs	r0, #0
 800231a:	f007 fdc3 	bl	8009ea4 <BSP_LED_On>
 800231e:	e002      	b.n	8002326 <main+0x4e6>
			} else {
				BSP_LED_Off(LED2_PIN); // LD1 orange
 8002320:	2000      	movs	r0, #0
 8002322:	f007 fde1 	bl	8009ee8 <BSP_LED_Off>
			}
			led_on = !led_on;
 8002326:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <main+0x524>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	bf14      	ite	ne
 800232e:	2301      	movne	r3, #1
 8002330:	2300      	moveq	r3, #0
 8002332:	b2db      	uxtb	r3, r3
 8002334:	f083 0301 	eor.w	r3, r3, #1
 8002338:	b2db      	uxtb	r3, r3
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	b2da      	uxtb	r2, r3
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <main+0x524>)
 8002342:	701a      	strb	r2, [r3, #0]
  {
 8002344:	e62a      	b.n	8001f9c <main+0x15c>
			return;
 8002346:	bf00      	nop
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8002348:	4618      	mov	r0, r3
 800234a:	3724      	adds	r7, #36	; 0x24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd90      	pop	{r4, r7, pc}
 8002350:	20000ad8 	.word	0x20000ad8
 8002354:	20000001 	.word	0x20000001
 8002358:	20000ac8 	.word	0x20000ac8
 800235c:	20000acd 	.word	0x20000acd
 8002360:	20000ad4 	.word	0x20000ad4
 8002364:	20000ad0 	.word	0x20000ad0

08002368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b096      	sub	sp, #88	; 0x58
 800236c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	2244      	movs	r2, #68	; 0x44
 8002374:	2100      	movs	r1, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f017 fdb2 	bl	8019ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800237c:	463b      	mov	r3, r7
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	60da      	str	r2, [r3, #12]
 8002388:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800238a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800238e:	f00e f809 	bl	80103a4 <HAL_PWREx_ControlVoltageScaling>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002398:	f000 faa2 	bl	80028e0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800239c:	f00d ffb0 	bl	8010300 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80023a0:	4b21      	ldr	r3, [pc, #132]	; (8002428 <SystemClock_Config+0xc0>)
 80023a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a6:	4a20      	ldr	r2, [pc, #128]	; (8002428 <SystemClock_Config+0xc0>)
 80023a8:	f023 0318 	bic.w	r3, r3, #24
 80023ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80023b0:	2314      	movs	r3, #20
 80023b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80023b4:	2301      	movs	r3, #1
 80023b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80023b8:	2301      	movs	r3, #1
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80023c0:	2360      	movs	r3, #96	; 0x60
 80023c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023c4:	2302      	movs	r3, #2
 80023c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80023c8:	2301      	movs	r3, #1
 80023ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80023cc:	2301      	movs	r3, #1
 80023ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 24;
 80023d0:	2318      	movs	r3, #24
 80023d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023d4:	2302      	movs	r3, #2
 80023d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80023d8:	2302      	movs	r3, #2
 80023da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80023dc:	2302      	movs	r3, #2
 80023de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	4618      	mov	r0, r3
 80023e6:	f00e f95d 	bl	80106a4 <HAL_RCC_OscConfig>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80023f0:	f000 fa76 	bl	80028e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023f4:	230f      	movs	r3, #15
 80023f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023f8:	2303      	movs	r3, #3
 80023fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023fc:	2300      	movs	r3, #0
 80023fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002400:	2300      	movs	r3, #0
 8002402:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002404:	2300      	movs	r3, #0
 8002406:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002408:	463b      	mov	r3, r7
 800240a:	2102      	movs	r1, #2
 800240c:	4618      	mov	r0, r3
 800240e:	f00e fd63 	bl	8010ed8 <HAL_RCC_ClockConfig>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002418:	f000 fa62 	bl	80028e0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800241c:	f010 f834 	bl	8012488 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002420:	bf00      	nop
 8002422:	3758      	adds	r7, #88	; 0x58
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40021000 	.word	0x40021000

0800242c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b0a4      	sub	sp, #144	; 0x90
 8002430:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	228c      	movs	r2, #140	; 0x8c
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f017 fd51 	bl	8019ee0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
 800243e:	4b14      	ldr	r3, [pc, #80]	; (8002490 <PeriphCommonClock_Config+0x64>)
 8002440:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8002442:	2300      	movs	r3, #0
 8002444:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002446:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800244a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800244e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002452:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 8002454:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002458:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800245a:	2301      	movs	r3, #1
 800245c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800245e:	2301      	movs	r3, #1
 8002460:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002462:	2318      	movs	r3, #24
 8002464:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8002466:	2302      	movs	r3, #2
 8002468:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800246a:	2302      	movs	r3, #2
 800246c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800246e:	2302      	movs	r3, #2
 8002470:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <PeriphCommonClock_Config+0x68>)
 8002474:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002476:	1d3b      	adds	r3, r7, #4
 8002478:	4618      	mov	r0, r3
 800247a:	f00e ff51 	bl	8011320 <HAL_RCCEx_PeriphCLKConfig>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8002484:	f000 fa2c 	bl	80028e0 <Error_Handler>
  }
}
 8002488:	bf00      	nop
 800248a:	3790      	adds	r7, #144	; 0x90
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	00086800 	.word	0x00086800
 8002494:	01110000 	.word	0x01110000

08002498 <tofTestRegisterRead>:

/* USER CODE BEGIN 4 */

void tofTestRegisterRead(void) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status;
	uint8_t pData;
	status = HAL_I2C_Mem_Read(&hi2c1, 0x52, 0xC0, 1, &pData, 1, HAL_TIMEOUT);
 800249e:	2303      	movs	r3, #3
 80024a0:	9302      	str	r3, [sp, #8]
 80024a2:	2301      	movs	r3, #1
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	1dbb      	adds	r3, r7, #6
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	2301      	movs	r3, #1
 80024ac:	22c0      	movs	r2, #192	; 0xc0
 80024ae:	2152      	movs	r1, #82	; 0x52
 80024b0:	4807      	ldr	r0, [pc, #28]	; (80024d0 <tofTestRegisterRead+0x38>)
 80024b2:	f00b ff7f 	bl	800e3b4 <HAL_I2C_Mem_Read>
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]
	// pData should be 0xEE
	if(status == HAL_OK) {
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d102      	bne.n	80024c6 <tofTestRegisterRead+0x2e>
		printf("good");
 80024c0:	4804      	ldr	r0, [pc, #16]	; (80024d4 <tofTestRegisterRead+0x3c>)
 80024c2:	f017 fdf5 	bl	801a0b0 <iprintf>
	}
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000a14 	.word	0x20000a14
 80024d4:	0801af80 	.word	0x0801af80

080024d8 <drawBubble>:



// UI123

void drawBubble(struct Bubble *bubble) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

	if(!bubble->redraw) return;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	7b9b      	ldrb	r3, [r3, #14]
 80024e4:	f083 0301 	eor.w	r3, r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d127      	bne.n	800253e <drawBubble+0x66>

	if(!bubble->selected) {
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	7a1b      	ldrb	r3, [r3, #8]
 80024f2:	f083 0301 	eor.w	r3, r3, #1
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00e      	beq.n	800251a <drawBubble+0x42>
		BSP_LCD_SetTextColor( bubble->colour_active );
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	895b      	ldrh	r3, [r3, #10]
 8002500:	4618      	mov	r0, r3
 8002502:	f008 fb95 	bl	800ac30 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(bubble->x, bubble->y, bubble->radius);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	8818      	ldrh	r0, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	8859      	ldrh	r1, [r3, #2]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	889b      	ldrh	r3, [r3, #4]
 8002512:	461a      	mov	r2, r3
 8002514:	f008 fdaa 	bl	800b06c <BSP_LCD_FillCircle>
 8002518:	e00d      	b.n	8002536 <drawBubble+0x5e>
	} else {
		BSP_LCD_SetTextColor( bubble->colour_inactive );
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	899b      	ldrh	r3, [r3, #12]
 800251e:	4618      	mov	r0, r3
 8002520:	f008 fb86 	bl	800ac30 <BSP_LCD_SetTextColor>
		BSP_LCD_FillCircle(bubble->x, bubble->y, bubble->radius);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	8818      	ldrh	r0, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	8859      	ldrh	r1, [r3, #2]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	889b      	ldrh	r3, [r3, #4]
 8002530:	461a      	mov	r2, r3
 8002532:	f008 fd9b 	bl	800b06c <BSP_LCD_FillCircle>
	}

	bubble->redraw = false;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	739a      	strb	r2, [r3, #14]
 800253c:	e000      	b.n	8002540 <drawBubble+0x68>
	if(!bubble->redraw) return;
 800253e:	bf00      	nop

}
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <deselectBubbles>:

void deselectBubbles(uint8_t skip) {
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]

	for(uint8_t i=0; i<num_bubbles; i++) {
 8002552:	2300      	movs	r3, #0
 8002554:	73fb      	strb	r3, [r7, #15]
 8002556:	e01a      	b.n	800258e <deselectBubbles+0x46>
		struct Bubble *b = &ui_bubbles[i];
 8002558:	7bfa      	ldrb	r2, [r7, #15]
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4a11      	ldr	r2, [pc, #68]	; (80025a8 <deselectBubbles+0x60>)
 8002564:	4413      	add	r3, r2
 8002566:	60bb      	str	r3, [r7, #8]
		if(b->type == 1) { // ui bubbles
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	7bdb      	ldrb	r3, [r3, #15]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d10b      	bne.n	8002588 <deselectBubbles+0x40>
			if(i == skip) continue;
 8002570:	7bfa      	ldrb	r2, [r7, #15]
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	429a      	cmp	r2, r3
 8002576:	d006      	beq.n	8002586 <deselectBubbles+0x3e>
			b->selected = false;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2200      	movs	r2, #0
 800257c:	721a      	strb	r2, [r3, #8]
			b->redraw = true;
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2201      	movs	r2, #1
 8002582:	739a      	strb	r2, [r3, #14]
 8002584:	e000      	b.n	8002588 <deselectBubbles+0x40>
			if(i == skip) continue;
 8002586:	bf00      	nop
	for(uint8_t i=0; i<num_bubbles; i++) {
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	3301      	adds	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
 800258e:	4b07      	ldr	r3, [pc, #28]	; (80025ac <deselectBubbles+0x64>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	7bfa      	ldrb	r2, [r7, #15]
 8002594:	429a      	cmp	r2, r3
 8002596:	d3df      	bcc.n	8002558 <deselectBubbles+0x10>
		}
	}

}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000ad8 	.word	0x20000ad8
 80025ac:	20000001 	.word	0x20000001

080025b0 <uiSetup>:

void uiSetup(void) {
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0

	uint16_t radius = 30;
 80025b6:	231e      	movs	r3, #30
 80025b8:	80fb      	strh	r3, [r7, #6]
	uint16_t hit_diameter = 35;
 80025ba:	2323      	movs	r3, #35	; 0x23
 80025bc:	80bb      	strh	r3, [r7, #4]
	uint16_t y = 50;
 80025be:	2332      	movs	r3, #50	; 0x32
 80025c0:	807b      	strh	r3, [r7, #2]

	// left bubble
	ui_bubbles[0].x = 40;
 80025c2:	4b48      	ldr	r3, [pc, #288]	; (80026e4 <uiSetup+0x134>)
 80025c4:	2228      	movs	r2, #40	; 0x28
 80025c6:	801a      	strh	r2, [r3, #0]
	ui_bubbles[0].y = y;
 80025c8:	4a46      	ldr	r2, [pc, #280]	; (80026e4 <uiSetup+0x134>)
 80025ca:	887b      	ldrh	r3, [r7, #2]
 80025cc:	8053      	strh	r3, [r2, #2]
	ui_bubbles[0].radius = radius;
 80025ce:	4a45      	ldr	r2, [pc, #276]	; (80026e4 <uiSetup+0x134>)
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	8093      	strh	r3, [r2, #4]
	ui_bubbles[0].hit_diameter = hit_diameter;
 80025d4:	4a43      	ldr	r2, [pc, #268]	; (80026e4 <uiSetup+0x134>)
 80025d6:	88bb      	ldrh	r3, [r7, #4]
 80025d8:	80d3      	strh	r3, [r2, #6]
	ui_bubbles[0].selected = true;
 80025da:	4b42      	ldr	r3, [pc, #264]	; (80026e4 <uiSetup+0x134>)
 80025dc:	2201      	movs	r2, #1
 80025de:	721a      	strb	r2, [r3, #8]
	ui_bubbles[0].colour_active = LCD_COLOR_CYAN;
 80025e0:	4b40      	ldr	r3, [pc, #256]	; (80026e4 <uiSetup+0x134>)
 80025e2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80025e6:	815a      	strh	r2, [r3, #10]
	ui_bubbles[0].colour_inactive = LCD_COLOR_GREEN;
 80025e8:	4b3e      	ldr	r3, [pc, #248]	; (80026e4 <uiSetup+0x134>)
 80025ea:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80025ee:	819a      	strh	r2, [r3, #12]
	ui_bubbles[0].redraw = true;
 80025f0:	4b3c      	ldr	r3, [pc, #240]	; (80026e4 <uiSetup+0x134>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	739a      	strb	r2, [r3, #14]
	ui_bubbles[0].type = 1;
 80025f6:	4b3b      	ldr	r3, [pc, #236]	; (80026e4 <uiSetup+0x134>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	73da      	strb	r2, [r3, #15]
	ui_bubbles[0].last_selected = 0;
 80025fc:	4b39      	ldr	r3, [pc, #228]	; (80026e4 <uiSetup+0x134>)
 80025fe:	2200      	movs	r2, #0
 8002600:	611a      	str	r2, [r3, #16]

	// middle bubble
	ui_bubbles[1].x = 120;
 8002602:	4b38      	ldr	r3, [pc, #224]	; (80026e4 <uiSetup+0x134>)
 8002604:	2278      	movs	r2, #120	; 0x78
 8002606:	829a      	strh	r2, [r3, #20]
	ui_bubbles[1].y = y;
 8002608:	4a36      	ldr	r2, [pc, #216]	; (80026e4 <uiSetup+0x134>)
 800260a:	887b      	ldrh	r3, [r7, #2]
 800260c:	82d3      	strh	r3, [r2, #22]
	ui_bubbles[1].radius = radius;
 800260e:	4a35      	ldr	r2, [pc, #212]	; (80026e4 <uiSetup+0x134>)
 8002610:	88fb      	ldrh	r3, [r7, #6]
 8002612:	8313      	strh	r3, [r2, #24]
	ui_bubbles[1].hit_diameter = hit_diameter;
 8002614:	4a33      	ldr	r2, [pc, #204]	; (80026e4 <uiSetup+0x134>)
 8002616:	88bb      	ldrh	r3, [r7, #4]
 8002618:	8353      	strh	r3, [r2, #26]
	ui_bubbles[1].selected = false;
 800261a:	4b32      	ldr	r3, [pc, #200]	; (80026e4 <uiSetup+0x134>)
 800261c:	2200      	movs	r2, #0
 800261e:	771a      	strb	r2, [r3, #28]
	ui_bubbles[1].colour_active = LCD_COLOR_LIGHTBLUE;
 8002620:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <uiSetup+0x134>)
 8002622:	f248 421f 	movw	r2, #33823	; 0x841f
 8002626:	83da      	strh	r2, [r3, #30]
	ui_bubbles[1].colour_inactive = LCD_COLOR_GREEN;
 8002628:	4b2e      	ldr	r3, [pc, #184]	; (80026e4 <uiSetup+0x134>)
 800262a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800262e:	841a      	strh	r2, [r3, #32]
	ui_bubbles[1].redraw = true;
 8002630:	4b2c      	ldr	r3, [pc, #176]	; (80026e4 <uiSetup+0x134>)
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	ui_bubbles[1].type = 1;
 8002638:	4b2a      	ldr	r3, [pc, #168]	; (80026e4 <uiSetup+0x134>)
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	ui_bubbles[1].last_selected = 0;
 8002640:	4b28      	ldr	r3, [pc, #160]	; (80026e4 <uiSetup+0x134>)
 8002642:	2200      	movs	r2, #0
 8002644:	625a      	str	r2, [r3, #36]	; 0x24

	// right bubble
	ui_bubbles[2].x = 200;
 8002646:	4b27      	ldr	r3, [pc, #156]	; (80026e4 <uiSetup+0x134>)
 8002648:	22c8      	movs	r2, #200	; 0xc8
 800264a:	851a      	strh	r2, [r3, #40]	; 0x28
	ui_bubbles[2].y = y;
 800264c:	4a25      	ldr	r2, [pc, #148]	; (80026e4 <uiSetup+0x134>)
 800264e:	887b      	ldrh	r3, [r7, #2]
 8002650:	8553      	strh	r3, [r2, #42]	; 0x2a
	ui_bubbles[2].radius = radius;
 8002652:	4a24      	ldr	r2, [pc, #144]	; (80026e4 <uiSetup+0x134>)
 8002654:	88fb      	ldrh	r3, [r7, #6]
 8002656:	8593      	strh	r3, [r2, #44]	; 0x2c
	ui_bubbles[2].hit_diameter = hit_diameter;
 8002658:	4a22      	ldr	r2, [pc, #136]	; (80026e4 <uiSetup+0x134>)
 800265a:	88bb      	ldrh	r3, [r7, #4]
 800265c:	85d3      	strh	r3, [r2, #46]	; 0x2e
	ui_bubbles[2].selected = false;
 800265e:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <uiSetup+0x134>)
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	ui_bubbles[2].colour_active = LCD_COLOR_LIGHTMAGENTA;
 8002666:	4b1f      	ldr	r3, [pc, #124]	; (80026e4 <uiSetup+0x134>)
 8002668:	f64f 421f 	movw	r2, #64543	; 0xfc1f
 800266c:	865a      	strh	r2, [r3, #50]	; 0x32
	ui_bubbles[2].colour_inactive = LCD_COLOR_GREEN;
 800266e:	4b1d      	ldr	r3, [pc, #116]	; (80026e4 <uiSetup+0x134>)
 8002670:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002674:	869a      	strh	r2, [r3, #52]	; 0x34
	ui_bubbles[2].redraw = true;
 8002676:	4b1b      	ldr	r3, [pc, #108]	; (80026e4 <uiSetup+0x134>)
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	ui_bubbles[2].type = 1;
 800267e:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <uiSetup+0x134>)
 8002680:	2201      	movs	r2, #1
 8002682:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	ui_bubbles[2].last_selected = 0;
 8002686:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <uiSetup+0x134>)
 8002688:	2200      	movs	r2, #0
 800268a:	639a      	str	r2, [r3, #56]	; 0x38

	// go bubble
	ui_bubbles[3].x = 120;
 800268c:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <uiSetup+0x134>)
 800268e:	2278      	movs	r2, #120	; 0x78
 8002690:	879a      	strh	r2, [r3, #60]	; 0x3c
	ui_bubbles[3].y = 170;
 8002692:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <uiSetup+0x134>)
 8002694:	22aa      	movs	r2, #170	; 0xaa
 8002696:	87da      	strh	r2, [r3, #62]	; 0x3e
	ui_bubbles[3].radius = 45;
 8002698:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <uiSetup+0x134>)
 800269a:	222d      	movs	r2, #45	; 0x2d
 800269c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	ui_bubbles[3].hit_diameter = 50;
 80026a0:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <uiSetup+0x134>)
 80026a2:	2232      	movs	r2, #50	; 0x32
 80026a4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	ui_bubbles[3].selected = true;
 80026a8:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <uiSetup+0x134>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	ui_bubbles[3].colour_active = LCD_COLOR_GREEN;
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <uiSetup+0x134>)
 80026b2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80026b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	ui_bubbles[3].colour_inactive = LCD_COLOR_BLUE;
 80026ba:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <uiSetup+0x134>)
 80026bc:	221f      	movs	r2, #31
 80026be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	ui_bubbles[3].redraw = true;
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <uiSetup+0x134>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	ui_bubbles[3].type = 2;
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <uiSetup+0x134>)
 80026cc:	2202      	movs	r2, #2
 80026ce:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	ui_bubbles[3].last_selected = 0;
 80026d2:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <uiSetup+0x134>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	64da      	str	r2, [r3, #76]	; 0x4c

}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	20000ad8 	.word	0x20000ad8

080026e8 <reconfigureFromSleep>:





void reconfigureFromSleep(void) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
	/* System is Low Power Run mode when exiting Low Power Sleep mode,
		 disable low power run mode and reset the clock to initialization configuration */
	HAL_PWREx_DisableLowPowerRunMode();
 80026ec:	f00d fee0 	bl	80104b0 <HAL_PWREx_DisableLowPowerRunMode>

	/* Configure the system clock for the RUN mode */
	SystemClock_Config();
 80026f0:	f7ff fe3a 	bl	8002368 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80026f4:	f7ff fe9a 	bl	800242c <PeriphCommonClock_Config>

	/* Re-init GPIOs */
	MX_GPIO_Init();
 80026f8:	f7ff f846 	bl	8001788 <MX_GPIO_Init>

	/* Resume Tick interrupt if disabled prior to Low Power Sleep mode entry */
	HAL_ResumeTick();
 80026fc:	f009 fa92 	bl	800bc24 <HAL_ResumeTick>
}
 8002700:	bf00      	nop
 8002702:	bd80      	pop	{r7, pc}

08002704 <awakeFromSleep>:


void awakeFromSleep(void) {
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0

	// turn on LD1, LD2
	BSP_LED_On(LED2_PIN); // LD1 orange turns on
 8002708:	2000      	movs	r0, #0
 800270a:	f007 fbcb 	bl	8009ea4 <BSP_LED_On>
	HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_RESET); // LD2 green turns on
 800270e:	2200      	movs	r2, #0
 8002710:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002714:	481c      	ldr	r0, [pc, #112]	; (8002788 <awakeFromSleep+0x84>)
 8002716:	f00b fa47 	bl	800dba8 <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 800271a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800271e:	f009 fa4d 	bl	800bbbc <HAL_Delay>

	// turn on lcd
	BSP_LCD_DisplayOn();
 8002722:	f008 fd35 	bl	800b190 <BSP_LCD_DisplayOn>
	DIMMED_SCREEN = false;
 8002726:	4b19      	ldr	r3, [pc, #100]	; (800278c <awakeFromSleep+0x88>)
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 800272c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002730:	f009 fa44 	bl	800bbbc <HAL_Delay>

	// turn on laser and test point
	HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_SET); // laser
 8002734:	2201      	movs	r2, #1
 8002736:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800273a:	4815      	ldr	r0, [pc, #84]	; (8002790 <awakeFromSleep+0x8c>)
 800273c:	f00b fa34 	bl	800dba8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D7_GPIO_Port, ARD_D7_Pin, GPIO_PIN_SET); // test point: timer frequency
 8002740:	2201      	movs	r2, #1
 8002742:	2140      	movs	r1, #64	; 0x40
 8002744:	4813      	ldr	r0, [pc, #76]	; (8002794 <awakeFromSleep+0x90>)
 8002746:	f00b fa2f 	bl	800dba8 <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 800274a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800274e:	f009 fa35 	bl	800bbbc <HAL_Delay>

	// turn on ts
	BSP_TS_ITConfig();
 8002752:	f008 fff9 	bl	800b748 <BSP_TS_ITConfig>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8002756:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800275a:	f009 fa2f 	bl	800bbbc <HAL_Delay>

	// turn on BT pwr transistor
	HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_SET);
 800275e:	2201      	movs	r2, #1
 8002760:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002764:	480b      	ldr	r0, [pc, #44]	; (8002794 <awakeFromSleep+0x90>)
 8002766:	f00b fa1f 	bl	800dba8 <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 800276a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800276e:	f009 fa25 	bl	800bbbc <HAL_Delay>

	// set flags
	BT_ENABLED = true;
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <awakeFromSleep+0x94>)
 8002774:	2201      	movs	r2, #1
 8002776:	701a      	strb	r2, [r3, #0]
	ENTER_SLEEP_MODE = false;
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <awakeFromSleep+0x98>)
 800277a:	2200      	movs	r2, #0
 800277c:	701a      	strb	r2, [r3, #0]
	SLEEP_MODE_ACTIVE = false;
 800277e:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <awakeFromSleep+0x9c>)
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]

}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}
 8002788:	48000400 	.word	0x48000400
 800278c:	20000acd 	.word	0x20000acd
 8002790:	48002000 	.word	0x48002000
 8002794:	48001800 	.word	0x48001800
 8002798:	20000000 	.word	0x20000000
 800279c:	20000acf 	.word	0x20000acf
 80027a0:	20000ace 	.word	0x20000ace

080027a4 <enterSleep>:


void enterSleep(void) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0

	// turn off ts
	BSP_TS_ITDeConfig();
 80027a8:	f008 ffe6 	bl	800b778 <BSP_TS_ITDeConfig>

	// turn off lcd
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80027ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80027b0:	f008 fa5e 	bl	800ac70 <BSP_LCD_Clear>
	if(DIMMED_SCREEN == true) {
 80027b4:	4b26      	ldr	r3, [pc, #152]	; (8002850 <enterSleep+0xac>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <enterSleep+0x1c>
		BSP_LCD_ScreenDimmingOff();
 80027bc:	f008 fe28 	bl	800b410 <BSP_LCD_ScreenDimmingOff>
	}
	BSP_LCD_ScreenDimmingConfig(100, 0, 5, 20);
 80027c0:	2314      	movs	r3, #20
 80027c2:	2205      	movs	r2, #5
 80027c4:	2100      	movs	r1, #0
 80027c6:	2064      	movs	r0, #100	; 0x64
 80027c8:	f008 fcf6 	bl	800b1b8 <BSP_LCD_ScreenDimmingConfig>
	BSP_LCD_ScreenDimmingOn();
 80027cc:	f008 fd26 	bl	800b21c <BSP_LCD_ScreenDimmingOn>
	BSP_LCD_DisplayOff();
 80027d0:	f008 fce8 	bl	800b1a4 <BSP_LCD_DisplayOff>
	DIMMED_SCREEN = true;
 80027d4:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <enterSleep+0xac>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1000); // wait for fade to finish
 80027da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027de:	f009 f9ed 	bl	800bbbc <HAL_Delay>
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_RESET); // force the backlight off
 80027e2:	2200      	movs	r2, #0
 80027e4:	2101      	movs	r1, #1
 80027e6:	481b      	ldr	r0, [pc, #108]	; (8002854 <enterSleep+0xb0>)
 80027e8:	f00b f9de 	bl	800dba8 <HAL_GPIO_WritePin>

	// turn off BT pwr transistor
	HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_RESET);
 80027ec:	2200      	movs	r2, #0
 80027ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027f2:	4819      	ldr	r0, [pc, #100]	; (8002858 <enterSleep+0xb4>)
 80027f4:	f00b f9d8 	bl	800dba8 <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 80027f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027fc:	f009 f9de 	bl	800bbbc <HAL_Delay>

	// turn off LD1, LD2
	BSP_LED_Off(LED2_PIN); // LD1 orange turns off
 8002800:	2000      	movs	r0, #0
 8002802:	f007 fb71 	bl	8009ee8 <BSP_LED_Off>
	HAL_GPIO_WritePin(LED2_GPIO_PORT, LED2_PIN, GPIO_PIN_SET); // LD2 green turns off
 8002806:	2201      	movs	r2, #1
 8002808:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800280c:	4813      	ldr	r0, [pc, #76]	; (800285c <enterSleep+0xb8>)
 800280e:	f00b f9cb 	bl	800dba8 <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8002812:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002816:	f009 f9d1 	bl	800bbbc <HAL_Delay>

	// turn off laser and test point
	HAL_GPIO_WritePin(ARD_D4_GPIO_Port, ARD_D4_Pin, GPIO_PIN_RESET); // laser
 800281a:	2200      	movs	r2, #0
 800281c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002820:	480c      	ldr	r0, [pc, #48]	; (8002854 <enterSleep+0xb0>)
 8002822:	f00b f9c1 	bl	800dba8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ARD_D7_GPIO_Port, ARD_D7_Pin, GPIO_PIN_RESET); // test point: timer frequency
 8002826:	2200      	movs	r2, #0
 8002828:	2140      	movs	r1, #64	; 0x40
 800282a:	480b      	ldr	r0, [pc, #44]	; (8002858 <enterSleep+0xb4>)
 800282c:	f00b f9bc 	bl	800dba8 <HAL_GPIO_WritePin>
	if(PWR_ANALYSIS) HAL_Delay(PWR_ANALYSIS_DELAY);
 8002830:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002834:	f009 f9c2 	bl	800bbbc <HAL_Delay>

	// set flags
	BT_ENABLED = false;
 8002838:	4b09      	ldr	r3, [pc, #36]	; (8002860 <enterSleep+0xbc>)
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
	ENTER_SLEEP_MODE = false;
 800283e:	4b09      	ldr	r3, [pc, #36]	; (8002864 <enterSleep+0xc0>)
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
	SLEEP_MODE_ACTIVE = true;
 8002844:	4b08      	ldr	r3, [pc, #32]	; (8002868 <enterSleep+0xc4>)
 8002846:	2201      	movs	r2, #1
 8002848:	701a      	strb	r2, [r3, #0]

}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000acd 	.word	0x20000acd
 8002854:	48002000 	.word	0x48002000
 8002858:	48001800 	.word	0x48001800
 800285c:	48000400 	.word	0x48000400
 8002860:	20000000 	.word	0x20000000
 8002864:	20000acf 	.word	0x20000acf
 8002868:	20000ace 	.word	0x20000ace

0800286c <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	80fb      	strh	r3, [r7, #6]

	// DOWN: enter sleep mode
	// LEFT: wake up (event)
	// RIGHT: toggle bt enabled

	if(GPIO_Pin == JOY_DOWN_Pin) {
 8002876:	88fb      	ldrh	r3, [r7, #6]
 8002878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800287c:	d102      	bne.n	8002884 <HAL_GPIO_EXTI_Callback+0x18>
		// set flag to enter sleep mode
		ENTER_SLEEP_MODE = true;
 800287e:	4b15      	ldr	r3, [pc, #84]	; (80028d4 <HAL_GPIO_EXTI_Callback+0x68>)
 8002880:	2201      	movs	r2, #1
 8002882:	701a      	strb	r2, [r3, #0]
	}

	if(GPIO_Pin == JOY_RIGHT_Pin) {
 8002884:	88fb      	ldrh	r3, [r7, #6]
 8002886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800288a:	d11f      	bne.n	80028cc <HAL_GPIO_EXTI_Callback+0x60>

		if(BT_ENABLED) {
 800288c:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <HAL_GPIO_EXTI_Callback+0x6c>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d006      	beq.n	80028a2 <HAL_GPIO_EXTI_Callback+0x36>
			HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_RESET); // turn off BT pwr transistor
 8002894:	2200      	movs	r2, #0
 8002896:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800289a:	4810      	ldr	r0, [pc, #64]	; (80028dc <HAL_GPIO_EXTI_Callback+0x70>)
 800289c:	f00b f984 	bl	800dba8 <HAL_GPIO_WritePin>
 80028a0:	e005      	b.n	80028ae <HAL_GPIO_EXTI_Callback+0x42>
		} else {
			HAL_GPIO_WritePin(ARD_D2_GPIO_Port, ARD_D2_Pin, GPIO_PIN_SET); // turn on BT pwr transistor
 80028a2:	2201      	movs	r2, #1
 80028a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028a8:	480c      	ldr	r0, [pc, #48]	; (80028dc <HAL_GPIO_EXTI_Callback+0x70>)
 80028aa:	f00b f97d 	bl	800dba8 <HAL_GPIO_WritePin>
		}

		BT_ENABLED = !BT_ENABLED;
 80028ae:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <HAL_GPIO_EXTI_Callback+0x6c>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	bf14      	ite	ne
 80028b6:	2301      	movne	r3, #1
 80028b8:	2300      	moveq	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f083 0301 	eor.w	r3, r3, #1
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	4b03      	ldr	r3, [pc, #12]	; (80028d8 <HAL_GPIO_EXTI_Callback+0x6c>)
 80028ca:	701a      	strb	r2, [r3, #0]

	}

}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000acf 	.word	0x20000acf
 80028d8:	20000000 	.word	0x20000000
 80028dc:	48001800 	.word	0x48001800

080028e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028e4:	b672      	cpsid	i
}
 80028e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028e8:	e7fe      	b.n	80028e8 <Error_Handler+0x8>
	...

080028ec <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80028f0:	4b12      	ldr	r3, [pc, #72]	; (800293c <MX_QUADSPI_Init+0x50>)
 80028f2:	4a13      	ldr	r2, [pc, #76]	; (8002940 <MX_QUADSPI_Init+0x54>)
 80028f4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80028f6:	4b11      	ldr	r3, [pc, #68]	; (800293c <MX_QUADSPI_Init+0x50>)
 80028f8:	2202      	movs	r2, #2
 80028fa:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80028fc:	4b0f      	ldr	r3, [pc, #60]	; (800293c <MX_QUADSPI_Init+0x50>)
 80028fe:	2204      	movs	r2, #4
 8002900:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <MX_QUADSPI_Init+0x50>)
 8002904:	2210      	movs	r2, #16
 8002906:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8002908:	4b0c      	ldr	r3, [pc, #48]	; (800293c <MX_QUADSPI_Init+0x50>)
 800290a:	2217      	movs	r2, #23
 800290c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <MX_QUADSPI_Init+0x50>)
 8002910:	2200      	movs	r2, #0
 8002912:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002914:	4b09      	ldr	r3, [pc, #36]	; (800293c <MX_QUADSPI_Init+0x50>)
 8002916:	2200      	movs	r2, #0
 8002918:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800291a:	4b08      	ldr	r3, [pc, #32]	; (800293c <MX_QUADSPI_Init+0x50>)
 800291c:	2200      	movs	r2, #0
 800291e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8002920:	4b06      	ldr	r3, [pc, #24]	; (800293c <MX_QUADSPI_Init+0x50>)
 8002922:	2200      	movs	r2, #0
 8002924:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002926:	4805      	ldr	r0, [pc, #20]	; (800293c <MX_QUADSPI_Init+0x50>)
 8002928:	f00d fdfa 	bl	8010520 <HAL_QSPI_Init>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8002932:	f7ff ffd5 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000b58 	.word	0x20000b58
 8002940:	a0001000 	.word	0xa0001000

08002944 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08a      	sub	sp, #40	; 0x28
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 0314 	add.w	r3, r7, #20
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a26      	ldr	r2, [pc, #152]	; (80029fc <HAL_QSPI_MspInit+0xb8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d145      	bne.n	80029f2 <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002966:	4b26      	ldr	r3, [pc, #152]	; (8002a00 <HAL_QSPI_MspInit+0xbc>)
 8002968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800296a:	4a25      	ldr	r2, [pc, #148]	; (8002a00 <HAL_QSPI_MspInit+0xbc>)
 800296c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002970:	6513      	str	r3, [r2, #80]	; 0x50
 8002972:	4b23      	ldr	r3, [pc, #140]	; (8002a00 <HAL_QSPI_MspInit+0xbc>)
 8002974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800297e:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <HAL_QSPI_MspInit+0xbc>)
 8002980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002982:	4a1f      	ldr	r2, [pc, #124]	; (8002a00 <HAL_QSPI_MspInit+0xbc>)
 8002984:	f043 0302 	orr.w	r3, r3, #2
 8002988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800298a:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <HAL_QSPI_MspInit+0xbc>)
 800298c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002996:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <HAL_QSPI_MspInit+0xbc>)
 8002998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800299a:	4a19      	ldr	r2, [pc, #100]	; (8002a00 <HAL_QSPI_MspInit+0xbc>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029a2:	4b17      	ldr	r3, [pc, #92]	; (8002a00 <HAL_QSPI_MspInit+0xbc>)
 80029a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 80029ae:	f640 0303 	movw	r3, #2051	; 0x803
 80029b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b4:	2302      	movs	r3, #2
 80029b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029bc:	2303      	movs	r3, #3
 80029be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80029c0:	230a      	movs	r3, #10
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c4:	f107 0314 	add.w	r3, r7, #20
 80029c8:	4619      	mov	r1, r3
 80029ca:	480e      	ldr	r0, [pc, #56]	; (8002a04 <HAL_QSPI_MspInit+0xc0>)
 80029cc:	f00a fe68 	bl	800d6a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 80029d0:	23c8      	movs	r3, #200	; 0xc8
 80029d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d4:	2302      	movs	r3, #2
 80029d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029dc:	2303      	movs	r3, #3
 80029de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80029e0:	230a      	movs	r3, #10
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e4:	f107 0314 	add.w	r3, r7, #20
 80029e8:	4619      	mov	r1, r3
 80029ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029ee:	f00a fe57 	bl	800d6a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 80029f2:	bf00      	nop
 80029f4:	3728      	adds	r7, #40	; 0x28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	a0001000 	.word	0xa0001000
 8002a00:	40021000 	.word	0x40021000
 8002a04:	48000400 	.word	0x48000400

08002a08 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002a0c:	4b4d      	ldr	r3, [pc, #308]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a0e:	4a4e      	ldr	r2, [pc, #312]	; (8002b48 <MX_SAI1_Init+0x140>)
 8002a10:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8002a12:	4b4c      	ldr	r3, [pc, #304]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002a18:	4b4a      	ldr	r3, [pc, #296]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8002a1e:	4b49      	ldr	r3, [pc, #292]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a20:	2240      	movs	r2, #64	; 0x40
 8002a22:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002a24:	4b47      	ldr	r3, [pc, #284]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002a2a:	4b46      	ldr	r3, [pc, #280]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002a30:	4b44      	ldr	r3, [pc, #272]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002a36:	4b43      	ldr	r3, [pc, #268]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002a3c:	4b41      	ldr	r3, [pc, #260]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002a42:	4b40      	ldr	r3, [pc, #256]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002a48:	4b3e      	ldr	r3, [pc, #248]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a4a:	4a40      	ldr	r2, [pc, #256]	; (8002b4c <MX_SAI1_Init+0x144>)
 8002a4c:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002a4e:	4b3d      	ldr	r3, [pc, #244]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002a54:	4b3b      	ldr	r3, [pc, #236]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002a5a:	4b3a      	ldr	r3, [pc, #232]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002a60:	4b38      	ldr	r3, [pc, #224]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8002a66:	4b37      	ldr	r3, [pc, #220]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a68:	2208      	movs	r2, #8
 8002a6a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8002a6c:	4b35      	ldr	r3, [pc, #212]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002a72:	4b34      	ldr	r3, [pc, #208]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002a78:	4b32      	ldr	r3, [pc, #200]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002a7e:	4b31      	ldr	r3, [pc, #196]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8002a84:	4b2f      	ldr	r3, [pc, #188]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002a8a:	4b2e      	ldr	r3, [pc, #184]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8002a90:	4b2c      	ldr	r3, [pc, #176]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8002a96:	4b2b      	ldr	r3, [pc, #172]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8002a9c:	4829      	ldr	r0, [pc, #164]	; (8002b44 <MX_SAI1_Init+0x13c>)
 8002a9e:	f00f ffd3 	bl	8012a48 <HAL_SAI_Init>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8002aa8:	f7ff ff1a 	bl	80028e0 <Error_Handler>
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8002aac:	4b28      	ldr	r3, [pc, #160]	; (8002b50 <MX_SAI1_Init+0x148>)
 8002aae:	4a29      	ldr	r2, [pc, #164]	; (8002b54 <MX_SAI1_Init+0x14c>)
 8002ab0:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8002ab2:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <MX_SAI1_Init+0x148>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002ab8:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <MX_SAI1_Init+0x148>)
 8002aba:	2203      	movs	r2, #3
 8002abc:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8002abe:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <MX_SAI1_Init+0x148>)
 8002ac0:	2240      	movs	r2, #64	; 0x40
 8002ac2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002ac4:	4b22      	ldr	r3, [pc, #136]	; (8002b50 <MX_SAI1_Init+0x148>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002aca:	4b21      	ldr	r3, [pc, #132]	; (8002b50 <MX_SAI1_Init+0x148>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002ad0:	4b1f      	ldr	r3, [pc, #124]	; (8002b50 <MX_SAI1_Init+0x148>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002ad6:	4b1e      	ldr	r3, [pc, #120]	; (8002b50 <MX_SAI1_Init+0x148>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002adc:	4b1c      	ldr	r3, [pc, #112]	; (8002b50 <MX_SAI1_Init+0x148>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002ae2:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <MX_SAI1_Init+0x148>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <MX_SAI1_Init+0x148>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002aee:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <MX_SAI1_Init+0x148>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002af4:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <MX_SAI1_Init+0x148>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <MX_SAI1_Init+0x148>)
 8002afc:	2208      	movs	r2, #8
 8002afe:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8002b00:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <MX_SAI1_Init+0x148>)
 8002b02:	2201      	movs	r2, #1
 8002b04:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <MX_SAI1_Init+0x148>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002b0c:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <MX_SAI1_Init+0x148>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002b12:	4b0f      	ldr	r3, [pc, #60]	; (8002b50 <MX_SAI1_Init+0x148>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8002b18:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <MX_SAI1_Init+0x148>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <MX_SAI1_Init+0x148>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8002b24:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <MX_SAI1_Init+0x148>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <MX_SAI1_Init+0x148>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8002b30:	4807      	ldr	r0, [pc, #28]	; (8002b50 <MX_SAI1_Init+0x148>)
 8002b32:	f00f ff89 	bl	8012a48 <HAL_SAI_Init>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8002b3c:	f7ff fed0 	bl	80028e0 <Error_Handler>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20000ba4 	.word	0x20000ba4
 8002b48:	40015404 	.word	0x40015404
 8002b4c:	0002ee00 	.word	0x0002ee00
 8002b50:	20000c28 	.word	0x20000c28
 8002b54:	40015424 	.word	0x40015424

08002b58 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b08a      	sub	sp, #40	; 0x28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a33      	ldr	r2, [pc, #204]	; (8002c34 <HAL_SAI_MspInit+0xdc>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d135      	bne.n	8002bd6 <HAL_SAI_MspInit+0x7e>
    {
    /* SAI1 clock enable */
    if (SAI1_client == 0)
 8002b6a:	4b33      	ldr	r3, [pc, #204]	; (8002c38 <HAL_SAI_MspInit+0xe0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10b      	bne.n	8002b8a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002b72:	4b32      	ldr	r3, [pc, #200]	; (8002c3c <HAL_SAI_MspInit+0xe4>)
 8002b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b76:	4a31      	ldr	r2, [pc, #196]	; (8002c3c <HAL_SAI_MspInit+0xe4>)
 8002b78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b7c:	6613      	str	r3, [r2, #96]	; 0x60
 8002b7e:	4b2f      	ldr	r3, [pc, #188]	; (8002c3c <HAL_SAI_MspInit+0xe4>)
 8002b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 8002b8a:	4b2b      	ldr	r3, [pc, #172]	; (8002c38 <HAL_SAI_MspInit+0xe0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	4a29      	ldr	r2, [pc, #164]	; (8002c38 <HAL_SAI_MspInit+0xe0>)
 8002b92:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 8002b94:	2354      	movs	r3, #84	; 0x54
 8002b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002ba4:	230d      	movs	r3, #13
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	4619      	mov	r1, r3
 8002bae:	4824      	ldr	r0, [pc, #144]	; (8002c40 <HAL_SAI_MspInit+0xe8>)
 8002bb0:	f00a fd76 	bl	800d6a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002bc6:	230d      	movs	r3, #13
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bca:	f107 0314 	add.w	r3, r7, #20
 8002bce:	4619      	mov	r1, r3
 8002bd0:	481c      	ldr	r0, [pc, #112]	; (8002c44 <HAL_SAI_MspInit+0xec>)
 8002bd2:	f00a fd65 	bl	800d6a0 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a1b      	ldr	r2, [pc, #108]	; (8002c48 <HAL_SAI_MspInit+0xf0>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d124      	bne.n	8002c2a <HAL_SAI_MspInit+0xd2>
    {
      /* SAI1 clock enable */
      if (SAI1_client == 0)
 8002be0:	4b15      	ldr	r3, [pc, #84]	; (8002c38 <HAL_SAI_MspInit+0xe0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10b      	bne.n	8002c00 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002be8:	4b14      	ldr	r3, [pc, #80]	; (8002c3c <HAL_SAI_MspInit+0xe4>)
 8002bea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bec:	4a13      	ldr	r2, [pc, #76]	; (8002c3c <HAL_SAI_MspInit+0xe4>)
 8002bee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002bf2:	6613      	str	r3, [r2, #96]	; 0x60
 8002bf4:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <HAL_SAI_MspInit+0xe4>)
 8002bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8002c00:	4b0d      	ldr	r3, [pc, #52]	; (8002c38 <HAL_SAI_MspInit+0xe0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3301      	adds	r3, #1
 8002c06:	4a0c      	ldr	r2, [pc, #48]	; (8002c38 <HAL_SAI_MspInit+0xe0>)
 8002c08:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8002c0a:	2308      	movs	r3, #8
 8002c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c16:	2300      	movs	r3, #0
 8002c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002c1a:	230d      	movs	r3, #13
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 8002c1e:	f107 0314 	add.w	r3, r7, #20
 8002c22:	4619      	mov	r1, r3
 8002c24:	4806      	ldr	r0, [pc, #24]	; (8002c40 <HAL_SAI_MspInit+0xe8>)
 8002c26:	f00a fd3b 	bl	800d6a0 <HAL_GPIO_Init>

    }
}
 8002c2a:	bf00      	nop
 8002c2c:	3728      	adds	r7, #40	; 0x28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40015404 	.word	0x40015404
 8002c38:	20000cac 	.word	0x20000cac
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	48001000 	.word	0x48001000
 8002c44:	48000400 	.word	0x48000400
 8002c48:	40015424 	.word	0x40015424

08002c4c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002c50:	4b14      	ldr	r3, [pc, #80]	; (8002ca4 <MX_SDMMC1_SD_Init+0x58>)
 8002c52:	4a15      	ldr	r2, [pc, #84]	; (8002ca8 <MX_SDMMC1_SD_Init+0x5c>)
 8002c54:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002c56:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <MX_SDMMC1_SD_Init+0x58>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002c5c:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <MX_SDMMC1_SD_Init+0x58>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <MX_SDMMC1_SD_Init+0x58>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002c68:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <MX_SDMMC1_SD_Init+0x58>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ca4 <MX_SDMMC1_SD_Init+0x58>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <MX_SDMMC1_SD_Init+0x58>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8002c7a:	480a      	ldr	r0, [pc, #40]	; (8002ca4 <MX_SDMMC1_SD_Init+0x58>)
 8002c7c:	f010 f890 	bl	8012da0 <HAL_SD_Init>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8002c86:	f7ff fe2b 	bl	80028e0 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8002c8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c8e:	4805      	ldr	r0, [pc, #20]	; (8002ca4 <MX_SDMMC1_SD_Init+0x58>)
 8002c90:	f010 fb00 	bl	8013294 <HAL_SD_ConfigWideBusOperation>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8002c9a:	f7ff fe21 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000cb0 	.word	0x20000cb0
 8002ca8:	40012800 	.word	0x40012800

08002cac <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	; 0x28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb4:	f107 0314 	add.w	r3, r7, #20
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a25      	ldr	r2, [pc, #148]	; (8002d60 <HAL_SD_MspInit+0xb4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d144      	bne.n	8002d58 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002cce:	4b25      	ldr	r3, [pc, #148]	; (8002d64 <HAL_SD_MspInit+0xb8>)
 8002cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd2:	4a24      	ldr	r2, [pc, #144]	; (8002d64 <HAL_SD_MspInit+0xb8>)
 8002cd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cd8:	6613      	str	r3, [r2, #96]	; 0x60
 8002cda:	4b22      	ldr	r3, [pc, #136]	; (8002d64 <HAL_SD_MspInit+0xb8>)
 8002cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ce6:	4b1f      	ldr	r3, [pc, #124]	; (8002d64 <HAL_SD_MspInit+0xb8>)
 8002ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cea:	4a1e      	ldr	r2, [pc, #120]	; (8002d64 <HAL_SD_MspInit+0xb8>)
 8002cec:	f043 0308 	orr.w	r3, r3, #8
 8002cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cf2:	4b1c      	ldr	r3, [pc, #112]	; (8002d64 <HAL_SD_MspInit+0xb8>)
 8002cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfe:	4b19      	ldr	r3, [pc, #100]	; (8002d64 <HAL_SD_MspInit+0xb8>)
 8002d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d02:	4a18      	ldr	r2, [pc, #96]	; (8002d64 <HAL_SD_MspInit+0xb8>)
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d0a:	4b16      	ldr	r3, [pc, #88]	; (8002d64 <HAL_SD_MspInit+0xb8>)
 8002d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8002d16:	2304      	movs	r3, #4
 8002d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d22:	2303      	movs	r3, #3
 8002d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002d26:	230c      	movs	r3, #12
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8002d2a:	f107 0314 	add.w	r3, r7, #20
 8002d2e:	4619      	mov	r1, r3
 8002d30:	480d      	ldr	r0, [pc, #52]	; (8002d68 <HAL_SD_MspInit+0xbc>)
 8002d32:	f00a fcb5 	bl	800d6a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 8002d36:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002d3a:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d44:	2303      	movs	r3, #3
 8002d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002d48:	230c      	movs	r3, #12
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d4c:	f107 0314 	add.w	r3, r7, #20
 8002d50:	4619      	mov	r1, r3
 8002d52:	4806      	ldr	r0, [pc, #24]	; (8002d6c <HAL_SD_MspInit+0xc0>)
 8002d54:	f00a fca4 	bl	800d6a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002d58:	bf00      	nop
 8002d5a:	3728      	adds	r7, #40	; 0x28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40012800 	.word	0x40012800
 8002d64:	40021000 	.word	0x40021000
 8002d68:	48000c00 	.word	0x48000c00
 8002d6c:	48000800 	.word	0x48000800

08002d70 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002d74:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <MX_SPI1_Init+0x74>)
 8002d76:	4a1c      	ldr	r2, [pc, #112]	; (8002de8 <MX_SPI1_Init+0x78>)
 8002d78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d7a:	4b1a      	ldr	r3, [pc, #104]	; (8002de4 <MX_SPI1_Init+0x74>)
 8002d7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d82:	4b18      	ldr	r3, [pc, #96]	; (8002de4 <MX_SPI1_Init+0x74>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002d88:	4b16      	ldr	r3, [pc, #88]	; (8002de4 <MX_SPI1_Init+0x74>)
 8002d8a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002d8e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d90:	4b14      	ldr	r3, [pc, #80]	; (8002de4 <MX_SPI1_Init+0x74>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d96:	4b13      	ldr	r3, [pc, #76]	; (8002de4 <MX_SPI1_Init+0x74>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002d9c:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <MX_SPI1_Init+0x74>)
 8002d9e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002da2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <MX_SPI1_Init+0x74>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002daa:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <MX_SPI1_Init+0x74>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002db0:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <MX_SPI1_Init+0x74>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002db6:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <MX_SPI1_Init+0x74>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002dbc:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <MX_SPI1_Init+0x74>)
 8002dbe:	2207      	movs	r2, #7
 8002dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002dc2:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <MX_SPI1_Init+0x74>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <MX_SPI1_Init+0x74>)
 8002dca:	2208      	movs	r2, #8
 8002dcc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002dce:	4805      	ldr	r0, [pc, #20]	; (8002de4 <MX_SPI1_Init+0x74>)
 8002dd0:	f010 fdd8 	bl	8013984 <HAL_SPI_Init>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002dda:	f7ff fd81 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000d34 	.word	0x20000d34
 8002de8:	40013000 	.word	0x40013000

08002dec <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002df0:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <MX_SPI2_Init+0x74>)
 8002df2:	4a1c      	ldr	r2, [pc, #112]	; (8002e64 <MX_SPI2_Init+0x78>)
 8002df4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002df6:	4b1a      	ldr	r3, [pc, #104]	; (8002e60 <MX_SPI2_Init+0x74>)
 8002df8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002dfc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002dfe:	4b18      	ldr	r3, [pc, #96]	; (8002e60 <MX_SPI2_Init+0x74>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002e04:	4b16      	ldr	r3, [pc, #88]	; (8002e60 <MX_SPI2_Init+0x74>)
 8002e06:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002e0a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e0c:	4b14      	ldr	r3, [pc, #80]	; (8002e60 <MX_SPI2_Init+0x74>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e12:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <MX_SPI2_Init+0x74>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002e18:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <MX_SPI2_Init+0x74>)
 8002e1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e1e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e20:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <MX_SPI2_Init+0x74>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e26:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <MX_SPI2_Init+0x74>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <MX_SPI2_Init+0x74>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e32:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <MX_SPI2_Init+0x74>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <MX_SPI2_Init+0x74>)
 8002e3a:	2207      	movs	r2, #7
 8002e3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e3e:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <MX_SPI2_Init+0x74>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <MX_SPI2_Init+0x74>)
 8002e46:	2208      	movs	r2, #8
 8002e48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e4a:	4805      	ldr	r0, [pc, #20]	; (8002e60 <MX_SPI2_Init+0x74>)
 8002e4c:	f010 fd9a 	bl	8013984 <HAL_SPI_Init>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002e56:	f7ff fd43 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000d98 	.word	0x20000d98
 8002e64:	40003800 	.word	0x40003800

08002e68 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08e      	sub	sp, #56	; 0x38
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	609a      	str	r2, [r3, #8]
 8002e7c:	60da      	str	r2, [r3, #12]
 8002e7e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a4b      	ldr	r2, [pc, #300]	; (8002fb4 <HAL_SPI_MspInit+0x14c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d146      	bne.n	8002f18 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e8a:	4b4b      	ldr	r3, [pc, #300]	; (8002fb8 <HAL_SPI_MspInit+0x150>)
 8002e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e8e:	4a4a      	ldr	r2, [pc, #296]	; (8002fb8 <HAL_SPI_MspInit+0x150>)
 8002e90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e94:	6613      	str	r3, [r2, #96]	; 0x60
 8002e96:	4b48      	ldr	r3, [pc, #288]	; (8002fb8 <HAL_SPI_MspInit+0x150>)
 8002e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e9e:	623b      	str	r3, [r7, #32]
 8002ea0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea2:	4b45      	ldr	r3, [pc, #276]	; (8002fb8 <HAL_SPI_MspInit+0x150>)
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea6:	4a44      	ldr	r2, [pc, #272]	; (8002fb8 <HAL_SPI_MspInit+0x150>)
 8002ea8:	f043 0302 	orr.w	r3, r3, #2
 8002eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eae:	4b42      	ldr	r3, [pc, #264]	; (8002fb8 <HAL_SPI_MspInit+0x150>)
 8002eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	61fb      	str	r3, [r7, #28]
 8002eb8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eba:	4b3f      	ldr	r3, [pc, #252]	; (8002fb8 <HAL_SPI_MspInit+0x150>)
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebe:	4a3e      	ldr	r2, [pc, #248]	; (8002fb8 <HAL_SPI_MspInit+0x150>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ec6:	4b3c      	ldr	r3, [pc, #240]	; (8002fb8 <HAL_SPI_MspInit+0x150>)
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	69bb      	ldr	r3, [r7, #24]
    PB4 (NJTRST)     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8002ed2:	2330      	movs	r3, #48	; 0x30
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ee2:	2305      	movs	r3, #5
 8002ee4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eea:	4619      	mov	r1, r3
 8002eec:	4833      	ldr	r0, [pc, #204]	; (8002fbc <HAL_SPI_MspInit+0x154>)
 8002eee:	f00a fbd7 	bl	800d6a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 8002ef2:	f248 0320 	movw	r3, #32800	; 0x8020
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f00:	2303      	movs	r3, #3
 8002f02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f04:	2305      	movs	r3, #5
 8002f06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f12:	f00a fbc5 	bl	800d6a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002f16:	e049      	b.n	8002fac <HAL_SPI_MspInit+0x144>
  else if(spiHandle->Instance==SPI2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a28      	ldr	r2, [pc, #160]	; (8002fc0 <HAL_SPI_MspInit+0x158>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d144      	bne.n	8002fac <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f22:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <HAL_SPI_MspInit+0x150>)
 8002f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f26:	4a24      	ldr	r2, [pc, #144]	; (8002fb8 <HAL_SPI_MspInit+0x150>)
 8002f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f2c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f2e:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <HAL_SPI_MspInit+0x150>)
 8002f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002f3a:	4b1f      	ldr	r3, [pc, #124]	; (8002fb8 <HAL_SPI_MspInit+0x150>)
 8002f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3e:	4a1e      	ldr	r2, [pc, #120]	; (8002fb8 <HAL_SPI_MspInit+0x150>)
 8002f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f46:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <HAL_SPI_MspInit+0x150>)
 8002f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f52:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <HAL_SPI_MspInit+0x150>)
 8002f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f56:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <HAL_SPI_MspInit+0x150>)
 8002f58:	f043 0302 	orr.w	r3, r3, #2
 8002f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f5e:	4b16      	ldr	r3, [pc, #88]	; (8002fb8 <HAL_SPI_MspInit+0x150>)
 8002f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8002f6a:	2306      	movs	r3, #6
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6e:	2302      	movs	r3, #2
 8002f70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f76:	2303      	movs	r3, #3
 8002f78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f7a:	2305      	movs	r3, #5
 8002f7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f82:	4619      	mov	r1, r3
 8002f84:	480f      	ldr	r0, [pc, #60]	; (8002fc4 <HAL_SPI_MspInit+0x15c>)
 8002f86:	f00a fb8b 	bl	800d6a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8002f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f90:	2302      	movs	r3, #2
 8002f92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f9c:	2305      	movs	r3, #5
 8002f9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4805      	ldr	r0, [pc, #20]	; (8002fbc <HAL_SPI_MspInit+0x154>)
 8002fa8:	f00a fb7a 	bl	800d6a0 <HAL_GPIO_Init>
}
 8002fac:	bf00      	nop
 8002fae:	3738      	adds	r7, #56	; 0x38
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40013000 	.word	0x40013000
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	48000400 	.word	0x48000400
 8002fc0:	40003800 	.word	0x40003800
 8002fc4:	48002000 	.word	0x48002000

08002fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fce:	4b0f      	ldr	r3, [pc, #60]	; (800300c <HAL_MspInit+0x44>)
 8002fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fd2:	4a0e      	ldr	r2, [pc, #56]	; (800300c <HAL_MspInit+0x44>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	6613      	str	r3, [r2, #96]	; 0x60
 8002fda:	4b0c      	ldr	r3, [pc, #48]	; (800300c <HAL_MspInit+0x44>)
 8002fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	607b      	str	r3, [r7, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fe6:	4b09      	ldr	r3, [pc, #36]	; (800300c <HAL_MspInit+0x44>)
 8002fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fea:	4a08      	ldr	r2, [pc, #32]	; (800300c <HAL_MspInit+0x44>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ff2:	4b06      	ldr	r3, [pc, #24]	; (800300c <HAL_MspInit+0x44>)
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	40021000 	.word	0x40021000

08003010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003014:	e7fe      	b.n	8003014 <NMI_Handler+0x4>

08003016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003016:	b480      	push	{r7}
 8003018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800301a:	e7fe      	b.n	800301a <HardFault_Handler+0x4>

0800301c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003020:	e7fe      	b.n	8003020 <MemManage_Handler+0x4>

08003022 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003026:	e7fe      	b.n	8003026 <BusFault_Handler+0x4>

08003028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800302c:	e7fe      	b.n	800302c <UsageFault_Handler+0x4>

0800302e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800302e:	b480      	push	{r7}
 8003030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003032:	bf00      	nop
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800304a:	b480      	push	{r7}
 800304c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800304e:	bf00      	nop
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800305c:	f008 fd8e 	bl	800bb7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003060:	bf00      	nop
 8003062:	bd80      	pop	{r7, pc}

08003064 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MFX_IRQ_OUT_Pin);
 8003068:	2020      	movs	r0, #32
 800306a:	f00a fdcf 	bl	800dc0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}

08003072 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(JOY_DOWN_Pin);
 8003076:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800307a:	f00a fdc7 	bl	800dc0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(JOY_RIGHT_Pin);
 800307e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003082:	f00a fdc3 	bl	800dc0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CTP_INT_Pin);
 8003086:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800308a:	f00a fdbf 	bl	800dc0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003098:	4802      	ldr	r0, [pc, #8]	; (80030a4 <TIM6_DAC_IRQHandler+0x10>)
 800309a:	f011 f819 	bl	80140d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20000e00 	.word	0x20000e00

080030a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80030ac:	4802      	ldr	r0, [pc, #8]	; (80030b8 <OTG_FS_IRQHandler+0x10>)
 80030ae:	f00c f8bb 	bl	800f228 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	2000271c 	.word	0x2000271c

080030bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	e00a      	b.n	80030e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030ce:	f3af 8000 	nop.w
 80030d2:	4601      	mov	r1, r0
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	60ba      	str	r2, [r7, #8]
 80030da:	b2ca      	uxtb	r2, r1
 80030dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	3301      	adds	r3, #1
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	dbf0      	blt.n	80030ce <_read+0x12>
	}

return len;
 80030ec:	687b      	ldr	r3, [r7, #4]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	e009      	b.n	800311c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	60ba      	str	r2, [r7, #8]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	3301      	adds	r3, #1
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	429a      	cmp	r2, r3
 8003122:	dbf1      	blt.n	8003108 <_write+0x12>
	}
	return len;
 8003124:	687b      	ldr	r3, [r7, #4]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <_close>:

int _close(int file)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
	return -1;
 8003136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800313a:	4618      	mov	r0, r3
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003156:	605a      	str	r2, [r3, #4]
	return 0;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <_isatty>:

int _isatty(int file)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
	return 1;
 800316e:	2301      	movs	r3, #1
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
	return 0;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031a0:	4a14      	ldr	r2, [pc, #80]	; (80031f4 <_sbrk+0x5c>)
 80031a2:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <_sbrk+0x60>)
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031ac:	4b13      	ldr	r3, [pc, #76]	; (80031fc <_sbrk+0x64>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d102      	bne.n	80031ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031b4:	4b11      	ldr	r3, [pc, #68]	; (80031fc <_sbrk+0x64>)
 80031b6:	4a12      	ldr	r2, [pc, #72]	; (8003200 <_sbrk+0x68>)
 80031b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031ba:	4b10      	ldr	r3, [pc, #64]	; (80031fc <_sbrk+0x64>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4413      	add	r3, r2
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d207      	bcs.n	80031d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031c8:	f016 fe52 	bl	8019e70 <__errno>
 80031cc:	4603      	mov	r3, r0
 80031ce:	220c      	movs	r2, #12
 80031d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031d6:	e009      	b.n	80031ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031d8:	4b08      	ldr	r3, [pc, #32]	; (80031fc <_sbrk+0x64>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031de:	4b07      	ldr	r3, [pc, #28]	; (80031fc <_sbrk+0x64>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4413      	add	r3, r2
 80031e6:	4a05      	ldr	r2, [pc, #20]	; (80031fc <_sbrk+0x64>)
 80031e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ea:	68fb      	ldr	r3, [r7, #12]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	20050000 	.word	0x20050000
 80031f8:	00000400 	.word	0x00000400
 80031fc:	20000dfc 	.word	0x20000dfc
 8003200:	20002e58 	.word	0x20002e58

08003204 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003208:	4b06      	ldr	r3, [pc, #24]	; (8003224 <SystemInit+0x20>)
 800320a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320e:	4a05      	ldr	r2, [pc, #20]	; (8003224 <SystemInit+0x20>)
 8003210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800322e:	1d3b      	adds	r3, r7, #4
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003238:	4b14      	ldr	r3, [pc, #80]	; (800328c <MX_TIM6_Init+0x64>)
 800323a:	4a15      	ldr	r2, [pc, #84]	; (8003290 <MX_TIM6_Init+0x68>)
 800323c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100-1;
 800323e:	4b13      	ldr	r3, [pc, #76]	; (800328c <MX_TIM6_Init+0x64>)
 8003240:	2263      	movs	r2, #99	; 0x63
 8003242:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003244:	4b11      	ldr	r3, [pc, #68]	; (800328c <MX_TIM6_Init+0x64>)
 8003246:	2200      	movs	r2, #0
 8003248:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19200-1;
 800324a:	4b10      	ldr	r3, [pc, #64]	; (800328c <MX_TIM6_Init+0x64>)
 800324c:	f644 22ff 	movw	r2, #19199	; 0x4aff
 8003250:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003252:	4b0e      	ldr	r3, [pc, #56]	; (800328c <MX_TIM6_Init+0x64>)
 8003254:	2200      	movs	r2, #0
 8003256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003258:	480c      	ldr	r0, [pc, #48]	; (800328c <MX_TIM6_Init+0x64>)
 800325a:	f010 fc7e 	bl	8013b5a <HAL_TIM_Base_Init>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003264:	f7ff fb3c 	bl	80028e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003268:	2300      	movs	r3, #0
 800326a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003270:	1d3b      	adds	r3, r7, #4
 8003272:	4619      	mov	r1, r3
 8003274:	4805      	ldr	r0, [pc, #20]	; (800328c <MX_TIM6_Init+0x64>)
 8003276:	f011 fd1d 	bl	8014cb4 <HAL_TIMEx_MasterConfigSynchronization>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003280:	f7ff fb2e 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003284:	bf00      	nop
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000e00 	.word	0x20000e00
 8003290:	40001000 	.word	0x40001000

08003294 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a0d      	ldr	r2, [pc, #52]	; (80032d8 <HAL_TIM_Base_MspInit+0x44>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d113      	bne.n	80032ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80032a6:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <HAL_TIM_Base_MspInit+0x48>)
 80032a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032aa:	4a0c      	ldr	r2, [pc, #48]	; (80032dc <HAL_TIM_Base_MspInit+0x48>)
 80032ac:	f043 0310 	orr.w	r3, r3, #16
 80032b0:	6593      	str	r3, [r2, #88]	; 0x58
 80032b2:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <HAL_TIM_Base_MspInit+0x48>)
 80032b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80032be:	2200      	movs	r2, #0
 80032c0:	2100      	movs	r1, #0
 80032c2:	2036      	movs	r0, #54	; 0x36
 80032c4:	f00a f815 	bl	800d2f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80032c8:	2036      	movs	r0, #54	; 0x36
 80032ca:	f00a f82e 	bl	800d32a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80032ce:	bf00      	nop
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40001000 	.word	0x40001000
 80032dc:	40021000 	.word	0x40021000

080032e0 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80032e4:	4b12      	ldr	r3, [pc, #72]	; (8003330 <MX_LPUART1_UART_Init+0x50>)
 80032e6:	4a13      	ldr	r2, [pc, #76]	; (8003334 <MX_LPUART1_UART_Init+0x54>)
 80032e8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80032ea:	4b11      	ldr	r3, [pc, #68]	; (8003330 <MX_LPUART1_UART_Init+0x50>)
 80032ec:	4a12      	ldr	r2, [pc, #72]	; (8003338 <MX_LPUART1_UART_Init+0x58>)
 80032ee:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032f0:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <MX_LPUART1_UART_Init+0x50>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80032f6:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <MX_LPUART1_UART_Init+0x50>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80032fc:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <MX_LPUART1_UART_Init+0x50>)
 80032fe:	2200      	movs	r2, #0
 8003300:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003302:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <MX_LPUART1_UART_Init+0x50>)
 8003304:	220c      	movs	r2, #12
 8003306:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003308:	4b09      	ldr	r3, [pc, #36]	; (8003330 <MX_LPUART1_UART_Init+0x50>)
 800330a:	2200      	movs	r2, #0
 800330c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800330e:	4b08      	ldr	r3, [pc, #32]	; (8003330 <MX_LPUART1_UART_Init+0x50>)
 8003310:	2200      	movs	r2, #0
 8003312:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <MX_LPUART1_UART_Init+0x50>)
 8003316:	2200      	movs	r2, #0
 8003318:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800331a:	4805      	ldr	r0, [pc, #20]	; (8003330 <MX_LPUART1_UART_Init+0x50>)
 800331c:	f011 fd70 	bl	8014e00 <HAL_UART_Init>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <MX_LPUART1_UART_Init+0x4a>
  {
    Error_Handler();
 8003326:	f7ff fadb 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800332a:	bf00      	nop
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20000e4c 	.word	0x20000e4c
 8003334:	40008000 	.word	0x40008000
 8003338:	00033324 	.word	0x00033324

0800333c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003340:	4b14      	ldr	r3, [pc, #80]	; (8003394 <MX_USART1_UART_Init+0x58>)
 8003342:	4a15      	ldr	r2, [pc, #84]	; (8003398 <MX_USART1_UART_Init+0x5c>)
 8003344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003346:	4b13      	ldr	r3, [pc, #76]	; (8003394 <MX_USART1_UART_Init+0x58>)
 8003348:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800334c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800334e:	4b11      	ldr	r3, [pc, #68]	; (8003394 <MX_USART1_UART_Init+0x58>)
 8003350:	2200      	movs	r2, #0
 8003352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003354:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <MX_USART1_UART_Init+0x58>)
 8003356:	2200      	movs	r2, #0
 8003358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800335a:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <MX_USART1_UART_Init+0x58>)
 800335c:	2200      	movs	r2, #0
 800335e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003360:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <MX_USART1_UART_Init+0x58>)
 8003362:	220c      	movs	r2, #12
 8003364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003366:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <MX_USART1_UART_Init+0x58>)
 8003368:	2200      	movs	r2, #0
 800336a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800336c:	4b09      	ldr	r3, [pc, #36]	; (8003394 <MX_USART1_UART_Init+0x58>)
 800336e:	2200      	movs	r2, #0
 8003370:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003372:	4b08      	ldr	r3, [pc, #32]	; (8003394 <MX_USART1_UART_Init+0x58>)
 8003374:	2200      	movs	r2, #0
 8003376:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003378:	4b06      	ldr	r3, [pc, #24]	; (8003394 <MX_USART1_UART_Init+0x58>)
 800337a:	2200      	movs	r2, #0
 800337c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800337e:	4805      	ldr	r0, [pc, #20]	; (8003394 <MX_USART1_UART_Init+0x58>)
 8003380:	f011 fd3e 	bl	8014e00 <HAL_UART_Init>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800338a:	f7ff faa9 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000ed0 	.word	0x20000ed0
 8003398:	40013800 	.word	0x40013800

0800339c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033a0:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <MX_USART2_UART_Init+0x58>)
 80033a2:	4a15      	ldr	r2, [pc, #84]	; (80033f8 <MX_USART2_UART_Init+0x5c>)
 80033a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80033a6:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <MX_USART2_UART_Init+0x58>)
 80033a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033ae:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <MX_USART2_UART_Init+0x58>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033b4:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <MX_USART2_UART_Init+0x58>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033ba:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <MX_USART2_UART_Init+0x58>)
 80033bc:	2200      	movs	r2, #0
 80033be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033c0:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <MX_USART2_UART_Init+0x58>)
 80033c2:	220c      	movs	r2, #12
 80033c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033c6:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <MX_USART2_UART_Init+0x58>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033cc:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <MX_USART2_UART_Init+0x58>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033d2:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <MX_USART2_UART_Init+0x58>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <MX_USART2_UART_Init+0x58>)
 80033da:	2200      	movs	r2, #0
 80033dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033de:	4805      	ldr	r0, [pc, #20]	; (80033f4 <MX_USART2_UART_Init+0x58>)
 80033e0:	f011 fd0e 	bl	8014e00 <HAL_UART_Init>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80033ea:	f7ff fa79 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000f54 	.word	0x20000f54
 80033f8:	40004400 	.word	0x40004400

080033fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b0b2      	sub	sp, #200	; 0xc8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003404:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	605a      	str	r2, [r3, #4]
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	60da      	str	r2, [r3, #12]
 8003412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003414:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003418:	228c      	movs	r2, #140	; 0x8c
 800341a:	2100      	movs	r1, #0
 800341c:	4618      	mov	r0, r3
 800341e:	f016 fd5f 	bl	8019ee0 <memset>
  if(uartHandle->Instance==LPUART1)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a86      	ldr	r2, [pc, #536]	; (8003640 <HAL_UART_MspInit+0x244>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d13e      	bne.n	80034aa <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800342c:	2320      	movs	r3, #32
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003430:	2300      	movs	r3, #0
 8003432:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003434:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003438:	4618      	mov	r0, r3
 800343a:	f00d ff71 	bl	8011320 <HAL_RCCEx_PeriphCLKConfig>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003444:	f7ff fa4c 	bl	80028e0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003448:	4b7e      	ldr	r3, [pc, #504]	; (8003644 <HAL_UART_MspInit+0x248>)
 800344a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344c:	4a7d      	ldr	r2, [pc, #500]	; (8003644 <HAL_UART_MspInit+0x248>)
 800344e:	f043 0301 	orr.w	r3, r3, #1
 8003452:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003454:	4b7b      	ldr	r3, [pc, #492]	; (8003644 <HAL_UART_MspInit+0x248>)
 8003456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	627b      	str	r3, [r7, #36]	; 0x24
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003460:	4b78      	ldr	r3, [pc, #480]	; (8003644 <HAL_UART_MspInit+0x248>)
 8003462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003464:	4a77      	ldr	r2, [pc, #476]	; (8003644 <HAL_UART_MspInit+0x248>)
 8003466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800346a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800346c:	4b75      	ldr	r3, [pc, #468]	; (8003644 <HAL_UART_MspInit+0x248>)
 800346e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003474:	623b      	str	r3, [r7, #32]
 8003476:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableVddIO2();
 8003478:	f00c fffa 	bl	8010470 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 800347c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003480:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348a:	2300      	movs	r3, #0
 800348c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003490:	2303      	movs	r3, #3
 8003492:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003496:	2308      	movs	r3, #8
 8003498:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800349c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80034a0:	4619      	mov	r1, r3
 80034a2:	4869      	ldr	r0, [pc, #420]	; (8003648 <HAL_UART_MspInit+0x24c>)
 80034a4:	f00a f8fc 	bl	800d6a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80034a8:	e0c6      	b.n	8003638 <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART1)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a67      	ldr	r2, [pc, #412]	; (800364c <HAL_UART_MspInit+0x250>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d15f      	bne.n	8003574 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80034b4:	2301      	movs	r3, #1
 80034b6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80034b8:	2300      	movs	r3, #0
 80034ba:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034c0:	4618      	mov	r0, r3
 80034c2:	f00d ff2d 	bl	8011320 <HAL_RCCEx_PeriphCLKConfig>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 80034cc:	f7ff fa08 	bl	80028e0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80034d0:	4b5c      	ldr	r3, [pc, #368]	; (8003644 <HAL_UART_MspInit+0x248>)
 80034d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d4:	4a5b      	ldr	r2, [pc, #364]	; (8003644 <HAL_UART_MspInit+0x248>)
 80034d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034da:	6613      	str	r3, [r2, #96]	; 0x60
 80034dc:	4b59      	ldr	r3, [pc, #356]	; (8003644 <HAL_UART_MspInit+0x248>)
 80034de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034e4:	61fb      	str	r3, [r7, #28]
 80034e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e8:	4b56      	ldr	r3, [pc, #344]	; (8003644 <HAL_UART_MspInit+0x248>)
 80034ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ec:	4a55      	ldr	r2, [pc, #340]	; (8003644 <HAL_UART_MspInit+0x248>)
 80034ee:	f043 0302 	orr.w	r3, r3, #2
 80034f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034f4:	4b53      	ldr	r3, [pc, #332]	; (8003644 <HAL_UART_MspInit+0x248>)
 80034f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	61bb      	str	r3, [r7, #24]
 80034fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003500:	4b50      	ldr	r3, [pc, #320]	; (8003644 <HAL_UART_MspInit+0x248>)
 8003502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003504:	4a4f      	ldr	r2, [pc, #316]	; (8003644 <HAL_UART_MspInit+0x248>)
 8003506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800350a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800350c:	4b4d      	ldr	r3, [pc, #308]	; (8003644 <HAL_UART_MspInit+0x248>)
 800350e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8003518:	f00c ffaa 	bl	8010470 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 800351c:	2340      	movs	r3, #64	; 0x40
 800351e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003522:	2302      	movs	r3, #2
 8003524:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003528:	2300      	movs	r3, #0
 800352a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800352e:	2303      	movs	r3, #3
 8003530:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003534:	2307      	movs	r3, #7
 8003536:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 800353a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800353e:	4619      	mov	r1, r3
 8003540:	4843      	ldr	r0, [pc, #268]	; (8003650 <HAL_UART_MspInit+0x254>)
 8003542:	f00a f8ad 	bl	800d6a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 8003546:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800354a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354e:	2302      	movs	r3, #2
 8003550:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003554:	2300      	movs	r3, #0
 8003556:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800355a:	2303      	movs	r3, #3
 800355c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003560:	2307      	movs	r3, #7
 8003562:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003566:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800356a:	4619      	mov	r1, r3
 800356c:	4836      	ldr	r0, [pc, #216]	; (8003648 <HAL_UART_MspInit+0x24c>)
 800356e:	f00a f897 	bl	800d6a0 <HAL_GPIO_Init>
}
 8003572:	e061      	b.n	8003638 <HAL_UART_MspInit+0x23c>
  else if(uartHandle->Instance==USART2)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a36      	ldr	r2, [pc, #216]	; (8003654 <HAL_UART_MspInit+0x258>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d15c      	bne.n	8003638 <HAL_UART_MspInit+0x23c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800357e:	2302      	movs	r3, #2
 8003580:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003582:	2300      	movs	r3, #0
 8003584:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003586:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800358a:	4618      	mov	r0, r3
 800358c:	f00d fec8 	bl	8011320 <HAL_RCCEx_PeriphCLKConfig>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8003596:	f7ff f9a3 	bl	80028e0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800359a:	4b2a      	ldr	r3, [pc, #168]	; (8003644 <HAL_UART_MspInit+0x248>)
 800359c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359e:	4a29      	ldr	r2, [pc, #164]	; (8003644 <HAL_UART_MspInit+0x248>)
 80035a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035a4:	6593      	str	r3, [r2, #88]	; 0x58
 80035a6:	4b27      	ldr	r3, [pc, #156]	; (8003644 <HAL_UART_MspInit+0x248>)
 80035a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	613b      	str	r3, [r7, #16]
 80035b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035b2:	4b24      	ldr	r3, [pc, #144]	; (8003644 <HAL_UART_MspInit+0x248>)
 80035b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b6:	4a23      	ldr	r2, [pc, #140]	; (8003644 <HAL_UART_MspInit+0x248>)
 80035b8:	f043 0308 	orr.w	r3, r3, #8
 80035bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035be:	4b21      	ldr	r3, [pc, #132]	; (8003644 <HAL_UART_MspInit+0x248>)
 80035c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ca:	4b1e      	ldr	r3, [pc, #120]	; (8003644 <HAL_UART_MspInit+0x248>)
 80035cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ce:	4a1d      	ldr	r2, [pc, #116]	; (8003644 <HAL_UART_MspInit+0x248>)
 80035d0:	f043 0301 	orr.w	r3, r3, #1
 80035d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035d6:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <HAL_UART_MspInit+0x248>)
 80035d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	60bb      	str	r3, [r7, #8]
 80035e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 80035e2:	2340      	movs	r3, #64	; 0x40
 80035e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e8:	2302      	movs	r3, #2
 80035ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f4:	2303      	movs	r3, #3
 80035f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035fa:	2307      	movs	r3, #7
 80035fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8003600:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003604:	4619      	mov	r1, r3
 8003606:	4814      	ldr	r0, [pc, #80]	; (8003658 <HAL_UART_MspInit+0x25c>)
 8003608:	f00a f84a 	bl	800d6a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 800360c:	2304      	movs	r3, #4
 800360e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003612:	2302      	movs	r3, #2
 8003614:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003618:	2300      	movs	r3, #0
 800361a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800361e:	2303      	movs	r3, #3
 8003620:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003624:	2307      	movs	r3, #7
 8003626:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 800362a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800362e:	4619      	mov	r1, r3
 8003630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003634:	f00a f834 	bl	800d6a0 <HAL_GPIO_Init>
}
 8003638:	bf00      	nop
 800363a:	37c8      	adds	r7, #200	; 0xc8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40008000 	.word	0x40008000
 8003644:	40021000 	.word	0x40021000
 8003648:	48001800 	.word	0x48001800
 800364c:	40013800 	.word	0x40013800
 8003650:	48000400 	.word	0x48000400
 8003654:	40004400 	.word	0x40004400
 8003658:	48000c00 	.word	0x48000c00

0800365c <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af02      	add	r7, sp, #8
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	330a      	adds	r3, #10
 800366c:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800367a:	b299      	uxth	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	b29a      	uxth	r2, r3
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	4613      	mov	r3, r2
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	f00a fb96 	bl	800ddb8 <HAL_I2C_Master_Transmit>
 800368c:	4603      	mov	r3, r0
 800368e:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8003690:	693b      	ldr	r3, [r7, #16]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800369a:	b580      	push	{r7, lr}
 800369c:	b088      	sub	sp, #32
 800369e:	af02      	add	r7, sp, #8
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	330a      	adds	r3, #10
 80036aa:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	b299      	uxth	r1, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	4613      	mov	r3, r2
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	f00a fc68 	bl	800dfa0 <HAL_I2C_Master_Receive>
 80036d0:	4603      	mov	r3, r0
 80036d2:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80036d4:	693b      	ldr	r3, [r7, #16]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	460b      	mov	r3, r1
 80036ee:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80036f0:	2300      	movs	r3, #0
 80036f2:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b3f      	cmp	r3, #63	; 0x3f
 80036f8:	d902      	bls.n	8003700 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 80036fa:	f06f 0303 	mvn.w	r3, #3
 80036fe:	e016      	b.n	800372e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8003700:	4a0d      	ldr	r2, [pc, #52]	; (8003738 <VL53L0X_WriteMulti+0x58>)
 8003702:	7afb      	ldrb	r3, [r7, #11]
 8003704:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	480c      	ldr	r0, [pc, #48]	; (800373c <VL53L0X_WriteMulti+0x5c>)
 800370c:	f016 fbda 	bl	8019ec4 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	3301      	adds	r3, #1
 8003714:	461a      	mov	r2, r3
 8003716:	4908      	ldr	r1, [pc, #32]	; (8003738 <VL53L0X_WriteMulti+0x58>)
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f7ff ff9f 	bl	800365c <_I2CWrite>
 800371e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003726:	23ec      	movs	r3, #236	; 0xec
 8003728:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800372a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	20000fd8 	.word	0x20000fd8
 800373c:	20000fd9 	.word	0x20000fd9

08003740 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	607a      	str	r2, [r7, #4]
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	460b      	mov	r3, r1
 800374e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003750:	2300      	movs	r3, #0
 8003752:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8003754:	f107 030b 	add.w	r3, r7, #11
 8003758:	2201      	movs	r2, #1
 800375a:	4619      	mov	r1, r3
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f7ff ff7d 	bl	800365c <_I2CWrite>
 8003762:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800376a:	23ec      	movs	r3, #236	; 0xec
 800376c:	75fb      	strb	r3, [r7, #23]
        goto done;
 800376e:	e00c      	b.n	800378a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f7ff ff90 	bl	800369a <_I2CRead>
 800377a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003782:	23ec      	movs	r3, #236	; 0xec
 8003784:	75fb      	strb	r3, [r7, #23]
 8003786:	e000      	b.n	800378a <VL53L0X_ReadMulti+0x4a>
    }
done:
 8003788:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800378a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
	...

08003798 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	70fb      	strb	r3, [r7, #3]
 80037a4:	4613      	mov	r3, r2
 80037a6:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80037a8:	2300      	movs	r3, #0
 80037aa:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80037ac:	4a0b      	ldr	r2, [pc, #44]	; (80037dc <VL53L0X_WrByte+0x44>)
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 80037b2:	4a0a      	ldr	r2, [pc, #40]	; (80037dc <VL53L0X_WrByte+0x44>)
 80037b4:	78bb      	ldrb	r3, [r7, #2]
 80037b6:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80037b8:	2202      	movs	r2, #2
 80037ba:	4908      	ldr	r1, [pc, #32]	; (80037dc <VL53L0X_WrByte+0x44>)
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff ff4d 	bl	800365c <_I2CWrite>
 80037c2:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80037ca:	23ec      	movs	r3, #236	; 0xec
 80037cc:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80037ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20000fd8 	.word	0x20000fd8

080037e0 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	70fb      	strb	r3, [r7, #3]
 80037ec:	4613      	mov	r3, r2
 80037ee:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80037f0:	2300      	movs	r3, #0
 80037f2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80037f4:	4a0e      	ldr	r2, [pc, #56]	; (8003830 <VL53L0X_WrWord+0x50>)
 80037f6:	78fb      	ldrb	r3, [r7, #3]
 80037f8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 80037fa:	883b      	ldrh	r3, [r7, #0]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	b29b      	uxth	r3, r3
 8003800:	b2da      	uxtb	r2, r3
 8003802:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <VL53L0X_WrWord+0x50>)
 8003804:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8003806:	883b      	ldrh	r3, [r7, #0]
 8003808:	b2da      	uxtb	r2, r3
 800380a:	4b09      	ldr	r3, [pc, #36]	; (8003830 <VL53L0X_WrWord+0x50>)
 800380c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800380e:	2203      	movs	r2, #3
 8003810:	4907      	ldr	r1, [pc, #28]	; (8003830 <VL53L0X_WrWord+0x50>)
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f7ff ff22 	bl	800365c <_I2CWrite>
 8003818:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003820:	23ec      	movs	r3, #236	; 0xec
 8003822:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8003824:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20000fd8 	.word	0x20000fd8

08003834 <VL53L0X_WrDWord>:

VL53L0X_Error VL53L0X_WrDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t data) {
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	460b      	mov	r3, r1
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003842:	2300      	movs	r3, #0
 8003844:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    _I2CBuffer[0] = index;
 8003846:	4a13      	ldr	r2, [pc, #76]	; (8003894 <VL53L0X_WrDWord+0x60>)
 8003848:	7afb      	ldrb	r3, [r7, #11]
 800384a:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = (data >> 24) & 0xFF;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	0e1b      	lsrs	r3, r3, #24
 8003850:	b2da      	uxtb	r2, r3
 8003852:	4b10      	ldr	r3, [pc, #64]	; (8003894 <VL53L0X_WrDWord+0x60>)
 8003854:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = (data >> 16) & 0xFF;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	0c1b      	lsrs	r3, r3, #16
 800385a:	b2da      	uxtb	r2, r3
 800385c:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <VL53L0X_WrDWord+0x60>)
 800385e:	709a      	strb	r2, [r3, #2]
    _I2CBuffer[3] = (data >> 8)  & 0xFF;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	0a1b      	lsrs	r3, r3, #8
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <VL53L0X_WrDWord+0x60>)
 8003868:	70da      	strb	r2, [r3, #3]
    _I2CBuffer[4] = (data >> 0 ) & 0xFF;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	b2da      	uxtb	r2, r3
 800386e:	4b09      	ldr	r3, [pc, #36]	; (8003894 <VL53L0X_WrDWord+0x60>)
 8003870:	711a      	strb	r2, [r3, #4]
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 5);
 8003872:	2205      	movs	r2, #5
 8003874:	4907      	ldr	r1, [pc, #28]	; (8003894 <VL53L0X_WrDWord+0x60>)
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f7ff fef0 	bl	800365c <_I2CWrite>
 800387c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <VL53L0X_WrDWord+0x54>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003884:	23ec      	movs	r3, #236	; 0xec
 8003886:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8003888:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20000fd8 	.word	0x20000fd8

08003898 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	4608      	mov	r0, r1
 80038a2:	4611      	mov	r1, r2
 80038a4:	461a      	mov	r2, r3
 80038a6:	4603      	mov	r3, r0
 80038a8:	70fb      	strb	r3, [r7, #3]
 80038aa:	460b      	mov	r3, r1
 80038ac:	70bb      	strb	r3, [r7, #2]
 80038ae:	4613      	mov	r3, r2
 80038b0:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80038b2:	2300      	movs	r3, #0
 80038b4:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 80038b6:	f107 020e 	add.w	r2, r7, #14
 80038ba:	78fb      	ldrb	r3, [r7, #3]
 80038bc:	4619      	mov	r1, r3
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 f81e 	bl	8003900 <VL53L0X_RdByte>
 80038c4:	4603      	mov	r3, r0
 80038c6:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 80038c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d110      	bne.n	80038f2 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 80038d0:	7bba      	ldrb	r2, [r7, #14]
 80038d2:	78bb      	ldrb	r3, [r7, #2]
 80038d4:	4013      	ands	r3, r2
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	787b      	ldrb	r3, [r7, #1]
 80038da:	4313      	orrs	r3, r2
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 80038e0:	7bba      	ldrb	r2, [r7, #14]
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	4619      	mov	r1, r3
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff ff56 	bl	8003798 <VL53L0X_WrByte>
 80038ec:	4603      	mov	r3, r0
 80038ee:	73fb      	strb	r3, [r7, #15]
 80038f0:	e000      	b.n	80038f4 <VL53L0X_UpdateByte+0x5c>
        goto done;
 80038f2:	bf00      	nop
done:
    return Status;
 80038f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	460b      	mov	r3, r1
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800390e:	2300      	movs	r3, #0
 8003910:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8003912:	f107 030b 	add.w	r3, r7, #11
 8003916:	2201      	movs	r2, #1
 8003918:	4619      	mov	r1, r3
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f7ff fe9e 	bl	800365c <_I2CWrite>
 8003920:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003928:	23ec      	movs	r3, #236	; 0xec
 800392a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800392c:	e00c      	b.n	8003948 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800392e:	2201      	movs	r2, #1
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f7ff feb1 	bl	800369a <_I2CRead>
 8003938:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d002      	beq.n	8003946 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003940:	23ec      	movs	r3, #236	; 0xec
 8003942:	75fb      	strb	r3, [r7, #23]
 8003944:	e000      	b.n	8003948 <VL53L0X_RdByte+0x48>
    }
done:
 8003946:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8003948:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	460b      	mov	r3, r1
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003962:	2300      	movs	r3, #0
 8003964:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8003966:	f107 030b 	add.w	r3, r7, #11
 800396a:	2201      	movs	r2, #1
 800396c:	4619      	mov	r1, r3
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f7ff fe74 	bl	800365c <_I2CWrite>
 8003974:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800397c:	23ec      	movs	r3, #236	; 0xec
 800397e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003980:	e017      	b.n	80039b2 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8003982:	2202      	movs	r2, #2
 8003984:	490e      	ldr	r1, [pc, #56]	; (80039c0 <VL53L0X_RdWord+0x6c>)
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f7ff fe87 	bl	800369a <_I2CRead>
 800398c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003994:	23ec      	movs	r3, #236	; 0xec
 8003996:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003998:	e00b      	b.n	80039b2 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <VL53L0X_RdWord+0x6c>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <VL53L0X_RdWord+0x6c>)
 80039a6:	785b      	ldrb	r3, [r3, #1]
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	4413      	add	r3, r2
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 80039b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20000fd8 	.word	0x20000fd8

080039c4 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	460b      	mov	r3, r1
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80039d2:	2300      	movs	r3, #0
 80039d4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80039d6:	f107 030b 	add.w	r3, r7, #11
 80039da:	2201      	movs	r2, #1
 80039dc:	4619      	mov	r1, r3
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f7ff fe3c 	bl	800365c <_I2CWrite>
 80039e4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80039ec:	23ec      	movs	r3, #236	; 0xec
 80039ee:	75fb      	strb	r3, [r7, #23]
        goto done;
 80039f0:	e01b      	b.n	8003a2a <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 80039f2:	2204      	movs	r2, #4
 80039f4:	4910      	ldr	r1, [pc, #64]	; (8003a38 <VL53L0X_RdDWord+0x74>)
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f7ff fe4f 	bl	800369a <_I2CRead>
 80039fc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8003a04:	23ec      	movs	r3, #236	; 0xec
 8003a06:	75fb      	strb	r3, [r7, #23]
        goto done;
 8003a08:	e00f      	b.n	8003a2a <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	; (8003a38 <VL53L0X_RdDWord+0x74>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	061a      	lsls	r2, r3, #24
 8003a10:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <VL53L0X_RdDWord+0x74>)
 8003a12:	785b      	ldrb	r3, [r3, #1]
 8003a14:	041b      	lsls	r3, r3, #16
 8003a16:	441a      	add	r2, r3
 8003a18:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <VL53L0X_RdDWord+0x74>)
 8003a1a:	789b      	ldrb	r3, [r3, #2]
 8003a1c:	021b      	lsls	r3, r3, #8
 8003a1e:	4413      	add	r3, r2
 8003a20:	4a05      	ldr	r2, [pc, #20]	; (8003a38 <VL53L0X_RdDWord+0x74>)
 8003a22:	78d2      	ldrb	r2, [r2, #3]
 8003a24:	441a      	add	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8003a2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3718      	adds	r7, #24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000fd8 	.word	0x20000fd8

08003a3c <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8003a48:	2002      	movs	r0, #2
 8003a4a:	f008 f8b7 	bl	800bbbc <HAL_Delay>
    return status;
 8003a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a94 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a60:	f7ff fbd0 	bl	8003204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a64:	480c      	ldr	r0, [pc, #48]	; (8003a98 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a66:	490d      	ldr	r1, [pc, #52]	; (8003a9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a68:	4a0d      	ldr	r2, [pc, #52]	; (8003aa0 <LoopForever+0xe>)
  movs r3, #0
 8003a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a6c:	e002      	b.n	8003a74 <LoopCopyDataInit>

08003a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a72:	3304      	adds	r3, #4

08003a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a78:	d3f9      	bcc.n	8003a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	; (8003aa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a7c:	4c0a      	ldr	r4, [pc, #40]	; (8003aa8 <LoopForever+0x16>)
  movs r3, #0
 8003a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a80:	e001      	b.n	8003a86 <LoopFillZerobss>

08003a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a84:	3204      	adds	r2, #4

08003a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a88:	d3fb      	bcc.n	8003a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a8a:	f016 f9f7 	bl	8019e7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a8e:	f7fe f9d7 	bl	8001e40 <main>

08003a92 <LoopForever>:

LoopForever:
    b LoopForever
 8003a92:	e7fe      	b.n	8003a92 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003a94:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a9c:	20000740 	.word	0x20000740
  ldr r2, =_sidata
 8003aa0:	0801cff0 	.word	0x0801cff0
  ldr r2, =_sbss
 8003aa4:	20000740 	.word	0x20000740
  ldr r4, =_ebss
 8003aa8:	20002e58 	.word	0x20002e58

08003aac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003aac:	e7fe      	b.n	8003aac <ADC1_2_IRQHandler>
	...

08003ab0 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8003aba:	88fb      	ldrh	r3, [r7, #6]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 f90d 	bl	8003cdc <ft6x06_GetInstance>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
 8003ac8:	2bff      	cmp	r3, #255	; 0xff
 8003aca:	d10e      	bne.n	8003aea <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8003acc:	2000      	movs	r0, #0
 8003ace:	f000 f905 	bl	8003cdc <ft6x06_GetInstance>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 8003ad6:	7bbb      	ldrb	r3, [r7, #14]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d806      	bhi.n	8003aea <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8003adc:	7bbb      	ldrb	r3, [r7, #14]
 8003ade:	88fa      	ldrh	r2, [r7, #6]
 8003ae0:	b2d1      	uxtb	r1, r2
 8003ae2:	4a04      	ldr	r2, [pc, #16]	; (8003af4 <ft6x06_Init+0x44>)
 8003ae4:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 8003ae6:	f006 fee7 	bl	800a8b8 <TS_IO_Init>
    }
  }
}
 8003aea:	bf00      	nop
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20001018 	.word	0x20001018

08003af8 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	4603      	mov	r3, r0
 8003b16:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8003b18:	f006 fece 	bl	800a8b8 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8003b1c:	88fb      	ldrh	r3, [r7, #6]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	21a8      	movs	r1, #168	; 0xa8
 8003b22:	4618      	mov	r0, r3
 8003b24:	f006 ff0e 	bl	800a944 <TS_IO_Read>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	b29b      	uxth	r3, r3
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 8003b3e:	88fb      	ldrh	r3, [r7, #6]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f000 f8bc 	bl	8003cbe <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8003b46:	88fb      	ldrh	r3, [r7, #6]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f000 f88d 	bl	8003c68 <ft6x06_TS_DisableIT>
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8003b66:	88fb      	ldrh	r3, [r7, #6]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f006 fee9 	bl	800a944 <TS_IO_Read>
 8003b72:	4603      	mov	r3, r0
 8003b74:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <ft6x06_TS_DetectTouch+0x50>)
 8003b94:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 8003b96:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <ft6x06_TS_DetectTouch+0x50>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	b2db      	uxtb	r3, r3
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3710      	adds	r7, #16
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	2000101c 	.word	0x2000101c

08003bac <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
 8003bb8:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8003bbe:	4b1f      	ldr	r3, [pc, #124]	; (8003c3c <ft6x06_TS_GetXY+0x90>)
 8003bc0:	789a      	ldrb	r2, [r3, #2]
 8003bc2:	4b1e      	ldr	r3, [pc, #120]	; (8003c3c <ft6x06_TS_GetXY+0x90>)
 8003bc4:	785b      	ldrb	r3, [r3, #1]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d234      	bcs.n	8003c34 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 8003bca:	4b1c      	ldr	r3, [pc, #112]	; (8003c3c <ft6x06_TS_GetXY+0x90>)
 8003bcc:	789b      	ldrb	r3, [r3, #2]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <ft6x06_TS_GetXY+0x2c>
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d003      	beq.n	8003bde <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 8003bd6:	e005      	b.n	8003be4 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8003bd8:	2303      	movs	r3, #3
 8003bda:	75fb      	strb	r3, [r7, #23]
      break;
 8003bdc:	e002      	b.n	8003be4 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8003bde:	2309      	movs	r3, #9
 8003be0:	75fb      	strb	r3, [r7, #23]
      break;
 8003be2:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8003be4:	89fb      	ldrh	r3, [r7, #14]
 8003be6:	b2d8      	uxtb	r0, r3
 8003be8:	f107 0210 	add.w	r2, r7, #16
 8003bec:	7df9      	ldrb	r1, [r7, #23]
 8003bee:	2304      	movs	r3, #4
 8003bf0:	f006 febe 	bl	800a970 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8003bf4:	7c3b      	ldrb	r3, [r7, #16]
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	b21b      	sxth	r3, r3
 8003bfa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003bfe:	b21a      	sxth	r2, r3
 8003c00:	7c7b      	ldrb	r3, [r7, #17]
 8003c02:	b21b      	sxth	r3, r3
 8003c04:	4313      	orrs	r3, r2
 8003c06:	b21b      	sxth	r3, r3
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8003c0e:	7cbb      	ldrb	r3, [r7, #18]
 8003c10:	021b      	lsls	r3, r3, #8
 8003c12:	b21b      	sxth	r3, r3
 8003c14:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c18:	b21a      	sxth	r2, r3
 8003c1a:	7cfb      	ldrb	r3, [r7, #19]
 8003c1c:	b21b      	sxth	r3, r3
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	b21b      	sxth	r3, r3
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8003c28:	4b04      	ldr	r3, [pc, #16]	; (8003c3c <ft6x06_TS_GetXY+0x90>)
 8003c2a:	789b      	ldrb	r3, [r3, #2]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	4b02      	ldr	r3, [pc, #8]	; (8003c3c <ft6x06_TS_GetXY+0x90>)
 8003c32:	709a      	strb	r2, [r3, #2]
  }
}
 8003c34:	bf00      	nop
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	2000101c 	.word	0x2000101c

08003c40 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8003c52:	88fb      	ldrh	r3, [r7, #6]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	7bfa      	ldrb	r2, [r7, #15]
 8003c58:	21a4      	movs	r1, #164	; 0xa4
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f006 fe58 	bl	800a910 <TS_IO_Write>
}
 8003c60:	bf00      	nop
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8003c72:	2300      	movs	r3, #0
 8003c74:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8003c76:	2300      	movs	r3, #0
 8003c78:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8003c7a:	88fb      	ldrh	r3, [r7, #6]
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	7bfa      	ldrb	r2, [r7, #15]
 8003c80:	21a4      	movs	r1, #164	; 0xa4
 8003c82:	4618      	mov	r0, r3
 8003c84:	f006 fe44 	bl	800a910 <TS_IO_Write>
}
 8003c88:	bf00      	nop
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b085      	sub	sp, #20
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
	...

08003cdc <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8003cea:	2300      	movs	r3, #0
 8003cec:	73fb      	strb	r3, [r7, #15]
 8003cee:	e00b      	b.n	8003d08 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
 8003cf2:	4a0a      	ldr	r2, [pc, #40]	; (8003d1c <ft6x06_GetInstance+0x40>)
 8003cf4:	5cd3      	ldrb	r3, [r2, r3]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	88fa      	ldrh	r2, [r7, #6]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d101      	bne.n	8003d02 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	e006      	b.n	8003d10 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
 8003d04:	3301      	adds	r3, #1
 8003d06:	73fb      	strb	r3, [r7, #15]
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d9f0      	bls.n	8003cf0 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8003d0e:	23ff      	movs	r3, #255	; 0xff
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	20001018 	.word	0x20001018

08003d20 <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	4603      	mov	r3, r0
 8003d28:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8003d2a:	88fb      	ldrh	r3, [r7, #6]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 ffd1 	bl	8004cd4 <mfxstm32l152_GetInstance>
 8003d32:	4603      	mov	r3, r0
 8003d34:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 8003d36:	7bfb      	ldrb	r3, [r7, #15]
 8003d38:	2bff      	cmp	r3, #255	; 0xff
 8003d3a:	d10e      	bne.n	8003d5a <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	f000 ffc9 	bl	8004cd4 <mfxstm32l152_GetInstance>
 8003d42:	4603      	mov	r3, r0
 8003d44:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 8003d46:	7bbb      	ldrb	r3, [r7, #14]
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d806      	bhi.n	8003d5a <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 8003d4c:	7bbb      	ldrb	r3, [r7, #14]
 8003d4e:	88fa      	ldrh	r2, [r7, #6]
 8003d50:	b2d1      	uxtb	r1, r2
 8003d52:	4a09      	ldr	r2, [pc, #36]	; (8003d78 <mfxstm32l152_Init+0x58>)
 8003d54:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 8003d56:	f006 fb81 	bl	800a45c <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	2102      	movs	r1, #2
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 f8db 	bl	8003f1a <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8003d64:	88fb      	ldrh	r3, [r7, #6]
 8003d66:	2101      	movs	r1, #1
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 f8fc 	bl	8003f66 <mfxstm32l152_SetIrqOutPinType>
}
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	20001020 	.word	0x20001020

08003d7c <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 8003d86:	88fb      	ldrh	r3, [r7, #6]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 ffc3 	bl	8004d14 <mfxstm32l152_ReleaseInstance>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	2bff      	cmp	r3, #255	; 0xff
 8003d96:	d001      	beq.n	8003d9c <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 8003d98:	f006 fb70 	bl	800a47c <MFX_IO_DeInit>
  }
}
 8003d9c:	bf00      	nop
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	2280      	movs	r2, #128	; 0x80
 8003db2:	2140      	movs	r1, #64	; 0x40
 8003db4:	4618      	mov	r0, r3
 8003db6:	f006 fc03 	bl	800a5c0 <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 8003dba:	200a      	movs	r0, #10
 8003dbc:	f006 fc42 	bl	800a644 <MFX_IO_Delay>
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 8003dd2:	88fb      	ldrh	r3, [r7, #6]
 8003dd4:	2240      	movs	r2, #64	; 0x40
 8003dd6:	2140      	movs	r1, #64	; 0x40
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f006 fbf1 	bl	800a5c0 <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 8003dde:	f006 fbb7 	bl	800a550 <MFX_IO_EnableWakeupPin>
}
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b084      	sub	sp, #16
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	4603      	mov	r3, r0
 8003df2:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8003df4:	88fb      	ldrh	r3, [r7, #6]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 ff6c 	bl	8004cd4 <mfxstm32l152_GetInstance>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	2bff      	cmp	r3, #255	; 0xff
 8003e04:	d101      	bne.n	8003e0a <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 8003e06:	f006 fba3 	bl	800a550 <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 8003e0a:	f006 fbc5 	bl	800a598 <MFX_IO_Wakeup>
}
 8003e0e:	bf00      	nop
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b084      	sub	sp, #16
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 8003e20:	2001      	movs	r0, #1
 8003e22:	f006 fc0f 	bl	800a644 <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 8003e26:	f006 fb19 	bl	800a45c <MFX_IO_Init>

  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 8003e2a:	88fb      	ldrh	r3, [r7, #6]
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f006 fbda 	bl	800a5e8 <MFX_IO_Read>
 8003e34:	4603      	mov	r3, r0
 8003e36:	73fb      	strb	r3, [r7, #15]

  /* Return the device ID value */
  return (id);
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	b29b      	uxth	r3, r3
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	460a      	mov	r2, r1
 8003e4e:	80fb      	strh	r3, [r7, #6]
 8003e50:	4613      	mov	r3, r2
 8003e52:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8003e58:	88fb      	ldrh	r3, [r7, #6]
 8003e5a:	2142      	movs	r1, #66	; 0x42
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f006 fbc3 	bl	800a5e8 <MFX_IO_Read>
 8003e62:	4603      	mov	r3, r0
 8003e64:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 8003e66:	7bfa      	ldrb	r2, [r7, #15]
 8003e68:	797b      	ldrb	r3, [r7, #5]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8003e6e:	7bfa      	ldrb	r2, [r7, #15]
 8003e70:	88fb      	ldrh	r3, [r7, #6]
 8003e72:	2142      	movs	r1, #66	; 0x42
 8003e74:	4618      	mov	r0, r3
 8003e76:	f006 fba3 	bl	800a5c0 <MFX_IO_Write>
}
 8003e7a:	bf00      	nop
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	4603      	mov	r3, r0
 8003e8a:	460a      	mov	r2, r1
 8003e8c:	80fb      	strh	r3, [r7, #6]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003e92:	2300      	movs	r3, #0
 8003e94:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	2142      	movs	r1, #66	; 0x42
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f006 fba4 	bl	800a5e8 <MFX_IO_Read>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 8003ea4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	b25a      	sxtb	r2, r3
 8003eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	b25b      	sxtb	r3, r3
 8003eb4:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8003eb6:	7bfa      	ldrb	r2, [r7, #15]
 8003eb8:	88fb      	ldrh	r3, [r7, #6]
 8003eba:	2142      	movs	r1, #66	; 0x42
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f006 fb7f 	bl	800a5c0 <MFX_IO_Write>
}
 8003ec2:	bf00      	nop
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b082      	sub	sp, #8
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	460a      	mov	r2, r1
 8003ed4:	80fb      	strh	r3, [r7, #6]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 8003eda:	88fb      	ldrh	r3, [r7, #6]
 8003edc:	2108      	movs	r1, #8
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f006 fb82 	bl	800a5e8 <MFX_IO_Read>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	797b      	ldrb	r3, [r7, #5]
 8003eea:	4013      	ands	r3, r2
 8003eec:	b2db      	uxtb	r3, r3
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}

08003ef6 <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b082      	sub	sp, #8
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	4603      	mov	r3, r0
 8003efe:	460a      	mov	r2, r1
 8003f00:	80fb      	strh	r3, [r7, #6]
 8003f02:	4613      	mov	r3, r2
 8003f04:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 8003f06:	797a      	ldrb	r2, [r7, #5]
 8003f08:	88fb      	ldrh	r3, [r7, #6]
 8003f0a:	2144      	movs	r1, #68	; 0x44
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f006 fb57 	bl	800a5c0 <MFX_IO_Write>
}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	4603      	mov	r3, r0
 8003f22:	460a      	mov	r2, r1
 8003f24:	80fb      	strh	r3, [r7, #6]
 8003f26:	4613      	mov	r3, r2
 8003f28:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8003f2e:	88fb      	ldrh	r3, [r7, #6]
 8003f30:	2141      	movs	r1, #65	; 0x41
 8003f32:	4618      	mov	r0, r3
 8003f34:	f006 fb58 	bl	800a5e8 <MFX_IO_Read>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	f023 0302 	bic.w	r3, r3, #2
 8003f42:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 8003f44:	7bfa      	ldrb	r2, [r7, #15]
 8003f46:	797b      	ldrb	r3, [r7, #5]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8003f4c:	7bfa      	ldrb	r2, [r7, #15]
 8003f4e:	88fb      	ldrh	r3, [r7, #6]
 8003f50:	2141      	movs	r1, #65	; 0x41
 8003f52:	4618      	mov	r0, r3
 8003f54:	f006 fb34 	bl	800a5c0 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8003f58:	2001      	movs	r0, #1
 8003f5a:	f006 fb73 	bl	800a644 <MFX_IO_Delay>

}
 8003f5e:	bf00      	nop
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b084      	sub	sp, #16
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	460a      	mov	r2, r1
 8003f70:	80fb      	strh	r3, [r7, #6]
 8003f72:	4613      	mov	r3, r2
 8003f74:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	2141      	movs	r1, #65	; 0x41
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f006 fb32 	bl	800a5e8 <MFX_IO_Read>
 8003f84:	4603      	mov	r3, r0
 8003f86:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	f023 0301 	bic.w	r3, r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 8003f90:	7bfa      	ldrb	r2, [r7, #15]
 8003f92:	797b      	ldrb	r3, [r7, #5]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8003f98:	7bfa      	ldrb	r2, [r7, #15]
 8003f9a:	88fb      	ldrh	r3, [r7, #6]
 8003f9c:	2141      	movs	r1, #65	; 0x41
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f006 fb0e 	bl	800a5c0 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8003fa4:	2001      	movs	r0, #1
 8003fa6:	f006 fb4d 	bl	800a644 <MFX_IO_Delay>

}
 8003faa:	bf00      	nop
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}

08003fb2 <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	4603      	mov	r3, r0
 8003fba:	6039      	str	r1, [r7, #0]
 8003fbc:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8003fbe:	88fb      	ldrh	r3, [r7, #6]
 8003fc0:	2140      	movs	r1, #64	; 0x40
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f006 fb10 	bl	800a5e8 <MFX_IO_Read>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	f043 0301 	orr.w	r3, r3, #1
 8003fd2:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fda:	d304      	bcc.n	8003fe6 <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
 8003fde:	f043 0308 	orr.w	r3, r3, #8
 8003fe2:	73fb      	strb	r3, [r7, #15]
 8003fe4:	e003      	b.n	8003fee <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
 8003fe8:	f023 0308 	bic.w	r3, r3, #8
 8003fec:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8003fee:	7bfa      	ldrb	r2, [r7, #15]
 8003ff0:	88fb      	ldrh	r3, [r7, #6]
 8003ff2:	2140      	movs	r1, #64	; 0x40
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f006 fae3 	bl	800a5c0 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8003ffa:	2001      	movs	r0, #1
 8003ffc:	f006 fb22 	bl	800a644 <MFX_IO_Delay>
}
 8004000:	bf00      	nop
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	6039      	str	r1, [r7, #0]
 8004012:	80fb      	strh	r3, [r7, #6]
 8004014:	4613      	mov	r3, r2
 8004016:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 8004018:	2300      	movs	r3, #0
 800401a:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 800401c:	797b      	ldrb	r3, [r7, #5]
 800401e:	2b17      	cmp	r3, #23
 8004020:	f200 82d4 	bhi.w	80045cc <mfxstm32l152_IO_Config+0x5c4>
 8004024:	a201      	add	r2, pc, #4	; (adr r2, 800402c <mfxstm32l152_IO_Config+0x24>)
 8004026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402a:	bf00      	nop
 800402c:	080040bd 	.word	0x080040bd
 8004030:	0800414d 	.word	0x0800414d
 8004034:	0800420d 	.word	0x0800420d
 8004038:	080042fd 	.word	0x080042fd
 800403c:	080043ed 	.word	0x080043ed
 8004040:	080044dd 	.word	0x080044dd
 8004044:	0800408d 	.word	0x0800408d
 8004048:	0800408d 	.word	0x0800408d
 800404c:	080040ed 	.word	0x080040ed
 8004050:	0800411d 	.word	0x0800411d
 8004054:	080045cd 	.word	0x080045cd
 8004058:	080041dd 	.word	0x080041dd
 800405c:	080041ad 	.word	0x080041ad
 8004060:	080045cd 	.word	0x080045cd
 8004064:	0800417d 	.word	0x0800417d
 8004068:	0800414d 	.word	0x0800414d
 800406c:	0800425d 	.word	0x0800425d
 8004070:	080042ad 	.word	0x080042ad
 8004074:	0800434d 	.word	0x0800434d
 8004078:	0800439d 	.word	0x0800439d
 800407c:	0800443d 	.word	0x0800443d
 8004080:	0800448d 	.word	0x0800448d
 8004084:	0800452d 	.word	0x0800452d
 8004088:	0800457d 	.word	0x0800457d
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 800408c:	88fb      	ldrh	r3, [r7, #6]
 800408e:	6839      	ldr	r1, [r7, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f000 fb67 	bl	8004764 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8004096:	88fb      	ldrh	r3, [r7, #6]
 8004098:	2200      	movs	r2, #0
 800409a:	6839      	ldr	r1, [r7, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fa9d 	bl	80045dc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80040a2:	88f8      	ldrh	r0, [r7, #6]
 80040a4:	2300      	movs	r3, #0
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	2164      	movs	r1, #100	; 0x64
 80040aa:	f000 fe57 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80040ae:	88f8      	ldrh	r0, [r7, #6]
 80040b0:	2300      	movs	r3, #0
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	2168      	movs	r1, #104	; 0x68
 80040b6:	f000 fe51 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    break;
 80040ba:	e28a      	b.n	80045d2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80040bc:	88fb      	ldrh	r3, [r7, #6]
 80040be:	6839      	ldr	r1, [r7, #0]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fb4f 	bl	8004764 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	2200      	movs	r2, #0
 80040ca:	6839      	ldr	r1, [r7, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fa85 	bl	80045dc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80040d2:	88f8      	ldrh	r0, [r7, #6]
 80040d4:	2300      	movs	r3, #0
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	2164      	movs	r1, #100	; 0x64
 80040da:	f000 fe3f 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80040de:	88f8      	ldrh	r0, [r7, #6]
 80040e0:	2301      	movs	r3, #1
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	2168      	movs	r1, #104	; 0x68
 80040e6:	f000 fe39 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    break;
 80040ea:	e272      	b.n	80045d2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80040ec:	88fb      	ldrh	r3, [r7, #6]
 80040ee:	6839      	ldr	r1, [r7, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fb37 	bl	8004764 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	2200      	movs	r2, #0
 80040fa:	6839      	ldr	r1, [r7, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fa6d 	bl	80045dc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8004102:	88f8      	ldrh	r0, [r7, #6]
 8004104:	2301      	movs	r3, #1
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	2164      	movs	r1, #100	; 0x64
 800410a:	f000 fe27 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800410e:	88f8      	ldrh	r0, [r7, #6]
 8004110:	2301      	movs	r3, #1
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	2168      	movs	r1, #104	; 0x68
 8004116:	f000 fe21 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    break;
 800411a:	e25a      	b.n	80045d2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 800411c:	88fb      	ldrh	r3, [r7, #6]
 800411e:	6839      	ldr	r1, [r7, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fb1f 	bl	8004764 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	2200      	movs	r2, #0
 800412a:	6839      	ldr	r1, [r7, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fa55 	bl	80045dc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8004132:	88f8      	ldrh	r0, [r7, #6]
 8004134:	2301      	movs	r3, #1
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	2164      	movs	r1, #100	; 0x64
 800413a:	f000 fe0f 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800413e:	88f8      	ldrh	r0, [r7, #6]
 8004140:	2300      	movs	r3, #0
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	2168      	movs	r1, #104	; 0x68
 8004146:	f000 fe09 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    break;
 800414a:	e242      	b.n	80045d2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 800414c:	88fb      	ldrh	r3, [r7, #6]
 800414e:	6839      	ldr	r1, [r7, #0]
 8004150:	4618      	mov	r0, r3
 8004152:	f000 fb07 	bl	8004764 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8004156:	88fb      	ldrh	r3, [r7, #6]
 8004158:	2201      	movs	r2, #1
 800415a:	6839      	ldr	r1, [r7, #0]
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fa3d 	bl	80045dc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8004162:	88f8      	ldrh	r0, [r7, #6]
 8004164:	2300      	movs	r3, #0
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	2164      	movs	r1, #100	; 0x64
 800416a:	f000 fdf7 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800416e:	88f8      	ldrh	r0, [r7, #6]
 8004170:	2300      	movs	r3, #0
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	2168      	movs	r1, #104	; 0x68
 8004176:	f000 fdf1 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    break;
 800417a:	e22a      	b.n	80045d2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 800417c:	88fb      	ldrh	r3, [r7, #6]
 800417e:	6839      	ldr	r1, [r7, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f000 faef 	bl	8004764 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8004186:	88fb      	ldrh	r3, [r7, #6]
 8004188:	2201      	movs	r2, #1
 800418a:	6839      	ldr	r1, [r7, #0]
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fa25 	bl	80045dc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 8004192:	88f8      	ldrh	r0, [r7, #6]
 8004194:	2300      	movs	r3, #0
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	2164      	movs	r1, #100	; 0x64
 800419a:	f000 fddf 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800419e:	88f8      	ldrh	r0, [r7, #6]
 80041a0:	2301      	movs	r3, #1
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	2168      	movs	r1, #104	; 0x68
 80041a6:	f000 fdd9 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    break;
 80041aa:	e212      	b.n	80045d2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80041ac:	88fb      	ldrh	r3, [r7, #6]
 80041ae:	6839      	ldr	r1, [r7, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fad7 	bl	8004764 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	2201      	movs	r2, #1
 80041ba:	6839      	ldr	r1, [r7, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fa0d 	bl	80045dc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 80041c2:	88f8      	ldrh	r0, [r7, #6]
 80041c4:	2301      	movs	r3, #1
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	2164      	movs	r1, #100	; 0x64
 80041ca:	f000 fdc7 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80041ce:	88f8      	ldrh	r0, [r7, #6]
 80041d0:	2300      	movs	r3, #0
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	2168      	movs	r1, #104	; 0x68
 80041d6:	f000 fdc1 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    break;
 80041da:	e1fa      	b.n	80045d2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80041dc:	88fb      	ldrh	r3, [r7, #6]
 80041de:	6839      	ldr	r1, [r7, #0]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fabf 	bl	8004764 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	2201      	movs	r2, #1
 80041ea:	6839      	ldr	r1, [r7, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 f9f5 	bl	80045dc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 80041f2:	88f8      	ldrh	r0, [r7, #6]
 80041f4:	2301      	movs	r3, #1
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	2164      	movs	r1, #100	; 0x64
 80041fa:	f000 fdaf 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80041fe:	88f8      	ldrh	r0, [r7, #6]
 8004200:	2301      	movs	r3, #1
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	2168      	movs	r1, #104	; 0x68
 8004206:	f000 fda9 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    break;
 800420a:	e1e2      	b.n	80045d2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fa7a 	bl	8004708 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8004214:	88fb      	ldrh	r3, [r7, #6]
 8004216:	2200      	movs	r2, #0
 8004218:	6839      	ldr	r1, [r7, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f000 f9de 	bl	80045dc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8004220:	88f8      	ldrh	r0, [r7, #6]
 8004222:	2300      	movs	r3, #0
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	2164      	movs	r1, #100	; 0x64
 8004228:	f000 fd98 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800422c:	88f8      	ldrh	r0, [r7, #6]
 800422e:	2301      	movs	r3, #1
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	2168      	movs	r1, #104	; 0x68
 8004234:	f000 fd92 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8004238:	88fb      	ldrh	r3, [r7, #6]
 800423a:	2201      	movs	r2, #1
 800423c:	6839      	ldr	r1, [r7, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f000 f9de 	bl	8004600 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8004244:	88fb      	ldrh	r3, [r7, #6]
 8004246:	2201      	movs	r2, #1
 8004248:	6839      	ldr	r1, [r7, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f000 f9ed 	bl	800462a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 8004250:	88fb      	ldrh	r3, [r7, #6]
 8004252:	6839      	ldr	r1, [r7, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fa75 	bl	8004744 <mfxstm32l152_IO_EnablePinIT>
    break;
 800425a:	e1ba      	b.n	80045d2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800425c:	88fb      	ldrh	r3, [r7, #6]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fa52 	bl	8004708 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8004264:	88fb      	ldrh	r3, [r7, #6]
 8004266:	2200      	movs	r2, #0
 8004268:	6839      	ldr	r1, [r7, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f000 f9b6 	bl	80045dc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8004270:	88f8      	ldrh	r0, [r7, #6]
 8004272:	2301      	movs	r3, #1
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	2164      	movs	r1, #100	; 0x64
 8004278:	f000 fd70 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800427c:	88f8      	ldrh	r0, [r7, #6]
 800427e:	2301      	movs	r3, #1
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	2168      	movs	r1, #104	; 0x68
 8004284:	f000 fd6a 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8004288:	88fb      	ldrh	r3, [r7, #6]
 800428a:	2201      	movs	r2, #1
 800428c:	6839      	ldr	r1, [r7, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f000 f9b6 	bl	8004600 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8004294:	88fb      	ldrh	r3, [r7, #6]
 8004296:	2201      	movs	r2, #1
 8004298:	6839      	ldr	r1, [r7, #0]
 800429a:	4618      	mov	r0, r3
 800429c:	f000 f9c5 	bl	800462a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	6839      	ldr	r1, [r7, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fa4d 	bl	8004744 <mfxstm32l152_IO_EnablePinIT>
    break;
 80042aa:	e192      	b.n	80045d2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80042ac:	88fb      	ldrh	r3, [r7, #6]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fa2a 	bl	8004708 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80042b4:	88fb      	ldrh	r3, [r7, #6]
 80042b6:	2200      	movs	r2, #0
 80042b8:	6839      	ldr	r1, [r7, #0]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 f98e 	bl	80045dc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80042c0:	88f8      	ldrh	r0, [r7, #6]
 80042c2:	2301      	movs	r3, #1
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	2164      	movs	r1, #100	; 0x64
 80042c8:	f000 fd48 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80042cc:	88f8      	ldrh	r0, [r7, #6]
 80042ce:	2300      	movs	r3, #0
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	2168      	movs	r1, #104	; 0x68
 80042d4:	f000 fd42 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80042d8:	88fb      	ldrh	r3, [r7, #6]
 80042da:	2201      	movs	r2, #1
 80042dc:	6839      	ldr	r1, [r7, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 f98e 	bl	8004600 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80042e4:	88fb      	ldrh	r3, [r7, #6]
 80042e6:	2201      	movs	r2, #1
 80042e8:	6839      	ldr	r1, [r7, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 f99d 	bl	800462a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80042f0:	88fb      	ldrh	r3, [r7, #6]
 80042f2:	6839      	ldr	r1, [r7, #0]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fa25 	bl	8004744 <mfxstm32l152_IO_EnablePinIT>
    break;
 80042fa:	e16a      	b.n	80045d2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fa02 	bl	8004708 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8004304:	88fb      	ldrh	r3, [r7, #6]
 8004306:	2200      	movs	r2, #0
 8004308:	6839      	ldr	r1, [r7, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f000 f966 	bl	80045dc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8004310:	88f8      	ldrh	r0, [r7, #6]
 8004312:	2300      	movs	r3, #0
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	2164      	movs	r1, #100	; 0x64
 8004318:	f000 fd20 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800431c:	88f8      	ldrh	r0, [r7, #6]
 800431e:	2301      	movs	r3, #1
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	2168      	movs	r1, #104	; 0x68
 8004324:	f000 fd1a 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8004328:	88fb      	ldrh	r3, [r7, #6]
 800432a:	2201      	movs	r2, #1
 800432c:	6839      	ldr	r1, [r7, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f000 f966 	bl	8004600 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8004334:	88fb      	ldrh	r3, [r7, #6]
 8004336:	2200      	movs	r2, #0
 8004338:	6839      	ldr	r1, [r7, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f000 f975 	bl	800462a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8004340:	88fb      	ldrh	r3, [r7, #6]
 8004342:	6839      	ldr	r1, [r7, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f000 f9fd 	bl	8004744 <mfxstm32l152_IO_EnablePinIT>
    break;
 800434a:	e142      	b.n	80045d2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800434c:	88fb      	ldrh	r3, [r7, #6]
 800434e:	4618      	mov	r0, r3
 8004350:	f000 f9da 	bl	8004708 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8004354:	88fb      	ldrh	r3, [r7, #6]
 8004356:	2200      	movs	r2, #0
 8004358:	6839      	ldr	r1, [r7, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f000 f93e 	bl	80045dc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8004360:	88f8      	ldrh	r0, [r7, #6]
 8004362:	2301      	movs	r3, #1
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	2164      	movs	r1, #100	; 0x64
 8004368:	f000 fcf8 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800436c:	88f8      	ldrh	r0, [r7, #6]
 800436e:	2301      	movs	r3, #1
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	2168      	movs	r1, #104	; 0x68
 8004374:	f000 fcf2 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8004378:	88fb      	ldrh	r3, [r7, #6]
 800437a:	2201      	movs	r2, #1
 800437c:	6839      	ldr	r1, [r7, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f000 f93e 	bl	8004600 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8004384:	88fb      	ldrh	r3, [r7, #6]
 8004386:	2200      	movs	r2, #0
 8004388:	6839      	ldr	r1, [r7, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f000 f94d 	bl	800462a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8004390:	88fb      	ldrh	r3, [r7, #6]
 8004392:	6839      	ldr	r1, [r7, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f000 f9d5 	bl	8004744 <mfxstm32l152_IO_EnablePinIT>
    break;
 800439a:	e11a      	b.n	80045d2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800439c:	88fb      	ldrh	r3, [r7, #6]
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 f9b2 	bl	8004708 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80043a4:	88fb      	ldrh	r3, [r7, #6]
 80043a6:	2200      	movs	r2, #0
 80043a8:	6839      	ldr	r1, [r7, #0]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 f916 	bl	80045dc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80043b0:	88f8      	ldrh	r0, [r7, #6]
 80043b2:	2301      	movs	r3, #1
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	2164      	movs	r1, #100	; 0x64
 80043b8:	f000 fcd0 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80043bc:	88f8      	ldrh	r0, [r7, #6]
 80043be:	2300      	movs	r3, #0
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	2168      	movs	r1, #104	; 0x68
 80043c4:	f000 fcca 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80043c8:	88fb      	ldrh	r3, [r7, #6]
 80043ca:	2201      	movs	r2, #1
 80043cc:	6839      	ldr	r1, [r7, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 f916 	bl	8004600 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80043d4:	88fb      	ldrh	r3, [r7, #6]
 80043d6:	2200      	movs	r2, #0
 80043d8:	6839      	ldr	r1, [r7, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 f925 	bl	800462a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80043e0:	88fb      	ldrh	r3, [r7, #6]
 80043e2:	6839      	ldr	r1, [r7, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 f9ad 	bl	8004744 <mfxstm32l152_IO_EnablePinIT>
    break;
 80043ea:	e0f2      	b.n	80045d2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80043ec:	88fb      	ldrh	r3, [r7, #6]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 f98a 	bl	8004708 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80043f4:	88fb      	ldrh	r3, [r7, #6]
 80043f6:	2200      	movs	r2, #0
 80043f8:	6839      	ldr	r1, [r7, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 f8ee 	bl	80045dc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8004400:	88f8      	ldrh	r0, [r7, #6]
 8004402:	2300      	movs	r3, #0
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	2164      	movs	r1, #100	; 0x64
 8004408:	f000 fca8 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800440c:	88f8      	ldrh	r0, [r7, #6]
 800440e:	2301      	movs	r3, #1
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	2168      	movs	r1, #104	; 0x68
 8004414:	f000 fca2 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8004418:	88fb      	ldrh	r3, [r7, #6]
 800441a:	2200      	movs	r2, #0
 800441c:	6839      	ldr	r1, [r7, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f000 f8ee 	bl	8004600 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8004424:	88fb      	ldrh	r3, [r7, #6]
 8004426:	2200      	movs	r2, #0
 8004428:	6839      	ldr	r1, [r7, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f8fd 	bl	800462a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8004430:	88fb      	ldrh	r3, [r7, #6]
 8004432:	6839      	ldr	r1, [r7, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f000 f985 	bl	8004744 <mfxstm32l152_IO_EnablePinIT>
    break;
 800443a:	e0ca      	b.n	80045d2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800443c:	88fb      	ldrh	r3, [r7, #6]
 800443e:	4618      	mov	r0, r3
 8004440:	f000 f962 	bl	8004708 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	2200      	movs	r2, #0
 8004448:	6839      	ldr	r1, [r7, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f000 f8c6 	bl	80045dc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8004450:	88f8      	ldrh	r0, [r7, #6]
 8004452:	2301      	movs	r3, #1
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	2164      	movs	r1, #100	; 0x64
 8004458:	f000 fc80 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800445c:	88f8      	ldrh	r0, [r7, #6]
 800445e:	2301      	movs	r3, #1
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	2168      	movs	r1, #104	; 0x68
 8004464:	f000 fc7a 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8004468:	88fb      	ldrh	r3, [r7, #6]
 800446a:	2200      	movs	r2, #0
 800446c:	6839      	ldr	r1, [r7, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f000 f8c6 	bl	8004600 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8004474:	88fb      	ldrh	r3, [r7, #6]
 8004476:	2200      	movs	r2, #0
 8004478:	6839      	ldr	r1, [r7, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f000 f8d5 	bl	800462a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8004480:	88fb      	ldrh	r3, [r7, #6]
 8004482:	6839      	ldr	r1, [r7, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f000 f95d 	bl	8004744 <mfxstm32l152_IO_EnablePinIT>
    break;
 800448a:	e0a2      	b.n	80045d2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800448c:	88fb      	ldrh	r3, [r7, #6]
 800448e:	4618      	mov	r0, r3
 8004490:	f000 f93a 	bl	8004708 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8004494:	88fb      	ldrh	r3, [r7, #6]
 8004496:	2200      	movs	r2, #0
 8004498:	6839      	ldr	r1, [r7, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f000 f89e 	bl	80045dc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80044a0:	88f8      	ldrh	r0, [r7, #6]
 80044a2:	2301      	movs	r3, #1
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	2164      	movs	r1, #100	; 0x64
 80044a8:	f000 fc58 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80044ac:	88f8      	ldrh	r0, [r7, #6]
 80044ae:	2300      	movs	r3, #0
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	2168      	movs	r1, #104	; 0x68
 80044b4:	f000 fc52 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80044b8:	88fb      	ldrh	r3, [r7, #6]
 80044ba:	2200      	movs	r2, #0
 80044bc:	6839      	ldr	r1, [r7, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 f89e 	bl	8004600 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80044c4:	88fb      	ldrh	r3, [r7, #6]
 80044c6:	2200      	movs	r2, #0
 80044c8:	6839      	ldr	r1, [r7, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 f8ad 	bl	800462a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80044d0:	88fb      	ldrh	r3, [r7, #6]
 80044d2:	6839      	ldr	r1, [r7, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 f935 	bl	8004744 <mfxstm32l152_IO_EnablePinIT>
    break;
 80044da:	e07a      	b.n	80045d2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80044dc:	88fb      	ldrh	r3, [r7, #6]
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 f912 	bl	8004708 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80044e4:	88fb      	ldrh	r3, [r7, #6]
 80044e6:	2200      	movs	r2, #0
 80044e8:	6839      	ldr	r1, [r7, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 f876 	bl	80045dc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80044f0:	88f8      	ldrh	r0, [r7, #6]
 80044f2:	2300      	movs	r3, #0
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	2164      	movs	r1, #100	; 0x64
 80044f8:	f000 fc30 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80044fc:	88f8      	ldrh	r0, [r7, #6]
 80044fe:	2301      	movs	r3, #1
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	2168      	movs	r1, #104	; 0x68
 8004504:	f000 fc2a 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8004508:	88fb      	ldrh	r3, [r7, #6]
 800450a:	2200      	movs	r2, #0
 800450c:	6839      	ldr	r1, [r7, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 f876 	bl	8004600 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8004514:	88fb      	ldrh	r3, [r7, #6]
 8004516:	2201      	movs	r2, #1
 8004518:	6839      	ldr	r1, [r7, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f000 f885 	bl	800462a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8004520:	88fb      	ldrh	r3, [r7, #6]
 8004522:	6839      	ldr	r1, [r7, #0]
 8004524:	4618      	mov	r0, r3
 8004526:	f000 f90d 	bl	8004744 <mfxstm32l152_IO_EnablePinIT>
    break;
 800452a:	e052      	b.n	80045d2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800452c:	88fb      	ldrh	r3, [r7, #6]
 800452e:	4618      	mov	r0, r3
 8004530:	f000 f8ea 	bl	8004708 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8004534:	88fb      	ldrh	r3, [r7, #6]
 8004536:	2200      	movs	r2, #0
 8004538:	6839      	ldr	r1, [r7, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f000 f84e 	bl	80045dc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8004540:	88f8      	ldrh	r0, [r7, #6]
 8004542:	2301      	movs	r3, #1
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	2164      	movs	r1, #100	; 0x64
 8004548:	f000 fc08 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800454c:	88f8      	ldrh	r0, [r7, #6]
 800454e:	2301      	movs	r3, #1
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	2168      	movs	r1, #104	; 0x68
 8004554:	f000 fc02 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8004558:	88fb      	ldrh	r3, [r7, #6]
 800455a:	2200      	movs	r2, #0
 800455c:	6839      	ldr	r1, [r7, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f000 f84e 	bl	8004600 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8004564:	88fb      	ldrh	r3, [r7, #6]
 8004566:	2201      	movs	r2, #1
 8004568:	6839      	ldr	r1, [r7, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f000 f85d 	bl	800462a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 8004570:	88fb      	ldrh	r3, [r7, #6]
 8004572:	6839      	ldr	r1, [r7, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f000 f8e5 	bl	8004744 <mfxstm32l152_IO_EnablePinIT>
    break;
 800457a:	e02a      	b.n	80045d2 <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 800457c:	88fb      	ldrh	r3, [r7, #6]
 800457e:	4618      	mov	r0, r3
 8004580:	f000 f8c2 	bl	8004708 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8004584:	88fb      	ldrh	r3, [r7, #6]
 8004586:	2200      	movs	r2, #0
 8004588:	6839      	ldr	r1, [r7, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f000 f826 	bl	80045dc <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8004590:	88f8      	ldrh	r0, [r7, #6]
 8004592:	2301      	movs	r3, #1
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	2164      	movs	r1, #100	; 0x64
 8004598:	f000 fbe0 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800459c:	88f8      	ldrh	r0, [r7, #6]
 800459e:	2300      	movs	r3, #0
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	2168      	movs	r1, #104	; 0x68
 80045a4:	f000 fbda 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80045a8:	88fb      	ldrh	r3, [r7, #6]
 80045aa:	2200      	movs	r2, #0
 80045ac:	6839      	ldr	r1, [r7, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 f826 	bl	8004600 <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80045b4:	88fb      	ldrh	r3, [r7, #6]
 80045b6:	2201      	movs	r2, #1
 80045b8:	6839      	ldr	r1, [r7, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f835 	bl	800462a <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80045c0:	88fb      	ldrh	r3, [r7, #6]
 80045c2:	6839      	ldr	r1, [r7, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 f8bd 	bl	8004744 <mfxstm32l152_IO_EnablePinIT>
    break;
 80045ca:	e002      	b.n	80045d2 <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 80045cc:	797b      	ldrb	r3, [r7, #5]
 80045ce:	73fb      	strb	r3, [r7, #15]
    break;
 80045d0:	bf00      	nop
  }

  return error_code;
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	6039      	str	r1, [r7, #0]
 80045e6:	80fb      	strh	r3, [r7, #6]
 80045e8:	4613      	mov	r3, r2
 80045ea:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 80045ec:	797b      	ldrb	r3, [r7, #5]
 80045ee:	88f8      	ldrh	r0, [r7, #6]
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	2160      	movs	r1, #96	; 0x60
 80045f4:	f000 fbb2 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
}
 80045f8:	bf00      	nop
 80045fa:	3708      	adds	r7, #8
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	6039      	str	r1, [r7, #0]
 800460a:	80fb      	strh	r3, [r7, #6]
 800460c:	4613      	mov	r3, r2
 800460e:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 8004610:	797b      	ldrb	r3, [r7, #5]
 8004612:	88f8      	ldrh	r0, [r7, #6]
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	214c      	movs	r1, #76	; 0x4c
 8004618:	f000 fba0 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 800461c:	2001      	movs	r0, #1
 800461e:	f006 f811 	bl	800a644 <MFX_IO_Delay>
}
 8004622:	bf00      	nop
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}

0800462a <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	b082      	sub	sp, #8
 800462e:	af00      	add	r7, sp, #0
 8004630:	4603      	mov	r3, r0
 8004632:	6039      	str	r1, [r7, #0]
 8004634:	80fb      	strh	r3, [r7, #6]
 8004636:	4613      	mov	r3, r2
 8004638:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 800463a:	797b      	ldrb	r3, [r7, #5]
 800463c:	88f8      	ldrh	r0, [r7, #6]
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	2150      	movs	r1, #80	; 0x50
 8004642:	f000 fb8b 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8004646:	2001      	movs	r0, #1
 8004648:	f005 fffc 	bl	800a644 <MFX_IO_Delay>
}
 800464c:	bf00      	nop
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	6039      	str	r1, [r7, #0]
 800465e:	80fb      	strh	r3, [r7, #6]
 8004660:	4613      	mov	r3, r2
 8004662:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8004664:	797b      	ldrb	r3, [r7, #5]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d006      	beq.n	8004678 <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 800466a:	88f8      	ldrh	r0, [r7, #6]
 800466c:	2301      	movs	r3, #1
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	216c      	movs	r1, #108	; 0x6c
 8004672:	f000 fb73 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 8004676:	e005      	b.n	8004684 <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 8004678:	88f8      	ldrh	r0, [r7, #6]
 800467a:	2301      	movs	r3, #1
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	2170      	movs	r1, #112	; 0x70
 8004680:	f000 fb6c 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
}
 8004684:	bf00      	nop
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b086      	sub	sp, #24
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	6039      	str	r1, [r7, #0]
 8004696:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 800469c:	2300      	movs	r3, #0
 800469e:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 80046a0:	2300      	movs	r3, #0
 80046a2:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d006      	beq.n	80046ba <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 80046ac:	88fb      	ldrh	r3, [r7, #6]
 80046ae:	2110      	movs	r1, #16
 80046b0:	4618      	mov	r0, r3
 80046b2:	f005 ff99 	bl	800a5e8 <MFX_IO_Read>
 80046b6:	4603      	mov	r3, r0
 80046b8:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d006      	beq.n	80046d2 <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 80046c4:	88fb      	ldrh	r3, [r7, #6]
 80046c6:	2111      	movs	r1, #17
 80046c8:	4618      	mov	r0, r3
 80046ca:	f005 ff8d 	bl	800a5e8 <MFX_IO_Read>
 80046ce:	4603      	mov	r3, r0
 80046d0:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d006      	beq.n	80046ea <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	2112      	movs	r1, #18
 80046e0:	4618      	mov	r0, r3
 80046e2:	f005 ff81 	bl	800a5e8 <MFX_IO_Read>
 80046e6:	4603      	mov	r3, r0
 80046e8:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	021a      	lsls	r2, r3, #8
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	441a      	add	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	041b      	lsls	r3, r3, #16
 80046f6:	4413      	add	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	4013      	ands	r3, r2
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	4603      	mov	r3, r0
 8004710:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8004712:	f005 feef 	bl	800a4f4 <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8004716:	88fb      	ldrh	r3, [r7, #6]
 8004718:	2101      	movs	r1, #1
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff fb92 	bl	8003e44 <mfxstm32l152_EnableITSource>
}
 8004720:	bf00      	nop
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	4603      	mov	r3, r0
 8004730:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8004732:	88fb      	ldrh	r3, [r7, #6]
 8004734:	2101      	movs	r1, #1
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff fba3 	bl	8003e82 <mfxstm32l152_DisableITSource>
}
 800473c:	bf00      	nop
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	6039      	str	r1, [r7, #0]
 800474e:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 8004750:	88f8      	ldrh	r0, [r7, #6]
 8004752:	2301      	movs	r3, #1
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	2148      	movs	r1, #72	; 0x48
 8004758:	f000 fb00 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
}
 800475c:	bf00      	nop
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	4603      	mov	r3, r0
 800476c:	6039      	str	r1, [r7, #0]
 800476e:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 8004770:	88f8      	ldrh	r0, [r7, #6]
 8004772:	2300      	movs	r3, #0
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	2148      	movs	r1, #72	; 0x48
 8004778:	f000 faf0 	bl	8004d5c <mfxstm32l152_reg24_setPinValue>
}
 800477c:	bf00      	nop
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	6039      	str	r1, [r7, #0]
 800478e:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 8004790:	2300      	movs	r3, #0
 8004792:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 8004794:	2300      	movs	r3, #0
 8004796:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 8004798:	2300      	movs	r3, #0
 800479a:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d006      	beq.n	80047b2 <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 80047a4:	88fb      	ldrh	r3, [r7, #6]
 80047a6:	210c      	movs	r1, #12
 80047a8:	4618      	mov	r0, r3
 80047aa:	f005 ff1d 	bl	800a5e8 <MFX_IO_Read>
 80047ae:	4603      	mov	r3, r0
 80047b0:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80047b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d006      	beq.n	80047ce <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 80047c0:	88fb      	ldrh	r3, [r7, #6]
 80047c2:	210d      	movs	r1, #13
 80047c4:	4618      	mov	r0, r3
 80047c6:	f005 ff0f 	bl	800a5e8 <MFX_IO_Read>
 80047ca:	4603      	mov	r3, r0
 80047cc:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	0c1b      	lsrs	r3, r3, #16
 80047d2:	041b      	lsls	r3, r3, #16
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d006      	beq.n	80047e6 <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 80047d8:	88fb      	ldrh	r3, [r7, #6]
 80047da:	210e      	movs	r1, #14
 80047dc:	4618      	mov	r0, r3
 80047de:	f005 ff03 	bl	800a5e8 <MFX_IO_Read>
 80047e2:	4603      	mov	r3, r0
 80047e4:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80047e6:	7bfa      	ldrb	r2, [r7, #15]
 80047e8:	89bb      	ldrh	r3, [r7, #12]
 80047ea:	021b      	lsls	r3, r3, #8
 80047ec:	4413      	add	r3, r2
 80047ee:	461a      	mov	r2, r3
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	041b      	lsls	r3, r3, #16
 80047f4:	4413      	add	r3, r2
 80047f6:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	4013      	ands	r3, r2
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	4603      	mov	r3, r0
 800480e:	6039      	str	r1, [r7, #0]
 8004810:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	0a1b      	lsrs	r3, r3, #8
 800481a:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	0c1b      	lsrs	r3, r3, #16
 8004820:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 8004822:	7bfb      	ldrb	r3, [r7, #15]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d005      	beq.n	8004834 <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 8004828:	7bfa      	ldrb	r2, [r7, #15]
 800482a:	88fb      	ldrh	r3, [r7, #6]
 800482c:	2154      	movs	r1, #84	; 0x54
 800482e:	4618      	mov	r0, r3
 8004830:	f005 fec6 	bl	800a5c0 <MFX_IO_Write>
  }
  if (pin_8_15)
 8004834:	7bbb      	ldrb	r3, [r7, #14]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d005      	beq.n	8004846 <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 800483a:	7bba      	ldrb	r2, [r7, #14]
 800483c:	88fb      	ldrh	r3, [r7, #6]
 800483e:	2155      	movs	r1, #85	; 0x55
 8004840:	4618      	mov	r0, r3
 8004842:	f005 febd 	bl	800a5c0 <MFX_IO_Write>
  }
  if (pin_16_23)
 8004846:	7b7b      	ldrb	r3, [r7, #13]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d005      	beq.n	8004858 <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 800484c:	7b7a      	ldrb	r2, [r7, #13]
 800484e:	88fb      	ldrh	r3, [r7, #6]
 8004850:	2156      	movs	r1, #86	; 0x56
 8004852:	4618      	mov	r0, r3
 8004854:	f005 feb4 	bl	800a5c0 <MFX_IO_Write>
  }
}
 8004858:	bf00      	nop
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 800486a:	2300      	movs	r3, #0
 800486c:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 800486e:	88fb      	ldrh	r3, [r7, #6]
 8004870:	b2db      	uxtb	r3, r3
 8004872:	b29b      	uxth	r3, r3
 8004874:	2180      	movs	r1, #128	; 0x80
 8004876:	4618      	mov	r0, r3
 8004878:	f005 feb6 	bl	800a5e8 <MFX_IO_Read>
 800487c:	4603      	mov	r3, r0
 800487e:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 8004880:	7bfb      	ldrb	r3, [r7, #15]
 8004882:	f043 0301 	orr.w	r3, r3, #1
 8004886:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 8004888:	88fb      	ldrh	r3, [r7, #6]
 800488a:	b2db      	uxtb	r3, r3
 800488c:	b29b      	uxth	r3, r3
 800488e:	7bfa      	ldrb	r2, [r7, #15]
 8004890:	2180      	movs	r1, #128	; 0x80
 8004892:	4618      	mov	r0, r3
 8004894:	f005 fe94 	bl	800a5c0 <MFX_IO_Write>
}
 8004898:	bf00      	nop
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 80048a0:	b084      	sub	sp, #16
 80048a2:	b590      	push	{r4, r7, lr}
 80048a4:	b085      	sub	sp, #20
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	4604      	mov	r4, r0
 80048aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80048ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80048b2:	4623      	mov	r3, r4
 80048b4:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 80048b6:	2300      	movs	r3, #0
 80048b8:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 80048ba:	2300      	movs	r3, #0
 80048bc:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 80048be:	88fb      	ldrh	r3, [r7, #6]
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2140      	movs	r1, #64	; 0x40
 80048c6:	4618      	mov	r0, r3
 80048c8:	f005 fe8e 	bl	800a5e8 <MFX_IO_Read>
 80048cc:	4603      	mov	r3, r0
 80048ce:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 80048d0:	7bbb      	ldrb	r3, [r7, #14]
 80048d2:	f003 0304 	and.w	r3, r3, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10b      	bne.n	80048f2 <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 80048da:	7bbb      	ldrb	r3, [r7, #14]
 80048dc:	f043 0304 	orr.w	r3, r3, #4
 80048e0:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 80048e2:	88fb      	ldrh	r3, [r7, #6]
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	7bba      	ldrb	r2, [r7, #14]
 80048ea:	2140      	movs	r1, #64	; 0x40
 80048ec:	4618      	mov	r0, r3
 80048ee:	f005 fe67 	bl	800a5c0 <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 80048f2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	f003 030e 	and.w	r3, r3, #14
 80048fe:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 8004900:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004904:	b25b      	sxtb	r3, r3
 8004906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800490a:	b25a      	sxtb	r2, r3
 800490c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004910:	4313      	orrs	r3, r2
 8004912:	b25b      	sxtb	r3, r3
 8004914:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 8004916:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800491a:	b25b      	sxtb	r3, r3
 800491c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004920:	b25a      	sxtb	r2, r3
 8004922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004926:	4313      	orrs	r3, r2
 8004928:	b25b      	sxtb	r3, r3
 800492a:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	b29b      	uxth	r3, r3
 8004932:	7bfa      	ldrb	r2, [r7, #15]
 8004934:	2180      	movs	r1, #128	; 0x80
 8004936:	4618      	mov	r0, r3
 8004938:	f005 fe42 	bl	800a5c0 <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 800493c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004940:	b25b      	sxtb	r3, r3
 8004942:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004946:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8004948:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800494c:	b25b      	sxtb	r3, r3
 800494e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004952:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8004954:	4313      	orrs	r3, r2
 8004956:	b25b      	sxtb	r3, r3
 8004958:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 800495a:	88fb      	ldrh	r3, [r7, #6]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	b29b      	uxth	r3, r3
 8004960:	7bfa      	ldrb	r2, [r7, #15]
 8004962:	2181      	movs	r1, #129	; 0x81
 8004964:	4618      	mov	r0, r3
 8004966:	f005 fe2b 	bl	800a5c0 <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 800496a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800496c:	0a1b      	lsrs	r3, r3, #8
 800496e:	b29b      	uxth	r3, r3
 8004970:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 8004972:	88fb      	ldrh	r3, [r7, #6]
 8004974:	b2db      	uxtb	r3, r3
 8004976:	b29b      	uxth	r3, r3
 8004978:	7bfa      	ldrb	r2, [r7, #15]
 800497a:	2182      	movs	r1, #130	; 0x82
 800497c:	4618      	mov	r0, r3
 800497e:	f005 fe1f 	bl	800a5c0 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 8004982:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004984:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 8004986:	88fb      	ldrh	r3, [r7, #6]
 8004988:	b2db      	uxtb	r3, r3
 800498a:	b29b      	uxth	r3, r3
 800498c:	7bfa      	ldrb	r2, [r7, #15]
 800498e:	2183      	movs	r1, #131	; 0x83
 8004990:	4618      	mov	r0, r3
 8004992:	f005 fe15 	bl	800a5c0 <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 8004996:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004998:	0a1b      	lsrs	r3, r3, #8
 800499a:	b29b      	uxth	r3, r3
 800499c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 800499e:	88fb      	ldrh	r3, [r7, #6]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	7bfa      	ldrb	r2, [r7, #15]
 80049a6:	2184      	movs	r1, #132	; 0x84
 80049a8:	4618      	mov	r0, r3
 80049aa:	f005 fe09 	bl	800a5c0 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 80049ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80049b0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 80049b2:	88fb      	ldrh	r3, [r7, #6]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	7bfa      	ldrb	r2, [r7, #15]
 80049ba:	2185      	movs	r1, #133	; 0x85
 80049bc:	4618      	mov	r0, r3
 80049be:	f005 fdff 	bl	800a5c0 <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 80049c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80049c4:	0a1b      	lsrs	r3, r3, #8
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 80049ca:	88fb      	ldrh	r3, [r7, #6]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	7bfa      	ldrb	r2, [r7, #15]
 80049d2:	2186      	movs	r1, #134	; 0x86
 80049d4:	4618      	mov	r0, r3
 80049d6:	f005 fdf3 	bl	800a5c0 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 80049da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80049dc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 80049de:	88fb      	ldrh	r3, [r7, #6]
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	7bfa      	ldrb	r2, [r7, #15]
 80049e6:	2187      	movs	r1, #135	; 0x87
 80049e8:	4618      	mov	r0, r3
 80049ea:	f005 fde9 	bl	800a5c0 <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 80049ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80049f0:	0a1b      	lsrs	r3, r3, #8
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 80049f6:	88fb      	ldrh	r3, [r7, #6]
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	7bfa      	ldrb	r2, [r7, #15]
 80049fe:	2188      	movs	r1, #136	; 0x88
 8004a00:	4618      	mov	r0, r3
 8004a02:	f005 fddd 	bl	800a5c0 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 8004a06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004a08:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	7bfa      	ldrb	r2, [r7, #15]
 8004a12:	2189      	movs	r1, #137	; 0x89
 8004a14:	4618      	mov	r0, r3
 8004a16:	f005 fdd3 	bl	800a5c0 <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 8004a1a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004a1c:	0a1b      	lsrs	r3, r3, #8
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 8004a22:	88fb      	ldrh	r3, [r7, #6]
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	7bfa      	ldrb	r2, [r7, #15]
 8004a2a:	218a      	movs	r1, #138	; 0x8a
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f005 fdc7 	bl	800a5c0 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 8004a32:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004a34:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 8004a36:	88fb      	ldrh	r3, [r7, #6]
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	7bfa      	ldrb	r2, [r7, #15]
 8004a3e:	218b      	movs	r1, #139	; 0x8b
 8004a40:	4618      	mov	r0, r3
 8004a42:	f005 fdbd 	bl	800a5c0 <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 8004a46:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004a48:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 8004a4a:	88fb      	ldrh	r3, [r7, #6]
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	7bfa      	ldrb	r2, [r7, #15]
 8004a52:	2190      	movs	r1, #144	; 0x90
 8004a54:	4618      	mov	r0, r3
 8004a56:	f005 fdb3 	bl	800a5c0 <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 8004a5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004a5c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 8004a5e:	88fb      	ldrh	r3, [r7, #6]
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	7bfa      	ldrb	r2, [r7, #15]
 8004a66:	2191      	movs	r1, #145	; 0x91
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f005 fda9 	bl	800a5c0 <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 8004a6e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a70:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 8004a72:	88fb      	ldrh	r3, [r7, #6]
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	7bfa      	ldrb	r2, [r7, #15]
 8004a7a:	2192      	movs	r1, #146	; 0x92
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f005 fd9f 	bl	800a5c0 <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 8004a82:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a84:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 8004a86:	88fb      	ldrh	r3, [r7, #6]
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	7bfa      	ldrb	r2, [r7, #15]
 8004a8e:	2193      	movs	r1, #147	; 0x93
 8004a90:	4618      	mov	r0, r3
 8004a92:	f005 fd95 	bl	800a5c0 <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 8004a96:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004a98:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 8004a9a:	88fb      	ldrh	r3, [r7, #6]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	7bfa      	ldrb	r2, [r7, #15]
 8004aa2:	2194      	movs	r1, #148	; 0x94
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f005 fd8b 	bl	800a5c0 <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 8004aaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004aac:	0a1b      	lsrs	r3, r3, #8
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 8004ab2:	88fb      	ldrh	r3, [r7, #6]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	7bfa      	ldrb	r2, [r7, #15]
 8004aba:	218c      	movs	r1, #140	; 0x8c
 8004abc:	4618      	mov	r0, r3
 8004abe:	f005 fd7f 	bl	800a5c0 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 8004ac2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ac4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 8004ac6:	88fb      	ldrh	r3, [r7, #6]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	7bfa      	ldrb	r2, [r7, #15]
 8004ace:	218d      	movs	r1, #141	; 0x8d
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f005 fd75 	bl	800a5c0 <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 8004ad6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ad8:	0a1b      	lsrs	r3, r3, #8
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 8004ade:	88fb      	ldrh	r3, [r7, #6]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	7bfa      	ldrb	r2, [r7, #15]
 8004ae6:	218e      	movs	r1, #142	; 0x8e
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f005 fd69 	bl	800a5c0 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 8004aee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004af0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 8004af2:	88fb      	ldrh	r3, [r7, #6]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	7bfa      	ldrb	r2, [r7, #15]
 8004afa:	218f      	movs	r1, #143	; 0x8f
 8004afc:	4618      	mov	r0, r3
 8004afe:	f005 fd5f 	bl	800a5c0 <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 8004b02:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8004b06:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 8004b08:	88fb      	ldrh	r3, [r7, #6]
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	7bfa      	ldrb	r2, [r7, #15]
 8004b10:	2196      	movs	r1, #150	; 0x96
 8004b12:	4618      	mov	r0, r3
 8004b14:	f005 fd54 	bl	800a5c0 <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8004b18:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004b1c:	b25b      	sxtb	r3, r3
 8004b1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004b22:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8004b24:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004b28:	b25b      	sxtb	r3, r3
 8004b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b2e:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8004b30:	4313      	orrs	r3, r2
 8004b32:	b25b      	sxtb	r3, r3
 8004b34:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 8004b36:	88fb      	ldrh	r3, [r7, #6]
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	7bfa      	ldrb	r2, [r7, #15]
 8004b3e:	2197      	movs	r1, #151	; 0x97
 8004b40:	4618      	mov	r0, r3
 8004b42:	f005 fd3d 	bl	800a5c0 <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 8004b46:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004b4a:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8004b4c:	88fb      	ldrh	r3, [r7, #6]
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	7bfa      	ldrb	r2, [r7, #15]
 8004b54:	2198      	movs	r1, #152	; 0x98
 8004b56:	4618      	mov	r0, r3
 8004b58:	f005 fd32 	bl	800a5c0 <MFX_IO_Write>
}
 8004b5c:	bf00      	nop
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004b66:	b004      	add	sp, #16
 8004b68:	4770      	bx	lr

08004b6a <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b084      	sub	sp, #16
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	4603      	mov	r3, r0
 8004b72:	6039      	str	r1, [r7, #0]
 8004b74:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	b298      	uxth	r0, r3
 8004b7c:	f107 020c 	add.w	r2, r7, #12
 8004b80:	2303      	movs	r3, #3
 8004b82:	2114      	movs	r1, #20
 8004b84:	f005 fd44 	bl	800a610 <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 8004b88:	7b3b      	ldrb	r3, [r7, #12]
 8004b8a:	041a      	lsls	r2, r3, #16
 8004b8c:	7b7b      	ldrb	r3, [r7, #13]
 8004b8e:	021b      	lsls	r3, r3, #8
 8004b90:	4313      	orrs	r3, r2
 8004b92:	7bba      	ldrb	r2, [r7, #14]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	461a      	mov	r2, r3
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	601a      	str	r2, [r3, #0]

}
 8004b9c:	bf00      	nop
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8004bae:	f005 fca1 	bl	800a4f4 <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8004bb2:	88fb      	ldrh	r3, [r7, #6]
 8004bb4:	2102      	movs	r1, #2
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff f944 	bl	8003e44 <mfxstm32l152_EnableITSource>
}
 8004bbc:	bf00      	nop
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	4603      	mov	r3, r0
 8004bcc:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8004bce:	88fb      	ldrh	r3, [r7, #6]
 8004bd0:	2102      	movs	r1, #2
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff f98f 	bl	8003ef6 <mfxstm32l152_ClearGlobalIT>
}
 8004bd8:	bf00      	nop
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 8004bea:	88fb      	ldrh	r3, [r7, #6]
 8004bec:	2102      	movs	r1, #2
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7ff f96b 	bl	8003eca <mfxstm32l152_GlobalITStatus>
 8004bf4:	4603      	mov	r3, r0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b082      	sub	sp, #8
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	4603      	mov	r3, r0
 8004c06:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8004c08:	88fb      	ldrh	r3, [r7, #6]
 8004c0a:	2102      	movs	r1, #2
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff f938 	bl	8003e82 <mfxstm32l152_DisableITSource>
}
 8004c12:	bf00      	nop
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b082      	sub	sp, #8
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	4603      	mov	r3, r0
 8004c22:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 8004c24:	88fb      	ldrh	r3, [r7, #6]
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	2103      	movs	r1, #3
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f005 fcdb 	bl	800a5e8 <MFX_IO_Read>
 8004c32:	4603      	mov	r3, r0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 8004c46:	88fb      	ldrh	r3, [r7, #6]
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	2104      	movs	r1, #4
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f005 fcca 	bl	800a5e8 <MFX_IO_Read>
 8004c54:	4603      	mov	r3, r0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b082      	sub	sp, #8
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	4603      	mov	r3, r0
 8004c66:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8004c68:	f005 fc44 	bl	800a4f4 <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8004c6c:	88fb      	ldrh	r3, [r7, #6]
 8004c6e:	2104      	movs	r1, #4
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff f8e7 	bl	8003e44 <mfxstm32l152_EnableITSource>
}
 8004c76:	bf00      	nop
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b082      	sub	sp, #8
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	4603      	mov	r3, r0
 8004c86:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8004c88:	88fb      	ldrh	r3, [r7, #6]
 8004c8a:	2104      	movs	r1, #4
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7ff f932 	bl	8003ef6 <mfxstm32l152_ClearGlobalIT>
}
 8004c92:	bf00      	nop
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b082      	sub	sp, #8
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 8004ca4:	88fb      	ldrh	r3, [r7, #6]
 8004ca6:	2104      	movs	r1, #4
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7ff f90e 	bl	8003eca <mfxstm32l152_GlobalITStatus>
 8004cae:	4603      	mov	r3, r0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8004cc2:	88fb      	ldrh	r3, [r7, #6]
 8004cc4:	2104      	movs	r1, #4
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff f8db 	bl	8003e82 <mfxstm32l152_DisableITSource>
}
 8004ccc:	bf00      	nop
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	4603      	mov	r3, r0
 8004cdc:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8004cde:	2300      	movs	r3, #0
 8004ce0:	73fb      	strb	r3, [r7, #15]
 8004ce2:	e00b      	b.n	8004cfc <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	4a0a      	ldr	r2, [pc, #40]	; (8004d10 <mfxstm32l152_GetInstance+0x3c>)
 8004ce8:	5cd3      	ldrb	r3, [r2, r3]
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	88fa      	ldrh	r2, [r7, #6]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d101      	bne.n	8004cf6 <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
 8004cf4:	e006      	b.n	8004d04 <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	73fb      	strb	r3, [r7, #15]
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d9f0      	bls.n	8004ce4 <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 8004d02:	23ff      	movs	r3, #255	; 0xff
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	20001020 	.word	0x20001020

08004d14 <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8004d1e:	2300      	movs	r3, #0
 8004d20:	73fb      	strb	r3, [r7, #15]
 8004d22:	e00f      	b.n	8004d44 <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
 8004d26:	4a0c      	ldr	r2, [pc, #48]	; (8004d58 <mfxstm32l152_ReleaseInstance+0x44>)
 8004d28:	5cd3      	ldrb	r3, [r2, r3]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	88fa      	ldrh	r2, [r7, #6]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d105      	bne.n	8004d3e <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	4a08      	ldr	r2, [pc, #32]	; (8004d58 <mfxstm32l152_ReleaseInstance+0x44>)
 8004d36:	2100      	movs	r1, #0
 8004d38:	54d1      	strb	r1, [r2, r3]
      return idx;
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	e006      	b.n	8004d4c <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
 8004d40:	3301      	adds	r3, #1
 8004d42:	73fb      	strb	r3, [r7, #15]
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d9ec      	bls.n	8004d24 <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 8004d4a:	23ff      	movs	r3, #255	; 0xff
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	20001020 	.word	0x20001020

08004d5c <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	603a      	str	r2, [r7, #0]
 8004d64:	461a      	mov	r2, r3
 8004d66:	4603      	mov	r3, r0
 8004d68:	80fb      	strh	r3, [r7, #6]
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	717b      	strb	r3, [r7, #5]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 8004d72:	2300      	movs	r3, #0
 8004d74:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	0a1b      	lsrs	r3, r3, #8
 8004d7e:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	0c1b      	lsrs	r3, r3, #16
 8004d84:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 8004d86:	7bbb      	ldrb	r3, [r7, #14]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01e      	beq.n	8004dca <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 8004d8c:	797a      	ldrb	r2, [r7, #5]
 8004d8e:	88fb      	ldrh	r3, [r7, #6]
 8004d90:	4611      	mov	r1, r2
 8004d92:	4618      	mov	r0, r3
 8004d94:	f005 fc28 	bl	800a5e8 <MFX_IO_Read>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8004d9c:	793b      	ldrb	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d004      	beq.n	8004dac <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 8004da2:	7bfa      	ldrb	r2, [r7, #15]
 8004da4:	7bbb      	ldrb	r3, [r7, #14]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	73fb      	strb	r3, [r7, #15]
 8004daa:	e008      	b.n	8004dbe <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 8004dac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004db0:	43db      	mvns	r3, r3
 8004db2:	b25a      	sxtb	r2, r3
 8004db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004db8:	4013      	ands	r3, r2
 8004dba:	b25b      	sxtb	r3, r3
 8004dbc:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 8004dbe:	7bfa      	ldrb	r2, [r7, #15]
 8004dc0:	7979      	ldrb	r1, [r7, #5]
 8004dc2:	88fb      	ldrh	r3, [r7, #6]
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f005 fbfb 	bl	800a5c0 <MFX_IO_Write>
  }

  if (pin_8_15)
 8004dca:	7b7b      	ldrb	r3, [r7, #13]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d022      	beq.n	8004e16 <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 8004dd0:	797b      	ldrb	r3, [r7, #5]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	b2da      	uxtb	r2, r3
 8004dd6:	88fb      	ldrh	r3, [r7, #6]
 8004dd8:	4611      	mov	r1, r2
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f005 fc04 	bl	800a5e8 <MFX_IO_Read>
 8004de0:	4603      	mov	r3, r0
 8004de2:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8004de4:	793b      	ldrb	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d004      	beq.n	8004df4 <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 8004dea:	7bfa      	ldrb	r2, [r7, #15]
 8004dec:	7b7b      	ldrb	r3, [r7, #13]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	73fb      	strb	r3, [r7, #15]
 8004df2:	e008      	b.n	8004e06 <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 8004df4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	b25a      	sxtb	r2, r3
 8004dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e00:	4013      	ands	r3, r2
 8004e02:	b25b      	sxtb	r3, r3
 8004e04:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 8004e06:	797b      	ldrb	r3, [r7, #5]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	b2d9      	uxtb	r1, r3
 8004e0c:	7bfa      	ldrb	r2, [r7, #15]
 8004e0e:	88fb      	ldrh	r3, [r7, #6]
 8004e10:	4618      	mov	r0, r3
 8004e12:	f005 fbd5 	bl	800a5c0 <MFX_IO_Write>
  }

  if (pin_16_23)
 8004e16:	7b3b      	ldrb	r3, [r7, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d022      	beq.n	8004e62 <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 8004e1c:	797b      	ldrb	r3, [r7, #5]
 8004e1e:	3302      	adds	r3, #2
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	88fb      	ldrh	r3, [r7, #6]
 8004e24:	4611      	mov	r1, r2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f005 fbde 	bl	800a5e8 <MFX_IO_Read>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8004e30:	793b      	ldrb	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d004      	beq.n	8004e40 <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 8004e36:	7bfa      	ldrb	r2, [r7, #15]
 8004e38:	7b3b      	ldrb	r3, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	73fb      	strb	r3, [r7, #15]
 8004e3e:	e008      	b.n	8004e52 <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8004e40:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8004e44:	43db      	mvns	r3, r3
 8004e46:	b25a      	sxtb	r2, r3
 8004e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	b25b      	sxtb	r3, r3
 8004e50:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 8004e52:	797b      	ldrb	r3, [r7, #5]
 8004e54:	3302      	adds	r3, #2
 8004e56:	b2d9      	uxtb	r1, r3
 8004e58:	7bfa      	ldrb	r2, [r7, #15]
 8004e5a:	88fb      	ldrh	r3, [r7, #6]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f005 fbaf 	bl	800a5c0 <MFX_IO_Write>
  }
}
 8004e62:	bf00      	nop
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b084      	sub	sp, #16
 8004e6e:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8004e70:	f005 fcf0 	bl	800a854 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8004e74:	2200      	movs	r2, #0
 8004e76:	2100      	movs	r1, #0
 8004e78:	2010      	movs	r0, #16
 8004e7a:	f000 f9e4 	bl	8005246 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8004e7e:	200a      	movs	r0, #10
 8004e80:	f005 fd0f 	bl	800a8a2 <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8004e84:	2200      	movs	r2, #0
 8004e86:	2100      	movs	r1, #0
 8004e88:	2001      	movs	r0, #1
 8004e8a:	f000 f9dc 	bl	8005246 <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 8004e8e:	20c8      	movs	r0, #200	; 0xc8
 8004e90:	f005 fd07 	bl	800a8a2 <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8004e94:	2200      	movs	r2, #0
 8004e96:	2100      	movs	r1, #0
 8004e98:	2011      	movs	r0, #17
 8004e9a:	f000 f9d4 	bl	8005246 <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 8004e9e:	2078      	movs	r0, #120	; 0x78
 8004ea0:	f005 fcff 	bl	800a8a2 <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8004ea8:	463b      	mov	r3, r7
 8004eaa:	2201      	movs	r2, #1
 8004eac:	4619      	mov	r1, r3
 8004eae:	2036      	movs	r0, #54	; 0x36
 8004eb0:	f000 f9c9 	bl	8005246 <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8004eb4:	2305      	movs	r3, #5
 8004eb6:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8004eb8:	463b      	mov	r3, r7
 8004eba:	2201      	movs	r2, #1
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	203a      	movs	r0, #58	; 0x3a
 8004ec0:	f000 f9c1 	bl	8005246 <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	2021      	movs	r0, #33	; 0x21
 8004eca:	f000 f9bc 	bl	8005246 <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8004eda:	23ef      	movs	r3, #239	; 0xef
 8004edc:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8004ede:	463b      	mov	r3, r7
 8004ee0:	2204      	movs	r2, #4
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	202a      	movs	r0, #42	; 0x2a
 8004ee6:	f000 f9ae 	bl	8005246 <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 8004eea:	2300      	movs	r3, #0
 8004eec:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8004ef6:	23ef      	movs	r3, #239	; 0xef
 8004ef8:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8004efa:	463b      	mov	r3, r7
 8004efc:	2204      	movs	r2, #4
 8004efe:	4619      	mov	r1, r3
 8004f00:	202b      	movs	r0, #43	; 0x2b
 8004f02:	f000 f9a0 	bl	8005246 <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 8004f06:	230c      	movs	r3, #12
 8004f08:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8004f0a:	230c      	movs	r3, #12
 8004f0c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8004f12:	2333      	movs	r3, #51	; 0x33
 8004f14:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 8004f16:	2333      	movs	r3, #51	; 0x33
 8004f18:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8004f1a:	463b      	mov	r3, r7
 8004f1c:	2205      	movs	r2, #5
 8004f1e:	4619      	mov	r1, r3
 8004f20:	20b2      	movs	r0, #178	; 0xb2
 8004f22:	f000 f990 	bl	8005246 <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8004f26:	2335      	movs	r3, #53	; 0x35
 8004f28:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8004f2a:	463b      	mov	r3, r7
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	4619      	mov	r1, r3
 8004f30:	20b7      	movs	r0, #183	; 0xb7
 8004f32:	f000 f988 	bl	8005246 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8004f36:	231f      	movs	r3, #31
 8004f38:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8004f3a:	463b      	mov	r3, r7
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	4619      	mov	r1, r3
 8004f40:	20bb      	movs	r0, #187	; 0xbb
 8004f42:	f000 f980 	bl	8005246 <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8004f46:	232c      	movs	r3, #44	; 0x2c
 8004f48:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8004f4a:	463b      	mov	r3, r7
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	4619      	mov	r1, r3
 8004f50:	20c0      	movs	r0, #192	; 0xc0
 8004f52:	f000 f978 	bl	8005246 <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 8004f56:	2301      	movs	r3, #1
 8004f58:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8004f5a:	23c3      	movs	r3, #195	; 0xc3
 8004f5c:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8004f5e:	463b      	mov	r3, r7
 8004f60:	2202      	movs	r2, #2
 8004f62:	4619      	mov	r1, r3
 8004f64:	20c2      	movs	r0, #194	; 0xc2
 8004f66:	f000 f96e 	bl	8005246 <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8004f6a:	2320      	movs	r3, #32
 8004f6c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8004f6e:	463b      	mov	r3, r7
 8004f70:	2201      	movs	r2, #1
 8004f72:	4619      	mov	r1, r3
 8004f74:	20c4      	movs	r0, #196	; 0xc4
 8004f76:	f000 f966 	bl	8005246 <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8004f7a:	230f      	movs	r3, #15
 8004f7c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8004f7e:	463b      	mov	r3, r7
 8004f80:	2201      	movs	r2, #1
 8004f82:	4619      	mov	r1, r3
 8004f84:	20c6      	movs	r0, #198	; 0xc6
 8004f86:	f000 f95e 	bl	8005246 <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8004f8a:	23a4      	movs	r3, #164	; 0xa4
 8004f8c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8004f8e:	23a1      	movs	r3, #161	; 0xa1
 8004f90:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 2); 
 8004f92:	463b      	mov	r3, r7
 8004f94:	2202      	movs	r2, #2
 8004f96:	4619      	mov	r1, r3
 8004f98:	20d0      	movs	r0, #208	; 0xd0
 8004f9a:	f000 f954 	bl	8005246 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8004f9e:	23d0      	movs	r3, #208	; 0xd0
 8004fa0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 8004fa6:	2311      	movs	r3, #17
 8004fa8:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8004faa:	2308      	movs	r3, #8
 8004fac:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8004fae:	230c      	movs	r3, #12
 8004fb0:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 8004fb2:	2315      	movs	r3, #21
 8004fb4:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8004fb6:	2339      	movs	r3, #57	; 0x39
 8004fb8:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8004fba:	2333      	movs	r3, #51	; 0x33
 8004fbc:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8004fbe:	2350      	movs	r3, #80	; 0x50
 8004fc0:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 8004fc2:	2336      	movs	r3, #54	; 0x36
 8004fc4:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 8004fc6:	2313      	movs	r3, #19
 8004fc8:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8004fca:	2314      	movs	r3, #20
 8004fcc:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8004fce:	2329      	movs	r3, #41	; 0x29
 8004fd0:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8004fd2:	232d      	movs	r3, #45	; 0x2d
 8004fd4:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8004fd6:	463b      	mov	r3, r7
 8004fd8:	220e      	movs	r2, #14
 8004fda:	4619      	mov	r1, r3
 8004fdc:	20e0      	movs	r0, #224	; 0xe0
 8004fde:	f000 f932 	bl	8005246 <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8004fe2:	23d0      	movs	r3, #208	; 0xd0
 8004fe4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8004fea:	2310      	movs	r3, #16
 8004fec:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8004fee:	2308      	movs	r3, #8
 8004ff0:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8004ff2:	2306      	movs	r3, #6
 8004ff4:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 8004ff6:	2306      	movs	r3, #6
 8004ff8:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8004ffa:	2339      	movs	r3, #57	; 0x39
 8004ffc:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8004ffe:	2344      	movs	r3, #68	; 0x44
 8005000:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8005002:	2351      	movs	r3, #81	; 0x51
 8005004:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 8005006:	230b      	movs	r3, #11
 8005008:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 800500a:	2316      	movs	r3, #22
 800500c:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 800500e:	2314      	movs	r3, #20
 8005010:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8005012:	232f      	movs	r3, #47	; 0x2f
 8005014:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 8005016:	2331      	movs	r3, #49	; 0x31
 8005018:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 800501a:	463b      	mov	r3, r7
 800501c:	220e      	movs	r2, #14
 800501e:	4619      	mov	r1, r3
 8005020:	20e1      	movs	r0, #225	; 0xe1
 8005022:	f000 f910 	bl	8005246 <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8005026:	f000 f847 	bl	80050b8 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 800502a:	2300      	movs	r3, #0
 800502c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 800502e:	463b      	mov	r3, r7
 8005030:	2201      	movs	r2, #1
 8005032:	4619      	mov	r1, r3
 8005034:	2035      	movs	r0, #53	; 0x35
 8005036:	f000 f906 	bl	8005246 <ST7789H2_WriteReg>

}
 800503a:	bf00      	nop
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b084      	sub	sp, #16
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d102      	bne.n	8005056 <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8005050:	2300      	movs	r3, #0
 8005052:	723b      	strb	r3, [r7, #8]
 8005054:	e025      	b.n	80050a2 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2b02      	cmp	r3, #2
 800505a:	d120      	bne.n	800509e <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 800505c:	2300      	movs	r3, #0
 800505e:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8005060:	2300      	movs	r3, #0
 8005062:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8005064:	2301      	movs	r3, #1
 8005066:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8005068:	23f0      	movs	r3, #240	; 0xf0
 800506a:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 800506c:	2300      	movs	r3, #0
 800506e:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8005070:	2300      	movs	r3, #0
 8005072:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8005074:	f107 0308 	add.w	r3, r7, #8
 8005078:	2206      	movs	r2, #6
 800507a:	4619      	mov	r1, r3
 800507c:	2033      	movs	r0, #51	; 0x33
 800507e:	f000 f8e2 	bl	8005246 <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8005082:	2300      	movs	r3, #0
 8005084:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8005086:	2350      	movs	r3, #80	; 0x50
 8005088:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 800508a:	f107 0308 	add.w	r3, r7, #8
 800508e:	2202      	movs	r2, #2
 8005090:	4619      	mov	r1, r3
 8005092:	2037      	movs	r0, #55	; 0x37
 8005094:	f000 f8d7 	bl	8005246 <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8005098:	23c0      	movs	r3, #192	; 0xc0
 800509a:	723b      	strb	r3, [r7, #8]
 800509c:	e001      	b.n	80050a2 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 800509e:	2360      	movs	r3, #96	; 0x60
 80050a0:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 80050a2:	f107 0308 	add.w	r3, r7, #8
 80050a6:	2201      	movs	r2, #1
 80050a8:	4619      	mov	r1, r3
 80050aa:	2036      	movs	r0, #54	; 0x36
 80050ac:	f000 f8cb 	bl	8005246 <ST7789H2_WriteReg>
}
 80050b0:	bf00      	nop
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 80050bc:	2200      	movs	r2, #0
 80050be:	2100      	movs	r1, #0
 80050c0:	2029      	movs	r0, #41	; 0x29
 80050c2:	f000 f8c0 	bl	8005246 <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 80050c6:	2200      	movs	r2, #0
 80050c8:	2100      	movs	r1, #0
 80050ca:	2011      	movs	r0, #17
 80050cc:	f000 f8bb 	bl	8005246 <ST7789H2_WriteReg>
}
 80050d0:	bf00      	nop
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 80050da:	23fe      	movs	r3, #254	; 0xfe
 80050dc:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 80050de:	1d3b      	adds	r3, r7, #4
 80050e0:	2201      	movs	r2, #1
 80050e2:	4619      	mov	r1, r3
 80050e4:	20bd      	movs	r0, #189	; 0xbd
 80050e6:	f000 f8ae 	bl	8005246 <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80050ea:	2200      	movs	r2, #0
 80050ec:	2100      	movs	r1, #0
 80050ee:	2010      	movs	r0, #16
 80050f0:	f000 f8a9 	bl	8005246 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 80050f4:	200a      	movs	r0, #10
 80050f6:	f005 fbd4 	bl	800a8a2 <LCD_IO_Delay>
}
 80050fa:	bf00      	nop
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8005102:	b480      	push	{r7}
 8005104:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 8005106:	23f0      	movs	r3, #240	; 0xf0
}
 8005108:	4618      	mov	r0, r3
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8005112:	b480      	push	{r7}
 8005114:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 8005116:	23f0      	movs	r3, #240	; 0xf0
}
 8005118:	4618      	mov	r0, r3
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8005126:	f005 fb95 	bl	800a854 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 800512a:	2004      	movs	r0, #4
 800512c:	f000 f8ae 	bl	800528c <ST7789H2_ReadReg>
 8005130:	4603      	mov	r3, r0
 8005132:	b29b      	uxth	r3, r3
}
 8005134:	4618      	mov	r0, r3
 8005136:	bd80      	pop	{r7, pc}

08005138 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	460a      	mov	r2, r1
 8005142:	80fb      	strh	r3, [r7, #6]
 8005144:	4613      	mov	r3, r2
 8005146:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8005148:	2300      	movs	r3, #0
 800514a:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 800514c:	88fb      	ldrh	r3, [r7, #6]
 800514e:	b2db      	uxtb	r3, r3
 8005150:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8005152:	2300      	movs	r3, #0
 8005154:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 8005156:	88fb      	ldrh	r3, [r7, #6]
 8005158:	b2db      	uxtb	r3, r3
 800515a:	3b11      	subs	r3, #17
 800515c:	b2db      	uxtb	r3, r3
 800515e:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8005160:	f107 030c 	add.w	r3, r7, #12
 8005164:	2204      	movs	r2, #4
 8005166:	4619      	mov	r1, r3
 8005168:	202a      	movs	r0, #42	; 0x2a
 800516a:	f000 f86c 	bl	8005246 <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 800516e:	2300      	movs	r3, #0
 8005170:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8005172:	88bb      	ldrh	r3, [r7, #4]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8005178:	2300      	movs	r3, #0
 800517a:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 800517c:	88bb      	ldrh	r3, [r7, #4]
 800517e:	b2db      	uxtb	r3, r3
 8005180:	3b11      	subs	r3, #17
 8005182:	b2db      	uxtb	r3, r3
 8005184:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8005186:	f107 030c 	add.w	r3, r7, #12
 800518a:	2204      	movs	r2, #4
 800518c:	4619      	mov	r1, r3
 800518e:	202b      	movs	r0, #43	; 0x2b
 8005190:	f000 f859 	bl	8005246 <ST7789H2_WriteReg>
}
 8005194:	bf00      	nop
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	4603      	mov	r3, r0
 80051a4:	80fb      	strh	r3, [r7, #6]
 80051a6:	460b      	mov	r3, r1
 80051a8:	80bb      	strh	r3, [r7, #4]
 80051aa:	4613      	mov	r3, r2
 80051ac:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80051ae:	88ba      	ldrh	r2, [r7, #4]
 80051b0:	88fb      	ldrh	r3, [r7, #6]
 80051b2:	4611      	mov	r1, r2
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7ff ffbf 	bl	8005138 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80051ba:	2200      	movs	r2, #0
 80051bc:	2100      	movs	r1, #0
 80051be:	202c      	movs	r0, #44	; 0x2c
 80051c0:	f000 f841 	bl	8005246 <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 80051c4:	887b      	ldrh	r3, [r7, #2]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f005 fb4a 	bl	800a860 <LCD_IO_WriteData>
}
 80051cc:	bf00      	nop
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	4603      	mov	r3, r0
 80051dc:	460a      	mov	r2, r1
 80051de:	80fb      	strh	r3, [r7, #6]
 80051e0:	4613      	mov	r3, r2
 80051e2:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80051e4:	88ba      	ldrh	r2, [r7, #4]
 80051e6:	88fb      	ldrh	r3, [r7, #6]
 80051e8:	4611      	mov	r1, r2
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff ffa4 	bl	8005138 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 80051f0:	88ba      	ldrh	r2, [r7, #4]
 80051f2:	88fb      	ldrh	r3, [r7, #6]
 80051f4:	4611      	mov	r1, r2
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 f9c0 	bl	800557c <ST7789H2_ReadPixel_rgb888>
 80051fc:	4603      	mov	r3, r0
 80051fe:	461a      	mov	r2, r3
 8005200:	733a      	strb	r2, [r7, #12]
 8005202:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005206:	737a      	strb	r2, [r7, #13]
 8005208:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800520c:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 800520e:	7b3b      	ldrb	r3, [r7, #12]
 8005210:	08db      	lsrs	r3, r3, #3
 8005212:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8005214:	7b7b      	ldrb	r3, [r7, #13]
 8005216:	089b      	lsrs	r3, r3, #2
 8005218:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 800521a:	7bbb      	ldrb	r3, [r7, #14]
 800521c:	08db      	lsrs	r3, r3, #3
 800521e:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8005220:	7dfb      	ldrb	r3, [r7, #23]
 8005222:	b29b      	uxth	r3, r3
 8005224:	02db      	lsls	r3, r3, #11
 8005226:	b29a      	uxth	r2, r3
 8005228:	7dbb      	ldrb	r3, [r7, #22]
 800522a:	b29b      	uxth	r3, r3
 800522c:	015b      	lsls	r3, r3, #5
 800522e:	b29b      	uxth	r3, r3
 8005230:	4413      	add	r3, r2
 8005232:	b29a      	uxth	r2, r3
 8005234:	7d7b      	ldrb	r3, [r7, #21]
 8005236:	b29b      	uxth	r3, r3
 8005238:	4413      	add	r3, r2
 800523a:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 800523c:	8a7b      	ldrh	r3, [r7, #18]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8005246:	b580      	push	{r7, lr}
 8005248:	b084      	sub	sp, #16
 800524a:	af00      	add	r7, sp, #0
 800524c:	4603      	mov	r3, r0
 800524e:	6039      	str	r1, [r7, #0]
 8005250:	71fb      	strb	r3, [r7, #7]
 8005252:	4613      	mov	r3, r2
 8005254:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8005256:	79fb      	ldrb	r3, [r7, #7]
 8005258:	4618      	mov	r0, r3
 800525a:	f005 fb0e 	bl	800a87a <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 800525e:	2300      	movs	r3, #0
 8005260:	73fb      	strb	r3, [r7, #15]
 8005262:	e00a      	b.n	800527a <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8005264:	7bfb      	ldrb	r3, [r7, #15]
 8005266:	683a      	ldr	r2, [r7, #0]
 8005268:	4413      	add	r3, r2
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	b29b      	uxth	r3, r3
 800526e:	4618      	mov	r0, r3
 8005270:	f005 faf6 	bl	800a860 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8005274:	7bfb      	ldrb	r3, [r7, #15]
 8005276:	3301      	adds	r3, #1
 8005278:	73fb      	strb	r3, [r7, #15]
 800527a:	7bfa      	ldrb	r2, [r7, #15]
 800527c:	79bb      	ldrb	r3, [r7, #6]
 800527e:	429a      	cmp	r2, r3
 8005280:	d3f0      	bcc.n	8005264 <ST7789H2_WriteReg+0x1e>
  }
}
 8005282:	bf00      	nop
 8005284:	bf00      	nop
 8005286:	3710      	adds	r7, #16
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 8005296:	79fb      	ldrb	r3, [r7, #7]
 8005298:	4618      	mov	r0, r3
 800529a:	f005 faee 	bl	800a87a <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 800529e:	f005 faf9 	bl	800a894 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 80052a2:	f005 faf7 	bl	800a894 <LCD_IO_ReadData>
 80052a6:	4603      	mov	r3, r0
 80052a8:	b2db      	uxtb	r3, r3
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80052b4:	b490      	push	{r4, r7}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	4604      	mov	r4, r0
 80052bc:	4608      	mov	r0, r1
 80052be:	4611      	mov	r1, r2
 80052c0:	461a      	mov	r2, r3
 80052c2:	4623      	mov	r3, r4
 80052c4:	80fb      	strh	r3, [r7, #6]
 80052c6:	4603      	mov	r3, r0
 80052c8:	80bb      	strh	r3, [r7, #4]
 80052ca:	460b      	mov	r3, r1
 80052cc:	807b      	strh	r3, [r7, #2]
 80052ce:	4613      	mov	r3, r2
 80052d0:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 80052d2:	88fb      	ldrh	r3, [r7, #6]
 80052d4:	2bef      	cmp	r3, #239	; 0xef
 80052d6:	d803      	bhi.n	80052e0 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 80052d8:	4a1b      	ldr	r2, [pc, #108]	; (8005348 <ST7789H2_SetDisplayWindow+0x94>)
 80052da:	88fb      	ldrh	r3, [r7, #6]
 80052dc:	8013      	strh	r3, [r2, #0]
 80052de:	e002      	b.n	80052e6 <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 80052e0:	4b19      	ldr	r3, [pc, #100]	; (8005348 <ST7789H2_SetDisplayWindow+0x94>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 80052e6:	88bb      	ldrh	r3, [r7, #4]
 80052e8:	2bef      	cmp	r3, #239	; 0xef
 80052ea:	d803      	bhi.n	80052f4 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 80052ec:	4a17      	ldr	r2, [pc, #92]	; (800534c <ST7789H2_SetDisplayWindow+0x98>)
 80052ee:	88bb      	ldrh	r3, [r7, #4]
 80052f0:	8013      	strh	r3, [r2, #0]
 80052f2:	e002      	b.n	80052fa <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 80052f4:	4b15      	ldr	r3, [pc, #84]	; (800534c <ST7789H2_SetDisplayWindow+0x98>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 80052fa:	887a      	ldrh	r2, [r7, #2]
 80052fc:	88fb      	ldrh	r3, [r7, #6]
 80052fe:	4413      	add	r3, r2
 8005300:	2bf0      	cmp	r3, #240	; 0xf0
 8005302:	dc08      	bgt.n	8005316 <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 8005304:	887a      	ldrh	r2, [r7, #2]
 8005306:	88fb      	ldrh	r3, [r7, #6]
 8005308:	4413      	add	r3, r2
 800530a:	b29b      	uxth	r3, r3
 800530c:	3b01      	subs	r3, #1
 800530e:	b29a      	uxth	r2, r3
 8005310:	4b0f      	ldr	r3, [pc, #60]	; (8005350 <ST7789H2_SetDisplayWindow+0x9c>)
 8005312:	801a      	strh	r2, [r3, #0]
 8005314:	e002      	b.n	800531c <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8005316:	4b0e      	ldr	r3, [pc, #56]	; (8005350 <ST7789H2_SetDisplayWindow+0x9c>)
 8005318:	22ef      	movs	r2, #239	; 0xef
 800531a:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 800531c:	883a      	ldrh	r2, [r7, #0]
 800531e:	88bb      	ldrh	r3, [r7, #4]
 8005320:	4413      	add	r3, r2
 8005322:	2bf0      	cmp	r3, #240	; 0xf0
 8005324:	dc08      	bgt.n	8005338 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8005326:	883a      	ldrh	r2, [r7, #0]
 8005328:	88bb      	ldrh	r3, [r7, #4]
 800532a:	4413      	add	r3, r2
 800532c:	b29b      	uxth	r3, r3
 800532e:	3b01      	subs	r3, #1
 8005330:	b29a      	uxth	r2, r3
 8005332:	4b08      	ldr	r3, [pc, #32]	; (8005354 <ST7789H2_SetDisplayWindow+0xa0>)
 8005334:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8005336:	e002      	b.n	800533e <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8005338:	4b06      	ldr	r3, [pc, #24]	; (8005354 <ST7789H2_SetDisplayWindow+0xa0>)
 800533a:	22ef      	movs	r2, #239	; 0xef
 800533c:	801a      	strh	r2, [r3, #0]
}
 800533e:	bf00      	nop
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bc90      	pop	{r4, r7}
 8005346:	4770      	bx	lr
 8005348:	20001024 	.word	0x20001024
 800534c:	20001026 	.word	0x20001026
 8005350:	20000270 	.word	0x20000270
 8005354:	20000272 	.word	0x20000272

08005358 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005358:	b590      	push	{r4, r7, lr}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	4604      	mov	r4, r0
 8005360:	4608      	mov	r0, r1
 8005362:	4611      	mov	r1, r2
 8005364:	461a      	mov	r2, r3
 8005366:	4623      	mov	r3, r4
 8005368:	80fb      	strh	r3, [r7, #6]
 800536a:	4603      	mov	r3, r0
 800536c:	80bb      	strh	r3, [r7, #4]
 800536e:	460b      	mov	r3, r1
 8005370:	807b      	strh	r3, [r7, #2]
 8005372:	4613      	mov	r3, r2
 8005374:	803b      	strh	r3, [r7, #0]
  uint16_t counter;
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8005376:	887a      	ldrh	r2, [r7, #2]
 8005378:	88bb      	ldrh	r3, [r7, #4]
 800537a:	4611      	mov	r1, r2
 800537c:	4618      	mov	r0, r3
 800537e:	f7ff fedb 	bl	8005138 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8005382:	2200      	movs	r2, #0
 8005384:	2100      	movs	r1, #0
 8005386:	202c      	movs	r0, #44	; 0x2c
 8005388:	f7ff ff5d 	bl	8005246 <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 800538c:	2300      	movs	r3, #0
 800538e:	81fb      	strh	r3, [r7, #14]
 8005390:	e006      	b.n	80053a0 <ST7789H2_DrawHLine+0x48>
  {
    LCD_IO_WriteData(RGBCode);
 8005392:	88fb      	ldrh	r3, [r7, #6]
 8005394:	4618      	mov	r0, r3
 8005396:	f005 fa63 	bl	800a860 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 800539a:	89fb      	ldrh	r3, [r7, #14]
 800539c:	3301      	adds	r3, #1
 800539e:	81fb      	strh	r3, [r7, #14]
 80053a0:	89fa      	ldrh	r2, [r7, #14]
 80053a2:	883b      	ldrh	r3, [r7, #0]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d3f4      	bcc.n	8005392 <ST7789H2_DrawHLine+0x3a>
  }  
}
 80053a8:	bf00      	nop
 80053aa:	bf00      	nop
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd90      	pop	{r4, r7, pc}

080053b2 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80053b2:	b590      	push	{r4, r7, lr}
 80053b4:	b085      	sub	sp, #20
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	4604      	mov	r4, r0
 80053ba:	4608      	mov	r0, r1
 80053bc:	4611      	mov	r1, r2
 80053be:	461a      	mov	r2, r3
 80053c0:	4623      	mov	r3, r4
 80053c2:	80fb      	strh	r3, [r7, #6]
 80053c4:	4603      	mov	r3, r0
 80053c6:	80bb      	strh	r3, [r7, #4]
 80053c8:	460b      	mov	r3, r1
 80053ca:	807b      	strh	r3, [r7, #2]
 80053cc:	4613      	mov	r3, r2
 80053ce:	803b      	strh	r3, [r7, #0]
  uint16_t counter;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80053d0:	887a      	ldrh	r2, [r7, #2]
 80053d2:	88bb      	ldrh	r3, [r7, #4]
 80053d4:	4611      	mov	r1, r2
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff feae 	bl	8005138 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80053dc:	2200      	movs	r2, #0
 80053de:	2100      	movs	r1, #0
 80053e0:	202c      	movs	r0, #44	; 0x2c
 80053e2:	f7ff ff30 	bl	8005246 <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 80053e6:	2300      	movs	r3, #0
 80053e8:	81fb      	strh	r3, [r7, #14]
 80053ea:	e00b      	b.n	8005404 <ST7789H2_DrawVLine+0x52>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 80053ec:	887a      	ldrh	r2, [r7, #2]
 80053ee:	89fb      	ldrh	r3, [r7, #14]
 80053f0:	4413      	add	r3, r2
 80053f2:	b299      	uxth	r1, r3
 80053f4:	88fa      	ldrh	r2, [r7, #6]
 80053f6:	88bb      	ldrh	r3, [r7, #4]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff fecf 	bl	800519c <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 80053fe:	89fb      	ldrh	r3, [r7, #14]
 8005400:	3301      	adds	r3, #1
 8005402:	81fb      	strh	r3, [r7, #14]
 8005404:	89fa      	ldrh	r2, [r7, #14]
 8005406:	883b      	ldrh	r3, [r7, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d3ef      	bcc.n	80053ec <ST7789H2_DrawVLine+0x3a>
  }
}
 800540c:	bf00      	nop
 800540e:	bf00      	nop
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	bd90      	pop	{r4, r7, pc}
	...

08005418 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b088      	sub	sp, #32
 800541c:	af00      	add	r7, sp, #0
 800541e:	4603      	mov	r3, r0
 8005420:	603a      	str	r2, [r7, #0]
 8005422:	80fb      	strh	r3, [r7, #6]
 8005424:	460b      	mov	r3, r1
 8005426:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8005428:	2300      	movs	r3, #0
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	2300      	movs	r3, #0
 800542e:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8005430:	2300      	movs	r3, #0
 8005432:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 8005434:	4b30      	ldr	r3, [pc, #192]	; (80054f8 <ST7789H2_DrawBitmap+0xe0>)
 8005436:	881a      	ldrh	r2, [r3, #0]
 8005438:	4b30      	ldr	r3, [pc, #192]	; (80054fc <ST7789H2_DrawBitmap+0xe4>)
 800543a:	881b      	ldrh	r3, [r3, #0]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	b29b      	uxth	r3, r3
 8005440:	3301      	adds	r3, #1
 8005442:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 8005444:	4b2e      	ldr	r3, [pc, #184]	; (8005500 <ST7789H2_DrawBitmap+0xe8>)
 8005446:	881a      	ldrh	r2, [r3, #0]
 8005448:	4b2e      	ldr	r3, [pc, #184]	; (8005504 <ST7789H2_DrawBitmap+0xec>)
 800544a:	881b      	ldrh	r3, [r3, #0]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	b29b      	uxth	r3, r3
 8005450:	3301      	adds	r3, #1
 8005452:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	3302      	adds	r3, #2
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	b29b      	uxth	r3, r3
 800545c:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	3304      	adds	r3, #4
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	b29b      	uxth	r3, r3
 8005466:	041b      	lsls	r3, r3, #16
 8005468:	461a      	mov	r2, r3
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	4313      	orrs	r3, r2
 800546e:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	330a      	adds	r3, #10
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	b29b      	uxth	r3, r3
 8005478:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	330c      	adds	r3, #12
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	b29b      	uxth	r3, r3
 8005482:	041b      	lsls	r3, r3, #16
 8005484:	461a      	mov	r2, r3
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	4313      	orrs	r3, r2
 800548a:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	085b      	lsrs	r3, r3, #1
 8005494:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	4413      	add	r3, r2
 800549c:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 800549e:	88ba      	ldrh	r2, [r7, #4]
 80054a0:	89bb      	ldrh	r3, [r7, #12]
 80054a2:	4413      	add	r3, r2
 80054a4:	61fb      	str	r3, [r7, #28]
 80054a6:	e01d      	b.n	80054e4 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	3b01      	subs	r3, #1
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	88fb      	ldrh	r3, [r7, #6]
 80054b2:	4611      	mov	r1, r2
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff fe3f 	bl	8005138 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	3b01      	subs	r3, #1
 80054c0:	b299      	uxth	r1, r3
 80054c2:	89fb      	ldrh	r3, [r7, #14]
 80054c4:	69ba      	ldr	r2, [r7, #24]
 80054c6:	fb02 f303 	mul.w	r3, r2, r3
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	4413      	add	r3, r2
 80054d0:	89fa      	ldrh	r2, [r7, #14]
 80054d2:	88f8      	ldrh	r0, [r7, #6]
 80054d4:	f000 f89c 	bl	8005610 <ST7789H2_DrawRGBHLine>
    nb_line++;
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	3301      	adds	r3, #1
 80054dc:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	61fb      	str	r3, [r7, #28]
 80054e4:	88bb      	ldrh	r3, [r7, #4]
 80054e6:	69fa      	ldr	r2, [r7, #28]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d8dd      	bhi.n	80054a8 <ST7789H2_DrawBitmap+0x90>
  }
}
 80054ec:	bf00      	nop
 80054ee:	bf00      	nop
 80054f0:	3720      	adds	r7, #32
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	20000270 	.word	0x20000270
 80054fc:	20001024 	.word	0x20001024
 8005500:	20000272 	.word	0x20000272
 8005504:	20001026 	.word	0x20001026

08005508 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8005508:	b590      	push	{r4, r7, lr}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	4604      	mov	r4, r0
 8005510:	4608      	mov	r0, r1
 8005512:	4611      	mov	r1, r2
 8005514:	461a      	mov	r2, r3
 8005516:	4623      	mov	r3, r4
 8005518:	80fb      	strh	r3, [r7, #6]
 800551a:	4603      	mov	r3, r0
 800551c:	80bb      	strh	r3, [r7, #4]
 800551e:	460b      	mov	r3, r1
 8005520:	807b      	strh	r3, [r7, #2]
 8005522:	4613      	mov	r3, r2
 8005524:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800552a:	88bb      	ldrh	r3, [r7, #4]
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	e019      	b.n	8005564 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	b29a      	uxth	r2, r3
 8005534:	88fb      	ldrh	r3, [r7, #6]
 8005536:	4611      	mov	r1, r2
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff fdfd 	bl	8005138 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	b299      	uxth	r1, r3
 8005542:	887b      	ldrh	r3, [r7, #2]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	fb02 f303 	mul.w	r3, r2, r3
 800554a:	005b      	lsls	r3, r3, #1
 800554c:	6a3a      	ldr	r2, [r7, #32]
 800554e:	4413      	add	r3, r2
 8005550:	887a      	ldrh	r2, [r7, #2]
 8005552:	88f8      	ldrh	r0, [r7, #6]
 8005554:	f000 f85c 	bl	8005610 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	3301      	adds	r3, #1
 800555c:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	3301      	adds	r3, #1
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	88ba      	ldrh	r2, [r7, #4]
 8005566:	883b      	ldrh	r3, [r7, #0]
 8005568:	4413      	add	r3, r2
 800556a:	461a      	mov	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4293      	cmp	r3, r2
 8005570:	d3de      	bcc.n	8005530 <ST7789H2_DrawRGBImage+0x28>
  }
}
 8005572:	bf00      	nop
 8005574:	bf00      	nop
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	bd90      	pop	{r4, r7, pc}

0800557c <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	4603      	mov	r3, r0
 8005584:	460a      	mov	r2, r1
 8005586:	80fb      	strh	r3, [r7, #6]
 8005588:	4613      	mov	r3, r2
 800558a:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 800558c:	88ba      	ldrh	r2, [r7, #4]
 800558e:	88fb      	ldrh	r3, [r7, #6]
 8005590:	4611      	mov	r1, r2
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff fdd0 	bl	8005138 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8005598:	2200      	movs	r2, #0
 800559a:	2100      	movs	r1, #0
 800559c:	202e      	movs	r0, #46	; 0x2e
 800559e:	f7ff fe52 	bl	8005246 <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 80055a2:	f005 f977 	bl	800a894 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 80055a6:	f005 f975 	bl	800a894 <LCD_IO_ReadData>
 80055aa:	4603      	mov	r3, r0
 80055ac:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 80055ae:	f005 f971 	bl	800a894 <LCD_IO_ReadData>
 80055b2:	4603      	mov	r3, r0
 80055b4:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 80055b6:	8afb      	ldrh	r3, [r7, #22]
 80055b8:	121b      	asrs	r3, r3, #8
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	f023 0303 	bic.w	r3, r3, #3
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 80055c4:	8afb      	ldrh	r3, [r7, #22]
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	f023 0303 	bic.w	r3, r3, #3
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 80055d0:	8abb      	ldrh	r3, [r7, #20]
 80055d2:	121b      	asrs	r3, r3, #8
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	f023 0303 	bic.w	r3, r3, #3
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 80055de:	f107 0310 	add.w	r3, r7, #16
 80055e2:	f107 020c 	add.w	r2, r7, #12
 80055e6:	6812      	ldr	r2, [r2, #0]
 80055e8:	4611      	mov	r1, r2
 80055ea:	8019      	strh	r1, [r3, #0]
 80055ec:	3302      	adds	r3, #2
 80055ee:	0c12      	lsrs	r2, r2, #16
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	2300      	movs	r3, #0
 80055f4:	7c3a      	ldrb	r2, [r7, #16]
 80055f6:	f362 0307 	bfi	r3, r2, #0, #8
 80055fa:	7c7a      	ldrb	r2, [r7, #17]
 80055fc:	f362 230f 	bfi	r3, r2, #8, #8
 8005600:	7cba      	ldrb	r2, [r7, #18]
 8005602:	f362 4317 	bfi	r3, r2, #16, #8
}
 8005606:	4618      	mov	r0, r3
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
	...

08005610 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af00      	add	r7, sp, #0
 8005616:	607b      	str	r3, [r7, #4]
 8005618:	4603      	mov	r3, r0
 800561a:	81fb      	strh	r3, [r7, #14]
 800561c:	460b      	mov	r3, r1
 800561e:	81bb      	strh	r3, [r7, #12]
 8005620:	4613      	mov	r3, r2
 8005622:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 8005624:	2300      	movs	r3, #0
 8005626:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800562c:	2200      	movs	r2, #0
 800562e:	2100      	movs	r1, #0
 8005630:	202c      	movs	r0, #44	; 0x2c
 8005632:	f7ff fe08 	bl	8005246 <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8005636:	89fb      	ldrh	r3, [r7, #14]
 8005638:	61bb      	str	r3, [r7, #24]
 800563a:	e029      	b.n	8005690 <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 800563c:	4b1a      	ldr	r3, [pc, #104]	; (80056a8 <ST7789H2_DrawRGBHLine+0x98>)
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	461a      	mov	r2, r3
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	4293      	cmp	r3, r2
 8005646:	d320      	bcc.n	800568a <ST7789H2_DrawRGBHLine+0x7a>
 8005648:	4b18      	ldr	r3, [pc, #96]	; (80056ac <ST7789H2_DrawRGBHLine+0x9c>)
 800564a:	881b      	ldrh	r3, [r3, #0]
 800564c:	89ba      	ldrh	r2, [r7, #12]
 800564e:	429a      	cmp	r2, r3
 8005650:	d31b      	bcc.n	800568a <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8005652:	4b17      	ldr	r3, [pc, #92]	; (80056b0 <ST7789H2_DrawRGBHLine+0xa0>)
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	4293      	cmp	r3, r2
 800565c:	d815      	bhi.n	800568a <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800565e:	4b15      	ldr	r3, [pc, #84]	; (80056b4 <ST7789H2_DrawRGBHLine+0xa4>)
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	89ba      	ldrh	r2, [r7, #12]
 8005664:	429a      	cmp	r2, r3
 8005666:	d810      	bhi.n	800568a <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8005668:	897a      	ldrh	r2, [r7, #10]
 800566a:	89fb      	ldrh	r3, [r7, #14]
 800566c:	441a      	add	r2, r3
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	429a      	cmp	r2, r3
 8005672:	d007      	beq.n	8005684 <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4413      	add	r3, r2
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f005 f8ee 	bl	800a860 <LCD_IO_WriteData>
      }      
      i++;
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	3301      	adds	r3, #1
 8005688:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	3301      	adds	r3, #1
 800568e:	61bb      	str	r3, [r7, #24]
 8005690:	897a      	ldrh	r2, [r7, #10]
 8005692:	89fb      	ldrh	r3, [r7, #14]
 8005694:	4413      	add	r3, r2
 8005696:	461a      	mov	r2, r3
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	4293      	cmp	r3, r2
 800569c:	d3ce      	bcc.n	800563c <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 800569e:	bf00      	nop
 80056a0:	bf00      	nop
 80056a2:	3720      	adds	r7, #32
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	20001024 	.word	0x20001024
 80056ac:	20001026 	.word	0x20001026
 80056b0:	20000270 	.word	0x20000270
 80056b4:	20000272 	.word	0x20000272

080056b8 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056c2:	2300      	movs	r3, #0
 80056c4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80056c6:	6839      	ldr	r1, [r7, #0]
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f001 fcc0 	bl	800704e <VL53L0X_get_offset_calibration_data_micro_meter>
 80056ce:	4603      	mov	r3, r0
 80056d0:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80056d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80056e0:	b5b0      	push	{r4, r5, r7, lr}
 80056e2:	b096      	sub	sp, #88	; 0x58
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056e8:	2300      	movs	r3, #0
 80056ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80056ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d107      	bne.n	8005706 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80056f6:	2200      	movs	r2, #0
 80056f8:	2188      	movs	r1, #136	; 0x88
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7fe f84c 	bl	8003798 <VL53L0X_WrByte>
 8005700:	4603      	mov	r3, r0
 8005702:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005714:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800571e:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a9e      	ldr	r2, [pc, #632]	; (80059a0 <VL53L0X_DataInit+0x2c0>)
 8005726:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a9d      	ldr	r2, [pc, #628]	; (80059a4 <VL53L0X_DataInit+0x2c4>)
 800572e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005738:	f107 0310 	add.w	r3, r7, #16
 800573c:	4619      	mov	r1, r3
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fab4 	bl	8005cac <VL53L0X_GetDeviceParameters>
 8005744:	4603      	mov	r3, r0
 8005746:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800574a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800574e:	2b00      	cmp	r3, #0
 8005750:	d112      	bne.n	8005778 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8005752:	2300      	movs	r3, #0
 8005754:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8005756:	2300      	movs	r3, #0
 8005758:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f103 0410 	add.w	r4, r3, #16
 8005760:	f107 0510 	add.w	r5, r7, #16
 8005764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800576a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800576c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800576e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005770:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005774:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2264      	movs	r2, #100	; 0x64
 800577c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f44f 7261 	mov.w	r2, #900	; 0x384
 8005786:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005790:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800579a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80057a6:	2201      	movs	r2, #1
 80057a8:	2180      	movs	r1, #128	; 0x80
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7fd fff4 	bl	8003798 <VL53L0X_WrByte>
 80057b0:	4603      	mov	r3, r0
 80057b2:	461a      	mov	r2, r3
 80057b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80057be:	2201      	movs	r2, #1
 80057c0:	21ff      	movs	r1, #255	; 0xff
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7fd ffe8 	bl	8003798 <VL53L0X_WrByte>
 80057c8:	4603      	mov	r3, r0
 80057ca:	461a      	mov	r2, r3
 80057cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057d0:	4313      	orrs	r3, r2
 80057d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80057d6:	2200      	movs	r2, #0
 80057d8:	2100      	movs	r1, #0
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7fd ffdc 	bl	8003798 <VL53L0X_WrByte>
 80057e0:	4603      	mov	r3, r0
 80057e2:	461a      	mov	r2, r3
 80057e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057e8:	4313      	orrs	r3, r2
 80057ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80057ee:	f107 030f 	add.w	r3, r7, #15
 80057f2:	461a      	mov	r2, r3
 80057f4:	2191      	movs	r1, #145	; 0x91
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7fe f882 	bl	8003900 <VL53L0X_RdByte>
 80057fc:	4603      	mov	r3, r0
 80057fe:	461a      	mov	r2, r3
 8005800:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005804:	4313      	orrs	r3, r2
 8005806:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800580a:	7bfa      	ldrb	r2, [r7, #15]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005812:	2201      	movs	r2, #1
 8005814:	2100      	movs	r1, #0
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7fd ffbe 	bl	8003798 <VL53L0X_WrByte>
 800581c:	4603      	mov	r3, r0
 800581e:	461a      	mov	r2, r3
 8005820:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005824:	4313      	orrs	r3, r2
 8005826:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800582a:	2200      	movs	r2, #0
 800582c:	21ff      	movs	r1, #255	; 0xff
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fd ffb2 	bl	8003798 <VL53L0X_WrByte>
 8005834:	4603      	mov	r3, r0
 8005836:	461a      	mov	r2, r3
 8005838:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800583c:	4313      	orrs	r3, r2
 800583e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005842:	2200      	movs	r2, #0
 8005844:	2180      	movs	r1, #128	; 0x80
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fd ffa6 	bl	8003798 <VL53L0X_WrByte>
 800584c:	4603      	mov	r3, r0
 800584e:	461a      	mov	r2, r3
 8005850:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005854:	4313      	orrs	r3, r2
 8005856:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800585a:	2300      	movs	r3, #0
 800585c:	653b      	str	r3, [r7, #80]	; 0x50
 800585e:	e014      	b.n	800588a <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8005860:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005864:	2b00      	cmp	r3, #0
 8005866:	d114      	bne.n	8005892 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8005868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800586a:	b29b      	uxth	r3, r3
 800586c:	2201      	movs	r2, #1
 800586e:	4619      	mov	r1, r3
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fd43 	bl	80062fc <VL53L0X_SetLimitCheckEnable>
 8005876:	4603      	mov	r3, r0
 8005878:	461a      	mov	r2, r3
 800587a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800587e:	4313      	orrs	r3, r2
 8005880:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005886:	3301      	adds	r3, #1
 8005888:	653b      	str	r3, [r7, #80]	; 0x50
 800588a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800588c:	2b05      	cmp	r3, #5
 800588e:	dde7      	ble.n	8005860 <VL53L0X_DataInit+0x180>
 8005890:	e000      	b.n	8005894 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8005892:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8005894:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005898:	2b00      	cmp	r3, #0
 800589a:	d107      	bne.n	80058ac <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800589c:	2200      	movs	r2, #0
 800589e:	2102      	movs	r1, #2
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 fd2b 	bl	80062fc <VL53L0X_SetLimitCheckEnable>
 80058a6:	4603      	mov	r3, r0
 80058a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80058ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d107      	bne.n	80058c4 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80058b4:	2200      	movs	r2, #0
 80058b6:	2103      	movs	r1, #3
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fd1f 	bl	80062fc <VL53L0X_SetLimitCheckEnable>
 80058be:	4603      	mov	r3, r0
 80058c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80058c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d107      	bne.n	80058dc <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80058cc:	2200      	movs	r2, #0
 80058ce:	2104      	movs	r1, #4
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 fd13 	bl	80062fc <VL53L0X_SetLimitCheckEnable>
 80058d6:	4603      	mov	r3, r0
 80058d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80058dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d107      	bne.n	80058f4 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80058e4:	2200      	movs	r2, #0
 80058e6:	2105      	movs	r1, #5
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fd07 	bl	80062fc <VL53L0X_SetLimitCheckEnable>
 80058ee:	4603      	mov	r3, r0
 80058f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80058f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d108      	bne.n	800590e <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80058fc:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8005900:	2100      	movs	r1, #0
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 fdaa 	bl	800645c <VL53L0X_SetLimitCheckValue>
 8005908:	4603      	mov	r3, r0
 800590a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800590e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005912:	2b00      	cmp	r3, #0
 8005914:	d108      	bne.n	8005928 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800591a:	2101      	movs	r1, #1
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fd9d 	bl	800645c <VL53L0X_SetLimitCheckValue>
 8005922:	4603      	mov	r3, r0
 8005924:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005928:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800592c:	2b00      	cmp	r3, #0
 800592e:	d108      	bne.n	8005942 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8005930:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8005934:	2102      	movs	r1, #2
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fd90 	bl	800645c <VL53L0X_SetLimitCheckValue>
 800593c:	4603      	mov	r3, r0
 800593e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005942:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005946:	2b00      	cmp	r3, #0
 8005948:	d107      	bne.n	800595a <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800594a:	2200      	movs	r2, #0
 800594c:	2103      	movs	r1, #3
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fd84 	bl	800645c <VL53L0X_SetLimitCheckValue>
 8005954:	4603      	mov	r3, r0
 8005956:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800595a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10f      	bne.n	8005982 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	22ff      	movs	r2, #255	; 0xff
 8005966:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800596a:	22ff      	movs	r2, #255	; 0xff
 800596c:	2101      	movs	r1, #1
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7fd ff12 	bl	8003798 <VL53L0X_WrByte>
 8005974:	4603      	mov	r3, r0
 8005976:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8005982:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005986:	2b00      	cmp	r3, #0
 8005988:	d103      	bne.n	8005992 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8005992:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8005996:	4618      	mov	r0, r3
 8005998:	3758      	adds	r7, #88	; 0x58
 800599a:	46bd      	mov	sp, r7
 800599c:	bdb0      	pop	{r4, r5, r7, pc}
 800599e:	bf00      	nop
 80059a0:	00016b85 	.word	0x00016b85
 80059a4:	000970a4 	.word	0x000970a4

080059a8 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80059a8:	b5b0      	push	{r4, r5, r7, lr}
 80059aa:	b09e      	sub	sp, #120	; 0x78
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059b0:	2300      	movs	r3, #0
 80059b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80059b6:	f107 031c 	add.w	r3, r7, #28
 80059ba:	2240      	movs	r2, #64	; 0x40
 80059bc:	2100      	movs	r1, #0
 80059be:	4618      	mov	r0, r3
 80059c0:	f014 fa8e 	bl	8019ee0 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80059c4:	2300      	movs	r3, #0
 80059c6:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80059c8:	2300      	movs	r3, #0
 80059ca:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80059cc:	2300      	movs	r3, #0
 80059ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80059d2:	2300      	movs	r3, #0
 80059d4:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80059d6:	2300      	movs	r3, #0
 80059d8:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80059da:	2300      	movs	r3, #0
 80059dc:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80059e4:	2101      	movs	r1, #1
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f002 fa74 	bl	8007ed4 <VL53L0X_get_info_from_device>
 80059ec:	4603      	mov	r3, r0
 80059ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80059f8:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8005a00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8005a04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d80d      	bhi.n	8005a28 <VL53L0X_StaticInit+0x80>
 8005a0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d102      	bne.n	8005a1a <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8005a14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	d806      	bhi.n	8005a28 <VL53L0X_StaticInit+0x80>
 8005a1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10e      	bne.n	8005a40 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8005a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a24:	2b0c      	cmp	r3, #12
 8005a26:	d90b      	bls.n	8005a40 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8005a28:	f107 0218 	add.w	r2, r7, #24
 8005a2c:	f107 0314 	add.w	r3, r7, #20
 8005a30:	4619      	mov	r1, r3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f001 fd06 	bl	8007444 <VL53L0X_perform_ref_spad_management>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8005a3e:	e009      	b.n	8005a54 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8005a40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a44:	461a      	mov	r2, r3
 8005a46:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f001 ff07 	bl	800785c <VL53L0X_set_reference_spads>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8005a54:	4b94      	ldr	r3, [pc, #592]	; (8005ca8 <VL53L0X_StaticInit+0x300>)
 8005a56:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8005a58:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10f      	bne.n	8005a80 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8005a66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8005a6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d104      	bne.n	8005a7c <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8005a78:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a7a:	e001      	b.n	8005a80 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8005a7c:	4b8a      	ldr	r3, [pc, #552]	; (8005ca8 <VL53L0X_StaticInit+0x300>)
 8005a7e:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8005a80:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d106      	bne.n	8005a96 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8005a88:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f003 fb40 	bl	8009110 <VL53L0X_load_tuning_settings>
 8005a90:	4603      	mov	r3, r0
 8005a92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8005a96:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10a      	bne.n	8005ab4 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	2304      	movs	r3, #4
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f001 f8ff 	bl	8006cac <VL53L0X_SetGpioConfig>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005ab4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d121      	bne.n	8005b00 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005abc:	2201      	movs	r2, #1
 8005abe:	21ff      	movs	r1, #255	; 0xff
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7fd fe69 	bl	8003798 <VL53L0X_WrByte>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8005acc:	f107 031a 	add.w	r3, r7, #26
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	2184      	movs	r1, #132	; 0x84
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7fd ff3d 	bl	8003954 <VL53L0X_RdWord>
 8005ada:	4603      	mov	r3, r0
 8005adc:	461a      	mov	r2, r3
 8005ade:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005ae8:	2200      	movs	r2, #0
 8005aea:	21ff      	movs	r1, #255	; 0xff
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7fd fe53 	bl	8003798 <VL53L0X_WrByte>
 8005af2:	4603      	mov	r3, r0
 8005af4:	461a      	mov	r2, r3
 8005af6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005b00:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d105      	bne.n	8005b14 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8005b08:	8b7b      	ldrh	r3, [r7, #26]
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8005b14:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d108      	bne.n	8005b2e <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8005b1c:	f107 031c 	add.w	r3, r7, #28
 8005b20:	4619      	mov	r1, r3
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f8c2 	bl	8005cac <VL53L0X_GetDeviceParameters>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8005b2e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d110      	bne.n	8005b58 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8005b36:	f107 0319 	add.w	r3, r7, #25
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 f984 	bl	8005e4a <VL53L0X_GetFractionEnable>
 8005b42:	4603      	mov	r3, r0
 8005b44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8005b48:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d103      	bne.n	8005b58 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8005b50:	7e7a      	ldrb	r2, [r7, #25]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8005b58:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10e      	bne.n	8005b7e <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f103 0410 	add.w	r4, r3, #16
 8005b66:	f107 051c 	add.w	r5, r7, #28
 8005b6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b76:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005b7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8005b7e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d111      	bne.n	8005baa <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8005b86:	f107 0319 	add.w	r3, r7, #25
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fd feb6 	bl	8003900 <VL53L0X_RdByte>
 8005b94:	4603      	mov	r3, r0
 8005b96:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8005b9a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d103      	bne.n	8005baa <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8005ba2:	7e7a      	ldrb	r2, [r7, #25]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8005baa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d107      	bne.n	8005bc2 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f9a4 	bl	8005f04 <VL53L0X_SetSequenceStepEnable>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005bc2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d107      	bne.n	8005bda <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8005bca:	2200      	movs	r2, #0
 8005bcc:	2102      	movs	r1, #2
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f998 	bl	8005f04 <VL53L0X_SetSequenceStepEnable>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8005bda:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d103      	bne.n	8005bea <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2203      	movs	r2, #3
 8005be6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8005bea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d109      	bne.n	8005c06 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8005bf2:	f107 0313 	add.w	r3, r7, #19
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f96a 	bl	8005ed4 <VL53L0X_GetVcselPulsePeriod>
 8005c00:	4603      	mov	r3, r0
 8005c02:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005c06:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d103      	bne.n	8005c16 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005c0e:	7cfa      	ldrb	r2, [r7, #19]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8005c16:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d109      	bne.n	8005c32 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8005c1e:	f107 0313 	add.w	r3, r7, #19
 8005c22:	461a      	mov	r2, r3
 8005c24:	2101      	movs	r1, #1
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f954 	bl	8005ed4 <VL53L0X_GetVcselPulsePeriod>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005c32:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d103      	bne.n	8005c42 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005c3a:	7cfa      	ldrb	r2, [r7, #19]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8005c42:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d109      	bne.n	8005c5e <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8005c4a:	f107 030c 	add.w	r3, r7, #12
 8005c4e:	461a      	mov	r2, r3
 8005c50:	2103      	movs	r1, #3
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f002 fec0 	bl	80089d8 <get_sequence_step_timeout>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005c5e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d103      	bne.n	8005c6e <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8005c6e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d109      	bne.n	8005c8a <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8005c76:	f107 030c 	add.w	r3, r7, #12
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	2104      	movs	r1, #4
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f002 feaa 	bl	80089d8 <get_sequence_step_timeout>
 8005c84:	4603      	mov	r3, r0
 8005c86:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005c8a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d103      	bne.n	8005c9a <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005c9a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3770      	adds	r7, #112	; 0x70
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20000274 	.word	0x20000274

08005cac <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f8b0 	bl	8005e24 <VL53L0X_GetDeviceMode>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d107      	bne.n	8005ce0 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	3308      	adds	r3, #8
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fa94 	bl	8006204 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8005ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d102      	bne.n	8005cee <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	2200      	movs	r2, #0
 8005cec:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8005cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d107      	bne.n	8005d06 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	3310      	adds	r3, #16
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 faca 	bl	8006296 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8005d02:	4603      	mov	r3, r0
 8005d04:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8005d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d107      	bne.n	8005d1e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	3314      	adds	r3, #20
 8005d12:	4619      	mov	r1, r3
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7ff fccf 	bl	80056b8 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8005d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d134      	bne.n	8005d90 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005d26:	2300      	movs	r3, #0
 8005d28:	60bb      	str	r3, [r7, #8]
 8005d2a:	e02a      	b.n	8005d82 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8005d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d12a      	bne.n	8005d8a <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	b299      	uxth	r1, r3
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	3308      	adds	r3, #8
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	4413      	add	r3, r2
 8005d42:	3304      	adds	r3, #4
 8005d44:	461a      	mov	r2, r3
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fbea 	bl	8006520 <VL53L0X_GetLimitCheckValue>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	461a      	mov	r2, r3
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8005d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d117      	bne.n	8005d8e <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	b299      	uxth	r1, r3
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	3318      	adds	r3, #24
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	4413      	add	r3, r2
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 fb51 	bl	8006414 <VL53L0X_GetLimitCheckEnable>
 8005d72:	4603      	mov	r3, r0
 8005d74:	461a      	mov	r2, r3
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	60bb      	str	r3, [r7, #8]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2b05      	cmp	r3, #5
 8005d86:	ddd1      	ble.n	8005d2c <VL53L0X_GetDeviceParameters+0x80>
 8005d88:	e002      	b.n	8005d90 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8005d8a:	bf00      	nop
 8005d8c:	e000      	b.n	8005d90 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8005d8e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d107      	bne.n	8005da8 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	333c      	adds	r3, #60	; 0x3c
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fc4c 	bl	800663c <VL53L0X_GetWrapAroundCheckEnable>
 8005da4:	4603      	mov	r3, r0
 8005da6:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8005da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d107      	bne.n	8005dc0 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	3304      	adds	r3, #4
 8005db4:	4619      	mov	r1, r3
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f879 	bl	8005eae <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	2b15      	cmp	r3, #21
 8005de0:	bf8c      	ite	hi
 8005de2:	2201      	movhi	r2, #1
 8005de4:	2200      	movls	r2, #0
 8005de6:	b2d2      	uxtb	r2, r2
 8005de8:	2a00      	cmp	r2, #0
 8005dea:	d10e      	bne.n	8005e0a <VL53L0X_SetDeviceMode+0x3e>
 8005dec:	2201      	movs	r2, #1
 8005dee:	409a      	lsls	r2, r3
 8005df0:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <VL53L0X_SetDeviceMode+0x54>)
 8005df2:	4013      	ands	r3, r2
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	bf14      	ite	ne
 8005df8:	2301      	movne	r3, #1
 8005dfa:	2300      	moveq	r3, #0
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	78fa      	ldrb	r2, [r7, #3]
 8005e06:	741a      	strb	r2, [r3, #16]
		break;
 8005e08:	e001      	b.n	8005e0e <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005e0a:	23f8      	movs	r3, #248	; 0xf8
 8005e0c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	0030000b 	.word	0x0030000b

08005e24 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	7c1a      	ldrb	r2, [r3, #16]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e54:	2300      	movs	r3, #0
 8005e56:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	2109      	movs	r1, #9
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7fd fd4f 	bl	8003900 <VL53L0X_RdByte>
 8005e62:	4603      	mov	r3, r0
 8005e64:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d106      	bne.n	8005e7c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8005e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e92:	2300      	movs	r3, #0
 8005e94:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8005e96:	6839      	ldr	r1, [r7, #0]
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f002 ffa7 	bl	8008dec <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8005ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8005ebc:	6839      	ldr	r1, [r7, #0]
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f003 f874 	bl	8008fac <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8005ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	460b      	mov	r3, r1
 8005ede:	607a      	str	r2, [r7, #4]
 8005ee0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8005ee6:	7afb      	ldrb	r3, [r7, #11]
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	4619      	mov	r1, r3
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f002 ff46 	bl	8008d7e <VL53L0X_get_vcsel_pulse_period>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8005ef6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3718      	adds	r7, #24
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
	...

08005f04 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	70fb      	strb	r3, [r7, #3]
 8005f10:	4613      	mov	r3, r2
 8005f12:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f14:	2300      	movs	r3, #0
 8005f16:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005f20:	f107 030f 	add.w	r3, r7, #15
 8005f24:	461a      	mov	r2, r3
 8005f26:	2101      	movs	r1, #1
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7fd fce9 	bl	8003900 <VL53L0X_RdByte>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
 8005f34:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8005f36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d15a      	bne.n	8005ff4 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8005f3e:	78bb      	ldrb	r3, [r7, #2]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d12b      	bne.n	8005f9c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8005f44:	78fb      	ldrb	r3, [r7, #3]
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d825      	bhi.n	8005f96 <VL53L0X_SetSequenceStepEnable+0x92>
 8005f4a:	a201      	add	r2, pc, #4	; (adr r2, 8005f50 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8005f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f50:	08005f65 	.word	0x08005f65
 8005f54:	08005f6f 	.word	0x08005f6f
 8005f58:	08005f79 	.word	0x08005f79
 8005f5c:	08005f83 	.word	0x08005f83
 8005f60:	08005f8d 	.word	0x08005f8d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8005f64:	7dbb      	ldrb	r3, [r7, #22]
 8005f66:	f043 0310 	orr.w	r3, r3, #16
 8005f6a:	75bb      	strb	r3, [r7, #22]
				break;
 8005f6c:	e043      	b.n	8005ff6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8005f6e:	7dbb      	ldrb	r3, [r7, #22]
 8005f70:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8005f74:	75bb      	strb	r3, [r7, #22]
				break;
 8005f76:	e03e      	b.n	8005ff6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8005f78:	7dbb      	ldrb	r3, [r7, #22]
 8005f7a:	f043 0304 	orr.w	r3, r3, #4
 8005f7e:	75bb      	strb	r3, [r7, #22]
				break;
 8005f80:	e039      	b.n	8005ff6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8005f82:	7dbb      	ldrb	r3, [r7, #22]
 8005f84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f88:	75bb      	strb	r3, [r7, #22]
				break;
 8005f8a:	e034      	b.n	8005ff6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8005f8c:	7dbb      	ldrb	r3, [r7, #22]
 8005f8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f92:	75bb      	strb	r3, [r7, #22]
				break;
 8005f94:	e02f      	b.n	8005ff6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005f96:	23fc      	movs	r3, #252	; 0xfc
 8005f98:	75fb      	strb	r3, [r7, #23]
 8005f9a:	e02c      	b.n	8005ff6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8005f9c:	78fb      	ldrb	r3, [r7, #3]
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	d825      	bhi.n	8005fee <VL53L0X_SetSequenceStepEnable+0xea>
 8005fa2:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8005fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa8:	08005fbd 	.word	0x08005fbd
 8005fac:	08005fc7 	.word	0x08005fc7
 8005fb0:	08005fd1 	.word	0x08005fd1
 8005fb4:	08005fdb 	.word	0x08005fdb
 8005fb8:	08005fe5 	.word	0x08005fe5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8005fbc:	7dbb      	ldrb	r3, [r7, #22]
 8005fbe:	f023 0310 	bic.w	r3, r3, #16
 8005fc2:	75bb      	strb	r3, [r7, #22]
				break;
 8005fc4:	e017      	b.n	8005ff6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8005fc6:	7dbb      	ldrb	r3, [r7, #22]
 8005fc8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8005fcc:	75bb      	strb	r3, [r7, #22]
				break;
 8005fce:	e012      	b.n	8005ff6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8005fd0:	7dbb      	ldrb	r3, [r7, #22]
 8005fd2:	f023 0304 	bic.w	r3, r3, #4
 8005fd6:	75bb      	strb	r3, [r7, #22]
				break;
 8005fd8:	e00d      	b.n	8005ff6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8005fda:	7dbb      	ldrb	r3, [r7, #22]
 8005fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fe0:	75bb      	strb	r3, [r7, #22]
				break;
 8005fe2:	e008      	b.n	8005ff6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8005fe4:	7dbb      	ldrb	r3, [r7, #22]
 8005fe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fea:	75bb      	strb	r3, [r7, #22]
				break;
 8005fec:	e003      	b.n	8005ff6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8005fee:	23fc      	movs	r3, #252	; 0xfc
 8005ff0:	75fb      	strb	r3, [r7, #23]
 8005ff2:	e000      	b.n	8005ff6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8005ff4:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
 8005ff8:	7dba      	ldrb	r2, [r7, #22]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d01e      	beq.n	800603c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8005ffe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d107      	bne.n	8006016 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8006006:	7dbb      	ldrb	r3, [r7, #22]
 8006008:	461a      	mov	r2, r3
 800600a:	2101      	movs	r1, #1
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f7fd fbc3 	bl	8003798 <VL53L0X_WrByte>
 8006012:	4603      	mov	r3, r0
 8006014:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8006016:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d103      	bne.n	8006026 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	7dba      	ldrb	r2, [r7, #22]
 8006022:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8006026:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8006034:	6939      	ldr	r1, [r7, #16]
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7ff ff26 	bl	8005e88 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800603c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	607b      	str	r3, [r7, #4]
 8006052:	460b      	mov	r3, r1
 8006054:	72fb      	strb	r3, [r7, #11]
 8006056:	4613      	mov	r3, r2
 8006058:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800605a:	2300      	movs	r3, #0
 800605c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8006064:	7afb      	ldrb	r3, [r7, #11]
 8006066:	2b04      	cmp	r3, #4
 8006068:	d836      	bhi.n	80060d8 <sequence_step_enabled+0x90>
 800606a:	a201      	add	r2, pc, #4	; (adr r2, 8006070 <sequence_step_enabled+0x28>)
 800606c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006070:	08006085 	.word	0x08006085
 8006074:	08006097 	.word	0x08006097
 8006078:	080060a9 	.word	0x080060a9
 800607c:	080060bb 	.word	0x080060bb
 8006080:	080060cd 	.word	0x080060cd
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8006084:	7abb      	ldrb	r3, [r7, #10]
 8006086:	111b      	asrs	r3, r3, #4
 8006088:	b2db      	uxtb	r3, r3
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	b2da      	uxtb	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	701a      	strb	r2, [r3, #0]
		break;
 8006094:	e022      	b.n	80060dc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8006096:	7abb      	ldrb	r3, [r7, #10]
 8006098:	10db      	asrs	r3, r3, #3
 800609a:	b2db      	uxtb	r3, r3
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	701a      	strb	r2, [r3, #0]
		break;
 80060a6:	e019      	b.n	80060dc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80060a8:	7abb      	ldrb	r3, [r7, #10]
 80060aa:	109b      	asrs	r3, r3, #2
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	701a      	strb	r2, [r3, #0]
		break;
 80060b8:	e010      	b.n	80060dc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80060ba:	7abb      	ldrb	r3, [r7, #10]
 80060bc:	119b      	asrs	r3, r3, #6
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	701a      	strb	r2, [r3, #0]
		break;
 80060ca:	e007      	b.n	80060dc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80060cc:	7abb      	ldrb	r3, [r7, #10]
 80060ce:	09db      	lsrs	r3, r3, #7
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	701a      	strb	r2, [r3, #0]
		break;
 80060d6:	e001      	b.n	80060dc <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80060d8:	23fc      	movs	r3, #252	; 0xfc
 80060da:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80060dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80060f6:	2300      	movs	r3, #0
 80060f8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80060fe:	f107 030e 	add.w	r3, r7, #14
 8006102:	461a      	mov	r2, r3
 8006104:	2101      	movs	r1, #1
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7fd fbfa 	bl	8003900 <VL53L0X_RdByte>
 800610c:	4603      	mov	r3, r0
 800610e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8006110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d107      	bne.n	8006128 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8006118:	7bba      	ldrb	r2, [r7, #14]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2100      	movs	r1, #0
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7ff ff92 	bl	8006048 <sequence_step_enabled>
 8006124:	4603      	mov	r3, r0
 8006126:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d108      	bne.n	8006142 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8006130:	7bba      	ldrb	r2, [r7, #14]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	3302      	adds	r3, #2
 8006136:	2101      	movs	r1, #1
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7ff ff85 	bl	8006048 <sequence_step_enabled>
 800613e:	4603      	mov	r3, r0
 8006140:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d108      	bne.n	800615c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800614a:	7bba      	ldrb	r2, [r7, #14]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	3301      	adds	r3, #1
 8006150:	2102      	movs	r1, #2
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f7ff ff78 	bl	8006048 <sequence_step_enabled>
 8006158:	4603      	mov	r3, r0
 800615a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800615c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d108      	bne.n	8006176 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8006164:	7bba      	ldrb	r2, [r7, #14]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	3303      	adds	r3, #3
 800616a:	2103      	movs	r1, #3
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7ff ff6b 	bl	8006048 <sequence_step_enabled>
 8006172:	4603      	mov	r3, r0
 8006174:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d108      	bne.n	8006190 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800617e:	7bba      	ldrb	r2, [r7, #14]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	3304      	adds	r3, #4
 8006184:	2104      	movs	r1, #4
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7ff ff5e 	bl	8006048 <sequence_step_enabled>
 800618c:	4603      	mov	r3, r0
 800618e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006190:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <VL53L0X_SetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80061a6:	2300      	movs	r3, #0
 80061a8:	75fb      	strb	r3, [r7, #23]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80061aa:	f107 030e 	add.w	r3, r7, #14
 80061ae:	461a      	mov	r2, r3
 80061b0:	21f8      	movs	r1, #248	; 0xf8
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7fd fbce 	bl	8003954 <VL53L0X_RdWord>
 80061b8:	4603      	mov	r3, r0
 80061ba:	75fb      	strb	r3, [r7, #23]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80061bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d112      	bne.n	80061ea <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x4e>
		if (osc_calibrate_val != 0) {
 80061c4:	89fb      	ldrh	r3, [r7, #14]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d006      	beq.n	80061d8 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x3c>
			IMPeriodMilliSeconds =
				InterMeasurementPeriodMilliSeconds
					* osc_calibrate_val;
 80061ca:	89fb      	ldrh	r3, [r7, #14]
 80061cc:	461a      	mov	r2, r3
			IMPeriodMilliSeconds =
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	fb02 f303 	mul.w	r3, r2, r3
 80061d4:	613b      	str	r3, [r7, #16]
 80061d6:	e001      	b.n	80061dc <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x40>
		} else {
			IMPeriodMilliSeconds =
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	613b      	str	r3, [r7, #16]
				InterMeasurementPeriodMilliSeconds;
		}
		Status = VL53L0X_WrDWord(Dev,
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	2104      	movs	r1, #4
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7fd fb27 	bl	8003834 <VL53L0X_WrDWord>
 80061e6:	4603      	mov	r3, r0
 80061e8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80061ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d102      	bne.n	80061f8 <VL53L0X_SetInterMeasurementPeriodMilliSeconds+0x5c>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			InterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80061f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800620e:	2300      	movs	r3, #0
 8006210:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8006212:	f107 030c 	add.w	r3, r7, #12
 8006216:	461a      	mov	r2, r3
 8006218:	21f8      	movs	r1, #248	; 0xf8
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7fd fb9a 	bl	8003954 <VL53L0X_RdWord>
 8006220:	4603      	mov	r3, r0
 8006222:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8006224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d108      	bne.n	800623e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800622c:	f107 0308 	add.w	r3, r7, #8
 8006230:	461a      	mov	r2, r3
 8006232:	2104      	movs	r1, #4
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7fd fbc5 	bl	80039c4 <VL53L0X_RdDWord>
 800623a:	4603      	mov	r3, r0
 800623c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800623e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10c      	bne.n	8006260 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8006246:	89bb      	ldrh	r3, [r7, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	89ba      	ldrh	r2, [r7, #12]
 8006250:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006260:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006276:	2300      	movs	r3, #0
 8006278:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	7f1b      	ldrb	r3, [r3, #28]
 800627e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	7bba      	ldrb	r2, [r7, #14]
 8006284:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006286:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b086      	sub	sp, #24
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062a0:	2300      	movs	r3, #0
 80062a2:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80062a4:	f107 030e 	add.w	r3, r7, #14
 80062a8:	461a      	mov	r2, r3
 80062aa:	2120      	movs	r1, #32
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f7fd fb51 	bl	8003954 <VL53L0X_RdWord>
 80062b2:	4603      	mov	r3, r0
 80062b4:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80062b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d118      	bne.n	80062f0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80062be:	89fb      	ldrh	r3, [r7, #14]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d109      	bne.n	80062d8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	771a      	strb	r2, [r3, #28]
 80062d6:	e00b      	b.n	80062f0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80062d8:	89fb      	ldrh	r3, [r7, #14]
 80062da:	00db      	lsls	r3, r3, #3
 80062dc:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80062f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3718      	adds	r7, #24
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	460b      	mov	r3, r1
 8006306:	807b      	strh	r3, [r7, #2]
 8006308:	4613      	mov	r3, r2
 800630a:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800630c:	2300      	movs	r3, #0
 800630e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8006310:	2300      	movs	r3, #0
 8006312:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8006314:	2300      	movs	r3, #0
 8006316:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8006318:	2300      	movs	r3, #0
 800631a:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800631c:	887b      	ldrh	r3, [r7, #2]
 800631e:	2b05      	cmp	r3, #5
 8006320:	d902      	bls.n	8006328 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006322:	23fc      	movs	r3, #252	; 0xfc
 8006324:	75fb      	strb	r3, [r7, #23]
 8006326:	e05b      	b.n	80063e0 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8006328:	787b      	ldrb	r3, [r7, #1]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d106      	bne.n	800633c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800632e:	2300      	movs	r3, #0
 8006330:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8006332:	2300      	movs	r3, #0
 8006334:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8006336:	2301      	movs	r3, #1
 8006338:	73bb      	strb	r3, [r7, #14]
 800633a:	e00a      	b.n	8006352 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800633c:	887b      	ldrh	r3, [r7, #2]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	330c      	adds	r3, #12
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800634a:	2300      	movs	r3, #0
 800634c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800634e:	2301      	movs	r3, #1
 8006350:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8006352:	887b      	ldrh	r3, [r7, #2]
 8006354:	2b05      	cmp	r3, #5
 8006356:	d841      	bhi.n	80063dc <VL53L0X_SetLimitCheckEnable+0xe0>
 8006358:	a201      	add	r2, pc, #4	; (adr r2, 8006360 <VL53L0X_SetLimitCheckEnable+0x64>)
 800635a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635e:	bf00      	nop
 8006360:	08006379 	.word	0x08006379
 8006364:	08006383 	.word	0x08006383
 8006368:	08006399 	.word	0x08006399
 800636c:	080063a3 	.word	0x080063a3
 8006370:	080063ad 	.word	0x080063ad
 8006374:	080063c5 	.word	0x080063c5

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	7bfa      	ldrb	r2, [r7, #15]
 800637c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8006380:	e02e      	b.n	80063e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006386:	b29b      	uxth	r3, r3
 8006388:	461a      	mov	r2, r3
 800638a:	2144      	movs	r1, #68	; 0x44
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7fd fa27 	bl	80037e0 <VL53L0X_WrWord>
 8006392:	4603      	mov	r3, r0
 8006394:	75fb      	strb	r3, [r7, #23]

			break;
 8006396:	e023      	b.n	80063e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	7bfa      	ldrb	r2, [r7, #15]
 800639c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80063a0:	e01e      	b.n	80063e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	7bfa      	ldrb	r2, [r7, #15]
 80063a6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80063aa:	e019      	b.n	80063e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80063ac:	7bbb      	ldrb	r3, [r7, #14]
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80063b2:	7b7b      	ldrb	r3, [r7, #13]
 80063b4:	22fe      	movs	r2, #254	; 0xfe
 80063b6:	2160      	movs	r1, #96	; 0x60
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f7fd fa6d 	bl	8003898 <VL53L0X_UpdateByte>
 80063be:	4603      	mov	r3, r0
 80063c0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80063c2:	e00d      	b.n	80063e0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80063c4:	7bbb      	ldrb	r3, [r7, #14]
 80063c6:	011b      	lsls	r3, r3, #4
 80063c8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80063ca:	7b7b      	ldrb	r3, [r7, #13]
 80063cc:	22ef      	movs	r2, #239	; 0xef
 80063ce:	2160      	movs	r1, #96	; 0x60
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7fd fa61 	bl	8003898 <VL53L0X_UpdateByte>
 80063d6:	4603      	mov	r3, r0
 80063d8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80063da:	e001      	b.n	80063e0 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80063dc:	23fc      	movs	r3, #252	; 0xfc
 80063de:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80063e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10f      	bne.n	8006408 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80063e8:	787b      	ldrb	r3, [r7, #1]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80063ee:	887b      	ldrh	r3, [r7, #2]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	4413      	add	r3, r2
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80063fa:	e005      	b.n	8006408 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80063fc:	887b      	ldrh	r3, [r7, #2]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	4413      	add	r3, r2
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006408:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3718      	adds	r7, #24
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	460b      	mov	r3, r1
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006422:	2300      	movs	r3, #0
 8006424:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006426:	897b      	ldrh	r3, [r7, #10]
 8006428:	2b05      	cmp	r3, #5
 800642a:	d905      	bls.n	8006438 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800642c:	23fc      	movs	r3, #252	; 0xfc
 800642e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	701a      	strb	r2, [r3, #0]
 8006436:	e008      	b.n	800644a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006438:	897b      	ldrh	r3, [r7, #10]
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	4413      	add	r3, r2
 800643e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006442:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	7dba      	ldrb	r2, [r7, #22]
 8006448:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800644a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800644e:	4618      	mov	r0, r3
 8006450:	371c      	adds	r7, #28
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
	...

0800645c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	460b      	mov	r3, r1
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800646a:	2300      	movs	r3, #0
 800646c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800646e:	897b      	ldrh	r3, [r7, #10]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4413      	add	r3, r2
 8006474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006478:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800647a:	7dbb      	ldrb	r3, [r7, #22]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d107      	bne.n	8006490 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006480:	897b      	ldrh	r3, [r7, #10]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	330c      	adds	r3, #12
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	605a      	str	r2, [r3, #4]
 800648e:	e040      	b.n	8006512 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8006490:	897b      	ldrh	r3, [r7, #10]
 8006492:	2b05      	cmp	r3, #5
 8006494:	d830      	bhi.n	80064f8 <VL53L0X_SetLimitCheckValue+0x9c>
 8006496:	a201      	add	r2, pc, #4	; (adr r2, 800649c <VL53L0X_SetLimitCheckValue+0x40>)
 8006498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649c:	080064b5 	.word	0x080064b5
 80064a0:	080064bd 	.word	0x080064bd
 80064a4:	080064d3 	.word	0x080064d3
 80064a8:	080064db 	.word	0x080064db
 80064ac:	080064e3 	.word	0x080064e3
 80064b0:	080064e3 	.word	0x080064e3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80064ba:	e01f      	b.n	80064fc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	461a      	mov	r2, r3
 80064c4:	2144      	movs	r1, #68	; 0x44
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f7fd f98a 	bl	80037e0 <VL53L0X_WrWord>
 80064cc:	4603      	mov	r3, r0
 80064ce:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80064d0:	e014      	b.n	80064fc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80064d8:	e010      	b.n	80064fc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80064e0:	e00c      	b.n	80064fc <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	461a      	mov	r2, r3
 80064ea:	2164      	movs	r1, #100	; 0x64
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f7fd f977 	bl	80037e0 <VL53L0X_WrWord>
 80064f2:	4603      	mov	r3, r0
 80064f4:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80064f6:	e001      	b.n	80064fc <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80064f8:	23fc      	movs	r3, #252	; 0xfc
 80064fa:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80064fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d106      	bne.n	8006512 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006504:	897b      	ldrh	r3, [r7, #10]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	330c      	adds	r3, #12
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006512:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3718      	adds	r7, #24
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop

08006520 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b088      	sub	sp, #32
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	460b      	mov	r3, r1
 800652a:	607a      	str	r2, [r7, #4]
 800652c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800652e:	2300      	movs	r3, #0
 8006530:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8006532:	2300      	movs	r3, #0
 8006534:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8006536:	897b      	ldrh	r3, [r7, #10]
 8006538:	2b05      	cmp	r3, #5
 800653a:	d847      	bhi.n	80065cc <VL53L0X_GetLimitCheckValue+0xac>
 800653c:	a201      	add	r2, pc, #4	; (adr r2, 8006544 <VL53L0X_GetLimitCheckValue+0x24>)
 800653e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006542:	bf00      	nop
 8006544:	0800655d 	.word	0x0800655d
 8006548:	08006569 	.word	0x08006569
 800654c:	0800658f 	.word	0x0800658f
 8006550:	0800659b 	.word	0x0800659b
 8006554:	080065a7 	.word	0x080065a7
 8006558:	080065a7 	.word	0x080065a7

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006560:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8006562:	2300      	movs	r3, #0
 8006564:	77bb      	strb	r3, [r7, #30]
		break;
 8006566:	e033      	b.n	80065d0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8006568:	f107 0316 	add.w	r3, r7, #22
 800656c:	461a      	mov	r2, r3
 800656e:	2144      	movs	r1, #68	; 0x44
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f7fd f9ef 	bl	8003954 <VL53L0X_RdWord>
 8006576:	4603      	mov	r3, r0
 8006578:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800657a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d102      	bne.n	8006588 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8006582:	8afb      	ldrh	r3, [r7, #22]
 8006584:	025b      	lsls	r3, r3, #9
 8006586:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8006588:	2301      	movs	r3, #1
 800658a:	77bb      	strb	r3, [r7, #30]
		break;
 800658c:	e020      	b.n	80065d0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006592:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8006594:	2300      	movs	r3, #0
 8006596:	77bb      	strb	r3, [r7, #30]
		break;
 8006598:	e01a      	b.n	80065d0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80065a0:	2300      	movs	r3, #0
 80065a2:	77bb      	strb	r3, [r7, #30]
		break;
 80065a4:	e014      	b.n	80065d0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80065a6:	f107 0316 	add.w	r3, r7, #22
 80065aa:	461a      	mov	r2, r3
 80065ac:	2164      	movs	r1, #100	; 0x64
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f7fd f9d0 	bl	8003954 <VL53L0X_RdWord>
 80065b4:	4603      	mov	r3, r0
 80065b6:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80065b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d102      	bne.n	80065c6 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80065c0:	8afb      	ldrh	r3, [r7, #22]
 80065c2:	025b      	lsls	r3, r3, #9
 80065c4:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80065c6:	2300      	movs	r3, #0
 80065c8:	77bb      	strb	r3, [r7, #30]
		break;
 80065ca:	e001      	b.n	80065d0 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80065cc:	23fc      	movs	r3, #252	; 0xfc
 80065ce:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80065d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d12a      	bne.n	800662e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80065d8:	7fbb      	ldrb	r3, [r7, #30]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d124      	bne.n	8006628 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d110      	bne.n	8006606 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80065e4:	897b      	ldrh	r3, [r7, #10]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	330c      	adds	r3, #12
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80065f8:	897b      	ldrh	r3, [r7, #10]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	4413      	add	r3, r2
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006604:	e013      	b.n	800662e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	69ba      	ldr	r2, [r7, #24]
 800660a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800660c:	897b      	ldrh	r3, [r7, #10]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	330c      	adds	r3, #12
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	69ba      	ldr	r2, [r7, #24]
 8006618:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800661a:	897b      	ldrh	r3, [r7, #10]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	2201      	movs	r2, #1
 8006622:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006626:	e002      	b.n	800662e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800662e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8006632:	4618      	mov	r0, r3
 8006634:	3720      	adds	r7, #32
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop

0800663c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006646:	2300      	movs	r3, #0
 8006648:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800664a:	f107 030e 	add.w	r3, r7, #14
 800664e:	461a      	mov	r2, r3
 8006650:	2101      	movs	r1, #1
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7fd f954 	bl	8003900 <VL53L0X_RdByte>
 8006658:	4603      	mov	r3, r0
 800665a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800665c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10e      	bne.n	8006682 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8006664:	7bba      	ldrb	r2, [r7, #14]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800666c:	7bbb      	ldrb	r3, [r7, #14]
 800666e:	b25b      	sxtb	r3, r3
 8006670:	2b00      	cmp	r3, #0
 8006672:	da03      	bge.n	800667c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2201      	movs	r2, #1
 8006678:	701a      	strb	r2, [r3, #0]
 800667a:	e002      	b.n	8006682 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2200      	movs	r2, #0
 8006680:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d104      	bne.n	8006694 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	781a      	ldrb	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006694:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80066a8:	2300      	movs	r3, #0
 80066aa:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80066ac:	f107 030e 	add.w	r3, r7, #14
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7ff fbb6 	bl	8005e24 <VL53L0X_GetDeviceMode>
 80066b8:	4603      	mov	r3, r0
 80066ba:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80066bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d107      	bne.n	80066d4 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80066c4:	7bbb      	ldrb	r3, [r7, #14]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d104      	bne.n	80066d4 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f898 	bl	8006800 <VL53L0X_StartMeasurement>
 80066d0:	4603      	mov	r3, r0
 80066d2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80066d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d104      	bne.n	80066e6 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f001 fb3f 	bl	8007d60 <VL53L0X_measurement_poll_for_completion>
 80066e2:	4603      	mov	r3, r0
 80066e4:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80066e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d106      	bne.n	80066fc <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80066ee:	7bbb      	ldrb	r3, [r7, #14]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d103      	bne.n	80066fc <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2203      	movs	r2, #3
 80066f8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 80066fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006714:	2300      	movs	r3, #0
 8006716:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8006718:	2301      	movs	r3, #1
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f001 fae1 	bl	8007ce6 <VL53L0X_perform_ref_calibration>
 8006724:	4603      	mov	r3, r0
 8006726:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8006728:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006740:	2300      	movs	r3, #0
 8006742:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800674a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800674c:	7dbb      	ldrb	r3, [r7, #22]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d005      	beq.n	800675e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8006752:	7dbb      	ldrb	r3, [r7, #22]
 8006754:	2b02      	cmp	r3, #2
 8006756:	d002      	beq.n	800675e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8006758:	7dbb      	ldrb	r3, [r7, #22]
 800675a:	2b03      	cmp	r3, #3
 800675c:	d147      	bne.n	80067ee <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800675e:	f107 030c 	add.w	r3, r7, #12
 8006762:	f107 0210 	add.w	r2, r7, #16
 8006766:	2101      	movs	r1, #1
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fbc3 	bl	8006ef4 <VL53L0X_GetInterruptThresholds>
 800676e:	4603      	mov	r3, r0
 8006770:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006778:	d803      	bhi.n	8006782 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800677a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800677c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8006780:	d935      	bls.n	80067ee <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8006782:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d131      	bne.n	80067ee <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800678a:	78fb      	ldrb	r3, [r7, #3]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d006      	beq.n	800679e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8006790:	491a      	ldr	r1, [pc, #104]	; (80067fc <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f002 fcbc 	bl	8009110 <VL53L0X_load_tuning_settings>
 8006798:	4603      	mov	r3, r0
 800679a:	75fb      	strb	r3, [r7, #23]
 800679c:	e027      	b.n	80067ee <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800679e:	2204      	movs	r2, #4
 80067a0:	21ff      	movs	r1, #255	; 0xff
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7fc fff8 	bl	8003798 <VL53L0X_WrByte>
 80067a8:	4603      	mov	r3, r0
 80067aa:	461a      	mov	r2, r3
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80067b2:	2200      	movs	r2, #0
 80067b4:	2170      	movs	r1, #112	; 0x70
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7fc ffee 	bl	8003798 <VL53L0X_WrByte>
 80067bc:	4603      	mov	r3, r0
 80067be:	461a      	mov	r2, r3
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80067c6:	2200      	movs	r2, #0
 80067c8:	21ff      	movs	r1, #255	; 0xff
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7fc ffe4 	bl	8003798 <VL53L0X_WrByte>
 80067d0:	4603      	mov	r3, r0
 80067d2:	461a      	mov	r2, r3
 80067d4:	7dfb      	ldrb	r3, [r7, #23]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80067da:	2200      	movs	r2, #0
 80067dc:	2180      	movs	r1, #128	; 0x80
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7fc ffda 	bl	8003798 <VL53L0X_WrByte>
 80067e4:	4603      	mov	r3, r0
 80067e6:	461a      	mov	r2, r3
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 80067ee:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20000368 	.word	0x20000368

08006800 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006808:	2300      	movs	r3, #0
 800680a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800680c:	2301      	movs	r3, #1
 800680e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8006810:	f107 030e 	add.w	r3, r7, #14
 8006814:	4619      	mov	r1, r3
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff fb04 	bl	8005e24 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800681c:	2201      	movs	r2, #1
 800681e:	2180      	movs	r1, #128	; 0x80
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f7fc ffb9 	bl	8003798 <VL53L0X_WrByte>
 8006826:	4603      	mov	r3, r0
 8006828:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800682a:	2201      	movs	r2, #1
 800682c:	21ff      	movs	r1, #255	; 0xff
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7fc ffb2 	bl	8003798 <VL53L0X_WrByte>
 8006834:	4603      	mov	r3, r0
 8006836:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006838:	2200      	movs	r2, #0
 800683a:	2100      	movs	r1, #0
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7fc ffab 	bl	8003798 <VL53L0X_WrByte>
 8006842:	4603      	mov	r3, r0
 8006844:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800684c:	461a      	mov	r2, r3
 800684e:	2191      	movs	r1, #145	; 0x91
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f7fc ffa1 	bl	8003798 <VL53L0X_WrByte>
 8006856:	4603      	mov	r3, r0
 8006858:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800685a:	2201      	movs	r2, #1
 800685c:	2100      	movs	r1, #0
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7fc ff9a 	bl	8003798 <VL53L0X_WrByte>
 8006864:	4603      	mov	r3, r0
 8006866:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006868:	2200      	movs	r2, #0
 800686a:	21ff      	movs	r1, #255	; 0xff
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f7fc ff93 	bl	8003798 <VL53L0X_WrByte>
 8006872:	4603      	mov	r3, r0
 8006874:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006876:	2200      	movs	r2, #0
 8006878:	2180      	movs	r1, #128	; 0x80
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f7fc ff8c 	bl	8003798 <VL53L0X_WrByte>
 8006880:	4603      	mov	r3, r0
 8006882:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8006884:	7bbb      	ldrb	r3, [r7, #14]
 8006886:	2b03      	cmp	r3, #3
 8006888:	d054      	beq.n	8006934 <VL53L0X_StartMeasurement+0x134>
 800688a:	2b03      	cmp	r3, #3
 800688c:	dc6c      	bgt.n	8006968 <VL53L0X_StartMeasurement+0x168>
 800688e:	2b00      	cmp	r3, #0
 8006890:	d002      	beq.n	8006898 <VL53L0X_StartMeasurement+0x98>
 8006892:	2b01      	cmp	r3, #1
 8006894:	d034      	beq.n	8006900 <VL53L0X_StartMeasurement+0x100>
 8006896:	e067      	b.n	8006968 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8006898:	2201      	movs	r2, #1
 800689a:	2100      	movs	r1, #0
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f7fc ff7b 	bl	8003798 <VL53L0X_WrByte>
 80068a2:	4603      	mov	r3, r0
 80068a4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80068aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d15d      	bne.n	800696e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80068b2:	2300      	movs	r3, #0
 80068b4:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d008      	beq.n	80068ce <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 80068bc:	f107 030d 	add.w	r3, r7, #13
 80068c0:	461a      	mov	r2, r3
 80068c2:	2100      	movs	r1, #0
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7fd f81b 	bl	8003900 <VL53L0X_RdByte>
 80068ca:	4603      	mov	r3, r0
 80068cc:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	3301      	adds	r3, #1
 80068d2:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80068d4:	7b7a      	ldrb	r2, [r7, #13]
 80068d6:	7bfb      	ldrb	r3, [r7, #15]
 80068d8:	4013      	ands	r3, r2
 80068da:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80068dc:	7bfa      	ldrb	r2, [r7, #15]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d107      	bne.n	80068f2 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80068e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d103      	bne.n	80068f2 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80068f0:	d3e1      	bcc.n	80068b6 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80068f8:	d339      	bcc.n	800696e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80068fa:	23f9      	movs	r3, #249	; 0xf9
 80068fc:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80068fe:	e036      	b.n	800696e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006900:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d105      	bne.n	8006914 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8006908:	2101      	movs	r1, #1
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f7ff ff12 	bl	8006734 <VL53L0X_CheckAndLoadInterruptSettings>
 8006910:	4603      	mov	r3, r0
 8006912:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006914:	2202      	movs	r2, #2
 8006916:	2100      	movs	r1, #0
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7fc ff3d 	bl	8003798 <VL53L0X_WrByte>
 800691e:	4603      	mov	r3, r0
 8006920:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8006922:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d123      	bne.n	8006972 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2204      	movs	r2, #4
 800692e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006932:	e01e      	b.n	8006972 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8006934:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d105      	bne.n	8006948 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800693c:	2101      	movs	r1, #1
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7ff fef8 	bl	8006734 <VL53L0X_CheckAndLoadInterruptSettings>
 8006944:	4603      	mov	r3, r0
 8006946:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8006948:	2204      	movs	r2, #4
 800694a:	2100      	movs	r1, #0
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7fc ff23 	bl	8003798 <VL53L0X_WrByte>
 8006952:	4603      	mov	r3, r0
 8006954:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8006956:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10b      	bne.n	8006976 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2204      	movs	r2, #4
 8006962:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8006966:	e006      	b.n	8006976 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006968:	23f8      	movs	r3, #248	; 0xf8
 800696a:	75fb      	strb	r3, [r7, #23]
 800696c:	e004      	b.n	8006978 <VL53L0X_StartMeasurement+0x178>
		break;
 800696e:	bf00      	nop
 8006970:	e002      	b.n	8006978 <VL53L0X_StartMeasurement+0x178>
		break;
 8006972:	bf00      	nop
 8006974:	e000      	b.n	8006978 <VL53L0X_StartMeasurement+0x178>
		break;
 8006976:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8006978:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
 800698c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800698e:	2300      	movs	r3, #0
 8006990:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8006998:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800699a:	7bbb      	ldrb	r3, [r7, #14]
 800699c:	2b04      	cmp	r3, #4
 800699e:	d112      	bne.n	80069c6 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80069a0:	f107 0308 	add.w	r3, r7, #8
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fb1a 	bl	8006fe0 <VL53L0X_GetInterruptMaskStatus>
 80069ac:	4603      	mov	r3, r0
 80069ae:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2b04      	cmp	r3, #4
 80069b4:	d103      	bne.n	80069be <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2201      	movs	r2, #1
 80069ba:	701a      	strb	r2, [r3, #0]
 80069bc:	e01c      	b.n	80069f8 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2200      	movs	r2, #0
 80069c2:	701a      	strb	r2, [r3, #0]
 80069c4:	e018      	b.n	80069f8 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80069c6:	f107 030d 	add.w	r3, r7, #13
 80069ca:	461a      	mov	r2, r3
 80069cc:	2114      	movs	r1, #20
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7fc ff96 	bl	8003900 <VL53L0X_RdByte>
 80069d4:	4603      	mov	r3, r0
 80069d6:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80069d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d10b      	bne.n	80069f8 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80069e0:	7b7b      	ldrb	r3, [r7, #13]
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2201      	movs	r2, #1
 80069ee:	701a      	strb	r2, [r3, #0]
 80069f0:	e002      	b.n	80069f8 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2200      	movs	r2, #0
 80069f6:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80069f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006a04:	b5b0      	push	{r4, r5, r7, lr}
 8006a06:	b096      	sub	sp, #88	; 0x58
 8006a08:	af02      	add	r7, sp, #8
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8006a14:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006a18:	230c      	movs	r3, #12
 8006a1a:	2114      	movs	r1, #20
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f7fc fe8f 	bl	8003740 <VL53L0X_ReadMulti>
 8006a22:	4603      	mov	r3, r0
 8006a24:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8006a28:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f040 80d1 	bne.w	8006bd4 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2200      	movs	r2, #0
 8006a36:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8006a3e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	021b      	lsls	r3, r3, #8
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	4413      	add	r3, r2
 8006a50:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	2200      	movs	r2, #0
 8006a58:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8006a5a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	021b      	lsls	r3, r3, #8
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	4413      	add	r3, r2
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	025b      	lsls	r3, r3, #9
 8006a70:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a76:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8006a78:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	021b      	lsls	r3, r3, #8
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	4413      	add	r3, r2
 8006a8a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8006a8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a92:	025b      	lsls	r3, r3, #9
 8006a94:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8006a9a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	021b      	lsls	r3, r3, #8
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	4413      	add	r3, r2
 8006aac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006ab6:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8006ab8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006abc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8006ac6:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8006ace:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8006ad2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006ad4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ad8:	d046      	beq.n	8006b68 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8006ada:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006adc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006ae0:	fb02 f303 	mul.w	r3, r2, r3
 8006ae4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006ae8:	4a57      	ldr	r2, [pc, #348]	; (8006c48 <VL53L0X_GetRangingMeasurementData+0x244>)
 8006aea:	fb82 1203 	smull	r1, r2, r2, r3
 8006aee:	1192      	asrs	r2, r2, #6
 8006af0:	17db      	asrs	r3, r3, #31
 8006af2:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8006af4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a1b      	ldr	r3, [r3, #32]
 8006afc:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	7f1b      	ldrb	r3, [r3, #28]
 8006b02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8006b06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d02c      	beq.n	8006b68 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8006b0e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006b10:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006b14:	fb02 f303 	mul.w	r3, r2, r3
 8006b18:	121a      	asrs	r2, r3, #8
					<= 0) {
 8006b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d10d      	bne.n	8006b3c <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8006b20:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d004      	beq.n	8006b32 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8006b28:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8006b2c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006b30:	e016      	b.n	8006b60 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8006b32:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8006b36:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006b3a:	e011      	b.n	8006b60 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8006b3c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006b40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b42:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8006b46:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006b48:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8006b4c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8006b50:	121b      	asrs	r3, r3, #8
 8006b52:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8006b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b56:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8006b58:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8006b5c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8006b60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006b64:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8006b68:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00d      	beq.n	8006b8c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8006b70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006b74:	089b      	lsrs	r3, r3, #2
 8006b76:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8006b7c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	019b      	lsls	r3, r3, #6
 8006b84:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	75da      	strb	r2, [r3, #23]
 8006b8a:	e006      	b.n	8006b9a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8006b92:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2200      	movs	r2, #0
 8006b98:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8006b9a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006b9e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8006ba2:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8006ba6:	9301      	str	r3, [sp, #4]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	4613      	mov	r3, r2
 8006bae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f002 ff4b 	bl	8009a4c <VL53L0X_get_pal_range_status>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	461a      	mov	r2, r3
 8006bba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8006bc4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d103      	bne.n	8006bd4 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8006bcc:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006bd4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d12f      	bne.n	8006c3c <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f107 040c 	add.w	r4, r7, #12
 8006be2:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8006be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006bee:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8006bf6:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8006bfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8006c04:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8006c0a:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8006c10:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8006c16:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8006c1c:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8006c22:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8006c2c:	f107 050c 	add.w	r5, r7, #12
 8006c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006c38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006c3c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3750      	adds	r7, #80	; 0x50
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bdb0      	pop	{r4, r5, r7, pc}
 8006c48:	10624dd3 	.word	0x10624dd3

08006c4c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c56:	2300      	movs	r3, #0
 8006c58:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff f8b5 	bl	8005dcc <VL53L0X_SetDeviceMode>
 8006c62:	4603      	mov	r3, r0
 8006c64:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d104      	bne.n	8006c78 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f7ff fd16 	bl	80066a0 <VL53L0X_PerformSingleMeasurement>
 8006c74:	4603      	mov	r3, r0
 8006c76:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8006c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d105      	bne.n	8006c8c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f7ff febe 	bl	8006a04 <VL53L0X_GetRangingMeasurementData>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8006c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d105      	bne.n	8006ca0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006c94:	2100      	movs	r1, #0
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f962 	bl	8006f60 <VL53L0X_ClearInterruptMask>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8006ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	461a      	mov	r2, r3
 8006cba:	4603      	mov	r3, r0
 8006cbc:	70fb      	strb	r3, [r7, #3]
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	70bb      	strb	r3, [r7, #2]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8006cca:	78fb      	ldrb	r3, [r7, #3]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d002      	beq.n	8006cd6 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8006cd0:	23f6      	movs	r3, #246	; 0xf6
 8006cd2:	73fb      	strb	r3, [r7, #15]
 8006cd4:	e107      	b.n	8006ee6 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8006cd6:	78bb      	ldrb	r3, [r7, #2]
 8006cd8:	2b14      	cmp	r3, #20
 8006cda:	d110      	bne.n	8006cfe <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8006cdc:	7e3b      	ldrb	r3, [r7, #24]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d102      	bne.n	8006ce8 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8006ce2:	2310      	movs	r3, #16
 8006ce4:	73bb      	strb	r3, [r7, #14]
 8006ce6:	e001      	b.n	8006cec <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8006cec:	7bbb      	ldrb	r3, [r7, #14]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	2184      	movs	r1, #132	; 0x84
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7fc fd50 	bl	8003798 <VL53L0X_WrByte>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	73fb      	strb	r3, [r7, #15]
 8006cfc:	e0f3      	b.n	8006ee6 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8006cfe:	78bb      	ldrb	r3, [r7, #2]
 8006d00:	2b15      	cmp	r3, #21
 8006d02:	f040 8097 	bne.w	8006e34 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006d06:	2201      	movs	r2, #1
 8006d08:	21ff      	movs	r1, #255	; 0xff
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7fc fd44 	bl	8003798 <VL53L0X_WrByte>
 8006d10:	4603      	mov	r3, r0
 8006d12:	461a      	mov	r2, r3
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7fc fd3a 	bl	8003798 <VL53L0X_WrByte>
 8006d24:	4603      	mov	r3, r0
 8006d26:	461a      	mov	r2, r3
 8006d28:	7bfb      	ldrb	r3, [r7, #15]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006d2e:	2200      	movs	r2, #0
 8006d30:	21ff      	movs	r1, #255	; 0xff
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7fc fd30 	bl	8003798 <VL53L0X_WrByte>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006d42:	2201      	movs	r2, #1
 8006d44:	2180      	movs	r1, #128	; 0x80
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7fc fd26 	bl	8003798 <VL53L0X_WrByte>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	461a      	mov	r2, r3
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8006d56:	2202      	movs	r2, #2
 8006d58:	2185      	movs	r1, #133	; 0x85
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7fc fd1c 	bl	8003798 <VL53L0X_WrByte>
 8006d60:	4603      	mov	r3, r0
 8006d62:	461a      	mov	r2, r3
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8006d6a:	2204      	movs	r2, #4
 8006d6c:	21ff      	movs	r1, #255	; 0xff
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7fc fd12 	bl	8003798 <VL53L0X_WrByte>
 8006d74:	4603      	mov	r3, r0
 8006d76:	461a      	mov	r2, r3
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8006d7e:	2200      	movs	r2, #0
 8006d80:	21cd      	movs	r1, #205	; 0xcd
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f7fc fd08 	bl	8003798 <VL53L0X_WrByte>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8006d92:	2211      	movs	r2, #17
 8006d94:	21cc      	movs	r1, #204	; 0xcc
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7fc fcfe 	bl	8003798 <VL53L0X_WrByte>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	461a      	mov	r2, r3
 8006da0:	7bfb      	ldrb	r3, [r7, #15]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8006da6:	2207      	movs	r2, #7
 8006da8:	21ff      	movs	r1, #255	; 0xff
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7fc fcf4 	bl	8003798 <VL53L0X_WrByte>
 8006db0:	4603      	mov	r3, r0
 8006db2:	461a      	mov	r2, r3
 8006db4:	7bfb      	ldrb	r3, [r7, #15]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8006dba:	2200      	movs	r2, #0
 8006dbc:	21be      	movs	r1, #190	; 0xbe
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7fc fcea 	bl	8003798 <VL53L0X_WrByte>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8006dce:	2206      	movs	r2, #6
 8006dd0:	21ff      	movs	r1, #255	; 0xff
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7fc fce0 	bl	8003798 <VL53L0X_WrByte>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	461a      	mov	r2, r3
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8006de2:	2209      	movs	r2, #9
 8006de4:	21cc      	movs	r1, #204	; 0xcc
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7fc fcd6 	bl	8003798 <VL53L0X_WrByte>
 8006dec:	4603      	mov	r3, r0
 8006dee:	461a      	mov	r2, r3
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8006df6:	2200      	movs	r2, #0
 8006df8:	21ff      	movs	r1, #255	; 0xff
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f7fc fccc 	bl	8003798 <VL53L0X_WrByte>
 8006e00:	4603      	mov	r3, r0
 8006e02:	461a      	mov	r2, r3
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	21ff      	movs	r1, #255	; 0xff
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7fc fcc2 	bl	8003798 <VL53L0X_WrByte>
 8006e14:	4603      	mov	r3, r0
 8006e16:	461a      	mov	r2, r3
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006e1e:	2200      	movs	r2, #0
 8006e20:	2100      	movs	r1, #0
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7fc fcb8 	bl	8003798 <VL53L0X_WrByte>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	73fb      	strb	r3, [r7, #15]
 8006e32:	e058      	b.n	8006ee6 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8006e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d121      	bne.n	8006e80 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8006e3c:	787b      	ldrb	r3, [r7, #1]
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d81b      	bhi.n	8006e7a <VL53L0X_SetGpioConfig+0x1ce>
 8006e42:	a201      	add	r2, pc, #4	; (adr r2, 8006e48 <VL53L0X_SetGpioConfig+0x19c>)
 8006e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e48:	08006e5d 	.word	0x08006e5d
 8006e4c:	08006e63 	.word	0x08006e63
 8006e50:	08006e69 	.word	0x08006e69
 8006e54:	08006e6f 	.word	0x08006e6f
 8006e58:	08006e75 	.word	0x08006e75
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	73bb      	strb	r3, [r7, #14]
				break;
 8006e60:	e00f      	b.n	8006e82 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8006e62:	2301      	movs	r3, #1
 8006e64:	73bb      	strb	r3, [r7, #14]
				break;
 8006e66:	e00c      	b.n	8006e82 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8006e68:	2302      	movs	r3, #2
 8006e6a:	73bb      	strb	r3, [r7, #14]
				break;
 8006e6c:	e009      	b.n	8006e82 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	73bb      	strb	r3, [r7, #14]
				break;
 8006e72:	e006      	b.n	8006e82 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8006e74:	2304      	movs	r3, #4
 8006e76:	73bb      	strb	r3, [r7, #14]
				break;
 8006e78:	e003      	b.n	8006e82 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8006e7a:	23f5      	movs	r3, #245	; 0xf5
 8006e7c:	73fb      	strb	r3, [r7, #15]
 8006e7e:	e000      	b.n	8006e82 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8006e80:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8006e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d107      	bne.n	8006e9a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8006e8a:	7bbb      	ldrb	r3, [r7, #14]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	210a      	movs	r1, #10
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7fc fc81 	bl	8003798 <VL53L0X_WrByte>
 8006e96:	4603      	mov	r3, r0
 8006e98:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8006e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10f      	bne.n	8006ec2 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8006ea2:	7e3b      	ldrb	r3, [r7, #24]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d102      	bne.n	8006eae <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	73bb      	strb	r3, [r7, #14]
 8006eac:	e001      	b.n	8006eb2 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8006eae:	2310      	movs	r3, #16
 8006eb0:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8006eb2:	7bbb      	ldrb	r3, [r7, #14]
 8006eb4:	22ef      	movs	r2, #239	; 0xef
 8006eb6:	2184      	movs	r1, #132	; 0x84
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7fc fced 	bl	8003898 <VL53L0X_UpdateByte>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8006ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d103      	bne.n	8006ed2 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	787a      	ldrb	r2, [r7, #1]
 8006ece:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8006ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d105      	bne.n	8006ee6 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006eda:	2100      	movs	r1, #0
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f83f 	bl	8006f60 <VL53L0X_ClearInterruptMask>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop

08006ef4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	607a      	str	r2, [r7, #4]
 8006efe:	603b      	str	r3, [r7, #0]
 8006f00:	460b      	mov	r3, r1
 8006f02:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f04:	2300      	movs	r3, #0
 8006f06:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8006f08:	f107 0314 	add.w	r3, r7, #20
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	210e      	movs	r1, #14
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f7fc fd1f 	bl	8003954 <VL53L0X_RdWord>
 8006f16:	4603      	mov	r3, r0
 8006f18:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8006f1a:	8abb      	ldrh	r3, [r7, #20]
 8006f1c:	045b      	lsls	r3, r3, #17
 8006f1e:	461a      	mov	r2, r3
 8006f20:	4b0e      	ldr	r3, [pc, #56]	; (8006f5c <VL53L0X_GetInterruptThresholds+0x68>)
 8006f22:	4013      	ands	r3, r2
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8006f28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10f      	bne.n	8006f50 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8006f30:	f107 0314 	add.w	r3, r7, #20
 8006f34:	461a      	mov	r2, r3
 8006f36:	210c      	movs	r1, #12
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f7fc fd0b 	bl	8003954 <VL53L0X_RdWord>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8006f42:	8abb      	ldrh	r3, [r7, #20]
 8006f44:	045b      	lsls	r3, r3, #17
 8006f46:	461a      	mov	r2, r3
 8006f48:	4b04      	ldr	r3, [pc, #16]	; (8006f5c <VL53L0X_GetInterruptThresholds+0x68>)
 8006f4a:	4013      	ands	r3, r2
		*pThresholdHigh =
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006f50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3718      	adds	r7, #24
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	1ffe0000 	.word	0x1ffe0000

08006f60 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8006f72:	2201      	movs	r2, #1
 8006f74:	210b      	movs	r1, #11
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7fc fc0e 	bl	8003798 <VL53L0X_WrByte>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8006f80:	2200      	movs	r2, #0
 8006f82:	210b      	movs	r1, #11
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7fc fc07 	bl	8003798 <VL53L0X_WrByte>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	7bfb      	ldrb	r3, [r7, #15]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8006f94:	f107 030d 	add.w	r3, r7, #13
 8006f98:	461a      	mov	r2, r3
 8006f9a:	2113      	movs	r1, #19
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7fc fcaf 	bl	8003900 <VL53L0X_RdByte>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	7bfb      	ldrb	r3, [r7, #15]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8006fac:	7bbb      	ldrb	r3, [r7, #14]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8006fb2:	7b7b      	ldrb	r3, [r7, #13]
 8006fb4:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d006      	beq.n	8006fca <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8006fbc:	7bbb      	ldrb	r3, [r7, #14]
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d803      	bhi.n	8006fca <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8006fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d0d3      	beq.n	8006f72 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8006fca:	7bbb      	ldrb	r3, [r7, #14]
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d901      	bls.n	8006fd4 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8006fd0:	23f4      	movs	r3, #244	; 0xf4
 8006fd2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8006fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fea:	2300      	movs	r3, #0
 8006fec:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8006fee:	f107 030e 	add.w	r3, r7, #14
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	2113      	movs	r1, #19
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f7fc fc82 	bl	8003900 <VL53L0X_RdByte>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8007000:	7bbb      	ldrb	r3, [r7, #14]
 8007002:	f003 0207 	and.w	r2, r3, #7
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800700a:	7bbb      	ldrb	r3, [r7, #14]
 800700c:	f003 0318 	and.w	r3, r3, #24
 8007010:	2b00      	cmp	r3, #0
 8007012:	d001      	beq.n	8007018 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8007014:	23fa      	movs	r3, #250	; 0xfa
 8007016:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007018:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007030:	2300      	movs	r3, #0
 8007032:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	68b9      	ldr	r1, [r7, #8]
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 fa03 	bl	8007444 <VL53L0X_perform_ref_spad_management>
 800703e:	4603      	mov	r3, r0
 8007040:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8007042:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3718      	adds	r7, #24
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b084      	sub	sp, #16
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007058:	2300      	movs	r3, #0
 800705a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800705c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007060:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8007062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007066:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8007068:	f107 0308 	add.w	r3, r7, #8
 800706c:	461a      	mov	r2, r3
 800706e:	2128      	movs	r1, #40	; 0x28
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f7fc fc6f 	bl	8003954 <VL53L0X_RdWord>
 8007076:	4603      	mov	r3, r0
 8007078:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800707a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d11e      	bne.n	80070c0 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8007082:	893b      	ldrh	r3, [r7, #8]
 8007084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007088:	b29b      	uxth	r3, r3
 800708a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800708c:	893b      	ldrh	r3, [r7, #8]
 800708e:	461a      	mov	r2, r3
 8007090:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007094:	429a      	cmp	r2, r3
 8007096:	dd0b      	ble.n	80070b0 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8007098:	893a      	ldrh	r2, [r7, #8]
 800709a:	897b      	ldrh	r3, [r7, #10]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	b29b      	uxth	r3, r3
 80070a0:	b21b      	sxth	r3, r3
 80070a2:	461a      	mov	r2, r3
					* 250;
 80070a4:	23fa      	movs	r3, #250	; 0xfa
 80070a6:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	e007      	b.n	80070c0 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80070b0:	893b      	ldrh	r3, [r7, #8]
 80070b2:	b21b      	sxth	r3, r3
 80070b4:	461a      	mov	r2, r3
 80070b6:	23fa      	movs	r3, #250	; 0xfa
 80070b8:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80070c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b08b      	sub	sp, #44	; 0x2c
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
 80070d8:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80070da:	2308      	movs	r3, #8
 80070dc:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80070de:	2300      	movs	r3, #0
 80070e0:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070e8:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f2:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	fbb3 f2f2 	udiv	r2, r3, r2
 80070fc:	69b9      	ldr	r1, [r7, #24]
 80070fe:	fb01 f202 	mul.w	r2, r1, r2
 8007102:	1a9b      	subs	r3, r3, r2
 8007104:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	627b      	str	r3, [r7, #36]	; 0x24
 800710a:	e030      	b.n	800716e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800710c:	2300      	movs	r3, #0
 800710e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	4413      	add	r3, r2
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800711a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	429a      	cmp	r2, r3
 8007120:	d11e      	bne.n	8007160 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8007122:	7ffa      	ldrb	r2, [r7, #31]
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	fa42 f303 	asr.w	r3, r2, r3
 800712a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8007130:	e016      	b.n	8007160 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8007132:	7ffb      	ldrb	r3, [r7, #31]
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00b      	beq.n	8007154 <get_next_good_spad+0x88>
				success = 1;
 800713c:	2301      	movs	r3, #1
 800713e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	69ba      	ldr	r2, [r7, #24]
 8007144:	fb03 f202 	mul.w	r2, r3, r2
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	4413      	add	r3, r2
 800714c:	461a      	mov	r2, r3
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	601a      	str	r2, [r3, #0]
				break;
 8007152:	e009      	b.n	8007168 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8007154:	7ffb      	ldrb	r3, [r7, #31]
 8007156:	085b      	lsrs	r3, r3, #1
 8007158:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	3301      	adds	r3, #1
 800715e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8007160:	6a3a      	ldr	r2, [r7, #32]
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	429a      	cmp	r2, r3
 8007166:	d3e4      	bcc.n	8007132 <get_next_good_spad+0x66>
				coarseIndex++) {
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	3301      	adds	r3, #1
 800716c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800716e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	429a      	cmp	r2, r3
 8007174:	d202      	bcs.n	800717c <get_next_good_spad+0xb0>
 8007176:	7fbb      	ldrb	r3, [r7, #30]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d0c7      	beq.n	800710c <get_next_good_spad+0x40>
		}
	}
}
 800717c:	bf00      	nop
 800717e:	372c      	adds	r7, #44	; 0x2c
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8007190:	2301      	movs	r3, #1
 8007192:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	099b      	lsrs	r3, r3, #6
 8007198:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800719a:	4a07      	ldr	r2, [pc, #28]	; (80071b8 <is_aperture+0x30>)
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <is_aperture+0x22>
		isAperture = 0;
 80071a6:	2300      	movs	r3, #0
 80071a8:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr
 80071b8:	20000520 	.word	0x20000520

080071bc <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80071bc:	b480      	push	{r7}
 80071be:	b089      	sub	sp, #36	; 0x24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80071c8:	2300      	movs	r3, #0
 80071ca:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 80071cc:	2308      	movs	r3, #8
 80071ce:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d8:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	69ba      	ldr	r2, [r7, #24]
 80071de:	fbb3 f2f2 	udiv	r2, r3, r2
 80071e2:	69b9      	ldr	r1, [r7, #24]
 80071e4:	fb01 f202 	mul.w	r2, r1, r2
 80071e8:	1a9b      	subs	r3, r3, r2
 80071ea:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d302      	bcc.n	80071fa <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 80071f4:	23ce      	movs	r3, #206	; 0xce
 80071f6:	77fb      	strb	r3, [r7, #31]
 80071f8:	e010      	b.n	800721c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	4413      	add	r3, r2
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	b25a      	sxtb	r2, r3
 8007204:	2101      	movs	r1, #1
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	fa01 f303 	lsl.w	r3, r1, r3
 800720c:	b25b      	sxtb	r3, r3
 800720e:	4313      	orrs	r3, r2
 8007210:	b259      	sxtb	r1, r3
 8007212:	68fa      	ldr	r2, [r7, #12]
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	4413      	add	r3, r2
 8007218:	b2ca      	uxtb	r2, r1
 800721a:	701a      	strb	r2, [r3, #0]

	return status;
 800721c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3724      	adds	r7, #36	; 0x24
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8007236:	2306      	movs	r3, #6
 8007238:	683a      	ldr	r2, [r7, #0]
 800723a:	21b0      	movs	r1, #176	; 0xb0
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7fc fa4f 	bl	80036e0 <VL53L0X_WriteMulti>
 8007242:	4603      	mov	r3, r0
 8007244:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8007246:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800725c:	2306      	movs	r3, #6
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	21b0      	movs	r1, #176	; 0xb0
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7fc fa6c 	bl	8003740 <VL53L0X_ReadMulti>
 8007268:	4603      	mov	r3, r0
 800726a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800726c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b08c      	sub	sp, #48	; 0x30
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	607a      	str	r2, [r7, #4]
 8007282:	603b      	str	r3, [r7, #0]
 8007284:	460b      	mov	r3, r1
 8007286:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007288:	2300      	movs	r3, #0
 800728a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800728e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007290:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8007292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007294:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007296:	2300      	movs	r3, #0
 8007298:	62bb      	str	r3, [r7, #40]	; 0x28
 800729a:	e02b      	b.n	80072f4 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800729c:	f107 031c 	add.w	r3, r7, #28
 80072a0:	6a3a      	ldr	r2, [r7, #32]
 80072a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f7ff ff11 	bl	80070cc <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072b0:	d103      	bne.n	80072ba <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80072b2:	23ce      	movs	r3, #206	; 0xce
 80072b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80072b8:	e020      	b.n	80072fc <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	461a      	mov	r2, r3
 80072be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072c0:	4413      	add	r3, r2
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7ff ff60 	bl	8007188 <is_aperture>
 80072c8:	4603      	mov	r3, r0
 80072ca:	461a      	mov	r2, r3
 80072cc:	7afb      	ldrb	r3, [r7, #11]
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d003      	beq.n	80072da <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80072d2:	23ce      	movs	r3, #206	; 0xce
 80072d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80072d8:	e010      	b.n	80072fc <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 80072de:	6a3a      	ldr	r2, [r7, #32]
 80072e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072e2:	6838      	ldr	r0, [r7, #0]
 80072e4:	f7ff ff6a 	bl	80071bc <enable_spad_bit>
		currentSpad++;
 80072e8:	6a3b      	ldr	r3, [r7, #32]
 80072ea:	3301      	adds	r3, #1
 80072ec:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80072ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f0:	3301      	adds	r3, #1
 80072f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80072f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d3cf      	bcc.n	800729c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 80072fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072fe:	6a3a      	ldr	r2, [r7, #32]
 8007300:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8007302:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007306:	2b00      	cmp	r3, #0
 8007308:	d106      	bne.n	8007318 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	68f8      	ldr	r0, [r7, #12]
 800730e:	f7ff ff8d 	bl	800722c <set_ref_spad_map>
 8007312:	4603      	mov	r3, r0
 8007314:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8007318:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800731c:	2b00      	cmp	r3, #0
 800731e:	d121      	bne.n	8007364 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8007320:	f107 0314 	add.w	r3, r7, #20
 8007324:	4619      	mov	r1, r3
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f7ff ff93 	bl	8007252 <get_ref_spad_map>
 800732c:	4603      	mov	r3, r0
 800732e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8007332:	2300      	movs	r3, #0
 8007334:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8007336:	e011      	b.n	800735c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8007338:	683a      	ldr	r2, [r7, #0]
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	4413      	add	r3, r2
 800733e:	781a      	ldrb	r2, [r3, #0]
 8007340:	f107 0114 	add.w	r1, r7, #20
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	440b      	add	r3, r1
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	429a      	cmp	r2, r3
 800734c:	d003      	beq.n	8007356 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800734e:	23ce      	movs	r3, #206	; 0xce
 8007350:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8007354:	e006      	b.n	8007364 <enable_ref_spads+0xec>
			}
			i++;
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	3301      	adds	r3, #1
 800735a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800735c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800735e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007360:	429a      	cmp	r2, r3
 8007362:	d3e9      	bcc.n	8007338 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8007364:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007368:	4618      	mov	r0, r3
 800736a:	3730      	adds	r7, #48	; 0x30
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b08a      	sub	sp, #40	; 0x28
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800737a:	2300      	movs	r3, #0
 800737c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8007380:	2300      	movs	r3, #0
 8007382:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800738c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8007390:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007394:	2b00      	cmp	r3, #0
 8007396:	d107      	bne.n	80073a8 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8007398:	22c0      	movs	r2, #192	; 0xc0
 800739a:	2101      	movs	r1, #1
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f7fc f9fb 	bl	8003798 <VL53L0X_WrByte>
 80073a2:	4603      	mov	r3, r0
 80073a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80073a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d108      	bne.n	80073c2 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80073b0:	f107 0308 	add.w	r3, r7, #8
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7ff fc48 	bl	8006c4c <VL53L0X_PerformSingleRangingMeasurement>
 80073bc:	4603      	mov	r3, r0
 80073be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80073c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d107      	bne.n	80073da <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80073ca:	2201      	movs	r2, #1
 80073cc:	21ff      	movs	r1, #255	; 0xff
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7fc f9e2 	bl	8003798 <VL53L0X_WrByte>
 80073d4:	4603      	mov	r3, r0
 80073d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 80073da:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d107      	bne.n	80073f2 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	21b6      	movs	r1, #182	; 0xb6
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7fc fab4 	bl	8003954 <VL53L0X_RdWord>
 80073ec:	4603      	mov	r3, r0
 80073ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 80073f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d107      	bne.n	800740a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80073fa:	2200      	movs	r2, #0
 80073fc:	21ff      	movs	r1, #255	; 0xff
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7fc f9ca 	bl	8003798 <VL53L0X_WrByte>
 8007404:	4603      	mov	r3, r0
 8007406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800740a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800740e:	2b00      	cmp	r3, #0
 8007410:	d112      	bne.n	8007438 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007412:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007416:	461a      	mov	r2, r3
 8007418:	2101      	movs	r1, #1
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7fc f9bc 	bl	8003798 <VL53L0X_WrByte>
 8007420:	4603      	mov	r3, r0
 8007422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8007426:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800742a:	2b00      	cmp	r3, #0
 800742c:	d104      	bne.n	8007438 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007434:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8007438:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800743c:	4618      	mov	r0, r3
 800743e:	3728      	adds	r7, #40	; 0x28
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8007444:	b590      	push	{r4, r7, lr}
 8007446:	b09d      	sub	sp, #116	; 0x74
 8007448:	af06      	add	r7, sp, #24
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007450:	2300      	movs	r3, #0
 8007452:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8007456:	23b4      	movs	r3, #180	; 0xb4
 8007458:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800745c:	2303      	movs	r3, #3
 800745e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8007460:	232c      	movs	r3, #44	; 0x2c
 8007462:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8007464:	2300      	movs	r3, #0
 8007466:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8007468:	2300      	movs	r3, #0
 800746a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800746c:	2300      	movs	r3, #0
 800746e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8007470:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007474:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8007476:	2300      	movs	r3, #0
 8007478:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800747a:	2300      	movs	r3, #0
 800747c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800747e:	2306      	movs	r3, #6
 8007480:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8007482:	2300      	movs	r3, #0
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8007486:	2300      	movs	r3, #0
 8007488:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800748a:	2300      	movs	r3, #0
 800748c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8007490:	2300      	movs	r3, #0
 8007492:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8007494:	2300      	movs	r3, #0
 8007496:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8007498:	2300      	movs	r3, #0
 800749a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800749c:	2300      	movs	r3, #0
 800749e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80074a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80074aa:	2300      	movs	r3, #0
 80074ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80074ae:	e009      	b.n	80074c4 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80074ba:	2200      	movs	r2, #0
 80074bc:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80074be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074c0:	3301      	adds	r3, #1
 80074c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80074c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d3f1      	bcc.n	80074b0 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80074cc:	2201      	movs	r2, #1
 80074ce:	21ff      	movs	r1, #255	; 0xff
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f7fc f961 	bl	8003798 <VL53L0X_WrByte>
 80074d6:	4603      	mov	r3, r0
 80074d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80074dc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d107      	bne.n	80074f4 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 80074e4:	2200      	movs	r2, #0
 80074e6:	214f      	movs	r1, #79	; 0x4f
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f7fc f955 	bl	8003798 <VL53L0X_WrByte>
 80074ee:	4603      	mov	r3, r0
 80074f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80074f4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d107      	bne.n	800750c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 80074fc:	222c      	movs	r2, #44	; 0x2c
 80074fe:	214e      	movs	r1, #78	; 0x4e
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f7fc f949 	bl	8003798 <VL53L0X_WrByte>
 8007506:	4603      	mov	r3, r0
 8007508:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800750c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007510:	2b00      	cmp	r3, #0
 8007512:	d107      	bne.n	8007524 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007514:	2200      	movs	r2, #0
 8007516:	21ff      	movs	r1, #255	; 0xff
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f7fc f93d 	bl	8003798 <VL53L0X_WrByte>
 800751e:	4603      	mov	r3, r0
 8007520:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8007524:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007528:	2b00      	cmp	r3, #0
 800752a:	d109      	bne.n	8007540 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800752c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007530:	461a      	mov	r2, r3
 8007532:	21b6      	movs	r1, #182	; 0xb6
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f7fc f92f 	bl	8003798 <VL53L0X_WrByte>
 800753a:	4603      	mov	r3, r0
 800753c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8007540:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007544:	2b00      	cmp	r3, #0
 8007546:	d107      	bne.n	8007558 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8007548:	2200      	movs	r2, #0
 800754a:	2180      	movs	r1, #128	; 0x80
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f7fc f923 	bl	8003798 <VL53L0X_WrByte>
 8007552:	4603      	mov	r3, r0
 8007554:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8007558:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10a      	bne.n	8007576 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8007560:	f107 0210 	add.w	r2, r7, #16
 8007564:	f107 0111 	add.w	r1, r7, #17
 8007568:	2300      	movs	r3, #0
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f000 fbbb 	bl	8007ce6 <VL53L0X_perform_ref_calibration>
 8007570:	4603      	mov	r3, r0
 8007572:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8007576:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800757a:	2b00      	cmp	r3, #0
 800757c:	d121      	bne.n	80075c2 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800757e:	2300      	movs	r3, #0
 8007580:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8007582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007584:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8007586:	2300      	movs	r3, #0
 8007588:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800758a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800758c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800759a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800759e:	f107 0218 	add.w	r2, r7, #24
 80075a2:	9204      	str	r2, [sp, #16]
 80075a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075a6:	9203      	str	r2, [sp, #12]
 80075a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80075aa:	9202      	str	r2, [sp, #8]
 80075ac:	9301      	str	r3, [sp, #4]
 80075ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	4623      	mov	r3, r4
 80075b4:	4602      	mov	r2, r0
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f7ff fe5e 	bl	8007278 <enable_ref_spads>
 80075bc:	4603      	mov	r3, r0
 80075be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80075c2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d174      	bne.n	80076b4 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 80075ce:	f107 0312 	add.w	r3, r7, #18
 80075d2:	4619      	mov	r1, r3
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f7ff fecb 	bl	8007370 <perform_ref_signal_measurement>
 80075da:	4603      	mov	r3, r0
 80075dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 80075e0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d161      	bne.n	80076ac <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 80075e8:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 80075ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d25d      	bcs.n	80076ac <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 80075f0:	2300      	movs	r3, #0
 80075f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80075f4:	e009      	b.n	800760a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075fa:	4413      	add	r3, r2
 80075fc:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007600:	2200      	movs	r2, #0
 8007602:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8007604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007606:	3301      	adds	r3, #1
 8007608:	64bb      	str	r3, [r7, #72]	; 0x48
 800760a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800760c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760e:	429a      	cmp	r2, r3
 8007610:	d3f1      	bcc.n	80075f6 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8007612:	e002      	b.n	800761a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8007614:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007616:	3301      	adds	r3, #1
 8007618:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800761a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800761e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007620:	4413      	add	r3, r2
 8007622:	4618      	mov	r0, r3
 8007624:	f7ff fdb0 	bl	8007188 <is_aperture>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d103      	bne.n	8007636 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800762e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007632:	429a      	cmp	r2, r3
 8007634:	d3ee      	bcc.n	8007614 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8007636:	2301      	movs	r3, #1
 8007638:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800763a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800763c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800764a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800764e:	f107 0218 	add.w	r2, r7, #24
 8007652:	9204      	str	r2, [sp, #16]
 8007654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007656:	9203      	str	r2, [sp, #12]
 8007658:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800765a:	9202      	str	r2, [sp, #8]
 800765c:	9301      	str	r3, [sp, #4]
 800765e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	4623      	mov	r3, r4
 8007664:	4602      	mov	r2, r0
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f7ff fe06 	bl	8007278 <enable_ref_spads>
 800766c:	4603      	mov	r3, r0
 800766e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8007672:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007676:	2b00      	cmp	r3, #0
 8007678:	d11b      	bne.n	80076b2 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800767e:	f107 0312 	add.w	r3, r7, #18
 8007682:	4619      	mov	r1, r3
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f7ff fe73 	bl	8007370 <perform_ref_signal_measurement>
 800768a:	4603      	mov	r3, r0
 800768c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8007690:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10c      	bne.n	80076b2 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8007698:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800769a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800769c:	429a      	cmp	r2, r3
 800769e:	d208      	bcs.n	80076b2 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 80076a0:	2301      	movs	r3, #1
 80076a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 80076a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a8:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 80076aa:	e002      	b.n	80076b2 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 80076ac:	2300      	movs	r3, #0
 80076ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076b0:	e000      	b.n	80076b4 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 80076b2:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80076b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f040 80af 	bne.w	800781c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 80076be:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 80076c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80076c2:	429a      	cmp	r2, r3
 80076c4:	f240 80aa 	bls.w	800781c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 80076c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 80076ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076d0:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f503 7192 	add.w	r1, r3, #292	; 0x124
 80076d8:	f107 031c 	add.w	r3, r7, #28
 80076dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076de:	4618      	mov	r0, r3
 80076e0:	f012 fbf0 	bl	8019ec4 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 80076e4:	8a7b      	ldrh	r3, [r7, #18]
 80076e6:	461a      	mov	r2, r3
 80076e8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	bfb8      	it	lt
 80076f0:	425b      	neglt	r3, r3
 80076f2:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 80076f4:	2300      	movs	r3, #0
 80076f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 80076fa:	e086      	b.n	800780a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8007702:	f107 0314 	add.w	r3, r7, #20
 8007706:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007708:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800770a:	f7ff fcdf 	bl	80070cc <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007714:	d103      	bne.n	800771e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007716:	23ce      	movs	r3, #206	; 0xce
 8007718:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800771c:	e07e      	b.n	800781c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800771e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	4413      	add	r3, r2
 8007726:	4618      	mov	r0, r3
 8007728:	f7ff fd2e 	bl	8007188 <is_aperture>
 800772c:	4603      	mov	r3, r0
 800772e:	461a      	mov	r2, r3
 8007730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007732:	4293      	cmp	r3, r2
 8007734:	d003      	beq.n	800773e <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8007736:	2301      	movs	r3, #1
 8007738:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800773c:	e06e      	b.n	800781c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800773e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007740:	3301      	adds	r3, #1
 8007742:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800774e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007750:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007752:	4618      	mov	r0, r3
 8007754:	f7ff fd32 	bl	80071bc <enable_spad_bit>
 8007758:	4603      	mov	r3, r0
 800775a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800775e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10c      	bne.n	8007780 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8007766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007768:	3301      	adds	r3, #1
 800776a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8007772:	4619      	mov	r1, r3
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f7ff fd59 	bl	800722c <set_ref_spad_map>
 800777a:	4603      	mov	r3, r0
 800777c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8007780:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007784:	2b00      	cmp	r3, #0
 8007786:	d146      	bne.n	8007816 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8007788:	f107 0312 	add.w	r3, r7, #18
 800778c:	4619      	mov	r1, r3
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f7ff fdee 	bl	8007370 <perform_ref_signal_measurement>
 8007794:	4603      	mov	r3, r0
 8007796:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800779a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d13b      	bne.n	800781a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80077a2:	8a7b      	ldrh	r3, [r7, #18]
 80077a4:	461a      	mov	r2, r3
 80077a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80077a8:	1ad3      	subs	r3, r2, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	bfb8      	it	lt
 80077ae:	425b      	neglt	r3, r3
 80077b0:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 80077b2:	8a7b      	ldrh	r3, [r7, #18]
 80077b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d21c      	bcs.n	80077f4 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80077ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077be:	429a      	cmp	r2, r3
 80077c0:	d914      	bls.n	80077ec <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 80077c2:	f107 031c 	add.w	r3, r7, #28
 80077c6:	4619      	mov	r1, r3
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f7ff fd2f 	bl	800722c <set_ref_spad_map>
 80077ce:	4603      	mov	r3, r0
 80077d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 80077da:	f107 011c 	add.w	r1, r7, #28
 80077de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077e0:	4618      	mov	r0, r3
 80077e2:	f012 fb6f 	bl	8019ec4 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80077e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e8:	3b01      	subs	r3, #1
 80077ea:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 80077ec:	2301      	movs	r3, #1
 80077ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077f2:	e00a      	b.n	800780a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 80077fe:	f107 031c 	add.w	r3, r7, #28
 8007802:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007804:	4618      	mov	r0, r3
 8007806:	f012 fb5d 	bl	8019ec4 <memcpy>
		while (!complete) {
 800780a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800780e:	2b00      	cmp	r3, #0
 8007810:	f43f af74 	beq.w	80076fc <VL53L0X_perform_ref_spad_management+0x2b8>
 8007814:	e002      	b.n	800781c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8007816:	bf00      	nop
 8007818:	e000      	b.n	800781c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800781a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800781c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007820:	2b00      	cmp	r3, #0
 8007822:	d115      	bne.n	8007850 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007828:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8007830:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	b2da      	uxtb	r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	781a      	ldrb	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8007850:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8007854:	4618      	mov	r0, r3
 8007856:	375c      	adds	r7, #92	; 0x5c
 8007858:	46bd      	mov	sp, r7
 800785a:	bd90      	pop	{r4, r7, pc}

0800785c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800785c:	b590      	push	{r4, r7, lr}
 800785e:	b093      	sub	sp, #76	; 0x4c
 8007860:	af06      	add	r7, sp, #24
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	4613      	mov	r3, r2
 8007868:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800786a:	2300      	movs	r3, #0
 800786c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8007870:	2300      	movs	r3, #0
 8007872:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8007874:	23b4      	movs	r3, #180	; 0xb4
 8007876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800787a:	2306      	movs	r3, #6
 800787c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800787e:	232c      	movs	r3, #44	; 0x2c
 8007880:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007882:	2201      	movs	r2, #1
 8007884:	21ff      	movs	r1, #255	; 0xff
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f7fb ff86 	bl	8003798 <VL53L0X_WrByte>
 800788c:	4603      	mov	r3, r0
 800788e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8007892:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007896:	2b00      	cmp	r3, #0
 8007898:	d107      	bne.n	80078aa <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800789a:	2200      	movs	r2, #0
 800789c:	214f      	movs	r1, #79	; 0x4f
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f7fb ff7a 	bl	8003798 <VL53L0X_WrByte>
 80078a4:	4603      	mov	r3, r0
 80078a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80078aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d107      	bne.n	80078c2 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 80078b2:	222c      	movs	r2, #44	; 0x2c
 80078b4:	214e      	movs	r1, #78	; 0x4e
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f7fb ff6e 	bl	8003798 <VL53L0X_WrByte>
 80078bc:	4603      	mov	r3, r0
 80078be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80078c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d107      	bne.n	80078da <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80078ca:	2200      	movs	r2, #0
 80078cc:	21ff      	movs	r1, #255	; 0xff
 80078ce:	68f8      	ldr	r0, [r7, #12]
 80078d0:	f7fb ff62 	bl	8003798 <VL53L0X_WrByte>
 80078d4:	4603      	mov	r3, r0
 80078d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80078da:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d109      	bne.n	80078f6 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80078e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078e6:	461a      	mov	r2, r3
 80078e8:	21b6      	movs	r1, #182	; 0xb6
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f7fb ff54 	bl	8003798 <VL53L0X_WrByte>
 80078f0:	4603      	mov	r3, r0
 80078f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 80078f6:	2300      	movs	r3, #0
 80078f8:	627b      	str	r3, [r7, #36]	; 0x24
 80078fa:	e009      	b.n	8007910 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80078fc:	68fa      	ldr	r2, [r7, #12]
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	4413      	add	r3, r2
 8007902:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8007906:	2200      	movs	r2, #0
 8007908:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800790a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790c:	3301      	adds	r3, #1
 800790e:	627b      	str	r3, [r7, #36]	; 0x24
 8007910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	429a      	cmp	r2, r3
 8007916:	d3f1      	bcc.n	80078fc <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8007918:	79fb      	ldrb	r3, [r7, #7]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d011      	beq.n	8007942 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800791e:	e002      	b.n	8007926 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8007920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007922:	3301      	adds	r3, #1
 8007924:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8007926:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800792a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792c:	4413      	add	r3, r2
 800792e:	4618      	mov	r0, r3
 8007930:	f7ff fc2a 	bl	8007188 <is_aperture>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d103      	bne.n	8007942 <VL53L0X_set_reference_spads+0xe6>
 800793a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	429a      	cmp	r2, r3
 8007940:	d3ee      	bcc.n	8007920 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800794e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007952:	79f9      	ldrb	r1, [r7, #7]
 8007954:	f107 0214 	add.w	r2, r7, #20
 8007958:	9204      	str	r2, [sp, #16]
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	9203      	str	r2, [sp, #12]
 800795e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007960:	9202      	str	r2, [sp, #8]
 8007962:	9301      	str	r3, [sp, #4]
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	4623      	mov	r3, r4
 800796a:	4602      	mov	r2, r0
 800796c:	68f8      	ldr	r0, [r7, #12]
 800796e:	f7ff fc83 	bl	8007278 <enable_ref_spads>
 8007972:	4603      	mov	r3, r0
 8007974:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8007978:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10c      	bne.n	800799a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	b2da      	uxtb	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	79fa      	ldrb	r2, [r7, #7]
 8007996:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800799a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3734      	adds	r7, #52	; 0x34
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd90      	pop	{r4, r7, pc}

080079a6 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b084      	sub	sp, #16
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
 80079ae:	460b      	mov	r3, r1
 80079b0:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80079b2:	2300      	movs	r3, #0
 80079b4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80079b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10a      	bne.n	80079d4 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80079be:	78fb      	ldrb	r3, [r7, #3]
 80079c0:	f043 0301 	orr.w	r3, r3, #1
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	461a      	mov	r2, r3
 80079c8:	2100      	movs	r1, #0
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7fb fee4 	bl	8003798 <VL53L0X_WrByte>
 80079d0:	4603      	mov	r3, r0
 80079d2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80079d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d104      	bne.n	80079e6 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f9bf 	bl	8007d60 <VL53L0X_measurement_poll_for_completion>
 80079e2:	4603      	mov	r3, r0
 80079e4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80079e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d105      	bne.n	80079fa <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80079ee:	2100      	movs	r1, #0
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f7ff fab5 	bl	8006f60 <VL53L0X_ClearInterruptMask>
 80079f6:	4603      	mov	r3, r0
 80079f8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80079fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d106      	bne.n	8007a10 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8007a02:	2200      	movs	r2, #0
 8007a04:	2100      	movs	r1, #0
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7fb fec6 	bl	8003798 <VL53L0X_WrByte>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	73fb      	strb	r3, [r7, #15]

	return Status;
 8007a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	4608      	mov	r0, r1
 8007a26:	4611      	mov	r1, r2
 8007a28:	461a      	mov	r2, r3
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	70fb      	strb	r3, [r7, #3]
 8007a2e:	460b      	mov	r3, r1
 8007a30:	70bb      	strb	r3, [r7, #2]
 8007a32:	4613      	mov	r3, r2
 8007a34:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a36:	2300      	movs	r3, #0
 8007a38:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007a3e:	2201      	movs	r2, #1
 8007a40:	21ff      	movs	r1, #255	; 0xff
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7fb fea8 	bl	8003798 <VL53L0X_WrByte>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	7bfb      	ldrb	r3, [r7, #15]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007a52:	2200      	movs	r2, #0
 8007a54:	2100      	movs	r1, #0
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f7fb fe9e 	bl	8003798 <VL53L0X_WrByte>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	461a      	mov	r2, r3
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007a66:	2200      	movs	r2, #0
 8007a68:	21ff      	movs	r1, #255	; 0xff
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7fb fe94 	bl	8003798 <VL53L0X_WrByte>
 8007a70:	4603      	mov	r3, r0
 8007a72:	461a      	mov	r2, r3
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8007a7a:	78fb      	ldrb	r3, [r7, #3]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01e      	beq.n	8007abe <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8007a80:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d009      	beq.n	8007a9c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	21cb      	movs	r1, #203	; 0xcb
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f7fb ff37 	bl	8003900 <VL53L0X_RdByte>
 8007a92:	4603      	mov	r3, r0
 8007a94:	461a      	mov	r2, r3
 8007a96:	7bfb      	ldrb	r3, [r7, #15]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007a9c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d02a      	beq.n	8007afa <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8007aa4:	f107 030e 	add.w	r3, r7, #14
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	21ee      	movs	r1, #238	; 0xee
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f7fb ff27 	bl	8003900 <VL53L0X_RdByte>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	7bfb      	ldrb	r3, [r7, #15]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	73fb      	strb	r3, [r7, #15]
 8007abc:	e01d      	b.n	8007afa <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8007abe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00a      	beq.n	8007adc <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8007ac6:	78bb      	ldrb	r3, [r7, #2]
 8007ac8:	461a      	mov	r2, r3
 8007aca:	21cb      	movs	r1, #203	; 0xcb
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f7fb fe63 	bl	8003798 <VL53L0X_WrByte>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	7bfb      	ldrb	r3, [r7, #15]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8007adc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00a      	beq.n	8007afa <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8007ae4:	787b      	ldrb	r3, [r7, #1]
 8007ae6:	2280      	movs	r2, #128	; 0x80
 8007ae8:	21ee      	movs	r1, #238	; 0xee
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7fb fed4 	bl	8003898 <VL53L0X_UpdateByte>
 8007af0:	4603      	mov	r3, r0
 8007af2:	461a      	mov	r2, r3
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007afa:	2201      	movs	r2, #1
 8007afc:	21ff      	movs	r1, #255	; 0xff
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7fb fe4a 	bl	8003798 <VL53L0X_WrByte>
 8007b04:	4603      	mov	r3, r0
 8007b06:	461a      	mov	r2, r3
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007b0e:	2201      	movs	r2, #1
 8007b10:	2100      	movs	r1, #0
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7fb fe40 	bl	8003798 <VL53L0X_WrByte>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007b22:	2200      	movs	r2, #0
 8007b24:	21ff      	movs	r1, #255	; 0xff
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7fb fe36 	bl	8003798 <VL53L0X_WrByte>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	461a      	mov	r2, r3
 8007b30:	7bfb      	ldrb	r3, [r7, #15]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	f023 0310 	bic.w	r3, r3, #16
 8007b3c:	b2da      	uxtb	r2, r3
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	701a      	strb	r2, [r3, #0]

	return Status;
 8007b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b08a      	sub	sp, #40	; 0x28
 8007b52:	af04      	add	r7, sp, #16
 8007b54:	60f8      	str	r0, [r7, #12]
 8007b56:	60b9      	str	r1, [r7, #8]
 8007b58:	4611      	mov	r1, r2
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	71fb      	strb	r3, [r7, #7]
 8007b60:	4613      	mov	r3, r2
 8007b62:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b64:	2300      	movs	r3, #0
 8007b66:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8007b70:	2300      	movs	r3, #0
 8007b72:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8007b74:	2300      	movs	r3, #0
 8007b76:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8007b78:	79bb      	ldrb	r3, [r7, #6]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d003      	beq.n	8007b86 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007b84:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8007b86:	2201      	movs	r2, #1
 8007b88:	2101      	movs	r1, #1
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f7fb fe04 	bl	8003798 <VL53L0X_WrByte>
 8007b90:	4603      	mov	r3, r0
 8007b92:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8007b94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d105      	bne.n	8007ba8 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8007b9c:	2140      	movs	r1, #64	; 0x40
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f7ff ff01 	bl	80079a6 <VL53L0X_perform_single_ref_calibration>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8007ba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d115      	bne.n	8007bdc <VL53L0X_perform_vhv_calibration+0x8e>
 8007bb0:	79fb      	ldrb	r3, [r7, #7]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d112      	bne.n	8007bdc <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8007bb6:	7d39      	ldrb	r1, [r7, #20]
 8007bb8:	7d7a      	ldrb	r2, [r7, #21]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	9303      	str	r3, [sp, #12]
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	9302      	str	r3, [sp, #8]
 8007bc2:	f107 0313 	add.w	r3, r7, #19
 8007bc6:	9301      	str	r3, [sp, #4]
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	2101      	movs	r1, #1
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f7ff ff23 	bl	8007a1c <VL53L0X_ref_calibration_io>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	75fb      	strb	r3, [r7, #23]
 8007bda:	e002      	b.n	8007be2 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	2200      	movs	r2, #0
 8007be0:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d112      	bne.n	8007c10 <VL53L0X_perform_vhv_calibration+0xc2>
 8007bea:	79bb      	ldrb	r3, [r7, #6]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00f      	beq.n	8007c10 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007bf0:	7dbb      	ldrb	r3, [r7, #22]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	2101      	movs	r1, #1
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f7fb fdce 	bl	8003798 <VL53L0X_WrByte>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007c00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d103      	bne.n	8007c10 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	7dba      	ldrb	r2, [r7, #22]
 8007c0c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007c10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3718      	adds	r7, #24
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b08a      	sub	sp, #40	; 0x28
 8007c20:	af04      	add	r7, sp, #16
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	4611      	mov	r1, r2
 8007c28:	461a      	mov	r2, r3
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	71fb      	strb	r3, [r7, #7]
 8007c2e:	4613      	mov	r3, r2
 8007c30:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c32:	2300      	movs	r3, #0
 8007c34:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007c36:	2300      	movs	r3, #0
 8007c38:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8007c42:	79bb      	ldrb	r3, [r7, #6]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d003      	beq.n	8007c50 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007c4e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8007c50:	2202      	movs	r2, #2
 8007c52:	2101      	movs	r1, #1
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f7fb fd9f 	bl	8003798 <VL53L0X_WrByte>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8007c5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d105      	bne.n	8007c72 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8007c66:	2100      	movs	r1, #0
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f7ff fe9c 	bl	80079a6 <VL53L0X_perform_single_ref_calibration>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8007c72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d115      	bne.n	8007ca6 <VL53L0X_perform_phase_calibration+0x8a>
 8007c7a:	79fb      	ldrb	r3, [r7, #7]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d112      	bne.n	8007ca6 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8007c80:	7d39      	ldrb	r1, [r7, #20]
 8007c82:	7d7a      	ldrb	r2, [r7, #21]
 8007c84:	2301      	movs	r3, #1
 8007c86:	9303      	str	r3, [sp, #12]
 8007c88:	2300      	movs	r3, #0
 8007c8a:	9302      	str	r3, [sp, #8]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	9301      	str	r3, [sp, #4]
 8007c90:	f107 0313 	add.w	r3, r7, #19
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	460b      	mov	r3, r1
 8007c98:	2101      	movs	r1, #1
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f7ff febe 	bl	8007a1c <VL53L0X_ref_calibration_io>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	75fb      	strb	r3, [r7, #23]
 8007ca4:	e002      	b.n	8007cac <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8007cac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d112      	bne.n	8007cda <VL53L0X_perform_phase_calibration+0xbe>
 8007cb4:	79bb      	ldrb	r3, [r7, #6]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00f      	beq.n	8007cda <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007cba:	7dbb      	ldrb	r3, [r7, #22]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	2101      	movs	r1, #1
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f7fb fd69 	bl	8003798 <VL53L0X_WrByte>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007cca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d103      	bne.n	8007cda <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	7dba      	ldrb	r2, [r7, #22]
 8007cd6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007cda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3718      	adds	r7, #24
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b086      	sub	sp, #24
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	60f8      	str	r0, [r7, #12]
 8007cee:	60b9      	str	r1, [r7, #8]
 8007cf0:	607a      	str	r2, [r7, #4]
 8007cf2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007d02:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8007d04:	78fa      	ldrb	r2, [r7, #3]
 8007d06:	2300      	movs	r3, #0
 8007d08:	68b9      	ldr	r1, [r7, #8]
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f7ff ff1f 	bl	8007b4e <VL53L0X_perform_vhv_calibration>
 8007d10:	4603      	mov	r3, r0
 8007d12:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007d14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d107      	bne.n	8007d2c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8007d1c:	78fa      	ldrb	r2, [r7, #3]
 8007d1e:	2300      	movs	r3, #0
 8007d20:	6879      	ldr	r1, [r7, #4]
 8007d22:	68f8      	ldr	r0, [r7, #12]
 8007d24:	f7ff ff7a 	bl	8007c1c <VL53L0X_perform_phase_calibration>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8007d2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10f      	bne.n	8007d54 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007d34:	7dbb      	ldrb	r3, [r7, #22]
 8007d36:	461a      	mov	r2, r3
 8007d38:	2101      	movs	r1, #1
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f7fb fd2c 	bl	8003798 <VL53L0X_WrByte>
 8007d40:	4603      	mov	r3, r0
 8007d42:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8007d44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d103      	bne.n	8007d54 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	7dba      	ldrb	r2, [r7, #22]
 8007d50:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8007d54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3718      	adds	r7, #24
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8007d70:	2300      	movs	r3, #0
 8007d72:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007d74:	f107 030f 	add.w	r3, r7, #15
 8007d78:	4619      	mov	r1, r3
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7fe fe02 	bl	8006984 <VL53L0X_GetMeasurementDataReady>
 8007d80:	4603      	mov	r3, r0
 8007d82:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8007d84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d110      	bne.n	8007dae <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8007d8c:	7bfb      	ldrb	r3, [r7, #15]
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d00f      	beq.n	8007db2 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	3301      	adds	r3, #1
 8007d96:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007d9e:	d302      	bcc.n	8007da6 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8007da0:	23f9      	movs	r3, #249	; 0xf9
 8007da2:	75fb      	strb	r3, [r7, #23]
			break;
 8007da4:	e006      	b.n	8007db4 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7fb fe48 	bl	8003a3c <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8007dac:	e7e2      	b.n	8007d74 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8007dae:	bf00      	nop
 8007db0:	e000      	b.n	8007db4 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8007db2:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8007db4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3718      	adds	r7, #24
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8007dce:	79fb      	ldrb	r3, [r7, #7]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	005b      	lsls	r3, r3, #1
 8007dd6:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b085      	sub	sp, #20
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8007dee:	2300      	movs	r3, #0
 8007df0:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8007df2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007df6:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8007df8:	e002      	b.n	8007e00 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	089b      	lsrs	r3, r3, #2
 8007dfe:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d8f8      	bhi.n	8007dfa <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8007e08:	e017      	b.n	8007e3a <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	4413      	add	r3, r2
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d30b      	bcc.n	8007e2e <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	085b      	lsrs	r3, r3, #1
 8007e26:	68ba      	ldr	r2, [r7, #8]
 8007e28:	4413      	add	r3, r2
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	e002      	b.n	8007e34 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	085b      	lsrs	r3, r3, #1
 8007e32:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	089b      	lsrs	r3, r3, #2
 8007e38:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1e4      	bne.n	8007e0a <VL53L0X_isqrt+0x24>
	}

	return res;
 8007e40:	68fb      	ldr	r3, [r7, #12]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3714      	adds	r7, #20
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr

08007e4e <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b086      	sub	sp, #24
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e56:	2300      	movs	r3, #0
 8007e58:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2183      	movs	r1, #131	; 0x83
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7fb fc9a 	bl	8003798 <VL53L0X_WrByte>
 8007e64:	4603      	mov	r3, r0
 8007e66:	461a      	mov	r2, r3
 8007e68:	7dfb      	ldrb	r3, [r7, #23]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8007e6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d11e      	bne.n	8007eb4 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8007e76:	2300      	movs	r3, #0
 8007e78:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8007e7a:	f107 030f 	add.w	r3, r7, #15
 8007e7e:	461a      	mov	r2, r3
 8007e80:	2183      	movs	r1, #131	; 0x83
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7fb fd3c 	bl	8003900 <VL53L0X_RdByte>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d10a      	bne.n	8007ea8 <VL53L0X_device_read_strobe+0x5a>
 8007e92:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d106      	bne.n	8007ea8 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007ea6:	d3e8      	bcc.n	8007e7a <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007eae:	d301      	bcc.n	8007eb4 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8007eb0:	23f9      	movs	r3, #249	; 0xf9
 8007eb2:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	2183      	movs	r1, #131	; 0x83
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f7fb fc6d 	bl	8003798 <VL53L0X_WrByte>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	7dfb      	ldrb	r3, [r7, #23]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8007ec8:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3718      	adds	r7, #24
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b098      	sub	sp, #96	; 0x60
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8007efa:	2300      	movs	r3, #0
 8007efc:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8007efe:	2300      	movs	r3, #0
 8007f00:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8007f04:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8007f08:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8007f12:	2300      	movs	r3, #0
 8007f14:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8007f1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8007f20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f24:	2b07      	cmp	r3, #7
 8007f26:	f000 8408 	beq.w	800873a <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	2180      	movs	r1, #128	; 0x80
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f7fb fc32 	bl	8003798 <VL53L0X_WrByte>
 8007f34:	4603      	mov	r3, r0
 8007f36:	461a      	mov	r2, r3
 8007f38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007f42:	2201      	movs	r2, #1
 8007f44:	21ff      	movs	r1, #255	; 0xff
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7fb fc26 	bl	8003798 <VL53L0X_WrByte>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	461a      	mov	r2, r3
 8007f50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f54:	4313      	orrs	r3, r2
 8007f56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f7fb fc1a 	bl	8003798 <VL53L0X_WrByte>
 8007f64:	4603      	mov	r3, r0
 8007f66:	461a      	mov	r2, r3
 8007f68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8007f72:	2206      	movs	r2, #6
 8007f74:	21ff      	movs	r1, #255	; 0xff
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7fb fc0e 	bl	8003798 <VL53L0X_WrByte>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	461a      	mov	r2, r3
 8007f80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f84:	4313      	orrs	r3, r2
 8007f86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8007f8a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8007f8e:	461a      	mov	r2, r3
 8007f90:	2183      	movs	r1, #131	; 0x83
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7fb fcb4 	bl	8003900 <VL53L0X_RdByte>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8007fa6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007faa:	f043 0304 	orr.w	r3, r3, #4
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	2183      	movs	r1, #131	; 0x83
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7fb fbef 	bl	8003798 <VL53L0X_WrByte>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8007fc8:	2207      	movs	r2, #7
 8007fca:	21ff      	movs	r1, #255	; 0xff
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7fb fbe3 	bl	8003798 <VL53L0X_WrByte>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	2181      	movs	r1, #129	; 0x81
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7fb fbd7 	bl	8003798 <VL53L0X_WrByte>
 8007fea:	4603      	mov	r3, r0
 8007fec:	461a      	mov	r2, r3
 8007fee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7fb fd1f 	bl	8003a3c <VL53L0X_PollingDelay>
 8007ffe:	4603      	mov	r3, r0
 8008000:	461a      	mov	r2, r3
 8008002:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008006:	4313      	orrs	r3, r2
 8008008:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800800c:	2201      	movs	r2, #1
 800800e:	2180      	movs	r1, #128	; 0x80
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f7fb fbc1 	bl	8003798 <VL53L0X_WrByte>
 8008016:	4603      	mov	r3, r0
 8008018:	461a      	mov	r2, r3
 800801a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800801e:	4313      	orrs	r3, r2
 8008020:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8008024:	78fb      	ldrb	r3, [r7, #3]
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	2b00      	cmp	r3, #0
 800802c:	f000 8098 	beq.w	8008160 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008030:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008034:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008038:	2b00      	cmp	r3, #0
 800803a:	f040 8091 	bne.w	8008160 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800803e:	226b      	movs	r2, #107	; 0x6b
 8008040:	2194      	movs	r1, #148	; 0x94
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7fb fba8 	bl	8003798 <VL53L0X_WrByte>
 8008048:	4603      	mov	r3, r0
 800804a:	461a      	mov	r2, r3
 800804c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008050:	4313      	orrs	r3, r2
 8008052:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f7ff fef9 	bl	8007e4e <VL53L0X_device_read_strobe>
 800805c:	4603      	mov	r3, r0
 800805e:	461a      	mov	r2, r3
 8008060:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008064:	4313      	orrs	r3, r2
 8008066:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800806a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800806e:	461a      	mov	r2, r3
 8008070:	2190      	movs	r1, #144	; 0x90
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f7fb fca6 	bl	80039c4 <VL53L0X_RdDWord>
 8008078:	4603      	mov	r3, r0
 800807a:	461a      	mov	r2, r3
 800807c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008080:	4313      	orrs	r3, r2
 8008082:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8008086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008088:	0a1b      	lsrs	r3, r3, #8
 800808a:	b2db      	uxtb	r3, r3
 800808c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008090:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8008094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008096:	0bdb      	lsrs	r3, r3, #15
 8008098:	b2db      	uxtb	r3, r3
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80080a2:	2224      	movs	r2, #36	; 0x24
 80080a4:	2194      	movs	r1, #148	; 0x94
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7fb fb76 	bl	8003798 <VL53L0X_WrByte>
 80080ac:	4603      	mov	r3, r0
 80080ae:	461a      	mov	r2, r3
 80080b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080b4:	4313      	orrs	r3, r2
 80080b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f7ff fec7 	bl	8007e4e <VL53L0X_device_read_strobe>
 80080c0:	4603      	mov	r3, r0
 80080c2:	461a      	mov	r2, r3
 80080c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080c8:	4313      	orrs	r3, r2
 80080ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80080ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80080d2:	461a      	mov	r2, r3
 80080d4:	2190      	movs	r1, #144	; 0x90
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7fb fc74 	bl	80039c4 <VL53L0X_RdDWord>
 80080dc:	4603      	mov	r3, r0
 80080de:	461a      	mov	r2, r3
 80080e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080e4:	4313      	orrs	r3, r2
 80080e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 80080ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ec:	0e1b      	lsrs	r3, r3, #24
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 80080f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f4:	0c1b      	lsrs	r3, r3, #16
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 80080fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fc:	0a1b      	lsrs	r3, r3, #8
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	b2db      	uxtb	r3, r3
 8008106:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8008108:	2225      	movs	r2, #37	; 0x25
 800810a:	2194      	movs	r1, #148	; 0x94
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7fb fb43 	bl	8003798 <VL53L0X_WrByte>
 8008112:	4603      	mov	r3, r0
 8008114:	461a      	mov	r2, r3
 8008116:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800811a:	4313      	orrs	r3, r2
 800811c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7ff fe94 	bl	8007e4e <VL53L0X_device_read_strobe>
 8008126:	4603      	mov	r3, r0
 8008128:	461a      	mov	r2, r3
 800812a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800812e:	4313      	orrs	r3, r2
 8008130:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008134:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008138:	461a      	mov	r2, r3
 800813a:	2190      	movs	r1, #144	; 0x90
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7fb fc41 	bl	80039c4 <VL53L0X_RdDWord>
 8008142:	4603      	mov	r3, r0
 8008144:	461a      	mov	r2, r3
 8008146:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800814a:	4313      	orrs	r3, r2
 800814c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8008150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008152:	0e1b      	lsrs	r3, r3, #24
 8008154:	b2db      	uxtb	r3, r3
 8008156:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8008158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815a:	0c1b      	lsrs	r3, r3, #16
 800815c:	b2db      	uxtb	r3, r3
 800815e:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8008160:	78fb      	ldrb	r3, [r7, #3]
 8008162:	f003 0302 	and.w	r3, r3, #2
 8008166:	2b00      	cmp	r3, #0
 8008168:	f000 8189 	beq.w	800847e <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800816c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008170:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008174:	2b00      	cmp	r3, #0
 8008176:	f040 8182 	bne.w	800847e <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800817a:	2202      	movs	r2, #2
 800817c:	2194      	movs	r1, #148	; 0x94
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7fb fb0a 	bl	8003798 <VL53L0X_WrByte>
 8008184:	4603      	mov	r3, r0
 8008186:	461a      	mov	r2, r3
 8008188:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800818c:	4313      	orrs	r3, r2
 800818e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7ff fe5b 	bl	8007e4e <VL53L0X_device_read_strobe>
 8008198:	4603      	mov	r3, r0
 800819a:	461a      	mov	r2, r3
 800819c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081a0:	4313      	orrs	r3, r2
 80081a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80081a6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80081aa:	461a      	mov	r2, r3
 80081ac:	2190      	movs	r1, #144	; 0x90
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7fb fba6 	bl	8003900 <VL53L0X_RdByte>
 80081b4:	4603      	mov	r3, r0
 80081b6:	461a      	mov	r2, r3
 80081b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081bc:	4313      	orrs	r3, r2
 80081be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80081c2:	227b      	movs	r2, #123	; 0x7b
 80081c4:	2194      	movs	r1, #148	; 0x94
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f7fb fae6 	bl	8003798 <VL53L0X_WrByte>
 80081cc:	4603      	mov	r3, r0
 80081ce:	461a      	mov	r2, r3
 80081d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081d4:	4313      	orrs	r3, r2
 80081d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7ff fe37 	bl	8007e4e <VL53L0X_device_read_strobe>
 80081e0:	4603      	mov	r3, r0
 80081e2:	461a      	mov	r2, r3
 80081e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081e8:	4313      	orrs	r3, r2
 80081ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 80081ee:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80081f2:	461a      	mov	r2, r3
 80081f4:	2190      	movs	r1, #144	; 0x90
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7fb fb82 	bl	8003900 <VL53L0X_RdByte>
 80081fc:	4603      	mov	r3, r0
 80081fe:	461a      	mov	r2, r3
 8008200:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008204:	4313      	orrs	r3, r2
 8008206:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800820a:	2277      	movs	r2, #119	; 0x77
 800820c:	2194      	movs	r1, #148	; 0x94
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f7fb fac2 	bl	8003798 <VL53L0X_WrByte>
 8008214:	4603      	mov	r3, r0
 8008216:	461a      	mov	r2, r3
 8008218:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800821c:	4313      	orrs	r3, r2
 800821e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7ff fe13 	bl	8007e4e <VL53L0X_device_read_strobe>
 8008228:	4603      	mov	r3, r0
 800822a:	461a      	mov	r2, r3
 800822c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008230:	4313      	orrs	r3, r2
 8008232:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008236:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800823a:	461a      	mov	r2, r3
 800823c:	2190      	movs	r1, #144	; 0x90
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f7fb fbc0 	bl	80039c4 <VL53L0X_RdDWord>
 8008244:	4603      	mov	r3, r0
 8008246:	461a      	mov	r2, r3
 8008248:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800824c:	4313      	orrs	r3, r2
 800824e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8008252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008254:	0e5b      	lsrs	r3, r3, #25
 8008256:	b2db      	uxtb	r3, r3
 8008258:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800825c:	b2db      	uxtb	r3, r3
 800825e:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8008260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008262:	0c9b      	lsrs	r3, r3, #18
 8008264:	b2db      	uxtb	r3, r3
 8008266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800826a:	b2db      	uxtb	r3, r3
 800826c:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008270:	0adb      	lsrs	r3, r3, #11
 8008272:	b2db      	uxtb	r3, r3
 8008274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008278:	b2db      	uxtb	r3, r3
 800827a:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800827c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827e:	091b      	lsrs	r3, r3, #4
 8008280:	b2db      	uxtb	r3, r3
 8008282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008286:	b2db      	uxtb	r3, r3
 8008288:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828c:	b2db      	uxtb	r3, r3
 800828e:	00db      	lsls	r3, r3, #3
 8008290:	b2db      	uxtb	r3, r3
 8008292:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8008296:	b2db      	uxtb	r3, r3
 8008298:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800829c:	2278      	movs	r2, #120	; 0x78
 800829e:	2194      	movs	r1, #148	; 0x94
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7fb fa79 	bl	8003798 <VL53L0X_WrByte>
 80082a6:	4603      	mov	r3, r0
 80082a8:	461a      	mov	r2, r3
 80082aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082ae:	4313      	orrs	r3, r2
 80082b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f7ff fdca 	bl	8007e4e <VL53L0X_device_read_strobe>
 80082ba:	4603      	mov	r3, r0
 80082bc:	461a      	mov	r2, r3
 80082be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082c2:	4313      	orrs	r3, r2
 80082c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80082c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80082cc:	461a      	mov	r2, r3
 80082ce:	2190      	movs	r1, #144	; 0x90
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f7fb fb77 	bl	80039c4 <VL53L0X_RdDWord>
 80082d6:	4603      	mov	r3, r0
 80082d8:	461a      	mov	r2, r3
 80082da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80082de:	4313      	orrs	r3, r2
 80082e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 80082e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e6:	0f5b      	lsrs	r3, r3, #29
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082ee:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 80082f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80082f4:	4413      	add	r3, r2
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 80082fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fc:	0d9b      	lsrs	r3, r3, #22
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008304:	b2db      	uxtb	r3, r3
 8008306:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8008308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830a:	0bdb      	lsrs	r3, r3, #15
 800830c:	b2db      	uxtb	r3, r3
 800830e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008312:	b2db      	uxtb	r3, r3
 8008314:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8008316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008318:	0a1b      	lsrs	r3, r3, #8
 800831a:	b2db      	uxtb	r3, r3
 800831c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008320:	b2db      	uxtb	r3, r3
 8008322:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8008324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008326:	085b      	lsrs	r3, r3, #1
 8008328:	b2db      	uxtb	r3, r3
 800832a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800832e:	b2db      	uxtb	r3, r3
 8008330:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8008332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008334:	b2db      	uxtb	r3, r3
 8008336:	019b      	lsls	r3, r3, #6
 8008338:	b2db      	uxtb	r3, r3
 800833a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833e:	b2db      	uxtb	r3, r3
 8008340:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8008344:	2279      	movs	r2, #121	; 0x79
 8008346:	2194      	movs	r1, #148	; 0x94
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7fb fa25 	bl	8003798 <VL53L0X_WrByte>
 800834e:	4603      	mov	r3, r0
 8008350:	461a      	mov	r2, r3
 8008352:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008356:	4313      	orrs	r3, r2
 8008358:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f7ff fd76 	bl	8007e4e <VL53L0X_device_read_strobe>
 8008362:	4603      	mov	r3, r0
 8008364:	461a      	mov	r2, r3
 8008366:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800836a:	4313      	orrs	r3, r2
 800836c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008370:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008374:	461a      	mov	r2, r3
 8008376:	2190      	movs	r1, #144	; 0x90
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7fb fb23 	bl	80039c4 <VL53L0X_RdDWord>
 800837e:	4603      	mov	r3, r0
 8008380:	461a      	mov	r2, r3
 8008382:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008386:	4313      	orrs	r3, r2
 8008388:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800838c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838e:	0e9b      	lsrs	r3, r3, #26
 8008390:	b2db      	uxtb	r3, r3
 8008392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008396:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8008398:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800839c:	4413      	add	r3, r2
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80083a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a4:	0cdb      	lsrs	r3, r3, #19
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 80083b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b2:	0b1b      	lsrs	r3, r3, #12
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 80083be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c0:	095b      	lsrs	r3, r3, #5
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 80083cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 80083de:	227a      	movs	r2, #122	; 0x7a
 80083e0:	2194      	movs	r1, #148	; 0x94
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7fb f9d8 	bl	8003798 <VL53L0X_WrByte>
 80083e8:	4603      	mov	r3, r0
 80083ea:	461a      	mov	r2, r3
 80083ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083f0:	4313      	orrs	r3, r2
 80083f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7ff fd29 	bl	8007e4e <VL53L0X_device_read_strobe>
 80083fc:	4603      	mov	r3, r0
 80083fe:	461a      	mov	r2, r3
 8008400:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008404:	4313      	orrs	r3, r2
 8008406:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800840a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800840e:	461a      	mov	r2, r3
 8008410:	2190      	movs	r1, #144	; 0x90
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f7fb fad6 	bl	80039c4 <VL53L0X_RdDWord>
 8008418:	4603      	mov	r3, r0
 800841a:	461a      	mov	r2, r3
 800841c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008420:	4313      	orrs	r3, r2
 8008422:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8008426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008428:	0f9b      	lsrs	r3, r3, #30
 800842a:	b2db      	uxtb	r3, r3
 800842c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008430:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8008432:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008436:	4413      	add	r3, r2
 8008438:	b2db      	uxtb	r3, r3
 800843a:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800843c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843e:	0ddb      	lsrs	r3, r3, #23
 8008440:	b2db      	uxtb	r3, r3
 8008442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008446:	b2db      	uxtb	r3, r3
 8008448:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800844a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844c:	0c1b      	lsrs	r3, r3, #16
 800844e:	b2db      	uxtb	r3, r3
 8008450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008454:	b2db      	uxtb	r3, r3
 8008456:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8008458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845a:	0a5b      	lsrs	r3, r3, #9
 800845c:	b2db      	uxtb	r3, r3
 800845e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008462:	b2db      	uxtb	r3, r3
 8008464:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8008468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846a:	089b      	lsrs	r3, r3, #2
 800846c:	b2db      	uxtb	r3, r3
 800846e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008472:	b2db      	uxtb	r3, r3
 8008474:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8008478:	2300      	movs	r3, #0
 800847a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800847e:	78fb      	ldrb	r3, [r7, #3]
 8008480:	f003 0304 	and.w	r3, r3, #4
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 80f1 	beq.w	800866c <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800848a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800848e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8008492:	2b00      	cmp	r3, #0
 8008494:	f040 80ea 	bne.w	800866c <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008498:	227b      	movs	r2, #123	; 0x7b
 800849a:	2194      	movs	r1, #148	; 0x94
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f7fb f97b 	bl	8003798 <VL53L0X_WrByte>
 80084a2:	4603      	mov	r3, r0
 80084a4:	461a      	mov	r2, r3
 80084a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084aa:	4313      	orrs	r3, r2
 80084ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7ff fccc 	bl	8007e4e <VL53L0X_device_read_strobe>
 80084b6:	4603      	mov	r3, r0
 80084b8:	461a      	mov	r2, r3
 80084ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084be:	4313      	orrs	r3, r2
 80084c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80084c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084c8:	461a      	mov	r2, r3
 80084ca:	2190      	movs	r1, #144	; 0x90
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f7fb fa79 	bl	80039c4 <VL53L0X_RdDWord>
 80084d2:	4603      	mov	r3, r0
 80084d4:	461a      	mov	r2, r3
 80084d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084da:	4313      	orrs	r3, r2
 80084dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 80084e0:	227c      	movs	r2, #124	; 0x7c
 80084e2:	2194      	movs	r1, #148	; 0x94
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f7fb f957 	bl	8003798 <VL53L0X_WrByte>
 80084ea:	4603      	mov	r3, r0
 80084ec:	461a      	mov	r2, r3
 80084ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084f2:	4313      	orrs	r3, r2
 80084f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f7ff fca8 	bl	8007e4e <VL53L0X_device_read_strobe>
 80084fe:	4603      	mov	r3, r0
 8008500:	461a      	mov	r2, r3
 8008502:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008506:	4313      	orrs	r3, r2
 8008508:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800850c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008510:	461a      	mov	r2, r3
 8008512:	2190      	movs	r1, #144	; 0x90
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f7fb fa55 	bl	80039c4 <VL53L0X_RdDWord>
 800851a:	4603      	mov	r3, r0
 800851c:	461a      	mov	r2, r3
 800851e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008522:	4313      	orrs	r3, r2
 8008524:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8008528:	2273      	movs	r2, #115	; 0x73
 800852a:	2194      	movs	r1, #148	; 0x94
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7fb f933 	bl	8003798 <VL53L0X_WrByte>
 8008532:	4603      	mov	r3, r0
 8008534:	461a      	mov	r2, r3
 8008536:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800853a:	4313      	orrs	r3, r2
 800853c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f7ff fc84 	bl	8007e4e <VL53L0X_device_read_strobe>
 8008546:	4603      	mov	r3, r0
 8008548:	461a      	mov	r2, r3
 800854a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800854e:	4313      	orrs	r3, r2
 8008550:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008554:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008558:	461a      	mov	r2, r3
 800855a:	2190      	movs	r1, #144	; 0x90
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f7fb fa31 	bl	80039c4 <VL53L0X_RdDWord>
 8008562:	4603      	mov	r3, r0
 8008564:	461a      	mov	r2, r3
 8008566:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800856a:	4313      	orrs	r3, r2
 800856c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8008570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008572:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8008574:	b29b      	uxth	r3, r3
 8008576:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8008578:	2274      	movs	r2, #116	; 0x74
 800857a:	2194      	movs	r1, #148	; 0x94
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7fb f90b 	bl	8003798 <VL53L0X_WrByte>
 8008582:	4603      	mov	r3, r0
 8008584:	461a      	mov	r2, r3
 8008586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800858a:	4313      	orrs	r3, r2
 800858c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f7ff fc5c 	bl	8007e4e <VL53L0X_device_read_strobe>
 8008596:	4603      	mov	r3, r0
 8008598:	461a      	mov	r2, r3
 800859a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800859e:	4313      	orrs	r3, r2
 80085a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80085a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085a8:	461a      	mov	r2, r3
 80085aa:	2190      	movs	r1, #144	; 0x90
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f7fb fa09 	bl	80039c4 <VL53L0X_RdDWord>
 80085b2:	4603      	mov	r3, r0
 80085b4:	461a      	mov	r2, r3
 80085b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085ba:	4313      	orrs	r3, r2
 80085bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 80085c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c2:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80085c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085c6:	4313      	orrs	r3, r2
 80085c8:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80085ca:	2275      	movs	r2, #117	; 0x75
 80085cc:	2194      	movs	r1, #148	; 0x94
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7fb f8e2 	bl	8003798 <VL53L0X_WrByte>
 80085d4:	4603      	mov	r3, r0
 80085d6:	461a      	mov	r2, r3
 80085d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085dc:	4313      	orrs	r3, r2
 80085de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7ff fc33 	bl	8007e4e <VL53L0X_device_read_strobe>
 80085e8:	4603      	mov	r3, r0
 80085ea:	461a      	mov	r2, r3
 80085ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80085f0:	4313      	orrs	r3, r2
 80085f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80085f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085fa:	461a      	mov	r2, r3
 80085fc:	2190      	movs	r1, #144	; 0x90
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f7fb f9e0 	bl	80039c4 <VL53L0X_RdDWord>
 8008604:	4603      	mov	r3, r0
 8008606:	461a      	mov	r2, r3
 8008608:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800860c:	4313      	orrs	r3, r2
 800860e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8008612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008614:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8008616:	b29b      	uxth	r3, r3
 8008618:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800861a:	2276      	movs	r2, #118	; 0x76
 800861c:	2194      	movs	r1, #148	; 0x94
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7fb f8ba 	bl	8003798 <VL53L0X_WrByte>
 8008624:	4603      	mov	r3, r0
 8008626:	461a      	mov	r2, r3
 8008628:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800862c:	4313      	orrs	r3, r2
 800862e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f7ff fc0b 	bl	8007e4e <VL53L0X_device_read_strobe>
 8008638:	4603      	mov	r3, r0
 800863a:	461a      	mov	r2, r3
 800863c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008640:	4313      	orrs	r3, r2
 8008642:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008646:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800864a:	461a      	mov	r2, r3
 800864c:	2190      	movs	r1, #144	; 0x90
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f7fb f9b8 	bl	80039c4 <VL53L0X_RdDWord>
 8008654:	4603      	mov	r3, r0
 8008656:	461a      	mov	r2, r3
 8008658:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800865c:	4313      	orrs	r3, r2
 800865e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8008662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008664:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8008666:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008668:	4313      	orrs	r3, r2
 800866a:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800866c:	2200      	movs	r2, #0
 800866e:	2181      	movs	r1, #129	; 0x81
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7fb f891 	bl	8003798 <VL53L0X_WrByte>
 8008676:	4603      	mov	r3, r0
 8008678:	461a      	mov	r2, r3
 800867a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800867e:	4313      	orrs	r3, r2
 8008680:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008684:	2206      	movs	r2, #6
 8008686:	21ff      	movs	r1, #255	; 0xff
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f7fb f885 	bl	8003798 <VL53L0X_WrByte>
 800868e:	4603      	mov	r3, r0
 8008690:	461a      	mov	r2, r3
 8008692:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008696:	4313      	orrs	r3, r2
 8008698:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800869c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80086a0:	461a      	mov	r2, r3
 80086a2:	2183      	movs	r1, #131	; 0x83
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f7fb f92b 	bl	8003900 <VL53L0X_RdByte>
 80086aa:	4603      	mov	r3, r0
 80086ac:	461a      	mov	r2, r3
 80086ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086b2:	4313      	orrs	r3, r2
 80086b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 80086b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086bc:	f023 0304 	bic.w	r3, r3, #4
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	461a      	mov	r2, r3
 80086c4:	2183      	movs	r1, #131	; 0x83
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f7fb f866 	bl	8003798 <VL53L0X_WrByte>
 80086cc:	4603      	mov	r3, r0
 80086ce:	461a      	mov	r2, r3
 80086d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086d4:	4313      	orrs	r3, r2
 80086d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80086da:	2201      	movs	r2, #1
 80086dc:	21ff      	movs	r1, #255	; 0xff
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7fb f85a 	bl	8003798 <VL53L0X_WrByte>
 80086e4:	4603      	mov	r3, r0
 80086e6:	461a      	mov	r2, r3
 80086e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80086ec:	4313      	orrs	r3, r2
 80086ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80086f2:	2201      	movs	r2, #1
 80086f4:	2100      	movs	r1, #0
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7fb f84e 	bl	8003798 <VL53L0X_WrByte>
 80086fc:	4603      	mov	r3, r0
 80086fe:	461a      	mov	r2, r3
 8008700:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008704:	4313      	orrs	r3, r2
 8008706:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800870a:	2200      	movs	r2, #0
 800870c:	21ff      	movs	r1, #255	; 0xff
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f7fb f842 	bl	8003798 <VL53L0X_WrByte>
 8008714:	4603      	mov	r3, r0
 8008716:	461a      	mov	r2, r3
 8008718:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800871c:	4313      	orrs	r3, r2
 800871e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008722:	2200      	movs	r2, #0
 8008724:	2180      	movs	r1, #128	; 0x80
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f7fb f836 	bl	8003798 <VL53L0X_WrByte>
 800872c:	4603      	mov	r3, r0
 800872e:	461a      	mov	r2, r3
 8008730:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008734:	4313      	orrs	r3, r2
 8008736:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800873a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800873e:	2b00      	cmp	r3, #0
 8008740:	f040 808f 	bne.w	8008862 <VL53L0X_get_info_from_device+0x98e>
 8008744:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008748:	2b07      	cmp	r3, #7
 800874a:	f000 808a 	beq.w	8008862 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800874e:	78fb      	ldrb	r3, [r7, #3]
 8008750:	f003 0301 	and.w	r3, r3, #1
 8008754:	2b00      	cmp	r3, #0
 8008756:	d024      	beq.n	80087a2 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008758:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800875c:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008760:	2b00      	cmp	r3, #0
 8008762:	d11e      	bne.n	80087a2 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800876a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8008774:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008778:	2300      	movs	r3, #0
 800877a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800877c:	e00e      	b.n	800879c <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800877e:	f107 0208 	add.w	r2, r7, #8
 8008782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008784:	4413      	add	r3, r2
 8008786:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800878c:	4413      	add	r3, r2
 800878e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008792:	460a      	mov	r2, r1
 8008794:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8008796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008798:	3301      	adds	r3, #1
 800879a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800879c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800879e:	2b05      	cmp	r3, #5
 80087a0:	dded      	ble.n	800877e <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 80087a2:	78fb      	ldrb	r3, [r7, #3]
 80087a4:	f003 0302 	and.w	r3, r3, #2
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d018      	beq.n	80087de <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80087ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80087b0:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d112      	bne.n	80087de <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80087b8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80087c2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	33f3      	adds	r3, #243	; 0xf3
 80087d0:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80087d2:	f107 0310 	add.w	r3, r7, #16
 80087d6:	4619      	mov	r1, r3
 80087d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087da:	f011 fd07 	bl	801a1ec <strcpy>

		}

		if (((option & 4) == 4) &&
 80087de:	78fb      	ldrb	r3, [r7, #3]
 80087e0:	f003 0304 	and.w	r3, r3, #4
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d030      	beq.n	800884a <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80087e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80087ec:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d12a      	bne.n	800884a <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80087f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80087fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8008804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008806:	025b      	lsls	r3, r3, #9
 8008808:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800880e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8008812:	2300      	movs	r3, #0
 8008814:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8008818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800881a:	2b00      	cmp	r3, #0
 800881c:	d011      	beq.n	8008842 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800881e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8008826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008828:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800882c:	fb02 f303 	mul.w	r3, r2, r3
 8008830:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8008832:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8008836:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800883a:	425b      	negs	r3, r3
 800883c:	b29b      	uxth	r3, r3
 800883e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8008842:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800884a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800884e:	78fb      	ldrb	r3, [r7, #3]
 8008850:	4313      	orrs	r3, r2
 8008852:	b2db      	uxtb	r3, r3
 8008854:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8008858:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008862:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8008866:	4618      	mov	r0, r3
 8008868:	3760      	adds	r7, #96	; 0x60
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800886e:	b480      	push	{r7}
 8008870:	b087      	sub	sp, #28
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	460b      	mov	r3, r1
 8008878:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800887a:	f240 6277 	movw	r2, #1655	; 0x677
 800887e:	f04f 0300 	mov.w	r3, #0
 8008882:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8008886:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800888a:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800888c:	78fb      	ldrb	r3, [r7, #3]
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	fb02 f303 	mul.w	r3, r2, r3
 800889a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800889c:	68bb      	ldr	r3, [r7, #8]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	371c      	adds	r7, #28
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 80088aa:	b480      	push	{r7}
 80088ac:	b087      	sub	sp, #28
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 80088b2:	2300      	movs	r3, #0
 80088b4:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 80088b6:	2300      	movs	r3, #0
 80088b8:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 80088ba:	2300      	movs	r3, #0
 80088bc:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d017      	beq.n	80088f4 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	3b01      	subs	r3, #1
 80088c8:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80088ca:	e005      	b.n	80088d8 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	085b      	lsrs	r3, r3, #1
 80088d0:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80088d2:	89fb      	ldrh	r3, [r7, #14]
 80088d4:	3301      	adds	r3, #1
 80088d6:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1f4      	bne.n	80088cc <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80088e2:	89fb      	ldrh	r3, [r7, #14]
 80088e4:	021b      	lsls	r3, r3, #8
 80088e6:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80088f0:	4413      	add	r3, r2
 80088f2:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80088f4:	8afb      	ldrh	r3, [r7, #22]

}
 80088f6:	4618      	mov	r0, r3
 80088f8:	371c      	adds	r7, #28
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8008902:	b480      	push	{r7}
 8008904:	b085      	sub	sp, #20
 8008906:	af00      	add	r7, sp, #0
 8008908:	4603      	mov	r3, r0
 800890a:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800890c:	2300      	movs	r3, #0
 800890e:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8008910:	88fb      	ldrh	r3, [r7, #6]
 8008912:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8008914:	88fa      	ldrh	r2, [r7, #6]
 8008916:	0a12      	lsrs	r2, r2, #8
 8008918:	b292      	uxth	r2, r2
 800891a:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800891c:	3301      	adds	r3, #1
 800891e:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8008920:	68fb      	ldr	r3, [r7, #12]
}
 8008922:	4618      	mov	r0, r3
 8008924:	3714      	adds	r7, #20
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
	...

08008930 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b088      	sub	sp, #32
 8008934:	af00      	add	r7, sp, #0
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	4613      	mov	r3, r2
 800893c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800893e:	2300      	movs	r3, #0
 8008940:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008942:	79fb      	ldrb	r3, [r7, #7]
 8008944:	4619      	mov	r1, r3
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f7ff ff91 	bl	800886e <VL53L0X_calc_macro_period_ps>
 800894c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008954:	4a0a      	ldr	r2, [pc, #40]	; (8008980 <VL53L0X_calc_timeout_mclks+0x50>)
 8008956:	fba2 2303 	umull	r2, r3, r2, r3
 800895a:	099b      	lsrs	r3, r3, #6
 800895c:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008964:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	085b      	lsrs	r3, r3, #1
 800896c:	441a      	add	r2, r3
	timeout_period_mclks =
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	fbb2 f3f3 	udiv	r3, r2, r3
 8008974:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8008976:	69fb      	ldr	r3, [r7, #28]
}
 8008978:	4618      	mov	r0, r3
 800897a:	3720      	adds	r7, #32
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	10624dd3 	.word	0x10624dd3

08008984 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	807b      	strh	r3, [r7, #2]
 8008990:	4613      	mov	r3, r2
 8008992:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8008994:	2300      	movs	r3, #0
 8008996:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8008998:	787b      	ldrb	r3, [r7, #1]
 800899a:	4619      	mov	r1, r3
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7ff ff66 	bl	800886e <VL53L0X_calc_macro_period_ps>
 80089a2:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80089aa:	4a0a      	ldr	r2, [pc, #40]	; (80089d4 <VL53L0X_calc_timeout_us+0x50>)
 80089ac:	fba2 2303 	umull	r2, r3, r2, r3
 80089b0:	099b      	lsrs	r3, r3, #6
 80089b2:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 80089b4:	887b      	ldrh	r3, [r7, #2]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	fb02 f303 	mul.w	r3, r2, r3
 80089bc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 80089c0:	4a04      	ldr	r2, [pc, #16]	; (80089d4 <VL53L0X_calc_timeout_us+0x50>)
 80089c2:	fba2 2303 	umull	r2, r3, r2, r3
 80089c6:	099b      	lsrs	r3, r3, #6
 80089c8:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 80089ca:	697b      	ldr	r3, [r7, #20]
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3718      	adds	r7, #24
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	10624dd3 	.word	0x10624dd3

080089d8 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b08c      	sub	sp, #48	; 0x30
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	460b      	mov	r3, r1
 80089e2:	607a      	str	r2, [r7, #4]
 80089e4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089e6:	2300      	movs	r3, #0
 80089e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 80089ec:	2300      	movs	r3, #0
 80089ee:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 80089f2:	2300      	movs	r3, #0
 80089f4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 80089f6:	2300      	movs	r3, #0
 80089f8:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 80089fa:	2300      	movs	r3, #0
 80089fc:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80089fe:	7afb      	ldrb	r3, [r7, #11]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d005      	beq.n	8008a10 <get_sequence_step_timeout+0x38>
 8008a04:	7afb      	ldrb	r3, [r7, #11]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d002      	beq.n	8008a10 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008a0a:	7afb      	ldrb	r3, [r7, #11]
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d128      	bne.n	8008a62 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008a10:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008a14:	461a      	mov	r2, r3
 8008a16:	2100      	movs	r1, #0
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f7fd fa5b 	bl	8005ed4 <VL53L0X_GetVcselPulsePeriod>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8008a24:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d109      	bne.n	8008a40 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8008a2c:	f107 0320 	add.w	r3, r7, #32
 8008a30:	461a      	mov	r2, r3
 8008a32:	2146      	movs	r1, #70	; 0x46
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f7fa ff63 	bl	8003900 <VL53L0X_RdByte>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8008a40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7ff ff5b 	bl	8008902 <VL53L0X_decode_timeout>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008a50:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008a54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a56:	4619      	mov	r1, r3
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f7ff ff93 	bl	8008984 <VL53L0X_calc_timeout_us>
 8008a5e:	62b8      	str	r0, [r7, #40]	; 0x28
 8008a60:	e092      	b.n	8008b88 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8008a62:	7afb      	ldrb	r3, [r7, #11]
 8008a64:	2b03      	cmp	r3, #3
 8008a66:	d135      	bne.n	8008ad4 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008a68:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	2100      	movs	r1, #0
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f7fd fa2f 	bl	8005ed4 <VL53L0X_GetVcselPulsePeriod>
 8008a76:	4603      	mov	r3, r0
 8008a78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008a7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f040 8081 	bne.w	8008b88 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008a86:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f7fd fa20 	bl	8005ed4 <VL53L0X_GetVcselPulsePeriod>
 8008a94:	4603      	mov	r3, r0
 8008a96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8008a9a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d109      	bne.n	8008ab6 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8008aa2:	f107 031e 	add.w	r3, r7, #30
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	2151      	movs	r1, #81	; 0x51
 8008aaa:	68f8      	ldr	r0, [r7, #12]
 8008aac:	f7fa ff52 	bl	8003954 <VL53L0X_RdWord>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008ab6:	8bfb      	ldrh	r3, [r7, #30]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7ff ff22 	bl	8008902 <VL53L0X_decode_timeout>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008ac2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008ac6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ac8:	4619      	mov	r1, r3
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f7ff ff5a 	bl	8008984 <VL53L0X_calc_timeout_us>
 8008ad0:	62b8      	str	r0, [r7, #40]	; 0x28
 8008ad2:	e059      	b.n	8008b88 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008ad4:	7afb      	ldrb	r3, [r7, #11]
 8008ad6:	2b04      	cmp	r3, #4
 8008ad8:	d156      	bne.n	8008b88 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008ada:	f107 0314 	add.w	r3, r7, #20
 8008ade:	4619      	mov	r1, r3
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f7fd fb03 	bl	80060ec <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8008aea:	7dfb      	ldrb	r3, [r7, #23]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d01d      	beq.n	8008b2c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008af0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008af4:	461a      	mov	r2, r3
 8008af6:	2100      	movs	r1, #0
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f7fd f9eb 	bl	8005ed4 <VL53L0X_GetVcselPulsePeriod>
 8008afe:	4603      	mov	r3, r0
 8008b00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8008b04:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10f      	bne.n	8008b2c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8008b0c:	f107 031e 	add.w	r3, r7, #30
 8008b10:	461a      	mov	r2, r3
 8008b12:	2151      	movs	r1, #81	; 0x51
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f7fa ff1d 	bl	8003954 <VL53L0X_RdWord>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008b20:	8bfb      	ldrh	r3, [r7, #30]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7ff feed 	bl	8008902 <VL53L0X_decode_timeout>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008b2c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d109      	bne.n	8008b48 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008b34:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8008b38:	461a      	mov	r2, r3
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f7fd f9c9 	bl	8005ed4 <VL53L0X_GetVcselPulsePeriod>
 8008b42:	4603      	mov	r3, r0
 8008b44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8008b48:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10f      	bne.n	8008b70 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8008b50:	f107 031c 	add.w	r3, r7, #28
 8008b54:	461a      	mov	r2, r3
 8008b56:	2171      	movs	r1, #113	; 0x71
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f7fa fefb 	bl	8003954 <VL53L0X_RdWord>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8008b64:	8bbb      	ldrh	r3, [r7, #28]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7ff fecb 	bl	8008902 <VL53L0X_decode_timeout>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8008b70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008b72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8008b78:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008b7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b7e:	4619      	mov	r1, r3
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f7ff feff 	bl	8008984 <VL53L0X_calc_timeout_us>
 8008b86:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b8c:	601a      	str	r2, [r3, #0]

	return Status;
 8008b8e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3730      	adds	r7, #48	; 0x30
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b08a      	sub	sp, #40	; 0x28
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	60f8      	str	r0, [r7, #12]
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	607a      	str	r2, [r7, #4]
 8008ba6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8008bae:	7afb      	ldrb	r3, [r7, #11]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d005      	beq.n	8008bc0 <set_sequence_step_timeout+0x26>
 8008bb4:	7afb      	ldrb	r3, [r7, #11]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d002      	beq.n	8008bc0 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8008bba:	7afb      	ldrb	r3, [r7, #11]
 8008bbc:	2b02      	cmp	r3, #2
 8008bbe:	d138      	bne.n	8008c32 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008bc0:	f107 031b 	add.w	r3, r7, #27
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	2100      	movs	r1, #0
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f7fd f983 	bl	8005ed4 <VL53L0X_GetVcselPulsePeriod>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8008bd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d11a      	bne.n	8008c12 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8008bdc:	7efb      	ldrb	r3, [r7, #27]
 8008bde:	461a      	mov	r2, r3
 8008be0:	6879      	ldr	r1, [r7, #4]
 8008be2:	68f8      	ldr	r0, [r7, #12]
 8008be4:	f7ff fea4 	bl	8008930 <VL53L0X_calc_timeout_mclks>
 8008be8:	4603      	mov	r3, r0
 8008bea:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8008bec:	8bbb      	ldrh	r3, [r7, #28]
 8008bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bf2:	d903      	bls.n	8008bfc <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8008bf4:	23ff      	movs	r3, #255	; 0xff
 8008bf6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008bfa:	e004      	b.n	8008c06 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8008bfc:	8bbb      	ldrh	r3, [r7, #28]
 8008bfe:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8008c00:	3b01      	subs	r3, #1
 8008c02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008c06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008c12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f040 80ab 	bne.w	8008d72 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8008c1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008c20:	461a      	mov	r2, r3
 8008c22:	2146      	movs	r1, #70	; 0x46
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f7fa fdb7 	bl	8003798 <VL53L0X_WrByte>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8008c30:	e09f      	b.n	8008d72 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8008c32:	7afb      	ldrb	r3, [r7, #11]
 8008c34:	2b03      	cmp	r3, #3
 8008c36:	d135      	bne.n	8008ca4 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8008c38:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d11b      	bne.n	8008c78 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008c40:	f107 031b 	add.w	r3, r7, #27
 8008c44:	461a      	mov	r2, r3
 8008c46:	2100      	movs	r1, #0
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f7fd f943 	bl	8005ed4 <VL53L0X_GetVcselPulsePeriod>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008c54:	7efb      	ldrb	r3, [r7, #27]
 8008c56:	461a      	mov	r2, r3
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f7ff fe68 	bl	8008930 <VL53L0X_calc_timeout_mclks>
 8008c60:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8008c62:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8008c64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7ff fe1f 	bl	80088aa <VL53L0X_encode_timeout>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008c70:	8b3a      	ldrh	r2, [r7, #24]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008c78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d108      	bne.n	8008c92 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8008c80:	8b3b      	ldrh	r3, [r7, #24]
 8008c82:	461a      	mov	r2, r3
 8008c84:	2151      	movs	r1, #81	; 0x51
 8008c86:	68f8      	ldr	r0, [r7, #12]
 8008c88:	f7fa fdaa 	bl	80037e0 <VL53L0X_WrWord>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8008c92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d16b      	bne.n	8008d72 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8008ca2:	e066      	b.n	8008d72 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8008ca4:	7afb      	ldrb	r3, [r7, #11]
 8008ca6:	2b04      	cmp	r3, #4
 8008ca8:	d160      	bne.n	8008d6c <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8008caa:	f107 0310 	add.w	r3, r7, #16
 8008cae:	4619      	mov	r1, r3
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f7fd fa1b 	bl	80060ec <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8008cba:	7cfb      	ldrb	r3, [r7, #19]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d01d      	beq.n	8008cfc <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008cc0:	f107 031b 	add.w	r3, r7, #27
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	68f8      	ldr	r0, [r7, #12]
 8008cca:	f7fd f903 	bl	8005ed4 <VL53L0X_GetVcselPulsePeriod>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8008cd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10f      	bne.n	8008cfc <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8008cdc:	f107 0318 	add.w	r3, r7, #24
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	2151      	movs	r1, #81	; 0x51
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	f7fa fe35 	bl	8003954 <VL53L0X_RdWord>
 8008cea:	4603      	mov	r3, r0
 8008cec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8008cf0:	8b3b      	ldrh	r3, [r7, #24]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7ff fe05 	bl	8008902 <VL53L0X_decode_timeout>
 8008cf8:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8008cfa:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8008cfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d109      	bne.n	8008d18 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8008d04:	f107 031b 	add.w	r3, r7, #27
 8008d08:	461a      	mov	r2, r3
 8008d0a:	2101      	movs	r1, #1
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f7fd f8e1 	bl	8005ed4 <VL53L0X_GetVcselPulsePeriod>
 8008d12:	4603      	mov	r3, r0
 8008d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8008d18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d128      	bne.n	8008d72 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8008d20:	7efb      	ldrb	r3, [r7, #27]
 8008d22:	461a      	mov	r2, r3
 8008d24:	6879      	ldr	r1, [r7, #4]
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f7ff fe02 	bl	8008930 <VL53L0X_calc_timeout_mclks>
 8008d2c:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8008d2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008d30:	6a3a      	ldr	r2, [r7, #32]
 8008d32:	4413      	add	r3, r2
 8008d34:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8008d36:	6a38      	ldr	r0, [r7, #32]
 8008d38:	f7ff fdb7 	bl	80088aa <VL53L0X_encode_timeout>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8008d40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d108      	bne.n	8008d5a <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8008d48:	8bfb      	ldrh	r3, [r7, #30]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	2171      	movs	r1, #113	; 0x71
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f7fa fd46 	bl	80037e0 <VL53L0X_WrWord>
 8008d54:	4603      	mov	r3, r0
 8008d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8008d5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d107      	bne.n	8008d72 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8008d6a:	e002      	b.n	8008d72 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008d6c:	23fc      	movs	r3, #252	; 0xfc
 8008d6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8008d72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3728      	adds	r7, #40	; 0x28
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b086      	sub	sp, #24
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	60f8      	str	r0, [r7, #12]
 8008d86:	460b      	mov	r3, r1
 8008d88:	607a      	str	r2, [r7, #4]
 8008d8a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8008d90:	7afb      	ldrb	r3, [r7, #11]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d002      	beq.n	8008d9c <VL53L0X_get_vcsel_pulse_period+0x1e>
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d00a      	beq.n	8008db0 <VL53L0X_get_vcsel_pulse_period+0x32>
 8008d9a:	e013      	b.n	8008dc4 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008d9c:	f107 0316 	add.w	r3, r7, #22
 8008da0:	461a      	mov	r2, r3
 8008da2:	2150      	movs	r1, #80	; 0x50
 8008da4:	68f8      	ldr	r0, [r7, #12]
 8008da6:	f7fa fdab 	bl	8003900 <VL53L0X_RdByte>
 8008daa:	4603      	mov	r3, r0
 8008dac:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008dae:	e00b      	b.n	8008dc8 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8008db0:	f107 0316 	add.w	r3, r7, #22
 8008db4:	461a      	mov	r2, r3
 8008db6:	2170      	movs	r1, #112	; 0x70
 8008db8:	68f8      	ldr	r0, [r7, #12]
 8008dba:	f7fa fda1 	bl	8003900 <VL53L0X_RdByte>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8008dc2:	e001      	b.n	8008dc8 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008dc4:	23fc      	movs	r3, #252	; 0xfc
 8008dc6:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8008dc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d107      	bne.n	8008de0 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8008dd0:	7dbb      	ldrb	r3, [r7, #22]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fe fff4 	bl	8007dc0 <VL53L0X_decode_vcsel_period>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	701a      	strb	r2, [r3, #0]

	return Status;
 8008de0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3718      	adds	r7, #24
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b092      	sub	sp, #72	; 0x48
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008df6:	2300      	movs	r3, #0
 8008df8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008dfc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008e00:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008e02:	f240 7376 	movw	r3, #1910	; 0x776
 8008e06:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8008e08:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008e0c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008e0e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008e12:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8008e14:	f240 234e 	movw	r3, #590	; 0x24e
 8008e18:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8008e1a:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008e20:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008e24:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8008e26:	f240 2326 	movw	r3, #550	; 0x226
 8008e2a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8008e30:	f644 6320 	movw	r3, #20000	; 0x4e20
 8008e34:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8008e36:	2300      	movs	r3, #0
 8008e38:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8008e3a:	683a      	ldr	r2, [r7, #0]
 8008e3c:	6a3b      	ldr	r3, [r7, #32]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d205      	bcs.n	8008e4e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008e42:	23fc      	movs	r3, #252	; 0xfc
 8008e44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8008e48:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008e4c:	e0aa      	b.n	8008fa4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8008e4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e52:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8008e54:	683a      	ldr	r2, [r7, #0]
 8008e56:	1ad3      	subs	r3, r2, r3
 8008e58:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008e5a:	f107 0314 	add.w	r3, r7, #20
 8008e5e:	4619      	mov	r1, r3
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f7fd f943 	bl	80060ec <VL53L0X_GetSequenceStepEnables>
 8008e66:	4603      	mov	r3, r0
 8008e68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8008e6c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d15b      	bne.n	8008f2c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8008e74:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d105      	bne.n	8008e86 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8008e7a:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d102      	bne.n	8008e86 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8008e80:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d052      	beq.n	8008f2c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8008e86:	f107 0310 	add.w	r3, r7, #16
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	2102      	movs	r1, #2
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f7ff fda2 	bl	80089d8 <get_sequence_step_timeout>
 8008e94:	4603      	mov	r3, r0
 8008e96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8008e9a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d002      	beq.n	8008ea8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8008ea2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008ea6:	e07d      	b.n	8008fa4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8008ea8:	7d3b      	ldrb	r3, [r7, #20]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00f      	beq.n	8008ece <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8008eae:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8008eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eb2:	4413      	add	r3, r2
 8008eb4:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8008eb6:	69fa      	ldr	r2, [r7, #28]
 8008eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d204      	bcs.n	8008ec8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8008ebe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	643b      	str	r3, [r7, #64]	; 0x40
 8008ec6:	e002      	b.n	8008ece <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008ec8:	23fc      	movs	r3, #252	; 0xfc
 8008eca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8008ece:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d002      	beq.n	8008edc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8008ed6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008eda:	e063      	b.n	8008fa4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8008edc:	7dbb      	ldrb	r3, [r7, #22]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d011      	beq.n	8008f06 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8008ee2:	693a      	ldr	r2, [r7, #16]
 8008ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ee6:	4413      	add	r3, r2
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008eec:	69fa      	ldr	r2, [r7, #28]
 8008eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d204      	bcs.n	8008efe <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8008ef4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	643b      	str	r3, [r7, #64]	; 0x40
 8008efc:	e016      	b.n	8008f2c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008efe:	23fc      	movs	r3, #252	; 0xfc
 8008f00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008f04:	e012      	b.n	8008f2c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8008f06:	7d7b      	ldrb	r3, [r7, #21]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00f      	beq.n	8008f2c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f10:	4413      	add	r3, r2
 8008f12:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008f14:	69fa      	ldr	r2, [r7, #28]
 8008f16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d204      	bcs.n	8008f26 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8008f1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	643b      	str	r3, [r7, #64]	; 0x40
 8008f24:	e002      	b.n	8008f2c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008f26:	23fc      	movs	r3, #252	; 0xfc
 8008f28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8008f2c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d002      	beq.n	8008f3a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8008f34:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008f38:	e034      	b.n	8008fa4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8008f3a:	7dfb      	ldrb	r3, [r7, #23]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d019      	beq.n	8008f74 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8008f40:	f107 030c 	add.w	r3, r7, #12
 8008f44:	461a      	mov	r2, r3
 8008f46:	2103      	movs	r1, #3
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f7ff fd45 	bl	80089d8 <get_sequence_step_timeout>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f58:	4413      	add	r3, r2
 8008f5a:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8008f5c:	69fa      	ldr	r2, [r7, #28]
 8008f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d204      	bcs.n	8008f6e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8008f64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	643b      	str	r3, [r7, #64]	; 0x40
 8008f6c:	e002      	b.n	8008f74 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008f6e:	23fc      	movs	r3, #252	; 0xfc
 8008f70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8008f74:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d111      	bne.n	8008fa0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8008f7c:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00e      	beq.n	8008fa0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8008f82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8008f8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f8c:	2104      	movs	r1, #4
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f7ff fe03 	bl	8008b9a <set_sequence_step_timeout>
 8008f94:	4603      	mov	r3, r0
 8008f96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	683a      	ldr	r2, [r7, #0]
 8008f9e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8008fa0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3748      	adds	r7, #72	; 0x48
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b090      	sub	sp, #64	; 0x40
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8008fbc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008fc0:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8008fc2:	f240 7376 	movw	r3, #1910	; 0x776
 8008fc6:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8008fc8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8008fcc:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8008fce:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008fd2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8008fd4:	f240 234e 	movw	r3, #590	; 0x24e
 8008fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8008fda:	f240 23b2 	movw	r3, #690	; 0x2b2
 8008fde:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8008fe0:	f44f 7325 	mov.w	r3, #660	; 0x294
 8008fe4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8008fe6:	f240 2326 	movw	r3, #550	; 0x226
 8008fea:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8008fec:	2300      	movs	r3, #0
 8008fee:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8008ff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ff4:	441a      	add	r2, r3
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8008ffa:	f107 0318 	add.w	r3, r7, #24
 8008ffe:	4619      	mov	r1, r3
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f7fd f873 	bl	80060ec <VL53L0X_GetSequenceStepEnables>
 8009006:	4603      	mov	r3, r0
 8009008:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800900c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009010:	2b00      	cmp	r3, #0
 8009012:	d002      	beq.n	800901a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8009014:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009018:	e075      	b.n	8009106 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800901a:	7e3b      	ldrb	r3, [r7, #24]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d105      	bne.n	800902c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8009020:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8009022:	2b00      	cmp	r3, #0
 8009024:	d102      	bne.n	800902c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8009026:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8009028:	2b00      	cmp	r3, #0
 800902a:	d030      	beq.n	800908e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800902c:	f107 0310 	add.w	r3, r7, #16
 8009030:	461a      	mov	r2, r3
 8009032:	2102      	movs	r1, #2
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7ff fccf 	bl	80089d8 <get_sequence_step_timeout>
 800903a:	4603      	mov	r3, r0
 800903c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8009040:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009044:	2b00      	cmp	r3, #0
 8009046:	d122      	bne.n	800908e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8009048:	7e3b      	ldrb	r3, [r7, #24]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d007      	beq.n	800905e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009052:	6939      	ldr	r1, [r7, #16]
 8009054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009056:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009058:	441a      	add	r2, r3
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800905e:	7ebb      	ldrb	r3, [r7, #26]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d009      	beq.n	8009078 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8009068:	6939      	ldr	r1, [r7, #16]
 800906a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906c:	440b      	add	r3, r1
 800906e:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009070:	441a      	add	r2, r3
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	601a      	str	r2, [r3, #0]
 8009076:	e00a      	b.n	800908e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8009078:	7e7b      	ldrb	r3, [r7, #25]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d007      	beq.n	800908e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8009082:	6939      	ldr	r1, [r7, #16]
 8009084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009086:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8009088:	441a      	add	r2, r3
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800908e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009092:	2b00      	cmp	r3, #0
 8009094:	d114      	bne.n	80090c0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8009096:	7efb      	ldrb	r3, [r7, #27]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d011      	beq.n	80090c0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800909c:	f107 030c 	add.w	r3, r7, #12
 80090a0:	461a      	mov	r2, r3
 80090a2:	2103      	movs	r1, #3
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f7ff fc97 	bl	80089d8 <get_sequence_step_timeout>
 80090aa:	4603      	mov	r3, r0
 80090ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 80090b4:	68f9      	ldr	r1, [r7, #12]
 80090b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b8:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80090ba:	441a      	add	r2, r3
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80090c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d114      	bne.n	80090f2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 80090c8:	7f3b      	ldrb	r3, [r7, #28]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d011      	beq.n	80090f2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 80090ce:	f107 0314 	add.w	r3, r7, #20
 80090d2:	461a      	mov	r2, r3
 80090d4:	2104      	movs	r1, #4
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7ff fc7e 	bl	80089d8 <get_sequence_step_timeout>
 80090dc:	4603      	mov	r3, r0
 80090de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 80090e6:	6979      	ldr	r1, [r7, #20]
 80090e8:	6a3b      	ldr	r3, [r7, #32]
 80090ea:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80090ec:	441a      	add	r2, r3
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80090f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d103      	bne.n	8009102 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009102:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009106:	4618      	mov	r0, r3
 8009108:	3740      	adds	r7, #64	; 0x40
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
	...

08009110 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b088      	sub	sp, #32
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800911a:	2300      	movs	r3, #0
 800911c:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8009122:	e0c6      	b.n	80092b2 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	683a      	ldr	r2, [r7, #0]
 8009128:	4413      	add	r3, r2
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	74fb      	strb	r3, [r7, #19]
		Index++;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	3301      	adds	r3, #1
 8009132:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8009134:	7cfb      	ldrb	r3, [r7, #19]
 8009136:	2bff      	cmp	r3, #255	; 0xff
 8009138:	f040 808d 	bne.w	8009256 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	4413      	add	r3, r2
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	747b      	strb	r3, [r7, #17]
			Index++;
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	3301      	adds	r3, #1
 800914a:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800914c:	7c7b      	ldrb	r3, [r7, #17]
 800914e:	2b03      	cmp	r3, #3
 8009150:	d87e      	bhi.n	8009250 <VL53L0X_load_tuning_settings+0x140>
 8009152:	a201      	add	r2, pc, #4	; (adr r2, 8009158 <VL53L0X_load_tuning_settings+0x48>)
 8009154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009158:	08009169 	.word	0x08009169
 800915c:	080091a3 	.word	0x080091a3
 8009160:	080091dd 	.word	0x080091dd
 8009164:	08009217 	.word	0x08009217
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	4413      	add	r3, r2
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	743b      	strb	r3, [r7, #16]
				Index++;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	3301      	adds	r3, #1
 8009176:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	4413      	add	r3, r2
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	3301      	adds	r3, #1
 8009186:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009188:	7c3b      	ldrb	r3, [r7, #16]
 800918a:	b29b      	uxth	r3, r3
 800918c:	021b      	lsls	r3, r3, #8
 800918e:	b29a      	uxth	r2, r3
 8009190:	7bfb      	ldrb	r3, [r7, #15]
 8009192:	b29b      	uxth	r3, r3
 8009194:	4413      	add	r3, r2
 8009196:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	89ba      	ldrh	r2, [r7, #12]
 800919c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 80091a0:	e087      	b.n	80092b2 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	4413      	add	r3, r2
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	743b      	strb	r3, [r7, #16]
				Index++;
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	3301      	adds	r3, #1
 80091b0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	683a      	ldr	r2, [r7, #0]
 80091b6:	4413      	add	r3, r2
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	73fb      	strb	r3, [r7, #15]
				Index++;
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	3301      	adds	r3, #1
 80091c0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80091c2:	7c3b      	ldrb	r3, [r7, #16]
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	021b      	lsls	r3, r3, #8
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	4413      	add	r3, r2
 80091d0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	89ba      	ldrh	r2, [r7, #12]
 80091d6:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 80091da:	e06a      	b.n	80092b2 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	4413      	add	r3, r2
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	743b      	strb	r3, [r7, #16]
				Index++;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	3301      	adds	r3, #1
 80091ea:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	683a      	ldr	r2, [r7, #0]
 80091f0:	4413      	add	r3, r2
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	73fb      	strb	r3, [r7, #15]
				Index++;
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	3301      	adds	r3, #1
 80091fa:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80091fc:	7c3b      	ldrb	r3, [r7, #16]
 80091fe:	b29b      	uxth	r3, r3
 8009200:	021b      	lsls	r3, r3, #8
 8009202:	b29a      	uxth	r2, r3
 8009204:	7bfb      	ldrb	r3, [r7, #15]
 8009206:	b29b      	uxth	r3, r3
 8009208:	4413      	add	r3, r2
 800920a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	89ba      	ldrh	r2, [r7, #12]
 8009210:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8009214:	e04d      	b.n	80092b2 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	683a      	ldr	r2, [r7, #0]
 800921a:	4413      	add	r3, r2
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	743b      	strb	r3, [r7, #16]
				Index++;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	3301      	adds	r3, #1
 8009224:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	683a      	ldr	r2, [r7, #0]
 800922a:	4413      	add	r3, r2
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	3301      	adds	r3, #1
 8009234:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8009236:	7c3b      	ldrb	r3, [r7, #16]
 8009238:	b29b      	uxth	r3, r3
 800923a:	021b      	lsls	r3, r3, #8
 800923c:	b29a      	uxth	r2, r3
 800923e:	7bfb      	ldrb	r3, [r7, #15]
 8009240:	b29b      	uxth	r3, r3
 8009242:	4413      	add	r3, r2
 8009244:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	89ba      	ldrh	r2, [r7, #12]
 800924a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800924e:	e030      	b.n	80092b2 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009250:	23fc      	movs	r3, #252	; 0xfc
 8009252:	77fb      	strb	r3, [r7, #31]
 8009254:	e02d      	b.n	80092b2 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8009256:	7cfb      	ldrb	r3, [r7, #19]
 8009258:	2b04      	cmp	r3, #4
 800925a:	d828      	bhi.n	80092ae <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	683a      	ldr	r2, [r7, #0]
 8009260:	4413      	add	r3, r2
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	74bb      	strb	r3, [r7, #18]
			Index++;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	3301      	adds	r3, #1
 800926a:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800926c:	2300      	movs	r3, #0
 800926e:	61bb      	str	r3, [r7, #24]
 8009270:	e00f      	b.n	8009292 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	4413      	add	r3, r2
 8009278:	7819      	ldrb	r1, [r3, #0]
 800927a:	f107 0208 	add.w	r2, r7, #8
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	4413      	add	r3, r2
 8009282:	460a      	mov	r2, r1
 8009284:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	3301      	adds	r3, #1
 800928a:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800928c:	69bb      	ldr	r3, [r7, #24]
 800928e:	3301      	adds	r3, #1
 8009290:	61bb      	str	r3, [r7, #24]
 8009292:	7cfb      	ldrb	r3, [r7, #19]
 8009294:	69ba      	ldr	r2, [r7, #24]
 8009296:	429a      	cmp	r2, r3
 8009298:	dbeb      	blt.n	8009272 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800929a:	7cfb      	ldrb	r3, [r7, #19]
 800929c:	f107 0208 	add.w	r2, r7, #8
 80092a0:	7cb9      	ldrb	r1, [r7, #18]
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f7fa fa1c 	bl	80036e0 <VL53L0X_WriteMulti>
 80092a8:	4603      	mov	r3, r0
 80092aa:	77fb      	strb	r3, [r7, #31]
 80092ac:	e001      	b.n	80092b2 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80092ae:	23fc      	movs	r3, #252	; 0xfc
 80092b0:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	4413      	add	r3, r2
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d004      	beq.n	80092c8 <VL53L0X_load_tuning_settings+0x1b8>
 80092be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	f43f af2e 	beq.w	8009124 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80092c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3720      	adds	r7, #32
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b088      	sub	sp, #32
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092e0:	2300      	movs	r3, #0
 80092e2:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 80092ea:	f107 0313 	add.w	r3, r7, #19
 80092ee:	4619      	mov	r1, r3
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f7fc ffbb 	bl	800626c <VL53L0X_GetXTalkCompensationEnable>
 80092f6:	4603      	mov	r3, r0
 80092f8:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 80092fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d111      	bne.n	8009326 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8009302:	7cfb      	ldrb	r3, [r7, #19]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d00e      	beq.n	8009326 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6a1b      	ldr	r3, [r3, #32]
 800930c:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	8a9b      	ldrh	r3, [r3, #20]
 8009312:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	fb02 f303 	mul.w	r3, r2, r3
 800931a:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	3380      	adds	r3, #128	; 0x80
 8009320:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8009326:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3720      	adds	r7, #32
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b086      	sub	sp, #24
 8009336:	af00      	add	r7, sp, #0
 8009338:	60f8      	str	r0, [r7, #12]
 800933a:	60b9      	str	r1, [r7, #8]
 800933c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800933e:	2300      	movs	r3, #0
 8009340:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800934a:	f107 0310 	add.w	r3, r7, #16
 800934e:	461a      	mov	r2, r3
 8009350:	68b9      	ldr	r1, [r7, #8]
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f7ff ffbe 	bl	80092d4 <VL53L0X_get_total_xtalk_rate>
 8009358:	4603      	mov	r3, r0
 800935a:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800935c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d105      	bne.n	8009370 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	441a      	add	r2, r3
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	601a      	str	r2, [r3, #0]

	return Status;
 8009370:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3718      	adds	r7, #24
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b09a      	sub	sp, #104	; 0x68
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
 8009388:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800938a:	2312      	movs	r3, #18
 800938c:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800938e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009392:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8009394:	2342      	movs	r3, #66	; 0x42
 8009396:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8009398:	2306      	movs	r3, #6
 800939a:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800939c:	2307      	movs	r3, #7
 800939e:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093a0:	2300      	movs	r3, #0
 80093a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 80093ac:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80093b4:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 80093b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093ba:	fb02 f303 	mul.w	r3, r2, r3
 80093be:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 80093c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c2:	3380      	adds	r3, #128	; 0x80
 80093c4:	0a1b      	lsrs	r3, r3, #8
 80093c6:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 80093c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80093cc:	fb02 f303 	mul.w	r3, r2, r3
 80093d0:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 80093d2:	2300      	movs	r3, #0
 80093d4:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d01a      	beq.n	8009412 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	029b      	lsls	r3, r3, #10
 80093e0:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 80093e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093e8:	4413      	add	r3, r2
 80093ea:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 80093ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f4:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 80093f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80093f8:	4613      	mov	r3, r2
 80093fa:	005b      	lsls	r3, r3, #1
 80093fc:	4413      	add	r3, r2
 80093fe:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8009400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009402:	fb03 f303 	mul.w	r3, r3, r3
 8009406:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8009408:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800940a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800940e:	0c1b      	lsrs	r3, r3, #16
 8009410:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009416:	fb02 f303 	mul.w	r3, r2, r3
 800941a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800941c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009422:	0c1b      	lsrs	r3, r3, #16
 8009424:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8009426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009428:	fb03 f303 	mul.w	r3, r3, r3
 800942c:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800942e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009430:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009434:	0c1b      	lsrs	r3, r3, #16
 8009436:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8009438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800943a:	085a      	lsrs	r2, r3, #1
 800943c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943e:	441a      	add	r2, r3
 8009440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009442:	fbb2 f3f3 	udiv	r3, r2, r3
 8009446:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8009448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800944c:	fb02 f303 	mul.w	r3, r2, r3
 8009450:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8009452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009458:	d302      	bcc.n	8009460 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800945a:	4b54      	ldr	r3, [pc, #336]	; (80095ac <VL53L0X_calc_dmax+0x230>)
 800945c:	663b      	str	r3, [r7, #96]	; 0x60
 800945e:	e015      	b.n	800948c <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8009460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009462:	085a      	lsrs	r2, r3, #1
 8009464:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009466:	441a      	add	r2, r3
 8009468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800946a:	fbb2 f3f3 	udiv	r3, r2, r3
 800946e:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8009470:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009472:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009474:	fb02 f303 	mul.w	r3, r2, r3
 8009478:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800947a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800947c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8009480:	0c1b      	lsrs	r3, r3, #16
 8009482:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8009484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009486:	fb03 f303 	mul.w	r3, r3, r3
 800948a:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800948c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800948e:	039b      	lsls	r3, r3, #14
 8009490:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009494:	4a46      	ldr	r2, [pc, #280]	; (80095b0 <VL53L0X_calc_dmax+0x234>)
 8009496:	fba2 2303 	umull	r2, r3, r2, r3
 800949a:	099b      	lsrs	r3, r3, #6
 800949c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a0:	fb03 f303 	mul.w	r3, r3, r3
 80094a4:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 80094a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094a8:	fb03 f303 	mul.w	r3, r3, r3
 80094ac:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 80094ae:	6a3b      	ldr	r3, [r7, #32]
 80094b0:	3308      	adds	r3, #8
 80094b2:	091b      	lsrs	r3, r3, #4
 80094b4:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 80094b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094b8:	6a3b      	ldr	r3, [r7, #32]
 80094ba:	1ad3      	subs	r3, r2, r3
 80094bc:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 80094be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094c0:	4613      	mov	r3, r2
 80094c2:	005b      	lsls	r3, r3, #1
 80094c4:	4413      	add	r3, r2
 80094c6:	011b      	lsls	r3, r3, #4
 80094c8:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80094d0:	0b9b      	lsrs	r3, r3, #14
 80094d2:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 80094d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80094d8:	4413      	add	r3, r2
 80094da:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 80094dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094de:	085b      	lsrs	r3, r3, #1
 80094e0:	69ba      	ldr	r2, [r7, #24]
 80094e2:	4413      	add	r3, r2
 80094e4:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 80094e6:	69ba      	ldr	r2, [r7, #24]
 80094e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80094ee:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	039b      	lsls	r3, r3, #14
 80094f4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	085b      	lsrs	r3, r3, #1
 80094fa:	69ba      	ldr	r2, [r7, #24]
 80094fc:	4413      	add	r3, r2
 80094fe:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8009500:	69ba      	ldr	r2, [r7, #24]
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	fbb2 f3f3 	udiv	r3, r2, r3
 8009508:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800950e:	fb02 f303 	mul.w	r3, r2, r3
 8009512:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800951a:	4a25      	ldr	r2, [pc, #148]	; (80095b0 <VL53L0X_calc_dmax+0x234>)
 800951c:	fba2 2303 	umull	r2, r3, r2, r3
 8009520:	099b      	lsrs	r3, r3, #6
 8009522:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	011b      	lsls	r3, r3, #4
 8009528:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800952a:	69bb      	ldr	r3, [r7, #24]
 800952c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009530:	4a1f      	ldr	r2, [pc, #124]	; (80095b0 <VL53L0X_calc_dmax+0x234>)
 8009532:	fba2 2303 	umull	r2, r3, r2, r3
 8009536:	099b      	lsrs	r3, r3, #6
 8009538:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800953a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800953c:	3380      	adds	r3, #128	; 0x80
 800953e:	0a1b      	lsrs	r3, r3, #8
 8009540:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d008      	beq.n	800955a <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	085a      	lsrs	r2, r3, #1
 800954c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800954e:	441a      	add	r2, r3
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	fbb2 f3f3 	udiv	r3, r2, r3
 8009556:	65bb      	str	r3, [r7, #88]	; 0x58
 8009558:	e001      	b.n	800955e <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800955a:	2300      	movs	r3, #0
 800955c:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800955e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8009560:	f7fe fc41 	bl	8007de6 <VL53L0X_isqrt>
 8009564:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d008      	beq.n	800957e <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	085a      	lsrs	r2, r3, #1
 8009570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009572:	441a      	add	r2, r3
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	fbb2 f3f3 	udiv	r3, r2, r3
 800957a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800957c:	e001      	b.n	8009582 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800957e:	2300      	movs	r3, #0
 8009580:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8009582:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8009584:	f7fe fc2f 	bl	8007de6 <VL53L0X_isqrt>
 8009588:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800958a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8009590:	693a      	ldr	r2, [r7, #16]
 8009592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009594:	429a      	cmp	r2, r3
 8009596:	d902      	bls.n	800959e <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 8009598:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800959a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800959c:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800959e:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3768      	adds	r7, #104	; 0x68
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	fff00000 	.word	0xfff00000
 80095b0:	10624dd3 	.word	0x10624dd3

080095b4 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b0b4      	sub	sp, #208	; 0xd0
 80095b8:	af04      	add	r7, sp, #16
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	607a      	str	r2, [r7, #4]
 80095c0:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 80095c2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80095c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 80095ca:	f44f 7316 	mov.w	r3, #600	; 0x258
 80095ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 80095d2:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 80095d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 80095da:	f241 235c 	movw	r3, #4700	; 0x125c
 80095de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 80095e2:	4b9e      	ldr	r3, [pc, #632]	; (800985c <VL53L0X_calc_sigma_estimate+0x2a8>)
 80095e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 80095e8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80095ec:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 80095ee:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 80095f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80095fa:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 80095fc:	4b98      	ldr	r3, [pc, #608]	; (8009860 <VL53L0X_calc_sigma_estimate+0x2ac>)
 80095fe:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8009600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009604:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8009606:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800960a:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800960c:	f240 6377 	movw	r3, #1655	; 0x677
 8009610:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009612:	2300      	movs	r3, #0
 8009614:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6a1b      	ldr	r3, [r3, #32]
 800961c:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	691b      	ldr	r3, [r3, #16]
 8009622:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009626:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800962a:	0c1b      	lsrs	r3, r3, #16
 800962c:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	68db      	ldr	r3, [r3, #12]
 8009632:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8009634:	f107 0310 	add.w	r3, r7, #16
 8009638:	461a      	mov	r2, r3
 800963a:	68b9      	ldr	r1, [r7, #8]
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f7ff fe78 	bl	8009332 <VL53L0X_get_total_signal_rate>
 8009642:	4603      	mov	r3, r0
 8009644:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8009648:	f107 0314 	add.w	r3, r7, #20
 800964c:	461a      	mov	r2, r3
 800964e:	68b9      	ldr	r1, [r7, #8]
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f7ff fe3f 	bl	80092d4 <VL53L0X_get_total_xtalk_rate>
 8009656:	4603      	mov	r3, r0
 8009658:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009662:	fb02 f303 	mul.w	r3, r2, r3
 8009666:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8009668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800966a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800966e:	0c1b      	lsrs	r3, r3, #16
 8009670:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009678:	fb02 f303 	mul.w	r3, r2, r3
 800967c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8009680:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8009684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009686:	429a      	cmp	r2, r3
 8009688:	d902      	bls.n	8009690 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800968a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800968c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8009690:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009694:	2b00      	cmp	r3, #0
 8009696:	d168      	bne.n	800976a <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800969e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 80096a8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80096ac:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80096b0:	461a      	mov	r2, r3
 80096b2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f7ff f93a 	bl	8008930 <VL53L0X_calc_timeout_mclks>
 80096bc:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80096c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 80096ce:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80096d2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80096d6:	461a      	mov	r2, r3
 80096d8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f7ff f927 	bl	8008930 <VL53L0X_calc_timeout_mclks>
 80096e2:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 80096e4:	2303      	movs	r3, #3
 80096e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 80096ea:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80096ee:	2b08      	cmp	r3, #8
 80096f0:	d102      	bne.n	80096f8 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 80096f2:	2302      	movs	r3, #2
 80096f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80096f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096fc:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 80096fe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009702:	fb02 f303 	mul.w	r3, r2, r3
 8009706:	02db      	lsls	r3, r3, #11
 8009708:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800970c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009710:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009714:	4a53      	ldr	r2, [pc, #332]	; (8009864 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009716:	fba2 2303 	umull	r2, r3, r2, r3
 800971a:	099b      	lsrs	r3, r3, #6
 800971c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8009720:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009724:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009726:	fb02 f303 	mul.w	r3, r2, r3
 800972a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800972e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009732:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009736:	4a4b      	ldr	r2, [pc, #300]	; (8009864 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009738:	fba2 2303 	umull	r2, r3, r2, r3
 800973c:	099b      	lsrs	r3, r3, #6
 800973e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	3380      	adds	r3, #128	; 0x80
 8009746:	0a1b      	lsrs	r3, r3, #8
 8009748:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800974a:	693a      	ldr	r2, [r7, #16]
 800974c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009750:	fb02 f303 	mul.w	r3, r2, r3
 8009754:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8009758:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800975c:	3380      	adds	r3, #128	; 0x80
 800975e:	0a1b      	lsrs	r3, r3, #8
 8009760:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	021b      	lsls	r3, r3, #8
 8009768:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800976a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800976e:	2b00      	cmp	r3, #0
 8009770:	d002      	beq.n	8009778 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8009772:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8009776:	e15e      	b.n	8009a36 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 8009778:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800977a:	2b00      	cmp	r3, #0
 800977c:	d10c      	bne.n	8009798 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009784:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800978c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	2200      	movs	r2, #0
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	e14c      	b.n	8009a32 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 8009798:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800979c:	2b00      	cmp	r3, #0
 800979e:	d102      	bne.n	80097a6 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 80097a0:	2301      	movs	r3, #1
 80097a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 80097a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80097aa:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 80097ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097ae:	041a      	lsls	r2, r3, #16
 80097b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 80097ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80097be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d902      	bls.n	80097ca <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 80097c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 80097ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80097ce:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80097d2:	fb02 f303 	mul.w	r3, r2, r3
 80097d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80097da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80097de:	4613      	mov	r3, r2
 80097e0:	005b      	lsls	r3, r3, #1
 80097e2:	4413      	add	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7fe fafd 	bl	8007de6 <VL53L0X_isqrt>
 80097ec:	4603      	mov	r3, r0
 80097ee:	005b      	lsls	r3, r3, #1
 80097f0:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	891b      	ldrh	r3, [r3, #8]
 80097f6:	461a      	mov	r2, r3
 80097f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097fa:	fb02 f303 	mul.w	r3, r2, r3
 80097fe:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009802:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8009804:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009808:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800980a:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800980c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8009810:	4a14      	ldr	r2, [pc, #80]	; (8009864 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009812:	fba2 2303 	umull	r2, r3, r2, r3
 8009816:	099b      	lsrs	r3, r3, #6
 8009818:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800981a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800981c:	041b      	lsls	r3, r3, #16
 800981e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009822:	4a10      	ldr	r2, [pc, #64]	; (8009864 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8009824:	fba2 2303 	umull	r2, r3, r2, r3
 8009828:	099b      	lsrs	r3, r3, #6
 800982a:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800982c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800982e:	021b      	lsls	r3, r3, #8
 8009830:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8009832:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009836:	fbb2 f3f3 	udiv	r3, r2, r3
 800983a:	2b00      	cmp	r3, #0
 800983c:	bfb8      	it	lt
 800983e:	425b      	neglt	r3, r3
 8009840:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8009842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009844:	021b      	lsls	r3, r3, #8
 8009846:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	7e1b      	ldrb	r3, [r3, #24]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00b      	beq.n	8009868 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8009850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009854:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009858:	e033      	b.n	80098c2 <VL53L0X_calc_sigma_estimate+0x30e>
 800985a:	bf00      	nop
 800985c:	028f87ae 	.word	0x028f87ae
 8009860:	0006999a 	.word	0x0006999a
 8009864:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8009868:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800986a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800986e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009872:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8009876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009878:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800987c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009880:	fb02 f303 	mul.w	r3, r2, r3
 8009884:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8009888:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800988c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800988e:	4413      	add	r3, r2
 8009890:	0c1b      	lsrs	r3, r3, #16
 8009892:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8009896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800989a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800989e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 80098a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098a6:	085b      	lsrs	r3, r3, #1
 80098a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 80098ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098b0:	fb03 f303 	mul.w	r3, r3, r3
 80098b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 80098b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098bc:	0b9b      	lsrs	r3, r3, #14
 80098be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 80098c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80098c8:	fb02 f303 	mul.w	r3, r2, r3
 80098cc:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 80098ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80098d4:	0c1b      	lsrs	r3, r3, #16
 80098d6:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 80098d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098da:	fb03 f303 	mul.w	r3, r3, r3
 80098de:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 80098e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80098e4:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 80098e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80098ec:	0c1b      	lsrs	r3, r3, #16
 80098ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 80098f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f2:	fb03 f303 	mul.w	r3, r3, r3
 80098f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 80098f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098fc:	4413      	add	r3, r2
 80098fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8009900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009902:	f7fe fa70 	bl	8007de6 <VL53L0X_isqrt>
 8009906:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8009908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990a:	041b      	lsls	r3, r3, #16
 800990c:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800990e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009910:	3332      	adds	r3, #50	; 0x32
 8009912:	4a4b      	ldr	r2, [pc, #300]	; (8009a40 <VL53L0X_calc_sigma_estimate+0x48c>)
 8009914:	fba2 2303 	umull	r2, r3, r2, r3
 8009918:	095a      	lsrs	r2, r3, #5
 800991a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800991c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009920:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8009924:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009928:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800992c:	fb02 f303 	mul.w	r3, r2, r3
 8009930:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8009934:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009938:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800993c:	3308      	adds	r3, #8
 800993e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8009942:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009946:	4a3f      	ldr	r2, [pc, #252]	; (8009a44 <VL53L0X_calc_sigma_estimate+0x490>)
 8009948:	fba2 2303 	umull	r2, r3, r2, r3
 800994c:	0b5b      	lsrs	r3, r3, #13
 800994e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8009952:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009956:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009958:	429a      	cmp	r2, r3
 800995a:	d902      	bls.n	8009962 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800995c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800995e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8009962:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009966:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800996a:	4413      	add	r3, r2
 800996c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8009970:	4a35      	ldr	r2, [pc, #212]	; (8009a48 <VL53L0X_calc_sigma_estimate+0x494>)
 8009972:	fba2 2303 	umull	r2, r3, r2, r3
 8009976:	099b      	lsrs	r3, r3, #6
 8009978:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800997e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009982:	441a      	add	r2, r3
 8009984:	6a3b      	ldr	r3, [r7, #32]
 8009986:	fbb2 f3f3 	udiv	r3, r2, r3
 800998a:	4618      	mov	r0, r3
 800998c:	f7fe fa2b 	bl	8007de6 <VL53L0X_isqrt>
 8009990:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	021b      	lsls	r3, r3, #8
 8009996:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800999e:	4a2a      	ldr	r2, [pc, #168]	; (8009a48 <VL53L0X_calc_sigma_estimate+0x494>)
 80099a0:	fba2 2303 	umull	r2, r3, r2, r3
 80099a4:	099b      	lsrs	r3, r3, #6
 80099a6:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 80099a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099ac:	fb03 f303 	mul.w	r3, r3, r3
 80099b0:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	fb03 f303 	mul.w	r3, r3, r3
 80099b8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 80099ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099be:	4413      	add	r3, r2
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7fe fa10 	bl	8007de6 <VL53L0X_isqrt>
 80099c6:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80099ce:	fb02 f303 	mul.w	r3, r2, r3
 80099d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 80099d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d009      	beq.n	80099f0 <VL53L0X_calc_sigma_estimate+0x43c>
 80099dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d005      	beq.n	80099f0 <VL53L0X_calc_sigma_estimate+0x43c>
 80099e4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80099e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d903      	bls.n	80099f8 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 80099f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80099f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80099fe:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8009a0a:	6939      	ldr	r1, [r7, #16]
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	9303      	str	r3, [sp, #12]
 8009a10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009a14:	9302      	str	r3, [sp, #8]
 8009a16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009a1a:	9301      	str	r3, [sp, #4]
 8009a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a1e:	9300      	str	r3, [sp, #0]
 8009a20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f7ff fca8 	bl	800937c <VL53L0X_calc_dmax>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009a32:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	37c0      	adds	r7, #192	; 0xc0
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	51eb851f 	.word	0x51eb851f
 8009a44:	d1b71759 	.word	0xd1b71759
 8009a48:	10624dd3 	.word	0x10624dd3

08009a4c <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b090      	sub	sp, #64	; 0x40
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	60f8      	str	r0, [r7, #12]
 8009a54:	607a      	str	r2, [r7, #4]
 8009a56:	461a      	mov	r2, r3
 8009a58:	460b      	mov	r3, r1
 8009a5a:	72fb      	strb	r3, [r7, #11]
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a60:	2300      	movs	r3, #0
 8009a62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8009a66:	2300      	movs	r3, #0
 8009a68:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8009a72:	2300      	movs	r3, #0
 8009a74:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8009a84:	2300      	movs	r3, #0
 8009a86:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8009a90:	2300      	movs	r3, #0
 8009a92:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8009a96:	2300      	movs	r3, #0
 8009a98:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8009a9e:	7afb      	ldrb	r3, [r7, #11]
 8009aa0:	10db      	asrs	r3, r3, #3
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	f003 030f 	and.w	r3, r3, #15
 8009aa8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8009aac:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d017      	beq.n	8009ae4 <VL53L0X_get_pal_range_status+0x98>
 8009ab4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009ab8:	2b05      	cmp	r3, #5
 8009aba:	d013      	beq.n	8009ae4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8009abc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009ac0:	2b07      	cmp	r3, #7
 8009ac2:	d00f      	beq.n	8009ae4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8009ac4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009ac8:	2b0c      	cmp	r3, #12
 8009aca:	d00b      	beq.n	8009ae4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8009acc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009ad0:	2b0d      	cmp	r3, #13
 8009ad2:	d007      	beq.n	8009ae4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8009ad4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009ad8:	2b0e      	cmp	r3, #14
 8009ada:	d003      	beq.n	8009ae4 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8009adc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009ae0:	2b0f      	cmp	r3, #15
 8009ae2:	d103      	bne.n	8009aec <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8009aea:	e002      	b.n	8009af2 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8009aec:	2300      	movs	r3, #0
 8009aee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009af2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d109      	bne.n	8009b0e <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009afa:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8009afe:	461a      	mov	r2, r3
 8009b00:	2100      	movs	r1, #0
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f7fc fc86 	bl	8006414 <VL53L0X_GetLimitCheckEnable>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8009b0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d02e      	beq.n	8009b74 <VL53L0X_get_pal_range_status+0x128>
 8009b16:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d12a      	bne.n	8009b74 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8009b1e:	f107 0310 	add.w	r3, r7, #16
 8009b22:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009b26:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f7ff fd43 	bl	80095b4 <VL53L0X_calc_sigma_estimate>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8009b34:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d103      	bne.n	8009b44 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	b29a      	uxth	r2, r3
 8009b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b42:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8009b44:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d113      	bne.n	8009b74 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8009b4c:	f107 0320 	add.w	r3, r7, #32
 8009b50:	461a      	mov	r2, r3
 8009b52:	2100      	movs	r1, #0
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	f7fc fce3 	bl	8006520 <VL53L0X_GetLimitCheckValue>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8009b60:	6a3b      	ldr	r3, [r7, #32]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d006      	beq.n	8009b74 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8009b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b68:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d902      	bls.n	8009b74 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009b74:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d109      	bne.n	8009b90 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009b7c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8009b80:	461a      	mov	r2, r3
 8009b82:	2102      	movs	r1, #2
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f7fc fc45 	bl	8006414 <VL53L0X_GetLimitCheckEnable>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8009b90:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d044      	beq.n	8009c22 <VL53L0X_get_pal_range_status+0x1d6>
 8009b98:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d140      	bne.n	8009c22 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8009ba0:	f107 031c 	add.w	r3, r7, #28
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	2102      	movs	r1, #2
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f7fc fcb9 	bl	8006520 <VL53L0X_GetLimitCheckValue>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8009bb4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d107      	bne.n	8009bcc <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	21ff      	movs	r1, #255	; 0xff
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f7f9 fde9 	bl	8003798 <VL53L0X_WrByte>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8009bcc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d109      	bne.n	8009be8 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8009bd4:	f107 0316 	add.w	r3, r7, #22
 8009bd8:	461a      	mov	r2, r3
 8009bda:	21b6      	movs	r1, #182	; 0xb6
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f7f9 feb9 	bl	8003954 <VL53L0X_RdWord>
 8009be2:	4603      	mov	r3, r0
 8009be4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8009be8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d107      	bne.n	8009c00 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	21ff      	movs	r1, #255	; 0xff
 8009bf4:	68f8      	ldr	r0, [r7, #12]
 8009bf6:	f7f9 fdcf 	bl	8003798 <VL53L0X_WrByte>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8009c00:	8afb      	ldrh	r3, [r7, #22]
 8009c02:	025b      	lsls	r3, r3, #9
 8009c04:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c0a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d006      	beq.n	8009c22 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8009c14:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8009c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d902      	bls.n	8009c22 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8009c22:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d109      	bne.n	8009c3e <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009c2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c2e:	461a      	mov	r2, r3
 8009c30:	2103      	movs	r1, #3
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f7fc fbee 	bl	8006414 <VL53L0X_GetLimitCheckEnable>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8009c3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d023      	beq.n	8009c8e <VL53L0X_get_pal_range_status+0x242>
 8009c46:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d11f      	bne.n	8009c8e <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8009c4e:	893b      	ldrh	r3, [r7, #8]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d102      	bne.n	8009c5a <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8009c54:	2300      	movs	r3, #0
 8009c56:	637b      	str	r3, [r7, #52]	; 0x34
 8009c58:	e005      	b.n	8009c66 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	021a      	lsls	r2, r3, #8
 8009c5e:	893b      	ldrh	r3, [r7, #8]
 8009c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c64:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8009c66:	f107 0318 	add.w	r3, r7, #24
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	2103      	movs	r1, #3
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f7fc fc56 	bl	8006520 <VL53L0X_GetLimitCheckValue>
 8009c74:	4603      	mov	r3, r0
 8009c76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d006      	beq.n	8009c8e <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8009c80:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8009c82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d202      	bcs.n	8009c8e <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009c8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d14a      	bne.n	8009d2c <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8009c96:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d103      	bne.n	8009ca6 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8009c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ca0:	22ff      	movs	r2, #255	; 0xff
 8009ca2:	701a      	strb	r2, [r3, #0]
 8009ca4:	e042      	b.n	8009d2c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8009ca6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d007      	beq.n	8009cbe <VL53L0X_get_pal_range_status+0x272>
 8009cae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d003      	beq.n	8009cbe <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8009cb6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009cba:	2b03      	cmp	r3, #3
 8009cbc:	d103      	bne.n	8009cc6 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8009cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cc0:	2205      	movs	r2, #5
 8009cc2:	701a      	strb	r2, [r3, #0]
 8009cc4:	e032      	b.n	8009d2c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8009cc6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009cca:	2b06      	cmp	r3, #6
 8009ccc:	d003      	beq.n	8009cd6 <VL53L0X_get_pal_range_status+0x28a>
 8009cce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009cd2:	2b09      	cmp	r3, #9
 8009cd4:	d103      	bne.n	8009cde <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8009cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cd8:	2204      	movs	r2, #4
 8009cda:	701a      	strb	r2, [r3, #0]
 8009cdc:	e026      	b.n	8009d2c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8009cde:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009ce2:	2b08      	cmp	r3, #8
 8009ce4:	d007      	beq.n	8009cf6 <VL53L0X_get_pal_range_status+0x2aa>
 8009ce6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009cea:	2b0a      	cmp	r3, #10
 8009cec:	d003      	beq.n	8009cf6 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8009cee:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d103      	bne.n	8009cfe <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8009cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cf8:	2203      	movs	r2, #3
 8009cfa:	701a      	strb	r2, [r3, #0]
 8009cfc:	e016      	b.n	8009d2c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8009cfe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009d02:	2b04      	cmp	r3, #4
 8009d04:	d003      	beq.n	8009d0e <VL53L0X_get_pal_range_status+0x2c2>
 8009d06:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d103      	bne.n	8009d16 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8009d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d10:	2202      	movs	r2, #2
 8009d12:	701a      	strb	r2, [r3, #0]
 8009d14:	e00a      	b.n	8009d2c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8009d16:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	d103      	bne.n	8009d26 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8009d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d20:	2201      	movs	r2, #1
 8009d22:	701a      	strb	r2, [r3, #0]
 8009d24:	e002      	b.n	8009d2c <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8009d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d28:	2200      	movs	r2, #0
 8009d2a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8009d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d102      	bne.n	8009d3a <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8009d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d36:	2200      	movs	r2, #0
 8009d38:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8009d3a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8009d3e:	461a      	mov	r2, r3
 8009d40:	2101      	movs	r1, #1
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f7fc fb66 	bl	8006414 <VL53L0X_GetLimitCheckEnable>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8009d4e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d14f      	bne.n	8009df6 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8009d56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d003      	beq.n	8009d66 <VL53L0X_get_pal_range_status+0x31a>
 8009d5e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d103      	bne.n	8009d6e <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8009d66:	2301      	movs	r3, #1
 8009d68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d6c:	e002      	b.n	8009d74 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009d7a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8009d7e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8009d82:	2b04      	cmp	r3, #4
 8009d84:	d003      	beq.n	8009d8e <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8009d86:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d103      	bne.n	8009d96 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d94:	e002      	b.n	8009d9c <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8009d96:	2300      	movs	r3, #0
 8009d98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009da2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8009da6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d003      	beq.n	8009db6 <VL53L0X_get_pal_range_status+0x36a>
 8009dae:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d103      	bne.n	8009dbe <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8009db6:	2301      	movs	r3, #1
 8009db8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dbc:	e002      	b.n	8009dc4 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009dca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8009dce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d003      	beq.n	8009dde <VL53L0X_get_pal_range_status+0x392>
 8009dd6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d103      	bne.n	8009de6 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8009dde:	2301      	movs	r3, #1
 8009de0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009de4:	e002      	b.n	8009dec <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8009de6:	2300      	movs	r3, #0
 8009de8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8009df2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009df6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3740      	adds	r7, #64	; 0x40
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 8009e02:	b480      	push	{r7}
 8009e04:	af00      	add	r7, sp, #0
  while (1);
 8009e06:	e7fe      	b.n	8009e06 <BSP_ErrorHandler+0x4>

08009e08 <BSP_LED_Init>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b088      	sub	sp, #32
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	4603      	mov	r3, r0
 8009e10:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;

  if (Led == LED2)
 8009e12:	79fb      	ldrb	r3, [r7, #7]
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d124      	bne.n	8009e62 <BSP_LED_Init+0x5a>
  {
    /* Enable the GPIO_LED clock */
    LED2_GPIO_CLK_ENABLE();
 8009e18:	4b1f      	ldr	r3, [pc, #124]	; (8009e98 <BSP_LED_Init+0x90>)
 8009e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e1c:	4a1e      	ldr	r2, [pc, #120]	; (8009e98 <BSP_LED_Init+0x90>)
 8009e1e:	f043 0302 	orr.w	r3, r3, #2
 8009e22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e24:	4b1c      	ldr	r3, [pc, #112]	; (8009e98 <BSP_LED_Init+0x90>)
 8009e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e28:	f003 0302 	and.w	r3, r3, #2
 8009e2c:	60bb      	str	r3, [r7, #8]
 8009e2e:	68bb      	ldr	r3, [r7, #8]

    /* Configure the GPIO_LED pin */
    GPIO_InitStructure.Pin = LED_PIN[Led];
 8009e30:	79fb      	ldrb	r3, [r7, #7]
 8009e32:	4a1a      	ldr	r2, [pc, #104]	; (8009e9c <BSP_LED_Init+0x94>)
 8009e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e42:	2303      	movs	r3, #3
 8009e44:	61bb      	str	r3, [r7, #24]

    HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStructure);
 8009e46:	f107 030c 	add.w	r3, r7, #12
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	4814      	ldr	r0, [pc, #80]	; (8009ea0 <BSP_LED_Init+0x98>)
 8009e4e:	f003 fc27 	bl	800d6a0 <HAL_GPIO_Init>
    /* By default, turn off LED */
    HAL_GPIO_WritePin(LED2_GPIO_PORT, GPIO_InitStructure.Pin, GPIO_PIN_SET);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	2201      	movs	r2, #1
 8009e58:	4619      	mov	r1, r3
 8009e5a:	4811      	ldr	r0, [pc, #68]	; (8009ea0 <BSP_LED_Init+0x98>)
 8009e5c:	f003 fea4 	bl	800dba8 <HAL_GPIO_WritePin>

    /* By default, turn off LED */
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }

}
 8009e60:	e016      	b.n	8009e90 <BSP_LED_Init+0x88>
    if (BSP_IO_Init() == IO_ERROR)
 8009e62:	f000 fda3 	bl	800a9ac <BSP_IO_Init>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d101      	bne.n	8009e70 <BSP_LED_Init+0x68>
      BSP_ErrorHandler();
 8009e6c:	f7ff ffc9 	bl	8009e02 <BSP_ErrorHandler>
    BSP_IO_ConfigPin(LED_PIN[Led], IO_MODE_OUTPUT);
 8009e70:	79fb      	ldrb	r3, [r7, #7]
 8009e72:	4a0a      	ldr	r2, [pc, #40]	; (8009e9c <BSP_LED_Init+0x94>)
 8009e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e78:	2101      	movs	r1, #1
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f000 fdda 	bl	800aa34 <BSP_IO_ConfigPin>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 8009e80:	79fb      	ldrb	r3, [r7, #7]
 8009e82:	4a06      	ldr	r2, [pc, #24]	; (8009e9c <BSP_LED_Init+0x94>)
 8009e84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e88:	2101      	movs	r1, #1
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f000 fdee 	bl	800aa6c <BSP_IO_WritePin>
}
 8009e90:	bf00      	nop
 8009e92:	3720      	adds	r7, #32
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	40021000 	.word	0x40021000
 8009e9c:	0801b018 	.word	0x0801b018
 8009ea0:	48000400 	.word	0x48000400

08009ea4 <BSP_LED_On>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	4603      	mov	r3, r0
 8009eac:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 8009eae:	79fb      	ldrb	r3, [r7, #7]
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d109      	bne.n	8009ec8 <BSP_LED_On+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_RESET);
 8009eb4:	79fb      	ldrb	r3, [r7, #7]
 8009eb6:	4a0a      	ldr	r2, [pc, #40]	; (8009ee0 <BSP_LED_On+0x3c>)
 8009eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	4808      	ldr	r0, [pc, #32]	; (8009ee4 <BSP_LED_On+0x40>)
 8009ec2:	f003 fe71 	bl	800dba8 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
  }
}
 8009ec6:	e007      	b.n	8009ed8 <BSP_LED_On+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_RESET);
 8009ec8:	79fb      	ldrb	r3, [r7, #7]
 8009eca:	4a05      	ldr	r2, [pc, #20]	; (8009ee0 <BSP_LED_On+0x3c>)
 8009ecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f000 fdca 	bl	800aa6c <BSP_IO_WritePin>
}
 8009ed8:	bf00      	nop
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	0801b018 	.word	0x0801b018
 8009ee4:	48000400 	.word	0x48000400

08009ee8 <BSP_LED_Off>:
  *     @arg LED1
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	4603      	mov	r3, r0
 8009ef0:	71fb      	strb	r3, [r7, #7]
  if (Led == LED2)
 8009ef2:	79fb      	ldrb	r3, [r7, #7]
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d109      	bne.n	8009f0c <BSP_LED_Off+0x24>
  {
    HAL_GPIO_WritePin(LED2_GPIO_PORT, LED_PIN[Led], GPIO_PIN_SET);
 8009ef8:	79fb      	ldrb	r3, [r7, #7]
 8009efa:	4a0a      	ldr	r2, [pc, #40]	; (8009f24 <BSP_LED_Off+0x3c>)
 8009efc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f00:	2201      	movs	r2, #1
 8009f02:	4619      	mov	r1, r3
 8009f04:	4808      	ldr	r0, [pc, #32]	; (8009f28 <BSP_LED_Off+0x40>)
 8009f06:	f003 fe4f 	bl	800dba8 <HAL_GPIO_WritePin>
  }
  else
  {
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
  }
}
 8009f0a:	e007      	b.n	8009f1c <BSP_LED_Off+0x34>
    BSP_IO_WritePin(LED_PIN[Led], GPIO_PIN_SET);
 8009f0c:	79fb      	ldrb	r3, [r7, #7]
 8009f0e:	4a05      	ldr	r2, [pc, #20]	; (8009f24 <BSP_LED_Off+0x3c>)
 8009f10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f14:	2101      	movs	r1, #1
 8009f16:	4618      	mov	r0, r3
 8009f18:	f000 fda8 	bl	800aa6c <BSP_IO_WritePin>
}
 8009f1c:	bf00      	nop
 8009f1e:	3708      	adds	r7, #8
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	0801b018 	.word	0x0801b018
 8009f28:	48000400 	.word	0x48000400

08009f2c <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 8009f30:	4812      	ldr	r0, [pc, #72]	; (8009f7c <I2C2_Init+0x50>)
 8009f32:	f004 fc60 	bl	800e7f6 <HAL_I2C_GetState>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d11d      	bne.n	8009f78 <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 8009f3c:	4b0f      	ldr	r3, [pc, #60]	; (8009f7c <I2C2_Init+0x50>)
 8009f3e:	4a10      	ldr	r2, [pc, #64]	; (8009f80 <I2C2_Init+0x54>)
 8009f40:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 8009f42:	4b0e      	ldr	r3, [pc, #56]	; (8009f7c <I2C2_Init+0x50>)
 8009f44:	4a0f      	ldr	r2, [pc, #60]	; (8009f84 <I2C2_Init+0x58>)
 8009f46:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 8009f48:	4b0c      	ldr	r3, [pc, #48]	; (8009f7c <I2C2_Init+0x50>)
 8009f4a:	2270      	movs	r2, #112	; 0x70
 8009f4c:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009f4e:	4b0b      	ldr	r3, [pc, #44]	; (8009f7c <I2C2_Init+0x50>)
 8009f50:	2201      	movs	r2, #1
 8009f52:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009f54:	4b09      	ldr	r3, [pc, #36]	; (8009f7c <I2C2_Init+0x50>)
 8009f56:	2200      	movs	r2, #0
 8009f58:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 8009f5a:	4b08      	ldr	r3, [pc, #32]	; (8009f7c <I2C2_Init+0x50>)
 8009f5c:	22ff      	movs	r2, #255	; 0xff
 8009f5e:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009f60:	4b06      	ldr	r3, [pc, #24]	; (8009f7c <I2C2_Init+0x50>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8009f66:	4b05      	ldr	r3, [pc, #20]	; (8009f7c <I2C2_Init+0x50>)
 8009f68:	2200      	movs	r2, #0
 8009f6a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 8009f6c:	4803      	ldr	r0, [pc, #12]	; (8009f7c <I2C2_Init+0x50>)
 8009f6e:	f000 f80b 	bl	8009f88 <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 8009f72:	4802      	ldr	r0, [pc, #8]	; (8009f7c <I2C2_Init+0x50>)
 8009f74:	f003 fe62 	bl	800dc3c <HAL_I2C_Init>
  }
}
 8009f78:	bf00      	nop
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	2000102c 	.word	0x2000102c
 8009f80:	40005800 	.word	0x40005800
 8009f84:	40403e5d 	.word	0x40403e5d

08009f88 <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b0ae      	sub	sp, #184	; 0xb8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a37      	ldr	r2, [pc, #220]	; (800a074 <I2C2_MspInit+0xec>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d168      	bne.n	800a06c <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8009f9a:	2380      	movs	r3, #128	; 0x80
 8009f9c:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8009f9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009fa2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8009fa4:	f107 0318 	add.w	r3, r7, #24
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f007 f9b9 	bl	8011320 <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8009fae:	4b32      	ldr	r3, [pc, #200]	; (800a078 <I2C2_MspInit+0xf0>)
 8009fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fb2:	4a31      	ldr	r2, [pc, #196]	; (800a078 <I2C2_MspInit+0xf0>)
 8009fb4:	f043 0302 	orr.w	r3, r3, #2
 8009fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009fba:	4b2f      	ldr	r3, [pc, #188]	; (800a078 <I2C2_MspInit+0xf0>)
 8009fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fbe:	f003 0302 	and.w	r3, r3, #2
 8009fc2:	617b      	str	r3, [r7, #20]
 8009fc4:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8009fc6:	4b2c      	ldr	r3, [pc, #176]	; (800a078 <I2C2_MspInit+0xf0>)
 8009fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fca:	4a2b      	ldr	r2, [pc, #172]	; (800a078 <I2C2_MspInit+0xf0>)
 8009fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009fd2:	4b29      	ldr	r3, [pc, #164]	; (800a078 <I2C2_MspInit+0xf0>)
 8009fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fda:	613b      	str	r3, [r7, #16]
 8009fdc:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 8009fde:	2310      	movs	r3, #16
 8009fe0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8009fe4:	2312      	movs	r3, #18
 8009fe6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 8009fea:	2301      	movs	r3, #1
 8009fec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 8009ff0:	2303      	movs	r3, #3
 8009ff2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 8009ff6:	2304      	movs	r3, #4
 8009ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 8009ffc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a000:	4619      	mov	r1, r3
 800a002:	481e      	ldr	r0, [pc, #120]	; (800a07c <I2C2_MspInit+0xf4>)
 800a004:	f003 fb4c 	bl	800d6a0 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 800a008:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a00c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 800a010:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a014:	4619      	mov	r1, r3
 800a016:	481a      	ldr	r0, [pc, #104]	; (800a080 <I2C2_MspInit+0xf8>)
 800a018:	f003 fb42 	bl	800d6a0 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 800a01c:	4b16      	ldr	r3, [pc, #88]	; (800a078 <I2C2_MspInit+0xf0>)
 800a01e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a020:	4a15      	ldr	r2, [pc, #84]	; (800a078 <I2C2_MspInit+0xf0>)
 800a022:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a026:	6593      	str	r3, [r2, #88]	; 0x58
 800a028:	4b13      	ldr	r3, [pc, #76]	; (800a078 <I2C2_MspInit+0xf0>)
 800a02a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a02c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a030:	60fb      	str	r3, [r7, #12]
 800a032:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 800a034:	4b10      	ldr	r3, [pc, #64]	; (800a078 <I2C2_MspInit+0xf0>)
 800a036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a038:	4a0f      	ldr	r2, [pc, #60]	; (800a078 <I2C2_MspInit+0xf0>)
 800a03a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a03e:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 800a040:	4b0d      	ldr	r3, [pc, #52]	; (800a078 <I2C2_MspInit+0xf0>)
 800a042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a044:	4a0c      	ldr	r2, [pc, #48]	; (800a078 <I2C2_MspInit+0xf0>)
 800a046:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a04a:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 800a04c:	2200      	movs	r2, #0
 800a04e:	2100      	movs	r1, #0
 800a050:	2021      	movs	r0, #33	; 0x21
 800a052:	f003 f94e 	bl	800d2f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 800a056:	2021      	movs	r0, #33	; 0x21
 800a058:	f003 f967 	bl	800d32a <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 800a05c:	2200      	movs	r2, #0
 800a05e:	2100      	movs	r1, #0
 800a060:	2022      	movs	r0, #34	; 0x22
 800a062:	f003 f946 	bl	800d2f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 800a066:	2022      	movs	r0, #34	; 0x22
 800a068:	f003 f95f 	bl	800d32a <HAL_NVIC_EnableIRQ>
  }
}
 800a06c:	bf00      	nop
 800a06e:	37b8      	adds	r7, #184	; 0xb8
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	40005800 	.word	0x40005800
 800a078:	40021000 	.word	0x40021000
 800a07c:	48001c00 	.word	0x48001c00
 800a080:	48000400 	.word	0x48000400

0800a084 <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 800a088:	4806      	ldr	r0, [pc, #24]	; (800a0a4 <I2C2_DeInit+0x20>)
 800a08a:	f004 fbb4 	bl	800e7f6 <HAL_I2C_GetState>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d005      	beq.n	800a0a0 <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 800a094:	4803      	ldr	r0, [pc, #12]	; (800a0a4 <I2C2_DeInit+0x20>)
 800a096:	f003 fe60 	bl	800dd5a <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 800a09a:	4802      	ldr	r0, [pc, #8]	; (800a0a4 <I2C2_DeInit+0x20>)
 800a09c:	f000 f804 	bl	800a0a8 <I2C2_MspDeInit>
  }
}
 800a0a0:	bf00      	nop
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	2000102c 	.word	0x2000102c

0800a0a8 <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a1f      	ldr	r2, [pc, #124]	; (800a134 <I2C2_MspDeInit+0x8c>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d138      	bne.n	800a12c <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 800a0ba:	4b1f      	ldr	r3, [pc, #124]	; (800a138 <I2C2_MspDeInit+0x90>)
 800a0bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0be:	4a1e      	ldr	r2, [pc, #120]	; (800a138 <I2C2_MspDeInit+0x90>)
 800a0c0:	f043 0302 	orr.w	r3, r3, #2
 800a0c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a0c6:	4b1c      	ldr	r3, [pc, #112]	; (800a138 <I2C2_MspDeInit+0x90>)
 800a0c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0ca:	f003 0302 	and.w	r3, r3, #2
 800a0ce:	60fb      	str	r3, [r7, #12]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 800a0d2:	4b19      	ldr	r3, [pc, #100]	; (800a138 <I2C2_MspDeInit+0x90>)
 800a0d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0d6:	4a18      	ldr	r2, [pc, #96]	; (800a138 <I2C2_MspDeInit+0x90>)
 800a0d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a0de:	4b16      	ldr	r3, [pc, #88]	; (800a138 <I2C2_MspDeInit+0x90>)
 800a0e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0e6:	60bb      	str	r3, [r7, #8]
 800a0e8:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 800a0ea:	2110      	movs	r1, #16
 800a0ec:	4813      	ldr	r0, [pc, #76]	; (800a13c <I2C2_MspDeInit+0x94>)
 800a0ee:	f003 fc69 	bl	800d9c4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 800a0f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a0f6:	4812      	ldr	r0, [pc, #72]	; (800a140 <I2C2_MspDeInit+0x98>)
 800a0f8:	f003 fc64 	bl	800d9c4 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 800a0fc:	4b0e      	ldr	r3, [pc, #56]	; (800a138 <I2C2_MspDeInit+0x90>)
 800a0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a100:	4a0d      	ldr	r2, [pc, #52]	; (800a138 <I2C2_MspDeInit+0x90>)
 800a102:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a106:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 800a108:	4b0b      	ldr	r3, [pc, #44]	; (800a138 <I2C2_MspDeInit+0x90>)
 800a10a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a10c:	4a0a      	ldr	r2, [pc, #40]	; (800a138 <I2C2_MspDeInit+0x90>)
 800a10e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a112:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 800a114:	4b08      	ldr	r3, [pc, #32]	; (800a138 <I2C2_MspDeInit+0x90>)
 800a116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a118:	4a07      	ldr	r2, [pc, #28]	; (800a138 <I2C2_MspDeInit+0x90>)
 800a11a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a11e:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 800a120:	2021      	movs	r0, #33	; 0x21
 800a122:	f003 f910 	bl	800d346 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 800a126:	2022      	movs	r0, #34	; 0x22
 800a128:	f003 f90d 	bl	800d346 <HAL_NVIC_DisableIRQ>
  }
}
 800a12c:	bf00      	nop
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	40005800 	.word	0x40005800
 800a138:	40021000 	.word	0x40021000
 800a13c:	48001c00 	.word	0x48001c00
 800a140:	48000400 	.word	0x48000400

0800a144 <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
static void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 800a144:	b590      	push	{r4, r7, lr}
 800a146:	b089      	sub	sp, #36	; 0x24
 800a148:	af04      	add	r7, sp, #16
 800a14a:	4604      	mov	r4, r0
 800a14c:	4608      	mov	r0, r1
 800a14e:	4611      	mov	r1, r2
 800a150:	461a      	mov	r2, r3
 800a152:	4623      	mov	r3, r4
 800a154:	80fb      	strh	r3, [r7, #6]
 800a156:	4603      	mov	r3, r0
 800a158:	80bb      	strh	r3, [r7, #4]
 800a15a:	460b      	mov	r3, r1
 800a15c:	807b      	strh	r3, [r7, #2]
 800a15e:	4613      	mov	r3, r2
 800a160:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 800a162:	2300      	movs	r3, #0
 800a164:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 800a166:	b672      	cpsid	i
}
 800a168:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 800a16a:	4b0d      	ldr	r3, [pc, #52]	; (800a1a0 <I2C2_WriteData+0x5c>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	8878      	ldrh	r0, [r7, #2]
 800a170:	88ba      	ldrh	r2, [r7, #4]
 800a172:	88f9      	ldrh	r1, [r7, #6]
 800a174:	9302      	str	r3, [sp, #8]
 800a176:	2301      	movs	r3, #1
 800a178:	9301      	str	r3, [sp, #4]
 800a17a:	1c7b      	adds	r3, r7, #1
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	4603      	mov	r3, r0
 800a180:	4808      	ldr	r0, [pc, #32]	; (800a1a4 <I2C2_WriteData+0x60>)
 800a182:	f004 f803 	bl	800e18c <HAL_I2C_Mem_Write>
 800a186:	4603      	mov	r3, r0
 800a188:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 800a18a:	b662      	cpsie	i
}
 800a18c:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 800a18e:	7bfb      	ldrb	r3, [r7, #15]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d001      	beq.n	800a198 <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800a194:	f000 f890 	bl	800a2b8 <I2C2_Error>
  }
}
 800a198:	bf00      	nop
 800a19a:	3714      	adds	r7, #20
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd90      	pop	{r4, r7, pc}
 800a1a0:	20000530 	.word	0x20000530
 800a1a4:	2000102c 	.word	0x2000102c

0800a1a8 <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
static uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b088      	sub	sp, #32
 800a1ac:	af04      	add	r7, sp, #16
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	80fb      	strh	r3, [r7, #6]
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	80bb      	strh	r3, [r7, #4]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1c2:	b672      	cpsid	i
}
 800a1c4:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 800a1c6:	4b10      	ldr	r3, [pc, #64]	; (800a208 <I2C2_ReadData+0x60>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	8878      	ldrh	r0, [r7, #2]
 800a1cc:	88ba      	ldrh	r2, [r7, #4]
 800a1ce:	88f9      	ldrh	r1, [r7, #6]
 800a1d0:	9302      	str	r3, [sp, #8]
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	9301      	str	r3, [sp, #4]
 800a1d6:	f107 030e 	add.w	r3, r7, #14
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	4603      	mov	r3, r0
 800a1de:	480b      	ldr	r0, [pc, #44]	; (800a20c <I2C2_ReadData+0x64>)
 800a1e0:	f004 f8e8 	bl	800e3b4 <HAL_I2C_Mem_Read>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 800a1e8:	b662      	cpsie	i
}
 800a1ea:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 800a1ec:	7bfb      	ldrb	r3, [r7, #15]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d004      	beq.n	800a1fc <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800a1f2:	f000 f861 	bl	800a2b8 <I2C2_Error>
    HAL_Delay(200);
 800a1f6:	20c8      	movs	r0, #200	; 0xc8
 800a1f8:	f001 fce0 	bl	800bbbc <HAL_Delay>
  }

  return value;
 800a1fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	20000530 	.word	0x20000530
 800a20c:	2000102c 	.word	0x2000102c

0800a210 <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	4603      	mov	r3, r0
 800a218:	6039      	str	r1, [r7, #0]
 800a21a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a21c:	2300      	movs	r3, #0
 800a21e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 800a220:	2300      	movs	r3, #0
 800a222:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 800a224:	b672      	cpsid	i
}
 800a226:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 800a228:	88f9      	ldrh	r1, [r7, #6]
 800a22a:	2332      	movs	r3, #50	; 0x32
 800a22c:	683a      	ldr	r2, [r7, #0]
 800a22e:	480a      	ldr	r0, [pc, #40]	; (800a258 <I2C2_isDeviceReady+0x48>)
 800a230:	f004 f9da 	bl	800e5e8 <HAL_I2C_IsDeviceReady>
 800a234:	4603      	mov	r3, r0
 800a236:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 800a238:	b662      	cpsie	i
}
 800a23a:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 800a23c:	7bfb      	ldrb	r3, [r7, #15]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d004      	beq.n	800a24c <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800a242:	f000 f839 	bl	800a2b8 <I2C2_Error>
    HAL_Delay(200);
 800a246:	20c8      	movs	r0, #200	; 0xc8
 800a248:	f001 fcb8 	bl	800bbbc <HAL_Delay>
  }

  return value;
 800a24c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a24e:	4618      	mov	r0, r3
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	2000102c 	.word	0x2000102c

0800a25c <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b08a      	sub	sp, #40	; 0x28
 800a260:	af04      	add	r7, sp, #16
 800a262:	607b      	str	r3, [r7, #4]
 800a264:	4603      	mov	r3, r0
 800a266:	81fb      	strh	r3, [r7, #14]
 800a268:	460b      	mov	r3, r1
 800a26a:	81bb      	strh	r3, [r7, #12]
 800a26c:	4613      	mov	r3, r2
 800a26e:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 800a270:	2300      	movs	r3, #0
 800a272:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 800a274:	b672      	cpsid	i
}
 800a276:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 800a278:	4b0d      	ldr	r3, [pc, #52]	; (800a2b0 <I2C2_ReadBuffer+0x54>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	8978      	ldrh	r0, [r7, #10]
 800a27e:	89ba      	ldrh	r2, [r7, #12]
 800a280:	89f9      	ldrh	r1, [r7, #14]
 800a282:	9302      	str	r3, [sp, #8]
 800a284:	8c3b      	ldrh	r3, [r7, #32]
 800a286:	9301      	str	r3, [sp, #4]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	4603      	mov	r3, r0
 800a28e:	4809      	ldr	r0, [pc, #36]	; (800a2b4 <I2C2_ReadBuffer+0x58>)
 800a290:	f004 f890 	bl	800e3b4 <HAL_I2C_Mem_Read>
 800a294:	4603      	mov	r3, r0
 800a296:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 800a298:	b662      	cpsie	i
}
 800a29a:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 800a29c:	7dfb      	ldrb	r3, [r7, #23]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d001      	beq.n	800a2a6 <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 800a2a2:	f000 f809 	bl	800a2b8 <I2C2_Error>
  }

  return status;
 800a2a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3718      	adds	r7, #24
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	20000530 	.word	0x20000530
 800a2b4:	2000102c 	.word	0x2000102c

0800a2b8 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 800a2bc:	f7ff fda1 	bl	8009e02 <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 800a2c0:	4803      	ldr	r0, [pc, #12]	; (800a2d0 <I2C2_Error+0x18>)
 800a2c2:	f003 fd4a 	bl	800dd5a <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 800a2c6:	f7ff fe31 	bl	8009f2c <I2C2_Init>
}
 800a2ca:	bf00      	nop
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	2000102c 	.word	0x2000102c

0800a2d4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b082      	sub	sp, #8
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]

  if (HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f004 fa8a 	bl	800e7f6 <HAL_I2C_GetState>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d132      	bne.n	800a34e <I2Cx_Init+0x7a>
  {
    if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cTSHandler))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4a1b      	ldr	r2, [pc, #108]	; (800a358 <I2Cx_Init+0x84>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d103      	bne.n	800a2f8 <I2Cx_Init+0x24>
    {
      /* TS (Capacitive Touch Panel) and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_TS_I2Cx;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	4a1a      	ldr	r2, [pc, #104]	; (800a35c <I2Cx_Init+0x88>)
 800a2f4:	601a      	str	r2, [r3, #0]
 800a2f6:	e012      	b.n	800a31e <I2Cx_Init+0x4a>

      /* Need to enable MFX, and in doing so, initialize I2C at the same time */
      /* MFX_IO_Init();*/

    }
    else if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cAudioHandler))
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a19      	ldr	r2, [pc, #100]	; (800a360 <I2Cx_Init+0x8c>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d103      	bne.n	800a308 <I2Cx_Init+0x34>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4a18      	ldr	r2, [pc, #96]	; (800a364 <I2Cx_Init+0x90>)
 800a304:	601a      	str	r2, [r3, #0]
 800a306:	e00a      	b.n	800a31e <I2Cx_Init+0x4a>
    }
    else if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cCameraHandler))
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	4a17      	ldr	r2, [pc, #92]	; (800a368 <I2Cx_Init+0x94>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d103      	bne.n	800a318 <I2Cx_Init+0x44>
    {
      i2c_handler->Instance = DISCOVERY_CAMERA_I2Cx;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	4a12      	ldr	r2, [pc, #72]	; (800a35c <I2Cx_Init+0x88>)
 800a314:	601a      	str	r2, [r3, #0]
 800a316:	e002      	b.n	800a31e <I2Cx_Init+0x4a>
    }
    else
    {
      /* External, EEPROM and Arduino connector I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4a10      	ldr	r2, [pc, #64]	; (800a35c <I2Cx_Init+0x88>)
 800a31c:	601a      	str	r2, [r3, #0]
    }

    i2c_handler->Init.Timing           = DISCOVERY_I2C_TIMING;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a12      	ldr	r2, [pc, #72]	; (800a36c <I2Cx_Init+0x98>)
 800a322:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0x70;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2270      	movs	r2, #112	; 0x70
 800a328:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2201      	movs	r2, #1
 800a32e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0xFF;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	22ff      	movs	r2, #255	; 0xff
 800a33a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	621a      	str	r2, [r3, #32]


    /* Init the I2C */
    HAL_I2C_Init(i2c_handler);
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f003 fc77 	bl	800dc3c <HAL_I2C_Init>

  }

}
 800a34e:	bf00      	nop
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	20001080 	.word	0x20001080
 800a35c:	40005800 	.word	0x40005800
 800a360:	200010d4 	.word	0x200010d4
 800a364:	40005400 	.word	0x40005400
 800a368:	20001128 	.word	0x20001128
 800a36c:	90112626 	.word	0x90112626

0800a370 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b08a      	sub	sp, #40	; 0x28
 800a374:	af04      	add	r7, sp, #16
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	4608      	mov	r0, r1
 800a37a:	4611      	mov	r1, r2
 800a37c:	461a      	mov	r2, r3
 800a37e:	4603      	mov	r3, r0
 800a380:	72fb      	strb	r3, [r7, #11]
 800a382:	460b      	mov	r3, r1
 800a384:	813b      	strh	r3, [r7, #8]
 800a386:	4613      	mov	r3, r2
 800a388:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a38a:	2300      	movs	r3, #0
 800a38c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a38e:	7afb      	ldrb	r3, [r7, #11]
 800a390:	b299      	uxth	r1, r3
 800a392:	88f8      	ldrh	r0, [r7, #6]
 800a394:	893a      	ldrh	r2, [r7, #8]
 800a396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a39a:	9302      	str	r3, [sp, #8]
 800a39c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a39e:	9301      	str	r3, [sp, #4]
 800a3a0:	6a3b      	ldr	r3, [r7, #32]
 800a3a2:	9300      	str	r3, [sp, #0]
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	68f8      	ldr	r0, [r7, #12]
 800a3a8:	f004 f804 	bl	800e3b4 <HAL_I2C_Mem_Read>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 800a3b0:	7dfb      	ldrb	r3, [r7, #23]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d004      	beq.n	800a3c0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800a3b6:	7afb      	ldrb	r3, [r7, #11]
 800a3b8:	4619      	mov	r1, r3
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f000 f832 	bl	800a424 <I2Cx_Error>
  }
  return status;
 800a3c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3718      	adds	r7, #24
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b08a      	sub	sp, #40	; 0x28
 800a3ce:	af04      	add	r7, sp, #16
 800a3d0:	60f8      	str	r0, [r7, #12]
 800a3d2:	4608      	mov	r0, r1
 800a3d4:	4611      	mov	r1, r2
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	4603      	mov	r3, r0
 800a3da:	72fb      	strb	r3, [r7, #11]
 800a3dc:	460b      	mov	r3, r1
 800a3de:	813b      	strh	r3, [r7, #8]
 800a3e0:	4613      	mov	r3, r2
 800a3e2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800a3e8:	7afb      	ldrb	r3, [r7, #11]
 800a3ea:	b299      	uxth	r1, r3
 800a3ec:	88f8      	ldrh	r0, [r7, #6]
 800a3ee:	893a      	ldrh	r2, [r7, #8]
 800a3f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a3f4:	9302      	str	r3, [sp, #8]
 800a3f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a3f8:	9301      	str	r3, [sp, #4]
 800a3fa:	6a3b      	ldr	r3, [r7, #32]
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	4603      	mov	r3, r0
 800a400:	68f8      	ldr	r0, [r7, #12]
 800a402:	f003 fec3 	bl	800e18c <HAL_I2C_Mem_Write>
 800a406:	4603      	mov	r3, r0
 800a408:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if (status != HAL_OK)
 800a40a:	7dfb      	ldrb	r3, [r7, #23]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d004      	beq.n	800a41a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initialize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800a410:	7afb      	ldrb	r3, [r7, #11]
 800a412:	4619      	mov	r1, r3
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f000 f805 	bl	800a424 <I2Cx_Error>
  }
  return status;
 800a41a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3718      	adds	r7, #24
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b082      	sub	sp, #8
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	460b      	mov	r3, r1
 800a42e:	70fb      	strb	r3, [r7, #3]
  BSP_ErrorHandler();
 800a430:	f7ff fce7 	bl	8009e02 <BSP_ErrorHandler>

  /* De-initialize the I2C communication bus */
  if (i2c_handler == (I2C_HandleTypeDef *)(&hI2cTSHandler))
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4a08      	ldr	r2, [pc, #32]	; (800a458 <I2Cx_Error+0x34>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d102      	bne.n	800a442 <I2Cx_Error+0x1e>
  {
    I2C2_DeInit();
 800a43c:	f7ff fe22 	bl	800a084 <I2C2_DeInit>
 800a440:	e002      	b.n	800a448 <I2Cx_Error+0x24>
  }
  else
  {
    HAL_I2C_DeInit(i2c_handler);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f003 fc89 	bl	800dd5a <HAL_I2C_DeInit>
  }

  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f7ff ff43 	bl	800a2d4 <I2Cx_Init>
}
 800a44e:	bf00      	nop
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	20001080 	.word	0x20001080

0800a45c <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 800a460:	f7ff fd64 	bl	8009f2c <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 800a464:	2104      	movs	r1, #4
 800a466:	2084      	movs	r0, #132	; 0x84
 800a468:	f7ff fed2 	bl	800a210 <I2C2_isDeviceReady>
 800a46c:	4603      	mov	r3, r0
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 800a472:	f7ff fcc6 	bl	8009e02 <BSP_ErrorHandler>
  }
}
 800a476:	bf00      	nop
 800a478:	bd80      	pop	{r7, pc}
	...

0800a47c <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b088      	sub	sp, #32
 800a480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 800a482:	4b19      	ldr	r3, [pc, #100]	; (800a4e8 <MFX_IO_DeInit+0x6c>)
 800a484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a486:	4a18      	ldr	r2, [pc, #96]	; (800a4e8 <MFX_IO_DeInit+0x6c>)
 800a488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a48c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a48e:	4b16      	ldr	r3, [pc, #88]	; (800a4e8 <MFX_IO_DeInit+0x6c>)
 800a490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a496:	60bb      	str	r3, [r7, #8]
 800a498:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 800a49a:	2340      	movs	r3, #64	; 0x40
 800a49c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 800a4a6:	2302      	movs	r3, #2
 800a4a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 800a4aa:	f107 030c 	add.w	r3, r7, #12
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	480e      	ldr	r0, [pc, #56]	; (800a4ec <MFX_IO_DeInit+0x70>)
 800a4b2:	f003 f8f5 	bl	800d6a0 <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 800a4b6:	2017      	movs	r0, #23
 800a4b8:	f002 ff45 	bl	800d346 <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 800a4bc:	4b0a      	ldr	r3, [pc, #40]	; (800a4e8 <MFX_IO_DeInit+0x6c>)
 800a4be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4c0:	4a09      	ldr	r2, [pc, #36]	; (800a4e8 <MFX_IO_DeInit+0x6c>)
 800a4c2:	f043 0304 	orr.w	r3, r3, #4
 800a4c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a4c8:	4b07      	ldr	r3, [pc, #28]	; (800a4e8 <MFX_IO_DeInit+0x6c>)
 800a4ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4cc:	f003 0304 	and.w	r3, r3, #4
 800a4d0:	607b      	str	r3, [r7, #4]
 800a4d2:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 800a4d4:	2120      	movs	r1, #32
 800a4d6:	4806      	ldr	r0, [pc, #24]	; (800a4f0 <MFX_IO_DeInit+0x74>)
 800a4d8:	f003 fa74 	bl	800d9c4 <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 800a4dc:	f7ff fdd2 	bl	800a084 <I2C2_DeInit>
}
 800a4e0:	bf00      	nop
 800a4e2:	3720      	adds	r7, #32
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	40021000 	.word	0x40021000
 800a4ec:	48001c00 	.word	0x48001c00
 800a4f0:	48000800 	.word	0x48000800

0800a4f4 <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b086      	sub	sp, #24
 800a4f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 800a4fa:	4b13      	ldr	r3, [pc, #76]	; (800a548 <MFX_IO_ITConfig+0x54>)
 800a4fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4fe:	4a12      	ldr	r2, [pc, #72]	; (800a548 <MFX_IO_ITConfig+0x54>)
 800a500:	f043 0304 	orr.w	r3, r3, #4
 800a504:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a506:	4b10      	ldr	r3, [pc, #64]	; (800a548 <MFX_IO_ITConfig+0x54>)
 800a508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a50a:	f003 0304 	and.w	r3, r3, #4
 800a50e:	603b      	str	r3, [r7, #0]
 800a510:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 800a512:	2320      	movs	r3, #32
 800a514:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800a516:	2300      	movs	r3, #0
 800a518:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a51a:	2300      	movs	r3, #0
 800a51c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 800a51e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800a522:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 800a524:	1d3b      	adds	r3, r7, #4
 800a526:	4619      	mov	r1, r3
 800a528:	4808      	ldr	r0, [pc, #32]	; (800a54c <MFX_IO_ITConfig+0x58>)
 800a52a:	f003 f8b9 	bl	800d6a0 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 800a52e:	220f      	movs	r2, #15
 800a530:	210f      	movs	r1, #15
 800a532:	2017      	movs	r0, #23
 800a534:	f002 fedd 	bl	800d2f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 800a538:	2017      	movs	r0, #23
 800a53a:	f002 fef6 	bl	800d32a <HAL_NVIC_EnableIRQ>
}
 800a53e:	bf00      	nop
 800a540:	3718      	adds	r7, #24
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	40021000 	.word	0x40021000
 800a54c:	48000800 	.word	0x48000800

0800a550 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b086      	sub	sp, #24
 800a554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 800a556:	4b0e      	ldr	r3, [pc, #56]	; (800a590 <MFX_IO_EnableWakeupPin+0x40>)
 800a558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a55a:	4a0d      	ldr	r2, [pc, #52]	; (800a590 <MFX_IO_EnableWakeupPin+0x40>)
 800a55c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a560:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a562:	4b0b      	ldr	r3, [pc, #44]	; (800a590 <MFX_IO_EnableWakeupPin+0x40>)
 800a564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a56a:	603b      	str	r3, [r7, #0]
 800a56c:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 800a56e:	2340      	movs	r3, #64	; 0x40
 800a570:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800a572:	2301      	movs	r3, #1
 800a574:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a576:	2302      	movs	r3, #2
 800a578:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800a57a:	2300      	movs	r3, #0
 800a57c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 800a57e:	1d3b      	adds	r3, r7, #4
 800a580:	4619      	mov	r1, r3
 800a582:	4804      	ldr	r0, [pc, #16]	; (800a594 <MFX_IO_EnableWakeupPin+0x44>)
 800a584:	f003 f88c 	bl	800d6a0 <HAL_GPIO_Init>
}
 800a588:	bf00      	nop
 800a58a:	3718      	adds	r7, #24
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	40021000 	.word	0x40021000
 800a594:	48001c00 	.word	0x48001c00

0800a598 <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 800a59c:	2201      	movs	r2, #1
 800a59e:	2140      	movs	r1, #64	; 0x40
 800a5a0:	4806      	ldr	r0, [pc, #24]	; (800a5bc <MFX_IO_Wakeup+0x24>)
 800a5a2:	f003 fb01 	bl	800dba8 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 800a5a6:	2001      	movs	r0, #1
 800a5a8:	f001 fb08 	bl	800bbbc <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	2140      	movs	r1, #64	; 0x40
 800a5b0:	4802      	ldr	r0, [pc, #8]	; (800a5bc <MFX_IO_Wakeup+0x24>)
 800a5b2:	f003 faf9 	bl	800dba8 <HAL_GPIO_WritePin>
}
 800a5b6:	bf00      	nop
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	48001c00 	.word	0x48001c00

0800a5c0 <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	80fb      	strh	r3, [r7, #6]
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	717b      	strb	r3, [r7, #5]
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 800a5d2:	797b      	ldrb	r3, [r7, #5]
 800a5d4:	b299      	uxth	r1, r3
 800a5d6:	793b      	ldrb	r3, [r7, #4]
 800a5d8:	88f8      	ldrh	r0, [r7, #6]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	f7ff fdb2 	bl	800a144 <I2C2_WriteData>
}
 800a5e0:	bf00      	nop
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	460a      	mov	r2, r1
 800a5f2:	80fb      	strh	r3, [r7, #6]
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 800a5f8:	797b      	ldrb	r3, [r7, #5]
 800a5fa:	b299      	uxth	r1, r3
 800a5fc:	88fb      	ldrh	r3, [r7, #6]
 800a5fe:	2201      	movs	r2, #1
 800a600:	4618      	mov	r0, r3
 800a602:	f7ff fdd1 	bl	800a1a8 <I2C2_ReadData>
 800a606:	4603      	mov	r3, r0
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3708      	adds	r7, #8
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af02      	add	r7, sp, #8
 800a616:	60ba      	str	r2, [r7, #8]
 800a618:	461a      	mov	r2, r3
 800a61a:	4603      	mov	r3, r0
 800a61c:	81fb      	strh	r3, [r7, #14]
 800a61e:	460b      	mov	r3, r1
 800a620:	737b      	strb	r3, [r7, #13]
 800a622:	4613      	mov	r3, r2
 800a624:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800a626:	7b7b      	ldrb	r3, [r7, #13]
 800a628:	b299      	uxth	r1, r3
 800a62a:	89f8      	ldrh	r0, [r7, #14]
 800a62c:	88fb      	ldrh	r3, [r7, #6]
 800a62e:	9300      	str	r3, [sp, #0]
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	2201      	movs	r2, #1
 800a634:	f7ff fe12 	bl	800a25c <I2C2_ReadBuffer>
 800a638:	4603      	mov	r3, r0
 800a63a:	b29b      	uxth	r3, r3
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f001 fab5 	bl	800bbbc <HAL_Delay>
}
 800a652:	bf00      	nop
 800a654:	3708      	adds	r7, #8
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
	...

0800a65c <FMC_BANK1_MspInit>:
  * @brief  Initializes FMC_BANK1_LCD_IO MSP.
  * @param  None
  * @retval None
  */
void FMC_BANK1_MspInit(void)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b08c      	sub	sp, #48	; 0x30
 800a660:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_Init_Structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800a662:	4b38      	ldr	r3, [pc, #224]	; (800a744 <FMC_BANK1_MspInit+0xe8>)
 800a664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a666:	4a37      	ldr	r2, [pc, #220]	; (800a744 <FMC_BANK1_MspInit+0xe8>)
 800a668:	f043 0301 	orr.w	r3, r3, #1
 800a66c:	6513      	str	r3, [r2, #80]	; 0x50
 800a66e:	4b35      	ldr	r3, [pc, #212]	; (800a744 <FMC_BANK1_MspInit+0xe8>)
 800a670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a672:	f003 0301 	and.w	r3, r3, #1
 800a676:	61bb      	str	r3, [r7, #24]
 800a678:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a67a:	4b32      	ldr	r3, [pc, #200]	; (800a744 <FMC_BANK1_MspInit+0xe8>)
 800a67c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a67e:	4a31      	ldr	r2, [pc, #196]	; (800a744 <FMC_BANK1_MspInit+0xe8>)
 800a680:	f043 0308 	orr.w	r3, r3, #8
 800a684:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a686:	4b2f      	ldr	r3, [pc, #188]	; (800a744 <FMC_BANK1_MspInit+0xe8>)
 800a688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a68a:	f003 0308 	and.w	r3, r3, #8
 800a68e:	617b      	str	r3, [r7, #20]
 800a690:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a692:	4b2c      	ldr	r3, [pc, #176]	; (800a744 <FMC_BANK1_MspInit+0xe8>)
 800a694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a696:	4a2b      	ldr	r2, [pc, #172]	; (800a744 <FMC_BANK1_MspInit+0xe8>)
 800a698:	f043 0310 	orr.w	r3, r3, #16
 800a69c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a69e:	4b29      	ldr	r3, [pc, #164]	; (800a744 <FMC_BANK1_MspInit+0xe8>)
 800a6a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6a2:	f003 0310 	and.w	r3, r3, #16
 800a6a6:	613b      	str	r3, [r7, #16]
 800a6a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a6aa:	4b26      	ldr	r3, [pc, #152]	; (800a744 <FMC_BANK1_MspInit+0xe8>)
 800a6ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6ae:	4a25      	ldr	r2, [pc, #148]	; (800a744 <FMC_BANK1_MspInit+0xe8>)
 800a6b0:	f043 0320 	orr.w	r3, r3, #32
 800a6b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a6b6:	4b23      	ldr	r3, [pc, #140]	; (800a744 <FMC_BANK1_MspInit+0xe8>)
 800a6b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6ba:	f003 0320 	and.w	r3, r3, #32
 800a6be:	60fb      	str	r3, [r7, #12]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a6c2:	4b20      	ldr	r3, [pc, #128]	; (800a744 <FMC_BANK1_MspInit+0xe8>)
 800a6c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6c6:	4a1f      	ldr	r2, [pc, #124]	; (800a744 <FMC_BANK1_MspInit+0xe8>)
 800a6c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a6ce:	4b1d      	ldr	r3, [pc, #116]	; (800a744 <FMC_BANK1_MspInit+0xe8>)
 800a6d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d6:	60bb      	str	r3, [r7, #8]
 800a6d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a6da:	4b1a      	ldr	r3, [pc, #104]	; (800a744 <FMC_BANK1_MspInit+0xe8>)
 800a6dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6de:	4a19      	ldr	r2, [pc, #100]	; (800a744 <FMC_BANK1_MspInit+0xe8>)
 800a6e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6e4:	6593      	str	r3, [r2, #88]	; 0x58
 800a6e6:	4b17      	ldr	r3, [pc, #92]	; (800a744 <FMC_BANK1_MspInit+0xe8>)
 800a6e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6ee:	607b      	str	r3, [r7, #4]
 800a6f0:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800a6f2:	f005 febd 	bl	8010470 <HAL_PWREx_EnableVddIO2>

  GPIO_Init_Structure.Mode      = GPIO_MODE_AF_PP;
 800a6f6:	2302      	movs	r3, #2
 800a6f8:	623b      	str	r3, [r7, #32]
  GPIO_Init_Structure.Pull      = GPIO_PULLUP;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init_Structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6fe:	2303      	movs	r3, #3
 800a700:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init_Structure.Alternate = GPIO_AF12_FMC;
 800a702:	230c      	movs	r3, #12
 800a704:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* GPIOD configuration */ /* GPIO_PIN_7 is  FMC_NE1 */
  GPIO_Init_Structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | \
 800a706:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800a70a:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7;

  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 800a70c:	f107 031c 	add.w	r3, r7, #28
 800a710:	4619      	mov	r1, r3
 800a712:	480d      	ldr	r0, [pc, #52]	; (800a748 <FMC_BANK1_MspInit+0xec>)
 800a714:	f002 ffc4 	bl	800d6a0 <HAL_GPIO_Init>




  /* GPIOE configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_7     | \
 800a718:	f64f 7380 	movw	r3, #65408	; 0xff80
 800a71c:	61fb      	str	r3, [r7, #28]
                              GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | \
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_Init_Structure);
 800a71e:	f107 031c 	add.w	r3, r7, #28
 800a722:	4619      	mov	r1, r3
 800a724:	4809      	ldr	r0, [pc, #36]	; (800a74c <FMC_BANK1_MspInit+0xf0>)
 800a726:	f002 ffbb 	bl	800d6a0 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_Init_Structure.Pin   = GPIO_PIN_13 ;
 800a72a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a72e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_Init_Structure);
 800a730:	f107 031c 	add.w	r3, r7, #28
 800a734:	4619      	mov	r1, r3
 800a736:	4804      	ldr	r0, [pc, #16]	; (800a748 <FMC_BANK1_MspInit+0xec>)
 800a738:	f002 ffb2 	bl	800d6a0 <HAL_GPIO_Init>

}
 800a73c:	bf00      	nop
 800a73e:	3730      	adds	r7, #48	; 0x30
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	40021000 	.word	0x40021000
 800a748:	48000c00 	.word	0x48000c00
 800a74c:	48001000 	.word	0x48001000

0800a750 <FMC_BANK1_Init>:
  * @brief  Initializes LCD IO.
  * @param  None
  * @retval None
  */
void FMC_BANK1_Init(void)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b0a4      	sub	sp, #144	; 0x90
 800a754:	af00      	add	r7, sp, #0
  FMC_NORSRAM_TimingTypeDef sram_timing;
  FMC_NORSRAM_TimingTypeDef sram_timing_write;

  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FMC_NORSRAM_DEVICE;
 800a756:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800a75a:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Extended  = FMC_NORSRAM_EXTENDED_DEVICE;
 800a75c:	4b26      	ldr	r3, [pc, #152]	; (800a7f8 <FMC_BANK1_Init+0xa8>)
 800a75e:	647b      	str	r3, [r7, #68]	; 0x44


  /* Timing for READING */

  sram_timing.AddressSetupTime       = 1;
 800a760:	2301      	movs	r3, #1
 800a762:	623b      	str	r3, [r7, #32]
  sram_timing.AddressHoldTime        = 1;
 800a764:	2301      	movs	r3, #1
 800a766:	627b      	str	r3, [r7, #36]	; 0x24
  sram_timing.DataSetupTime          = 1;
 800a768:	2301      	movs	r3, #1
 800a76a:	62bb      	str	r3, [r7, #40]	; 0x28
  sram_timing.BusTurnAroundDuration  = 0;
 800a76c:	2300      	movs	r3, #0
 800a76e:	633b      	str	r3, [r7, #48]	; 0x30
  sram_timing.CLKDivision            = 2;
 800a770:	2302      	movs	r3, #2
 800a772:	637b      	str	r3, [r7, #52]	; 0x34
  sram_timing.DataLatency            = 2;
 800a774:	2302      	movs	r3, #2
 800a776:	63bb      	str	r3, [r7, #56]	; 0x38
  sram_timing.AccessMode             = FMC_ACCESS_MODE_A;
 800a778:	2300      	movs	r3, #0
 800a77a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* Timing for WRITING */
  sram_timing_write.AddressSetupTime      = 5;
 800a77c:	2305      	movs	r3, #5
 800a77e:	603b      	str	r3, [r7, #0]
  sram_timing_write.AddressHoldTime       = 1;
 800a780:	2301      	movs	r3, #1
 800a782:	607b      	str	r3, [r7, #4]
  sram_timing_write.DataSetupTime         = 3;
 800a784:	2303      	movs	r3, #3
 800a786:	60bb      	str	r3, [r7, #8]
  sram_timing_write.BusTurnAroundDuration = 2;
 800a788:	2302      	movs	r3, #2
 800a78a:	613b      	str	r3, [r7, #16]
  sram_timing_write.CLKDivision           = 2;
 800a78c:	2302      	movs	r3, #2
 800a78e:	617b      	str	r3, [r7, #20]
  sram_timing_write.DataLatency           = 2;
 800a790:	2302      	movs	r3, #2
 800a792:	61bb      	str	r3, [r7, #24]
  sram_timing_write.AccessMode            = FMC_ACCESS_MODE_A;
 800a794:	2300      	movs	r3, #0
 800a796:	61fb      	str	r3, [r7, #28]


  hsram.Init.NSBank             = FMC_NORSRAM_BANK1;
 800a798:	2300      	movs	r3, #0
 800a79a:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.DataAddressMux     = FMC_DATA_ADDRESS_MUX_DISABLE;
 800a79c:	2300      	movs	r3, #0
 800a79e:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.MemoryType         = FMC_MEMORY_TYPE_SRAM;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.MemoryDataWidth    = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800a7a4:	2310      	movs	r3, #16
 800a7a6:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.BurstAccessMode    = FMC_BURST_ACCESS_MODE_DISABLE;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  hsram.Init.WaitSignalActive   = FMC_WAIT_TIMING_BEFORE_WS;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.WriteOperation     = FMC_WRITE_OPERATION_ENABLE;
 800a7b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7b8:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.WaitSignal         = FMC_WAIT_SIGNAL_DISABLE;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	66bb      	str	r3, [r7, #104]	; 0x68
  hsram.Init.ExtendedMode       = FMC_EXTENDED_MODE_DISABLE;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  hsram.Init.AsynchronousWait   = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	673b      	str	r3, [r7, #112]	; 0x70
  hsram.Init.WriteBurst         = FMC_WRITE_BURST_DISABLE;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	677b      	str	r3, [r7, #116]	; 0x74
  hsram.Init.PageSize           = FMC_PAGE_SIZE_NONE;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  hsram.Init.WriteFifo          = FMC_WRITE_FIFO_DISABLE;
 800a7d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a7d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  hsram.Init.ContinuousClock    = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	67bb      	str	r3, [r7, #120]	; 0x78
  /* Initialize the SRAM controller */
  FMC_BANK1_MspInit();
 800a7da:	f7ff ff3f 	bl	800a65c <FMC_BANK1_MspInit>
  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing_write);
 800a7de:	463a      	mov	r2, r7
 800a7e0:	f107 0120 	add.w	r1, r7, #32
 800a7e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f009 f96e 	bl	8013aca <HAL_SRAM_Init>

}
 800a7ee:	bf00      	nop
 800a7f0:	3790      	adds	r7, #144	; 0x90
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	a0000104 	.word	0xa0000104

0800a7fc <FMC_BANK1_WriteData>:
  * @brief  Writes register value.
  * @param  Data: Data to be written
  * @retval None
  */
static void FMC_BANK1_WriteData(uint16_t Data)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	4603      	mov	r3, r0
 800a804:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  LCD_ADDR->REG = Data;
 800a806:	4a04      	ldr	r2, [pc, #16]	; (800a818 <FMC_BANK1_WriteData+0x1c>)
 800a808:	88fb      	ldrh	r3, [r7, #6]
 800a80a:	8013      	strh	r3, [r2, #0]
}
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr
 800a818:	60080000 	.word	0x60080000

0800a81c <FMC_BANK1_WriteReg>:
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  * @retval None
  */
static void FMC_BANK1_WriteReg(uint8_t Reg)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
 800a822:	4603      	mov	r3, r0
 800a824:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK1_ADDR->REG = Reg;
 800a826:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800a82a:	79fa      	ldrb	r2, [r7, #7]
 800a82c:	b292      	uxth	r2, r2
 800a82e:	801a      	strh	r2, [r3, #0]
}
 800a830:	bf00      	nop
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <FMC_BANK1_ReadData>:
  * @brief  Reads register value.
  * @param  None
  * @retval Read value
  */
static uint16_t FMC_BANK1_ReadData(void)
{
 800a83c:	b480      	push	{r7}
 800a83e:	af00      	add	r7, sp, #0
  return LCD_ADDR->REG;
 800a840:	4b03      	ldr	r3, [pc, #12]	; (800a850 <FMC_BANK1_ReadData+0x14>)
 800a842:	881b      	ldrh	r3, [r3, #0]
 800a844:	b29b      	uxth	r3, r3
}
 800a846:	4618      	mov	r0, r3
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr
 800a850:	60080000 	.word	0x60080000

0800a854 <LCD_IO_Init>:
  * @brief  Initializes LCD low level.
  * @param  None
  * @retval None
  */
void LCD_IO_Init(void)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	af00      	add	r7, sp, #0
  FMC_BANK1_Init();
 800a858:	f7ff ff7a 	bl	800a750 <FMC_BANK1_Init>
}
 800a85c:	bf00      	nop
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <LCD_IO_WriteData>:
  * @brief  Writes data on LCD data register.
  * @param  Data: Data to be written
  * @retval None
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	4603      	mov	r3, r0
 800a868:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK1_WriteData(RegValue);
 800a86a:	88fb      	ldrh	r3, [r7, #6]
 800a86c:	4618      	mov	r0, r3
 800a86e:	f7ff ffc5 	bl	800a7fc <FMC_BANK1_WriteData>
}
 800a872:	bf00      	nop
 800a874:	3708      	adds	r7, #8
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <LCD_IO_WriteReg>:
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  * @retval None
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b082      	sub	sp, #8
 800a87e:	af00      	add	r7, sp, #0
 800a880:	4603      	mov	r3, r0
 800a882:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK1_WriteReg(Reg);
 800a884:	79fb      	ldrb	r3, [r7, #7]
 800a886:	4618      	mov	r0, r3
 800a888:	f7ff ffc8 	bl	800a81c <FMC_BANK1_WriteReg>
}
 800a88c:	bf00      	nop
 800a88e:	3708      	adds	r7, #8
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <LCD_IO_ReadData>:
  * @brief  Reads data from LCD data register.
  * @param  None
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	af00      	add	r7, sp, #0
  return FMC_BANK1_ReadData();
 800a898:	f7ff ffd0 	bl	800a83c <FMC_BANK1_ReadData>
 800a89c:	4603      	mov	r3, r0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <LCD_IO_Delay>:
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void LCD_IO_Delay(uint32_t Delay)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b082      	sub	sp, #8
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f001 f986 	bl	800bbbc <HAL_Delay>
}
 800a8b0:	bf00      	nop
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cTSHandler);
 800a8bc:	4812      	ldr	r0, [pc, #72]	; (800a908 <TS_IO_Init+0x50>)
 800a8be:	f7ff fd09 	bl	800a2d4 <I2Cx_Init>

  if (ts_io_init == 0)
 800a8c2:	4b12      	ldr	r3, [pc, #72]	; (800a90c <TS_IO_Init+0x54>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d11b      	bne.n	800a902 <TS_IO_Init+0x4a>
  {
    if (BSP_LCD_Init() == LCD_ERROR)
 800a8ca:	f000 f8eb 	bl	800aaa4 <BSP_LCD_Init>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d101      	bne.n	800a8d8 <TS_IO_Init+0x20>
    {
      BSP_ErrorHandler();
 800a8d4:	f7ff fa95 	bl	8009e02 <BSP_ErrorHandler>
    }

    BSP_IO_ConfigPin(TS_RST_PIN, IO_MODE_OUTPUT);
 800a8d8:	2101      	movs	r1, #1
 800a8da:	2002      	movs	r0, #2
 800a8dc:	f000 f8aa 	bl	800aa34 <BSP_IO_ConfigPin>

    BSP_IO_WritePin(TS_RST_PIN, GPIO_PIN_RESET);
 800a8e0:	2100      	movs	r1, #0
 800a8e2:	2002      	movs	r0, #2
 800a8e4:	f000 f8c2 	bl	800aa6c <BSP_IO_WritePin>
    HAL_Delay(10);
 800a8e8:	200a      	movs	r0, #10
 800a8ea:	f001 f967 	bl	800bbbc <HAL_Delay>
    BSP_IO_WritePin(TS_RST_PIN, GPIO_PIN_SET);
 800a8ee:	2101      	movs	r1, #1
 800a8f0:	2002      	movs	r0, #2
 800a8f2:	f000 f8bb 	bl	800aa6c <BSP_IO_WritePin>
    HAL_Delay(200);
 800a8f6:	20c8      	movs	r0, #200	; 0xc8
 800a8f8:	f001 f960 	bl	800bbbc <HAL_Delay>

    ts_io_init = 1;
 800a8fc:	4b03      	ldr	r3, [pc, #12]	; (800a90c <TS_IO_Init+0x54>)
 800a8fe:	2201      	movs	r2, #1
 800a900:	601a      	str	r2, [r3, #0]
  }
}
 800a902:	bf00      	nop
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	20001080 	.word	0x20001080
 800a90c:	20001028 	.word	0x20001028

0800a910 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af02      	add	r7, sp, #8
 800a916:	4603      	mov	r3, r0
 800a918:	71fb      	strb	r3, [r7, #7]
 800a91a:	460b      	mov	r3, r1
 800a91c:	71bb      	strb	r3, [r7, #6]
 800a91e:	4613      	mov	r3, r2
 800a920:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cTSHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&Value, 1);
 800a922:	79bb      	ldrb	r3, [r7, #6]
 800a924:	b29a      	uxth	r2, r3
 800a926:	79f9      	ldrb	r1, [r7, #7]
 800a928:	2301      	movs	r3, #1
 800a92a:	9301      	str	r3, [sp, #4]
 800a92c:	1d7b      	adds	r3, r7, #5
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	2301      	movs	r3, #1
 800a932:	4803      	ldr	r0, [pc, #12]	; (800a940 <TS_IO_Write+0x30>)
 800a934:	f7ff fd49 	bl	800a3ca <I2Cx_WriteMultiple>
}
 800a938:	bf00      	nop
 800a93a:	3708      	adds	r7, #8
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	20001080 	.word	0x20001080

0800a944 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	4603      	mov	r3, r0
 800a94c:	460a      	mov	r2, r1
 800a94e:	71fb      	strb	r3, [r7, #7]
 800a950:	4613      	mov	r3, r2
 800a952:	71bb      	strb	r3, [r7, #6]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 800a954:	79fb      	ldrb	r3, [r7, #7]
 800a956:	b29b      	uxth	r3, r3
 800a958:	79ba      	ldrb	r2, [r7, #6]
 800a95a:	b291      	uxth	r1, r2
 800a95c:	2201      	movs	r2, #1
 800a95e:	4618      	mov	r0, r3
 800a960:	f7ff fc22 	bl	800a1a8 <I2C2_ReadData>
 800a964:	4603      	mov	r3, r0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
	...

0800a970 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af02      	add	r7, sp, #8
 800a976:	603a      	str	r2, [r7, #0]
 800a978:	461a      	mov	r2, r3
 800a97a:	4603      	mov	r3, r0
 800a97c:	71fb      	strb	r3, [r7, #7]
 800a97e:	460b      	mov	r3, r1
 800a980:	71bb      	strb	r3, [r7, #6]
 800a982:	4613      	mov	r3, r2
 800a984:	80bb      	strh	r3, [r7, #4]
  return I2Cx_ReadMultiple(&hI2cTSHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800a986:	79bb      	ldrb	r3, [r7, #6]
 800a988:	b29a      	uxth	r2, r3
 800a98a:	79f9      	ldrb	r1, [r7, #7]
 800a98c:	88bb      	ldrh	r3, [r7, #4]
 800a98e:	9301      	str	r3, [sp, #4]
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	9300      	str	r3, [sp, #0]
 800a994:	2301      	movs	r3, #1
 800a996:	4804      	ldr	r0, [pc, #16]	; (800a9a8 <TS_IO_ReadMultiple+0x38>)
 800a998:	f7ff fcea 	bl	800a370 <I2Cx_ReadMultiple>
 800a99c:	4603      	mov	r3, r0
 800a99e:	b29b      	uxth	r3, r3
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3708      	adds	r7, #8
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	20001080 	.word	0x20001080

0800a9ac <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 800a9ba:	4b1a      	ldr	r3, [pc, #104]	; (800aa24 <BSP_IO_Init+0x78>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d128      	bne.n	800aa14 <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 800a9c2:	4b19      	ldr	r3, [pc, #100]	; (800aa28 <BSP_IO_Init+0x7c>)
 800a9c4:	695b      	ldr	r3, [r3, #20]
 800a9c6:	2084      	movs	r0, #132	; 0x84
 800a9c8:	4798      	blx	r3

    HAL_Delay(10);
 800a9ca:	200a      	movs	r0, #10
 800a9cc:	f001 f8f6 	bl	800bbbc <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 800a9d0:	4b16      	ldr	r3, [pc, #88]	; (800aa2c <BSP_IO_Init+0x80>)
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	2084      	movs	r0, #132	; 0x84
 800a9d6:	4798      	blx	r3
 800a9d8:	4603      	mov	r3, r0
 800a9da:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 800a9dc:	79bb      	ldrb	r3, [r7, #6]
 800a9de:	2b7b      	cmp	r3, #123	; 0x7b
 800a9e0:	d002      	beq.n	800a9e8 <BSP_IO_Init+0x3c>
 800a9e2:	79bb      	ldrb	r3, [r7, #6]
 800a9e4:	2b79      	cmp	r3, #121	; 0x79
 800a9e6:	d117      	bne.n	800aa18 <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 800a9e8:	4b0e      	ldr	r3, [pc, #56]	; (800aa24 <BSP_IO_Init+0x78>)
 800a9ea:	4a10      	ldr	r2, [pc, #64]	; (800aa2c <BSP_IO_Init+0x80>)
 800a9ec:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 800a9ee:	4b0d      	ldr	r3, [pc, #52]	; (800aa24 <BSP_IO_Init+0x78>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00f      	beq.n	800aa18 <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 800a9f8:	4b0a      	ldr	r3, [pc, #40]	; (800aa24 <BSP_IO_Init+0x78>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2084      	movs	r0, #132	; 0x84
 800aa00:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 800aa02:	4b08      	ldr	r3, [pc, #32]	; (800aa24 <BSP_IO_Init+0x78>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	4909      	ldr	r1, [pc, #36]	; (800aa30 <BSP_IO_Init+0x84>)
 800aa0a:	2084      	movs	r0, #132	; 0x84
 800aa0c:	4798      	blx	r3

        ret = IO_OK;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	71fb      	strb	r3, [r7, #7]
 800aa12:	e001      	b.n	800aa18 <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 800aa14:	2303      	movs	r3, #3
 800aa16:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 800aa18:	79fb      	ldrb	r3, [r7, #7]
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3708      	adds	r7, #8
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	2000117c 	.word	0x2000117c
 800aa28:	200001ec 	.word	0x200001ec
 800aa2c:	200001c0 	.word	0x200001c0
 800aa30:	000301ff 	.word	0x000301ff

0800aa34 <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 800aa40:	2300      	movs	r3, #0
 800aa42:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	4b07      	ldr	r3, [pc, #28]	; (800aa64 <BSP_IO_ConfigPin+0x30>)
 800aa48:	4013      	ands	r3, r2
 800aa4a:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 800aa4c:	4b06      	ldr	r3, [pc, #24]	; (800aa68 <BSP_IO_ConfigPin+0x34>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	78fa      	ldrb	r2, [r7, #3]
 800aa54:	68f9      	ldr	r1, [r7, #12]
 800aa56:	2084      	movs	r0, #132	; 0x84
 800aa58:	4798      	blx	r3

  return IO_OK;
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3710      	adds	r7, #16
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	000301ff 	.word	0x000301ff
 800aa68:	2000117c 	.word	0x2000117c

0800aa6c <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	460b      	mov	r3, r1
 800aa76:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	4b07      	ldr	r3, [pc, #28]	; (800aa9c <BSP_IO_WritePin+0x30>)
 800aa80:	4013      	ands	r3, r2
 800aa82:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 800aa84:	4b06      	ldr	r3, [pc, #24]	; (800aaa0 <BSP_IO_WritePin+0x34>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	695b      	ldr	r3, [r3, #20]
 800aa8a:	78fa      	ldrb	r2, [r7, #3]
 800aa8c:	68f9      	ldr	r1, [r7, #12]
 800aa8e:	2084      	movs	r0, #132	; 0x84
 800aa90:	4798      	blx	r3

}
 800aa92:	bf00      	nop
 800aa94:	3710      	adds	r7, #16
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	000301ff 	.word	0x000301ff
 800aaa0:	2000117c 	.word	0x2000117c

0800aaa4 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 800aaa8:	2001      	movs	r0, #1
 800aaaa:	f000 f803 	bl	800aab4 <BSP_LCD_InitEx>
 800aaae:	4603      	mov	r3, r0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <BSP_LCD_InitEx>:
  * @brief  Initializes the LCD with a given orientation.
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 800aabc:	2301      	movs	r3, #1
 800aabe:	73fb      	strb	r3, [r7, #15]
  uint32_t i = 0;
 800aac0:	2300      	movs	r3, #0
 800aac2:	60bb      	str	r3, [r7, #8]

  if (bsp_lcd_initialized == 1)
 800aac4:	4b33      	ldr	r3, [pc, #204]	; (800ab94 <BSP_LCD_InitEx+0xe0>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d102      	bne.n	800aad2 <BSP_LCD_InitEx+0x1e>
  {
    ret = LCD_OK;
 800aacc:	2300      	movs	r3, #0
 800aace:	73fb      	strb	r3, [r7, #15]
 800aad0:	e05b      	b.n	800ab8a <BSP_LCD_InitEx+0xd6>
  }
  else
  {
    /* Initialize the IO functionalities */
    if (BSP_IO_Init() == IO_ERROR)
 800aad2:	f7ff ff6b 	bl	800a9ac <BSP_IO_Init>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d101      	bne.n	800aae0 <BSP_LCD_InitEx+0x2c>
    {
      BSP_ErrorHandler();
 800aadc:	f7ff f991 	bl	8009e02 <BSP_ErrorHandler>
    }

    /* Initialize LCD special pins GPIOs */
    BSP_LCD_MspInit();
 800aae0:	f000 fce4 	bl	800b4ac <BSP_LCD_MspInit>

    /* LCD Power On */
    HAL_GPIO_WritePin(LCD_PWR_CTRL_GPIO_PORT, LCD_PWR_CTRL_PIN, GPIO_PIN_RESET);
 800aae4:	2200      	movs	r2, #0
 800aae6:	2101      	movs	r1, #1
 800aae8:	482b      	ldr	r0, [pc, #172]	; (800ab98 <BSP_LCD_InitEx+0xe4>)
 800aaea:	f003 f85d 	bl	800dba8 <HAL_GPIO_WritePin>

    /* Default value for draw propriety */
    DrawProp.BackColor = 0xFFFF;
 800aaee:	4b2b      	ldr	r3, [pc, #172]	; (800ab9c <BSP_LCD_InitEx+0xe8>)
 800aaf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aaf4:	605a      	str	r2, [r3, #4]
    DrawProp.pFont     = &Font24;
 800aaf6:	4b29      	ldr	r3, [pc, #164]	; (800ab9c <BSP_LCD_InitEx+0xe8>)
 800aaf8:	4a29      	ldr	r2, [pc, #164]	; (800aba0 <BSP_LCD_InitEx+0xec>)
 800aafa:	609a      	str	r2, [r3, #8]
    DrawProp.TextColor = 0x0000;
 800aafc:	4b27      	ldr	r3, [pc, #156]	; (800ab9c <BSP_LCD_InitEx+0xe8>)
 800aafe:	2200      	movs	r2, #0
 800ab00:	601a      	str	r2, [r3, #0]

    if ((WakeUpFromStandby == RESET) && (WakeUpFromShutdown == RESET))
 800ab02:	4b28      	ldr	r3, [pc, #160]	; (800aba4 <BSP_LCD_InitEx+0xf0>)
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d108      	bne.n	800ab1c <BSP_LCD_InitEx+0x68>
 800ab0a:	4b27      	ldr	r3, [pc, #156]	; (800aba8 <BSP_LCD_InitEx+0xf4>)
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d104      	bne.n	800ab1c <BSP_LCD_InitEx+0x68>
    {
      /* Backlight control signal assertion */
      HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800ab12:	2201      	movs	r2, #1
 800ab14:	2101      	movs	r1, #1
 800ab16:	4825      	ldr	r0, [pc, #148]	; (800abac <BSP_LCD_InitEx+0xf8>)
 800ab18:	f003 f846 	bl	800dba8 <HAL_GPIO_WritePin>
    }

    /* Reset the LCD */
    BSP_LCD_Reset();
 800ab1c:	f000 f850 	bl	800abc0 <BSP_LCD_Reset>

    if (ST7789H2_drv.ReadID() == ST7789H2_ID)
 800ab20:	4b23      	ldr	r3, [pc, #140]	; (800abb0 <BSP_LCD_InitEx+0xfc>)
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	4798      	blx	r3
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b85      	cmp	r3, #133	; 0x85
 800ab2a:	d12e      	bne.n	800ab8a <BSP_LCD_InitEx+0xd6>
    {
      LcdDrv = &ST7789H2_drv;
 800ab2c:	4b21      	ldr	r3, [pc, #132]	; (800abb4 <BSP_LCD_InitEx+0x100>)
 800ab2e:	4a20      	ldr	r2, [pc, #128]	; (800abb0 <BSP_LCD_InitEx+0xfc>)
 800ab30:	601a      	str	r2, [r3, #0]

      /* LCD Init */
      LcdDrv->Init();
 800ab32:	4b20      	ldr	r3, [pc, #128]	; (800abb4 <BSP_LCD_InitEx+0x100>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4798      	blx	r3

      /* Fill LCD frame memory with white pixels (or black pixels if INIT_BLACK_LCD is enabled) */
      ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t *)NULL, 0);  /* RAM Write Data */
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	2100      	movs	r1, #0
 800ab3e:	202c      	movs	r0, #44	; 0x2c
 800ab40:	f7fa fb81 	bl	8005246 <ST7789H2_WriteReg>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 800ab44:	2300      	movs	r3, #0
 800ab46:	60bb      	str	r3, [r7, #8]
 800ab48:	e006      	b.n	800ab58 <BSP_LCD_InitEx+0xa4>
      {
#if defined(INIT_BLACK_LCD)
        LCD_IO_WriteData(0x0);
#else
        LCD_IO_WriteData(0xFFFF);
 800ab4a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ab4e:	f7ff fe87 	bl	800a860 <LCD_IO_WriteData>
      for (i = 0; i < (ST7789H2_LCD_PIXEL_WIDTH * ST7789H2_LCD_PIXEL_HEIGHT); i++)
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	3301      	adds	r3, #1
 800ab56:	60bb      	str	r3, [r7, #8]
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
 800ab5e:	d3f4      	bcc.n	800ab4a <BSP_LCD_InitEx+0x96>
#endif
      }

      if (orientation == LCD_ORIENTATION_PORTRAIT)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d106      	bne.n	800ab74 <BSP_LCD_InitEx+0xc0>
      {
        ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT);
 800ab66:	2000      	movs	r0, #0
 800ab68:	f7fa fa6b 	bl	8005042 <ST7789H2_SetOrientation>
        LCD_orientation = LCD_ORIENTATION_PORTRAIT;
 800ab6c:	4b12      	ldr	r3, [pc, #72]	; (800abb8 <BSP_LCD_InitEx+0x104>)
 800ab6e:	2200      	movs	r2, #0
 800ab70:	701a      	strb	r2, [r3, #0]
 800ab72:	e002      	b.n	800ab7a <BSP_LCD_InitEx+0xc6>
      }
      else
      {
        LCD_orientation = LCD_ORIENTATION_LANDSCAPE;
 800ab74:	4b10      	ldr	r3, [pc, #64]	; (800abb8 <BSP_LCD_InitEx+0x104>)
 800ab76:	2201      	movs	r2, #1
 800ab78:	701a      	strb	r2, [r3, #0]
      }
      /* Initialize the font */
      BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800ab7a:	4810      	ldr	r0, [pc, #64]	; (800abbc <BSP_LCD_InitEx+0x108>)
 800ab7c:	f000 f868 	bl	800ac50 <BSP_LCD_SetFont>

      bsp_lcd_initialized = 1;
 800ab80:	4b04      	ldr	r3, [pc, #16]	; (800ab94 <BSP_LCD_InitEx+0xe0>)
 800ab82:	2201      	movs	r2, #1
 800ab84:	601a      	str	r2, [r3, #0]
      ret = LCD_OK;
 800ab86:	2300      	movs	r3, #0
 800ab88:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ab8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3710      	adds	r7, #16
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	20001180 	.word	0x20001180
 800ab98:	48001c00 	.word	0x48001c00
 800ab9c:	200011f4 	.word	0x200011f4
 800aba0:	20000534 	.word	0x20000534
 800aba4:	200011f0 	.word	0x200011f0
 800aba8:	200011f1 	.word	0x200011f1
 800abac:	48002000 	.word	0x48002000
 800abb0:	20000238 	.word	0x20000238
 800abb4:	20001200 	.word	0x20001200
 800abb8:	20000544 	.word	0x20000544
 800abbc:	2000053c 	.word	0x2000053c

0800abc0 <BSP_LCD_Reset>:
  * @brief  Reset the LCD.
  * @param  None
  * @retval LCD state
  */
void BSP_LCD_Reset(void)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	af00      	add	r7, sp, #0
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 800abc4:	2100      	movs	r1, #0
 800abc6:	2004      	movs	r0, #4
 800abc8:	f7ff ff50 	bl	800aa6c <BSP_IO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 800abcc:	2005      	movs	r0, #5
 800abce:	f000 fff5 	bl	800bbbc <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 800abd2:	2101      	movs	r1, #1
 800abd4:	2004      	movs	r0, #4
 800abd6:	f7ff ff49 	bl	800aa6c <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 800abda:	200a      	movs	r0, #10
 800abdc:	f000 ffee 	bl	800bbbc <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_RESET);
 800abe0:	2100      	movs	r1, #0
 800abe2:	2004      	movs	r0, #4
 800abe4:	f7ff ff42 	bl	800aa6c <BSP_IO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 800abe8:	2014      	movs	r0, #20
 800abea:	f000 ffe7 	bl	800bbbc <HAL_Delay>
  BSP_IO_WritePin(LCD_RST_PIN, GPIO_PIN_SET);
 800abee:	2101      	movs	r1, #1
 800abf0:	2004      	movs	r0, #4
 800abf2:	f7ff ff3b 	bl	800aa6c <BSP_IO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 800abf6:	200a      	movs	r0, #10
 800abf8:	f000 ffe0 	bl	800bbbc <HAL_Delay>
}
 800abfc:	bf00      	nop
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelWidth());
 800ac04:	4b03      	ldr	r3, [pc, #12]	; (800ac14 <BSP_LCD_GetXSize+0x14>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac0a:	4798      	blx	r3
 800ac0c:	4603      	mov	r3, r0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	20001200 	.word	0x20001200

0800ac18 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	af00      	add	r7, sp, #0
  return (LcdDrv->GetLcdPixelHeight());
 800ac1c:	4b03      	ldr	r3, [pc, #12]	; (800ac2c <BSP_LCD_GetYSize+0x14>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac22:	4798      	blx	r3
 800ac24:	4603      	mov	r3, r0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	20001200 	.word	0x20001200

0800ac30 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	4603      	mov	r3, r0
 800ac38:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 800ac3a:	88fb      	ldrh	r3, [r7, #6]
 800ac3c:	4a03      	ldr	r2, [pc, #12]	; (800ac4c <BSP_LCD_SetTextColor+0x1c>)
 800ac3e:	6013      	str	r3, [r2, #0]
}
 800ac40:	bf00      	nop
 800ac42:	370c      	adds	r7, #12
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr
 800ac4c:	200011f4 	.word	0x200011f4

0800ac50 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 800ac58:	4a04      	ldr	r2, [pc, #16]	; (800ac6c <BSP_LCD_SetFont+0x1c>)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6093      	str	r3, [r2, #8]
}
 800ac5e:	bf00      	nop
 800ac60:	370c      	adds	r7, #12
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	200011f4 	.word	0x200011f4

0800ac70 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 800ac70:	b590      	push	{r4, r7, lr}
 800ac72:	b087      	sub	sp, #28
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	4603      	mov	r3, r0
 800ac78:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor;
 800ac82:	4b15      	ldr	r3, [pc, #84]	; (800acd8 <BSP_LCD_Clear+0x68>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 800ac88:	88fb      	ldrh	r3, [r7, #6]
 800ac8a:	4a13      	ldr	r2, [pc, #76]	; (800acd8 <BSP_LCD_Clear+0x68>)
 800ac8c:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 800ac8e:	f7ff ffc3 	bl	800ac18 <BSP_LCD_GetYSize>
 800ac92:	6138      	str	r0, [r7, #16]

  for (counter = 0; counter < y_size; counter++)
 800ac94:	2300      	movs	r3, #0
 800ac96:	617b      	str	r3, [r7, #20]
 800ac98:	e00d      	b.n	800acb6 <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	b29c      	uxth	r4, r3
 800ac9e:	f7ff ffaf 	bl	800ac00 <BSP_LCD_GetXSize>
 800aca2:	4603      	mov	r3, r0
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	461a      	mov	r2, r3
 800aca8:	4621      	mov	r1, r4
 800acaa:	2000      	movs	r0, #0
 800acac:	f000 f8e8 	bl	800ae80 <BSP_LCD_DrawHLine>
  for (counter = 0; counter < y_size; counter++)
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	3301      	adds	r3, #1
 800acb4:	617b      	str	r3, [r7, #20]
 800acb6:	697a      	ldr	r2, [r7, #20]
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	429a      	cmp	r2, r3
 800acbc:	d3ed      	bcc.n	800ac9a <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup;
 800acbe:	4a06      	ldr	r2, [pc, #24]	; (800acd8 <BSP_LCD_Clear+0x68>)
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800acc4:	4b04      	ldr	r3, [pc, #16]	; (800acd8 <BSP_LCD_Clear+0x68>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	b29b      	uxth	r3, r3
 800acca:	4618      	mov	r0, r3
 800accc:	f7ff ffb0 	bl	800ac30 <BSP_LCD_SetTextColor>
}
 800acd0:	bf00      	nop
 800acd2:	371c      	adds	r7, #28
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd90      	pop	{r4, r7, pc}
 800acd8:	200011f4 	.word	0x200011f4

0800acdc <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	4603      	mov	r3, r0
 800ace4:	80fb      	strh	r3, [r7, #6]
 800ace6:	460b      	mov	r3, r1
 800ace8:	80bb      	strh	r3, [r7, #4]
 800acea:	4613      	mov	r3, r2
 800acec:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800acee:	4b0f      	ldr	r3, [pc, #60]	; (800ad2c <BSP_LCD_DisplayChar+0x50>)
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	78fb      	ldrb	r3, [r7, #3]
 800acf6:	3b20      	subs	r3, #32
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800acf8:	490c      	ldr	r1, [pc, #48]	; (800ad2c <BSP_LCD_DisplayChar+0x50>)
 800acfa:	6889      	ldr	r1, [r1, #8]
 800acfc:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800acfe:	fb03 f101 	mul.w	r1, r3, r1
                                              DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 800ad02:	4b0a      	ldr	r3, [pc, #40]	; (800ad2c <BSP_LCD_DisplayChar+0x50>)
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	889b      	ldrh	r3, [r3, #4]
 800ad08:	3307      	adds	r3, #7
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	da00      	bge.n	800ad10 <BSP_LCD_DisplayChar+0x34>
 800ad0e:	3307      	adds	r3, #7
 800ad10:	10db      	asrs	r3, r3, #3
 800ad12:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii - ' ') *\
 800ad16:	441a      	add	r2, r3
 800ad18:	88b9      	ldrh	r1, [r7, #4]
 800ad1a:	88fb      	ldrh	r3, [r7, #6]
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f000 fc21 	bl	800b564 <DrawChar>
}
 800ad22:	bf00      	nop
 800ad24:	3708      	adds	r7, #8
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	200011f4 	.word	0x200011f4

0800ad30 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b088      	sub	sp, #32
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60ba      	str	r2, [r7, #8]
 800ad38:	461a      	mov	r2, r3
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	81fb      	strh	r3, [r7, #14]
 800ad3e:	460b      	mov	r3, r1
 800ad40:	81bb      	strh	r3, [r7, #12]
 800ad42:	4613      	mov	r3, r2
 800ad44:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800ad46:	2301      	movs	r3, #1
 800ad48:	83fb      	strh	r3, [r7, #30]
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	61bb      	str	r3, [r7, #24]
 800ad52:	2300      	movs	r3, #0
 800ad54:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++)
 800ad5a:	e002      	b.n	800ad62 <BSP_LCD_DisplayStringAt+0x32>
  {
    size ++ ;
 800ad5c:	69bb      	ldr	r3, [r7, #24]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	61bb      	str	r3, [r7, #24]
  while (*ptr++)
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	1c5a      	adds	r2, r3, #1
 800ad66:	617a      	str	r2, [r7, #20]
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d1f6      	bne.n	800ad5c <BSP_LCD_DisplayStringAt+0x2c>
  }

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp.pFont->Width);
 800ad6e:	f7ff ff47 	bl	800ac00 <BSP_LCD_GetXSize>
 800ad72:	4602      	mov	r2, r0
 800ad74:	4b33      	ldr	r3, [pc, #204]	; (800ae44 <BSP_LCD_DisplayStringAt+0x114>)
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	889b      	ldrh	r3, [r3, #4]
 800ad7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad7e:	613b      	str	r3, [r7, #16]

  switch (Mode)
 800ad80:	79fb      	ldrb	r3, [r7, #7]
 800ad82:	2b03      	cmp	r3, #3
 800ad84:	d014      	beq.n	800adb0 <BSP_LCD_DisplayStringAt+0x80>
 800ad86:	2b03      	cmp	r3, #3
 800ad88:	dc23      	bgt.n	800add2 <BSP_LCD_DisplayStringAt+0xa2>
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d002      	beq.n	800ad94 <BSP_LCD_DisplayStringAt+0x64>
 800ad8e:	2b02      	cmp	r3, #2
 800ad90:	d011      	beq.n	800adb6 <BSP_LCD_DisplayStringAt+0x86>
 800ad92:	e01e      	b.n	800add2 <BSP_LCD_DisplayStringAt+0xa2>
  {
    case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size) * DrawProp.pFont->Width) / 2;
 800ad94:	693a      	ldr	r2, [r7, #16]
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	1ad3      	subs	r3, r2, r3
 800ad9a:	4a2a      	ldr	r2, [pc, #168]	; (800ae44 <BSP_LCD_DisplayStringAt+0x114>)
 800ad9c:	6892      	ldr	r2, [r2, #8]
 800ad9e:	8892      	ldrh	r2, [r2, #4]
 800ada0:	fb02 f303 	mul.w	r3, r2, r3
 800ada4:	085b      	lsrs	r3, r3, #1
 800ada6:	b29a      	uxth	r2, r3
 800ada8:	89fb      	ldrh	r3, [r7, #14]
 800adaa:	4413      	add	r3, r2
 800adac:	83fb      	strh	r3, [r7, #30]
      break;
 800adae:	e013      	b.n	800add8 <BSP_LCD_DisplayStringAt+0xa8>
    }
    case LEFT_MODE:
    {
      refcolumn = Xpos;
 800adb0:	89fb      	ldrh	r3, [r7, #14]
 800adb2:	83fb      	strh	r3, [r7, #30]
      break;
 800adb4:	e010      	b.n	800add8 <BSP_LCD_DisplayStringAt+0xa8>
    }
    case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size) * DrawProp.pFont->Width);
 800adb6:	693a      	ldr	r2, [r7, #16]
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	4b21      	ldr	r3, [pc, #132]	; (800ae44 <BSP_LCD_DisplayStringAt+0x114>)
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	889b      	ldrh	r3, [r3, #4]
 800adc4:	fb12 f303 	smulbb	r3, r2, r3
 800adc8:	b29a      	uxth	r2, r3
 800adca:	89fb      	ldrh	r3, [r7, #14]
 800adcc:	1ad3      	subs	r3, r2, r3
 800adce:	83fb      	strh	r3, [r7, #30]
      break;
 800add0:	e002      	b.n	800add8 <BSP_LCD_DisplayStringAt+0xa8>
    }
    default:
    {
      refcolumn = Xpos;
 800add2:	89fb      	ldrh	r3, [r7, #14]
 800add4:	83fb      	strh	r3, [r7, #30]
      break;
 800add6:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 800add8:	8bfb      	ldrh	r3, [r7, #30]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d003      	beq.n	800ade6 <BSP_LCD_DisplayStringAt+0xb6>
 800adde:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	da15      	bge.n	800ae12 <BSP_LCD_DisplayStringAt+0xe2>
  {
    refcolumn = 1;
 800ade6:	2301      	movs	r3, #1
 800ade8:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800adea:	e012      	b.n	800ae12 <BSP_LCD_DisplayStringAt+0xe2>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	781a      	ldrb	r2, [r3, #0]
 800adf0:	89b9      	ldrh	r1, [r7, #12]
 800adf2:	8bfb      	ldrh	r3, [r7, #30]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f7ff ff71 	bl	800acdc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 800adfa:	4b12      	ldr	r3, [pc, #72]	; (800ae44 <BSP_LCD_DisplayStringAt+0x114>)
 800adfc:	689b      	ldr	r3, [r3, #8]
 800adfe:	889a      	ldrh	r2, [r3, #4]
 800ae00:	8bfb      	ldrh	r3, [r7, #30]
 800ae02:	4413      	add	r3, r2
 800ae04:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	3301      	adds	r3, #1
 800ae0a:	60bb      	str	r3, [r7, #8]
    i++;
 800ae0c:	8bbb      	ldrh	r3, [r7, #28]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) && (((BSP_LCD_GetXSize() - (i * DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d00f      	beq.n	800ae3a <BSP_LCD_DisplayStringAt+0x10a>
 800ae1a:	f7ff fef1 	bl	800ac00 <BSP_LCD_GetXSize>
 800ae1e:	4601      	mov	r1, r0
 800ae20:	8bbb      	ldrh	r3, [r7, #28]
 800ae22:	4a08      	ldr	r2, [pc, #32]	; (800ae44 <BSP_LCD_DisplayStringAt+0x114>)
 800ae24:	6892      	ldr	r2, [r2, #8]
 800ae26:	8892      	ldrh	r2, [r2, #4]
 800ae28:	fb02 f303 	mul.w	r3, r2, r3
 800ae2c:	1acb      	subs	r3, r1, r3
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	4a04      	ldr	r2, [pc, #16]	; (800ae44 <BSP_LCD_DisplayStringAt+0x114>)
 800ae32:	6892      	ldr	r2, [r2, #8]
 800ae34:	8892      	ldrh	r2, [r2, #4]
 800ae36:	4293      	cmp	r3, r2
 800ae38:	d2d8      	bcs.n	800adec <BSP_LCD_DisplayStringAt+0xbc>
  }
}
 800ae3a:	bf00      	nop
 800ae3c:	3720      	adds	r7, #32
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
 800ae42:	bf00      	nop
 800ae44:	200011f4 	.word	0x200011f4

0800ae48 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	4603      	mov	r3, r0
 800ae50:	80fb      	strh	r3, [r7, #6]
 800ae52:	460b      	mov	r3, r1
 800ae54:	80bb      	strh	r3, [r7, #4]
 800ae56:	4613      	mov	r3, r2
 800ae58:	807b      	strh	r3, [r7, #2]
  if (LcdDrv->WritePixel != NULL)
 800ae5a:	4b08      	ldr	r3, [pc, #32]	; (800ae7c <BSP_LCD_DrawPixel+0x34>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	695b      	ldr	r3, [r3, #20]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d006      	beq.n	800ae72 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 800ae64:	4b05      	ldr	r3, [pc, #20]	; (800ae7c <BSP_LCD_DrawPixel+0x34>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	695b      	ldr	r3, [r3, #20]
 800ae6a:	887a      	ldrh	r2, [r7, #2]
 800ae6c:	88b9      	ldrh	r1, [r7, #4]
 800ae6e:	88f8      	ldrh	r0, [r7, #6]
 800ae70:	4798      	blx	r3
  }
}
 800ae72:	bf00      	nop
 800ae74:	3708      	adds	r7, #8
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	20001200 	.word	0x20001200

0800ae80 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800ae80:	b590      	push	{r4, r7, lr}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	4603      	mov	r3, r0
 800ae88:	80fb      	strh	r3, [r7, #6]
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	80bb      	strh	r3, [r7, #4]
 800ae8e:	4613      	mov	r3, r2
 800ae90:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 800ae92:	2300      	movs	r3, #0
 800ae94:	60fb      	str	r3, [r7, #12]

  if (LcdDrv->DrawHLine != NULL)
 800ae96:	4b15      	ldr	r3, [pc, #84]	; (800aeec <BSP_LCD_DrawHLine+0x6c>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	6a1b      	ldr	r3, [r3, #32]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00a      	beq.n	800aeb6 <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 800aea0:	4b12      	ldr	r3, [pc, #72]	; (800aeec <BSP_LCD_DrawHLine+0x6c>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	6a1c      	ldr	r4, [r3, #32]
 800aea6:	4b12      	ldr	r3, [pc, #72]	; (800aef0 <BSP_LCD_DrawHLine+0x70>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	b298      	uxth	r0, r3
 800aeac:	887b      	ldrh	r3, [r7, #2]
 800aeae:	88ba      	ldrh	r2, [r7, #4]
 800aeb0:	88f9      	ldrh	r1, [r7, #6]
 800aeb2:	47a0      	blx	r4
    for (index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 800aeb4:	e015      	b.n	800aee2 <BSP_LCD_DrawHLine+0x62>
    for (index = 0; index < Length; index++)
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	60fb      	str	r3, [r7, #12]
 800aeba:	e00e      	b.n	800aeda <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	b29a      	uxth	r2, r3
 800aec0:	88fb      	ldrh	r3, [r7, #6]
 800aec2:	4413      	add	r3, r2
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	4a0a      	ldr	r2, [pc, #40]	; (800aef0 <BSP_LCD_DrawHLine+0x70>)
 800aec8:	6812      	ldr	r2, [r2, #0]
 800aeca:	b292      	uxth	r2, r2
 800aecc:	88b9      	ldrh	r1, [r7, #4]
 800aece:	4618      	mov	r0, r3
 800aed0:	f7ff ffba 	bl	800ae48 <BSP_LCD_DrawPixel>
    for (index = 0; index < Length; index++)
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	3301      	adds	r3, #1
 800aed8:	60fb      	str	r3, [r7, #12]
 800aeda:	887b      	ldrh	r3, [r7, #2]
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d3ec      	bcc.n	800aebc <BSP_LCD_DrawHLine+0x3c>
}
 800aee2:	bf00      	nop
 800aee4:	3714      	adds	r7, #20
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd90      	pop	{r4, r7, pc}
 800aeea:	bf00      	nop
 800aeec:	20001200 	.word	0x20001200
 800aef0:	200011f4 	.word	0x200011f4

0800aef4 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	4603      	mov	r3, r0
 800aefc:	80fb      	strh	r3, [r7, #6]
 800aefe:	460b      	mov	r3, r1
 800af00:	80bb      	strh	r3, [r7, #4]
 800af02:	4613      	mov	r3, r2
 800af04:	807b      	strh	r3, [r7, #2]
  int32_t  decision;       /* Decision Variable */
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */

  decision = 3 - (Radius << 1);
 800af06:	887b      	ldrh	r3, [r7, #2]
 800af08:	005b      	lsls	r3, r3, #1
 800af0a:	f1c3 0303 	rsb	r3, r3, #3
 800af0e:	617b      	str	r3, [r7, #20]
  current_x = 0;
 800af10:	2300      	movs	r3, #0
 800af12:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800af14:	887b      	ldrh	r3, [r7, #2]
 800af16:	60fb      	str	r3, [r7, #12]

  while (current_x <= current_y)
 800af18:	e09a      	b.n	800b050 <BSP_LCD_DrawCircle+0x15c>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp.TextColor);
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	b29a      	uxth	r2, r3
 800af1e:	88fb      	ldrh	r3, [r7, #6]
 800af20:	4413      	add	r3, r2
 800af22:	b298      	uxth	r0, r3
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	b29b      	uxth	r3, r3
 800af28:	88ba      	ldrh	r2, [r7, #4]
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	b29b      	uxth	r3, r3
 800af2e:	4a4d      	ldr	r2, [pc, #308]	; (800b064 <BSP_LCD_DrawCircle+0x170>)
 800af30:	6812      	ldr	r2, [r2, #0]
 800af32:	b292      	uxth	r2, r2
 800af34:	4619      	mov	r1, r3
 800af36:	f7ff ff87 	bl	800ae48 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp.TextColor);
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	88fa      	ldrh	r2, [r7, #6]
 800af40:	1ad3      	subs	r3, r2, r3
 800af42:	b298      	uxth	r0, r3
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	b29b      	uxth	r3, r3
 800af48:	88ba      	ldrh	r2, [r7, #4]
 800af4a:	1ad3      	subs	r3, r2, r3
 800af4c:	b29b      	uxth	r3, r3
 800af4e:	4a45      	ldr	r2, [pc, #276]	; (800b064 <BSP_LCD_DrawCircle+0x170>)
 800af50:	6812      	ldr	r2, [r2, #0]
 800af52:	b292      	uxth	r2, r2
 800af54:	4619      	mov	r1, r3
 800af56:	f7ff ff77 	bl	800ae48 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp.TextColor);
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	b29a      	uxth	r2, r3
 800af5e:	88fb      	ldrh	r3, [r7, #6]
 800af60:	4413      	add	r3, r2
 800af62:	b298      	uxth	r0, r3
 800af64:	693b      	ldr	r3, [r7, #16]
 800af66:	b29b      	uxth	r3, r3
 800af68:	88ba      	ldrh	r2, [r7, #4]
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	4a3d      	ldr	r2, [pc, #244]	; (800b064 <BSP_LCD_DrawCircle+0x170>)
 800af70:	6812      	ldr	r2, [r2, #0]
 800af72:	b292      	uxth	r2, r2
 800af74:	4619      	mov	r1, r3
 800af76:	f7ff ff67 	bl	800ae48 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp.TextColor);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	88fa      	ldrh	r2, [r7, #6]
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	b298      	uxth	r0, r3
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	b29b      	uxth	r3, r3
 800af88:	88ba      	ldrh	r2, [r7, #4]
 800af8a:	1ad3      	subs	r3, r2, r3
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	4a35      	ldr	r2, [pc, #212]	; (800b064 <BSP_LCD_DrawCircle+0x170>)
 800af90:	6812      	ldr	r2, [r2, #0]
 800af92:	b292      	uxth	r2, r2
 800af94:	4619      	mov	r1, r3
 800af96:	f7ff ff57 	bl	800ae48 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp.TextColor);
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	b29a      	uxth	r2, r3
 800af9e:	88fb      	ldrh	r3, [r7, #6]
 800afa0:	4413      	add	r3, r2
 800afa2:	b298      	uxth	r0, r3
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	88bb      	ldrh	r3, [r7, #4]
 800afaa:	4413      	add	r3, r2
 800afac:	b29b      	uxth	r3, r3
 800afae:	4a2d      	ldr	r2, [pc, #180]	; (800b064 <BSP_LCD_DrawCircle+0x170>)
 800afb0:	6812      	ldr	r2, [r2, #0]
 800afb2:	b292      	uxth	r2, r2
 800afb4:	4619      	mov	r1, r3
 800afb6:	f7ff ff47 	bl	800ae48 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp.TextColor);
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	88fa      	ldrh	r2, [r7, #6]
 800afc0:	1ad3      	subs	r3, r2, r3
 800afc2:	b298      	uxth	r0, r3
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	b29a      	uxth	r2, r3
 800afc8:	88bb      	ldrh	r3, [r7, #4]
 800afca:	4413      	add	r3, r2
 800afcc:	b29b      	uxth	r3, r3
 800afce:	4a25      	ldr	r2, [pc, #148]	; (800b064 <BSP_LCD_DrawCircle+0x170>)
 800afd0:	6812      	ldr	r2, [r2, #0]
 800afd2:	b292      	uxth	r2, r2
 800afd4:	4619      	mov	r1, r3
 800afd6:	f7ff ff37 	bl	800ae48 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp.TextColor);
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	b29a      	uxth	r2, r3
 800afde:	88fb      	ldrh	r3, [r7, #6]
 800afe0:	4413      	add	r3, r2
 800afe2:	b298      	uxth	r0, r3
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	b29a      	uxth	r2, r3
 800afe8:	88bb      	ldrh	r3, [r7, #4]
 800afea:	4413      	add	r3, r2
 800afec:	b29b      	uxth	r3, r3
 800afee:	4a1d      	ldr	r2, [pc, #116]	; (800b064 <BSP_LCD_DrawCircle+0x170>)
 800aff0:	6812      	ldr	r2, [r2, #0]
 800aff2:	b292      	uxth	r2, r2
 800aff4:	4619      	mov	r1, r3
 800aff6:	f7ff ff27 	bl	800ae48 <BSP_LCD_DrawPixel>

    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp.TextColor);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	b29b      	uxth	r3, r3
 800affe:	88fa      	ldrh	r2, [r7, #6]
 800b000:	1ad3      	subs	r3, r2, r3
 800b002:	b298      	uxth	r0, r3
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	b29a      	uxth	r2, r3
 800b008:	88bb      	ldrh	r3, [r7, #4]
 800b00a:	4413      	add	r3, r2
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	4a15      	ldr	r2, [pc, #84]	; (800b064 <BSP_LCD_DrawCircle+0x170>)
 800b010:	6812      	ldr	r2, [r2, #0]
 800b012:	b292      	uxth	r2, r2
 800b014:	4619      	mov	r1, r3
 800b016:	f7ff ff17 	bl	800ae48 <BSP_LCD_DrawPixel>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800b01a:	4813      	ldr	r0, [pc, #76]	; (800b068 <BSP_LCD_DrawCircle+0x174>)
 800b01c:	f7ff fe18 	bl	800ac50 <BSP_LCD_SetFont>

    if (decision < 0)
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	2b00      	cmp	r3, #0
 800b024:	da06      	bge.n	800b034 <BSP_LCD_DrawCircle+0x140>
    {
      decision += (current_x << 2) + 6;
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	009a      	lsls	r2, r3, #2
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	4413      	add	r3, r2
 800b02e:	3306      	adds	r3, #6
 800b030:	617b      	str	r3, [r7, #20]
 800b032:	e00a      	b.n	800b04a <BSP_LCD_DrawCircle+0x156>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800b034:	693a      	ldr	r2, [r7, #16]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	1ad3      	subs	r3, r2, r3
 800b03a:	009a      	lsls	r2, r3, #2
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	4413      	add	r3, r2
 800b040:	330a      	adds	r3, #10
 800b042:	617b      	str	r3, [r7, #20]
      current_y--;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	3b01      	subs	r3, #1
 800b048:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	3301      	adds	r3, #1
 800b04e:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800b050:	693a      	ldr	r2, [r7, #16]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	429a      	cmp	r2, r3
 800b056:	f67f af60 	bls.w	800af1a <BSP_LCD_DrawCircle+0x26>
  }
}
 800b05a:	bf00      	nop
 800b05c:	bf00      	nop
 800b05e:	3718      	adds	r7, #24
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}
 800b064:	200011f4 	.word	0x200011f4
 800b068:	2000053c 	.word	0x2000053c

0800b06c <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b086      	sub	sp, #24
 800b070:	af00      	add	r7, sp, #0
 800b072:	4603      	mov	r3, r0
 800b074:	80fb      	strh	r3, [r7, #6]
 800b076:	460b      	mov	r3, r1
 800b078:	80bb      	strh	r3, [r7, #4]
 800b07a:	4613      	mov	r3, r2
 800b07c:	807b      	strh	r3, [r7, #2]
  int32_t  decision;        /* Decision Variable */
  uint32_t  current_x;    /* Current X Value */
  uint32_t  current_y;    /* Current Y Value */

  decision = 3 - (Radius << 1);
 800b07e:	887b      	ldrh	r3, [r7, #2]
 800b080:	005b      	lsls	r3, r3, #1
 800b082:	f1c3 0303 	rsb	r3, r3, #3
 800b086:	617b      	str	r3, [r7, #20]

  current_x = 0;
 800b088:	2300      	movs	r3, #0
 800b08a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800b08c:	887b      	ldrh	r3, [r7, #2]
 800b08e:	60fb      	str	r3, [r7, #12]

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800b090:	4b3e      	ldr	r3, [pc, #248]	; (800b18c <BSP_LCD_FillCircle+0x120>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	b29b      	uxth	r3, r3
 800b096:	4618      	mov	r0, r3
 800b098:	f7ff fdca 	bl	800ac30 <BSP_LCD_SetTextColor>

  while (current_x <= current_y)
 800b09c:	e061      	b.n	800b162 <BSP_LCD_FillCircle+0xf6>
  {
    if (current_y > 0)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d021      	beq.n	800b0e8 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2 * current_y);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	88fa      	ldrh	r2, [r7, #6]
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	b298      	uxth	r0, r3
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	b29a      	uxth	r2, r3
 800b0b2:	88bb      	ldrh	r3, [r7, #4]
 800b0b4:	4413      	add	r3, r2
 800b0b6:	b299      	uxth	r1, r3
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	005b      	lsls	r3, r3, #1
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	f7ff fedd 	bl	800ae80 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2 * current_y);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	88fa      	ldrh	r2, [r7, #6]
 800b0cc:	1ad3      	subs	r3, r2, r3
 800b0ce:	b298      	uxth	r0, r3
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	88ba      	ldrh	r2, [r7, #4]
 800b0d6:	1ad3      	subs	r3, r2, r3
 800b0d8:	b299      	uxth	r1, r3
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	005b      	lsls	r3, r3, #1
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	f7ff fecc 	bl	800ae80 <BSP_LCD_DrawHLine>
    }

    if (current_x > 0)
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d021      	beq.n	800b132 <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2 * current_x);
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	88fa      	ldrh	r2, [r7, #6]
 800b0f4:	1ad3      	subs	r3, r2, r3
 800b0f6:	b298      	uxth	r0, r3
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	88ba      	ldrh	r2, [r7, #4]
 800b0fe:	1ad3      	subs	r3, r2, r3
 800b100:	b299      	uxth	r1, r3
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	b29b      	uxth	r3, r3
 800b106:	005b      	lsls	r3, r3, #1
 800b108:	b29b      	uxth	r3, r3
 800b10a:	461a      	mov	r2, r3
 800b10c:	f7ff feb8 	bl	800ae80 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2 * current_x);
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	b29b      	uxth	r3, r3
 800b114:	88fa      	ldrh	r2, [r7, #6]
 800b116:	1ad3      	subs	r3, r2, r3
 800b118:	b298      	uxth	r0, r3
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	b29a      	uxth	r2, r3
 800b11e:	88bb      	ldrh	r3, [r7, #4]
 800b120:	4413      	add	r3, r2
 800b122:	b299      	uxth	r1, r3
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	b29b      	uxth	r3, r3
 800b128:	005b      	lsls	r3, r3, #1
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	461a      	mov	r2, r3
 800b12e:	f7ff fea7 	bl	800ae80 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	2b00      	cmp	r3, #0
 800b136:	da06      	bge.n	800b146 <BSP_LCD_FillCircle+0xda>
    {
      decision += (current_x << 2) + 6;
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	009a      	lsls	r2, r3, #2
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	4413      	add	r3, r2
 800b140:	3306      	adds	r3, #6
 800b142:	617b      	str	r3, [r7, #20]
 800b144:	e00a      	b.n	800b15c <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800b146:	693a      	ldr	r2, [r7, #16]
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	1ad3      	subs	r3, r2, r3
 800b14c:	009a      	lsls	r2, r3, #2
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	4413      	add	r3, r2
 800b152:	330a      	adds	r3, #10
 800b154:	617b      	str	r3, [r7, #20]
      current_y--;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	3b01      	subs	r3, #1
 800b15a:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	3301      	adds	r3, #1
 800b160:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800b162:	693a      	ldr	r2, [r7, #16]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	429a      	cmp	r2, r3
 800b168:	d999      	bls.n	800b09e <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_SetTextColor(DrawProp.TextColor);
 800b16a:	4b08      	ldr	r3, [pc, #32]	; (800b18c <BSP_LCD_FillCircle+0x120>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	b29b      	uxth	r3, r3
 800b170:	4618      	mov	r0, r3
 800b172:	f7ff fd5d 	bl	800ac30 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800b176:	887a      	ldrh	r2, [r7, #2]
 800b178:	88b9      	ldrh	r1, [r7, #4]
 800b17a:	88fb      	ldrh	r3, [r7, #6]
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7ff feb9 	bl	800aef4 <BSP_LCD_DrawCircle>
}
 800b182:	bf00      	nop
 800b184:	3718      	adds	r7, #24
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	200011f4 	.word	0x200011f4

0800b190 <BSP_LCD_DisplayOn>:
  * @brief  Enables the display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	af00      	add	r7, sp, #0
  LcdDrv->DisplayOn();
 800b194:	4b02      	ldr	r3, [pc, #8]	; (800b1a0 <BSP_LCD_DisplayOn+0x10>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	4798      	blx	r3
}
 800b19c:	bf00      	nop
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	20001200 	.word	0x20001200

0800b1a4 <BSP_LCD_DisplayOff>:
  * @brief  Disables the display.
  * @param  None
  * @retval None
  */
void BSP_LCD_DisplayOff(void)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	af00      	add	r7, sp, #0
  LcdDrv->DisplayOff();
 800b1a8:	4b02      	ldr	r3, [pc, #8]	; (800b1b4 <BSP_LCD_DisplayOff+0x10>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	4798      	blx	r3
}
 800b1b0:	bf00      	nop
 800b1b2:	bd80      	pop	{r7, pc}
 800b1b4:	20001200 	.word	0x20001200

0800b1b8 <BSP_LCD_ScreenDimmingConfig>:
  * @param  step    : step value in percent
  * @param  delay   : delay in milliseconds between each step
  * @retval None
  */
void BSP_LCD_ScreenDimmingConfig(const uint8_t start, const uint8_t stop, const uint8_t step, const uint8_t delay)
{
 800b1b8:	b490      	push	{r4, r7}
 800b1ba:	b082      	sub	sp, #8
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	4604      	mov	r4, r0
 800b1c0:	4608      	mov	r0, r1
 800b1c2:	4611      	mov	r1, r2
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	4623      	mov	r3, r4
 800b1c8:	71fb      	strb	r3, [r7, #7]
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	71bb      	strb	r3, [r7, #6]
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	717b      	strb	r3, [r7, #5]
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	713b      	strb	r3, [r7, #4]
  if ((dimming_config.ongoing == 0)
 800b1d6:	4b10      	ldr	r3, [pc, #64]	; (800b218 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d117      	bne.n	800b20e <BSP_LCD_ScreenDimmingConfig+0x56>
      && (start <= 100) && (stop <= 100)
 800b1de:	79fb      	ldrb	r3, [r7, #7]
 800b1e0:	2b64      	cmp	r3, #100	; 0x64
 800b1e2:	d814      	bhi.n	800b20e <BSP_LCD_ScreenDimmingConfig+0x56>
 800b1e4:	79bb      	ldrb	r3, [r7, #6]
 800b1e6:	2b64      	cmp	r3, #100	; 0x64
 800b1e8:	d811      	bhi.n	800b20e <BSP_LCD_ScreenDimmingConfig+0x56>
      && (step > 0) && (step < 100))
 800b1ea:	797b      	ldrb	r3, [r7, #5]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00e      	beq.n	800b20e <BSP_LCD_ScreenDimmingConfig+0x56>
 800b1f0:	797b      	ldrb	r3, [r7, #5]
 800b1f2:	2b63      	cmp	r3, #99	; 0x63
 800b1f4:	d80b      	bhi.n	800b20e <BSP_LCD_ScreenDimmingConfig+0x56>
  {
    dimming_config.start = start;
 800b1f6:	4a08      	ldr	r2, [pc, #32]	; (800b218 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800b1f8:	79fb      	ldrb	r3, [r7, #7]
 800b1fa:	7053      	strb	r3, [r2, #1]
    dimming_config.stop  = stop;
 800b1fc:	4a06      	ldr	r2, [pc, #24]	; (800b218 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800b1fe:	79bb      	ldrb	r3, [r7, #6]
 800b200:	7093      	strb	r3, [r2, #2]
    dimming_config.step  = step;
 800b202:	4a05      	ldr	r2, [pc, #20]	; (800b218 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800b204:	797b      	ldrb	r3, [r7, #5]
 800b206:	70d3      	strb	r3, [r2, #3]
    dimming_config.delay = delay;
 800b208:	4a03      	ldr	r2, [pc, #12]	; (800b218 <BSP_LCD_ScreenDimmingConfig+0x60>)
 800b20a:	793b      	ldrb	r3, [r7, #4]
 800b20c:	7113      	strb	r3, [r2, #4]
  }
}
 800b20e:	bf00      	nop
 800b210:	3708      	adds	r7, #8
 800b212:	46bd      	mov	sp, r7
 800b214:	bc90      	pop	{r4, r7}
 800b216:	4770      	bx	lr
 800b218:	20000548 	.word	0x20000548

0800b21c <BSP_LCD_ScreenDimmingOn>:
  * @note   Screen brightness is gradually decreased
  * @param  None
  * @retval None
  */
void BSP_LCD_ScreenDimmingOn(void)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
  }


#else
  /* Counter Prescaler value */
  uint32_t uhPrescalerValue = 0;
 800b222:	2300      	movs	r3, #0
 800b224:	603b      	str	r3, [r7, #0]
  int32_t   step;

  /* Reject this while ongoing dimming */
  if (dimming_config.ongoing)
 800b226:	4b71      	ldr	r3, [pc, #452]	; (800b3ec <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	f040 80d9 	bne.w	800b3e2 <BSP_LCD_ScreenDimmingOn+0x1c6>
  {
    return;
  }

  /* Set that dim feature is active */
  dimming_on = 1;
 800b230:	4b6f      	ldr	r3, [pc, #444]	; (800b3f0 <BSP_LCD_ScreenDimmingOn+0x1d4>)
 800b232:	2201      	movs	r2, #1
 800b234:	601a      	str	r2, [r3, #0]
  dimming_config.ongoing = 1;
 800b236:	4b6d      	ldr	r3, [pc, #436]	; (800b3ec <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b238:	2201      	movs	r2, #1
 800b23a:	701a      	strb	r2, [r3, #0]

  if (dimming_config.stop > dimming_config.start)
 800b23c:	4b6b      	ldr	r3, [pc, #428]	; (800b3ec <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b23e:	789a      	ldrb	r2, [r3, #2]
 800b240:	4b6a      	ldr	r3, [pc, #424]	; (800b3ec <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b242:	785b      	ldrb	r3, [r3, #1]
 800b244:	429a      	cmp	r2, r3
 800b246:	d903      	bls.n	800b250 <BSP_LCD_ScreenDimmingOn+0x34>
  {
    step      = dimming_config.step;
 800b248:	4b68      	ldr	r3, [pc, #416]	; (800b3ec <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b24a:	78db      	ldrb	r3, [r3, #3]
 800b24c:	607b      	str	r3, [r7, #4]
 800b24e:	e003      	b.n	800b258 <BSP_LCD_ScreenDimmingOn+0x3c>
  }
  else
  {
    step      = -dimming_config.step;
 800b250:	4b66      	ldr	r3, [pc, #408]	; (800b3ec <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b252:	78db      	ldrb	r3, [r3, #3]
 800b254:	425b      	negs	r3, r3
 800b256:	607b      	str	r3, [r7, #4]

  /* Always redo the full initialization as there is no apriori knowledge
    of IO or timer settings at this point (may have been modified by application) */

  /* Compute the prescaler value to have TIM1 counter clock equal to 16000000 Hz */
  uhPrescalerValue = (uint32_t)(SystemCoreClock / 16000000) - 1;
 800b258:	4b66      	ldr	r3, [pc, #408]	; (800b3f4 <BSP_LCD_ScreenDimmingOn+0x1d8>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a66      	ldr	r2, [pc, #408]	; (800b3f8 <BSP_LCD_ScreenDimmingOn+0x1dc>)
 800b25e:	fba2 2303 	umull	r2, r3, r2, r3
 800b262:	0d9b      	lsrs	r3, r3, #22
 800b264:	3b01      	subs	r3, #1
 800b266:	603b      	str	r3, [r7, #0]

  LCD_TimHandle.Instance = TIMx;
 800b268:	4b64      	ldr	r3, [pc, #400]	; (800b3fc <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b26a:	4a65      	ldr	r2, [pc, #404]	; (800b400 <BSP_LCD_ScreenDimmingOn+0x1e4>)
 800b26c:	601a      	str	r2, [r3, #0]

  __HAL_TIM_RESET_HANDLE_STATE(&LCD_TimHandle); /* to force MSP call */
 800b26e:	4b63      	ldr	r3, [pc, #396]	; (800b3fc <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b270:	2200      	movs	r2, #0
 800b272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b276:	4b61      	ldr	r3, [pc, #388]	; (800b3fc <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b278:	2200      	movs	r2, #0
 800b27a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b27e:	4b5f      	ldr	r3, [pc, #380]	; (800b3fc <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b280:	2200      	movs	r2, #0
 800b282:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b286:	4b5d      	ldr	r3, [pc, #372]	; (800b3fc <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b288:	2200      	movs	r2, #0
 800b28a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b28e:	4b5b      	ldr	r3, [pc, #364]	; (800b3fc <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b290:	2200      	movs	r2, #0
 800b292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b296:	4b59      	ldr	r3, [pc, #356]	; (800b3fc <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b298:	2200      	movs	r2, #0
 800b29a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b29e:	4b57      	ldr	r3, [pc, #348]	; (800b3fc <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b2a6:	4b55      	ldr	r3, [pc, #340]	; (800b3fc <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2ae:	4b53      	ldr	r3, [pc, #332]	; (800b3fc <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2b6:	4b51      	ldr	r3, [pc, #324]	; (800b3fc <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b2be:	4b4f      	ldr	r3, [pc, #316]	; (800b3fc <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800b2c6:	4b4d      	ldr	r3, [pc, #308]	; (800b3fc <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  LCD_TimHandle.Init.Prescaler         = uhPrescalerValue;
 800b2ce:	4a4b      	ldr	r2, [pc, #300]	; (800b3fc <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	6053      	str	r3, [r2, #4]
  LCD_TimHandle.Init.Period            = PERIOD_VALUE;
 800b2d4:	4b49      	ldr	r3, [pc, #292]	; (800b3fc <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b2d6:	f240 2299 	movw	r2, #665	; 0x299
 800b2da:	60da      	str	r2, [r3, #12]
  LCD_TimHandle.Init.ClockDivision     = 0;
 800b2dc:	4b47      	ldr	r3, [pc, #284]	; (800b3fc <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b2de:	2200      	movs	r2, #0
 800b2e0:	611a      	str	r2, [r3, #16]
  LCD_TimHandle.Init.CounterMode       = (step > 0 ? TIM_COUNTERMODE_DOWN : TIM_COUNTERMODE_UP);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	dd01      	ble.n	800b2ec <BSP_LCD_ScreenDimmingOn+0xd0>
 800b2e8:	2310      	movs	r3, #16
 800b2ea:	e000      	b.n	800b2ee <BSP_LCD_ScreenDimmingOn+0xd2>
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	4a43      	ldr	r2, [pc, #268]	; (800b3fc <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b2f0:	6093      	str	r3, [r2, #8]
  LCD_TimHandle.Init.RepetitionCounter = 0;
 800b2f2:	4b42      	ldr	r3, [pc, #264]	; (800b3fc <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&LCD_TimHandle) != HAL_OK)
 800b2f8:	4840      	ldr	r0, [pc, #256]	; (800b3fc <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b2fa:	f008 fcf5 	bl	8013ce8 <HAL_TIM_PWM_Init>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d001      	beq.n	800b308 <BSP_LCD_ScreenDimmingOn+0xec>
  {
    /* Initialization Error */
    BSP_ErrorHandler();
 800b304:	f7fe fd7d 	bl	8009e02 <BSP_ErrorHandler>
  }

  /* Common configuration for all channels */
  LCD_sConfig.OCMode       = TIM_OCMODE_PWM1;
 800b308:	4b3e      	ldr	r3, [pc, #248]	; (800b404 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b30a:	2260      	movs	r2, #96	; 0x60
 800b30c:	601a      	str	r2, [r3, #0]
  LCD_sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
 800b30e:	4b3d      	ldr	r3, [pc, #244]	; (800b404 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b310:	2200      	movs	r2, #0
 800b312:	609a      	str	r2, [r3, #8]
  LCD_sConfig.OCFastMode   = TIM_OCFAST_DISABLE;
 800b314:	4b3b      	ldr	r3, [pc, #236]	; (800b404 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b316:	2200      	movs	r2, #0
 800b318:	611a      	str	r2, [r3, #16]
  LCD_sConfig.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 800b31a:	4b3a      	ldr	r3, [pc, #232]	; (800b404 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b31c:	2200      	movs	r2, #0
 800b31e:	60da      	str	r2, [r3, #12]
  LCD_sConfig.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800b320:	4b38      	ldr	r3, [pc, #224]	; (800b404 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b322:	2200      	movs	r2, #0
 800b324:	619a      	str	r2, [r3, #24]

  LCD_sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;
 800b326:	4b37      	ldr	r3, [pc, #220]	; (800b404 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b328:	2200      	movs	r2, #0
 800b32a:	615a      	str	r2, [r3, #20]

  /* Set the pulse value for channel */
  LCD_sConfig.Pulse = __DIMMING_CYCLE_VALUE(dimming_config.start);
 800b32c:	4b2f      	ldr	r3, [pc, #188]	; (800b3ec <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b32e:	785b      	ldrb	r3, [r3, #1]
 800b330:	461a      	mov	r2, r3
 800b332:	f240 2399 	movw	r3, #665	; 0x299
 800b336:	fb02 f303 	mul.w	r3, r2, r3
 800b33a:	4a33      	ldr	r2, [pc, #204]	; (800b408 <BSP_LCD_ScreenDimmingOn+0x1ec>)
 800b33c:	fba2 2303 	umull	r2, r3, r2, r3
 800b340:	095b      	lsrs	r3, r3, #5
 800b342:	4a30      	ldr	r2, [pc, #192]	; (800b404 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b344:	6053      	str	r3, [r2, #4]
  if (HAL_TIM_PWM_ConfigChannel(&LCD_TimHandle, &LCD_sConfig, TIMx_CHANNEL) != HAL_OK)
 800b346:	220c      	movs	r2, #12
 800b348:	492e      	ldr	r1, [pc, #184]	; (800b404 <BSP_LCD_ScreenDimmingOn+0x1e8>)
 800b34a:	482c      	ldr	r0, [pc, #176]	; (800b3fc <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b34c:	f008 ffe0 	bl	8014310 <HAL_TIM_PWM_ConfigChannel>
 800b350:	4603      	mov	r3, r0
 800b352:	2b00      	cmp	r3, #0
 800b354:	d001      	beq.n	800b35a <BSP_LCD_ScreenDimmingOn+0x13e>
  {
    /* Configuration Error */
    BSP_ErrorHandler();
 800b356:	f7fe fd54 	bl	8009e02 <BSP_ErrorHandler>
  }

  /* Start Timer channel */
  if (HAL_TIM_PWM_Start(&LCD_TimHandle, TIMx_CHANNEL) != HAL_OK)
 800b35a:	210c      	movs	r1, #12
 800b35c:	4827      	ldr	r0, [pc, #156]	; (800b3fc <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b35e:	f008 fd1b 	bl	8013d98 <HAL_TIM_PWM_Start>
 800b362:	4603      	mov	r3, r0
 800b364:	2b00      	cmp	r3, #0
 800b366:	d001      	beq.n	800b36c <BSP_LCD_ScreenDimmingOn+0x150>
  {
    /* PWM Generation Error */
    BSP_ErrorHandler();
 800b368:	f7fe fd4b 	bl	8009e02 <BSP_ErrorHandler>
  }

  /* Set the pulse value for the timer channel */
  i = dimming_config.start;
 800b36c:	4b1f      	ldr	r3, [pc, #124]	; (800b3ec <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b36e:	785b      	ldrb	r3, [r3, #1]
 800b370:	461a      	mov	r2, r3
 800b372:	4b26      	ldr	r3, [pc, #152]	; (800b40c <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800b374:	601a      	str	r2, [r3, #0]
  while (dimming_config.ongoing)
 800b376:	e02f      	b.n	800b3d8 <BSP_LCD_ScreenDimmingOn+0x1bc>
  {
    __HAL_TIM_SET_COMPARE(&LCD_TimHandle, TIMx_CHANNEL, __DIMMING_CYCLE_VALUE(i));
 800b378:	4b24      	ldr	r3, [pc, #144]	; (800b40c <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f240 2299 	movw	r2, #665	; 0x299
 800b380:	fb03 f202 	mul.w	r2, r3, r2
 800b384:	4b1d      	ldr	r3, [pc, #116]	; (800b3fc <BSP_LCD_ScreenDimmingOn+0x1e0>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	491f      	ldr	r1, [pc, #124]	; (800b408 <BSP_LCD_ScreenDimmingOn+0x1ec>)
 800b38a:	fba1 1202 	umull	r1, r2, r1, r2
 800b38e:	0952      	lsrs	r2, r2, #5
 800b390:	641a      	str	r2, [r3, #64]	; 0x40

    /* Exit if stop is reached */
    if (((step > 0) && (i >= dimming_config.stop))
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	dd06      	ble.n	800b3a6 <BSP_LCD_ScreenDimmingOn+0x18a>
 800b398:	4b14      	ldr	r3, [pc, #80]	; (800b3ec <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b39a:	789b      	ldrb	r3, [r3, #2]
 800b39c:	461a      	mov	r2, r3
 800b39e:	4b1b      	ldr	r3, [pc, #108]	; (800b40c <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d909      	bls.n	800b3ba <BSP_LCD_ScreenDimmingOn+0x19e>
        || ((step < 0) && (i <= dimming_config.stop)))
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	da0a      	bge.n	800b3c2 <BSP_LCD_ScreenDimmingOn+0x1a6>
 800b3ac:	4b0f      	ldr	r3, [pc, #60]	; (800b3ec <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b3ae:	789b      	ldrb	r3, [r3, #2]
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	4b16      	ldr	r3, [pc, #88]	; (800b40c <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d303      	bcc.n	800b3c2 <BSP_LCD_ScreenDimmingOn+0x1a6>
    {
      dimming_config.ongoing = 0;
 800b3ba:	4b0c      	ldr	r3, [pc, #48]	; (800b3ec <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b3bc:	2200      	movs	r2, #0
 800b3be:	701a      	strb	r2, [r3, #0]
 800b3c0:	e00a      	b.n	800b3d8 <BSP_LCD_ScreenDimmingOn+0x1bc>
    }
    else
    {
      HAL_Delay(dimming_config.delay);
 800b3c2:	4b0a      	ldr	r3, [pc, #40]	; (800b3ec <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b3c4:	791b      	ldrb	r3, [r3, #4]
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f000 fbf8 	bl	800bbbc <HAL_Delay>
      i += step;
 800b3cc:	4b0f      	ldr	r3, [pc, #60]	; (800b40c <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	4a0d      	ldr	r2, [pc, #52]	; (800b40c <BSP_LCD_ScreenDimmingOn+0x1f0>)
 800b3d6:	6013      	str	r3, [r2, #0]
  while (dimming_config.ongoing)
 800b3d8:	4b04      	ldr	r3, [pc, #16]	; (800b3ec <BSP_LCD_ScreenDimmingOn+0x1d0>)
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d1cb      	bne.n	800b378 <BSP_LCD_ScreenDimmingOn+0x15c>
 800b3e0:	e000      	b.n	800b3e4 <BSP_LCD_ScreenDimmingOn+0x1c8>
    return;
 800b3e2:	bf00      	nop
    }
  }
#endif
}
 800b3e4:	3708      	adds	r7, #8
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	20000548 	.word	0x20000548
 800b3f0:	20001184 	.word	0x20001184
 800b3f4:	20000194 	.word	0x20000194
 800b3f8:	431bde83 	.word	0x431bde83
 800b3fc:	20001188 	.word	0x20001188
 800b400:	40000c00 	.word	0x40000c00
 800b404:	200011d4 	.word	0x200011d4
 800b408:	51eb851f 	.word	0x51eb851f
 800b40c:	20001204 	.word	0x20001204

0800b410 <BSP_LCD_ScreenDimmingOff>:
  * @note   Screen brightness is immediately set to its highest level
  * @param  None
  * @retval None
  */
void BSP_LCD_ScreenDimmingOff(void)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	af00      	add	r7, sp, #0
#if defined(LPTIMER_DIMMING)
  GPIO_InitTypeDef GPIO_InitStructure;
#endif

  if (dimming_on == 1)
 800b414:	4b0d      	ldr	r3, [pc, #52]	; (800b44c <BSP_LCD_ScreenDimmingOff+0x3c>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d114      	bne.n	800b446 <BSP_LCD_ScreenDimmingOff+0x36>
  {
    /* Stop ongoing dimming */
    dimming_config.ongoing = 0;
 800b41c:	4b0c      	ldr	r3, [pc, #48]	; (800b450 <BSP_LCD_ScreenDimmingOff+0x40>)
 800b41e:	2200      	movs	r2, #0
 800b420:	701a      	strb	r2, [r3, #0]

    /* Disable timer clock for power consumption reasons */
    __HAL_RCC_LPTIM1_CLK_DISABLE();
#else
    /* Stop Timer channel */
    if (HAL_TIM_PWM_Stop(&LCD_TimHandle, TIMx_CHANNEL) != HAL_OK)
 800b422:	210c      	movs	r1, #12
 800b424:	480b      	ldr	r0, [pc, #44]	; (800b454 <BSP_LCD_ScreenDimmingOff+0x44>)
 800b426:	f008 fdbd 	bl	8013fa4 <HAL_TIM_PWM_Stop>
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d001      	beq.n	800b434 <BSP_LCD_ScreenDimmingOff+0x24>
    {
      /* PWM Generation Error */
      BSP_ErrorHandler();
 800b430:	f7fe fce7 	bl	8009e02 <BSP_ErrorHandler>
    }

    /* Disable timer clock for power consumption reasons */
    TIMx_CLK_DISABLE();
 800b434:	4b08      	ldr	r3, [pc, #32]	; (800b458 <BSP_LCD_ScreenDimmingOff+0x48>)
 800b436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b438:	4a07      	ldr	r2, [pc, #28]	; (800b458 <BSP_LCD_ScreenDimmingOff+0x48>)
 800b43a:	f023 0308 	bic.w	r3, r3, #8
 800b43e:	6593      	str	r3, [r2, #88]	; 0x58
#endif

    dimming_on = 0;
 800b440:	4b02      	ldr	r3, [pc, #8]	; (800b44c <BSP_LCD_ScreenDimmingOff+0x3c>)
 800b442:	2200      	movs	r2, #0
 800b444:	601a      	str	r2, [r3, #0]
  }
}
 800b446:	bf00      	nop
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	20001184 	.word	0x20001184
 800b450:	20000548 	.word	0x20000548
 800b454:	20001188 	.word	0x20001188
 800b458:	40021000 	.word	0x40021000

0800b45c <HAL_TIM_PWM_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param htim: TIM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b088      	sub	sp, #32
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStruct;

  /* TIMx Peripheral clock enable */
  TIMx_CLK_ENABLE();
 800b464:	4b0f      	ldr	r3, [pc, #60]	; (800b4a4 <HAL_TIM_PWM_MspInit+0x48>)
 800b466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b468:	4a0e      	ldr	r2, [pc, #56]	; (800b4a4 <HAL_TIM_PWM_MspInit+0x48>)
 800b46a:	f043 0308 	orr.w	r3, r3, #8
 800b46e:	6593      	str	r3, [r2, #88]	; 0x58
 800b470:	4b0c      	ldr	r3, [pc, #48]	; (800b4a4 <HAL_TIM_PWM_MspInit+0x48>)
 800b472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b474:	f003 0308 	and.w	r3, r3, #8
 800b478:	60bb      	str	r3, [r7, #8]
 800b47a:	68bb      	ldr	r3, [r7, #8]

  /* Timer channel configuration */

  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b47c:	2302      	movs	r3, #2
 800b47e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b480:	2301      	movs	r3, #1
 800b482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b484:	2303      	movs	r3, #3
 800b486:	61bb      	str	r3, [r7, #24]

  GPIO_InitStruct.Alternate = TIMx_CHANNEl_AF;
 800b488:	2302      	movs	r3, #2
 800b48a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800b48c:	2301      	movs	r3, #1
 800b48e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b490:	f107 030c 	add.w	r3, r7, #12
 800b494:	4619      	mov	r1, r3
 800b496:	4804      	ldr	r0, [pc, #16]	; (800b4a8 <HAL_TIM_PWM_MspInit+0x4c>)
 800b498:	f002 f902 	bl	800d6a0 <HAL_GPIO_Init>
}
 800b49c:	bf00      	nop
 800b49e:	3720      	adds	r7, #32
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	40021000 	.word	0x40021000
 800b4a8:	48002000 	.word	0x48002000

0800b4ac <BSP_LCD_MspInit>:
  * @brief  Initializes the LCD GPIO special pins MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_LCD_MspInit(void)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b088      	sub	sp, #32
 800b4b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clock */
  LCD_TE_GPIO_CLK_ENABLE();
 800b4b2:	4b29      	ldr	r3, [pc, #164]	; (800b558 <BSP_LCD_MspInit+0xac>)
 800b4b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4b6:	4a28      	ldr	r2, [pc, #160]	; (800b558 <BSP_LCD_MspInit+0xac>)
 800b4b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b4be:	4b26      	ldr	r3, [pc, #152]	; (800b558 <BSP_LCD_MspInit+0xac>)
 800b4c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4c6:	60bb      	str	r3, [r7, #8]
 800b4c8:	68bb      	ldr	r3, [r7, #8]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800b4ca:	4b23      	ldr	r3, [pc, #140]	; (800b558 <BSP_LCD_MspInit+0xac>)
 800b4cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4ce:	4a22      	ldr	r2, [pc, #136]	; (800b558 <BSP_LCD_MspInit+0xac>)
 800b4d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b4d6:	4b20      	ldr	r3, [pc, #128]	; (800b558 <BSP_LCD_MspInit+0xac>)
 800b4d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4de:	607b      	str	r3, [r7, #4]
 800b4e0:	687b      	ldr	r3, [r7, #4]
  LCD_PWR_CTRL_GPIO_CLK_ENABLE();
 800b4e2:	4b1d      	ldr	r3, [pc, #116]	; (800b558 <BSP_LCD_MspInit+0xac>)
 800b4e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4e6:	4a1c      	ldr	r2, [pc, #112]	; (800b558 <BSP_LCD_MspInit+0xac>)
 800b4e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b4ee:	4b1a      	ldr	r3, [pc, #104]	; (800b558 <BSP_LCD_MspInit+0xac>)
 800b4f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4f6:	603b      	str	r3, [r7, #0]
 800b4f8:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  if (BSP_IO_Init() == IO_ERROR)
 800b4fa:	f7ff fa57 	bl	800a9ac <BSP_IO_Init>
 800b4fe:	4603      	mov	r3, r0
 800b500:	2b01      	cmp	r3, #1
 800b502:	d101      	bne.n	800b508 <BSP_LCD_MspInit+0x5c>
  {
    BSP_ErrorHandler();
 800b504:	f7fe fc7d 	bl	8009e02 <BSP_ErrorHandler>
  }
  BSP_IO_ConfigPin(LCD_RST_PIN, IO_MODE_OUTPUT);
 800b508:	2101      	movs	r1, #1
 800b50a:	2004      	movs	r0, #4
 800b50c:	f7ff fa92 	bl	800aa34 <BSP_IO_ConfigPin>

  /* LCD_BL_CTRL GPIO configuration */
  GPIO_InitStructure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 800b510:	2301      	movs	r3, #1
 800b512:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_OUTPUT_PP;
 800b514:	2301      	movs	r3, #1
 800b516:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_NOPULL;
 800b518:	2300      	movs	r3, #0
 800b51a:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 800b51c:	2300      	movs	r3, #0
 800b51e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed   = GPIO_SPEED_FREQ_LOW;
 800b520:	2300      	movs	r3, #0
 800b522:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &GPIO_InitStructure);
 800b524:	f107 030c 	add.w	r3, r7, #12
 800b528:	4619      	mov	r1, r3
 800b52a:	480c      	ldr	r0, [pc, #48]	; (800b55c <BSP_LCD_MspInit+0xb0>)
 800b52c:	f002 f8b8 	bl	800d6a0 <HAL_GPIO_Init>

  /* Power on the screen (also done in Touch Screen driver ... */
  GPIO_InitStructure.Pin = LCD_PWR_CTRL_PIN;
 800b530:	2301      	movs	r3, #1
 800b532:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP /*GPIO_MODE_OUTPUT_PP*/;
 800b534:	2301      	movs	r3, #1
 800b536:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull =   GPIO_NOPULL;
 800b538:	2300      	movs	r3, #0
 800b53a:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Alternate = 0;
 800b53c:	2300      	movs	r3, #0
 800b53e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 800b540:	2300      	movs	r3, #0
 800b542:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_PWR_CTRL_GPIO_PORT, &GPIO_InitStructure);
 800b544:	f107 030c 	add.w	r3, r7, #12
 800b548:	4619      	mov	r1, r3
 800b54a:	4805      	ldr	r0, [pc, #20]	; (800b560 <BSP_LCD_MspInit+0xb4>)
 800b54c:	f002 f8a8 	bl	800d6a0 <HAL_GPIO_Init>
}
 800b550:	bf00      	nop
 800b552:	3720      	adds	r7, #32
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	40021000 	.word	0x40021000
 800b55c:	48002000 	.word	0x48002000
 800b560:	48001c00 	.word	0x48001c00

0800b564 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b088      	sub	sp, #32
 800b568:	af00      	add	r7, sp, #0
 800b56a:	4603      	mov	r3, r0
 800b56c:	603a      	str	r2, [r7, #0]
 800b56e:	80fb      	strh	r3, [r7, #6]
 800b570:	460b      	mov	r3, r1
 800b572:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800b574:	2300      	movs	r3, #0
 800b576:	61fb      	str	r3, [r7, #28]
 800b578:	2300      	movs	r3, #0
 800b57a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;

  height = DrawProp.pFont->Height;
 800b57c:	4b45      	ldr	r3, [pc, #276]	; (800b694 <DrawChar+0x130>)
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	88db      	ldrh	r3, [r3, #6]
 800b582:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 800b584:	4b43      	ldr	r3, [pc, #268]	; (800b694 <DrawChar+0x130>)
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	889b      	ldrh	r3, [r3, #4]
 800b58a:	823b      	strh	r3, [r7, #16]

  offset =  8 * ((width + 7) / 8) -  width ;
 800b58c:	8a3b      	ldrh	r3, [r7, #16]
 800b58e:	3307      	adds	r3, #7
 800b590:	2b00      	cmp	r3, #0
 800b592:	da00      	bge.n	800b596 <DrawChar+0x32>
 800b594:	3307      	adds	r3, #7
 800b596:	10db      	asrs	r3, r3, #3
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	00db      	lsls	r3, r3, #3
 800b59c:	b2da      	uxtb	r2, r3
 800b59e:	8a3b      	ldrh	r3, [r7, #16]
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	1ad3      	subs	r3, r2, r3
 800b5a4:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	61fb      	str	r3, [r7, #28]
 800b5aa:	e069      	b.n	800b680 <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 800b5ac:	8a3b      	ldrh	r3, [r7, #16]
 800b5ae:	3307      	adds	r3, #7
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	da00      	bge.n	800b5b6 <DrawChar+0x52>
 800b5b4:	3307      	adds	r3, #7
 800b5b6:	10db      	asrs	r3, r3, #3
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	69fb      	ldr	r3, [r7, #28]
 800b5bc:	fb02 f303 	mul.w	r3, r2, r3
 800b5c0:	683a      	ldr	r2, [r7, #0]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 800b5c6:	8a3b      	ldrh	r3, [r7, #16]
 800b5c8:	3307      	adds	r3, #7
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	da00      	bge.n	800b5d0 <DrawChar+0x6c>
 800b5ce:	3307      	adds	r3, #7
 800b5d0:	10db      	asrs	r3, r3, #3
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d002      	beq.n	800b5dc <DrawChar+0x78>
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d004      	beq.n	800b5e4 <DrawChar+0x80>
 800b5da:	e00c      	b.n	800b5f6 <DrawChar+0x92>
    {
      case 1:
        line =  pchar[0];
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	617b      	str	r3, [r7, #20]
        break;
 800b5e2:	e016      	b.n	800b612 <DrawChar+0xae>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	021b      	lsls	r3, r3, #8
 800b5ea:	68ba      	ldr	r2, [r7, #8]
 800b5ec:	3201      	adds	r2, #1
 800b5ee:	7812      	ldrb	r2, [r2, #0]
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	617b      	str	r3, [r7, #20]
        break;
 800b5f4:	e00d      	b.n	800b612 <DrawChar+0xae>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	041a      	lsls	r2, r3, #16
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	3301      	adds	r3, #1
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	021b      	lsls	r3, r3, #8
 800b604:	4313      	orrs	r3, r2
 800b606:	68ba      	ldr	r2, [r7, #8]
 800b608:	3202      	adds	r2, #2
 800b60a:	7812      	ldrb	r2, [r2, #0]
 800b60c:	4313      	orrs	r3, r2
 800b60e:	617b      	str	r3, [r7, #20]
        break;
 800b610:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800b612:	2300      	movs	r3, #0
 800b614:	61bb      	str	r3, [r7, #24]
 800b616:	e029      	b.n	800b66c <DrawChar+0x108>
    {
      if ((line & (1 << (width - j + offset - 1))) != 0)
 800b618:	8a3a      	ldrh	r2, [r7, #16]
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	1ad2      	subs	r2, r2, r3
 800b61e:	7bfb      	ldrb	r3, [r7, #15]
 800b620:	4413      	add	r3, r2
 800b622:	3b01      	subs	r3, #1
 800b624:	2201      	movs	r2, #1
 800b626:	fa02 f303 	lsl.w	r3, r2, r3
 800b62a:	461a      	mov	r2, r3
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	4013      	ands	r3, r2
 800b630:	2b00      	cmp	r3, #0
 800b632:	d00c      	beq.n	800b64e <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	b29a      	uxth	r2, r3
 800b638:	88fb      	ldrh	r3, [r7, #6]
 800b63a:	4413      	add	r3, r2
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	4a15      	ldr	r2, [pc, #84]	; (800b694 <DrawChar+0x130>)
 800b640:	6812      	ldr	r2, [r2, #0]
 800b642:	b292      	uxth	r2, r2
 800b644:	88b9      	ldrh	r1, [r7, #4]
 800b646:	4618      	mov	r0, r3
 800b648:	f7ff fbfe 	bl	800ae48 <BSP_LCD_DrawPixel>
 800b64c:	e00b      	b.n	800b666 <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	b29a      	uxth	r2, r3
 800b652:	88fb      	ldrh	r3, [r7, #6]
 800b654:	4413      	add	r3, r2
 800b656:	b29b      	uxth	r3, r3
 800b658:	4a0e      	ldr	r2, [pc, #56]	; (800b694 <DrawChar+0x130>)
 800b65a:	6852      	ldr	r2, [r2, #4]
 800b65c:	b292      	uxth	r2, r2
 800b65e:	88b9      	ldrh	r1, [r7, #4]
 800b660:	4618      	mov	r0, r3
 800b662:	f7ff fbf1 	bl	800ae48 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800b666:	69bb      	ldr	r3, [r7, #24]
 800b668:	3301      	adds	r3, #1
 800b66a:	61bb      	str	r3, [r7, #24]
 800b66c:	8a3b      	ldrh	r3, [r7, #16]
 800b66e:	69ba      	ldr	r2, [r7, #24]
 800b670:	429a      	cmp	r2, r3
 800b672:	d3d1      	bcc.n	800b618 <DrawChar+0xb4>
      }
    }
    Ypos++;
 800b674:	88bb      	ldrh	r3, [r7, #4]
 800b676:	3301      	adds	r3, #1
 800b678:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 800b67a:	69fb      	ldr	r3, [r7, #28]
 800b67c:	3301      	adds	r3, #1
 800b67e:	61fb      	str	r3, [r7, #28]
 800b680:	8a7b      	ldrh	r3, [r7, #18]
 800b682:	69fa      	ldr	r2, [r7, #28]
 800b684:	429a      	cmp	r2, r3
 800b686:	d391      	bcc.n	800b5ac <DrawChar+0x48>
  }
}
 800b688:	bf00      	nop
 800b68a:	bf00      	nop
 800b68c:	3720      	adds	r7, #32
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	200011f4 	.word	0x200011f4

0800b698 <BSP_TS_InitEx>:
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @param  orientation : TS_ORIENTATION_LANDSCAPE or TS_ORIENTATION_PORTRAIT
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_InitEx(uint16_t ts_SizeX, uint16_t ts_SizeY, uint8_t  orientation)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	4603      	mov	r3, r0
 800b6a0:	80fb      	strh	r3, [r7, #6]
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	80bb      	strh	r3, [r7, #4]
 800b6a6:	4613      	mov	r3, r2
 800b6a8:	70fb      	strb	r3, [r7, #3]
  uint8_t ts_status = TS_OK;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	73fb      	strb	r3, [r7, #15]
  uint16_t read_id = 0;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	81bb      	strh	r3, [r7, #12]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 800b6b2:	4b20      	ldr	r3, [pc, #128]	; (800b734 <BSP_TS_InitEx+0x9c>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4a20      	ldr	r2, [pc, #128]	; (800b738 <BSP_TS_InitEx+0xa0>)
 800b6b8:	7812      	ldrb	r2, [r2, #0]
 800b6ba:	b292      	uxth	r2, r2
 800b6bc:	4610      	mov	r0, r2
 800b6be:	4798      	blx	r3

  /* Scan FT6x36 TouchScreen IC controller ID register by I2C Read */
  /* Verify this is a FT6x36, otherwise this is an error case      */

  read_id = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 800b6c0:	4b1c      	ldr	r3, [pc, #112]	; (800b734 <BSP_TS_InitEx+0x9c>)
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	2070      	movs	r0, #112	; 0x70
 800b6c6:	4798      	blx	r3
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	81bb      	strh	r3, [r7, #12]

  if (read_id == FT6x36_ID_VALUE)
 800b6cc:	89bb      	ldrh	r3, [r7, #12]
 800b6ce:	2bcd      	cmp	r3, #205	; 0xcd
 800b6d0:	d12a      	bne.n	800b728 <BSP_TS_InitEx+0x90>
  {
    /* Found FT6x36 : Initialize the TS driver structure */
    tsDriver = &ft6x06_ts_drv;
 800b6d2:	4b1a      	ldr	r3, [pc, #104]	; (800b73c <BSP_TS_InitEx+0xa4>)
 800b6d4:	4a17      	ldr	r2, [pc, #92]	; (800b734 <BSP_TS_InitEx+0x9c>)
 800b6d6:	601a      	str	r2, [r3, #0]

    I2C_Address    = TS_I2C_ADDRESS;
 800b6d8:	4b17      	ldr	r3, [pc, #92]	; (800b738 <BSP_TS_InitEx+0xa0>)
 800b6da:	2270      	movs	r2, #112	; 0x70
 800b6dc:	701a      	strb	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if (orientation == TS_ORIENTATION_PORTRAIT)
 800b6de:	78fb      	ldrb	r3, [r7, #3]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d106      	bne.n	800b6f2 <BSP_TS_InitEx+0x5a>
    {
      tsOrientation = TS_SWAP_X | TS_SWAP_Y;
 800b6e4:	4b16      	ldr	r3, [pc, #88]	; (800b740 <BSP_TS_InitEx+0xa8>)
 800b6e6:	2206      	movs	r2, #6
 800b6e8:	701a      	strb	r2, [r3, #0]
      TS_orientation = TS_ORIENTATION_PORTRAIT;
 800b6ea:	4b16      	ldr	r3, [pc, #88]	; (800b744 <BSP_TS_InitEx+0xac>)
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	701a      	strb	r2, [r3, #0]
 800b6f0:	e005      	b.n	800b6fe <BSP_TS_InitEx+0x66>
    }
    else
    {
      tsOrientation = TS_SWAP_XY | TS_SWAP_Y;
 800b6f2:	4b13      	ldr	r3, [pc, #76]	; (800b740 <BSP_TS_InitEx+0xa8>)
 800b6f4:	220c      	movs	r2, #12
 800b6f6:	701a      	strb	r2, [r3, #0]
      TS_orientation = TS_ORIENTATION_LANDSCAPE;
 800b6f8:	4b12      	ldr	r3, [pc, #72]	; (800b744 <BSP_TS_InitEx+0xac>)
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	701a      	strb	r2, [r3, #0]
    }

    if (ts_status == TS_OK)
 800b6fe:	7bfb      	ldrb	r3, [r7, #15]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d111      	bne.n	800b728 <BSP_TS_InitEx+0x90>
    {
      /* Software reset the TouchScreen */
      tsDriver->Reset(I2C_Address);
 800b704:	4b0d      	ldr	r3, [pc, #52]	; (800b73c <BSP_TS_InitEx+0xa4>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	4a0b      	ldr	r2, [pc, #44]	; (800b738 <BSP_TS_InitEx+0xa0>)
 800b70c:	7812      	ldrb	r2, [r2, #0]
 800b70e:	b292      	uxth	r2, r2
 800b710:	4610      	mov	r0, r2
 800b712:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      tsDriver->Start(I2C_Address);
 800b714:	4b09      	ldr	r3, [pc, #36]	; (800b73c <BSP_TS_InitEx+0xa4>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	68db      	ldr	r3, [r3, #12]
 800b71a:	4a07      	ldr	r2, [pc, #28]	; (800b738 <BSP_TS_InitEx+0xa0>)
 800b71c:	7812      	ldrb	r2, [r2, #0]
 800b71e:	b292      	uxth	r2, r2
 800b720:	4610      	mov	r0, r2
 800b722:	4798      	blx	r3

      return TS_OK;
 800b724:	2300      	movs	r3, #0
 800b726:	e000      	b.n	800b72a <BSP_TS_InitEx+0x92>

    } /* of if(ts_status == TS_OK) */
  }

  return TS_DEVICE_NOT_FOUND;
 800b728:	2303      	movs	r3, #3


}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3710      	adds	r7, #16
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	20000198 	.word	0x20000198
 800b738:	2000120c 	.word	0x2000120c
 800b73c:	20001208 	.word	0x20001208
 800b740:	2000054d 	.word	0x2000054d
 800b744:	2000054e 	.word	0x2000054e

0800b748 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 800b74e:	2300      	movs	r3, #0
 800b750:	71fb      	strb	r3, [r7, #7]

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x36 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 800b752:	f000 f93b 	bl	800b9cc <BSP_TS_INT_MspInit>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  tsDriver->EnableIT(I2C_Address);
 800b756:	4b06      	ldr	r3, [pc, #24]	; (800b770 <BSP_TS_ITConfig+0x28>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	699b      	ldr	r3, [r3, #24]
 800b75c:	4a05      	ldr	r2, [pc, #20]	; (800b774 <BSP_TS_ITConfig+0x2c>)
 800b75e:	7812      	ldrb	r2, [r2, #0]
 800b760:	b292      	uxth	r2, r2
 800b762:	4610      	mov	r0, r2
 800b764:	4798      	blx	r3

  return (ts_status);
 800b766:	79fb      	ldrb	r3, [r7, #7]
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3708      	adds	r7, #8
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	20001208 	.word	0x20001208
 800b774:	2000120c 	.word	0x2000120c

0800b778 <BSP_TS_ITDeConfig>:
/**
  * @brief  deConfigures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITDeConfig(void)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 800b77e:	2300      	movs	r3, #0
 800b780:	71fb      	strb	r3, [r7, #7]

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x36 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspDeInit();
 800b782:	f000 f969 	bl	800ba58 <BSP_TS_INT_MspDeInit>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  tsDriver->DisableIT(I2C_Address);
 800b786:	4b06      	ldr	r3, [pc, #24]	; (800b7a0 <BSP_TS_ITDeConfig+0x28>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78c:	4a05      	ldr	r2, [pc, #20]	; (800b7a4 <BSP_TS_ITDeConfig+0x2c>)
 800b78e:	7812      	ldrb	r2, [r2, #0]
 800b790:	b292      	uxth	r2, r2
 800b792:	4610      	mov	r0, r2
 800b794:	4798      	blx	r3

  return (ts_status);
 800b796:	79fb      	ldrb	r3, [r7, #7]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3708      	adds	r7, #8
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	20001208 	.word	0x20001208
 800b7a4:	2000120c 	.word	0x2000120c

0800b7a8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800b7a8:	b590      	push	{r4, r7, lr}
 800b7aa:	b089      	sub	sp, #36	; 0x24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2C_Address);
 800b7b4:	4b80      	ldr	r3, [pc, #512]	; (800b9b8 <BSP_TS_GetState+0x210>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	691b      	ldr	r3, [r3, #16]
 800b7ba:	4a80      	ldr	r2, [pc, #512]	; (800b9bc <BSP_TS_GetState+0x214>)
 800b7bc:	7812      	ldrb	r2, [r2, #0]
 800b7be:	b292      	uxth	r2, r2
 800b7c0:	4610      	mov	r0, r2
 800b7c2:	4798      	blx	r3
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	701a      	strb	r2, [r3, #0]
  if (TS_State->touchDetected)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f000 80ec 	beq.w	800b9ae <BSP_TS_GetState+0x206>
  {
    for (index = 0; index < TS_State->touchDetected; index++)
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	61fb      	str	r3, [r7, #28]
 800b7da:	e0e1      	b.n	800b9a0 <BSP_TS_GetState+0x1f8>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 800b7dc:	4b76      	ldr	r3, [pc, #472]	; (800b9b8 <BSP_TS_GetState+0x210>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	695b      	ldr	r3, [r3, #20]
 800b7e2:	4a76      	ldr	r2, [pc, #472]	; (800b9bc <BSP_TS_GetState+0x214>)
 800b7e4:	7812      	ldrb	r2, [r2, #0]
 800b7e6:	b290      	uxth	r0, r2
 800b7e8:	f107 0110 	add.w	r1, r7, #16
 800b7ec:	69fa      	ldr	r2, [r7, #28]
 800b7ee:	0052      	lsls	r2, r2, #1
 800b7f0:	188c      	adds	r4, r1, r2
 800b7f2:	f107 010c 	add.w	r1, r7, #12
 800b7f6:	69fa      	ldr	r2, [r7, #28]
 800b7f8:	0052      	lsls	r2, r2, #1
 800b7fa:	440a      	add	r2, r1
 800b7fc:	4621      	mov	r1, r4
 800b7fe:	4798      	blx	r3

      if (tsOrientation & TS_SWAP_XY)
 800b800:	4b6f      	ldr	r3, [pc, #444]	; (800b9c0 <BSP_TS_GetState+0x218>)
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	f003 0308 	and.w	r3, r3, #8
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d019      	beq.n	800b840 <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	005b      	lsls	r3, r3, #1
 800b810:	3320      	adds	r3, #32
 800b812:	443b      	add	r3, r7
 800b814:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800b818:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index];
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	005b      	lsls	r3, r3, #1
 800b81e:	3320      	adds	r3, #32
 800b820:	443b      	add	r3, r7
 800b822:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	005b      	lsls	r3, r3, #1
 800b82a:	3320      	adds	r3, #32
 800b82c:	443b      	add	r3, r7
 800b82e:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	005b      	lsls	r3, r3, #1
 800b836:	3320      	adds	r3, #32
 800b838:	443b      	add	r3, r7
 800b83a:	8b3a      	ldrh	r2, [r7, #24]
 800b83c:	f823 2c14 	strh.w	r2, [r3, #-20]
      }

      if (tsOrientation & TS_SWAP_X)
 800b840:	4b5f      	ldr	r3, [pc, #380]	; (800b9c0 <BSP_TS_GetState+0x218>)
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	f003 0302 	and.w	r3, r3, #2
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d00e      	beq.n	800b86a <BSP_TS_GetState+0xc2>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH_HEIGHT - 1 - Raw_x[index];
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	005b      	lsls	r3, r3, #1
 800b850:	3320      	adds	r3, #32
 800b852:	443b      	add	r3, r7
 800b854:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800b858:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	69fb      	ldr	r3, [r7, #28]
 800b860:	005b      	lsls	r3, r3, #1
 800b862:	3320      	adds	r3, #32
 800b864:	443b      	add	r3, r7
 800b866:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if (tsOrientation & TS_SWAP_Y)
 800b86a:	4b55      	ldr	r3, [pc, #340]	; (800b9c0 <BSP_TS_GetState+0x218>)
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	f003 0304 	and.w	r3, r3, #4
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00e      	beq.n	800b894 <BSP_TS_GetState+0xec>
      {
        Raw_y[index] = FT_6206_MAX_WIDTH_HEIGHT - 1 - Raw_y[index];
 800b876:	69fb      	ldr	r3, [r7, #28]
 800b878:	005b      	lsls	r3, r3, #1
 800b87a:	3320      	adds	r3, #32
 800b87c:	443b      	add	r3, r7
 800b87e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800b882:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 800b886:	b29a      	uxth	r2, r3
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	005b      	lsls	r3, r3, #1
 800b88c:	3320      	adds	r3, #32
 800b88e:	443b      	add	r3, r7
 800b890:	f823 2c14 	strh.w	r2, [r3, #-20]
      }

      xDiff = Raw_x[index] > _x[index] ? (Raw_x[index] - _x[index]) : (_x[index] - Raw_x[index]);
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	005b      	lsls	r3, r3, #1
 800b898:	3320      	adds	r3, #32
 800b89a:	443b      	add	r3, r7
 800b89c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	4a48      	ldr	r2, [pc, #288]	; (800b9c4 <BSP_TS_GetState+0x21c>)
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8aa:	4299      	cmp	r1, r3
 800b8ac:	d90d      	bls.n	800b8ca <BSP_TS_GetState+0x122>
 800b8ae:	69fb      	ldr	r3, [r7, #28]
 800b8b0:	005b      	lsls	r3, r3, #1
 800b8b2:	3320      	adds	r3, #32
 800b8b4:	443b      	add	r3, r7
 800b8b6:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800b8ba:	4942      	ldr	r1, [pc, #264]	; (800b9c4 <BSP_TS_GetState+0x21c>)
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	1ad3      	subs	r3, r2, r3
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	e00c      	b.n	800b8e4 <BSP_TS_GetState+0x13c>
 800b8ca:	4a3e      	ldr	r2, [pc, #248]	; (800b9c4 <BSP_TS_GetState+0x21c>)
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8d2:	b29a      	uxth	r2, r3
 800b8d4:	69fb      	ldr	r3, [r7, #28]
 800b8d6:	005b      	lsls	r3, r3, #1
 800b8d8:	3320      	adds	r3, #32
 800b8da:	443b      	add	r3, r7
 800b8dc:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800b8e0:	1ad3      	subs	r3, r2, r3
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index] ? (Raw_y[index] - _y[index]) : (_y[index] - Raw_y[index]);
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	005b      	lsls	r3, r3, #1
 800b8ea:	3320      	adds	r3, #32
 800b8ec:	443b      	add	r3, r7
 800b8ee:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800b8f2:	4619      	mov	r1, r3
 800b8f4:	4a34      	ldr	r2, [pc, #208]	; (800b9c8 <BSP_TS_GetState+0x220>)
 800b8f6:	69fb      	ldr	r3, [r7, #28]
 800b8f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8fc:	4299      	cmp	r1, r3
 800b8fe:	d90d      	bls.n	800b91c <BSP_TS_GetState+0x174>
 800b900:	69fb      	ldr	r3, [r7, #28]
 800b902:	005b      	lsls	r3, r3, #1
 800b904:	3320      	adds	r3, #32
 800b906:	443b      	add	r3, r7
 800b908:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800b90c:	492e      	ldr	r1, [pc, #184]	; (800b9c8 <BSP_TS_GetState+0x220>)
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b914:	b29b      	uxth	r3, r3
 800b916:	1ad3      	subs	r3, r2, r3
 800b918:	b29b      	uxth	r3, r3
 800b91a:	e00c      	b.n	800b936 <BSP_TS_GetState+0x18e>
 800b91c:	4a2a      	ldr	r2, [pc, #168]	; (800b9c8 <BSP_TS_GetState+0x220>)
 800b91e:	69fb      	ldr	r3, [r7, #28]
 800b920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b924:	b29a      	uxth	r2, r3
 800b926:	69fb      	ldr	r3, [r7, #28]
 800b928:	005b      	lsls	r3, r3, #1
 800b92a:	3320      	adds	r3, #32
 800b92c:	443b      	add	r3, r7
 800b92e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800b932:	1ad3      	subs	r3, r2, r3
 800b934:	b29b      	uxth	r3, r3
 800b936:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 800b938:	8afa      	ldrh	r2, [r7, #22]
 800b93a:	8abb      	ldrh	r3, [r7, #20]
 800b93c:	4413      	add	r3, r2
 800b93e:	2b05      	cmp	r3, #5
 800b940:	dd15      	ble.n	800b96e <BSP_TS_GetState+0x1c6>
      {
        _x[index] = Raw_x[index];
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	005b      	lsls	r3, r3, #1
 800b946:	3320      	adds	r3, #32
 800b948:	443b      	add	r3, r7
 800b94a:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800b94e:	4619      	mov	r1, r3
 800b950:	4a1c      	ldr	r2, [pc, #112]	; (800b9c4 <BSP_TS_GetState+0x21c>)
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	005b      	lsls	r3, r3, #1
 800b95c:	3320      	adds	r3, #32
 800b95e:	443b      	add	r3, r7
 800b960:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800b964:	4619      	mov	r1, r3
 800b966:	4a18      	ldr	r2, [pc, #96]	; (800b9c8 <BSP_TS_GetState+0x220>)
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 800b96e:	4a15      	ldr	r2, [pc, #84]	; (800b9c4 <BSP_TS_GetState+0x21c>)
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b976:	b299      	uxth	r1, r3
 800b978:	687a      	ldr	r2, [r7, #4]
 800b97a:	69fb      	ldr	r3, [r7, #28]
 800b97c:	005b      	lsls	r3, r3, #1
 800b97e:	4413      	add	r3, r2
 800b980:	460a      	mov	r2, r1
 800b982:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 800b984:	4a10      	ldr	r2, [pc, #64]	; (800b9c8 <BSP_TS_GetState+0x220>)
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b98c:	b299      	uxth	r1, r3
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	005b      	lsls	r3, r3, #1
 800b994:	4413      	add	r3, r2
 800b996:	460a      	mov	r2, r1
 800b998:	80da      	strh	r2, [r3, #6]
    for (index = 0; index < TS_State->touchDetected; index++)
 800b99a:	69fb      	ldr	r3, [r7, #28]
 800b99c:	3301      	adds	r3, #1
 800b99e:	61fb      	str	r3, [r7, #28]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	69fb      	ldr	r3, [r7, #28]
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	f4ff af17 	bcc.w	800b7dc <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800b9ae:	7efb      	ldrb	r3, [r7, #27]
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3724      	adds	r7, #36	; 0x24
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd90      	pop	{r4, r7, pc}
 800b9b8:	20001208 	.word	0x20001208
 800b9bc:	2000120c 	.word	0x2000120c
 800b9c0:	2000054d 	.word	0x2000054d
 800b9c4:	20001210 	.word	0x20001210
 800b9c8:	20001218 	.word	0x20001218

0800b9cc <BSP_TS_INT_MspInit>:
  * @brief  Initializes the TS_INT pin MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b088      	sub	sp, #32
 800b9d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_PWR_CLK_ENABLE();
 800b9d2:	4b1e      	ldr	r3, [pc, #120]	; (800ba4c <BSP_TS_INT_MspInit+0x80>)
 800b9d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9d6:	4a1d      	ldr	r2, [pc, #116]	; (800ba4c <BSP_TS_INT_MspInit+0x80>)
 800b9d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9dc:	6593      	str	r3, [r2, #88]	; 0x58
 800b9de:	4b1b      	ldr	r3, [pc, #108]	; (800ba4c <BSP_TS_INT_MspInit+0x80>)
 800b9e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9e6:	60bb      	str	r3, [r7, #8]
 800b9e8:	68bb      	ldr	r3, [r7, #8]
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800b9ea:	4b19      	ldr	r3, [pc, #100]	; (800ba50 <BSP_TS_INT_MspInit+0x84>)
 800b9ec:	685b      	ldr	r3, [r3, #4]
 800b9ee:	4a18      	ldr	r2, [pc, #96]	; (800ba50 <BSP_TS_INT_MspInit+0x84>)
 800b9f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b9f4:	6053      	str	r3, [r2, #4]

  TS_INT_GPIO_CLK_ENABLE();
 800b9f6:	4b15      	ldr	r3, [pc, #84]	; (800ba4c <BSP_TS_INT_MspInit+0x80>)
 800b9f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9fa:	4a14      	ldr	r2, [pc, #80]	; (800ba4c <BSP_TS_INT_MspInit+0x80>)
 800b9fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba00:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ba02:	4b12      	ldr	r3, [pc, #72]	; (800ba4c <BSP_TS_INT_MspInit+0x80>)
 800ba04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba0a:	607b      	str	r3, [r7, #4]
 800ba0c:	687b      	ldr	r3, [r7, #4]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 800ba0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ba12:	60fb      	str	r3, [r7, #12]

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 800ba14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ba18:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800ba1e:	2302      	movs	r3, #2
 800ba20:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 800ba22:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800ba26:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 800ba28:	f107 030c 	add.w	r3, r7, #12
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	4809      	ldr	r0, [pc, #36]	; (800ba54 <BSP_TS_INT_MspInit+0x88>)
 800ba30:	f001 fe36 	bl	800d6a0 <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x08, 0x00);
 800ba34:	2200      	movs	r2, #0
 800ba36:	2108      	movs	r1, #8
 800ba38:	2028      	movs	r0, #40	; 0x28
 800ba3a:	f001 fc5a 	bl	800d2f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 800ba3e:	2028      	movs	r0, #40	; 0x28
 800ba40:	f001 fc73 	bl	800d32a <HAL_NVIC_EnableIRQ>
}
 800ba44:	bf00      	nop
 800ba46:	3720      	adds	r7, #32
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	40021000 	.word	0x40021000
 800ba50:	40007000 	.word	0x40007000
 800ba54:	48001800 	.word	0x48001800

0800ba58 <BSP_TS_INT_MspDeInit>:
  * @brief  Initializes the TS_INT pin MSP.
  * @param  None
  * @retval None
  */
__weak void BSP_TS_INT_MspDeInit(void)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b088      	sub	sp, #32
 800ba5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_PWR_CLK_ENABLE();
 800ba5e:	4b1a      	ldr	r3, [pc, #104]	; (800bac8 <BSP_TS_INT_MspDeInit+0x70>)
 800ba60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba62:	4a19      	ldr	r2, [pc, #100]	; (800bac8 <BSP_TS_INT_MspDeInit+0x70>)
 800ba64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba68:	6593      	str	r3, [r2, #88]	; 0x58
 800ba6a:	4b17      	ldr	r3, [pc, #92]	; (800bac8 <BSP_TS_INT_MspDeInit+0x70>)
 800ba6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba72:	60bb      	str	r3, [r7, #8]
 800ba74:	68bb      	ldr	r3, [r7, #8]
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800ba76:	4b15      	ldr	r3, [pc, #84]	; (800bacc <BSP_TS_INT_MspDeInit+0x74>)
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	4a14      	ldr	r2, [pc, #80]	; (800bacc <BSP_TS_INT_MspDeInit+0x74>)
 800ba7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ba80:	6053      	str	r3, [r2, #4]

  TS_INT_GPIO_CLK_ENABLE();
 800ba82:	4b11      	ldr	r3, [pc, #68]	; (800bac8 <BSP_TS_INT_MspDeInit+0x70>)
 800ba84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba86:	4a10      	ldr	r2, [pc, #64]	; (800bac8 <BSP_TS_INT_MspDeInit+0x70>)
 800ba88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ba8e:	4b0e      	ldr	r3, [pc, #56]	; (800bac8 <BSP_TS_INT_MspDeInit+0x70>)
 800ba90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba96:	607b      	str	r3, [r7, #4]
 800ba98:	687b      	ldr	r3, [r7, #4]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 800ba9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ba9e:	60fb      	str	r3, [r7, #12]

  gpio_init_structure.Pin = GPIO_PIN_All;
 800baa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800baa4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_ANALOG;
 800baa6:	2303      	movs	r3, #3
 800baa8:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800baaa:	2300      	movs	r3, #0
 800baac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 800baae:	f107 030c 	add.w	r3, r7, #12
 800bab2:	4619      	mov	r1, r3
 800bab4:	4806      	ldr	r0, [pc, #24]	; (800bad0 <BSP_TS_INT_MspDeInit+0x78>)
 800bab6:	f001 fdf3 	bl	800d6a0 <HAL_GPIO_Init>

  HAL_NVIC_DisableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 800baba:	2028      	movs	r0, #40	; 0x28
 800babc:	f001 fc43 	bl	800d346 <HAL_NVIC_DisableIRQ>
}
 800bac0:	bf00      	nop
 800bac2:	3720      	adds	r7, #32
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	40021000 	.word	0x40021000
 800bacc:	40007000 	.word	0x40007000
 800bad0:	48001800 	.word	0x48001800

0800bad4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800bada:	2300      	movs	r3, #0
 800badc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bade:	2003      	movs	r0, #3
 800bae0:	f001 fbfc 	bl	800d2dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800bae4:	2000      	movs	r0, #0
 800bae6:	f000 f80d 	bl	800bb04 <HAL_InitTick>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d002      	beq.n	800baf6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800baf0:	2301      	movs	r3, #1
 800baf2:	71fb      	strb	r3, [r7, #7]
 800baf4:	e001      	b.n	800bafa <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800baf6:	f7f7 fa67 	bl	8002fc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800bafa:	79fb      	ldrb	r3, [r7, #7]
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800bb10:	4b17      	ldr	r3, [pc, #92]	; (800bb70 <HAL_InitTick+0x6c>)
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d023      	beq.n	800bb60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800bb18:	4b16      	ldr	r3, [pc, #88]	; (800bb74 <HAL_InitTick+0x70>)
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	4b14      	ldr	r3, [pc, #80]	; (800bb70 <HAL_InitTick+0x6c>)
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	4619      	mov	r1, r3
 800bb22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bb26:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f001 fc17 	bl	800d362 <HAL_SYSTICK_Config>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d10f      	bne.n	800bb5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2b0f      	cmp	r3, #15
 800bb3e:	d809      	bhi.n	800bb54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bb40:	2200      	movs	r2, #0
 800bb42:	6879      	ldr	r1, [r7, #4]
 800bb44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bb48:	f001 fbd3 	bl	800d2f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800bb4c:	4a0a      	ldr	r2, [pc, #40]	; (800bb78 <HAL_InitTick+0x74>)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6013      	str	r3, [r2, #0]
 800bb52:	e007      	b.n	800bb64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800bb54:	2301      	movs	r3, #1
 800bb56:	73fb      	strb	r3, [r7, #15]
 800bb58:	e004      	b.n	800bb64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	73fb      	strb	r3, [r7, #15]
 800bb5e:	e001      	b.n	800bb64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800bb64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3710      	adds	r7, #16
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	20000554 	.word	0x20000554
 800bb74:	20000194 	.word	0x20000194
 800bb78:	20000550 	.word	0x20000550

0800bb7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800bb80:	4b06      	ldr	r3, [pc, #24]	; (800bb9c <HAL_IncTick+0x20>)
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	461a      	mov	r2, r3
 800bb86:	4b06      	ldr	r3, [pc, #24]	; (800bba0 <HAL_IncTick+0x24>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4413      	add	r3, r2
 800bb8c:	4a04      	ldr	r2, [pc, #16]	; (800bba0 <HAL_IncTick+0x24>)
 800bb8e:	6013      	str	r3, [r2, #0]
}
 800bb90:	bf00      	nop
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop
 800bb9c:	20000554 	.word	0x20000554
 800bba0:	20001220 	.word	0x20001220

0800bba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bba4:	b480      	push	{r7}
 800bba6:	af00      	add	r7, sp, #0
  return uwTick;
 800bba8:	4b03      	ldr	r3, [pc, #12]	; (800bbb8 <HAL_GetTick+0x14>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr
 800bbb6:	bf00      	nop
 800bbb8:	20001220 	.word	0x20001220

0800bbbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bbc4:	f7ff ffee 	bl	800bba4 <HAL_GetTick>
 800bbc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbd4:	d005      	beq.n	800bbe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800bbd6:	4b0a      	ldr	r3, [pc, #40]	; (800bc00 <HAL_Delay+0x44>)
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	461a      	mov	r2, r3
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	4413      	add	r3, r2
 800bbe0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800bbe2:	bf00      	nop
 800bbe4:	f7ff ffde 	bl	800bba4 <HAL_GetTick>
 800bbe8:	4602      	mov	r2, r0
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	1ad3      	subs	r3, r2, r3
 800bbee:	68fa      	ldr	r2, [r7, #12]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d8f7      	bhi.n	800bbe4 <HAL_Delay+0x28>
  {
  }
}
 800bbf4:	bf00      	nop
 800bbf6:	bf00      	nop
 800bbf8:	3710      	adds	r7, #16
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	20000554 	.word	0x20000554

0800bc04 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800bc04:	b480      	push	{r7}
 800bc06:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800bc08:	4b05      	ldr	r3, [pc, #20]	; (800bc20 <HAL_SuspendTick+0x1c>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4a04      	ldr	r2, [pc, #16]	; (800bc20 <HAL_SuspendTick+0x1c>)
 800bc0e:	f023 0302 	bic.w	r3, r3, #2
 800bc12:	6013      	str	r3, [r2, #0]
}
 800bc14:	bf00      	nop
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr
 800bc1e:	bf00      	nop
 800bc20:	e000e010 	.word	0xe000e010

0800bc24 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800bc24:	b480      	push	{r7}
 800bc26:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800bc28:	4b05      	ldr	r3, [pc, #20]	; (800bc40 <HAL_ResumeTick+0x1c>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	4a04      	ldr	r2, [pc, #16]	; (800bc40 <HAL_ResumeTick+0x1c>)
 800bc2e:	f043 0302 	orr.w	r3, r3, #2
 800bc32:	6013      	str	r3, [r2, #0]
}
 800bc34:	bf00      	nop
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr
 800bc3e:	bf00      	nop
 800bc40:	e000e010 	.word	0xe000e010

0800bc44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	689b      	ldr	r3, [r3, #8]
 800bc52:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	431a      	orrs	r2, r3
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	609a      	str	r2, [r3, #8]
}
 800bc5e:	bf00      	nop
 800bc60:	370c      	adds	r7, #12
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr

0800bc6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800bc6a:	b480      	push	{r7}
 800bc6c:	b083      	sub	sp, #12
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
 800bc72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	431a      	orrs	r2, r3
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	609a      	str	r2, [r3, #8]
}
 800bc84:	bf00      	nop
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	689b      	ldr	r3, [r3, #8]
 800bc9c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	370c      	adds	r7, #12
 800bca4:	46bd      	mov	sp, r7
 800bca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b087      	sub	sp, #28
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	607a      	str	r2, [r7, #4]
 800bcb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	3360      	adds	r3, #96	; 0x60
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	4413      	add	r3, r2
 800bcc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	4b08      	ldr	r3, [pc, #32]	; (800bcf0 <LL_ADC_SetOffset+0x44>)
 800bcce:	4013      	ands	r3, r2
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800bcd6:	683a      	ldr	r2, [r7, #0]
 800bcd8:	430a      	orrs	r2, r1
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800bce4:	bf00      	nop
 800bce6:	371c      	adds	r7, #28
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr
 800bcf0:	03fff000 	.word	0x03fff000

0800bcf4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	3360      	adds	r3, #96	; 0x60
 800bd02:	461a      	mov	r2, r3
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	009b      	lsls	r3, r3, #2
 800bd08:	4413      	add	r3, r2
 800bd0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3714      	adds	r7, #20
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b087      	sub	sp, #28
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	60f8      	str	r0, [r7, #12]
 800bd28:	60b9      	str	r1, [r7, #8]
 800bd2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	3360      	adds	r3, #96	; 0x60
 800bd30:	461a      	mov	r2, r3
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	009b      	lsls	r3, r3, #2
 800bd36:	4413      	add	r3, r2
 800bd38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	431a      	orrs	r2, r3
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800bd4a:	bf00      	nop
 800bd4c:	371c      	adds	r7, #28
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr

0800bd56 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800bd56:	b480      	push	{r7}
 800bd58:	b083      	sub	sp, #12
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
 800bd5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	695b      	ldr	r3, [r3, #20]
 800bd64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	431a      	orrs	r2, r3
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	615a      	str	r2, [r3, #20]
}
 800bd70:	bf00      	nop
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	68db      	ldr	r3, [r3, #12]
 800bd88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d101      	bne.n	800bd94 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800bd90:	2301      	movs	r3, #1
 800bd92:	e000      	b.n	800bd96 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800bd94:	2300      	movs	r3, #0
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	370c      	adds	r7, #12
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr

0800bda2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800bda2:	b480      	push	{r7}
 800bda4:	b087      	sub	sp, #28
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	60f8      	str	r0, [r7, #12]
 800bdaa:	60b9      	str	r1, [r7, #8]
 800bdac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	3330      	adds	r3, #48	; 0x30
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	0a1b      	lsrs	r3, r3, #8
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	f003 030c 	and.w	r3, r3, #12
 800bdbe:	4413      	add	r3, r2
 800bdc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	f003 031f 	and.w	r3, r3, #31
 800bdcc:	211f      	movs	r1, #31
 800bdce:	fa01 f303 	lsl.w	r3, r1, r3
 800bdd2:	43db      	mvns	r3, r3
 800bdd4:	401a      	ands	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	0e9b      	lsrs	r3, r3, #26
 800bdda:	f003 011f 	and.w	r1, r3, #31
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	f003 031f 	and.w	r3, r3, #31
 800bde4:	fa01 f303 	lsl.w	r3, r1, r3
 800bde8:	431a      	orrs	r2, r3
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800bdee:	bf00      	nop
 800bdf0:	371c      	adds	r7, #28
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr

0800bdfa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800bdfa:	b480      	push	{r7}
 800bdfc:	b087      	sub	sp, #28
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	60f8      	str	r0, [r7, #12]
 800be02:	60b9      	str	r1, [r7, #8]
 800be04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	3314      	adds	r3, #20
 800be0a:	461a      	mov	r2, r3
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	0e5b      	lsrs	r3, r3, #25
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	f003 0304 	and.w	r3, r3, #4
 800be16:	4413      	add	r3, r2
 800be18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	0d1b      	lsrs	r3, r3, #20
 800be22:	f003 031f 	and.w	r3, r3, #31
 800be26:	2107      	movs	r1, #7
 800be28:	fa01 f303 	lsl.w	r3, r1, r3
 800be2c:	43db      	mvns	r3, r3
 800be2e:	401a      	ands	r2, r3
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	0d1b      	lsrs	r3, r3, #20
 800be34:	f003 031f 	and.w	r3, r3, #31
 800be38:	6879      	ldr	r1, [r7, #4]
 800be3a:	fa01 f303 	lsl.w	r3, r1, r3
 800be3e:	431a      	orrs	r2, r3
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800be44:	bf00      	nop
 800be46:	371c      	adds	r7, #28
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr

0800be50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800be50:	b480      	push	{r7}
 800be52:	b085      	sub	sp, #20
 800be54:	af00      	add	r7, sp, #0
 800be56:	60f8      	str	r0, [r7, #12]
 800be58:	60b9      	str	r1, [r7, #8]
 800be5a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be68:	43db      	mvns	r3, r3
 800be6a:	401a      	ands	r2, r3
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f003 0318 	and.w	r3, r3, #24
 800be72:	4908      	ldr	r1, [pc, #32]	; (800be94 <LL_ADC_SetChannelSingleDiff+0x44>)
 800be74:	40d9      	lsrs	r1, r3
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	400b      	ands	r3, r1
 800be7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be7e:	431a      	orrs	r2, r3
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800be86:	bf00      	nop
 800be88:	3714      	adds	r7, #20
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr
 800be92:	bf00      	nop
 800be94:	0007ffff 	.word	0x0007ffff

0800be98 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800be98:	b480      	push	{r7}
 800be9a:	b083      	sub	sp, #12
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	689b      	ldr	r3, [r3, #8]
 800bea4:	f003 031f 	and.w	r3, r3, #31
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	370c      	adds	r7, #12
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b083      	sub	sp, #12
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	689b      	ldr	r3, [r3, #8]
 800bec0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	370c      	adds	r7, #12
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800bee0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	6093      	str	r3, [r2, #8]
}
 800bee8:	bf00      	nop
 800beea:	370c      	adds	r7, #12
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	689b      	ldr	r3, [r3, #8]
 800bf00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf08:	d101      	bne.n	800bf0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e000      	b.n	800bf10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800bf0e:	2300      	movs	r3, #0
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	370c      	adds	r7, #12
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800bf2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800bf30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800bf38:	bf00      	nop
 800bf3a:	370c      	adds	r7, #12
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr

0800bf44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b083      	sub	sp, #12
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	689b      	ldr	r3, [r3, #8]
 800bf50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf58:	d101      	bne.n	800bf5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	e000      	b.n	800bf60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800bf5e:	2300      	movs	r3, #0
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	370c      	adds	r7, #12
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr

0800bf6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b083      	sub	sp, #12
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	689b      	ldr	r3, [r3, #8]
 800bf78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800bf80:	f043 0201 	orr.w	r2, r3, #1
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800bf88:	bf00      	nop
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	f003 0301 	and.w	r3, r3, #1
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d101      	bne.n	800bfac <LL_ADC_IsEnabled+0x18>
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	e000      	b.n	800bfae <LL_ADC_IsEnabled+0x1a>
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	370c      	adds	r7, #12
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr

0800bfba <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800bfba:	b480      	push	{r7}
 800bfbc:	b083      	sub	sp, #12
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	689b      	ldr	r3, [r3, #8]
 800bfc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bfca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800bfce:	f043 0204 	orr.w	r2, r3, #4
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800bfd6:	bf00      	nop
 800bfd8:	370c      	adds	r7, #12
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr

0800bfe2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800bfe2:	b480      	push	{r7}
 800bfe4:	b083      	sub	sp, #12
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	f003 0304 	and.w	r3, r3, #4
 800bff2:	2b04      	cmp	r3, #4
 800bff4:	d101      	bne.n	800bffa <LL_ADC_REG_IsConversionOngoing+0x18>
 800bff6:	2301      	movs	r3, #1
 800bff8:	e000      	b.n	800bffc <LL_ADC_REG_IsConversionOngoing+0x1a>
 800bffa:	2300      	movs	r3, #0
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	370c      	adds	r7, #12
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr

0800c008 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800c008:	b480      	push	{r7}
 800c00a:	b083      	sub	sp, #12
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	f003 0308 	and.w	r3, r3, #8
 800c018:	2b08      	cmp	r3, #8
 800c01a:	d101      	bne.n	800c020 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800c01c:	2301      	movs	r3, #1
 800c01e:	e000      	b.n	800c022 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800c020:	2300      	movs	r3, #0
}
 800c022:	4618      	mov	r0, r3
 800c024:	370c      	adds	r7, #12
 800c026:	46bd      	mov	sp, r7
 800c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02c:	4770      	bx	lr
	...

0800c030 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800c030:	b590      	push	{r4, r7, lr}
 800c032:	b089      	sub	sp, #36	; 0x24
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c038:	2300      	movs	r3, #0
 800c03a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800c03c:	2300      	movs	r3, #0
 800c03e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d101      	bne.n	800c04a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800c046:	2301      	movs	r3, #1
 800c048:	e139      	b.n	800c2be <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c054:	2b00      	cmp	r3, #0
 800c056:	d109      	bne.n	800c06c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f7f4 fff7 	bl	800104c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2200      	movs	r2, #0
 800c062:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4618      	mov	r0, r3
 800c072:	f7ff ff3f 	bl	800bef4 <LL_ADC_IsDeepPowerDownEnabled>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d004      	beq.n	800c086 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4618      	mov	r0, r3
 800c082:	f7ff ff25 	bl	800bed0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7ff ff5a 	bl	800bf44 <LL_ADC_IsInternalRegulatorEnabled>
 800c090:	4603      	mov	r3, r0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d115      	bne.n	800c0c2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7ff ff3e 	bl	800bf1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c0a0:	4b89      	ldr	r3, [pc, #548]	; (800c2c8 <HAL_ADC_Init+0x298>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	099b      	lsrs	r3, r3, #6
 800c0a6:	4a89      	ldr	r2, [pc, #548]	; (800c2cc <HAL_ADC_Init+0x29c>)
 800c0a8:	fba2 2303 	umull	r2, r3, r2, r3
 800c0ac:	099b      	lsrs	r3, r3, #6
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	005b      	lsls	r3, r3, #1
 800c0b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800c0b4:	e002      	b.n	800c0bc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	3b01      	subs	r3, #1
 800c0ba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d1f9      	bne.n	800c0b6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7ff ff3c 	bl	800bf44 <LL_ADC_IsInternalRegulatorEnabled>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d10d      	bne.n	800c0ee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0d6:	f043 0210 	orr.w	r2, r3, #16
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0e2:	f043 0201 	orr.w	r2, r3, #1
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7ff ff75 	bl	800bfe2 <LL_ADC_REG_IsConversionOngoing>
 800c0f8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0fe:	f003 0310 	and.w	r3, r3, #16
 800c102:	2b00      	cmp	r3, #0
 800c104:	f040 80d2 	bne.w	800c2ac <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	f040 80ce 	bne.w	800c2ac <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c114:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800c118:	f043 0202 	orr.w	r2, r3, #2
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4618      	mov	r0, r3
 800c126:	f7ff ff35 	bl	800bf94 <LL_ADC_IsEnabled>
 800c12a:	4603      	mov	r3, r0
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d115      	bne.n	800c15c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c130:	4867      	ldr	r0, [pc, #412]	; (800c2d0 <HAL_ADC_Init+0x2a0>)
 800c132:	f7ff ff2f 	bl	800bf94 <LL_ADC_IsEnabled>
 800c136:	4604      	mov	r4, r0
 800c138:	4866      	ldr	r0, [pc, #408]	; (800c2d4 <HAL_ADC_Init+0x2a4>)
 800c13a:	f7ff ff2b 	bl	800bf94 <LL_ADC_IsEnabled>
 800c13e:	4603      	mov	r3, r0
 800c140:	431c      	orrs	r4, r3
 800c142:	4865      	ldr	r0, [pc, #404]	; (800c2d8 <HAL_ADC_Init+0x2a8>)
 800c144:	f7ff ff26 	bl	800bf94 <LL_ADC_IsEnabled>
 800c148:	4603      	mov	r3, r0
 800c14a:	4323      	orrs	r3, r4
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d105      	bne.n	800c15c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	4619      	mov	r1, r3
 800c156:	4861      	ldr	r0, [pc, #388]	; (800c2dc <HAL_ADC_Init+0x2ac>)
 800c158:	f7ff fd74 	bl	800bc44 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	7e5b      	ldrb	r3, [r3, #25]
 800c160:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800c166:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800c16c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800c172:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c17a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800c17c:	4313      	orrs	r3, r2
 800c17e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c186:	2b01      	cmp	r3, #1
 800c188:	d106      	bne.n	800c198 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c18e:	3b01      	subs	r3, #1
 800c190:	045b      	lsls	r3, r3, #17
 800c192:	69ba      	ldr	r2, [r7, #24]
 800c194:	4313      	orrs	r3, r2
 800c196:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d009      	beq.n	800c1b4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1a4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800c1ae:	69ba      	ldr	r2, [r7, #24]
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	68da      	ldr	r2, [r3, #12]
 800c1ba:	4b49      	ldr	r3, [pc, #292]	; (800c2e0 <HAL_ADC_Init+0x2b0>)
 800c1bc:	4013      	ands	r3, r2
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	6812      	ldr	r2, [r2, #0]
 800c1c2:	69b9      	ldr	r1, [r7, #24]
 800c1c4:	430b      	orrs	r3, r1
 800c1c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f7ff ff08 	bl	800bfe2 <LL_ADC_REG_IsConversionOngoing>
 800c1d2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f7ff ff15 	bl	800c008 <LL_ADC_INJ_IsConversionOngoing>
 800c1de:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d140      	bne.n	800c268 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d13d      	bne.n	800c268 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	7e1b      	ldrb	r3, [r3, #24]
 800c1f4:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800c1f6:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c1fe:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800c200:	4313      	orrs	r3, r2
 800c202:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	68db      	ldr	r3, [r3, #12]
 800c20a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c20e:	f023 0306 	bic.w	r3, r3, #6
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	6812      	ldr	r2, [r2, #0]
 800c216:	69b9      	ldr	r1, [r7, #24]
 800c218:	430b      	orrs	r3, r1
 800c21a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c222:	2b01      	cmp	r3, #1
 800c224:	d118      	bne.n	800c258 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	691b      	ldr	r3, [r3, #16]
 800c22c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c230:	f023 0304 	bic.w	r3, r3, #4
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c23c:	4311      	orrs	r1, r2
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800c242:	4311      	orrs	r1, r2
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c248:	430a      	orrs	r2, r1
 800c24a:	431a      	orrs	r2, r3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f042 0201 	orr.w	r2, r2, #1
 800c254:	611a      	str	r2, [r3, #16]
 800c256:	e007      	b.n	800c268 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	691a      	ldr	r2, [r3, #16]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f022 0201 	bic.w	r2, r2, #1
 800c266:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	691b      	ldr	r3, [r3, #16]
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d10c      	bne.n	800c28a <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c276:	f023 010f 	bic.w	r1, r3, #15
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	69db      	ldr	r3, [r3, #28]
 800c27e:	1e5a      	subs	r2, r3, #1
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	430a      	orrs	r2, r1
 800c286:	631a      	str	r2, [r3, #48]	; 0x30
 800c288:	e007      	b.n	800c29a <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f022 020f 	bic.w	r2, r2, #15
 800c298:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c29e:	f023 0303 	bic.w	r3, r3, #3
 800c2a2:	f043 0201 	orr.w	r2, r3, #1
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	659a      	str	r2, [r3, #88]	; 0x58
 800c2aa:	e007      	b.n	800c2bc <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2b0:	f043 0210 	orr.w	r2, r3, #16
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800c2bc:	7ffb      	ldrb	r3, [r7, #31]
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3724      	adds	r7, #36	; 0x24
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd90      	pop	{r4, r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	20000194 	.word	0x20000194
 800c2cc:	053e2d63 	.word	0x053e2d63
 800c2d0:	50040000 	.word	0x50040000
 800c2d4:	50040100 	.word	0x50040100
 800c2d8:	50040200 	.word	0x50040200
 800c2dc:	50040300 	.word	0x50040300
 800c2e0:	fff0c007 	.word	0xfff0c007

0800c2e4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b086      	sub	sp, #24
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c2ec:	4857      	ldr	r0, [pc, #348]	; (800c44c <HAL_ADC_Start+0x168>)
 800c2ee:	f7ff fdd3 	bl	800be98 <LL_ADC_GetMultimode>
 800c2f2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7ff fe72 	bl	800bfe2 <LL_ADC_REG_IsConversionOngoing>
 800c2fe:	4603      	mov	r3, r0
 800c300:	2b00      	cmp	r3, #0
 800c302:	f040 809c 	bne.w	800c43e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d101      	bne.n	800c314 <HAL_ADC_Start+0x30>
 800c310:	2302      	movs	r3, #2
 800c312:	e097      	b.n	800c444 <HAL_ADC_Start+0x160>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2201      	movs	r2, #1
 800c318:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 fd8d 	bl	800ce3c <ADC_Enable>
 800c322:	4603      	mov	r3, r0
 800c324:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800c326:	7dfb      	ldrb	r3, [r7, #23]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	f040 8083 	bne.w	800c434 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c332:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c336:	f023 0301 	bic.w	r3, r3, #1
 800c33a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a42      	ldr	r2, [pc, #264]	; (800c450 <HAL_ADC_Start+0x16c>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d002      	beq.n	800c352 <HAL_ADC_Start+0x6e>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	e000      	b.n	800c354 <HAL_ADC_Start+0x70>
 800c352:	4b40      	ldr	r3, [pc, #256]	; (800c454 <HAL_ADC_Start+0x170>)
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	6812      	ldr	r2, [r2, #0]
 800c358:	4293      	cmp	r3, r2
 800c35a:	d002      	beq.n	800c362 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d105      	bne.n	800c36e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c366:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c372:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c37a:	d106      	bne.n	800c38a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c380:	f023 0206 	bic.w	r2, r3, #6
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	65da      	str	r2, [r3, #92]	; 0x5c
 800c388:	e002      	b.n	800c390 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2200      	movs	r2, #0
 800c38e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	221c      	movs	r2, #28
 800c396:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2200      	movs	r2, #0
 800c39c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a2a      	ldr	r2, [pc, #168]	; (800c450 <HAL_ADC_Start+0x16c>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d002      	beq.n	800c3b0 <HAL_ADC_Start+0xcc>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	e000      	b.n	800c3b2 <HAL_ADC_Start+0xce>
 800c3b0:	4b28      	ldr	r3, [pc, #160]	; (800c454 <HAL_ADC_Start+0x170>)
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	6812      	ldr	r2, [r2, #0]
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d008      	beq.n	800c3cc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d005      	beq.n	800c3cc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	2b05      	cmp	r3, #5
 800c3c4:	d002      	beq.n	800c3cc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	2b09      	cmp	r3, #9
 800c3ca:	d114      	bne.n	800c3f6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	68db      	ldr	r3, [r3, #12]
 800c3d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d007      	beq.n	800c3ea <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c3e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7ff fde3 	bl	800bfba <LL_ADC_REG_StartConversion>
 800c3f4:	e025      	b.n	800c442 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a12      	ldr	r2, [pc, #72]	; (800c450 <HAL_ADC_Start+0x16c>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d002      	beq.n	800c412 <HAL_ADC_Start+0x12e>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	e000      	b.n	800c414 <HAL_ADC_Start+0x130>
 800c412:	4b10      	ldr	r3, [pc, #64]	; (800c454 <HAL_ADC_Start+0x170>)
 800c414:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	68db      	ldr	r3, [r3, #12]
 800c41a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d00f      	beq.n	800c442 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c426:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800c42a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	659a      	str	r2, [r3, #88]	; 0x58
 800c432:	e006      	b.n	800c442 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2200      	movs	r2, #0
 800c438:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800c43c:	e001      	b.n	800c442 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800c43e:	2302      	movs	r3, #2
 800c440:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800c442:	7dfb      	ldrb	r3, [r7, #23]
}
 800c444:	4618      	mov	r0, r3
 800c446:	3718      	adds	r7, #24
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	50040300 	.word	0x50040300
 800c450:	50040100 	.word	0x50040100
 800c454:	50040000 	.word	0x50040000

0800c458 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b088      	sub	sp, #32
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c462:	4866      	ldr	r0, [pc, #408]	; (800c5fc <HAL_ADC_PollForConversion+0x1a4>)
 800c464:	f7ff fd18 	bl	800be98 <LL_ADC_GetMultimode>
 800c468:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	695b      	ldr	r3, [r3, #20]
 800c46e:	2b08      	cmp	r3, #8
 800c470:	d102      	bne.n	800c478 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800c472:	2308      	movs	r3, #8
 800c474:	61fb      	str	r3, [r7, #28]
 800c476:	e02a      	b.n	800c4ce <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d005      	beq.n	800c48a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	2b05      	cmp	r3, #5
 800c482:	d002      	beq.n	800c48a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	2b09      	cmp	r3, #9
 800c488:	d111      	bne.n	800c4ae <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	68db      	ldr	r3, [r3, #12]
 800c490:	f003 0301 	and.w	r3, r3, #1
 800c494:	2b00      	cmp	r3, #0
 800c496:	d007      	beq.n	800c4a8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c49c:	f043 0220 	orr.w	r2, r3, #32
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	e0a4      	b.n	800c5f2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800c4a8:	2304      	movs	r3, #4
 800c4aa:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800c4ac:	e00f      	b.n	800c4ce <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800c4ae:	4853      	ldr	r0, [pc, #332]	; (800c5fc <HAL_ADC_PollForConversion+0x1a4>)
 800c4b0:	f7ff fd00 	bl	800beb4 <LL_ADC_GetMultiDMATransfer>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d007      	beq.n	800c4ca <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4be:	f043 0220 	orr.w	r2, r3, #32
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e093      	b.n	800c5f2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800c4ca:	2304      	movs	r3, #4
 800c4cc:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800c4ce:	f7ff fb69 	bl	800bba4 <HAL_GetTick>
 800c4d2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800c4d4:	e021      	b.n	800c51a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4dc:	d01d      	beq.n	800c51a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800c4de:	f7ff fb61 	bl	800bba4 <HAL_GetTick>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	1ad3      	subs	r3, r2, r3
 800c4e8:	683a      	ldr	r2, [r7, #0]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d302      	bcc.n	800c4f4 <HAL_ADC_PollForConversion+0x9c>
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d112      	bne.n	800c51a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	69fb      	ldr	r3, [r7, #28]
 800c4fc:	4013      	ands	r3, r2
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d10b      	bne.n	800c51a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c506:	f043 0204 	orr.w	r2, r3, #4
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2200      	movs	r2, #0
 800c512:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800c516:	2303      	movs	r3, #3
 800c518:	e06b      	b.n	800c5f2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	681a      	ldr	r2, [r3, #0]
 800c520:	69fb      	ldr	r3, [r7, #28]
 800c522:	4013      	ands	r3, r2
 800c524:	2b00      	cmp	r3, #0
 800c526:	d0d6      	beq.n	800c4d6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c52c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4618      	mov	r0, r3
 800c53a:	f7ff fc1f 	bl	800bd7c <LL_ADC_REG_IsTriggerSourceSWStart>
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	d01c      	beq.n	800c57e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	7e5b      	ldrb	r3, [r3, #25]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d118      	bne.n	800c57e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f003 0308 	and.w	r3, r3, #8
 800c556:	2b08      	cmp	r3, #8
 800c558:	d111      	bne.n	800c57e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c55e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c56a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d105      	bne.n	800c57e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c576:	f043 0201 	orr.w	r2, r3, #1
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4a1f      	ldr	r2, [pc, #124]	; (800c600 <HAL_ADC_PollForConversion+0x1a8>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d002      	beq.n	800c58e <HAL_ADC_PollForConversion+0x136>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	e000      	b.n	800c590 <HAL_ADC_PollForConversion+0x138>
 800c58e:	4b1d      	ldr	r3, [pc, #116]	; (800c604 <HAL_ADC_PollForConversion+0x1ac>)
 800c590:	687a      	ldr	r2, [r7, #4]
 800c592:	6812      	ldr	r2, [r2, #0]
 800c594:	4293      	cmp	r3, r2
 800c596:	d008      	beq.n	800c5aa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d005      	beq.n	800c5aa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	2b05      	cmp	r3, #5
 800c5a2:	d002      	beq.n	800c5aa <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	2b09      	cmp	r3, #9
 800c5a8:	d104      	bne.n	800c5b4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	68db      	ldr	r3, [r3, #12]
 800c5b0:	61bb      	str	r3, [r7, #24]
 800c5b2:	e00c      	b.n	800c5ce <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4a11      	ldr	r2, [pc, #68]	; (800c600 <HAL_ADC_PollForConversion+0x1a8>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d002      	beq.n	800c5c4 <HAL_ADC_PollForConversion+0x16c>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	e000      	b.n	800c5c6 <HAL_ADC_PollForConversion+0x16e>
 800c5c4:	4b0f      	ldr	r3, [pc, #60]	; (800c604 <HAL_ADC_PollForConversion+0x1ac>)
 800c5c6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	68db      	ldr	r3, [r3, #12]
 800c5cc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800c5ce:	69fb      	ldr	r3, [r7, #28]
 800c5d0:	2b08      	cmp	r3, #8
 800c5d2:	d104      	bne.n	800c5de <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	2208      	movs	r2, #8
 800c5da:	601a      	str	r2, [r3, #0]
 800c5dc:	e008      	b.n	800c5f0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800c5de:	69bb      	ldr	r3, [r7, #24]
 800c5e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d103      	bne.n	800c5f0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	220c      	movs	r2, #12
 800c5ee:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800c5f0:	2300      	movs	r3, #0
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3720      	adds	r7, #32
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	50040300 	.word	0x50040300
 800c600:	50040100 	.word	0x50040100
 800c604:	50040000 	.word	0x50040000

0800c608 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800c608:	b480      	push	{r7}
 800c60a:	b083      	sub	sp, #12
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800c616:	4618      	mov	r0, r3
 800c618:	370c      	adds	r7, #12
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr
	...

0800c624 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b0b6      	sub	sp, #216	; 0xd8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c62e:	2300      	movs	r3, #0
 800c630:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800c634:	2300      	movs	r3, #0
 800c636:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d101      	bne.n	800c646 <HAL_ADC_ConfigChannel+0x22>
 800c642:	2302      	movs	r3, #2
 800c644:	e3e3      	b.n	800ce0e <HAL_ADC_ConfigChannel+0x7ea>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2201      	movs	r2, #1
 800c64a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4618      	mov	r0, r3
 800c654:	f7ff fcc5 	bl	800bfe2 <LL_ADC_REG_IsConversionOngoing>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	f040 83c4 	bne.w	800cde8 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	2b05      	cmp	r3, #5
 800c666:	d824      	bhi.n	800c6b2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	3b02      	subs	r3, #2
 800c66e:	2b03      	cmp	r3, #3
 800c670:	d81b      	bhi.n	800c6aa <HAL_ADC_ConfigChannel+0x86>
 800c672:	a201      	add	r2, pc, #4	; (adr r2, 800c678 <HAL_ADC_ConfigChannel+0x54>)
 800c674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c678:	0800c689 	.word	0x0800c689
 800c67c:	0800c691 	.word	0x0800c691
 800c680:	0800c699 	.word	0x0800c699
 800c684:	0800c6a1 	.word	0x0800c6a1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	220c      	movs	r2, #12
 800c68c:	605a      	str	r2, [r3, #4]
          break;
 800c68e:	e011      	b.n	800c6b4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	2212      	movs	r2, #18
 800c694:	605a      	str	r2, [r3, #4]
          break;
 800c696:	e00d      	b.n	800c6b4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	2218      	movs	r2, #24
 800c69c:	605a      	str	r2, [r3, #4]
          break;
 800c69e:	e009      	b.n	800c6b4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c6a6:	605a      	str	r2, [r3, #4]
          break;
 800c6a8:	e004      	b.n	800c6b4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	2206      	movs	r2, #6
 800c6ae:	605a      	str	r2, [r3, #4]
          break;
 800c6b0:	e000      	b.n	800c6b4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800c6b2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6818      	ldr	r0, [r3, #0]
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	6859      	ldr	r1, [r3, #4]
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	f7ff fb6e 	bl	800bda2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7ff fc89 	bl	800bfe2 <LL_ADC_REG_IsConversionOngoing>
 800c6d0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f7ff fc95 	bl	800c008 <LL_ADC_INJ_IsConversionOngoing>
 800c6de:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800c6e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f040 81c1 	bne.w	800ca6e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800c6ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	f040 81bc 	bne.w	800ca6e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	689b      	ldr	r3, [r3, #8]
 800c6fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c6fe:	d10f      	bne.n	800c720 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6818      	ldr	r0, [r3, #0]
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	2200      	movs	r2, #0
 800c70a:	4619      	mov	r1, r3
 800c70c:	f7ff fb75 	bl	800bdfa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c718:	4618      	mov	r0, r3
 800c71a:	f7ff fb1c 	bl	800bd56 <LL_ADC_SetSamplingTimeCommonConfig>
 800c71e:	e00e      	b.n	800c73e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	6818      	ldr	r0, [r3, #0]
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	6819      	ldr	r1, [r3, #0]
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	689b      	ldr	r3, [r3, #8]
 800c72c:	461a      	mov	r2, r3
 800c72e:	f7ff fb64 	bl	800bdfa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	2100      	movs	r1, #0
 800c738:	4618      	mov	r0, r3
 800c73a:	f7ff fb0c 	bl	800bd56 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	695a      	ldr	r2, [r3, #20]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	08db      	lsrs	r3, r3, #3
 800c74a:	f003 0303 	and.w	r3, r3, #3
 800c74e:	005b      	lsls	r3, r3, #1
 800c750:	fa02 f303 	lsl.w	r3, r2, r3
 800c754:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	691b      	ldr	r3, [r3, #16]
 800c75c:	2b04      	cmp	r3, #4
 800c75e:	d00a      	beq.n	800c776 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6818      	ldr	r0, [r3, #0]
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	6919      	ldr	r1, [r3, #16]
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	681a      	ldr	r2, [r3, #0]
 800c76c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c770:	f7ff fa9c 	bl	800bcac <LL_ADC_SetOffset>
 800c774:	e17b      	b.n	800ca6e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	2100      	movs	r1, #0
 800c77c:	4618      	mov	r0, r3
 800c77e:	f7ff fab9 	bl	800bcf4 <LL_ADC_GetOffsetChannel>
 800c782:	4603      	mov	r3, r0
 800c784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d10a      	bne.n	800c7a2 <HAL_ADC_ConfigChannel+0x17e>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	2100      	movs	r1, #0
 800c792:	4618      	mov	r0, r3
 800c794:	f7ff faae 	bl	800bcf4 <LL_ADC_GetOffsetChannel>
 800c798:	4603      	mov	r3, r0
 800c79a:	0e9b      	lsrs	r3, r3, #26
 800c79c:	f003 021f 	and.w	r2, r3, #31
 800c7a0:	e01e      	b.n	800c7e0 <HAL_ADC_ConfigChannel+0x1bc>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2100      	movs	r1, #0
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7ff faa3 	bl	800bcf4 <LL_ADC_GetOffsetChannel>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c7b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c7b8:	fa93 f3a3 	rbit	r3, r3
 800c7bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800c7c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c7c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800c7c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d101      	bne.n	800c7d4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 800c7d0:	2320      	movs	r3, #32
 800c7d2:	e004      	b.n	800c7de <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 800c7d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c7d8:	fab3 f383 	clz	r3, r3
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d105      	bne.n	800c7f8 <HAL_ADC_ConfigChannel+0x1d4>
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	0e9b      	lsrs	r3, r3, #26
 800c7f2:	f003 031f 	and.w	r3, r3, #31
 800c7f6:	e018      	b.n	800c82a <HAL_ADC_ConfigChannel+0x206>
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c800:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c804:	fa93 f3a3 	rbit	r3, r3
 800c808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800c80c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c810:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800c814:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d101      	bne.n	800c820 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800c81c:	2320      	movs	r3, #32
 800c81e:	e004      	b.n	800c82a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 800c820:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c824:	fab3 f383 	clz	r3, r3
 800c828:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d106      	bne.n	800c83c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2200      	movs	r2, #0
 800c834:	2100      	movs	r1, #0
 800c836:	4618      	mov	r0, r3
 800c838:	f7ff fa72 	bl	800bd20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	2101      	movs	r1, #1
 800c842:	4618      	mov	r0, r3
 800c844:	f7ff fa56 	bl	800bcf4 <LL_ADC_GetOffsetChannel>
 800c848:	4603      	mov	r3, r0
 800c84a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d10a      	bne.n	800c868 <HAL_ADC_ConfigChannel+0x244>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	2101      	movs	r1, #1
 800c858:	4618      	mov	r0, r3
 800c85a:	f7ff fa4b 	bl	800bcf4 <LL_ADC_GetOffsetChannel>
 800c85e:	4603      	mov	r3, r0
 800c860:	0e9b      	lsrs	r3, r3, #26
 800c862:	f003 021f 	and.w	r2, r3, #31
 800c866:	e01e      	b.n	800c8a6 <HAL_ADC_ConfigChannel+0x282>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	2101      	movs	r1, #1
 800c86e:	4618      	mov	r0, r3
 800c870:	f7ff fa40 	bl	800bcf4 <LL_ADC_GetOffsetChannel>
 800c874:	4603      	mov	r3, r0
 800c876:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c87a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c87e:	fa93 f3a3 	rbit	r3, r3
 800c882:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800c886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c88a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800c88e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c892:	2b00      	cmp	r3, #0
 800c894:	d101      	bne.n	800c89a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 800c896:	2320      	movs	r3, #32
 800c898:	e004      	b.n	800c8a4 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800c89a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c89e:	fab3 f383 	clz	r3, r3
 800c8a2:	b2db      	uxtb	r3, r3
 800c8a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d105      	bne.n	800c8be <HAL_ADC_ConfigChannel+0x29a>
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	0e9b      	lsrs	r3, r3, #26
 800c8b8:	f003 031f 	and.w	r3, r3, #31
 800c8bc:	e018      	b.n	800c8f0 <HAL_ADC_ConfigChannel+0x2cc>
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c8c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c8ca:	fa93 f3a3 	rbit	r3, r3
 800c8ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800c8d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c8d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800c8da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d101      	bne.n	800c8e6 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 800c8e2:	2320      	movs	r3, #32
 800c8e4:	e004      	b.n	800c8f0 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 800c8e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c8ea:	fab3 f383 	clz	r3, r3
 800c8ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d106      	bne.n	800c902 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	2101      	movs	r1, #1
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7ff fa0f 	bl	800bd20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	2102      	movs	r1, #2
 800c908:	4618      	mov	r0, r3
 800c90a:	f7ff f9f3 	bl	800bcf4 <LL_ADC_GetOffsetChannel>
 800c90e:	4603      	mov	r3, r0
 800c910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c914:	2b00      	cmp	r3, #0
 800c916:	d10a      	bne.n	800c92e <HAL_ADC_ConfigChannel+0x30a>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	2102      	movs	r1, #2
 800c91e:	4618      	mov	r0, r3
 800c920:	f7ff f9e8 	bl	800bcf4 <LL_ADC_GetOffsetChannel>
 800c924:	4603      	mov	r3, r0
 800c926:	0e9b      	lsrs	r3, r3, #26
 800c928:	f003 021f 	and.w	r2, r3, #31
 800c92c:	e01e      	b.n	800c96c <HAL_ADC_ConfigChannel+0x348>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	2102      	movs	r1, #2
 800c934:	4618      	mov	r0, r3
 800c936:	f7ff f9dd 	bl	800bcf4 <LL_ADC_GetOffsetChannel>
 800c93a:	4603      	mov	r3, r0
 800c93c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c940:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c944:	fa93 f3a3 	rbit	r3, r3
 800c948:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800c94c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c950:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800c954:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d101      	bne.n	800c960 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800c95c:	2320      	movs	r3, #32
 800c95e:	e004      	b.n	800c96a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 800c960:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c964:	fab3 f383 	clz	r3, r3
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c974:	2b00      	cmp	r3, #0
 800c976:	d105      	bne.n	800c984 <HAL_ADC_ConfigChannel+0x360>
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	0e9b      	lsrs	r3, r3, #26
 800c97e:	f003 031f 	and.w	r3, r3, #31
 800c982:	e016      	b.n	800c9b2 <HAL_ADC_ConfigChannel+0x38e>
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c98c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c990:	fa93 f3a3 	rbit	r3, r3
 800c994:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800c996:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c998:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800c99c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d101      	bne.n	800c9a8 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 800c9a4:	2320      	movs	r3, #32
 800c9a6:	e004      	b.n	800c9b2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 800c9a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c9ac:	fab3 f383 	clz	r3, r3
 800c9b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d106      	bne.n	800c9c4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	2102      	movs	r1, #2
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f7ff f9ae 	bl	800bd20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	2103      	movs	r1, #3
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f7ff f992 	bl	800bcf4 <LL_ADC_GetOffsetChannel>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d10a      	bne.n	800c9f0 <HAL_ADC_ConfigChannel+0x3cc>
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	2103      	movs	r1, #3
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7ff f987 	bl	800bcf4 <LL_ADC_GetOffsetChannel>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	0e9b      	lsrs	r3, r3, #26
 800c9ea:	f003 021f 	and.w	r2, r3, #31
 800c9ee:	e017      	b.n	800ca20 <HAL_ADC_ConfigChannel+0x3fc>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	2103      	movs	r1, #3
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f7ff f97c 	bl	800bcf4 <LL_ADC_GetOffsetChannel>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ca00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ca02:	fa93 f3a3 	rbit	r3, r3
 800ca06:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800ca08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca0a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800ca0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d101      	bne.n	800ca16 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 800ca12:	2320      	movs	r3, #32
 800ca14:	e003      	b.n	800ca1e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 800ca16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca18:	fab3 f383 	clz	r3, r3
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d105      	bne.n	800ca38 <HAL_ADC_ConfigChannel+0x414>
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	0e9b      	lsrs	r3, r3, #26
 800ca32:	f003 031f 	and.w	r3, r3, #31
 800ca36:	e011      	b.n	800ca5c <HAL_ADC_ConfigChannel+0x438>
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ca3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ca40:	fa93 f3a3 	rbit	r3, r3
 800ca44:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800ca46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ca48:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800ca4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d101      	bne.n	800ca54 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 800ca50:	2320      	movs	r3, #32
 800ca52:	e003      	b.n	800ca5c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 800ca54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ca56:	fab3 f383 	clz	r3, r3
 800ca5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d106      	bne.n	800ca6e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2200      	movs	r2, #0
 800ca66:	2103      	movs	r1, #3
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f7ff f959 	bl	800bd20 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7ff fa8e 	bl	800bf94 <LL_ADC_IsEnabled>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	f040 8140 	bne.w	800cd00 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	6818      	ldr	r0, [r3, #0]
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	6819      	ldr	r1, [r3, #0]
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	68db      	ldr	r3, [r3, #12]
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	f7ff f9df 	bl	800be50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	68db      	ldr	r3, [r3, #12]
 800ca96:	4a8f      	ldr	r2, [pc, #572]	; (800ccd4 <HAL_ADC_ConfigChannel+0x6b0>)
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	f040 8131 	bne.w	800cd00 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d10b      	bne.n	800cac6 <HAL_ADC_ConfigChannel+0x4a2>
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	0e9b      	lsrs	r3, r3, #26
 800cab4:	3301      	adds	r3, #1
 800cab6:	f003 031f 	and.w	r3, r3, #31
 800caba:	2b09      	cmp	r3, #9
 800cabc:	bf94      	ite	ls
 800cabe:	2301      	movls	r3, #1
 800cac0:	2300      	movhi	r3, #0
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	e019      	b.n	800cafa <HAL_ADC_ConfigChannel+0x4d6>
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cacc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cace:	fa93 f3a3 	rbit	r3, r3
 800cad2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800cad4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cad6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800cad8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d101      	bne.n	800cae2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800cade:	2320      	movs	r3, #32
 800cae0:	e003      	b.n	800caea <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 800cae2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cae4:	fab3 f383 	clz	r3, r3
 800cae8:	b2db      	uxtb	r3, r3
 800caea:	3301      	adds	r3, #1
 800caec:	f003 031f 	and.w	r3, r3, #31
 800caf0:	2b09      	cmp	r3, #9
 800caf2:	bf94      	ite	ls
 800caf4:	2301      	movls	r3, #1
 800caf6:	2300      	movhi	r3, #0
 800caf8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d079      	beq.n	800cbf2 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d107      	bne.n	800cb1a <HAL_ADC_ConfigChannel+0x4f6>
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	0e9b      	lsrs	r3, r3, #26
 800cb10:	3301      	adds	r3, #1
 800cb12:	069b      	lsls	r3, r3, #26
 800cb14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800cb18:	e015      	b.n	800cb46 <HAL_ADC_ConfigChannel+0x522>
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cb20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb22:	fa93 f3a3 	rbit	r3, r3
 800cb26:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800cb28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb2a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800cb2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d101      	bne.n	800cb36 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 800cb32:	2320      	movs	r3, #32
 800cb34:	e003      	b.n	800cb3e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 800cb36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb38:	fab3 f383 	clz	r3, r3
 800cb3c:	b2db      	uxtb	r3, r3
 800cb3e:	3301      	adds	r3, #1
 800cb40:	069b      	lsls	r3, r3, #26
 800cb42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d109      	bne.n	800cb66 <HAL_ADC_ConfigChannel+0x542>
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	0e9b      	lsrs	r3, r3, #26
 800cb58:	3301      	adds	r3, #1
 800cb5a:	f003 031f 	and.w	r3, r3, #31
 800cb5e:	2101      	movs	r1, #1
 800cb60:	fa01 f303 	lsl.w	r3, r1, r3
 800cb64:	e017      	b.n	800cb96 <HAL_ADC_ConfigChannel+0x572>
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cb6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb6e:	fa93 f3a3 	rbit	r3, r3
 800cb72:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800cb74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb76:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800cb78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d101      	bne.n	800cb82 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800cb7e:	2320      	movs	r3, #32
 800cb80:	e003      	b.n	800cb8a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 800cb82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb84:	fab3 f383 	clz	r3, r3
 800cb88:	b2db      	uxtb	r3, r3
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	f003 031f 	and.w	r3, r3, #31
 800cb90:	2101      	movs	r1, #1
 800cb92:	fa01 f303 	lsl.w	r3, r1, r3
 800cb96:	ea42 0103 	orr.w	r1, r2, r3
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d10a      	bne.n	800cbbc <HAL_ADC_ConfigChannel+0x598>
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	0e9b      	lsrs	r3, r3, #26
 800cbac:	3301      	adds	r3, #1
 800cbae:	f003 021f 	and.w	r2, r3, #31
 800cbb2:	4613      	mov	r3, r2
 800cbb4:	005b      	lsls	r3, r3, #1
 800cbb6:	4413      	add	r3, r2
 800cbb8:	051b      	lsls	r3, r3, #20
 800cbba:	e018      	b.n	800cbee <HAL_ADC_ConfigChannel+0x5ca>
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc4:	fa93 f3a3 	rbit	r3, r3
 800cbc8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800cbca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800cbce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d101      	bne.n	800cbd8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 800cbd4:	2320      	movs	r3, #32
 800cbd6:	e003      	b.n	800cbe0 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 800cbd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbda:	fab3 f383 	clz	r3, r3
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	3301      	adds	r3, #1
 800cbe2:	f003 021f 	and.w	r2, r3, #31
 800cbe6:	4613      	mov	r3, r2
 800cbe8:	005b      	lsls	r3, r3, #1
 800cbea:	4413      	add	r3, r2
 800cbec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800cbee:	430b      	orrs	r3, r1
 800cbf0:	e081      	b.n	800ccf6 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d107      	bne.n	800cc0e <HAL_ADC_ConfigChannel+0x5ea>
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	0e9b      	lsrs	r3, r3, #26
 800cc04:	3301      	adds	r3, #1
 800cc06:	069b      	lsls	r3, r3, #26
 800cc08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800cc0c:	e015      	b.n	800cc3a <HAL_ADC_ConfigChannel+0x616>
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc16:	fa93 f3a3 	rbit	r3, r3
 800cc1a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800cc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc1e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800cc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d101      	bne.n	800cc2a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 800cc26:	2320      	movs	r3, #32
 800cc28:	e003      	b.n	800cc32 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 800cc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2c:	fab3 f383 	clz	r3, r3
 800cc30:	b2db      	uxtb	r3, r3
 800cc32:	3301      	adds	r3, #1
 800cc34:	069b      	lsls	r3, r3, #26
 800cc36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d109      	bne.n	800cc5a <HAL_ADC_ConfigChannel+0x636>
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	0e9b      	lsrs	r3, r3, #26
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	f003 031f 	and.w	r3, r3, #31
 800cc52:	2101      	movs	r1, #1
 800cc54:	fa01 f303 	lsl.w	r3, r1, r3
 800cc58:	e017      	b.n	800cc8a <HAL_ADC_ConfigChannel+0x666>
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800cc60:	6a3b      	ldr	r3, [r7, #32]
 800cc62:	fa93 f3a3 	rbit	r3, r3
 800cc66:	61fb      	str	r3, [r7, #28]
  return result;
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800cc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d101      	bne.n	800cc76 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800cc72:	2320      	movs	r3, #32
 800cc74:	e003      	b.n	800cc7e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800cc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc78:	fab3 f383 	clz	r3, r3
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	3301      	adds	r3, #1
 800cc80:	f003 031f 	and.w	r3, r3, #31
 800cc84:	2101      	movs	r1, #1
 800cc86:	fa01 f303 	lsl.w	r3, r1, r3
 800cc8a:	ea42 0103 	orr.w	r1, r2, r3
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d10d      	bne.n	800ccb6 <HAL_ADC_ConfigChannel+0x692>
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	0e9b      	lsrs	r3, r3, #26
 800cca0:	3301      	adds	r3, #1
 800cca2:	f003 021f 	and.w	r2, r3, #31
 800cca6:	4613      	mov	r3, r2
 800cca8:	005b      	lsls	r3, r3, #1
 800ccaa:	4413      	add	r3, r2
 800ccac:	3b1e      	subs	r3, #30
 800ccae:	051b      	lsls	r3, r3, #20
 800ccb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ccb4:	e01e      	b.n	800ccf4 <HAL_ADC_ConfigChannel+0x6d0>
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	fa93 f3a3 	rbit	r3, r3
 800ccc2:	613b      	str	r3, [r7, #16]
  return result;
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ccc8:	69bb      	ldr	r3, [r7, #24]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d104      	bne.n	800ccd8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800ccce:	2320      	movs	r3, #32
 800ccd0:	e006      	b.n	800cce0 <HAL_ADC_ConfigChannel+0x6bc>
 800ccd2:	bf00      	nop
 800ccd4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800ccd8:	69bb      	ldr	r3, [r7, #24]
 800ccda:	fab3 f383 	clz	r3, r3
 800ccde:	b2db      	uxtb	r3, r3
 800cce0:	3301      	adds	r3, #1
 800cce2:	f003 021f 	and.w	r2, r3, #31
 800cce6:	4613      	mov	r3, r2
 800cce8:	005b      	lsls	r3, r3, #1
 800ccea:	4413      	add	r3, r2
 800ccec:	3b1e      	subs	r3, #30
 800ccee:	051b      	lsls	r3, r3, #20
 800ccf0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ccf4:	430b      	orrs	r3, r1
 800ccf6:	683a      	ldr	r2, [r7, #0]
 800ccf8:	6892      	ldr	r2, [r2, #8]
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	f7ff f87d 	bl	800bdfa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	4b44      	ldr	r3, [pc, #272]	; (800ce18 <HAL_ADC_ConfigChannel+0x7f4>)
 800cd06:	4013      	ands	r3, r2
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d07a      	beq.n	800ce02 <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800cd0c:	4843      	ldr	r0, [pc, #268]	; (800ce1c <HAL_ADC_ConfigChannel+0x7f8>)
 800cd0e:	f7fe ffbf 	bl	800bc90 <LL_ADC_GetCommonPathInternalCh>
 800cd12:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	4a41      	ldr	r2, [pc, #260]	; (800ce20 <HAL_ADC_ConfigChannel+0x7fc>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d12c      	bne.n	800cd7a <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800cd20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cd24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d126      	bne.n	800cd7a <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a3c      	ldr	r2, [pc, #240]	; (800ce24 <HAL_ADC_ConfigChannel+0x800>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d004      	beq.n	800cd40 <HAL_ADC_ConfigChannel+0x71c>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	4a3b      	ldr	r2, [pc, #236]	; (800ce28 <HAL_ADC_ConfigChannel+0x804>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d15d      	bne.n	800cdfc <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800cd40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cd44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cd48:	4619      	mov	r1, r3
 800cd4a:	4834      	ldr	r0, [pc, #208]	; (800ce1c <HAL_ADC_ConfigChannel+0x7f8>)
 800cd4c:	f7fe ff8d 	bl	800bc6a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800cd50:	4b36      	ldr	r3, [pc, #216]	; (800ce2c <HAL_ADC_ConfigChannel+0x808>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	099b      	lsrs	r3, r3, #6
 800cd56:	4a36      	ldr	r2, [pc, #216]	; (800ce30 <HAL_ADC_ConfigChannel+0x80c>)
 800cd58:	fba2 2303 	umull	r2, r3, r2, r3
 800cd5c:	099b      	lsrs	r3, r3, #6
 800cd5e:	1c5a      	adds	r2, r3, #1
 800cd60:	4613      	mov	r3, r2
 800cd62:	005b      	lsls	r3, r3, #1
 800cd64:	4413      	add	r3, r2
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800cd6a:	e002      	b.n	800cd72 <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	3b01      	subs	r3, #1
 800cd70:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d1f9      	bne.n	800cd6c <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800cd78:	e040      	b.n	800cdfc <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	4a2d      	ldr	r2, [pc, #180]	; (800ce34 <HAL_ADC_ConfigChannel+0x810>)
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d118      	bne.n	800cdb6 <HAL_ADC_ConfigChannel+0x792>
 800cd84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cd88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d112      	bne.n	800cdb6 <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a23      	ldr	r2, [pc, #140]	; (800ce24 <HAL_ADC_ConfigChannel+0x800>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d004      	beq.n	800cda4 <HAL_ADC_ConfigChannel+0x780>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	4a22      	ldr	r2, [pc, #136]	; (800ce28 <HAL_ADC_ConfigChannel+0x804>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d12d      	bne.n	800ce00 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800cda4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cda8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cdac:	4619      	mov	r1, r3
 800cdae:	481b      	ldr	r0, [pc, #108]	; (800ce1c <HAL_ADC_ConfigChannel+0x7f8>)
 800cdb0:	f7fe ff5b 	bl	800bc6a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800cdb4:	e024      	b.n	800ce00 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a1f      	ldr	r2, [pc, #124]	; (800ce38 <HAL_ADC_ConfigChannel+0x814>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d120      	bne.n	800ce02 <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800cdc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cdc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d11a      	bne.n	800ce02 <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4a14      	ldr	r2, [pc, #80]	; (800ce24 <HAL_ADC_ConfigChannel+0x800>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d115      	bne.n	800ce02 <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800cdd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800cdda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cdde:	4619      	mov	r1, r3
 800cde0:	480e      	ldr	r0, [pc, #56]	; (800ce1c <HAL_ADC_ConfigChannel+0x7f8>)
 800cde2:	f7fe ff42 	bl	800bc6a <LL_ADC_SetCommonPathInternalCh>
 800cde6:	e00c      	b.n	800ce02 <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdec:	f043 0220 	orr.w	r2, r3, #32
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800cdfa:	e002      	b.n	800ce02 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800cdfc:	bf00      	nop
 800cdfe:	e000      	b.n	800ce02 <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ce00:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2200      	movs	r2, #0
 800ce06:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800ce0a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	37d8      	adds	r7, #216	; 0xd8
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	80080000 	.word	0x80080000
 800ce1c:	50040300 	.word	0x50040300
 800ce20:	c7520000 	.word	0xc7520000
 800ce24:	50040000 	.word	0x50040000
 800ce28:	50040200 	.word	0x50040200
 800ce2c:	20000194 	.word	0x20000194
 800ce30:	053e2d63 	.word	0x053e2d63
 800ce34:	cb840000 	.word	0xcb840000
 800ce38:	80000001 	.word	0x80000001

0800ce3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b084      	sub	sp, #16
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800ce44:	2300      	movs	r3, #0
 800ce46:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7ff f8a1 	bl	800bf94 <LL_ADC_IsEnabled>
 800ce52:	4603      	mov	r3, r0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d169      	bne.n	800cf2c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	689a      	ldr	r2, [r3, #8]
 800ce5e:	4b36      	ldr	r3, [pc, #216]	; (800cf38 <ADC_Enable+0xfc>)
 800ce60:	4013      	ands	r3, r2
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d00d      	beq.n	800ce82 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce6a:	f043 0210 	orr.w	r2, r3, #16
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce76:	f043 0201 	orr.w	r2, r3, #1
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800ce7e:	2301      	movs	r3, #1
 800ce80:	e055      	b.n	800cf2e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7ff f870 	bl	800bf6c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800ce8c:	482b      	ldr	r0, [pc, #172]	; (800cf3c <ADC_Enable+0x100>)
 800ce8e:	f7fe feff 	bl	800bc90 <LL_ADC_GetCommonPathInternalCh>
 800ce92:	4603      	mov	r3, r0
 800ce94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d013      	beq.n	800cec4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ce9c:	4b28      	ldr	r3, [pc, #160]	; (800cf40 <ADC_Enable+0x104>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	099b      	lsrs	r3, r3, #6
 800cea2:	4a28      	ldr	r2, [pc, #160]	; (800cf44 <ADC_Enable+0x108>)
 800cea4:	fba2 2303 	umull	r2, r3, r2, r3
 800cea8:	099b      	lsrs	r3, r3, #6
 800ceaa:	1c5a      	adds	r2, r3, #1
 800ceac:	4613      	mov	r3, r2
 800ceae:	005b      	lsls	r3, r3, #1
 800ceb0:	4413      	add	r3, r2
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800ceb6:	e002      	b.n	800cebe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	3b01      	subs	r3, #1
 800cebc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d1f9      	bne.n	800ceb8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800cec4:	f7fe fe6e 	bl	800bba4 <HAL_GetTick>
 800cec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ceca:	e028      	b.n	800cf1e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7ff f85f 	bl	800bf94 <LL_ADC_IsEnabled>
 800ced6:	4603      	mov	r3, r0
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d104      	bne.n	800cee6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7ff f843 	bl	800bf6c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800cee6:	f7fe fe5d 	bl	800bba4 <HAL_GetTick>
 800ceea:	4602      	mov	r2, r0
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	1ad3      	subs	r3, r2, r3
 800cef0:	2b02      	cmp	r3, #2
 800cef2:	d914      	bls.n	800cf1e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f003 0301 	and.w	r3, r3, #1
 800cefe:	2b01      	cmp	r3, #1
 800cf00:	d00d      	beq.n	800cf1e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf06:	f043 0210 	orr.w	r2, r3, #16
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf12:	f043 0201 	orr.w	r2, r3, #1
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e007      	b.n	800cf2e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f003 0301 	and.w	r3, r3, #1
 800cf28:	2b01      	cmp	r3, #1
 800cf2a:	d1cf      	bne.n	800cecc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800cf2c:	2300      	movs	r3, #0
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	8000003f 	.word	0x8000003f
 800cf3c:	50040300 	.word	0x50040300
 800cf40:	20000194 	.word	0x20000194
 800cf44:	053e2d63 	.word	0x053e2d63

0800cf48 <LL_ADC_IsEnabled>:
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b083      	sub	sp, #12
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	689b      	ldr	r3, [r3, #8]
 800cf54:	f003 0301 	and.w	r3, r3, #1
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d101      	bne.n	800cf60 <LL_ADC_IsEnabled+0x18>
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	e000      	b.n	800cf62 <LL_ADC_IsEnabled+0x1a>
 800cf60:	2300      	movs	r3, #0
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	370c      	adds	r7, #12
 800cf66:	46bd      	mov	sp, r7
 800cf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6c:	4770      	bx	lr

0800cf6e <LL_ADC_REG_IsConversionOngoing>:
{
 800cf6e:	b480      	push	{r7}
 800cf70:	b083      	sub	sp, #12
 800cf72:	af00      	add	r7, sp, #0
 800cf74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	689b      	ldr	r3, [r3, #8]
 800cf7a:	f003 0304 	and.w	r3, r3, #4
 800cf7e:	2b04      	cmp	r3, #4
 800cf80:	d101      	bne.n	800cf86 <LL_ADC_REG_IsConversionOngoing+0x18>
 800cf82:	2301      	movs	r3, #1
 800cf84:	e000      	b.n	800cf88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800cf86:	2300      	movs	r3, #0
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	370c      	adds	r7, #12
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800cf94:	b590      	push	{r4, r7, lr}
 800cf96:	b0a1      	sub	sp, #132	; 0x84
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800cfaa:	2b01      	cmp	r3, #1
 800cfac:	d101      	bne.n	800cfb2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800cfae:	2302      	movs	r3, #2
 800cfb0:	e093      	b.n	800d0da <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800cfba:	2300      	movs	r3, #0
 800cfbc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4a47      	ldr	r2, [pc, #284]	; (800d0e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800cfc8:	4293      	cmp	r3, r2
 800cfca:	d102      	bne.n	800cfd2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800cfcc:	4b46      	ldr	r3, [pc, #280]	; (800d0e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800cfce:	60fb      	str	r3, [r7, #12]
 800cfd0:	e001      	b.n	800cfd6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d10b      	bne.n	800cff4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfe0:	f043 0220 	orr.w	r2, r3, #32
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2200      	movs	r2, #0
 800cfec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800cff0:	2301      	movs	r3, #1
 800cff2:	e072      	b.n	800d0da <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7ff ffb9 	bl	800cf6e <LL_ADC_REG_IsConversionOngoing>
 800cffc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4618      	mov	r0, r3
 800d004:	f7ff ffb3 	bl	800cf6e <LL_ADC_REG_IsConversionOngoing>
 800d008:	4603      	mov	r3, r0
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d154      	bne.n	800d0b8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800d00e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d010:	2b00      	cmp	r3, #0
 800d012:	d151      	bne.n	800d0b8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800d014:	4b35      	ldr	r3, [pc, #212]	; (800d0ec <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800d016:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d02c      	beq.n	800d07a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800d020:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d022:	689b      	ldr	r3, [r3, #8]
 800d024:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	6859      	ldr	r1, [r3, #4]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d032:	035b      	lsls	r3, r3, #13
 800d034:	430b      	orrs	r3, r1
 800d036:	431a      	orrs	r2, r3
 800d038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d03a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800d03c:	4829      	ldr	r0, [pc, #164]	; (800d0e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800d03e:	f7ff ff83 	bl	800cf48 <LL_ADC_IsEnabled>
 800d042:	4604      	mov	r4, r0
 800d044:	4828      	ldr	r0, [pc, #160]	; (800d0e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800d046:	f7ff ff7f 	bl	800cf48 <LL_ADC_IsEnabled>
 800d04a:	4603      	mov	r3, r0
 800d04c:	431c      	orrs	r4, r3
 800d04e:	4828      	ldr	r0, [pc, #160]	; (800d0f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800d050:	f7ff ff7a 	bl	800cf48 <LL_ADC_IsEnabled>
 800d054:	4603      	mov	r3, r0
 800d056:	4323      	orrs	r3, r4
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d137      	bne.n	800d0cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800d05c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d05e:	689b      	ldr	r3, [r3, #8]
 800d060:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800d064:	f023 030f 	bic.w	r3, r3, #15
 800d068:	683a      	ldr	r2, [r7, #0]
 800d06a:	6811      	ldr	r1, [r2, #0]
 800d06c:	683a      	ldr	r2, [r7, #0]
 800d06e:	6892      	ldr	r2, [r2, #8]
 800d070:	430a      	orrs	r2, r1
 800d072:	431a      	orrs	r2, r3
 800d074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d076:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800d078:	e028      	b.n	800d0cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800d07a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d07c:	689b      	ldr	r3, [r3, #8]
 800d07e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d084:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800d086:	4817      	ldr	r0, [pc, #92]	; (800d0e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800d088:	f7ff ff5e 	bl	800cf48 <LL_ADC_IsEnabled>
 800d08c:	4604      	mov	r4, r0
 800d08e:	4816      	ldr	r0, [pc, #88]	; (800d0e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800d090:	f7ff ff5a 	bl	800cf48 <LL_ADC_IsEnabled>
 800d094:	4603      	mov	r3, r0
 800d096:	431c      	orrs	r4, r3
 800d098:	4815      	ldr	r0, [pc, #84]	; (800d0f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800d09a:	f7ff ff55 	bl	800cf48 <LL_ADC_IsEnabled>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	4323      	orrs	r3, r4
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d112      	bne.n	800d0cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800d0a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d0a8:	689b      	ldr	r3, [r3, #8]
 800d0aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800d0ae:	f023 030f 	bic.w	r3, r3, #15
 800d0b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d0b4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800d0b6:	e009      	b.n	800d0cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0bc:	f043 0220 	orr.w	r2, r3, #32
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d0ca:	e000      	b.n	800d0ce <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800d0cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800d0d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3784      	adds	r7, #132	; 0x84
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd90      	pop	{r4, r7, pc}
 800d0e2:	bf00      	nop
 800d0e4:	50040000 	.word	0x50040000
 800d0e8:	50040100 	.word	0x50040100
 800d0ec:	50040300 	.word	0x50040300
 800d0f0:	50040200 	.word	0x50040200

0800d0f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b085      	sub	sp, #20
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f003 0307 	and.w	r3, r3, #7
 800d102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d104:	4b0c      	ldr	r3, [pc, #48]	; (800d138 <__NVIC_SetPriorityGrouping+0x44>)
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d10a:	68ba      	ldr	r2, [r7, #8]
 800d10c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d110:	4013      	ands	r3, r2
 800d112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d11c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800d120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d126:	4a04      	ldr	r2, [pc, #16]	; (800d138 <__NVIC_SetPriorityGrouping+0x44>)
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	60d3      	str	r3, [r2, #12]
}
 800d12c:	bf00      	nop
 800d12e:	3714      	adds	r7, #20
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr
 800d138:	e000ed00 	.word	0xe000ed00

0800d13c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800d13c:	b480      	push	{r7}
 800d13e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d140:	4b04      	ldr	r3, [pc, #16]	; (800d154 <__NVIC_GetPriorityGrouping+0x18>)
 800d142:	68db      	ldr	r3, [r3, #12]
 800d144:	0a1b      	lsrs	r3, r3, #8
 800d146:	f003 0307 	and.w	r3, r3, #7
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr
 800d154:	e000ed00 	.word	0xe000ed00

0800d158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d158:	b480      	push	{r7}
 800d15a:	b083      	sub	sp, #12
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	4603      	mov	r3, r0
 800d160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d166:	2b00      	cmp	r3, #0
 800d168:	db0b      	blt.n	800d182 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d16a:	79fb      	ldrb	r3, [r7, #7]
 800d16c:	f003 021f 	and.w	r2, r3, #31
 800d170:	4907      	ldr	r1, [pc, #28]	; (800d190 <__NVIC_EnableIRQ+0x38>)
 800d172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d176:	095b      	lsrs	r3, r3, #5
 800d178:	2001      	movs	r0, #1
 800d17a:	fa00 f202 	lsl.w	r2, r0, r2
 800d17e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800d182:	bf00      	nop
 800d184:	370c      	adds	r7, #12
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr
 800d18e:	bf00      	nop
 800d190:	e000e100 	.word	0xe000e100

0800d194 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800d194:	b480      	push	{r7}
 800d196:	b083      	sub	sp, #12
 800d198:	af00      	add	r7, sp, #0
 800d19a:	4603      	mov	r3, r0
 800d19c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d19e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	db12      	blt.n	800d1cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d1a6:	79fb      	ldrb	r3, [r7, #7]
 800d1a8:	f003 021f 	and.w	r2, r3, #31
 800d1ac:	490a      	ldr	r1, [pc, #40]	; (800d1d8 <__NVIC_DisableIRQ+0x44>)
 800d1ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1b2:	095b      	lsrs	r3, r3, #5
 800d1b4:	2001      	movs	r0, #1
 800d1b6:	fa00 f202 	lsl.w	r2, r0, r2
 800d1ba:	3320      	adds	r3, #32
 800d1bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800d1c0:	f3bf 8f4f 	dsb	sy
}
 800d1c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800d1c6:	f3bf 8f6f 	isb	sy
}
 800d1ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800d1cc:	bf00      	nop
 800d1ce:	370c      	adds	r7, #12
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d6:	4770      	bx	lr
 800d1d8:	e000e100 	.word	0xe000e100

0800d1dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b083      	sub	sp, #12
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	6039      	str	r1, [r7, #0]
 800d1e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d1e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	db0a      	blt.n	800d206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	b2da      	uxtb	r2, r3
 800d1f4:	490c      	ldr	r1, [pc, #48]	; (800d228 <__NVIC_SetPriority+0x4c>)
 800d1f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1fa:	0112      	lsls	r2, r2, #4
 800d1fc:	b2d2      	uxtb	r2, r2
 800d1fe:	440b      	add	r3, r1
 800d200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800d204:	e00a      	b.n	800d21c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	b2da      	uxtb	r2, r3
 800d20a:	4908      	ldr	r1, [pc, #32]	; (800d22c <__NVIC_SetPriority+0x50>)
 800d20c:	79fb      	ldrb	r3, [r7, #7]
 800d20e:	f003 030f 	and.w	r3, r3, #15
 800d212:	3b04      	subs	r3, #4
 800d214:	0112      	lsls	r2, r2, #4
 800d216:	b2d2      	uxtb	r2, r2
 800d218:	440b      	add	r3, r1
 800d21a:	761a      	strb	r2, [r3, #24]
}
 800d21c:	bf00      	nop
 800d21e:	370c      	adds	r7, #12
 800d220:	46bd      	mov	sp, r7
 800d222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d226:	4770      	bx	lr
 800d228:	e000e100 	.word	0xe000e100
 800d22c:	e000ed00 	.word	0xe000ed00

0800d230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d230:	b480      	push	{r7}
 800d232:	b089      	sub	sp, #36	; 0x24
 800d234:	af00      	add	r7, sp, #0
 800d236:	60f8      	str	r0, [r7, #12]
 800d238:	60b9      	str	r1, [r7, #8]
 800d23a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f003 0307 	and.w	r3, r3, #7
 800d242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	f1c3 0307 	rsb	r3, r3, #7
 800d24a:	2b04      	cmp	r3, #4
 800d24c:	bf28      	it	cs
 800d24e:	2304      	movcs	r3, #4
 800d250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d252:	69fb      	ldr	r3, [r7, #28]
 800d254:	3304      	adds	r3, #4
 800d256:	2b06      	cmp	r3, #6
 800d258:	d902      	bls.n	800d260 <NVIC_EncodePriority+0x30>
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	3b03      	subs	r3, #3
 800d25e:	e000      	b.n	800d262 <NVIC_EncodePriority+0x32>
 800d260:	2300      	movs	r3, #0
 800d262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d268:	69bb      	ldr	r3, [r7, #24]
 800d26a:	fa02 f303 	lsl.w	r3, r2, r3
 800d26e:	43da      	mvns	r2, r3
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	401a      	ands	r2, r3
 800d274:	697b      	ldr	r3, [r7, #20]
 800d276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d278:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	fa01 f303 	lsl.w	r3, r1, r3
 800d282:	43d9      	mvns	r1, r3
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d288:	4313      	orrs	r3, r2
         );
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3724      	adds	r7, #36	; 0x24
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr
	...

0800d298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	3b01      	subs	r3, #1
 800d2a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d2a8:	d301      	bcc.n	800d2ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e00f      	b.n	800d2ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d2ae:	4a0a      	ldr	r2, [pc, #40]	; (800d2d8 <SysTick_Config+0x40>)
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	3b01      	subs	r3, #1
 800d2b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d2b6:	210f      	movs	r1, #15
 800d2b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2bc:	f7ff ff8e 	bl	800d1dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d2c0:	4b05      	ldr	r3, [pc, #20]	; (800d2d8 <SysTick_Config+0x40>)
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d2c6:	4b04      	ldr	r3, [pc, #16]	; (800d2d8 <SysTick_Config+0x40>)
 800d2c8:	2207      	movs	r2, #7
 800d2ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d2cc:	2300      	movs	r3, #0
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3708      	adds	r7, #8
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	e000e010 	.word	0xe000e010

0800d2dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b082      	sub	sp, #8
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f7ff ff05 	bl	800d0f4 <__NVIC_SetPriorityGrouping>
}
 800d2ea:	bf00      	nop
 800d2ec:	3708      	adds	r7, #8
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b086      	sub	sp, #24
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	60b9      	str	r1, [r7, #8]
 800d2fc:	607a      	str	r2, [r7, #4]
 800d2fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800d300:	2300      	movs	r3, #0
 800d302:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800d304:	f7ff ff1a 	bl	800d13c <__NVIC_GetPriorityGrouping>
 800d308:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d30a:	687a      	ldr	r2, [r7, #4]
 800d30c:	68b9      	ldr	r1, [r7, #8]
 800d30e:	6978      	ldr	r0, [r7, #20]
 800d310:	f7ff ff8e 	bl	800d230 <NVIC_EncodePriority>
 800d314:	4602      	mov	r2, r0
 800d316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d31a:	4611      	mov	r1, r2
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7ff ff5d 	bl	800d1dc <__NVIC_SetPriority>
}
 800d322:	bf00      	nop
 800d324:	3718      	adds	r7, #24
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}

0800d32a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d32a:	b580      	push	{r7, lr}
 800d32c:	b082      	sub	sp, #8
 800d32e:	af00      	add	r7, sp, #0
 800d330:	4603      	mov	r3, r0
 800d332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d338:	4618      	mov	r0, r3
 800d33a:	f7ff ff0d 	bl	800d158 <__NVIC_EnableIRQ>
}
 800d33e:	bf00      	nop
 800d340:	3708      	adds	r7, #8
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}

0800d346 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800d346:	b580      	push	{r7, lr}
 800d348:	b082      	sub	sp, #8
 800d34a:	af00      	add	r7, sp, #0
 800d34c:	4603      	mov	r3, r0
 800d34e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800d350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d354:	4618      	mov	r0, r3
 800d356:	f7ff ff1d 	bl	800d194 <__NVIC_DisableIRQ>
}
 800d35a:	bf00      	nop
 800d35c:	3708      	adds	r7, #8
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}

0800d362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d362:	b580      	push	{r7, lr}
 800d364:	b082      	sub	sp, #8
 800d366:	af00      	add	r7, sp, #0
 800d368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f7ff ff94 	bl	800d298 <SysTick_Config>
 800d370:	4603      	mov	r3, r0
}
 800d372:	4618      	mov	r0, r3
 800d374:	3708      	adds	r7, #8
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
	...

0800d37c <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b082      	sub	sp, #8
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d101      	bne.n	800d38e <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800d38a:	2301      	movs	r3, #1
 800d38c:	e075      	b.n	800d47a <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d394:	b2db      	uxtb	r3, r3
 800d396:	2b00      	cmp	r3, #0
 800d398:	d106      	bne.n	800d3a8 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2200      	movs	r2, #0
 800d39e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f7f3 ff56 	bl	8001254 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2202      	movs	r2, #2
 800d3ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	681a      	ldr	r2, [r3, #0]
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d3be:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	699b      	ldr	r3, [r3, #24]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d002      	beq.n	800d3ce <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	6819      	ldr	r1, [r3, #0]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681a      	ldr	r2, [r3, #0]
 800d3d8:	4b2a      	ldr	r3, [pc, #168]	; (800d484 <HAL_DCMI_Init+0x108>)
 800d3da:	400b      	ands	r3, r1
 800d3dc:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	6819      	ldr	r1, [r3, #0]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	685a      	ldr	r2, [r3, #4]
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	695b      	ldr	r3, [r3, #20]
 800d3ec:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800d3f2:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	691b      	ldr	r3, [r3, #16]
 800d3f8:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800d3fe:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	699b      	ldr	r3, [r3, #24]
 800d404:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800d40a:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d410:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800d416:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41c:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800d422:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	430a      	orrs	r2, r1
 800d42a:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	2b10      	cmp	r3, #16
 800d432:	d112      	bne.n	800d45a <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	7f1b      	ldrb	r3, [r3, #28]
 800d438:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	7f5b      	ldrb	r3, [r3, #29]
 800d43e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800d440:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	7f9b      	ldrb	r3, [r3, #30]
 800d446:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 800d448:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	7fdb      	ldrb	r3, [r3, #31]
 800d450:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800d456:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800d458:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	68da      	ldr	r2, [r3, #12]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f042 021f 	orr.w	r2, r2, #31
 800d468:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2200      	movs	r2, #0
 800d46e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2201      	movs	r2, #1
 800d474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800d478:	2300      	movs	r3, #0
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3708      	adds	r7, #8
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	ffe0f007 	.word	0xffe0f007

0800d488 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d101      	bne.n	800d49a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800d496:	2301      	movs	r3, #1
 800d498:	e0ac      	b.n	800d5f4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f000 f8b2 	bl	800d608 <DFSDM_GetChannelFromInstance>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	4a55      	ldr	r2, [pc, #340]	; (800d5fc <HAL_DFSDM_ChannelInit+0x174>)
 800d4a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d001      	beq.n	800d4b4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	e09f      	b.n	800d5f4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800d4b4:	6878      	ldr	r0, [r7, #4]
 800d4b6:	f7f3 ffb9 	bl	800142c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800d4ba:	4b51      	ldr	r3, [pc, #324]	; (800d600 <HAL_DFSDM_ChannelInit+0x178>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	3301      	adds	r3, #1
 800d4c0:	4a4f      	ldr	r2, [pc, #316]	; (800d600 <HAL_DFSDM_ChannelInit+0x178>)
 800d4c2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800d4c4:	4b4e      	ldr	r3, [pc, #312]	; (800d600 <HAL_DFSDM_ChannelInit+0x178>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d125      	bne.n	800d518 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800d4cc:	4b4d      	ldr	r3, [pc, #308]	; (800d604 <HAL_DFSDM_ChannelInit+0x17c>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4a4c      	ldr	r2, [pc, #304]	; (800d604 <HAL_DFSDM_ChannelInit+0x17c>)
 800d4d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d4d6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800d4d8:	4b4a      	ldr	r3, [pc, #296]	; (800d604 <HAL_DFSDM_ChannelInit+0x17c>)
 800d4da:	681a      	ldr	r2, [r3, #0]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	689b      	ldr	r3, [r3, #8]
 800d4e0:	4948      	ldr	r1, [pc, #288]	; (800d604 <HAL_DFSDM_ChannelInit+0x17c>)
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800d4e6:	4b47      	ldr	r3, [pc, #284]	; (800d604 <HAL_DFSDM_ChannelInit+0x17c>)
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	4a46      	ldr	r2, [pc, #280]	; (800d604 <HAL_DFSDM_ChannelInit+0x17c>)
 800d4ec:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800d4f0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	791b      	ldrb	r3, [r3, #4]
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	d108      	bne.n	800d50c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800d4fa:	4b42      	ldr	r3, [pc, #264]	; (800d604 <HAL_DFSDM_ChannelInit+0x17c>)
 800d4fc:	681a      	ldr	r2, [r3, #0]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	68db      	ldr	r3, [r3, #12]
 800d502:	3b01      	subs	r3, #1
 800d504:	041b      	lsls	r3, r3, #16
 800d506:	493f      	ldr	r1, [pc, #252]	; (800d604 <HAL_DFSDM_ChannelInit+0x17c>)
 800d508:	4313      	orrs	r3, r2
 800d50a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800d50c:	4b3d      	ldr	r3, [pc, #244]	; (800d604 <HAL_DFSDM_ChannelInit+0x17c>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4a3c      	ldr	r2, [pc, #240]	; (800d604 <HAL_DFSDM_ChannelInit+0x17c>)
 800d512:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d516:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	681a      	ldr	r2, [r3, #0]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800d526:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	6819      	ldr	r1, [r3, #0]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800d536:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800d53c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	430a      	orrs	r2, r1
 800d544:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	681a      	ldr	r2, [r3, #0]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f022 020f 	bic.w	r2, r2, #15
 800d554:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	6819      	ldr	r1, [r3, #0]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800d564:	431a      	orrs	r2, r3
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	430a      	orrs	r2, r1
 800d56c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	689a      	ldr	r2, [r3, #8]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800d57c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	6899      	ldr	r1, [r3, #8]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d58c:	3b01      	subs	r3, #1
 800d58e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800d590:	431a      	orrs	r2, r3
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	430a      	orrs	r2, r1
 800d598:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	685a      	ldr	r2, [r3, #4]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f002 0207 	and.w	r2, r2, #7
 800d5a8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	6859      	ldr	r1, [r3, #4]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5b4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5ba:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800d5bc:	431a      	orrs	r2, r3
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	430a      	orrs	r2, r1
 800d5c4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	681a      	ldr	r2, [r3, #0]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d5d4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2201      	movs	r2, #1
 800d5da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f000 f810 	bl	800d608 <DFSDM_GetChannelFromInstance>
 800d5e8:	4602      	mov	r2, r0
 800d5ea:	4904      	ldr	r1, [pc, #16]	; (800d5fc <HAL_DFSDM_ChannelInit+0x174>)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800d5f2:	2300      	movs	r3, #0
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3708      	adds	r7, #8
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}
 800d5fc:	20001228 	.word	0x20001228
 800d600:	20001224 	.word	0x20001224
 800d604:	40016000 	.word	0x40016000

0800d608 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800d608:	b480      	push	{r7}
 800d60a:	b085      	sub	sp, #20
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	4a1c      	ldr	r2, [pc, #112]	; (800d684 <DFSDM_GetChannelFromInstance+0x7c>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d102      	bne.n	800d61e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800d618:	2300      	movs	r3, #0
 800d61a:	60fb      	str	r3, [r7, #12]
 800d61c:	e02b      	b.n	800d676 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	4a19      	ldr	r2, [pc, #100]	; (800d688 <DFSDM_GetChannelFromInstance+0x80>)
 800d622:	4293      	cmp	r3, r2
 800d624:	d102      	bne.n	800d62c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800d626:	2301      	movs	r3, #1
 800d628:	60fb      	str	r3, [r7, #12]
 800d62a:	e024      	b.n	800d676 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	4a17      	ldr	r2, [pc, #92]	; (800d68c <DFSDM_GetChannelFromInstance+0x84>)
 800d630:	4293      	cmp	r3, r2
 800d632:	d102      	bne.n	800d63a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800d634:	2302      	movs	r3, #2
 800d636:	60fb      	str	r3, [r7, #12]
 800d638:	e01d      	b.n	800d676 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	4a14      	ldr	r2, [pc, #80]	; (800d690 <DFSDM_GetChannelFromInstance+0x88>)
 800d63e:	4293      	cmp	r3, r2
 800d640:	d102      	bne.n	800d648 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800d642:	2304      	movs	r3, #4
 800d644:	60fb      	str	r3, [r7, #12]
 800d646:	e016      	b.n	800d676 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	4a12      	ldr	r2, [pc, #72]	; (800d694 <DFSDM_GetChannelFromInstance+0x8c>)
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d102      	bne.n	800d656 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800d650:	2305      	movs	r3, #5
 800d652:	60fb      	str	r3, [r7, #12]
 800d654:	e00f      	b.n	800d676 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	4a0f      	ldr	r2, [pc, #60]	; (800d698 <DFSDM_GetChannelFromInstance+0x90>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d102      	bne.n	800d664 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800d65e:	2306      	movs	r3, #6
 800d660:	60fb      	str	r3, [r7, #12]
 800d662:	e008      	b.n	800d676 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	4a0d      	ldr	r2, [pc, #52]	; (800d69c <DFSDM_GetChannelFromInstance+0x94>)
 800d668:	4293      	cmp	r3, r2
 800d66a:	d102      	bne.n	800d672 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800d66c:	2307      	movs	r3, #7
 800d66e:	60fb      	str	r3, [r7, #12]
 800d670:	e001      	b.n	800d676 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800d672:	2303      	movs	r3, #3
 800d674:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800d676:	68fb      	ldr	r3, [r7, #12]
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3714      	adds	r7, #20
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr
 800d684:	40016000 	.word	0x40016000
 800d688:	40016020 	.word	0x40016020
 800d68c:	40016040 	.word	0x40016040
 800d690:	40016080 	.word	0x40016080
 800d694:	400160a0 	.word	0x400160a0
 800d698:	400160c0 	.word	0x400160c0
 800d69c:	400160e0 	.word	0x400160e0

0800d6a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b087      	sub	sp, #28
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]
 800d6a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d6ae:	e166      	b.n	800d97e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	2101      	movs	r1, #1
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	fa01 f303 	lsl.w	r3, r1, r3
 800d6bc:	4013      	ands	r3, r2
 800d6be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	f000 8158 	beq.w	800d978 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	f003 0303 	and.w	r3, r3, #3
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	d005      	beq.n	800d6e0 <HAL_GPIO_Init+0x40>
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	685b      	ldr	r3, [r3, #4]
 800d6d8:	f003 0303 	and.w	r3, r3, #3
 800d6dc:	2b02      	cmp	r3, #2
 800d6de:	d130      	bne.n	800d742 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	689b      	ldr	r3, [r3, #8]
 800d6e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	005b      	lsls	r3, r3, #1
 800d6ea:	2203      	movs	r2, #3
 800d6ec:	fa02 f303 	lsl.w	r3, r2, r3
 800d6f0:	43db      	mvns	r3, r3
 800d6f2:	693a      	ldr	r2, [r7, #16]
 800d6f4:	4013      	ands	r3, r2
 800d6f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	68da      	ldr	r2, [r3, #12]
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	005b      	lsls	r3, r3, #1
 800d700:	fa02 f303 	lsl.w	r3, r2, r3
 800d704:	693a      	ldr	r2, [r7, #16]
 800d706:	4313      	orrs	r3, r2
 800d708:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	693a      	ldr	r2, [r7, #16]
 800d70e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	685b      	ldr	r3, [r3, #4]
 800d714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d716:	2201      	movs	r2, #1
 800d718:	697b      	ldr	r3, [r7, #20]
 800d71a:	fa02 f303 	lsl.w	r3, r2, r3
 800d71e:	43db      	mvns	r3, r3
 800d720:	693a      	ldr	r2, [r7, #16]
 800d722:	4013      	ands	r3, r2
 800d724:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	091b      	lsrs	r3, r3, #4
 800d72c:	f003 0201 	and.w	r2, r3, #1
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	fa02 f303 	lsl.w	r3, r2, r3
 800d736:	693a      	ldr	r2, [r7, #16]
 800d738:	4313      	orrs	r3, r2
 800d73a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	693a      	ldr	r2, [r7, #16]
 800d740:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	685b      	ldr	r3, [r3, #4]
 800d746:	f003 0303 	and.w	r3, r3, #3
 800d74a:	2b03      	cmp	r3, #3
 800d74c:	d017      	beq.n	800d77e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	68db      	ldr	r3, [r3, #12]
 800d752:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	005b      	lsls	r3, r3, #1
 800d758:	2203      	movs	r2, #3
 800d75a:	fa02 f303 	lsl.w	r3, r2, r3
 800d75e:	43db      	mvns	r3, r3
 800d760:	693a      	ldr	r2, [r7, #16]
 800d762:	4013      	ands	r3, r2
 800d764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	689a      	ldr	r2, [r3, #8]
 800d76a:	697b      	ldr	r3, [r7, #20]
 800d76c:	005b      	lsls	r3, r3, #1
 800d76e:	fa02 f303 	lsl.w	r3, r2, r3
 800d772:	693a      	ldr	r2, [r7, #16]
 800d774:	4313      	orrs	r3, r2
 800d776:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	693a      	ldr	r2, [r7, #16]
 800d77c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	685b      	ldr	r3, [r3, #4]
 800d782:	f003 0303 	and.w	r3, r3, #3
 800d786:	2b02      	cmp	r3, #2
 800d788:	d123      	bne.n	800d7d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	08da      	lsrs	r2, r3, #3
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	3208      	adds	r2, #8
 800d792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d796:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	f003 0307 	and.w	r3, r3, #7
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	220f      	movs	r2, #15
 800d7a2:	fa02 f303 	lsl.w	r3, r2, r3
 800d7a6:	43db      	mvns	r3, r3
 800d7a8:	693a      	ldr	r2, [r7, #16]
 800d7aa:	4013      	ands	r3, r2
 800d7ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	691a      	ldr	r2, [r3, #16]
 800d7b2:	697b      	ldr	r3, [r7, #20]
 800d7b4:	f003 0307 	and.w	r3, r3, #7
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d7be:	693a      	ldr	r2, [r7, #16]
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	08da      	lsrs	r2, r3, #3
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	3208      	adds	r2, #8
 800d7cc:	6939      	ldr	r1, [r7, #16]
 800d7ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	005b      	lsls	r3, r3, #1
 800d7dc:	2203      	movs	r2, #3
 800d7de:	fa02 f303 	lsl.w	r3, r2, r3
 800d7e2:	43db      	mvns	r3, r3
 800d7e4:	693a      	ldr	r2, [r7, #16]
 800d7e6:	4013      	ands	r3, r2
 800d7e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	685b      	ldr	r3, [r3, #4]
 800d7ee:	f003 0203 	and.w	r2, r3, #3
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	005b      	lsls	r3, r3, #1
 800d7f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d7fa:	693a      	ldr	r2, [r7, #16]
 800d7fc:	4313      	orrs	r3, r2
 800d7fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	693a      	ldr	r2, [r7, #16]
 800d804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d80e:	2b00      	cmp	r3, #0
 800d810:	f000 80b2 	beq.w	800d978 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d814:	4b61      	ldr	r3, [pc, #388]	; (800d99c <HAL_GPIO_Init+0x2fc>)
 800d816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d818:	4a60      	ldr	r2, [pc, #384]	; (800d99c <HAL_GPIO_Init+0x2fc>)
 800d81a:	f043 0301 	orr.w	r3, r3, #1
 800d81e:	6613      	str	r3, [r2, #96]	; 0x60
 800d820:	4b5e      	ldr	r3, [pc, #376]	; (800d99c <HAL_GPIO_Init+0x2fc>)
 800d822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d824:	f003 0301 	and.w	r3, r3, #1
 800d828:	60bb      	str	r3, [r7, #8]
 800d82a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800d82c:	4a5c      	ldr	r2, [pc, #368]	; (800d9a0 <HAL_GPIO_Init+0x300>)
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	089b      	lsrs	r3, r3, #2
 800d832:	3302      	adds	r3, #2
 800d834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d838:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	f003 0303 	and.w	r3, r3, #3
 800d840:	009b      	lsls	r3, r3, #2
 800d842:	220f      	movs	r2, #15
 800d844:	fa02 f303 	lsl.w	r3, r2, r3
 800d848:	43db      	mvns	r3, r3
 800d84a:	693a      	ldr	r2, [r7, #16]
 800d84c:	4013      	ands	r3, r2
 800d84e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800d856:	d02b      	beq.n	800d8b0 <HAL_GPIO_Init+0x210>
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	4a52      	ldr	r2, [pc, #328]	; (800d9a4 <HAL_GPIO_Init+0x304>)
 800d85c:	4293      	cmp	r3, r2
 800d85e:	d025      	beq.n	800d8ac <HAL_GPIO_Init+0x20c>
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	4a51      	ldr	r2, [pc, #324]	; (800d9a8 <HAL_GPIO_Init+0x308>)
 800d864:	4293      	cmp	r3, r2
 800d866:	d01f      	beq.n	800d8a8 <HAL_GPIO_Init+0x208>
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	4a50      	ldr	r2, [pc, #320]	; (800d9ac <HAL_GPIO_Init+0x30c>)
 800d86c:	4293      	cmp	r3, r2
 800d86e:	d019      	beq.n	800d8a4 <HAL_GPIO_Init+0x204>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	4a4f      	ldr	r2, [pc, #316]	; (800d9b0 <HAL_GPIO_Init+0x310>)
 800d874:	4293      	cmp	r3, r2
 800d876:	d013      	beq.n	800d8a0 <HAL_GPIO_Init+0x200>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	4a4e      	ldr	r2, [pc, #312]	; (800d9b4 <HAL_GPIO_Init+0x314>)
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d00d      	beq.n	800d89c <HAL_GPIO_Init+0x1fc>
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	4a4d      	ldr	r2, [pc, #308]	; (800d9b8 <HAL_GPIO_Init+0x318>)
 800d884:	4293      	cmp	r3, r2
 800d886:	d007      	beq.n	800d898 <HAL_GPIO_Init+0x1f8>
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	4a4c      	ldr	r2, [pc, #304]	; (800d9bc <HAL_GPIO_Init+0x31c>)
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d101      	bne.n	800d894 <HAL_GPIO_Init+0x1f4>
 800d890:	2307      	movs	r3, #7
 800d892:	e00e      	b.n	800d8b2 <HAL_GPIO_Init+0x212>
 800d894:	2308      	movs	r3, #8
 800d896:	e00c      	b.n	800d8b2 <HAL_GPIO_Init+0x212>
 800d898:	2306      	movs	r3, #6
 800d89a:	e00a      	b.n	800d8b2 <HAL_GPIO_Init+0x212>
 800d89c:	2305      	movs	r3, #5
 800d89e:	e008      	b.n	800d8b2 <HAL_GPIO_Init+0x212>
 800d8a0:	2304      	movs	r3, #4
 800d8a2:	e006      	b.n	800d8b2 <HAL_GPIO_Init+0x212>
 800d8a4:	2303      	movs	r3, #3
 800d8a6:	e004      	b.n	800d8b2 <HAL_GPIO_Init+0x212>
 800d8a8:	2302      	movs	r3, #2
 800d8aa:	e002      	b.n	800d8b2 <HAL_GPIO_Init+0x212>
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	e000      	b.n	800d8b2 <HAL_GPIO_Init+0x212>
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	697a      	ldr	r2, [r7, #20]
 800d8b4:	f002 0203 	and.w	r2, r2, #3
 800d8b8:	0092      	lsls	r2, r2, #2
 800d8ba:	4093      	lsls	r3, r2
 800d8bc:	693a      	ldr	r2, [r7, #16]
 800d8be:	4313      	orrs	r3, r2
 800d8c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800d8c2:	4937      	ldr	r1, [pc, #220]	; (800d9a0 <HAL_GPIO_Init+0x300>)
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	089b      	lsrs	r3, r3, #2
 800d8c8:	3302      	adds	r3, #2
 800d8ca:	693a      	ldr	r2, [r7, #16]
 800d8cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d8d0:	4b3b      	ldr	r3, [pc, #236]	; (800d9c0 <HAL_GPIO_Init+0x320>)
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	43db      	mvns	r3, r3
 800d8da:	693a      	ldr	r2, [r7, #16]
 800d8dc:	4013      	ands	r3, r2
 800d8de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d003      	beq.n	800d8f4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800d8ec:	693a      	ldr	r2, [r7, #16]
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800d8f4:	4a32      	ldr	r2, [pc, #200]	; (800d9c0 <HAL_GPIO_Init+0x320>)
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800d8fa:	4b31      	ldr	r3, [pc, #196]	; (800d9c0 <HAL_GPIO_Init+0x320>)
 800d8fc:	68db      	ldr	r3, [r3, #12]
 800d8fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	43db      	mvns	r3, r3
 800d904:	693a      	ldr	r2, [r7, #16]
 800d906:	4013      	ands	r3, r2
 800d908:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d912:	2b00      	cmp	r3, #0
 800d914:	d003      	beq.n	800d91e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800d916:	693a      	ldr	r2, [r7, #16]
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	4313      	orrs	r3, r2
 800d91c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800d91e:	4a28      	ldr	r2, [pc, #160]	; (800d9c0 <HAL_GPIO_Init+0x320>)
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800d924:	4b26      	ldr	r3, [pc, #152]	; (800d9c0 <HAL_GPIO_Init+0x320>)
 800d926:	685b      	ldr	r3, [r3, #4]
 800d928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	43db      	mvns	r3, r3
 800d92e:	693a      	ldr	r2, [r7, #16]
 800d930:	4013      	ands	r3, r2
 800d932:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	685b      	ldr	r3, [r3, #4]
 800d938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d003      	beq.n	800d948 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800d940:	693a      	ldr	r2, [r7, #16]
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	4313      	orrs	r3, r2
 800d946:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800d948:	4a1d      	ldr	r2, [pc, #116]	; (800d9c0 <HAL_GPIO_Init+0x320>)
 800d94a:	693b      	ldr	r3, [r7, #16]
 800d94c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800d94e:	4b1c      	ldr	r3, [pc, #112]	; (800d9c0 <HAL_GPIO_Init+0x320>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	43db      	mvns	r3, r3
 800d958:	693a      	ldr	r2, [r7, #16]
 800d95a:	4013      	ands	r3, r2
 800d95c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	685b      	ldr	r3, [r3, #4]
 800d962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d966:	2b00      	cmp	r3, #0
 800d968:	d003      	beq.n	800d972 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800d96a:	693a      	ldr	r2, [r7, #16]
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	4313      	orrs	r3, r2
 800d970:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800d972:	4a13      	ldr	r2, [pc, #76]	; (800d9c0 <HAL_GPIO_Init+0x320>)
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	3301      	adds	r3, #1
 800d97c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	681a      	ldr	r2, [r3, #0]
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	fa22 f303 	lsr.w	r3, r2, r3
 800d988:	2b00      	cmp	r3, #0
 800d98a:	f47f ae91 	bne.w	800d6b0 <HAL_GPIO_Init+0x10>
  }
}
 800d98e:	bf00      	nop
 800d990:	bf00      	nop
 800d992:	371c      	adds	r7, #28
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr
 800d99c:	40021000 	.word	0x40021000
 800d9a0:	40010000 	.word	0x40010000
 800d9a4:	48000400 	.word	0x48000400
 800d9a8:	48000800 	.word	0x48000800
 800d9ac:	48000c00 	.word	0x48000c00
 800d9b0:	48001000 	.word	0x48001000
 800d9b4:	48001400 	.word	0x48001400
 800d9b8:	48001800 	.word	0x48001800
 800d9bc:	48001c00 	.word	0x48001c00
 800d9c0:	40010400 	.word	0x40010400

0800d9c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b087      	sub	sp, #28
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800d9d2:	e0c9      	b.n	800db68 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800d9d4:	2201      	movs	r2, #1
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	fa02 f303 	lsl.w	r3, r2, r3
 800d9dc:	683a      	ldr	r2, [r7, #0]
 800d9de:	4013      	ands	r3, r2
 800d9e0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	f000 80bc 	beq.w	800db62 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800d9ea:	4a66      	ldr	r2, [pc, #408]	; (800db84 <HAL_GPIO_DeInit+0x1c0>)
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	089b      	lsrs	r3, r3, #2
 800d9f0:	3302      	adds	r3, #2
 800d9f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9f6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	f003 0303 	and.w	r3, r3, #3
 800d9fe:	009b      	lsls	r3, r3, #2
 800da00:	220f      	movs	r2, #15
 800da02:	fa02 f303 	lsl.w	r3, r2, r3
 800da06:	68fa      	ldr	r2, [r7, #12]
 800da08:	4013      	ands	r3, r2
 800da0a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800da12:	d02b      	beq.n	800da6c <HAL_GPIO_DeInit+0xa8>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	4a5c      	ldr	r2, [pc, #368]	; (800db88 <HAL_GPIO_DeInit+0x1c4>)
 800da18:	4293      	cmp	r3, r2
 800da1a:	d025      	beq.n	800da68 <HAL_GPIO_DeInit+0xa4>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	4a5b      	ldr	r2, [pc, #364]	; (800db8c <HAL_GPIO_DeInit+0x1c8>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d01f      	beq.n	800da64 <HAL_GPIO_DeInit+0xa0>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	4a5a      	ldr	r2, [pc, #360]	; (800db90 <HAL_GPIO_DeInit+0x1cc>)
 800da28:	4293      	cmp	r3, r2
 800da2a:	d019      	beq.n	800da60 <HAL_GPIO_DeInit+0x9c>
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	4a59      	ldr	r2, [pc, #356]	; (800db94 <HAL_GPIO_DeInit+0x1d0>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d013      	beq.n	800da5c <HAL_GPIO_DeInit+0x98>
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	4a58      	ldr	r2, [pc, #352]	; (800db98 <HAL_GPIO_DeInit+0x1d4>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d00d      	beq.n	800da58 <HAL_GPIO_DeInit+0x94>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	4a57      	ldr	r2, [pc, #348]	; (800db9c <HAL_GPIO_DeInit+0x1d8>)
 800da40:	4293      	cmp	r3, r2
 800da42:	d007      	beq.n	800da54 <HAL_GPIO_DeInit+0x90>
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	4a56      	ldr	r2, [pc, #344]	; (800dba0 <HAL_GPIO_DeInit+0x1dc>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d101      	bne.n	800da50 <HAL_GPIO_DeInit+0x8c>
 800da4c:	2307      	movs	r3, #7
 800da4e:	e00e      	b.n	800da6e <HAL_GPIO_DeInit+0xaa>
 800da50:	2308      	movs	r3, #8
 800da52:	e00c      	b.n	800da6e <HAL_GPIO_DeInit+0xaa>
 800da54:	2306      	movs	r3, #6
 800da56:	e00a      	b.n	800da6e <HAL_GPIO_DeInit+0xaa>
 800da58:	2305      	movs	r3, #5
 800da5a:	e008      	b.n	800da6e <HAL_GPIO_DeInit+0xaa>
 800da5c:	2304      	movs	r3, #4
 800da5e:	e006      	b.n	800da6e <HAL_GPIO_DeInit+0xaa>
 800da60:	2303      	movs	r3, #3
 800da62:	e004      	b.n	800da6e <HAL_GPIO_DeInit+0xaa>
 800da64:	2302      	movs	r3, #2
 800da66:	e002      	b.n	800da6e <HAL_GPIO_DeInit+0xaa>
 800da68:	2301      	movs	r3, #1
 800da6a:	e000      	b.n	800da6e <HAL_GPIO_DeInit+0xaa>
 800da6c:	2300      	movs	r3, #0
 800da6e:	697a      	ldr	r2, [r7, #20]
 800da70:	f002 0203 	and.w	r2, r2, #3
 800da74:	0092      	lsls	r2, r2, #2
 800da76:	4093      	lsls	r3, r2
 800da78:	68fa      	ldr	r2, [r7, #12]
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d132      	bne.n	800dae4 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800da7e:	4b49      	ldr	r3, [pc, #292]	; (800dba4 <HAL_GPIO_DeInit+0x1e0>)
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	43db      	mvns	r3, r3
 800da86:	4947      	ldr	r1, [pc, #284]	; (800dba4 <HAL_GPIO_DeInit+0x1e0>)
 800da88:	4013      	ands	r3, r2
 800da8a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800da8c:	4b45      	ldr	r3, [pc, #276]	; (800dba4 <HAL_GPIO_DeInit+0x1e0>)
 800da8e:	685a      	ldr	r2, [r3, #4]
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	43db      	mvns	r3, r3
 800da94:	4943      	ldr	r1, [pc, #268]	; (800dba4 <HAL_GPIO_DeInit+0x1e0>)
 800da96:	4013      	ands	r3, r2
 800da98:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800da9a:	4b42      	ldr	r3, [pc, #264]	; (800dba4 <HAL_GPIO_DeInit+0x1e0>)
 800da9c:	68da      	ldr	r2, [r3, #12]
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	43db      	mvns	r3, r3
 800daa2:	4940      	ldr	r1, [pc, #256]	; (800dba4 <HAL_GPIO_DeInit+0x1e0>)
 800daa4:	4013      	ands	r3, r2
 800daa6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800daa8:	4b3e      	ldr	r3, [pc, #248]	; (800dba4 <HAL_GPIO_DeInit+0x1e0>)
 800daaa:	689a      	ldr	r2, [r3, #8]
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	43db      	mvns	r3, r3
 800dab0:	493c      	ldr	r1, [pc, #240]	; (800dba4 <HAL_GPIO_DeInit+0x1e0>)
 800dab2:	4013      	ands	r3, r2
 800dab4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	f003 0303 	and.w	r3, r3, #3
 800dabc:	009b      	lsls	r3, r3, #2
 800dabe:	220f      	movs	r2, #15
 800dac0:	fa02 f303 	lsl.w	r3, r2, r3
 800dac4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800dac6:	4a2f      	ldr	r2, [pc, #188]	; (800db84 <HAL_GPIO_DeInit+0x1c0>)
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	089b      	lsrs	r3, r3, #2
 800dacc:	3302      	adds	r3, #2
 800dace:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	43da      	mvns	r2, r3
 800dad6:	482b      	ldr	r0, [pc, #172]	; (800db84 <HAL_GPIO_DeInit+0x1c0>)
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	089b      	lsrs	r3, r3, #2
 800dadc:	400a      	ands	r2, r1
 800dade:	3302      	adds	r3, #2
 800dae0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681a      	ldr	r2, [r3, #0]
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	005b      	lsls	r3, r3, #1
 800daec:	2103      	movs	r1, #3
 800daee:	fa01 f303 	lsl.w	r3, r1, r3
 800daf2:	431a      	orrs	r2, r3
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	08da      	lsrs	r2, r3, #3
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	3208      	adds	r2, #8
 800db00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	f003 0307 	and.w	r3, r3, #7
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	220f      	movs	r2, #15
 800db0e:	fa02 f303 	lsl.w	r3, r2, r3
 800db12:	43db      	mvns	r3, r3
 800db14:	697a      	ldr	r2, [r7, #20]
 800db16:	08d2      	lsrs	r2, r2, #3
 800db18:	4019      	ands	r1, r3
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	3208      	adds	r2, #8
 800db1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	689a      	ldr	r2, [r3, #8]
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	005b      	lsls	r3, r3, #1
 800db2a:	2103      	movs	r1, #3
 800db2c:	fa01 f303 	lsl.w	r3, r1, r3
 800db30:	43db      	mvns	r3, r3
 800db32:	401a      	ands	r2, r3
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	685a      	ldr	r2, [r3, #4]
 800db3c:	2101      	movs	r1, #1
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	fa01 f303 	lsl.w	r3, r1, r3
 800db44:	43db      	mvns	r3, r3
 800db46:	401a      	ands	r2, r3
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	68da      	ldr	r2, [r3, #12]
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	005b      	lsls	r3, r3, #1
 800db54:	2103      	movs	r1, #3
 800db56:	fa01 f303 	lsl.w	r3, r1, r3
 800db5a:	43db      	mvns	r3, r3
 800db5c:	401a      	ands	r2, r3
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800db62:	697b      	ldr	r3, [r7, #20]
 800db64:	3301      	adds	r3, #1
 800db66:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800db68:	683a      	ldr	r2, [r7, #0]
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	fa22 f303 	lsr.w	r3, r2, r3
 800db70:	2b00      	cmp	r3, #0
 800db72:	f47f af2f 	bne.w	800d9d4 <HAL_GPIO_DeInit+0x10>
  }
}
 800db76:	bf00      	nop
 800db78:	bf00      	nop
 800db7a:	371c      	adds	r7, #28
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr
 800db84:	40010000 	.word	0x40010000
 800db88:	48000400 	.word	0x48000400
 800db8c:	48000800 	.word	0x48000800
 800db90:	48000c00 	.word	0x48000c00
 800db94:	48001000 	.word	0x48001000
 800db98:	48001400 	.word	0x48001400
 800db9c:	48001800 	.word	0x48001800
 800dba0:	48001c00 	.word	0x48001c00
 800dba4:	40010400 	.word	0x40010400

0800dba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800dba8:	b480      	push	{r7}
 800dbaa:	b083      	sub	sp, #12
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	460b      	mov	r3, r1
 800dbb2:	807b      	strh	r3, [r7, #2]
 800dbb4:	4613      	mov	r3, r2
 800dbb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800dbb8:	787b      	ldrb	r3, [r7, #1]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d003      	beq.n	800dbc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800dbbe:	887a      	ldrh	r2, [r7, #2]
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800dbc4:	e002      	b.n	800dbcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800dbc6:	887a      	ldrh	r2, [r7, #2]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	629a      	str	r2, [r3, #40]	; 0x28
}
 800dbcc:	bf00      	nop
 800dbce:	370c      	adds	r7, #12
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd6:	4770      	bx	lr

0800dbd8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b085      	sub	sp, #20
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	695b      	ldr	r3, [r3, #20]
 800dbe8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800dbea:	887a      	ldrh	r2, [r7, #2]
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	4013      	ands	r3, r2
 800dbf0:	041a      	lsls	r2, r3, #16
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	43d9      	mvns	r1, r3
 800dbf6:	887b      	ldrh	r3, [r7, #2]
 800dbf8:	400b      	ands	r3, r1
 800dbfa:	431a      	orrs	r2, r3
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	619a      	str	r2, [r3, #24]
}
 800dc00:	bf00      	nop
 800dc02:	3714      	adds	r7, #20
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr

0800dc0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b082      	sub	sp, #8
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	4603      	mov	r3, r0
 800dc14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800dc16:	4b08      	ldr	r3, [pc, #32]	; (800dc38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800dc18:	695a      	ldr	r2, [r3, #20]
 800dc1a:	88fb      	ldrh	r3, [r7, #6]
 800dc1c:	4013      	ands	r3, r2
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d006      	beq.n	800dc30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800dc22:	4a05      	ldr	r2, [pc, #20]	; (800dc38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800dc24:	88fb      	ldrh	r3, [r7, #6]
 800dc26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800dc28:	88fb      	ldrh	r3, [r7, #6]
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7f4 fe1e 	bl	800286c <HAL_GPIO_EXTI_Callback>
  }
}
 800dc30:	bf00      	nop
 800dc32:	3708      	adds	r7, #8
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}
 800dc38:	40010400 	.word	0x40010400

0800dc3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d101      	bne.n	800dc4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	e081      	b.n	800dd52 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc54:	b2db      	uxtb	r3, r3
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d106      	bne.n	800dc68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f7f3 ffd0 	bl	8001c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2224      	movs	r2, #36	; 0x24
 800dc6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	681a      	ldr	r2, [r3, #0]
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	f022 0201 	bic.w	r2, r2, #1
 800dc7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	685a      	ldr	r2, [r3, #4]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800dc8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	689a      	ldr	r2, [r3, #8]
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dc9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	68db      	ldr	r3, [r3, #12]
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	d107      	bne.n	800dcb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	689a      	ldr	r2, [r3, #8]
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dcb2:	609a      	str	r2, [r3, #8]
 800dcb4:	e006      	b.n	800dcc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	689a      	ldr	r2, [r3, #8]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800dcc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	68db      	ldr	r3, [r3, #12]
 800dcc8:	2b02      	cmp	r3, #2
 800dcca:	d104      	bne.n	800dcd6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dcd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	685b      	ldr	r3, [r3, #4]
 800dcdc:	687a      	ldr	r2, [r7, #4]
 800dcde:	6812      	ldr	r2, [r2, #0]
 800dce0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800dce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dce8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	68da      	ldr	r2, [r3, #12]
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dcf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	691a      	ldr	r2, [r3, #16]
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	695b      	ldr	r3, [r3, #20]
 800dd02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	699b      	ldr	r3, [r3, #24]
 800dd0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	430a      	orrs	r2, r1
 800dd12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	69d9      	ldr	r1, [r3, #28]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6a1a      	ldr	r2, [r3, #32]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	430a      	orrs	r2, r1
 800dd22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	681a      	ldr	r2, [r3, #0]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f042 0201 	orr.w	r2, r2, #1
 800dd32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2200      	movs	r2, #0
 800dd38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2220      	movs	r2, #32
 800dd3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2200      	movs	r2, #0
 800dd46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800dd50:	2300      	movs	r3, #0
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3708      	adds	r7, #8
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}

0800dd5a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b082      	sub	sp, #8
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d101      	bne.n	800dd6c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	e021      	b.n	800ddb0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2224      	movs	r2, #36	; 0x24
 800dd70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	681a      	ldr	r2, [r3, #0]
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	f022 0201 	bic.w	r2, r2, #1
 800dd82:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f7f4 f805 	bl	8001d94 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2200      	movs	r2, #0
 800dd94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2200      	movs	r2, #0
 800dda2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ddae:	2300      	movs	r3, #0
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3708      	adds	r7, #8
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}

0800ddb8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b088      	sub	sp, #32
 800ddbc:	af02      	add	r7, sp, #8
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	607a      	str	r2, [r7, #4]
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	460b      	mov	r3, r1
 800ddc6:	817b      	strh	r3, [r7, #10]
 800ddc8:	4613      	mov	r3, r2
 800ddca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ddd2:	b2db      	uxtb	r3, r3
 800ddd4:	2b20      	cmp	r3, #32
 800ddd6:	f040 80da 	bne.w	800df8e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dde0:	2b01      	cmp	r3, #1
 800dde2:	d101      	bne.n	800dde8 <HAL_I2C_Master_Transmit+0x30>
 800dde4:	2302      	movs	r3, #2
 800dde6:	e0d3      	b.n	800df90 <HAL_I2C_Master_Transmit+0x1d8>
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	2201      	movs	r2, #1
 800ddec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ddf0:	f7fd fed8 	bl	800bba4 <HAL_GetTick>
 800ddf4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	9300      	str	r3, [sp, #0]
 800ddfa:	2319      	movs	r3, #25
 800ddfc:	2201      	movs	r2, #1
 800ddfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800de02:	68f8      	ldr	r0, [r7, #12]
 800de04:	f000 fdd2 	bl	800e9ac <I2C_WaitOnFlagUntilTimeout>
 800de08:	4603      	mov	r3, r0
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d001      	beq.n	800de12 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800de0e:	2301      	movs	r3, #1
 800de10:	e0be      	b.n	800df90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	2221      	movs	r2, #33	; 0x21
 800de16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	2210      	movs	r2, #16
 800de1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2200      	movs	r2, #0
 800de26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	687a      	ldr	r2, [r7, #4]
 800de2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	893a      	ldrh	r2, [r7, #8]
 800de32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2200      	movs	r2, #0
 800de38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de3e:	b29b      	uxth	r3, r3
 800de40:	2bff      	cmp	r3, #255	; 0xff
 800de42:	d90e      	bls.n	800de62 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	22ff      	movs	r2, #255	; 0xff
 800de48:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de4e:	b2da      	uxtb	r2, r3
 800de50:	8979      	ldrh	r1, [r7, #10]
 800de52:	4b51      	ldr	r3, [pc, #324]	; (800df98 <HAL_I2C_Master_Transmit+0x1e0>)
 800de54:	9300      	str	r3, [sp, #0]
 800de56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800de5a:	68f8      	ldr	r0, [r7, #12]
 800de5c:	f000 ffc8 	bl	800edf0 <I2C_TransferConfig>
 800de60:	e06c      	b.n	800df3c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de66:	b29a      	uxth	r2, r3
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de70:	b2da      	uxtb	r2, r3
 800de72:	8979      	ldrh	r1, [r7, #10]
 800de74:	4b48      	ldr	r3, [pc, #288]	; (800df98 <HAL_I2C_Master_Transmit+0x1e0>)
 800de76:	9300      	str	r3, [sp, #0]
 800de78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800de7c:	68f8      	ldr	r0, [r7, #12]
 800de7e:	f000 ffb7 	bl	800edf0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800de82:	e05b      	b.n	800df3c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800de84:	697a      	ldr	r2, [r7, #20]
 800de86:	6a39      	ldr	r1, [r7, #32]
 800de88:	68f8      	ldr	r0, [r7, #12]
 800de8a:	f000 fdcf 	bl	800ea2c <I2C_WaitOnTXISFlagUntilTimeout>
 800de8e:	4603      	mov	r3, r0
 800de90:	2b00      	cmp	r3, #0
 800de92:	d001      	beq.n	800de98 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800de94:	2301      	movs	r3, #1
 800de96:	e07b      	b.n	800df90 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de9c:	781a      	ldrb	r2, [r3, #0]
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea8:	1c5a      	adds	r2, r3, #1
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	3b01      	subs	r3, #1
 800deb6:	b29a      	uxth	r2, r3
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dec0:	3b01      	subs	r3, #1
 800dec2:	b29a      	uxth	r2, r3
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800decc:	b29b      	uxth	r3, r3
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d034      	beq.n	800df3c <HAL_I2C_Master_Transmit+0x184>
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d130      	bne.n	800df3c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	9300      	str	r3, [sp, #0]
 800dede:	6a3b      	ldr	r3, [r7, #32]
 800dee0:	2200      	movs	r2, #0
 800dee2:	2180      	movs	r1, #128	; 0x80
 800dee4:	68f8      	ldr	r0, [r7, #12]
 800dee6:	f000 fd61 	bl	800e9ac <I2C_WaitOnFlagUntilTimeout>
 800deea:	4603      	mov	r3, r0
 800deec:	2b00      	cmp	r3, #0
 800deee:	d001      	beq.n	800def4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800def0:	2301      	movs	r3, #1
 800def2:	e04d      	b.n	800df90 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800def8:	b29b      	uxth	r3, r3
 800defa:	2bff      	cmp	r3, #255	; 0xff
 800defc:	d90e      	bls.n	800df1c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	22ff      	movs	r2, #255	; 0xff
 800df02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df08:	b2da      	uxtb	r2, r3
 800df0a:	8979      	ldrh	r1, [r7, #10]
 800df0c:	2300      	movs	r3, #0
 800df0e:	9300      	str	r3, [sp, #0]
 800df10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800df14:	68f8      	ldr	r0, [r7, #12]
 800df16:	f000 ff6b 	bl	800edf0 <I2C_TransferConfig>
 800df1a:	e00f      	b.n	800df3c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df20:	b29a      	uxth	r2, r3
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800df2a:	b2da      	uxtb	r2, r3
 800df2c:	8979      	ldrh	r1, [r7, #10]
 800df2e:	2300      	movs	r3, #0
 800df30:	9300      	str	r3, [sp, #0]
 800df32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800df36:	68f8      	ldr	r0, [r7, #12]
 800df38:	f000 ff5a 	bl	800edf0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df40:	b29b      	uxth	r3, r3
 800df42:	2b00      	cmp	r3, #0
 800df44:	d19e      	bne.n	800de84 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800df46:	697a      	ldr	r2, [r7, #20]
 800df48:	6a39      	ldr	r1, [r7, #32]
 800df4a:	68f8      	ldr	r0, [r7, #12]
 800df4c:	f000 fdae 	bl	800eaac <I2C_WaitOnSTOPFlagUntilTimeout>
 800df50:	4603      	mov	r3, r0
 800df52:	2b00      	cmp	r3, #0
 800df54:	d001      	beq.n	800df5a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800df56:	2301      	movs	r3, #1
 800df58:	e01a      	b.n	800df90 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	2220      	movs	r2, #32
 800df60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	6859      	ldr	r1, [r3, #4]
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	4b0b      	ldr	r3, [pc, #44]	; (800df9c <HAL_I2C_Master_Transmit+0x1e4>)
 800df6e:	400b      	ands	r3, r1
 800df70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	2220      	movs	r2, #32
 800df76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	2200      	movs	r2, #0
 800df7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2200      	movs	r2, #0
 800df86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800df8a:	2300      	movs	r3, #0
 800df8c:	e000      	b.n	800df90 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800df8e:	2302      	movs	r3, #2
  }
}
 800df90:	4618      	mov	r0, r3
 800df92:	3718      	adds	r7, #24
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}
 800df98:	80002000 	.word	0x80002000
 800df9c:	fe00e800 	.word	0xfe00e800

0800dfa0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b088      	sub	sp, #32
 800dfa4:	af02      	add	r7, sp, #8
 800dfa6:	60f8      	str	r0, [r7, #12]
 800dfa8:	607a      	str	r2, [r7, #4]
 800dfaa:	461a      	mov	r2, r3
 800dfac:	460b      	mov	r3, r1
 800dfae:	817b      	strh	r3, [r7, #10]
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dfba:	b2db      	uxtb	r3, r3
 800dfbc:	2b20      	cmp	r3, #32
 800dfbe:	f040 80db 	bne.w	800e178 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dfc8:	2b01      	cmp	r3, #1
 800dfca:	d101      	bne.n	800dfd0 <HAL_I2C_Master_Receive+0x30>
 800dfcc:	2302      	movs	r3, #2
 800dfce:	e0d4      	b.n	800e17a <HAL_I2C_Master_Receive+0x1da>
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800dfd8:	f7fd fde4 	bl	800bba4 <HAL_GetTick>
 800dfdc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	9300      	str	r3, [sp, #0]
 800dfe2:	2319      	movs	r3, #25
 800dfe4:	2201      	movs	r2, #1
 800dfe6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dfea:	68f8      	ldr	r0, [r7, #12]
 800dfec:	f000 fcde 	bl	800e9ac <I2C_WaitOnFlagUntilTimeout>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d001      	beq.n	800dffa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800dff6:	2301      	movs	r3, #1
 800dff8:	e0bf      	b.n	800e17a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2222      	movs	r2, #34	; 0x22
 800dffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2210      	movs	r2, #16
 800e006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	2200      	movs	r2, #0
 800e00e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	687a      	ldr	r2, [r7, #4]
 800e014:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	893a      	ldrh	r2, [r7, #8]
 800e01a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	2200      	movs	r2, #0
 800e020:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e026:	b29b      	uxth	r3, r3
 800e028:	2bff      	cmp	r3, #255	; 0xff
 800e02a:	d90e      	bls.n	800e04a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	22ff      	movs	r2, #255	; 0xff
 800e030:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e036:	b2da      	uxtb	r2, r3
 800e038:	8979      	ldrh	r1, [r7, #10]
 800e03a:	4b52      	ldr	r3, [pc, #328]	; (800e184 <HAL_I2C_Master_Receive+0x1e4>)
 800e03c:	9300      	str	r3, [sp, #0]
 800e03e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e042:	68f8      	ldr	r0, [r7, #12]
 800e044:	f000 fed4 	bl	800edf0 <I2C_TransferConfig>
 800e048:	e06d      	b.n	800e126 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e04e:	b29a      	uxth	r2, r3
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e058:	b2da      	uxtb	r2, r3
 800e05a:	8979      	ldrh	r1, [r7, #10]
 800e05c:	4b49      	ldr	r3, [pc, #292]	; (800e184 <HAL_I2C_Master_Receive+0x1e4>)
 800e05e:	9300      	str	r3, [sp, #0]
 800e060:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e064:	68f8      	ldr	r0, [r7, #12]
 800e066:	f000 fec3 	bl	800edf0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800e06a:	e05c      	b.n	800e126 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e06c:	697a      	ldr	r2, [r7, #20]
 800e06e:	6a39      	ldr	r1, [r7, #32]
 800e070:	68f8      	ldr	r0, [r7, #12]
 800e072:	f000 fd57 	bl	800eb24 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e076:	4603      	mov	r3, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d001      	beq.n	800e080 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800e07c:	2301      	movs	r3, #1
 800e07e:	e07c      	b.n	800e17a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e08a:	b2d2      	uxtb	r2, r2
 800e08c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e092:	1c5a      	adds	r2, r3, #1
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e09c:	3b01      	subs	r3, #1
 800e09e:	b29a      	uxth	r2, r3
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0a8:	b29b      	uxth	r3, r3
 800e0aa:	3b01      	subs	r3, #1
 800e0ac:	b29a      	uxth	r2, r3
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d034      	beq.n	800e126 <HAL_I2C_Master_Receive+0x186>
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d130      	bne.n	800e126 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e0c4:	697b      	ldr	r3, [r7, #20]
 800e0c6:	9300      	str	r3, [sp, #0]
 800e0c8:	6a3b      	ldr	r3, [r7, #32]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	2180      	movs	r1, #128	; 0x80
 800e0ce:	68f8      	ldr	r0, [r7, #12]
 800e0d0:	f000 fc6c 	bl	800e9ac <I2C_WaitOnFlagUntilTimeout>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d001      	beq.n	800e0de <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800e0da:	2301      	movs	r3, #1
 800e0dc:	e04d      	b.n	800e17a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	2bff      	cmp	r3, #255	; 0xff
 800e0e6:	d90e      	bls.n	800e106 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	22ff      	movs	r2, #255	; 0xff
 800e0ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0f2:	b2da      	uxtb	r2, r3
 800e0f4:	8979      	ldrh	r1, [r7, #10]
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	9300      	str	r3, [sp, #0]
 800e0fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e0fe:	68f8      	ldr	r0, [r7, #12]
 800e100:	f000 fe76 	bl	800edf0 <I2C_TransferConfig>
 800e104:	e00f      	b.n	800e126 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e10a:	b29a      	uxth	r2, r3
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e114:	b2da      	uxtb	r2, r3
 800e116:	8979      	ldrh	r1, [r7, #10]
 800e118:	2300      	movs	r3, #0
 800e11a:	9300      	str	r3, [sp, #0]
 800e11c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e120:	68f8      	ldr	r0, [r7, #12]
 800e122:	f000 fe65 	bl	800edf0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d19d      	bne.n	800e06c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e130:	697a      	ldr	r2, [r7, #20]
 800e132:	6a39      	ldr	r1, [r7, #32]
 800e134:	68f8      	ldr	r0, [r7, #12]
 800e136:	f000 fcb9 	bl	800eaac <I2C_WaitOnSTOPFlagUntilTimeout>
 800e13a:	4603      	mov	r3, r0
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d001      	beq.n	800e144 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800e140:	2301      	movs	r3, #1
 800e142:	e01a      	b.n	800e17a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	2220      	movs	r2, #32
 800e14a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	6859      	ldr	r1, [r3, #4]
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	681a      	ldr	r2, [r3, #0]
 800e156:	4b0c      	ldr	r3, [pc, #48]	; (800e188 <HAL_I2C_Master_Receive+0x1e8>)
 800e158:	400b      	ands	r3, r1
 800e15a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2220      	movs	r2, #32
 800e160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2200      	movs	r2, #0
 800e168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2200      	movs	r2, #0
 800e170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e174:	2300      	movs	r3, #0
 800e176:	e000      	b.n	800e17a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800e178:	2302      	movs	r3, #2
  }
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3718      	adds	r7, #24
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop
 800e184:	80002400 	.word	0x80002400
 800e188:	fe00e800 	.word	0xfe00e800

0800e18c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b088      	sub	sp, #32
 800e190:	af02      	add	r7, sp, #8
 800e192:	60f8      	str	r0, [r7, #12]
 800e194:	4608      	mov	r0, r1
 800e196:	4611      	mov	r1, r2
 800e198:	461a      	mov	r2, r3
 800e19a:	4603      	mov	r3, r0
 800e19c:	817b      	strh	r3, [r7, #10]
 800e19e:	460b      	mov	r3, r1
 800e1a0:	813b      	strh	r3, [r7, #8]
 800e1a2:	4613      	mov	r3, r2
 800e1a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e1ac:	b2db      	uxtb	r3, r3
 800e1ae:	2b20      	cmp	r3, #32
 800e1b0:	f040 80f9 	bne.w	800e3a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e1b4:	6a3b      	ldr	r3, [r7, #32]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d002      	beq.n	800e1c0 <HAL_I2C_Mem_Write+0x34>
 800e1ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d105      	bne.n	800e1cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e1c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	e0ed      	b.n	800e3a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e1d2:	2b01      	cmp	r3, #1
 800e1d4:	d101      	bne.n	800e1da <HAL_I2C_Mem_Write+0x4e>
 800e1d6:	2302      	movs	r3, #2
 800e1d8:	e0e6      	b.n	800e3a8 <HAL_I2C_Mem_Write+0x21c>
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	2201      	movs	r2, #1
 800e1de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e1e2:	f7fd fcdf 	bl	800bba4 <HAL_GetTick>
 800e1e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e1e8:	697b      	ldr	r3, [r7, #20]
 800e1ea:	9300      	str	r3, [sp, #0]
 800e1ec:	2319      	movs	r3, #25
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e1f4:	68f8      	ldr	r0, [r7, #12]
 800e1f6:	f000 fbd9 	bl	800e9ac <I2C_WaitOnFlagUntilTimeout>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d001      	beq.n	800e204 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800e200:	2301      	movs	r3, #1
 800e202:	e0d1      	b.n	800e3a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2221      	movs	r2, #33	; 0x21
 800e208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2240      	movs	r2, #64	; 0x40
 800e210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	2200      	movs	r2, #0
 800e218:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	6a3a      	ldr	r2, [r7, #32]
 800e21e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e224:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2200      	movs	r2, #0
 800e22a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e22c:	88f8      	ldrh	r0, [r7, #6]
 800e22e:	893a      	ldrh	r2, [r7, #8]
 800e230:	8979      	ldrh	r1, [r7, #10]
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	9301      	str	r3, [sp, #4]
 800e236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e238:	9300      	str	r3, [sp, #0]
 800e23a:	4603      	mov	r3, r0
 800e23c:	68f8      	ldr	r0, [r7, #12]
 800e23e:	f000 fae9 	bl	800e814 <I2C_RequestMemoryWrite>
 800e242:	4603      	mov	r3, r0
 800e244:	2b00      	cmp	r3, #0
 800e246:	d005      	beq.n	800e254 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	2200      	movs	r2, #0
 800e24c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800e250:	2301      	movs	r3, #1
 800e252:	e0a9      	b.n	800e3a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e258:	b29b      	uxth	r3, r3
 800e25a:	2bff      	cmp	r3, #255	; 0xff
 800e25c:	d90e      	bls.n	800e27c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	22ff      	movs	r2, #255	; 0xff
 800e262:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e268:	b2da      	uxtb	r2, r3
 800e26a:	8979      	ldrh	r1, [r7, #10]
 800e26c:	2300      	movs	r3, #0
 800e26e:	9300      	str	r3, [sp, #0]
 800e270:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e274:	68f8      	ldr	r0, [r7, #12]
 800e276:	f000 fdbb 	bl	800edf0 <I2C_TransferConfig>
 800e27a:	e00f      	b.n	800e29c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e280:	b29a      	uxth	r2, r3
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e28a:	b2da      	uxtb	r2, r3
 800e28c:	8979      	ldrh	r1, [r7, #10]
 800e28e:	2300      	movs	r3, #0
 800e290:	9300      	str	r3, [sp, #0]
 800e292:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e296:	68f8      	ldr	r0, [r7, #12]
 800e298:	f000 fdaa 	bl	800edf0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e29c:	697a      	ldr	r2, [r7, #20]
 800e29e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e2a0:	68f8      	ldr	r0, [r7, #12]
 800e2a2:	f000 fbc3 	bl	800ea2c <I2C_WaitOnTXISFlagUntilTimeout>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d001      	beq.n	800e2b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	e07b      	b.n	800e3a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2b4:	781a      	ldrb	r2, [r3, #0]
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c0:	1c5a      	adds	r2, r3, #1
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e2ca:	b29b      	uxth	r3, r3
 800e2cc:	3b01      	subs	r3, #1
 800e2ce:	b29a      	uxth	r2, r3
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2d8:	3b01      	subs	r3, #1
 800e2da:	b29a      	uxth	r2, r3
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e2e4:	b29b      	uxth	r3, r3
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d034      	beq.n	800e354 <HAL_I2C_Mem_Write+0x1c8>
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d130      	bne.n	800e354 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	9300      	str	r3, [sp, #0]
 800e2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	2180      	movs	r1, #128	; 0x80
 800e2fc:	68f8      	ldr	r0, [r7, #12]
 800e2fe:	f000 fb55 	bl	800e9ac <I2C_WaitOnFlagUntilTimeout>
 800e302:	4603      	mov	r3, r0
 800e304:	2b00      	cmp	r3, #0
 800e306:	d001      	beq.n	800e30c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800e308:	2301      	movs	r3, #1
 800e30a:	e04d      	b.n	800e3a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e310:	b29b      	uxth	r3, r3
 800e312:	2bff      	cmp	r3, #255	; 0xff
 800e314:	d90e      	bls.n	800e334 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	22ff      	movs	r2, #255	; 0xff
 800e31a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e320:	b2da      	uxtb	r2, r3
 800e322:	8979      	ldrh	r1, [r7, #10]
 800e324:	2300      	movs	r3, #0
 800e326:	9300      	str	r3, [sp, #0]
 800e328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e32c:	68f8      	ldr	r0, [r7, #12]
 800e32e:	f000 fd5f 	bl	800edf0 <I2C_TransferConfig>
 800e332:	e00f      	b.n	800e354 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e338:	b29a      	uxth	r2, r3
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e342:	b2da      	uxtb	r2, r3
 800e344:	8979      	ldrh	r1, [r7, #10]
 800e346:	2300      	movs	r3, #0
 800e348:	9300      	str	r3, [sp, #0]
 800e34a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e34e:	68f8      	ldr	r0, [r7, #12]
 800e350:	f000 fd4e 	bl	800edf0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e358:	b29b      	uxth	r3, r3
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d19e      	bne.n	800e29c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e35e:	697a      	ldr	r2, [r7, #20]
 800e360:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e362:	68f8      	ldr	r0, [r7, #12]
 800e364:	f000 fba2 	bl	800eaac <I2C_WaitOnSTOPFlagUntilTimeout>
 800e368:	4603      	mov	r3, r0
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d001      	beq.n	800e372 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800e36e:	2301      	movs	r3, #1
 800e370:	e01a      	b.n	800e3a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	2220      	movs	r2, #32
 800e378:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	6859      	ldr	r1, [r3, #4]
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	681a      	ldr	r2, [r3, #0]
 800e384:	4b0a      	ldr	r3, [pc, #40]	; (800e3b0 <HAL_I2C_Mem_Write+0x224>)
 800e386:	400b      	ands	r3, r1
 800e388:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	2220      	movs	r2, #32
 800e38e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	2200      	movs	r2, #0
 800e396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2200      	movs	r2, #0
 800e39e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	e000      	b.n	800e3a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800e3a6:	2302      	movs	r3, #2
  }
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3718      	adds	r7, #24
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}
 800e3b0:	fe00e800 	.word	0xfe00e800

0800e3b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b088      	sub	sp, #32
 800e3b8:	af02      	add	r7, sp, #8
 800e3ba:	60f8      	str	r0, [r7, #12]
 800e3bc:	4608      	mov	r0, r1
 800e3be:	4611      	mov	r1, r2
 800e3c0:	461a      	mov	r2, r3
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	817b      	strh	r3, [r7, #10]
 800e3c6:	460b      	mov	r3, r1
 800e3c8:	813b      	strh	r3, [r7, #8]
 800e3ca:	4613      	mov	r3, r2
 800e3cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e3d4:	b2db      	uxtb	r3, r3
 800e3d6:	2b20      	cmp	r3, #32
 800e3d8:	f040 80fd 	bne.w	800e5d6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800e3dc:	6a3b      	ldr	r3, [r7, #32]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d002      	beq.n	800e3e8 <HAL_I2C_Mem_Read+0x34>
 800e3e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d105      	bne.n	800e3f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e3ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	e0f1      	b.n	800e5d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d101      	bne.n	800e402 <HAL_I2C_Mem_Read+0x4e>
 800e3fe:	2302      	movs	r3, #2
 800e400:	e0ea      	b.n	800e5d8 <HAL_I2C_Mem_Read+0x224>
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	2201      	movs	r2, #1
 800e406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e40a:	f7fd fbcb 	bl	800bba4 <HAL_GetTick>
 800e40e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	9300      	str	r3, [sp, #0]
 800e414:	2319      	movs	r3, #25
 800e416:	2201      	movs	r2, #1
 800e418:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e41c:	68f8      	ldr	r0, [r7, #12]
 800e41e:	f000 fac5 	bl	800e9ac <I2C_WaitOnFlagUntilTimeout>
 800e422:	4603      	mov	r3, r0
 800e424:	2b00      	cmp	r3, #0
 800e426:	d001      	beq.n	800e42c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800e428:	2301      	movs	r3, #1
 800e42a:	e0d5      	b.n	800e5d8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2222      	movs	r2, #34	; 0x22
 800e430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2240      	movs	r2, #64	; 0x40
 800e438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2200      	movs	r2, #0
 800e440:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	6a3a      	ldr	r2, [r7, #32]
 800e446:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e44c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	2200      	movs	r2, #0
 800e452:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e454:	88f8      	ldrh	r0, [r7, #6]
 800e456:	893a      	ldrh	r2, [r7, #8]
 800e458:	8979      	ldrh	r1, [r7, #10]
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	9301      	str	r3, [sp, #4]
 800e45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e460:	9300      	str	r3, [sp, #0]
 800e462:	4603      	mov	r3, r0
 800e464:	68f8      	ldr	r0, [r7, #12]
 800e466:	f000 fa29 	bl	800e8bc <I2C_RequestMemoryRead>
 800e46a:	4603      	mov	r3, r0
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d005      	beq.n	800e47c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	2200      	movs	r2, #0
 800e474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800e478:	2301      	movs	r3, #1
 800e47a:	e0ad      	b.n	800e5d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e480:	b29b      	uxth	r3, r3
 800e482:	2bff      	cmp	r3, #255	; 0xff
 800e484:	d90e      	bls.n	800e4a4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	22ff      	movs	r2, #255	; 0xff
 800e48a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e490:	b2da      	uxtb	r2, r3
 800e492:	8979      	ldrh	r1, [r7, #10]
 800e494:	4b52      	ldr	r3, [pc, #328]	; (800e5e0 <HAL_I2C_Mem_Read+0x22c>)
 800e496:	9300      	str	r3, [sp, #0]
 800e498:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e49c:	68f8      	ldr	r0, [r7, #12]
 800e49e:	f000 fca7 	bl	800edf0 <I2C_TransferConfig>
 800e4a2:	e00f      	b.n	800e4c4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e4a8:	b29a      	uxth	r2, r3
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4b2:	b2da      	uxtb	r2, r3
 800e4b4:	8979      	ldrh	r1, [r7, #10]
 800e4b6:	4b4a      	ldr	r3, [pc, #296]	; (800e5e0 <HAL_I2C_Mem_Read+0x22c>)
 800e4b8:	9300      	str	r3, [sp, #0]
 800e4ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e4be:	68f8      	ldr	r0, [r7, #12]
 800e4c0:	f000 fc96 	bl	800edf0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	9300      	str	r3, [sp, #0]
 800e4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	2104      	movs	r1, #4
 800e4ce:	68f8      	ldr	r0, [r7, #12]
 800e4d0:	f000 fa6c 	bl	800e9ac <I2C_WaitOnFlagUntilTimeout>
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d001      	beq.n	800e4de <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800e4da:	2301      	movs	r3, #1
 800e4dc:	e07c      	b.n	800e5d8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4e8:	b2d2      	uxtb	r2, r2
 800e4ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4f0:	1c5a      	adds	r2, r3, #1
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4fa:	3b01      	subs	r3, #1
 800e4fc:	b29a      	uxth	r2, r3
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e506:	b29b      	uxth	r3, r3
 800e508:	3b01      	subs	r3, #1
 800e50a:	b29a      	uxth	r2, r3
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e514:	b29b      	uxth	r3, r3
 800e516:	2b00      	cmp	r3, #0
 800e518:	d034      	beq.n	800e584 <HAL_I2C_Mem_Read+0x1d0>
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d130      	bne.n	800e584 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	9300      	str	r3, [sp, #0]
 800e526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e528:	2200      	movs	r2, #0
 800e52a:	2180      	movs	r1, #128	; 0x80
 800e52c:	68f8      	ldr	r0, [r7, #12]
 800e52e:	f000 fa3d 	bl	800e9ac <I2C_WaitOnFlagUntilTimeout>
 800e532:	4603      	mov	r3, r0
 800e534:	2b00      	cmp	r3, #0
 800e536:	d001      	beq.n	800e53c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800e538:	2301      	movs	r3, #1
 800e53a:	e04d      	b.n	800e5d8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e540:	b29b      	uxth	r3, r3
 800e542:	2bff      	cmp	r3, #255	; 0xff
 800e544:	d90e      	bls.n	800e564 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	22ff      	movs	r2, #255	; 0xff
 800e54a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e550:	b2da      	uxtb	r2, r3
 800e552:	8979      	ldrh	r1, [r7, #10]
 800e554:	2300      	movs	r3, #0
 800e556:	9300      	str	r3, [sp, #0]
 800e558:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e55c:	68f8      	ldr	r0, [r7, #12]
 800e55e:	f000 fc47 	bl	800edf0 <I2C_TransferConfig>
 800e562:	e00f      	b.n	800e584 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e568:	b29a      	uxth	r2, r3
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e572:	b2da      	uxtb	r2, r3
 800e574:	8979      	ldrh	r1, [r7, #10]
 800e576:	2300      	movs	r3, #0
 800e578:	9300      	str	r3, [sp, #0]
 800e57a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e57e:	68f8      	ldr	r0, [r7, #12]
 800e580:	f000 fc36 	bl	800edf0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e588:	b29b      	uxth	r3, r3
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d19a      	bne.n	800e4c4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e58e:	697a      	ldr	r2, [r7, #20]
 800e590:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e592:	68f8      	ldr	r0, [r7, #12]
 800e594:	f000 fa8a 	bl	800eaac <I2C_WaitOnSTOPFlagUntilTimeout>
 800e598:	4603      	mov	r3, r0
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d001      	beq.n	800e5a2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	e01a      	b.n	800e5d8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	2220      	movs	r2, #32
 800e5a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	6859      	ldr	r1, [r3, #4]
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681a      	ldr	r2, [r3, #0]
 800e5b4:	4b0b      	ldr	r3, [pc, #44]	; (800e5e4 <HAL_I2C_Mem_Read+0x230>)
 800e5b6:	400b      	ands	r3, r1
 800e5b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	2220      	movs	r2, #32
 800e5be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	e000      	b.n	800e5d8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800e5d6:	2302      	movs	r3, #2
  }
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3718      	adds	r7, #24
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}
 800e5e0:	80002400 	.word	0x80002400
 800e5e4:	fe00e800 	.word	0xfe00e800

0800e5e8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b08a      	sub	sp, #40	; 0x28
 800e5ec:	af02      	add	r7, sp, #8
 800e5ee:	60f8      	str	r0, [r7, #12]
 800e5f0:	607a      	str	r2, [r7, #4]
 800e5f2:	603b      	str	r3, [r7, #0]
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e602:	b2db      	uxtb	r3, r3
 800e604:	2b20      	cmp	r3, #32
 800e606:	f040 80f1 	bne.w	800e7ec <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	699b      	ldr	r3, [r3, #24]
 800e610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e618:	d101      	bne.n	800e61e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800e61a:	2302      	movs	r3, #2
 800e61c:	e0e7      	b.n	800e7ee <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e624:	2b01      	cmp	r3, #1
 800e626:	d101      	bne.n	800e62c <HAL_I2C_IsDeviceReady+0x44>
 800e628:	2302      	movs	r3, #2
 800e62a:	e0e0      	b.n	800e7ee <HAL_I2C_IsDeviceReady+0x206>
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2201      	movs	r2, #1
 800e630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2224      	movs	r2, #36	; 0x24
 800e638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2200      	movs	r2, #0
 800e640:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	68db      	ldr	r3, [r3, #12]
 800e646:	2b01      	cmp	r3, #1
 800e648:	d107      	bne.n	800e65a <HAL_I2C_IsDeviceReady+0x72>
 800e64a:	897b      	ldrh	r3, [r7, #10]
 800e64c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e650:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e654:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e658:	e004      	b.n	800e664 <HAL_I2C_IsDeviceReady+0x7c>
 800e65a:	897b      	ldrh	r3, [r7, #10]
 800e65c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e660:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800e664:	68fa      	ldr	r2, [r7, #12]
 800e666:	6812      	ldr	r2, [r2, #0]
 800e668:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800e66a:	f7fd fa9b 	bl	800bba4 <HAL_GetTick>
 800e66e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	699b      	ldr	r3, [r3, #24]
 800e676:	f003 0320 	and.w	r3, r3, #32
 800e67a:	2b20      	cmp	r3, #32
 800e67c:	bf0c      	ite	eq
 800e67e:	2301      	moveq	r3, #1
 800e680:	2300      	movne	r3, #0
 800e682:	b2db      	uxtb	r3, r3
 800e684:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	699b      	ldr	r3, [r3, #24]
 800e68c:	f003 0310 	and.w	r3, r3, #16
 800e690:	2b10      	cmp	r3, #16
 800e692:	bf0c      	ite	eq
 800e694:	2301      	moveq	r3, #1
 800e696:	2300      	movne	r3, #0
 800e698:	b2db      	uxtb	r3, r3
 800e69a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800e69c:	e034      	b.n	800e708 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6a4:	d01a      	beq.n	800e6dc <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e6a6:	f7fd fa7d 	bl	800bba4 <HAL_GetTick>
 800e6aa:	4602      	mov	r2, r0
 800e6ac:	69bb      	ldr	r3, [r7, #24]
 800e6ae:	1ad3      	subs	r3, r2, r3
 800e6b0:	683a      	ldr	r2, [r7, #0]
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d302      	bcc.n	800e6bc <HAL_I2C_IsDeviceReady+0xd4>
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d10f      	bne.n	800e6dc <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	2220      	movs	r2, #32
 800e6c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6c8:	f043 0220 	orr.w	r2, r3, #32
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	e088      	b.n	800e7ee <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	699b      	ldr	r3, [r3, #24]
 800e6e2:	f003 0320 	and.w	r3, r3, #32
 800e6e6:	2b20      	cmp	r3, #32
 800e6e8:	bf0c      	ite	eq
 800e6ea:	2301      	moveq	r3, #1
 800e6ec:	2300      	movne	r3, #0
 800e6ee:	b2db      	uxtb	r3, r3
 800e6f0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	699b      	ldr	r3, [r3, #24]
 800e6f8:	f003 0310 	and.w	r3, r3, #16
 800e6fc:	2b10      	cmp	r3, #16
 800e6fe:	bf0c      	ite	eq
 800e700:	2301      	moveq	r3, #1
 800e702:	2300      	movne	r3, #0
 800e704:	b2db      	uxtb	r3, r3
 800e706:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800e708:	7ffb      	ldrb	r3, [r7, #31]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d102      	bne.n	800e714 <HAL_I2C_IsDeviceReady+0x12c>
 800e70e:	7fbb      	ldrb	r3, [r7, #30]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d0c4      	beq.n	800e69e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	699b      	ldr	r3, [r3, #24]
 800e71a:	f003 0310 	and.w	r3, r3, #16
 800e71e:	2b10      	cmp	r3, #16
 800e720:	d01a      	beq.n	800e758 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800e722:	69bb      	ldr	r3, [r7, #24]
 800e724:	9300      	str	r3, [sp, #0]
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	2200      	movs	r2, #0
 800e72a:	2120      	movs	r1, #32
 800e72c:	68f8      	ldr	r0, [r7, #12]
 800e72e:	f000 f93d 	bl	800e9ac <I2C_WaitOnFlagUntilTimeout>
 800e732:	4603      	mov	r3, r0
 800e734:	2b00      	cmp	r3, #0
 800e736:	d001      	beq.n	800e73c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800e738:	2301      	movs	r3, #1
 800e73a:	e058      	b.n	800e7ee <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	2220      	movs	r2, #32
 800e742:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	2220      	movs	r2, #32
 800e748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	2200      	movs	r2, #0
 800e750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800e754:	2300      	movs	r3, #0
 800e756:	e04a      	b.n	800e7ee <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800e758:	69bb      	ldr	r3, [r7, #24]
 800e75a:	9300      	str	r3, [sp, #0]
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	2200      	movs	r2, #0
 800e760:	2120      	movs	r1, #32
 800e762:	68f8      	ldr	r0, [r7, #12]
 800e764:	f000 f922 	bl	800e9ac <I2C_WaitOnFlagUntilTimeout>
 800e768:	4603      	mov	r3, r0
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d001      	beq.n	800e772 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800e76e:	2301      	movs	r3, #1
 800e770:	e03d      	b.n	800e7ee <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	2210      	movs	r2, #16
 800e778:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	2220      	movs	r2, #32
 800e780:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	687a      	ldr	r2, [r7, #4]
 800e786:	429a      	cmp	r2, r3
 800e788:	d118      	bne.n	800e7bc <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	685a      	ldr	r2, [r3, #4]
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e798:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800e79a:	69bb      	ldr	r3, [r7, #24]
 800e79c:	9300      	str	r3, [sp, #0]
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	2120      	movs	r1, #32
 800e7a4:	68f8      	ldr	r0, [r7, #12]
 800e7a6:	f000 f901 	bl	800e9ac <I2C_WaitOnFlagUntilTimeout>
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d001      	beq.n	800e7b4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	e01c      	b.n	800e7ee <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	2220      	movs	r2, #32
 800e7ba:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800e7bc:	697b      	ldr	r3, [r7, #20]
 800e7be:	3301      	adds	r3, #1
 800e7c0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	687a      	ldr	r2, [r7, #4]
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	f63f af3b 	bhi.w	800e642 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	2220      	movs	r2, #32
 800e7d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7d8:	f043 0220 	orr.w	r2, r3, #32
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	e000      	b.n	800e7ee <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800e7ec:	2302      	movs	r3, #2
  }
}
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	3720      	adds	r7, #32
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}

0800e7f6 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800e7f6:	b480      	push	{r7}
 800e7f8:	b083      	sub	sp, #12
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e804:	b2db      	uxtb	r3, r3
}
 800e806:	4618      	mov	r0, r3
 800e808:	370c      	adds	r7, #12
 800e80a:	46bd      	mov	sp, r7
 800e80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e810:	4770      	bx	lr
	...

0800e814 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b086      	sub	sp, #24
 800e818:	af02      	add	r7, sp, #8
 800e81a:	60f8      	str	r0, [r7, #12]
 800e81c:	4608      	mov	r0, r1
 800e81e:	4611      	mov	r1, r2
 800e820:	461a      	mov	r2, r3
 800e822:	4603      	mov	r3, r0
 800e824:	817b      	strh	r3, [r7, #10]
 800e826:	460b      	mov	r3, r1
 800e828:	813b      	strh	r3, [r7, #8]
 800e82a:	4613      	mov	r3, r2
 800e82c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e82e:	88fb      	ldrh	r3, [r7, #6]
 800e830:	b2da      	uxtb	r2, r3
 800e832:	8979      	ldrh	r1, [r7, #10]
 800e834:	4b20      	ldr	r3, [pc, #128]	; (800e8b8 <I2C_RequestMemoryWrite+0xa4>)
 800e836:	9300      	str	r3, [sp, #0]
 800e838:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e83c:	68f8      	ldr	r0, [r7, #12]
 800e83e:	f000 fad7 	bl	800edf0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e842:	69fa      	ldr	r2, [r7, #28]
 800e844:	69b9      	ldr	r1, [r7, #24]
 800e846:	68f8      	ldr	r0, [r7, #12]
 800e848:	f000 f8f0 	bl	800ea2c <I2C_WaitOnTXISFlagUntilTimeout>
 800e84c:	4603      	mov	r3, r0
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d001      	beq.n	800e856 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800e852:	2301      	movs	r3, #1
 800e854:	e02c      	b.n	800e8b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e856:	88fb      	ldrh	r3, [r7, #6]
 800e858:	2b01      	cmp	r3, #1
 800e85a:	d105      	bne.n	800e868 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e85c:	893b      	ldrh	r3, [r7, #8]
 800e85e:	b2da      	uxtb	r2, r3
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	629a      	str	r2, [r3, #40]	; 0x28
 800e866:	e015      	b.n	800e894 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e868:	893b      	ldrh	r3, [r7, #8]
 800e86a:	0a1b      	lsrs	r3, r3, #8
 800e86c:	b29b      	uxth	r3, r3
 800e86e:	b2da      	uxtb	r2, r3
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e876:	69fa      	ldr	r2, [r7, #28]
 800e878:	69b9      	ldr	r1, [r7, #24]
 800e87a:	68f8      	ldr	r0, [r7, #12]
 800e87c:	f000 f8d6 	bl	800ea2c <I2C_WaitOnTXISFlagUntilTimeout>
 800e880:	4603      	mov	r3, r0
 800e882:	2b00      	cmp	r3, #0
 800e884:	d001      	beq.n	800e88a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800e886:	2301      	movs	r3, #1
 800e888:	e012      	b.n	800e8b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e88a:	893b      	ldrh	r3, [r7, #8]
 800e88c:	b2da      	uxtb	r2, r3
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800e894:	69fb      	ldr	r3, [r7, #28]
 800e896:	9300      	str	r3, [sp, #0]
 800e898:	69bb      	ldr	r3, [r7, #24]
 800e89a:	2200      	movs	r2, #0
 800e89c:	2180      	movs	r1, #128	; 0x80
 800e89e:	68f8      	ldr	r0, [r7, #12]
 800e8a0:	f000 f884 	bl	800e9ac <I2C_WaitOnFlagUntilTimeout>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d001      	beq.n	800e8ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	e000      	b.n	800e8b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800e8ae:	2300      	movs	r3, #0
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	3710      	adds	r7, #16
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	bd80      	pop	{r7, pc}
 800e8b8:	80002000 	.word	0x80002000

0800e8bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b086      	sub	sp, #24
 800e8c0:	af02      	add	r7, sp, #8
 800e8c2:	60f8      	str	r0, [r7, #12]
 800e8c4:	4608      	mov	r0, r1
 800e8c6:	4611      	mov	r1, r2
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	817b      	strh	r3, [r7, #10]
 800e8ce:	460b      	mov	r3, r1
 800e8d0:	813b      	strh	r3, [r7, #8]
 800e8d2:	4613      	mov	r3, r2
 800e8d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e8d6:	88fb      	ldrh	r3, [r7, #6]
 800e8d8:	b2da      	uxtb	r2, r3
 800e8da:	8979      	ldrh	r1, [r7, #10]
 800e8dc:	4b20      	ldr	r3, [pc, #128]	; (800e960 <I2C_RequestMemoryRead+0xa4>)
 800e8de:	9300      	str	r3, [sp, #0]
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	68f8      	ldr	r0, [r7, #12]
 800e8e4:	f000 fa84 	bl	800edf0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e8e8:	69fa      	ldr	r2, [r7, #28]
 800e8ea:	69b9      	ldr	r1, [r7, #24]
 800e8ec:	68f8      	ldr	r0, [r7, #12]
 800e8ee:	f000 f89d 	bl	800ea2c <I2C_WaitOnTXISFlagUntilTimeout>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d001      	beq.n	800e8fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	e02c      	b.n	800e956 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e8fc:	88fb      	ldrh	r3, [r7, #6]
 800e8fe:	2b01      	cmp	r3, #1
 800e900:	d105      	bne.n	800e90e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e902:	893b      	ldrh	r3, [r7, #8]
 800e904:	b2da      	uxtb	r2, r3
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	629a      	str	r2, [r3, #40]	; 0x28
 800e90c:	e015      	b.n	800e93a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e90e:	893b      	ldrh	r3, [r7, #8]
 800e910:	0a1b      	lsrs	r3, r3, #8
 800e912:	b29b      	uxth	r3, r3
 800e914:	b2da      	uxtb	r2, r3
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e91c:	69fa      	ldr	r2, [r7, #28]
 800e91e:	69b9      	ldr	r1, [r7, #24]
 800e920:	68f8      	ldr	r0, [r7, #12]
 800e922:	f000 f883 	bl	800ea2c <I2C_WaitOnTXISFlagUntilTimeout>
 800e926:	4603      	mov	r3, r0
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d001      	beq.n	800e930 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800e92c:	2301      	movs	r3, #1
 800e92e:	e012      	b.n	800e956 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e930:	893b      	ldrh	r3, [r7, #8]
 800e932:	b2da      	uxtb	r2, r3
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	9300      	str	r3, [sp, #0]
 800e93e:	69bb      	ldr	r3, [r7, #24]
 800e940:	2200      	movs	r2, #0
 800e942:	2140      	movs	r1, #64	; 0x40
 800e944:	68f8      	ldr	r0, [r7, #12]
 800e946:	f000 f831 	bl	800e9ac <I2C_WaitOnFlagUntilTimeout>
 800e94a:	4603      	mov	r3, r0
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d001      	beq.n	800e954 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800e950:	2301      	movs	r3, #1
 800e952:	e000      	b.n	800e956 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800e954:	2300      	movs	r3, #0
}
 800e956:	4618      	mov	r0, r3
 800e958:	3710      	adds	r7, #16
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}
 800e95e:	bf00      	nop
 800e960:	80002000 	.word	0x80002000

0800e964 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e964:	b480      	push	{r7}
 800e966:	b083      	sub	sp, #12
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	699b      	ldr	r3, [r3, #24]
 800e972:	f003 0302 	and.w	r3, r3, #2
 800e976:	2b02      	cmp	r3, #2
 800e978:	d103      	bne.n	800e982 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	2200      	movs	r2, #0
 800e980:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	699b      	ldr	r3, [r3, #24]
 800e988:	f003 0301 	and.w	r3, r3, #1
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	d007      	beq.n	800e9a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	699a      	ldr	r2, [r3, #24]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f042 0201 	orr.w	r2, r2, #1
 800e99e:	619a      	str	r2, [r3, #24]
  }
}
 800e9a0:	bf00      	nop
 800e9a2:	370c      	adds	r7, #12
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9aa:	4770      	bx	lr

0800e9ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b084      	sub	sp, #16
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	60f8      	str	r0, [r7, #12]
 800e9b4:	60b9      	str	r1, [r7, #8]
 800e9b6:	603b      	str	r3, [r7, #0]
 800e9b8:	4613      	mov	r3, r2
 800e9ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e9bc:	e022      	b.n	800ea04 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9c4:	d01e      	beq.n	800ea04 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e9c6:	f7fd f8ed 	bl	800bba4 <HAL_GetTick>
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	69bb      	ldr	r3, [r7, #24]
 800e9ce:	1ad3      	subs	r3, r2, r3
 800e9d0:	683a      	ldr	r2, [r7, #0]
 800e9d2:	429a      	cmp	r2, r3
 800e9d4:	d302      	bcc.n	800e9dc <I2C_WaitOnFlagUntilTimeout+0x30>
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d113      	bne.n	800ea04 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9e0:	f043 0220 	orr.w	r2, r3, #32
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2220      	movs	r2, #32
 800e9ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800ea00:	2301      	movs	r3, #1
 800ea02:	e00f      	b.n	800ea24 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	699a      	ldr	r2, [r3, #24]
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	4013      	ands	r3, r2
 800ea0e:	68ba      	ldr	r2, [r7, #8]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	bf0c      	ite	eq
 800ea14:	2301      	moveq	r3, #1
 800ea16:	2300      	movne	r3, #0
 800ea18:	b2db      	uxtb	r3, r3
 800ea1a:	461a      	mov	r2, r3
 800ea1c:	79fb      	ldrb	r3, [r7, #7]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d0cd      	beq.n	800e9be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ea22:	2300      	movs	r3, #0
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	3710      	adds	r7, #16
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}

0800ea2c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b084      	sub	sp, #16
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	60f8      	str	r0, [r7, #12]
 800ea34:	60b9      	str	r1, [r7, #8]
 800ea36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ea38:	e02c      	b.n	800ea94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ea3a:	687a      	ldr	r2, [r7, #4]
 800ea3c:	68b9      	ldr	r1, [r7, #8]
 800ea3e:	68f8      	ldr	r0, [r7, #12]
 800ea40:	f000 f8ea 	bl	800ec18 <I2C_IsErrorOccurred>
 800ea44:	4603      	mov	r3, r0
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d001      	beq.n	800ea4e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	e02a      	b.n	800eaa4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea54:	d01e      	beq.n	800ea94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea56:	f7fd f8a5 	bl	800bba4 <HAL_GetTick>
 800ea5a:	4602      	mov	r2, r0
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	1ad3      	subs	r3, r2, r3
 800ea60:	68ba      	ldr	r2, [r7, #8]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d302      	bcc.n	800ea6c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d113      	bne.n	800ea94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea70:	f043 0220 	orr.w	r2, r3, #32
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	2220      	movs	r2, #32
 800ea7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	2200      	movs	r2, #0
 800ea84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ea90:	2301      	movs	r3, #1
 800ea92:	e007      	b.n	800eaa4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	699b      	ldr	r3, [r3, #24]
 800ea9a:	f003 0302 	and.w	r3, r3, #2
 800ea9e:	2b02      	cmp	r3, #2
 800eaa0:	d1cb      	bne.n	800ea3a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800eaa2:	2300      	movs	r3, #0
}
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	3710      	adds	r7, #16
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b084      	sub	sp, #16
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	60f8      	str	r0, [r7, #12]
 800eab4:	60b9      	str	r1, [r7, #8]
 800eab6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800eab8:	e028      	b.n	800eb0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800eaba:	687a      	ldr	r2, [r7, #4]
 800eabc:	68b9      	ldr	r1, [r7, #8]
 800eabe:	68f8      	ldr	r0, [r7, #12]
 800eac0:	f000 f8aa 	bl	800ec18 <I2C_IsErrorOccurred>
 800eac4:	4603      	mov	r3, r0
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d001      	beq.n	800eace <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800eaca:	2301      	movs	r3, #1
 800eacc:	e026      	b.n	800eb1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eace:	f7fd f869 	bl	800bba4 <HAL_GetTick>
 800ead2:	4602      	mov	r2, r0
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	1ad3      	subs	r3, r2, r3
 800ead8:	68ba      	ldr	r2, [r7, #8]
 800eada:	429a      	cmp	r2, r3
 800eadc:	d302      	bcc.n	800eae4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d113      	bne.n	800eb0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eae8:	f043 0220 	orr.w	r2, r3, #32
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	2220      	movs	r2, #32
 800eaf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	2200      	movs	r2, #0
 800eafc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	2200      	movs	r2, #0
 800eb04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800eb08:	2301      	movs	r3, #1
 800eb0a:	e007      	b.n	800eb1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	699b      	ldr	r3, [r3, #24]
 800eb12:	f003 0320 	and.w	r3, r3, #32
 800eb16:	2b20      	cmp	r3, #32
 800eb18:	d1cf      	bne.n	800eaba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800eb1a:	2300      	movs	r3, #0
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3710      	adds	r7, #16
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b084      	sub	sp, #16
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800eb30:	e064      	b.n	800ebfc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800eb32:	687a      	ldr	r2, [r7, #4]
 800eb34:	68b9      	ldr	r1, [r7, #8]
 800eb36:	68f8      	ldr	r0, [r7, #12]
 800eb38:	f000 f86e 	bl	800ec18 <I2C_IsErrorOccurred>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d001      	beq.n	800eb46 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800eb42:	2301      	movs	r3, #1
 800eb44:	e062      	b.n	800ec0c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	699b      	ldr	r3, [r3, #24]
 800eb4c:	f003 0320 	and.w	r3, r3, #32
 800eb50:	2b20      	cmp	r3, #32
 800eb52:	d138      	bne.n	800ebc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	699b      	ldr	r3, [r3, #24]
 800eb5a:	f003 0304 	and.w	r3, r3, #4
 800eb5e:	2b04      	cmp	r3, #4
 800eb60:	d105      	bne.n	800eb6e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d001      	beq.n	800eb6e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	e04e      	b.n	800ec0c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	699b      	ldr	r3, [r3, #24]
 800eb74:	f003 0310 	and.w	r3, r3, #16
 800eb78:	2b10      	cmp	r3, #16
 800eb7a:	d107      	bne.n	800eb8c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	2210      	movs	r2, #16
 800eb82:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2204      	movs	r2, #4
 800eb88:	645a      	str	r2, [r3, #68]	; 0x44
 800eb8a:	e002      	b.n	800eb92 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	2220      	movs	r2, #32
 800eb98:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	6859      	ldr	r1, [r3, #4]
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681a      	ldr	r2, [r3, #0]
 800eba4:	4b1b      	ldr	r3, [pc, #108]	; (800ec14 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800eba6:	400b      	ands	r3, r1
 800eba8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	2220      	movs	r2, #32
 800ebae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800ebc2:	2301      	movs	r3, #1
 800ebc4:	e022      	b.n	800ec0c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ebc6:	f7fc ffed 	bl	800bba4 <HAL_GetTick>
 800ebca:	4602      	mov	r2, r0
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	1ad3      	subs	r3, r2, r3
 800ebd0:	68ba      	ldr	r2, [r7, #8]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d302      	bcc.n	800ebdc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d10f      	bne.n	800ebfc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebe0:	f043 0220 	orr.w	r2, r3, #32
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	2220      	movs	r2, #32
 800ebec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	e007      	b.n	800ec0c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	699b      	ldr	r3, [r3, #24]
 800ec02:	f003 0304 	and.w	r3, r3, #4
 800ec06:	2b04      	cmp	r3, #4
 800ec08:	d193      	bne.n	800eb32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ec0a:	2300      	movs	r3, #0
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3710      	adds	r7, #16
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}
 800ec14:	fe00e800 	.word	0xfe00e800

0800ec18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b08a      	sub	sp, #40	; 0x28
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	60f8      	str	r0, [r7, #12]
 800ec20:	60b9      	str	r1, [r7, #8]
 800ec22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ec24:	2300      	movs	r3, #0
 800ec26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	699b      	ldr	r3, [r3, #24]
 800ec30:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800ec32:	2300      	movs	r3, #0
 800ec34:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ec3a:	69bb      	ldr	r3, [r7, #24]
 800ec3c:	f003 0310 	and.w	r3, r3, #16
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d075      	beq.n	800ed30 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	2210      	movs	r2, #16
 800ec4a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ec4c:	e056      	b.n	800ecfc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec54:	d052      	beq.n	800ecfc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ec56:	f7fc ffa5 	bl	800bba4 <HAL_GetTick>
 800ec5a:	4602      	mov	r2, r0
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	1ad3      	subs	r3, r2, r3
 800ec60:	68ba      	ldr	r2, [r7, #8]
 800ec62:	429a      	cmp	r2, r3
 800ec64:	d302      	bcc.n	800ec6c <I2C_IsErrorOccurred+0x54>
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d147      	bne.n	800ecfc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	685b      	ldr	r3, [r3, #4]
 800ec72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ec76:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec7e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	699b      	ldr	r3, [r3, #24]
 800ec86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ec8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec8e:	d12e      	bne.n	800ecee <I2C_IsErrorOccurred+0xd6>
 800ec90:	697b      	ldr	r3, [r7, #20]
 800ec92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ec96:	d02a      	beq.n	800ecee <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800ec98:	7cfb      	ldrb	r3, [r7, #19]
 800ec9a:	2b20      	cmp	r3, #32
 800ec9c:	d027      	beq.n	800ecee <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	685a      	ldr	r2, [r3, #4]
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ecac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800ecae:	f7fc ff79 	bl	800bba4 <HAL_GetTick>
 800ecb2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ecb4:	e01b      	b.n	800ecee <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800ecb6:	f7fc ff75 	bl	800bba4 <HAL_GetTick>
 800ecba:	4602      	mov	r2, r0
 800ecbc:	69fb      	ldr	r3, [r7, #28]
 800ecbe:	1ad3      	subs	r3, r2, r3
 800ecc0:	2b19      	cmp	r3, #25
 800ecc2:	d914      	bls.n	800ecee <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecc8:	f043 0220 	orr.w	r2, r3, #32
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	2220      	movs	r2, #32
 800ecd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	2200      	movs	r2, #0
 800ece4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800ece8:	2301      	movs	r3, #1
 800ecea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	699b      	ldr	r3, [r3, #24]
 800ecf4:	f003 0320 	and.w	r3, r3, #32
 800ecf8:	2b20      	cmp	r3, #32
 800ecfa:	d1dc      	bne.n	800ecb6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	699b      	ldr	r3, [r3, #24]
 800ed02:	f003 0320 	and.w	r3, r3, #32
 800ed06:	2b20      	cmp	r3, #32
 800ed08:	d003      	beq.n	800ed12 <I2C_IsErrorOccurred+0xfa>
 800ed0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d09d      	beq.n	800ec4e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ed12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d103      	bne.n	800ed22 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	2220      	movs	r2, #32
 800ed20:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ed22:	6a3b      	ldr	r3, [r7, #32]
 800ed24:	f043 0304 	orr.w	r3, r3, #4
 800ed28:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	699b      	ldr	r3, [r3, #24]
 800ed36:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ed38:	69bb      	ldr	r3, [r7, #24]
 800ed3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d00b      	beq.n	800ed5a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ed42:	6a3b      	ldr	r3, [r7, #32]
 800ed44:	f043 0301 	orr.w	r3, r3, #1
 800ed48:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ed52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ed54:	2301      	movs	r3, #1
 800ed56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ed5a:	69bb      	ldr	r3, [r7, #24]
 800ed5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d00b      	beq.n	800ed7c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ed64:	6a3b      	ldr	r3, [r7, #32]
 800ed66:	f043 0308 	orr.w	r3, r3, #8
 800ed6a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ed74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ed76:	2301      	movs	r3, #1
 800ed78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ed7c:	69bb      	ldr	r3, [r7, #24]
 800ed7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d00b      	beq.n	800ed9e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800ed86:	6a3b      	ldr	r3, [r7, #32]
 800ed88:	f043 0302 	orr.w	r3, r3, #2
 800ed8c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ed96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ed98:	2301      	movs	r3, #1
 800ed9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800ed9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d01c      	beq.n	800ede0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800eda6:	68f8      	ldr	r0, [r7, #12]
 800eda8:	f7ff fddc 	bl	800e964 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	6859      	ldr	r1, [r3, #4]
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	681a      	ldr	r2, [r3, #0]
 800edb6:	4b0d      	ldr	r3, [pc, #52]	; (800edec <I2C_IsErrorOccurred+0x1d4>)
 800edb8:	400b      	ands	r3, r1
 800edba:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800edc0:	6a3b      	ldr	r3, [r7, #32]
 800edc2:	431a      	orrs	r2, r3
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2220      	movs	r2, #32
 800edcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2200      	movs	r2, #0
 800edd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2200      	movs	r2, #0
 800eddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800ede0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3728      	adds	r7, #40	; 0x28
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}
 800edec:	fe00e800 	.word	0xfe00e800

0800edf0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b087      	sub	sp, #28
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	607b      	str	r3, [r7, #4]
 800edfa:	460b      	mov	r3, r1
 800edfc:	817b      	strh	r3, [r7, #10]
 800edfe:	4613      	mov	r3, r2
 800ee00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ee02:	897b      	ldrh	r3, [r7, #10]
 800ee04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ee08:	7a7b      	ldrb	r3, [r7, #9]
 800ee0a:	041b      	lsls	r3, r3, #16
 800ee0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ee10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ee16:	6a3b      	ldr	r3, [r7, #32]
 800ee18:	4313      	orrs	r3, r2
 800ee1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ee1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	685a      	ldr	r2, [r3, #4]
 800ee26:	6a3b      	ldr	r3, [r7, #32]
 800ee28:	0d5b      	lsrs	r3, r3, #21
 800ee2a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800ee2e:	4b08      	ldr	r3, [pc, #32]	; (800ee50 <I2C_TransferConfig+0x60>)
 800ee30:	430b      	orrs	r3, r1
 800ee32:	43db      	mvns	r3, r3
 800ee34:	ea02 0103 	and.w	r1, r2, r3
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	697a      	ldr	r2, [r7, #20]
 800ee3e:	430a      	orrs	r2, r1
 800ee40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ee42:	bf00      	nop
 800ee44:	371c      	adds	r7, #28
 800ee46:	46bd      	mov	sp, r7
 800ee48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4c:	4770      	bx	lr
 800ee4e:	bf00      	nop
 800ee50:	03ff63ff 	.word	0x03ff63ff

0800ee54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ee54:	b480      	push	{r7}
 800ee56:	b083      	sub	sp, #12
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
 800ee5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ee64:	b2db      	uxtb	r3, r3
 800ee66:	2b20      	cmp	r3, #32
 800ee68:	d138      	bne.n	800eedc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ee70:	2b01      	cmp	r3, #1
 800ee72:	d101      	bne.n	800ee78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ee74:	2302      	movs	r3, #2
 800ee76:	e032      	b.n	800eede <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2201      	movs	r2, #1
 800ee7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2224      	movs	r2, #36	; 0x24
 800ee84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	f022 0201 	bic.w	r2, r2, #1
 800ee96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	681a      	ldr	r2, [r3, #0]
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800eea6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	6819      	ldr	r1, [r3, #0]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	683a      	ldr	r2, [r7, #0]
 800eeb4:	430a      	orrs	r2, r1
 800eeb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	681a      	ldr	r2, [r3, #0]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	f042 0201 	orr.w	r2, r2, #1
 800eec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2220      	movs	r2, #32
 800eecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2200      	movs	r2, #0
 800eed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800eed8:	2300      	movs	r3, #0
 800eeda:	e000      	b.n	800eede <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800eedc:	2302      	movs	r3, #2
  }
}
 800eede:	4618      	mov	r0, r3
 800eee0:	370c      	adds	r7, #12
 800eee2:	46bd      	mov	sp, r7
 800eee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee8:	4770      	bx	lr

0800eeea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800eeea:	b480      	push	{r7}
 800eeec:	b085      	sub	sp, #20
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	6078      	str	r0, [r7, #4]
 800eef2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eefa:	b2db      	uxtb	r3, r3
 800eefc:	2b20      	cmp	r3, #32
 800eefe:	d139      	bne.n	800ef74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ef06:	2b01      	cmp	r3, #1
 800ef08:	d101      	bne.n	800ef0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ef0a:	2302      	movs	r3, #2
 800ef0c:	e033      	b.n	800ef76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	2201      	movs	r2, #1
 800ef12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	2224      	movs	r2, #36	; 0x24
 800ef1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	681a      	ldr	r2, [r3, #0]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	f022 0201 	bic.w	r2, r2, #1
 800ef2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ef3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	021b      	lsls	r3, r3, #8
 800ef42:	68fa      	ldr	r2, [r7, #12]
 800ef44:	4313      	orrs	r3, r2
 800ef46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	68fa      	ldr	r2, [r7, #12]
 800ef4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	681a      	ldr	r2, [r3, #0]
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	f042 0201 	orr.w	r2, r2, #1
 800ef5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	2220      	movs	r2, #32
 800ef64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ef70:	2300      	movs	r3, #0
 800ef72:	e000      	b.n	800ef76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ef74:	2302      	movs	r3, #2
  }
}
 800ef76:	4618      	mov	r0, r3
 800ef78:	3714      	adds	r7, #20
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef80:	4770      	bx	lr

0800ef82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ef82:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef84:	b08f      	sub	sp, #60	; 0x3c
 800ef86:	af0a      	add	r7, sp, #40	; 0x28
 800ef88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d101      	bne.n	800ef94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ef90:	2301      	movs	r3, #1
 800ef92:	e116      	b.n	800f1c2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800efa0:	b2db      	uxtb	r3, r3
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d106      	bne.n	800efb4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2200      	movs	r2, #0
 800efaa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f00a fb46 	bl	8019640 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2203      	movs	r2, #3
 800efb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d102      	bne.n	800efce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2200      	movs	r2, #0
 800efcc:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	4618      	mov	r0, r3
 800efd4:	f007 fa55 	bl	8016482 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	603b      	str	r3, [r7, #0]
 800efde:	687e      	ldr	r6, [r7, #4]
 800efe0:	466d      	mov	r5, sp
 800efe2:	f106 0410 	add.w	r4, r6, #16
 800efe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800efe8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800efea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800efec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800efee:	e894 0003 	ldmia.w	r4, {r0, r1}
 800eff2:	e885 0003 	stmia.w	r5, {r0, r1}
 800eff6:	1d33      	adds	r3, r6, #4
 800eff8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800effa:	6838      	ldr	r0, [r7, #0]
 800effc:	f007 f968 	bl	80162d0 <USB_CoreInit>
 800f000:	4603      	mov	r3, r0
 800f002:	2b00      	cmp	r3, #0
 800f004:	d005      	beq.n	800f012 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2202      	movs	r2, #2
 800f00a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800f00e:	2301      	movs	r3, #1
 800f010:	e0d7      	b.n	800f1c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	2100      	movs	r1, #0
 800f018:	4618      	mov	r0, r3
 800f01a:	f007 fa43 	bl	80164a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f01e:	2300      	movs	r3, #0
 800f020:	73fb      	strb	r3, [r7, #15]
 800f022:	e04a      	b.n	800f0ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800f024:	7bfa      	ldrb	r2, [r7, #15]
 800f026:	6879      	ldr	r1, [r7, #4]
 800f028:	4613      	mov	r3, r2
 800f02a:	00db      	lsls	r3, r3, #3
 800f02c:	4413      	add	r3, r2
 800f02e:	009b      	lsls	r3, r3, #2
 800f030:	440b      	add	r3, r1
 800f032:	333d      	adds	r3, #61	; 0x3d
 800f034:	2201      	movs	r2, #1
 800f036:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800f038:	7bfa      	ldrb	r2, [r7, #15]
 800f03a:	6879      	ldr	r1, [r7, #4]
 800f03c:	4613      	mov	r3, r2
 800f03e:	00db      	lsls	r3, r3, #3
 800f040:	4413      	add	r3, r2
 800f042:	009b      	lsls	r3, r3, #2
 800f044:	440b      	add	r3, r1
 800f046:	333c      	adds	r3, #60	; 0x3c
 800f048:	7bfa      	ldrb	r2, [r7, #15]
 800f04a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800f04c:	7bfa      	ldrb	r2, [r7, #15]
 800f04e:	7bfb      	ldrb	r3, [r7, #15]
 800f050:	b298      	uxth	r0, r3
 800f052:	6879      	ldr	r1, [r7, #4]
 800f054:	4613      	mov	r3, r2
 800f056:	00db      	lsls	r3, r3, #3
 800f058:	4413      	add	r3, r2
 800f05a:	009b      	lsls	r3, r3, #2
 800f05c:	440b      	add	r3, r1
 800f05e:	3344      	adds	r3, #68	; 0x44
 800f060:	4602      	mov	r2, r0
 800f062:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800f064:	7bfa      	ldrb	r2, [r7, #15]
 800f066:	6879      	ldr	r1, [r7, #4]
 800f068:	4613      	mov	r3, r2
 800f06a:	00db      	lsls	r3, r3, #3
 800f06c:	4413      	add	r3, r2
 800f06e:	009b      	lsls	r3, r3, #2
 800f070:	440b      	add	r3, r1
 800f072:	3340      	adds	r3, #64	; 0x40
 800f074:	2200      	movs	r2, #0
 800f076:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800f078:	7bfa      	ldrb	r2, [r7, #15]
 800f07a:	6879      	ldr	r1, [r7, #4]
 800f07c:	4613      	mov	r3, r2
 800f07e:	00db      	lsls	r3, r3, #3
 800f080:	4413      	add	r3, r2
 800f082:	009b      	lsls	r3, r3, #2
 800f084:	440b      	add	r3, r1
 800f086:	3348      	adds	r3, #72	; 0x48
 800f088:	2200      	movs	r2, #0
 800f08a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800f08c:	7bfa      	ldrb	r2, [r7, #15]
 800f08e:	6879      	ldr	r1, [r7, #4]
 800f090:	4613      	mov	r3, r2
 800f092:	00db      	lsls	r3, r3, #3
 800f094:	4413      	add	r3, r2
 800f096:	009b      	lsls	r3, r3, #2
 800f098:	440b      	add	r3, r1
 800f09a:	334c      	adds	r3, #76	; 0x4c
 800f09c:	2200      	movs	r2, #0
 800f09e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800f0a0:	7bfa      	ldrb	r2, [r7, #15]
 800f0a2:	6879      	ldr	r1, [r7, #4]
 800f0a4:	4613      	mov	r3, r2
 800f0a6:	00db      	lsls	r3, r3, #3
 800f0a8:	4413      	add	r3, r2
 800f0aa:	009b      	lsls	r3, r3, #2
 800f0ac:	440b      	add	r3, r1
 800f0ae:	3354      	adds	r3, #84	; 0x54
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f0b4:	7bfb      	ldrb	r3, [r7, #15]
 800f0b6:	3301      	adds	r3, #1
 800f0b8:	73fb      	strb	r3, [r7, #15]
 800f0ba:	7bfa      	ldrb	r2, [r7, #15]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	685b      	ldr	r3, [r3, #4]
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d3af      	bcc.n	800f024 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	73fb      	strb	r3, [r7, #15]
 800f0c8:	e044      	b.n	800f154 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800f0ca:	7bfa      	ldrb	r2, [r7, #15]
 800f0cc:	6879      	ldr	r1, [r7, #4]
 800f0ce:	4613      	mov	r3, r2
 800f0d0:	00db      	lsls	r3, r3, #3
 800f0d2:	4413      	add	r3, r2
 800f0d4:	009b      	lsls	r3, r3, #2
 800f0d6:	440b      	add	r3, r1
 800f0d8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800f0dc:	2200      	movs	r2, #0
 800f0de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800f0e0:	7bfa      	ldrb	r2, [r7, #15]
 800f0e2:	6879      	ldr	r1, [r7, #4]
 800f0e4:	4613      	mov	r3, r2
 800f0e6:	00db      	lsls	r3, r3, #3
 800f0e8:	4413      	add	r3, r2
 800f0ea:	009b      	lsls	r3, r3, #2
 800f0ec:	440b      	add	r3, r1
 800f0ee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800f0f2:	7bfa      	ldrb	r2, [r7, #15]
 800f0f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800f0f6:	7bfa      	ldrb	r2, [r7, #15]
 800f0f8:	6879      	ldr	r1, [r7, #4]
 800f0fa:	4613      	mov	r3, r2
 800f0fc:	00db      	lsls	r3, r3, #3
 800f0fe:	4413      	add	r3, r2
 800f100:	009b      	lsls	r3, r3, #2
 800f102:	440b      	add	r3, r1
 800f104:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f108:	2200      	movs	r2, #0
 800f10a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800f10c:	7bfa      	ldrb	r2, [r7, #15]
 800f10e:	6879      	ldr	r1, [r7, #4]
 800f110:	4613      	mov	r3, r2
 800f112:	00db      	lsls	r3, r3, #3
 800f114:	4413      	add	r3, r2
 800f116:	009b      	lsls	r3, r3, #2
 800f118:	440b      	add	r3, r1
 800f11a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f11e:	2200      	movs	r2, #0
 800f120:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800f122:	7bfa      	ldrb	r2, [r7, #15]
 800f124:	6879      	ldr	r1, [r7, #4]
 800f126:	4613      	mov	r3, r2
 800f128:	00db      	lsls	r3, r3, #3
 800f12a:	4413      	add	r3, r2
 800f12c:	009b      	lsls	r3, r3, #2
 800f12e:	440b      	add	r3, r1
 800f130:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f134:	2200      	movs	r2, #0
 800f136:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800f138:	7bfa      	ldrb	r2, [r7, #15]
 800f13a:	6879      	ldr	r1, [r7, #4]
 800f13c:	4613      	mov	r3, r2
 800f13e:	00db      	lsls	r3, r3, #3
 800f140:	4413      	add	r3, r2
 800f142:	009b      	lsls	r3, r3, #2
 800f144:	440b      	add	r3, r1
 800f146:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800f14a:	2200      	movs	r2, #0
 800f14c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f14e:	7bfb      	ldrb	r3, [r7, #15]
 800f150:	3301      	adds	r3, #1
 800f152:	73fb      	strb	r3, [r7, #15]
 800f154:	7bfa      	ldrb	r2, [r7, #15]
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d3b5      	bcc.n	800f0ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	603b      	str	r3, [r7, #0]
 800f164:	687e      	ldr	r6, [r7, #4]
 800f166:	466d      	mov	r5, sp
 800f168:	f106 0410 	add.w	r4, r6, #16
 800f16c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f16e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f170:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f172:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f174:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f178:	e885 0003 	stmia.w	r5, {r0, r1}
 800f17c:	1d33      	adds	r3, r6, #4
 800f17e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f180:	6838      	ldr	r0, [r7, #0]
 800f182:	f007 f9db 	bl	801653c <USB_DevInit>
 800f186:	4603      	mov	r3, r0
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d005      	beq.n	800f198 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2202      	movs	r2, #2
 800f190:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800f194:	2301      	movs	r3, #1
 800f196:	e014      	b.n	800f1c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2200      	movs	r2, #0
 800f19c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2201      	movs	r2, #1
 800f1a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ac:	2b01      	cmp	r3, #1
 800f1ae:	d102      	bne.n	800f1b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f001 f881 	bl	80102b8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f008 fa63 	bl	8017686 <USB_DevDisconnect>

  return HAL_OK;
 800f1c0:	2300      	movs	r3, #0
}
 800f1c2:	4618      	mov	r0, r3
 800f1c4:	3714      	adds	r7, #20
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f1ca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800f1ca:	b580      	push	{r7, lr}
 800f1cc:	b084      	sub	sp, #16
 800f1ce:	af00      	add	r7, sp, #0
 800f1d0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f1de:	2b01      	cmp	r3, #1
 800f1e0:	d101      	bne.n	800f1e6 <HAL_PCD_Start+0x1c>
 800f1e2:	2302      	movs	r3, #2
 800f1e4:	e01c      	b.n	800f220 <HAL_PCD_Start+0x56>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	2201      	movs	r2, #1
 800f1ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1f2:	2b01      	cmp	r3, #1
 800f1f4:	d105      	bne.n	800f202 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	4618      	mov	r0, r3
 800f208:	f007 f92a 	bl	8016460 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	4618      	mov	r0, r3
 800f212:	f008 fa17 	bl	8017644 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2200      	movs	r2, #0
 800f21a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800f21e:	2300      	movs	r3, #0
}
 800f220:	4618      	mov	r0, r3
 800f222:	3710      	adds	r7, #16
 800f224:	46bd      	mov	sp, r7
 800f226:	bd80      	pop	{r7, pc}

0800f228 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800f228:	b590      	push	{r4, r7, lr}
 800f22a:	b08d      	sub	sp, #52	; 0x34
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f236:	6a3b      	ldr	r3, [r7, #32]
 800f238:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	4618      	mov	r0, r3
 800f240:	f008 fad5 	bl	80177ee <USB_GetMode>
 800f244:	4603      	mov	r3, r0
 800f246:	2b00      	cmp	r3, #0
 800f248:	f040 847e 	bne.w	800fb48 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	4618      	mov	r0, r3
 800f252:	f008 fa39 	bl	80176c8 <USB_ReadInterrupts>
 800f256:	4603      	mov	r3, r0
 800f258:	2b00      	cmp	r3, #0
 800f25a:	f000 8474 	beq.w	800fb46 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800f25e:	69fb      	ldr	r3, [r7, #28]
 800f260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f264:	689b      	ldr	r3, [r3, #8]
 800f266:	0a1b      	lsrs	r3, r3, #8
 800f268:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	4618      	mov	r0, r3
 800f278:	f008 fa26 	bl	80176c8 <USB_ReadInterrupts>
 800f27c:	4603      	mov	r3, r0
 800f27e:	f003 0302 	and.w	r3, r3, #2
 800f282:	2b02      	cmp	r3, #2
 800f284:	d107      	bne.n	800f296 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	695a      	ldr	r2, [r3, #20]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	f002 0202 	and.w	r2, r2, #2
 800f294:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	4618      	mov	r0, r3
 800f29c:	f008 fa14 	bl	80176c8 <USB_ReadInterrupts>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	f003 0310 	and.w	r3, r3, #16
 800f2a6:	2b10      	cmp	r3, #16
 800f2a8:	d161      	bne.n	800f36e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	699a      	ldr	r2, [r3, #24]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	f022 0210 	bic.w	r2, r2, #16
 800f2b8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800f2ba:	6a3b      	ldr	r3, [r7, #32]
 800f2bc:	6a1b      	ldr	r3, [r3, #32]
 800f2be:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800f2c0:	69bb      	ldr	r3, [r7, #24]
 800f2c2:	f003 020f 	and.w	r2, r3, #15
 800f2c6:	4613      	mov	r3, r2
 800f2c8:	00db      	lsls	r3, r3, #3
 800f2ca:	4413      	add	r3, r2
 800f2cc:	009b      	lsls	r3, r3, #2
 800f2ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f2d2:	687a      	ldr	r2, [r7, #4]
 800f2d4:	4413      	add	r3, r2
 800f2d6:	3304      	adds	r3, #4
 800f2d8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800f2da:	69bb      	ldr	r3, [r7, #24]
 800f2dc:	0c5b      	lsrs	r3, r3, #17
 800f2de:	f003 030f 	and.w	r3, r3, #15
 800f2e2:	2b02      	cmp	r3, #2
 800f2e4:	d124      	bne.n	800f330 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800f2e6:	69ba      	ldr	r2, [r7, #24]
 800f2e8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800f2ec:	4013      	ands	r3, r2
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d035      	beq.n	800f35e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800f2f6:	69bb      	ldr	r3, [r7, #24]
 800f2f8:	091b      	lsrs	r3, r3, #4
 800f2fa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800f2fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f300:	b29b      	uxth	r3, r3
 800f302:	461a      	mov	r2, r3
 800f304:	6a38      	ldr	r0, [r7, #32]
 800f306:	f008 f84b 	bl	80173a0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f30a:	697b      	ldr	r3, [r7, #20]
 800f30c:	691a      	ldr	r2, [r3, #16]
 800f30e:	69bb      	ldr	r3, [r7, #24]
 800f310:	091b      	lsrs	r3, r3, #4
 800f312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f316:	441a      	add	r2, r3
 800f318:	697b      	ldr	r3, [r7, #20]
 800f31a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f31c:	697b      	ldr	r3, [r7, #20]
 800f31e:	6a1a      	ldr	r2, [r3, #32]
 800f320:	69bb      	ldr	r3, [r7, #24]
 800f322:	091b      	lsrs	r3, r3, #4
 800f324:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f328:	441a      	add	r2, r3
 800f32a:	697b      	ldr	r3, [r7, #20]
 800f32c:	621a      	str	r2, [r3, #32]
 800f32e:	e016      	b.n	800f35e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800f330:	69bb      	ldr	r3, [r7, #24]
 800f332:	0c5b      	lsrs	r3, r3, #17
 800f334:	f003 030f 	and.w	r3, r3, #15
 800f338:	2b06      	cmp	r3, #6
 800f33a:	d110      	bne.n	800f35e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f342:	2208      	movs	r2, #8
 800f344:	4619      	mov	r1, r3
 800f346:	6a38      	ldr	r0, [r7, #32]
 800f348:	f008 f82a 	bl	80173a0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	6a1a      	ldr	r2, [r3, #32]
 800f350:	69bb      	ldr	r3, [r7, #24]
 800f352:	091b      	lsrs	r3, r3, #4
 800f354:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f358:	441a      	add	r2, r3
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	699a      	ldr	r2, [r3, #24]
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	f042 0210 	orr.w	r2, r2, #16
 800f36c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	4618      	mov	r0, r3
 800f374:	f008 f9a8 	bl	80176c8 <USB_ReadInterrupts>
 800f378:	4603      	mov	r3, r0
 800f37a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f37e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f382:	f040 80a7 	bne.w	800f4d4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800f386:	2300      	movs	r3, #0
 800f388:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	4618      	mov	r0, r3
 800f390:	f008 f9ad 	bl	80176ee <USB_ReadDevAllOutEpInterrupt>
 800f394:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800f396:	e099      	b.n	800f4cc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800f398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f39a:	f003 0301 	and.w	r3, r3, #1
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	f000 808e 	beq.w	800f4c0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3aa:	b2d2      	uxtb	r2, r2
 800f3ac:	4611      	mov	r1, r2
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f008 f9d1 	bl	8017756 <USB_ReadDevOutEPInterrupt>
 800f3b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	f003 0301 	and.w	r3, r3, #1
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d00c      	beq.n	800f3da <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800f3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c2:	015a      	lsls	r2, r3, #5
 800f3c4:	69fb      	ldr	r3, [r7, #28]
 800f3c6:	4413      	add	r3, r2
 800f3c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3cc:	461a      	mov	r2, r3
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800f3d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f000 fe95 	bl	8010104 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800f3da:	693b      	ldr	r3, [r7, #16]
 800f3dc:	f003 0308 	and.w	r3, r3, #8
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d00c      	beq.n	800f3fe <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800f3e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3e6:	015a      	lsls	r2, r3, #5
 800f3e8:	69fb      	ldr	r3, [r7, #28]
 800f3ea:	4413      	add	r3, r2
 800f3ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f3f0:	461a      	mov	r2, r3
 800f3f2:	2308      	movs	r3, #8
 800f3f4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800f3f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f000 fed1 	bl	80101a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800f3fe:	693b      	ldr	r3, [r7, #16]
 800f400:	f003 0310 	and.w	r3, r3, #16
 800f404:	2b00      	cmp	r3, #0
 800f406:	d008      	beq.n	800f41a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800f408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f40a:	015a      	lsls	r2, r3, #5
 800f40c:	69fb      	ldr	r3, [r7, #28]
 800f40e:	4413      	add	r3, r2
 800f410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f414:	461a      	mov	r2, r3
 800f416:	2310      	movs	r3, #16
 800f418:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800f41a:	693b      	ldr	r3, [r7, #16]
 800f41c:	f003 0302 	and.w	r3, r3, #2
 800f420:	2b00      	cmp	r3, #0
 800f422:	d030      	beq.n	800f486 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800f424:	6a3b      	ldr	r3, [r7, #32]
 800f426:	695b      	ldr	r3, [r3, #20]
 800f428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f42c:	2b80      	cmp	r3, #128	; 0x80
 800f42e:	d109      	bne.n	800f444 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800f430:	69fb      	ldr	r3, [r7, #28]
 800f432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f436:	685b      	ldr	r3, [r3, #4]
 800f438:	69fa      	ldr	r2, [r7, #28]
 800f43a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f43e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f442:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800f444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f446:	4613      	mov	r3, r2
 800f448:	00db      	lsls	r3, r3, #3
 800f44a:	4413      	add	r3, r2
 800f44c:	009b      	lsls	r3, r3, #2
 800f44e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f452:	687a      	ldr	r2, [r7, #4]
 800f454:	4413      	add	r3, r2
 800f456:	3304      	adds	r3, #4
 800f458:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	78db      	ldrb	r3, [r3, #3]
 800f45e:	2b01      	cmp	r3, #1
 800f460:	d108      	bne.n	800f474 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800f462:	697b      	ldr	r3, [r7, #20]
 800f464:	2200      	movs	r2, #0
 800f466:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800f468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46a:	b2db      	uxtb	r3, r3
 800f46c:	4619      	mov	r1, r3
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f00a fa0e 	bl	8019890 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800f474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f476:	015a      	lsls	r2, r3, #5
 800f478:	69fb      	ldr	r3, [r7, #28]
 800f47a:	4413      	add	r3, r2
 800f47c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f480:	461a      	mov	r2, r3
 800f482:	2302      	movs	r3, #2
 800f484:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	f003 0320 	and.w	r3, r3, #32
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d008      	beq.n	800f4a2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f492:	015a      	lsls	r2, r3, #5
 800f494:	69fb      	ldr	r3, [r7, #28]
 800f496:	4413      	add	r3, r2
 800f498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f49c:	461a      	mov	r2, r3
 800f49e:	2320      	movs	r3, #32
 800f4a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800f4a2:	693b      	ldr	r3, [r7, #16]
 800f4a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d009      	beq.n	800f4c0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800f4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ae:	015a      	lsls	r2, r3, #5
 800f4b0:	69fb      	ldr	r3, [r7, #28]
 800f4b2:	4413      	add	r3, r2
 800f4b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f4be:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800f4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c2:	3301      	adds	r3, #1
 800f4c4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800f4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c8:	085b      	lsrs	r3, r3, #1
 800f4ca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800f4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	f47f af62 	bne.w	800f398 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	4618      	mov	r0, r3
 800f4da:	f008 f8f5 	bl	80176c8 <USB_ReadInterrupts>
 800f4de:	4603      	mov	r3, r0
 800f4e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f4e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f4e8:	f040 80a4 	bne.w	800f634 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f008 f916 	bl	8017722 <USB_ReadDevAllInEpInterrupt>
 800f4f6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800f4fc:	e096      	b.n	800f62c <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800f4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f500:	f003 0301 	and.w	r3, r3, #1
 800f504:	2b00      	cmp	r3, #0
 800f506:	f000 808b 	beq.w	800f620 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f510:	b2d2      	uxtb	r2, r2
 800f512:	4611      	mov	r1, r2
 800f514:	4618      	mov	r0, r3
 800f516:	f008 f93c 	bl	8017792 <USB_ReadDevInEPInterrupt>
 800f51a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800f51c:	693b      	ldr	r3, [r7, #16]
 800f51e:	f003 0301 	and.w	r3, r3, #1
 800f522:	2b00      	cmp	r3, #0
 800f524:	d020      	beq.n	800f568 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800f526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f528:	f003 030f 	and.w	r3, r3, #15
 800f52c:	2201      	movs	r2, #1
 800f52e:	fa02 f303 	lsl.w	r3, r2, r3
 800f532:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800f534:	69fb      	ldr	r3, [r7, #28]
 800f536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f53a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	43db      	mvns	r3, r3
 800f540:	69f9      	ldr	r1, [r7, #28]
 800f542:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f546:	4013      	ands	r3, r2
 800f548:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800f54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f54c:	015a      	lsls	r2, r3, #5
 800f54e:	69fb      	ldr	r3, [r7, #28]
 800f550:	4413      	add	r3, r2
 800f552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f556:	461a      	mov	r2, r3
 800f558:	2301      	movs	r3, #1
 800f55a:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800f55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55e:	b2db      	uxtb	r3, r3
 800f560:	4619      	mov	r1, r3
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f00a f8ff 	bl	8019766 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800f568:	693b      	ldr	r3, [r7, #16]
 800f56a:	f003 0308 	and.w	r3, r3, #8
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d008      	beq.n	800f584 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800f572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f574:	015a      	lsls	r2, r3, #5
 800f576:	69fb      	ldr	r3, [r7, #28]
 800f578:	4413      	add	r3, r2
 800f57a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f57e:	461a      	mov	r2, r3
 800f580:	2308      	movs	r3, #8
 800f582:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800f584:	693b      	ldr	r3, [r7, #16]
 800f586:	f003 0310 	and.w	r3, r3, #16
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d008      	beq.n	800f5a0 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800f58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f590:	015a      	lsls	r2, r3, #5
 800f592:	69fb      	ldr	r3, [r7, #28]
 800f594:	4413      	add	r3, r2
 800f596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f59a:	461a      	mov	r2, r3
 800f59c:	2310      	movs	r3, #16
 800f59e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800f5a0:	693b      	ldr	r3, [r7, #16]
 800f5a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d008      	beq.n	800f5bc <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800f5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ac:	015a      	lsls	r2, r3, #5
 800f5ae:	69fb      	ldr	r3, [r7, #28]
 800f5b0:	4413      	add	r3, r2
 800f5b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5b6:	461a      	mov	r2, r3
 800f5b8:	2340      	movs	r3, #64	; 0x40
 800f5ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800f5bc:	693b      	ldr	r3, [r7, #16]
 800f5be:	f003 0302 	and.w	r3, r3, #2
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d023      	beq.n	800f60e <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800f5c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f5c8:	6a38      	ldr	r0, [r7, #32]
 800f5ca:	f007 f903 	bl	80167d4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800f5ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5d0:	4613      	mov	r3, r2
 800f5d2:	00db      	lsls	r3, r3, #3
 800f5d4:	4413      	add	r3, r2
 800f5d6:	009b      	lsls	r3, r3, #2
 800f5d8:	3338      	adds	r3, #56	; 0x38
 800f5da:	687a      	ldr	r2, [r7, #4]
 800f5dc:	4413      	add	r3, r2
 800f5de:	3304      	adds	r3, #4
 800f5e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	78db      	ldrb	r3, [r3, #3]
 800f5e6:	2b01      	cmp	r3, #1
 800f5e8:	d108      	bne.n	800f5fc <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800f5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f2:	b2db      	uxtb	r3, r3
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f00a f95c 	bl	80198b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800f5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fe:	015a      	lsls	r2, r3, #5
 800f600:	69fb      	ldr	r3, [r7, #28]
 800f602:	4413      	add	r3, r2
 800f604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f608:	461a      	mov	r2, r3
 800f60a:	2302      	movs	r3, #2
 800f60c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f614:	2b00      	cmp	r3, #0
 800f616:	d003      	beq.n	800f620 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800f618:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f61a:	6878      	ldr	r0, [r7, #4]
 800f61c:	f000 fcea 	bl	800fff4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800f620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f622:	3301      	adds	r3, #1
 800f624:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800f626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f628:	085b      	lsrs	r3, r3, #1
 800f62a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800f62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f62e:	2b00      	cmp	r3, #0
 800f630:	f47f af65 	bne.w	800f4fe <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4618      	mov	r0, r3
 800f63a:	f008 f845 	bl	80176c8 <USB_ReadInterrupts>
 800f63e:	4603      	mov	r3, r0
 800f640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f648:	d122      	bne.n	800f690 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800f64a:	69fb      	ldr	r3, [r7, #28]
 800f64c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f650:	685b      	ldr	r3, [r3, #4]
 800f652:	69fa      	ldr	r2, [r7, #28]
 800f654:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f658:	f023 0301 	bic.w	r3, r3, #1
 800f65c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800f664:	2b01      	cmp	r3, #1
 800f666:	d108      	bne.n	800f67a <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2200      	movs	r2, #0
 800f66c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800f670:	2100      	movs	r1, #0
 800f672:	6878      	ldr	r0, [r7, #4]
 800f674:	f00a fb90 	bl	8019d98 <HAL_PCDEx_LPM_Callback>
 800f678:	e002      	b.n	800f680 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f00a f8e0 	bl	8019840 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	695a      	ldr	r2, [r3, #20]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800f68e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	4618      	mov	r0, r3
 800f696:	f008 f817 	bl	80176c8 <USB_ReadInterrupts>
 800f69a:	4603      	mov	r3, r0
 800f69c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f6a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f6a4:	d112      	bne.n	800f6cc <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800f6a6:	69fb      	ldr	r3, [r7, #28]
 800f6a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6ac:	689b      	ldr	r3, [r3, #8]
 800f6ae:	f003 0301 	and.w	r3, r3, #1
 800f6b2:	2b01      	cmp	r3, #1
 800f6b4:	d102      	bne.n	800f6bc <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f00a f89c 	bl	80197f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	695a      	ldr	r2, [r3, #20]
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800f6ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f007 fff9 	bl	80176c8 <USB_ReadInterrupts>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f6dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f6e0:	d121      	bne.n	800f726 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	695a      	ldr	r2, [r3, #20]
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800f6f0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d111      	bne.n	800f720 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2201      	movs	r2, #1
 800f700:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f70a:	089b      	lsrs	r3, r3, #2
 800f70c:	f003 020f 	and.w	r2, r3, #15
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800f716:	2101      	movs	r1, #1
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f00a fb3d 	bl	8019d98 <HAL_PCDEx_LPM_Callback>
 800f71e:	e002      	b.n	800f726 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f00a f867 	bl	80197f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	4618      	mov	r0, r3
 800f72c:	f007 ffcc 	bl	80176c8 <USB_ReadInterrupts>
 800f730:	4603      	mov	r3, r0
 800f732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f73a:	f040 80b5 	bne.w	800f8a8 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800f73e:	69fb      	ldr	r3, [r7, #28]
 800f740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	69fa      	ldr	r2, [r7, #28]
 800f748:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f74c:	f023 0301 	bic.w	r3, r3, #1
 800f750:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	2110      	movs	r1, #16
 800f758:	4618      	mov	r0, r3
 800f75a:	f007 f83b 	bl	80167d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f75e:	2300      	movs	r3, #0
 800f760:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f762:	e046      	b.n	800f7f2 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800f764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f766:	015a      	lsls	r2, r3, #5
 800f768:	69fb      	ldr	r3, [r7, #28]
 800f76a:	4413      	add	r3, r2
 800f76c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f770:	461a      	mov	r2, r3
 800f772:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f776:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f77a:	015a      	lsls	r2, r3, #5
 800f77c:	69fb      	ldr	r3, [r7, #28]
 800f77e:	4413      	add	r3, r2
 800f780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f788:	0151      	lsls	r1, r2, #5
 800f78a:	69fa      	ldr	r2, [r7, #28]
 800f78c:	440a      	add	r2, r1
 800f78e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f792:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f796:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800f798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f79a:	015a      	lsls	r2, r3, #5
 800f79c:	69fb      	ldr	r3, [r7, #28]
 800f79e:	4413      	add	r3, r2
 800f7a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f7aa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ae:	015a      	lsls	r2, r3, #5
 800f7b0:	69fb      	ldr	r3, [r7, #28]
 800f7b2:	4413      	add	r3, r2
 800f7b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7bc:	0151      	lsls	r1, r2, #5
 800f7be:	69fa      	ldr	r2, [r7, #28]
 800f7c0:	440a      	add	r2, r1
 800f7c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f7ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ce:	015a      	lsls	r2, r3, #5
 800f7d0:	69fb      	ldr	r3, [r7, #28]
 800f7d2:	4413      	add	r3, r2
 800f7d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7dc:	0151      	lsls	r1, r2, #5
 800f7de:	69fa      	ldr	r2, [r7, #28]
 800f7e0:	440a      	add	r2, r1
 800f7e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f7ea:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	685b      	ldr	r3, [r3, #4]
 800f7f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	d3b3      	bcc.n	800f764 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800f7fc:	69fb      	ldr	r3, [r7, #28]
 800f7fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f802:	69db      	ldr	r3, [r3, #28]
 800f804:	69fa      	ldr	r2, [r7, #28]
 800f806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f80a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800f80e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f814:	2b00      	cmp	r3, #0
 800f816:	d016      	beq.n	800f846 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800f818:	69fb      	ldr	r3, [r7, #28]
 800f81a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f81e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f822:	69fa      	ldr	r2, [r7, #28]
 800f824:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f828:	f043 030b 	orr.w	r3, r3, #11
 800f82c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800f830:	69fb      	ldr	r3, [r7, #28]
 800f832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f838:	69fa      	ldr	r2, [r7, #28]
 800f83a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f83e:	f043 030b 	orr.w	r3, r3, #11
 800f842:	6453      	str	r3, [r2, #68]	; 0x44
 800f844:	e015      	b.n	800f872 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800f846:	69fb      	ldr	r3, [r7, #28]
 800f848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f84c:	695b      	ldr	r3, [r3, #20]
 800f84e:	69fa      	ldr	r2, [r7, #28]
 800f850:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f854:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f858:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800f85c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800f85e:	69fb      	ldr	r3, [r7, #28]
 800f860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f864:	691b      	ldr	r3, [r3, #16]
 800f866:	69fa      	ldr	r2, [r7, #28]
 800f868:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f86c:	f043 030b 	orr.w	r3, r3, #11
 800f870:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800f872:	69fb      	ldr	r3, [r7, #28]
 800f874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	69fa      	ldr	r2, [r7, #28]
 800f87c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f880:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f884:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681a      	ldr	r2, [r3, #0]
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f890:	4619      	mov	r1, r3
 800f892:	4610      	mov	r0, r2
 800f894:	f007 ffdc 	bl	8017850 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	695a      	ldr	r2, [r3, #20]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800f8a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f007 ff0b 	bl	80176c8 <USB_ReadInterrupts>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f8b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f8bc:	d124      	bne.n	800f908 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f007 ffa1 	bl	801780a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f006 fffe 	bl	80168ce <USB_GetDevSpeed>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681c      	ldr	r4, [r3, #0]
 800f8de:	f001 fc87 	bl	80111f0 <HAL_RCC_GetHCLKFreq>
 800f8e2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800f8e8:	b2db      	uxtb	r3, r3
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	4620      	mov	r0, r4
 800f8ee:	f006 fd1b 	bl	8016328 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f009 ff5f 	bl	80197b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	695a      	ldr	r2, [r3, #20]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800f906:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	4618      	mov	r0, r3
 800f90e:	f007 fedb 	bl	80176c8 <USB_ReadInterrupts>
 800f912:	4603      	mov	r3, r0
 800f914:	f003 0308 	and.w	r3, r3, #8
 800f918:	2b08      	cmp	r3, #8
 800f91a:	d10a      	bne.n	800f932 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f009 ff3c 	bl	801979a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	695a      	ldr	r2, [r3, #20]
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	f002 0208 	and.w	r2, r2, #8
 800f930:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	4618      	mov	r0, r3
 800f938:	f007 fec6 	bl	80176c8 <USB_ReadInterrupts>
 800f93c:	4603      	mov	r3, r0
 800f93e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f942:	2b80      	cmp	r3, #128	; 0x80
 800f944:	d122      	bne.n	800f98c <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800f946:	6a3b      	ldr	r3, [r7, #32]
 800f948:	699b      	ldr	r3, [r3, #24]
 800f94a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f94e:	6a3b      	ldr	r3, [r7, #32]
 800f950:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800f952:	2301      	movs	r3, #1
 800f954:	627b      	str	r3, [r7, #36]	; 0x24
 800f956:	e014      	b.n	800f982 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800f958:	6879      	ldr	r1, [r7, #4]
 800f95a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f95c:	4613      	mov	r3, r2
 800f95e:	00db      	lsls	r3, r3, #3
 800f960:	4413      	add	r3, r2
 800f962:	009b      	lsls	r3, r3, #2
 800f964:	440b      	add	r3, r1
 800f966:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800f96a:	781b      	ldrb	r3, [r3, #0]
 800f96c:	2b01      	cmp	r3, #1
 800f96e:	d105      	bne.n	800f97c <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800f970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f972:	b2db      	uxtb	r3, r3
 800f974:	4619      	mov	r1, r3
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f000 fb0b 	bl	800ff92 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800f97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f97e:	3301      	adds	r3, #1
 800f980:	627b      	str	r3, [r7, #36]	; 0x24
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	685b      	ldr	r3, [r3, #4]
 800f986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f988:	429a      	cmp	r2, r3
 800f98a:	d3e5      	bcc.n	800f958 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	4618      	mov	r0, r3
 800f992:	f007 fe99 	bl	80176c8 <USB_ReadInterrupts>
 800f996:	4603      	mov	r3, r0
 800f998:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f99c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f9a0:	d13b      	bne.n	800fa1a <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	627b      	str	r3, [r7, #36]	; 0x24
 800f9a6:	e02b      	b.n	800fa00 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800f9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9aa:	015a      	lsls	r2, r3, #5
 800f9ac:	69fb      	ldr	r3, [r7, #28]
 800f9ae:	4413      	add	r3, r2
 800f9b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800f9b8:	6879      	ldr	r1, [r7, #4]
 800f9ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9bc:	4613      	mov	r3, r2
 800f9be:	00db      	lsls	r3, r3, #3
 800f9c0:	4413      	add	r3, r2
 800f9c2:	009b      	lsls	r3, r3, #2
 800f9c4:	440b      	add	r3, r1
 800f9c6:	3340      	adds	r3, #64	; 0x40
 800f9c8:	781b      	ldrb	r3, [r3, #0]
 800f9ca:	2b01      	cmp	r3, #1
 800f9cc:	d115      	bne.n	800f9fa <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800f9ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	da12      	bge.n	800f9fa <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800f9d4:	6879      	ldr	r1, [r7, #4]
 800f9d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9d8:	4613      	mov	r3, r2
 800f9da:	00db      	lsls	r3, r3, #3
 800f9dc:	4413      	add	r3, r2
 800f9de:	009b      	lsls	r3, r3, #2
 800f9e0:	440b      	add	r3, r1
 800f9e2:	333f      	adds	r3, #63	; 0x3f
 800f9e4:	2201      	movs	r2, #1
 800f9e6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800f9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ea:	b2db      	uxtb	r3, r3
 800f9ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f9f0:	b2db      	uxtb	r3, r3
 800f9f2:	4619      	mov	r1, r3
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f000 facc 	bl	800ff92 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800f9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9fc:	3301      	adds	r3, #1
 800f9fe:	627b      	str	r3, [r7, #36]	; 0x24
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	685b      	ldr	r3, [r3, #4]
 800fa04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa06:	429a      	cmp	r2, r3
 800fa08:	d3ce      	bcc.n	800f9a8 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	695a      	ldr	r2, [r3, #20]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800fa18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f007 fe52 	bl	80176c8 <USB_ReadInterrupts>
 800fa24:	4603      	mov	r3, r0
 800fa26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fa2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fa2e:	d155      	bne.n	800fadc <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fa30:	2301      	movs	r3, #1
 800fa32:	627b      	str	r3, [r7, #36]	; 0x24
 800fa34:	e045      	b.n	800fac2 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800fa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa38:	015a      	lsls	r2, r3, #5
 800fa3a:	69fb      	ldr	r3, [r7, #28]
 800fa3c:	4413      	add	r3, r2
 800fa3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800fa46:	6879      	ldr	r1, [r7, #4]
 800fa48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa4a:	4613      	mov	r3, r2
 800fa4c:	00db      	lsls	r3, r3, #3
 800fa4e:	4413      	add	r3, r2
 800fa50:	009b      	lsls	r3, r3, #2
 800fa52:	440b      	add	r3, r1
 800fa54:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800fa58:	781b      	ldrb	r3, [r3, #0]
 800fa5a:	2b01      	cmp	r3, #1
 800fa5c:	d12e      	bne.n	800fabc <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800fa5e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	da2b      	bge.n	800fabc <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800fa64:	69bb      	ldr	r3, [r7, #24]
 800fa66:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800fa70:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800fa74:	429a      	cmp	r2, r3
 800fa76:	d121      	bne.n	800fabc <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800fa78:	6879      	ldr	r1, [r7, #4]
 800fa7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa7c:	4613      	mov	r3, r2
 800fa7e:	00db      	lsls	r3, r3, #3
 800fa80:	4413      	add	r3, r2
 800fa82:	009b      	lsls	r3, r3, #2
 800fa84:	440b      	add	r3, r1
 800fa86:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800fa8a:	2201      	movs	r2, #1
 800fa8c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800fa8e:	6a3b      	ldr	r3, [r7, #32]
 800fa90:	699b      	ldr	r3, [r3, #24]
 800fa92:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fa96:	6a3b      	ldr	r3, [r7, #32]
 800fa98:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800fa9a:	6a3b      	ldr	r3, [r7, #32]
 800fa9c:	695b      	ldr	r3, [r3, #20]
 800fa9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d10a      	bne.n	800fabc <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800faa6:	69fb      	ldr	r3, [r7, #28]
 800faa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faac:	685b      	ldr	r3, [r3, #4]
 800faae:	69fa      	ldr	r2, [r7, #28]
 800fab0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fab4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fab8:	6053      	str	r3, [r2, #4]
            break;
 800faba:	e007      	b.n	800facc <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fabe:	3301      	adds	r3, #1
 800fac0:	627b      	str	r3, [r7, #36]	; 0x24
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	685b      	ldr	r3, [r3, #4]
 800fac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fac8:	429a      	cmp	r2, r3
 800faca:	d3b4      	bcc.n	800fa36 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	695a      	ldr	r2, [r3, #20]
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800fada:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	4618      	mov	r0, r3
 800fae2:	f007 fdf1 	bl	80176c8 <USB_ReadInterrupts>
 800fae6:	4603      	mov	r3, r0
 800fae8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800faec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800faf0:	d10a      	bne.n	800fb08 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f009 fef0 	bl	80198d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	695a      	ldr	r2, [r3, #20]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800fb06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f007 fddb 	bl	80176c8 <USB_ReadInterrupts>
 800fb12:	4603      	mov	r3, r0
 800fb14:	f003 0304 	and.w	r3, r3, #4
 800fb18:	2b04      	cmp	r3, #4
 800fb1a:	d115      	bne.n	800fb48 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	685b      	ldr	r3, [r3, #4]
 800fb22:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800fb24:	69bb      	ldr	r3, [r7, #24]
 800fb26:	f003 0304 	and.w	r3, r3, #4
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d002      	beq.n	800fb34 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f009 fee0 	bl	80198f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	6859      	ldr	r1, [r3, #4]
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	69ba      	ldr	r2, [r7, #24]
 800fb40:	430a      	orrs	r2, r1
 800fb42:	605a      	str	r2, [r3, #4]
 800fb44:	e000      	b.n	800fb48 <HAL_PCD_IRQHandler+0x920>
      return;
 800fb46:	bf00      	nop
    }
  }
}
 800fb48:	3734      	adds	r7, #52	; 0x34
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd90      	pop	{r4, r7, pc}

0800fb4e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800fb4e:	b580      	push	{r7, lr}
 800fb50:	b082      	sub	sp, #8
 800fb52:	af00      	add	r7, sp, #0
 800fb54:	6078      	str	r0, [r7, #4]
 800fb56:	460b      	mov	r3, r1
 800fb58:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800fb60:	2b01      	cmp	r3, #1
 800fb62:	d101      	bne.n	800fb68 <HAL_PCD_SetAddress+0x1a>
 800fb64:	2302      	movs	r3, #2
 800fb66:	e013      	b.n	800fb90 <HAL_PCD_SetAddress+0x42>
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	78fa      	ldrb	r2, [r7, #3]
 800fb74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	78fa      	ldrb	r2, [r7, #3]
 800fb7e:	4611      	mov	r1, r2
 800fb80:	4618      	mov	r0, r3
 800fb82:	f007 fd39 	bl	80175f8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	2200      	movs	r2, #0
 800fb8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800fb8e:	2300      	movs	r3, #0
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3708      	adds	r7, #8
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b084      	sub	sp, #16
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	4608      	mov	r0, r1
 800fba2:	4611      	mov	r1, r2
 800fba4:	461a      	mov	r2, r3
 800fba6:	4603      	mov	r3, r0
 800fba8:	70fb      	strb	r3, [r7, #3]
 800fbaa:	460b      	mov	r3, r1
 800fbac:	803b      	strh	r3, [r7, #0]
 800fbae:	4613      	mov	r3, r2
 800fbb0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800fbb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	da0f      	bge.n	800fbde <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fbbe:	78fb      	ldrb	r3, [r7, #3]
 800fbc0:	f003 020f 	and.w	r2, r3, #15
 800fbc4:	4613      	mov	r3, r2
 800fbc6:	00db      	lsls	r3, r3, #3
 800fbc8:	4413      	add	r3, r2
 800fbca:	009b      	lsls	r3, r3, #2
 800fbcc:	3338      	adds	r3, #56	; 0x38
 800fbce:	687a      	ldr	r2, [r7, #4]
 800fbd0:	4413      	add	r3, r2
 800fbd2:	3304      	adds	r3, #4
 800fbd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2201      	movs	r2, #1
 800fbda:	705a      	strb	r2, [r3, #1]
 800fbdc:	e00f      	b.n	800fbfe <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fbde:	78fb      	ldrb	r3, [r7, #3]
 800fbe0:	f003 020f 	and.w	r2, r3, #15
 800fbe4:	4613      	mov	r3, r2
 800fbe6:	00db      	lsls	r3, r3, #3
 800fbe8:	4413      	add	r3, r2
 800fbea:	009b      	lsls	r3, r3, #2
 800fbec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800fbf0:	687a      	ldr	r2, [r7, #4]
 800fbf2:	4413      	add	r3, r2
 800fbf4:	3304      	adds	r3, #4
 800fbf6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800fbfe:	78fb      	ldrb	r3, [r7, #3]
 800fc00:	f003 030f 	and.w	r3, r3, #15
 800fc04:	b2da      	uxtb	r2, r3
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800fc0a:	883a      	ldrh	r2, [r7, #0]
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	78ba      	ldrb	r2, [r7, #2]
 800fc14:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	785b      	ldrb	r3, [r3, #1]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d004      	beq.n	800fc28 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	b29a      	uxth	r2, r3
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800fc28:	78bb      	ldrb	r3, [r7, #2]
 800fc2a:	2b02      	cmp	r3, #2
 800fc2c:	d102      	bne.n	800fc34 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	2200      	movs	r2, #0
 800fc32:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800fc3a:	2b01      	cmp	r3, #1
 800fc3c:	d101      	bne.n	800fc42 <HAL_PCD_EP_Open+0xaa>
 800fc3e:	2302      	movs	r3, #2
 800fc40:	e00e      	b.n	800fc60 <HAL_PCD_EP_Open+0xc8>
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2201      	movs	r2, #1
 800fc46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	68f9      	ldr	r1, [r7, #12]
 800fc50:	4618      	mov	r0, r3
 800fc52:	f006 fe5b 	bl	801690c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2200      	movs	r2, #0
 800fc5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800fc5e:	7afb      	ldrb	r3, [r7, #11]
}
 800fc60:	4618      	mov	r0, r3
 800fc62:	3710      	adds	r7, #16
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}

0800fc68 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b084      	sub	sp, #16
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	460b      	mov	r3, r1
 800fc72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800fc74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	da0f      	bge.n	800fc9c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fc7c:	78fb      	ldrb	r3, [r7, #3]
 800fc7e:	f003 020f 	and.w	r2, r3, #15
 800fc82:	4613      	mov	r3, r2
 800fc84:	00db      	lsls	r3, r3, #3
 800fc86:	4413      	add	r3, r2
 800fc88:	009b      	lsls	r3, r3, #2
 800fc8a:	3338      	adds	r3, #56	; 0x38
 800fc8c:	687a      	ldr	r2, [r7, #4]
 800fc8e:	4413      	add	r3, r2
 800fc90:	3304      	adds	r3, #4
 800fc92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	2201      	movs	r2, #1
 800fc98:	705a      	strb	r2, [r3, #1]
 800fc9a:	e00f      	b.n	800fcbc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fc9c:	78fb      	ldrb	r3, [r7, #3]
 800fc9e:	f003 020f 	and.w	r2, r3, #15
 800fca2:	4613      	mov	r3, r2
 800fca4:	00db      	lsls	r3, r3, #3
 800fca6:	4413      	add	r3, r2
 800fca8:	009b      	lsls	r3, r3, #2
 800fcaa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800fcae:	687a      	ldr	r2, [r7, #4]
 800fcb0:	4413      	add	r3, r2
 800fcb2:	3304      	adds	r3, #4
 800fcb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	2200      	movs	r2, #0
 800fcba:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800fcbc:	78fb      	ldrb	r3, [r7, #3]
 800fcbe:	f003 030f 	and.w	r3, r3, #15
 800fcc2:	b2da      	uxtb	r2, r3
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800fcce:	2b01      	cmp	r3, #1
 800fcd0:	d101      	bne.n	800fcd6 <HAL_PCD_EP_Close+0x6e>
 800fcd2:	2302      	movs	r3, #2
 800fcd4:	e00e      	b.n	800fcf4 <HAL_PCD_EP_Close+0x8c>
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	2201      	movs	r2, #1
 800fcda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	68f9      	ldr	r1, [r7, #12]
 800fce4:	4618      	mov	r0, r3
 800fce6:	f006 fe99 	bl	8016a1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2200      	movs	r2, #0
 800fcee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800fcf2:	2300      	movs	r3, #0
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3710      	adds	r7, #16
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}

0800fcfc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b086      	sub	sp, #24
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	60f8      	str	r0, [r7, #12]
 800fd04:	607a      	str	r2, [r7, #4]
 800fd06:	603b      	str	r3, [r7, #0]
 800fd08:	460b      	mov	r3, r1
 800fd0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fd0c:	7afb      	ldrb	r3, [r7, #11]
 800fd0e:	f003 020f 	and.w	r2, r3, #15
 800fd12:	4613      	mov	r3, r2
 800fd14:	00db      	lsls	r3, r3, #3
 800fd16:	4413      	add	r3, r2
 800fd18:	009b      	lsls	r3, r3, #2
 800fd1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800fd1e:	68fa      	ldr	r2, [r7, #12]
 800fd20:	4413      	add	r3, r2
 800fd22:	3304      	adds	r3, #4
 800fd24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800fd26:	697b      	ldr	r3, [r7, #20]
 800fd28:	687a      	ldr	r2, [r7, #4]
 800fd2a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800fd2c:	697b      	ldr	r3, [r7, #20]
 800fd2e:	683a      	ldr	r2, [r7, #0]
 800fd30:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	2200      	movs	r2, #0
 800fd36:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800fd38:	697b      	ldr	r3, [r7, #20]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fd3e:	7afb      	ldrb	r3, [r7, #11]
 800fd40:	f003 030f 	and.w	r3, r3, #15
 800fd44:	b2da      	uxtb	r2, r3
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800fd4a:	7afb      	ldrb	r3, [r7, #11]
 800fd4c:	f003 030f 	and.w	r3, r3, #15
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d106      	bne.n	800fd62 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	6979      	ldr	r1, [r7, #20]
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f007 f91a 	bl	8016f94 <USB_EP0StartXfer>
 800fd60:	e005      	b.n	800fd6e <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	6979      	ldr	r1, [r7, #20]
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f006 ff33 	bl	8016bd4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800fd6e:	2300      	movs	r3, #0
}
 800fd70:	4618      	mov	r0, r3
 800fd72:	3718      	adds	r7, #24
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd80      	pop	{r7, pc}

0800fd78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fd78:	b480      	push	{r7}
 800fd7a:	b083      	sub	sp, #12
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	460b      	mov	r3, r1
 800fd82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800fd84:	78fb      	ldrb	r3, [r7, #3]
 800fd86:	f003 020f 	and.w	r2, r3, #15
 800fd8a:	6879      	ldr	r1, [r7, #4]
 800fd8c:	4613      	mov	r3, r2
 800fd8e:	00db      	lsls	r3, r3, #3
 800fd90:	4413      	add	r3, r2
 800fd92:	009b      	lsls	r3, r3, #2
 800fd94:	440b      	add	r3, r1
 800fd96:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800fd9a:	681b      	ldr	r3, [r3, #0]
}
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	370c      	adds	r7, #12
 800fda0:	46bd      	mov	sp, r7
 800fda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda6:	4770      	bx	lr

0800fda8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b086      	sub	sp, #24
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	60f8      	str	r0, [r7, #12]
 800fdb0:	607a      	str	r2, [r7, #4]
 800fdb2:	603b      	str	r3, [r7, #0]
 800fdb4:	460b      	mov	r3, r1
 800fdb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fdb8:	7afb      	ldrb	r3, [r7, #11]
 800fdba:	f003 020f 	and.w	r2, r3, #15
 800fdbe:	4613      	mov	r3, r2
 800fdc0:	00db      	lsls	r3, r3, #3
 800fdc2:	4413      	add	r3, r2
 800fdc4:	009b      	lsls	r3, r3, #2
 800fdc6:	3338      	adds	r3, #56	; 0x38
 800fdc8:	68fa      	ldr	r2, [r7, #12]
 800fdca:	4413      	add	r3, r2
 800fdcc:	3304      	adds	r3, #4
 800fdce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800fdd0:	697b      	ldr	r3, [r7, #20]
 800fdd2:	687a      	ldr	r2, [r7, #4]
 800fdd4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	683a      	ldr	r2, [r7, #0]
 800fdda:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800fddc:	697b      	ldr	r3, [r7, #20]
 800fdde:	2200      	movs	r2, #0
 800fde0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	2201      	movs	r2, #1
 800fde6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fde8:	7afb      	ldrb	r3, [r7, #11]
 800fdea:	f003 030f 	and.w	r3, r3, #15
 800fdee:	b2da      	uxtb	r2, r3
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800fdf4:	7afb      	ldrb	r3, [r7, #11]
 800fdf6:	f003 030f 	and.w	r3, r3, #15
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d106      	bne.n	800fe0c <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	6979      	ldr	r1, [r7, #20]
 800fe04:	4618      	mov	r0, r3
 800fe06:	f007 f8c5 	bl	8016f94 <USB_EP0StartXfer>
 800fe0a:	e005      	b.n	800fe18 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	6979      	ldr	r1, [r7, #20]
 800fe12:	4618      	mov	r0, r3
 800fe14:	f006 fede 	bl	8016bd4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800fe18:	2300      	movs	r3, #0
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3718      	adds	r7, #24
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}

0800fe22 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fe22:	b580      	push	{r7, lr}
 800fe24:	b084      	sub	sp, #16
 800fe26:	af00      	add	r7, sp, #0
 800fe28:	6078      	str	r0, [r7, #4]
 800fe2a:	460b      	mov	r3, r1
 800fe2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800fe2e:	78fb      	ldrb	r3, [r7, #3]
 800fe30:	f003 020f 	and.w	r2, r3, #15
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	685b      	ldr	r3, [r3, #4]
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d901      	bls.n	800fe40 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800fe3c:	2301      	movs	r3, #1
 800fe3e:	e04e      	b.n	800fede <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800fe40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	da0f      	bge.n	800fe68 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fe48:	78fb      	ldrb	r3, [r7, #3]
 800fe4a:	f003 020f 	and.w	r2, r3, #15
 800fe4e:	4613      	mov	r3, r2
 800fe50:	00db      	lsls	r3, r3, #3
 800fe52:	4413      	add	r3, r2
 800fe54:	009b      	lsls	r3, r3, #2
 800fe56:	3338      	adds	r3, #56	; 0x38
 800fe58:	687a      	ldr	r2, [r7, #4]
 800fe5a:	4413      	add	r3, r2
 800fe5c:	3304      	adds	r3, #4
 800fe5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	2201      	movs	r2, #1
 800fe64:	705a      	strb	r2, [r3, #1]
 800fe66:	e00d      	b.n	800fe84 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800fe68:	78fa      	ldrb	r2, [r7, #3]
 800fe6a:	4613      	mov	r3, r2
 800fe6c:	00db      	lsls	r3, r3, #3
 800fe6e:	4413      	add	r3, r2
 800fe70:	009b      	lsls	r3, r3, #2
 800fe72:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	4413      	add	r3, r2
 800fe7a:	3304      	adds	r3, #4
 800fe7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	2200      	movs	r2, #0
 800fe82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	2201      	movs	r2, #1
 800fe88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fe8a:	78fb      	ldrb	r3, [r7, #3]
 800fe8c:	f003 030f 	and.w	r3, r3, #15
 800fe90:	b2da      	uxtb	r2, r3
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800fe9c:	2b01      	cmp	r3, #1
 800fe9e:	d101      	bne.n	800fea4 <HAL_PCD_EP_SetStall+0x82>
 800fea0:	2302      	movs	r3, #2
 800fea2:	e01c      	b.n	800fede <HAL_PCD_EP_SetStall+0xbc>
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2201      	movs	r2, #1
 800fea8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	68f9      	ldr	r1, [r7, #12]
 800feb2:	4618      	mov	r0, r3
 800feb4:	f007 facc 	bl	8017450 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800feb8:	78fb      	ldrb	r3, [r7, #3]
 800feba:	f003 030f 	and.w	r3, r3, #15
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d108      	bne.n	800fed4 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681a      	ldr	r2, [r3, #0]
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800fecc:	4619      	mov	r1, r3
 800fece:	4610      	mov	r0, r2
 800fed0:	f007 fcbe 	bl	8017850 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2200      	movs	r2, #0
 800fed8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800fedc:	2300      	movs	r3, #0
}
 800fede:	4618      	mov	r0, r3
 800fee0:	3710      	adds	r7, #16
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}

0800fee6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fee6:	b580      	push	{r7, lr}
 800fee8:	b084      	sub	sp, #16
 800feea:	af00      	add	r7, sp, #0
 800feec:	6078      	str	r0, [r7, #4]
 800feee:	460b      	mov	r3, r1
 800fef0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800fef2:	78fb      	ldrb	r3, [r7, #3]
 800fef4:	f003 020f 	and.w	r2, r3, #15
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	685b      	ldr	r3, [r3, #4]
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d901      	bls.n	800ff04 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ff00:	2301      	movs	r3, #1
 800ff02:	e042      	b.n	800ff8a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ff04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	da0f      	bge.n	800ff2c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ff0c:	78fb      	ldrb	r3, [r7, #3]
 800ff0e:	f003 020f 	and.w	r2, r3, #15
 800ff12:	4613      	mov	r3, r2
 800ff14:	00db      	lsls	r3, r3, #3
 800ff16:	4413      	add	r3, r2
 800ff18:	009b      	lsls	r3, r3, #2
 800ff1a:	3338      	adds	r3, #56	; 0x38
 800ff1c:	687a      	ldr	r2, [r7, #4]
 800ff1e:	4413      	add	r3, r2
 800ff20:	3304      	adds	r3, #4
 800ff22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	2201      	movs	r2, #1
 800ff28:	705a      	strb	r2, [r3, #1]
 800ff2a:	e00f      	b.n	800ff4c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ff2c:	78fb      	ldrb	r3, [r7, #3]
 800ff2e:	f003 020f 	and.w	r2, r3, #15
 800ff32:	4613      	mov	r3, r2
 800ff34:	00db      	lsls	r3, r3, #3
 800ff36:	4413      	add	r3, r2
 800ff38:	009b      	lsls	r3, r3, #2
 800ff3a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ff3e:	687a      	ldr	r2, [r7, #4]
 800ff40:	4413      	add	r3, r2
 800ff42:	3304      	adds	r3, #4
 800ff44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	2200      	movs	r2, #0
 800ff50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ff52:	78fb      	ldrb	r3, [r7, #3]
 800ff54:	f003 030f 	and.w	r3, r3, #15
 800ff58:	b2da      	uxtb	r2, r3
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ff64:	2b01      	cmp	r3, #1
 800ff66:	d101      	bne.n	800ff6c <HAL_PCD_EP_ClrStall+0x86>
 800ff68:	2302      	movs	r3, #2
 800ff6a:	e00e      	b.n	800ff8a <HAL_PCD_EP_ClrStall+0xa4>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2201      	movs	r2, #1
 800ff70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	68f9      	ldr	r1, [r7, #12]
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f007 fad6 	bl	801752c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2200      	movs	r2, #0
 800ff84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800ff88:	2300      	movs	r3, #0
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	3710      	adds	r7, #16
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}

0800ff92 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ff92:	b580      	push	{r7, lr}
 800ff94:	b084      	sub	sp, #16
 800ff96:	af00      	add	r7, sp, #0
 800ff98:	6078      	str	r0, [r7, #4]
 800ff9a:	460b      	mov	r3, r1
 800ff9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800ff9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	da0c      	bge.n	800ffc0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ffa6:	78fb      	ldrb	r3, [r7, #3]
 800ffa8:	f003 020f 	and.w	r2, r3, #15
 800ffac:	4613      	mov	r3, r2
 800ffae:	00db      	lsls	r3, r3, #3
 800ffb0:	4413      	add	r3, r2
 800ffb2:	009b      	lsls	r3, r3, #2
 800ffb4:	3338      	adds	r3, #56	; 0x38
 800ffb6:	687a      	ldr	r2, [r7, #4]
 800ffb8:	4413      	add	r3, r2
 800ffba:	3304      	adds	r3, #4
 800ffbc:	60fb      	str	r3, [r7, #12]
 800ffbe:	e00c      	b.n	800ffda <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ffc0:	78fb      	ldrb	r3, [r7, #3]
 800ffc2:	f003 020f 	and.w	r2, r3, #15
 800ffc6:	4613      	mov	r3, r2
 800ffc8:	00db      	lsls	r3, r3, #3
 800ffca:	4413      	add	r3, r2
 800ffcc:	009b      	lsls	r3, r3, #2
 800ffce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ffd2:	687a      	ldr	r2, [r7, #4]
 800ffd4:	4413      	add	r3, r2
 800ffd6:	3304      	adds	r3, #4
 800ffd8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	68f9      	ldr	r1, [r7, #12]
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f007 f8f9 	bl	80171d8 <USB_EPStopXfer>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	72fb      	strb	r3, [r7, #11]

  return ret;
 800ffea:	7afb      	ldrb	r3, [r7, #11]
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	3710      	adds	r7, #16
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}

0800fff4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b088      	sub	sp, #32
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
 800fffc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8010008:	683a      	ldr	r2, [r7, #0]
 801000a:	4613      	mov	r3, r2
 801000c:	00db      	lsls	r3, r3, #3
 801000e:	4413      	add	r3, r2
 8010010:	009b      	lsls	r3, r3, #2
 8010012:	3338      	adds	r3, #56	; 0x38
 8010014:	687a      	ldr	r2, [r7, #4]
 8010016:	4413      	add	r3, r2
 8010018:	3304      	adds	r3, #4
 801001a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	6a1a      	ldr	r2, [r3, #32]
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	699b      	ldr	r3, [r3, #24]
 8010024:	429a      	cmp	r2, r3
 8010026:	d901      	bls.n	801002c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8010028:	2301      	movs	r3, #1
 801002a:	e067      	b.n	80100fc <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	699a      	ldr	r2, [r3, #24]
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	6a1b      	ldr	r3, [r3, #32]
 8010034:	1ad3      	subs	r3, r2, r3
 8010036:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	68db      	ldr	r3, [r3, #12]
 801003c:	69fa      	ldr	r2, [r7, #28]
 801003e:	429a      	cmp	r2, r3
 8010040:	d902      	bls.n	8010048 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	68db      	ldr	r3, [r3, #12]
 8010046:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8010048:	69fb      	ldr	r3, [r7, #28]
 801004a:	3303      	adds	r3, #3
 801004c:	089b      	lsrs	r3, r3, #2
 801004e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8010050:	e026      	b.n	80100a0 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	699a      	ldr	r2, [r3, #24]
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	6a1b      	ldr	r3, [r3, #32]
 801005a:	1ad3      	subs	r3, r2, r3
 801005c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	68db      	ldr	r3, [r3, #12]
 8010062:	69fa      	ldr	r2, [r7, #28]
 8010064:	429a      	cmp	r2, r3
 8010066:	d902      	bls.n	801006e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	68db      	ldr	r3, [r3, #12]
 801006c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 801006e:	69fb      	ldr	r3, [r7, #28]
 8010070:	3303      	adds	r3, #3
 8010072:	089b      	lsrs	r3, r3, #2
 8010074:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	6919      	ldr	r1, [r3, #16]
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	b2da      	uxtb	r2, r3
 801007e:	69fb      	ldr	r3, [r7, #28]
 8010080:	b29b      	uxth	r3, r3
 8010082:	6978      	ldr	r0, [r7, #20]
 8010084:	f007 f952 	bl	801732c <USB_WritePacket>

    ep->xfer_buff  += len;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	691a      	ldr	r2, [r3, #16]
 801008c:	69fb      	ldr	r3, [r7, #28]
 801008e:	441a      	add	r2, r3
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	6a1a      	ldr	r2, [r3, #32]
 8010098:	69fb      	ldr	r3, [r7, #28]
 801009a:	441a      	add	r2, r3
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	015a      	lsls	r2, r3, #5
 80100a4:	693b      	ldr	r3, [r7, #16]
 80100a6:	4413      	add	r3, r2
 80100a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100ac:	699b      	ldr	r3, [r3, #24]
 80100ae:	b29b      	uxth	r3, r3
 80100b0:	69ba      	ldr	r2, [r7, #24]
 80100b2:	429a      	cmp	r2, r3
 80100b4:	d809      	bhi.n	80100ca <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	6a1a      	ldr	r2, [r3, #32]
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80100be:	429a      	cmp	r2, r3
 80100c0:	d203      	bcs.n	80100ca <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	699b      	ldr	r3, [r3, #24]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d1c3      	bne.n	8010052 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	699a      	ldr	r2, [r3, #24]
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	6a1b      	ldr	r3, [r3, #32]
 80100d2:	429a      	cmp	r2, r3
 80100d4:	d811      	bhi.n	80100fa <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	f003 030f 	and.w	r3, r3, #15
 80100dc:	2201      	movs	r2, #1
 80100de:	fa02 f303 	lsl.w	r3, r2, r3
 80100e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80100e4:	693b      	ldr	r3, [r7, #16]
 80100e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	43db      	mvns	r3, r3
 80100f0:	6939      	ldr	r1, [r7, #16]
 80100f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80100f6:	4013      	ands	r3, r2
 80100f8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80100fa:	2300      	movs	r3, #0
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3720      	adds	r7, #32
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}

08010104 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b086      	sub	sp, #24
 8010108:	af00      	add	r7, sp, #0
 801010a:	6078      	str	r0, [r7, #4]
 801010c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010114:	697b      	ldr	r3, [r7, #20]
 8010116:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	333c      	adds	r3, #60	; 0x3c
 801011c:	3304      	adds	r3, #4
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8010122:	683b      	ldr	r3, [r7, #0]
 8010124:	015a      	lsls	r2, r3, #5
 8010126:	693b      	ldr	r3, [r7, #16]
 8010128:	4413      	add	r3, r2
 801012a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801012e:	689b      	ldr	r3, [r3, #8]
 8010130:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	4a19      	ldr	r2, [pc, #100]	; (801019c <PCD_EP_OutXfrComplete_int+0x98>)
 8010136:	4293      	cmp	r3, r2
 8010138:	d124      	bne.n	8010184 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010140:	2b00      	cmp	r3, #0
 8010142:	d00a      	beq.n	801015a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	015a      	lsls	r2, r3, #5
 8010148:	693b      	ldr	r3, [r7, #16]
 801014a:	4413      	add	r3, r2
 801014c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010150:	461a      	mov	r2, r3
 8010152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010156:	6093      	str	r3, [r2, #8]
 8010158:	e01a      	b.n	8010190 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	f003 0320 	and.w	r3, r3, #32
 8010160:	2b00      	cmp	r3, #0
 8010162:	d008      	beq.n	8010176 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	015a      	lsls	r2, r3, #5
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	4413      	add	r3, r2
 801016c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010170:	461a      	mov	r2, r3
 8010172:	2320      	movs	r3, #32
 8010174:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	b2db      	uxtb	r3, r3
 801017a:	4619      	mov	r1, r3
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f009 fad7 	bl	8019730 <HAL_PCD_DataOutStageCallback>
 8010182:	e005      	b.n	8010190 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	b2db      	uxtb	r3, r3
 8010188:	4619      	mov	r1, r3
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	f009 fad0 	bl	8019730 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8010190:	2300      	movs	r3, #0
}
 8010192:	4618      	mov	r0, r3
 8010194:	3718      	adds	r7, #24
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}
 801019a:	bf00      	nop
 801019c:	4f54310a 	.word	0x4f54310a

080101a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b086      	sub	sp, #24
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101b0:	697b      	ldr	r3, [r7, #20]
 80101b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80101b4:	697b      	ldr	r3, [r7, #20]
 80101b6:	333c      	adds	r3, #60	; 0x3c
 80101b8:	3304      	adds	r3, #4
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	015a      	lsls	r2, r3, #5
 80101c2:	693b      	ldr	r3, [r7, #16]
 80101c4:	4413      	add	r3, r2
 80101c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101ca:	689b      	ldr	r3, [r3, #8]
 80101cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	4a0c      	ldr	r2, [pc, #48]	; (8010204 <PCD_EP_OutSetupPacket_int+0x64>)
 80101d2:	4293      	cmp	r3, r2
 80101d4:	d90e      	bls.n	80101f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d009      	beq.n	80101f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	015a      	lsls	r2, r3, #5
 80101e4:	693b      	ldr	r3, [r7, #16]
 80101e6:	4413      	add	r3, r2
 80101e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101ec:	461a      	mov	r2, r3
 80101ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80101f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f009 fa89 	bl	801970c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80101fa:	2300      	movs	r3, #0
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	3718      	adds	r7, #24
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}
 8010204:	4f54300a 	.word	0x4f54300a

08010208 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8010208:	b480      	push	{r7}
 801020a:	b085      	sub	sp, #20
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
 8010210:	460b      	mov	r3, r1
 8010212:	70fb      	strb	r3, [r7, #3]
 8010214:	4613      	mov	r3, r2
 8010216:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801021e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8010220:	78fb      	ldrb	r3, [r7, #3]
 8010222:	2b00      	cmp	r3, #0
 8010224:	d107      	bne.n	8010236 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8010226:	883b      	ldrh	r3, [r7, #0]
 8010228:	0419      	lsls	r1, r3, #16
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	68ba      	ldr	r2, [r7, #8]
 8010230:	430a      	orrs	r2, r1
 8010232:	629a      	str	r2, [r3, #40]	; 0x28
 8010234:	e028      	b.n	8010288 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801023c:	0c1b      	lsrs	r3, r3, #16
 801023e:	68ba      	ldr	r2, [r7, #8]
 8010240:	4413      	add	r3, r2
 8010242:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8010244:	2300      	movs	r3, #0
 8010246:	73fb      	strb	r3, [r7, #15]
 8010248:	e00d      	b.n	8010266 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681a      	ldr	r2, [r3, #0]
 801024e:	7bfb      	ldrb	r3, [r7, #15]
 8010250:	3340      	adds	r3, #64	; 0x40
 8010252:	009b      	lsls	r3, r3, #2
 8010254:	4413      	add	r3, r2
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	0c1b      	lsrs	r3, r3, #16
 801025a:	68ba      	ldr	r2, [r7, #8]
 801025c:	4413      	add	r3, r2
 801025e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8010260:	7bfb      	ldrb	r3, [r7, #15]
 8010262:	3301      	adds	r3, #1
 8010264:	73fb      	strb	r3, [r7, #15]
 8010266:	7bfa      	ldrb	r2, [r7, #15]
 8010268:	78fb      	ldrb	r3, [r7, #3]
 801026a:	3b01      	subs	r3, #1
 801026c:	429a      	cmp	r2, r3
 801026e:	d3ec      	bcc.n	801024a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8010270:	883b      	ldrh	r3, [r7, #0]
 8010272:	0418      	lsls	r0, r3, #16
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	6819      	ldr	r1, [r3, #0]
 8010278:	78fb      	ldrb	r3, [r7, #3]
 801027a:	3b01      	subs	r3, #1
 801027c:	68ba      	ldr	r2, [r7, #8]
 801027e:	4302      	orrs	r2, r0
 8010280:	3340      	adds	r3, #64	; 0x40
 8010282:	009b      	lsls	r3, r3, #2
 8010284:	440b      	add	r3, r1
 8010286:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8010288:	2300      	movs	r3, #0
}
 801028a:	4618      	mov	r0, r3
 801028c:	3714      	adds	r7, #20
 801028e:	46bd      	mov	sp, r7
 8010290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010294:	4770      	bx	lr

08010296 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8010296:	b480      	push	{r7}
 8010298:	b083      	sub	sp, #12
 801029a:	af00      	add	r7, sp, #0
 801029c:	6078      	str	r0, [r7, #4]
 801029e:	460b      	mov	r3, r1
 80102a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	887a      	ldrh	r2, [r7, #2]
 80102a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80102aa:	2300      	movs	r3, #0
}
 80102ac:	4618      	mov	r0, r3
 80102ae:	370c      	adds	r7, #12
 80102b0:	46bd      	mov	sp, r7
 80102b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b6:	4770      	bx	lr

080102b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80102b8:	b480      	push	{r7}
 80102ba:	b085      	sub	sp, #20
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2201      	movs	r2, #1
 80102ca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2200      	movs	r2, #0
 80102d2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	699b      	ldr	r3, [r3, #24]
 80102da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80102ea:	f043 0303 	orr.w	r3, r3, #3
 80102ee:	68fa      	ldr	r2, [r7, #12]
 80102f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80102f2:	2300      	movs	r3, #0
}
 80102f4:	4618      	mov	r0, r3
 80102f6:	3714      	adds	r7, #20
 80102f8:	46bd      	mov	sp, r7
 80102fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102fe:	4770      	bx	lr

08010300 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8010300:	b480      	push	{r7}
 8010302:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010304:	4b05      	ldr	r3, [pc, #20]	; (801031c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	4a04      	ldr	r2, [pc, #16]	; (801031c <HAL_PWR_EnableBkUpAccess+0x1c>)
 801030a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801030e:	6013      	str	r3, [r2, #0]
}
 8010310:	bf00      	nop
 8010312:	46bd      	mov	sp, r7
 8010314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010318:	4770      	bx	lr
 801031a:	bf00      	nop
 801031c:	40007000 	.word	0x40007000

08010320 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b082      	sub	sp, #8
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
 8010328:	460b      	mov	r3, r1
 801032a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d10c      	bne.n	801034c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8010332:	4b13      	ldr	r3, [pc, #76]	; (8010380 <HAL_PWR_EnterSLEEPMode+0x60>)
 8010334:	695b      	ldr	r3, [r3, #20]
 8010336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801033a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801033e:	d10e      	bne.n	801035e <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8010340:	f000 f8b6 	bl	80104b0 <HAL_PWREx_DisableLowPowerRunMode>
 8010344:	4603      	mov	r3, r0
 8010346:	2b00      	cmp	r3, #0
 8010348:	d009      	beq.n	801035e <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 801034a:	e016      	b.n	801037a <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 801034c:	4b0c      	ldr	r3, [pc, #48]	; (8010380 <HAL_PWR_EnterSLEEPMode+0x60>)
 801034e:	695b      	ldr	r3, [r3, #20]
 8010350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010358:	d001      	beq.n	801035e <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 801035a:	f000 f899 	bl	8010490 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 801035e:	4b09      	ldr	r3, [pc, #36]	; (8010384 <HAL_PWR_EnterSLEEPMode+0x64>)
 8010360:	691b      	ldr	r3, [r3, #16]
 8010362:	4a08      	ldr	r2, [pc, #32]	; (8010384 <HAL_PWR_EnterSLEEPMode+0x64>)
 8010364:	f023 0304 	bic.w	r3, r3, #4
 8010368:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 801036a:	78fb      	ldrb	r3, [r7, #3]
 801036c:	2b01      	cmp	r3, #1
 801036e:	d101      	bne.n	8010374 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8010370:	bf30      	wfi
 8010372:	e002      	b.n	801037a <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8010374:	bf40      	sev
    __WFE();
 8010376:	bf20      	wfe
    __WFE();
 8010378:	bf20      	wfe
  }

}
 801037a:	3708      	adds	r7, #8
 801037c:	46bd      	mov	sp, r7
 801037e:	bd80      	pop	{r7, pc}
 8010380:	40007000 	.word	0x40007000
 8010384:	e000ed00 	.word	0xe000ed00

08010388 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8010388:	b480      	push	{r7}
 801038a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 801038c:	4b04      	ldr	r3, [pc, #16]	; (80103a0 <HAL_PWREx_GetVoltageRange+0x18>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8010394:	4618      	mov	r0, r3
 8010396:	46bd      	mov	sp, r7
 8010398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039c:	4770      	bx	lr
 801039e:	bf00      	nop
 80103a0:	40007000 	.word	0x40007000

080103a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80103a4:	b480      	push	{r7}
 80103a6:	b085      	sub	sp, #20
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80103b2:	d130      	bne.n	8010416 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80103b4:	4b23      	ldr	r3, [pc, #140]	; (8010444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80103bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80103c0:	d038      	beq.n	8010434 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80103c2:	4b20      	ldr	r3, [pc, #128]	; (8010444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80103ca:	4a1e      	ldr	r2, [pc, #120]	; (8010444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80103cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80103d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80103d2:	4b1d      	ldr	r3, [pc, #116]	; (8010448 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	2232      	movs	r2, #50	; 0x32
 80103d8:	fb02 f303 	mul.w	r3, r2, r3
 80103dc:	4a1b      	ldr	r2, [pc, #108]	; (801044c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80103de:	fba2 2303 	umull	r2, r3, r2, r3
 80103e2:	0c9b      	lsrs	r3, r3, #18
 80103e4:	3301      	adds	r3, #1
 80103e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80103e8:	e002      	b.n	80103f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	3b01      	subs	r3, #1
 80103ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80103f0:	4b14      	ldr	r3, [pc, #80]	; (8010444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80103f2:	695b      	ldr	r3, [r3, #20]
 80103f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80103f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80103fc:	d102      	bne.n	8010404 <HAL_PWREx_ControlVoltageScaling+0x60>
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d1f2      	bne.n	80103ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8010404:	4b0f      	ldr	r3, [pc, #60]	; (8010444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8010406:	695b      	ldr	r3, [r3, #20]
 8010408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801040c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010410:	d110      	bne.n	8010434 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8010412:	2303      	movs	r3, #3
 8010414:	e00f      	b.n	8010436 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8010416:	4b0b      	ldr	r3, [pc, #44]	; (8010444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801041e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010422:	d007      	beq.n	8010434 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8010424:	4b07      	ldr	r3, [pc, #28]	; (8010444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801042c:	4a05      	ldr	r2, [pc, #20]	; (8010444 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 801042e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010432:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8010434:	2300      	movs	r3, #0
}
 8010436:	4618      	mov	r0, r3
 8010438:	3714      	adds	r7, #20
 801043a:	46bd      	mov	sp, r7
 801043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010440:	4770      	bx	lr
 8010442:	bf00      	nop
 8010444:	40007000 	.word	0x40007000
 8010448:	20000194 	.word	0x20000194
 801044c:	431bde83 	.word	0x431bde83

08010450 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8010450:	b480      	push	{r7}
 8010452:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8010454:	4b05      	ldr	r3, [pc, #20]	; (801046c <HAL_PWREx_EnableVddUSB+0x1c>)
 8010456:	685b      	ldr	r3, [r3, #4]
 8010458:	4a04      	ldr	r2, [pc, #16]	; (801046c <HAL_PWREx_EnableVddUSB+0x1c>)
 801045a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801045e:	6053      	str	r3, [r2, #4]
}
 8010460:	bf00      	nop
 8010462:	46bd      	mov	sp, r7
 8010464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010468:	4770      	bx	lr
 801046a:	bf00      	nop
 801046c:	40007000 	.word	0x40007000

08010470 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8010470:	b480      	push	{r7}
 8010472:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8010474:	4b05      	ldr	r3, [pc, #20]	; (801048c <HAL_PWREx_EnableVddIO2+0x1c>)
 8010476:	685b      	ldr	r3, [r3, #4]
 8010478:	4a04      	ldr	r2, [pc, #16]	; (801048c <HAL_PWREx_EnableVddIO2+0x1c>)
 801047a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801047e:	6053      	str	r3, [r2, #4]
}
 8010480:	bf00      	nop
 8010482:	46bd      	mov	sp, r7
 8010484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010488:	4770      	bx	lr
 801048a:	bf00      	nop
 801048c:	40007000 	.word	0x40007000

08010490 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8010490:	b480      	push	{r7}
 8010492:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8010494:	4b05      	ldr	r3, [pc, #20]	; (80104ac <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	4a04      	ldr	r2, [pc, #16]	; (80104ac <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 801049a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801049e:	6013      	str	r3, [r2, #0]
}
 80104a0:	bf00      	nop
 80104a2:	46bd      	mov	sp, r7
 80104a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a8:	4770      	bx	lr
 80104aa:	bf00      	nop
 80104ac:	40007000 	.word	0x40007000

080104b0 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80104b0:	b480      	push	{r7}
 80104b2:	b083      	sub	sp, #12
 80104b4:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80104b6:	4b17      	ldr	r3, [pc, #92]	; (8010514 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	4a16      	ldr	r2, [pc, #88]	; (8010514 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80104bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80104c0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80104c2:	4b15      	ldr	r3, [pc, #84]	; (8010518 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	2232      	movs	r2, #50	; 0x32
 80104c8:	fb02 f303 	mul.w	r3, r2, r3
 80104cc:	4a13      	ldr	r2, [pc, #76]	; (801051c <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 80104ce:	fba2 2303 	umull	r2, r3, r2, r3
 80104d2:	0c9b      	lsrs	r3, r3, #18
 80104d4:	3301      	adds	r3, #1
 80104d6:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80104d8:	e002      	b.n	80104e0 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	3b01      	subs	r3, #1
 80104de:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80104e0:	4b0c      	ldr	r3, [pc, #48]	; (8010514 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80104e2:	695b      	ldr	r3, [r3, #20]
 80104e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80104e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80104ec:	d102      	bne.n	80104f4 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d1f2      	bne.n	80104da <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80104f4:	4b07      	ldr	r3, [pc, #28]	; (8010514 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80104f6:	695b      	ldr	r3, [r3, #20]
 80104f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80104fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010500:	d101      	bne.n	8010506 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8010502:	2303      	movs	r3, #3
 8010504:	e000      	b.n	8010508 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8010506:	2300      	movs	r3, #0
}
 8010508:	4618      	mov	r0, r3
 801050a:	370c      	adds	r7, #12
 801050c:	46bd      	mov	sp, r7
 801050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010512:	4770      	bx	lr
 8010514:	40007000 	.word	0x40007000
 8010518:	20000194 	.word	0x20000194
 801051c:	431bde83 	.word	0x431bde83

08010520 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b086      	sub	sp, #24
 8010524:	af02      	add	r7, sp, #8
 8010526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8010528:	f7fb fb3c 	bl	800bba4 <HAL_GetTick>
 801052c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d101      	bne.n	8010538 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8010534:	2301      	movs	r3, #1
 8010536:	e069      	b.n	801060c <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801053e:	b2db      	uxtb	r3, r3
 8010540:	2b00      	cmp	r3, #0
 8010542:	d10b      	bne.n	801055c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2200      	movs	r2, #0
 8010548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	f7f2 f9f9 	bl	8002944 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8010552:	f241 3188 	movw	r1, #5000	; 0x1388
 8010556:	6878      	ldr	r0, [r7, #4]
 8010558:	f000 f85e 	bl	8010618 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	689b      	ldr	r3, [r3, #8]
 801056a:	3b01      	subs	r3, #1
 801056c:	021a      	lsls	r2, r3, #8
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	430a      	orrs	r2, r1
 8010574:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801057a:	9300      	str	r3, [sp, #0]
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	2200      	movs	r2, #0
 8010580:	2120      	movs	r1, #32
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	f000 f856 	bl	8010634 <QSPI_WaitFlagStateUntilTimeout>
 8010588:	4603      	mov	r3, r0
 801058a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 801058c:	7afb      	ldrb	r3, [r7, #11]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d137      	bne.n	8010602 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801059c:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80105a0:	687a      	ldr	r2, [r7, #4]
 80105a2:	6852      	ldr	r2, [r2, #4]
 80105a4:	0611      	lsls	r1, r2, #24
 80105a6:	687a      	ldr	r2, [r7, #4]
 80105a8:	68d2      	ldr	r2, [r2, #12]
 80105aa:	4311      	orrs	r1, r2
 80105ac:	687a      	ldr	r2, [r7, #4]
 80105ae:	69d2      	ldr	r2, [r2, #28]
 80105b0:	4311      	orrs	r1, r2
 80105b2:	687a      	ldr	r2, [r7, #4]
 80105b4:	6a12      	ldr	r2, [r2, #32]
 80105b6:	4311      	orrs	r1, r2
 80105b8:	687a      	ldr	r2, [r7, #4]
 80105ba:	6812      	ldr	r2, [r2, #0]
 80105bc:	430b      	orrs	r3, r1
 80105be:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	685a      	ldr	r2, [r3, #4]
 80105c6:	4b13      	ldr	r3, [pc, #76]	; (8010614 <HAL_QSPI_Init+0xf4>)
 80105c8:	4013      	ands	r3, r2
 80105ca:	687a      	ldr	r2, [r7, #4]
 80105cc:	6912      	ldr	r2, [r2, #16]
 80105ce:	0411      	lsls	r1, r2, #16
 80105d0:	687a      	ldr	r2, [r7, #4]
 80105d2:	6952      	ldr	r2, [r2, #20]
 80105d4:	4311      	orrs	r1, r2
 80105d6:	687a      	ldr	r2, [r7, #4]
 80105d8:	6992      	ldr	r2, [r2, #24]
 80105da:	4311      	orrs	r1, r2
 80105dc:	687a      	ldr	r2, [r7, #4]
 80105de:	6812      	ldr	r2, [r2, #0]
 80105e0:	430b      	orrs	r3, r1
 80105e2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	681a      	ldr	r2, [r3, #0]
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	f042 0201 	orr.w	r2, r2, #1
 80105f2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2200      	movs	r2, #0
 80105f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	2201      	movs	r2, #1
 80105fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	2200      	movs	r2, #0
 8010606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 801060a:	7afb      	ldrb	r3, [r7, #11]
}
 801060c:	4618      	mov	r0, r3
 801060e:	3710      	adds	r7, #16
 8010610:	46bd      	mov	sp, r7
 8010612:	bd80      	pop	{r7, pc}
 8010614:	ffe0f8fe 	.word	0xffe0f8fe

08010618 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8010618:	b480      	push	{r7}
 801061a:	b083      	sub	sp, #12
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	683a      	ldr	r2, [r7, #0]
 8010626:	649a      	str	r2, [r3, #72]	; 0x48
}
 8010628:	bf00      	nop
 801062a:	370c      	adds	r7, #12
 801062c:	46bd      	mov	sp, r7
 801062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010632:	4770      	bx	lr

08010634 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b084      	sub	sp, #16
 8010638:	af00      	add	r7, sp, #0
 801063a:	60f8      	str	r0, [r7, #12]
 801063c:	60b9      	str	r1, [r7, #8]
 801063e:	603b      	str	r3, [r7, #0]
 8010640:	4613      	mov	r3, r2
 8010642:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8010644:	e01a      	b.n	801067c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010646:	69bb      	ldr	r3, [r7, #24]
 8010648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801064c:	d016      	beq.n	801067c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801064e:	f7fb faa9 	bl	800bba4 <HAL_GetTick>
 8010652:	4602      	mov	r2, r0
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	1ad3      	subs	r3, r2, r3
 8010658:	69ba      	ldr	r2, [r7, #24]
 801065a:	429a      	cmp	r2, r3
 801065c:	d302      	bcc.n	8010664 <QSPI_WaitFlagStateUntilTimeout+0x30>
 801065e:	69bb      	ldr	r3, [r7, #24]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d10b      	bne.n	801067c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	2204      	movs	r2, #4
 8010668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010670:	f043 0201 	orr.w	r2, r3, #1
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8010678:	2301      	movs	r3, #1
 801067a:	e00e      	b.n	801069a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	689a      	ldr	r2, [r3, #8]
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	4013      	ands	r3, r2
 8010686:	2b00      	cmp	r3, #0
 8010688:	bf14      	ite	ne
 801068a:	2301      	movne	r3, #1
 801068c:	2300      	moveq	r3, #0
 801068e:	b2db      	uxtb	r3, r3
 8010690:	461a      	mov	r2, r3
 8010692:	79fb      	ldrb	r3, [r7, #7]
 8010694:	429a      	cmp	r2, r3
 8010696:	d1d6      	bne.n	8010646 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010698:	2300      	movs	r3, #0
}
 801069a:	4618      	mov	r0, r3
 801069c:	3710      	adds	r7, #16
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}
	...

080106a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b088      	sub	sp, #32
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d102      	bne.n	80106b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80106b2:	2301      	movs	r3, #1
 80106b4:	f000 bc08 	b.w	8010ec8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80106b8:	4b96      	ldr	r3, [pc, #600]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 80106ba:	689b      	ldr	r3, [r3, #8]
 80106bc:	f003 030c 	and.w	r3, r3, #12
 80106c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80106c2:	4b94      	ldr	r3, [pc, #592]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 80106c4:	68db      	ldr	r3, [r3, #12]
 80106c6:	f003 0303 	and.w	r3, r3, #3
 80106ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	f003 0310 	and.w	r3, r3, #16
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	f000 80e4 	beq.w	80108a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80106da:	69bb      	ldr	r3, [r7, #24]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d007      	beq.n	80106f0 <HAL_RCC_OscConfig+0x4c>
 80106e0:	69bb      	ldr	r3, [r7, #24]
 80106e2:	2b0c      	cmp	r3, #12
 80106e4:	f040 808b 	bne.w	80107fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	2b01      	cmp	r3, #1
 80106ec:	f040 8087 	bne.w	80107fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80106f0:	4b88      	ldr	r3, [pc, #544]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	f003 0302 	and.w	r3, r3, #2
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d005      	beq.n	8010708 <HAL_RCC_OscConfig+0x64>
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	699b      	ldr	r3, [r3, #24]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d101      	bne.n	8010708 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8010704:	2301      	movs	r3, #1
 8010706:	e3df      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	6a1a      	ldr	r2, [r3, #32]
 801070c:	4b81      	ldr	r3, [pc, #516]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	f003 0308 	and.w	r3, r3, #8
 8010714:	2b00      	cmp	r3, #0
 8010716:	d004      	beq.n	8010722 <HAL_RCC_OscConfig+0x7e>
 8010718:	4b7e      	ldr	r3, [pc, #504]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010720:	e005      	b.n	801072e <HAL_RCC_OscConfig+0x8a>
 8010722:	4b7c      	ldr	r3, [pc, #496]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 8010724:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010728:	091b      	lsrs	r3, r3, #4
 801072a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801072e:	4293      	cmp	r3, r2
 8010730:	d223      	bcs.n	801077a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	6a1b      	ldr	r3, [r3, #32]
 8010736:	4618      	mov	r0, r3
 8010738:	f000 fd92 	bl	8011260 <RCC_SetFlashLatencyFromMSIRange>
 801073c:	4603      	mov	r3, r0
 801073e:	2b00      	cmp	r3, #0
 8010740:	d001      	beq.n	8010746 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8010742:	2301      	movs	r3, #1
 8010744:	e3c0      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010746:	4b73      	ldr	r3, [pc, #460]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	4a72      	ldr	r2, [pc, #456]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 801074c:	f043 0308 	orr.w	r3, r3, #8
 8010750:	6013      	str	r3, [r2, #0]
 8010752:	4b70      	ldr	r3, [pc, #448]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	6a1b      	ldr	r3, [r3, #32]
 801075e:	496d      	ldr	r1, [pc, #436]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 8010760:	4313      	orrs	r3, r2
 8010762:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010764:	4b6b      	ldr	r3, [pc, #428]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	69db      	ldr	r3, [r3, #28]
 8010770:	021b      	lsls	r3, r3, #8
 8010772:	4968      	ldr	r1, [pc, #416]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 8010774:	4313      	orrs	r3, r2
 8010776:	604b      	str	r3, [r1, #4]
 8010778:	e025      	b.n	80107c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 801077a:	4b66      	ldr	r3, [pc, #408]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	4a65      	ldr	r2, [pc, #404]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 8010780:	f043 0308 	orr.w	r3, r3, #8
 8010784:	6013      	str	r3, [r2, #0]
 8010786:	4b63      	ldr	r3, [pc, #396]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	6a1b      	ldr	r3, [r3, #32]
 8010792:	4960      	ldr	r1, [pc, #384]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 8010794:	4313      	orrs	r3, r2
 8010796:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010798:	4b5e      	ldr	r3, [pc, #376]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 801079a:	685b      	ldr	r3, [r3, #4]
 801079c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	69db      	ldr	r3, [r3, #28]
 80107a4:	021b      	lsls	r3, r3, #8
 80107a6:	495b      	ldr	r1, [pc, #364]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 80107a8:	4313      	orrs	r3, r2
 80107aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80107ac:	69bb      	ldr	r3, [r7, #24]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d109      	bne.n	80107c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6a1b      	ldr	r3, [r3, #32]
 80107b6:	4618      	mov	r0, r3
 80107b8:	f000 fd52 	bl	8011260 <RCC_SetFlashLatencyFromMSIRange>
 80107bc:	4603      	mov	r3, r0
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d001      	beq.n	80107c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80107c2:	2301      	movs	r3, #1
 80107c4:	e380      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80107c6:	f000 fc87 	bl	80110d8 <HAL_RCC_GetSysClockFreq>
 80107ca:	4602      	mov	r2, r0
 80107cc:	4b51      	ldr	r3, [pc, #324]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 80107ce:	689b      	ldr	r3, [r3, #8]
 80107d0:	091b      	lsrs	r3, r3, #4
 80107d2:	f003 030f 	and.w	r3, r3, #15
 80107d6:	4950      	ldr	r1, [pc, #320]	; (8010918 <HAL_RCC_OscConfig+0x274>)
 80107d8:	5ccb      	ldrb	r3, [r1, r3]
 80107da:	f003 031f 	and.w	r3, r3, #31
 80107de:	fa22 f303 	lsr.w	r3, r2, r3
 80107e2:	4a4e      	ldr	r2, [pc, #312]	; (801091c <HAL_RCC_OscConfig+0x278>)
 80107e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80107e6:	4b4e      	ldr	r3, [pc, #312]	; (8010920 <HAL_RCC_OscConfig+0x27c>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7fb f98a 	bl	800bb04 <HAL_InitTick>
 80107f0:	4603      	mov	r3, r0
 80107f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80107f4:	7bfb      	ldrb	r3, [r7, #15]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d052      	beq.n	80108a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80107fa:	7bfb      	ldrb	r3, [r7, #15]
 80107fc:	e364      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	699b      	ldr	r3, [r3, #24]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d032      	beq.n	801086c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8010806:	4b43      	ldr	r3, [pc, #268]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	4a42      	ldr	r2, [pc, #264]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 801080c:	f043 0301 	orr.w	r3, r3, #1
 8010810:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8010812:	f7fb f9c7 	bl	800bba4 <HAL_GetTick>
 8010816:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010818:	e008      	b.n	801082c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 801081a:	f7fb f9c3 	bl	800bba4 <HAL_GetTick>
 801081e:	4602      	mov	r2, r0
 8010820:	693b      	ldr	r3, [r7, #16]
 8010822:	1ad3      	subs	r3, r2, r3
 8010824:	2b02      	cmp	r3, #2
 8010826:	d901      	bls.n	801082c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8010828:	2303      	movs	r3, #3
 801082a:	e34d      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 801082c:	4b39      	ldr	r3, [pc, #228]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	f003 0302 	and.w	r3, r3, #2
 8010834:	2b00      	cmp	r3, #0
 8010836:	d0f0      	beq.n	801081a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8010838:	4b36      	ldr	r3, [pc, #216]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	4a35      	ldr	r2, [pc, #212]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 801083e:	f043 0308 	orr.w	r3, r3, #8
 8010842:	6013      	str	r3, [r2, #0]
 8010844:	4b33      	ldr	r3, [pc, #204]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	6a1b      	ldr	r3, [r3, #32]
 8010850:	4930      	ldr	r1, [pc, #192]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 8010852:	4313      	orrs	r3, r2
 8010854:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8010856:	4b2f      	ldr	r3, [pc, #188]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 8010858:	685b      	ldr	r3, [r3, #4]
 801085a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	69db      	ldr	r3, [r3, #28]
 8010862:	021b      	lsls	r3, r3, #8
 8010864:	492b      	ldr	r1, [pc, #172]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 8010866:	4313      	orrs	r3, r2
 8010868:	604b      	str	r3, [r1, #4]
 801086a:	e01a      	b.n	80108a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 801086c:	4b29      	ldr	r3, [pc, #164]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	4a28      	ldr	r2, [pc, #160]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 8010872:	f023 0301 	bic.w	r3, r3, #1
 8010876:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8010878:	f7fb f994 	bl	800bba4 <HAL_GetTick>
 801087c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 801087e:	e008      	b.n	8010892 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8010880:	f7fb f990 	bl	800bba4 <HAL_GetTick>
 8010884:	4602      	mov	r2, r0
 8010886:	693b      	ldr	r3, [r7, #16]
 8010888:	1ad3      	subs	r3, r2, r3
 801088a:	2b02      	cmp	r3, #2
 801088c:	d901      	bls.n	8010892 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 801088e:	2303      	movs	r3, #3
 8010890:	e31a      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8010892:	4b20      	ldr	r3, [pc, #128]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	f003 0302 	and.w	r3, r3, #2
 801089a:	2b00      	cmp	r3, #0
 801089c:	d1f0      	bne.n	8010880 <HAL_RCC_OscConfig+0x1dc>
 801089e:	e000      	b.n	80108a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80108a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	f003 0301 	and.w	r3, r3, #1
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d073      	beq.n	8010996 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80108ae:	69bb      	ldr	r3, [r7, #24]
 80108b0:	2b08      	cmp	r3, #8
 80108b2:	d005      	beq.n	80108c0 <HAL_RCC_OscConfig+0x21c>
 80108b4:	69bb      	ldr	r3, [r7, #24]
 80108b6:	2b0c      	cmp	r3, #12
 80108b8:	d10e      	bne.n	80108d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80108ba:	697b      	ldr	r3, [r7, #20]
 80108bc:	2b03      	cmp	r3, #3
 80108be:	d10b      	bne.n	80108d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80108c0:	4b14      	ldr	r3, [pc, #80]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d063      	beq.n	8010994 <HAL_RCC_OscConfig+0x2f0>
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	685b      	ldr	r3, [r3, #4]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d15f      	bne.n	8010994 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80108d4:	2301      	movs	r3, #1
 80108d6:	e2f7      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	685b      	ldr	r3, [r3, #4]
 80108dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108e0:	d106      	bne.n	80108f0 <HAL_RCC_OscConfig+0x24c>
 80108e2:	4b0c      	ldr	r3, [pc, #48]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	4a0b      	ldr	r2, [pc, #44]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 80108e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80108ec:	6013      	str	r3, [r2, #0]
 80108ee:	e025      	b.n	801093c <HAL_RCC_OscConfig+0x298>
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	685b      	ldr	r3, [r3, #4]
 80108f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80108f8:	d114      	bne.n	8010924 <HAL_RCC_OscConfig+0x280>
 80108fa:	4b06      	ldr	r3, [pc, #24]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	4a05      	ldr	r2, [pc, #20]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 8010900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010904:	6013      	str	r3, [r2, #0]
 8010906:	4b03      	ldr	r3, [pc, #12]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	4a02      	ldr	r2, [pc, #8]	; (8010914 <HAL_RCC_OscConfig+0x270>)
 801090c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010910:	6013      	str	r3, [r2, #0]
 8010912:	e013      	b.n	801093c <HAL_RCC_OscConfig+0x298>
 8010914:	40021000 	.word	0x40021000
 8010918:	0801afd0 	.word	0x0801afd0
 801091c:	20000194 	.word	0x20000194
 8010920:	20000550 	.word	0x20000550
 8010924:	4ba0      	ldr	r3, [pc, #640]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	4a9f      	ldr	r2, [pc, #636]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 801092a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801092e:	6013      	str	r3, [r2, #0]
 8010930:	4b9d      	ldr	r3, [pc, #628]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	4a9c      	ldr	r2, [pc, #624]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801093a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	685b      	ldr	r3, [r3, #4]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d013      	beq.n	801096c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010944:	f7fb f92e 	bl	800bba4 <HAL_GetTick>
 8010948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801094a:	e008      	b.n	801095e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801094c:	f7fb f92a 	bl	800bba4 <HAL_GetTick>
 8010950:	4602      	mov	r2, r0
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	1ad3      	subs	r3, r2, r3
 8010956:	2b64      	cmp	r3, #100	; 0x64
 8010958:	d901      	bls.n	801095e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 801095a:	2303      	movs	r3, #3
 801095c:	e2b4      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801095e:	4b92      	ldr	r3, [pc, #584]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010966:	2b00      	cmp	r3, #0
 8010968:	d0f0      	beq.n	801094c <HAL_RCC_OscConfig+0x2a8>
 801096a:	e014      	b.n	8010996 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801096c:	f7fb f91a 	bl	800bba4 <HAL_GetTick>
 8010970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8010972:	e008      	b.n	8010986 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010974:	f7fb f916 	bl	800bba4 <HAL_GetTick>
 8010978:	4602      	mov	r2, r0
 801097a:	693b      	ldr	r3, [r7, #16]
 801097c:	1ad3      	subs	r3, r2, r3
 801097e:	2b64      	cmp	r3, #100	; 0x64
 8010980:	d901      	bls.n	8010986 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8010982:	2303      	movs	r3, #3
 8010984:	e2a0      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8010986:	4b88      	ldr	r3, [pc, #544]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801098e:	2b00      	cmp	r3, #0
 8010990:	d1f0      	bne.n	8010974 <HAL_RCC_OscConfig+0x2d0>
 8010992:	e000      	b.n	8010996 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	f003 0302 	and.w	r3, r3, #2
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d060      	beq.n	8010a64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80109a2:	69bb      	ldr	r3, [r7, #24]
 80109a4:	2b04      	cmp	r3, #4
 80109a6:	d005      	beq.n	80109b4 <HAL_RCC_OscConfig+0x310>
 80109a8:	69bb      	ldr	r3, [r7, #24]
 80109aa:	2b0c      	cmp	r3, #12
 80109ac:	d119      	bne.n	80109e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80109ae:	697b      	ldr	r3, [r7, #20]
 80109b0:	2b02      	cmp	r3, #2
 80109b2:	d116      	bne.n	80109e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80109b4:	4b7c      	ldr	r3, [pc, #496]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d005      	beq.n	80109cc <HAL_RCC_OscConfig+0x328>
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	68db      	ldr	r3, [r3, #12]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d101      	bne.n	80109cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80109c8:	2301      	movs	r3, #1
 80109ca:	e27d      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80109cc:	4b76      	ldr	r3, [pc, #472]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 80109ce:	685b      	ldr	r3, [r3, #4]
 80109d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	691b      	ldr	r3, [r3, #16]
 80109d8:	061b      	lsls	r3, r3, #24
 80109da:	4973      	ldr	r1, [pc, #460]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 80109dc:	4313      	orrs	r3, r2
 80109de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80109e0:	e040      	b.n	8010a64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	68db      	ldr	r3, [r3, #12]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d023      	beq.n	8010a32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80109ea:	4b6f      	ldr	r3, [pc, #444]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	4a6e      	ldr	r2, [pc, #440]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 80109f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80109f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80109f6:	f7fb f8d5 	bl	800bba4 <HAL_GetTick>
 80109fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80109fc:	e008      	b.n	8010a10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80109fe:	f7fb f8d1 	bl	800bba4 <HAL_GetTick>
 8010a02:	4602      	mov	r2, r0
 8010a04:	693b      	ldr	r3, [r7, #16]
 8010a06:	1ad3      	subs	r3, r2, r3
 8010a08:	2b02      	cmp	r3, #2
 8010a0a:	d901      	bls.n	8010a10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8010a0c:	2303      	movs	r3, #3
 8010a0e:	e25b      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010a10:	4b65      	ldr	r3, [pc, #404]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d0f0      	beq.n	80109fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010a1c:	4b62      	ldr	r3, [pc, #392]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010a1e:	685b      	ldr	r3, [r3, #4]
 8010a20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	691b      	ldr	r3, [r3, #16]
 8010a28:	061b      	lsls	r3, r3, #24
 8010a2a:	495f      	ldr	r1, [pc, #380]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010a2c:	4313      	orrs	r3, r2
 8010a2e:	604b      	str	r3, [r1, #4]
 8010a30:	e018      	b.n	8010a64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010a32:	4b5d      	ldr	r3, [pc, #372]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	4a5c      	ldr	r2, [pc, #368]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010a3e:	f7fb f8b1 	bl	800bba4 <HAL_GetTick>
 8010a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8010a44:	e008      	b.n	8010a58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010a46:	f7fb f8ad 	bl	800bba4 <HAL_GetTick>
 8010a4a:	4602      	mov	r2, r0
 8010a4c:	693b      	ldr	r3, [r7, #16]
 8010a4e:	1ad3      	subs	r3, r2, r3
 8010a50:	2b02      	cmp	r3, #2
 8010a52:	d901      	bls.n	8010a58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8010a54:	2303      	movs	r3, #3
 8010a56:	e237      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8010a58:	4b53      	ldr	r3, [pc, #332]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d1f0      	bne.n	8010a46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	f003 0308 	and.w	r3, r3, #8
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d03c      	beq.n	8010aea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	695b      	ldr	r3, [r3, #20]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d01c      	beq.n	8010ab2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010a78:	4b4b      	ldr	r3, [pc, #300]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010a7e:	4a4a      	ldr	r2, [pc, #296]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010a80:	f043 0301 	orr.w	r3, r3, #1
 8010a84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010a88:	f7fb f88c 	bl	800bba4 <HAL_GetTick>
 8010a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8010a8e:	e008      	b.n	8010aa2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010a90:	f7fb f888 	bl	800bba4 <HAL_GetTick>
 8010a94:	4602      	mov	r2, r0
 8010a96:	693b      	ldr	r3, [r7, #16]
 8010a98:	1ad3      	subs	r3, r2, r3
 8010a9a:	2b02      	cmp	r3, #2
 8010a9c:	d901      	bls.n	8010aa2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8010a9e:	2303      	movs	r3, #3
 8010aa0:	e212      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8010aa2:	4b41      	ldr	r3, [pc, #260]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010aa8:	f003 0302 	and.w	r3, r3, #2
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d0ef      	beq.n	8010a90 <HAL_RCC_OscConfig+0x3ec>
 8010ab0:	e01b      	b.n	8010aea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010ab2:	4b3d      	ldr	r3, [pc, #244]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010ab8:	4a3b      	ldr	r2, [pc, #236]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010aba:	f023 0301 	bic.w	r3, r3, #1
 8010abe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010ac2:	f7fb f86f 	bl	800bba4 <HAL_GetTick>
 8010ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8010ac8:	e008      	b.n	8010adc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010aca:	f7fb f86b 	bl	800bba4 <HAL_GetTick>
 8010ace:	4602      	mov	r2, r0
 8010ad0:	693b      	ldr	r3, [r7, #16]
 8010ad2:	1ad3      	subs	r3, r2, r3
 8010ad4:	2b02      	cmp	r3, #2
 8010ad6:	d901      	bls.n	8010adc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8010ad8:	2303      	movs	r3, #3
 8010ada:	e1f5      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8010adc:	4b32      	ldr	r3, [pc, #200]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010ae2:	f003 0302 	and.w	r3, r3, #2
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d1ef      	bne.n	8010aca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	f003 0304 	and.w	r3, r3, #4
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	f000 80a6 	beq.w	8010c44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010af8:	2300      	movs	r3, #0
 8010afa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8010afc:	4b2a      	ldr	r3, [pc, #168]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d10d      	bne.n	8010b24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010b08:	4b27      	ldr	r3, [pc, #156]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b0c:	4a26      	ldr	r2, [pc, #152]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010b12:	6593      	str	r3, [r2, #88]	; 0x58
 8010b14:	4b24      	ldr	r3, [pc, #144]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010b1c:	60bb      	str	r3, [r7, #8]
 8010b1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010b20:	2301      	movs	r3, #1
 8010b22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010b24:	4b21      	ldr	r3, [pc, #132]	; (8010bac <HAL_RCC_OscConfig+0x508>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d118      	bne.n	8010b62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010b30:	4b1e      	ldr	r3, [pc, #120]	; (8010bac <HAL_RCC_OscConfig+0x508>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	4a1d      	ldr	r2, [pc, #116]	; (8010bac <HAL_RCC_OscConfig+0x508>)
 8010b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010b3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010b3c:	f7fb f832 	bl	800bba4 <HAL_GetTick>
 8010b40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010b42:	e008      	b.n	8010b56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010b44:	f7fb f82e 	bl	800bba4 <HAL_GetTick>
 8010b48:	4602      	mov	r2, r0
 8010b4a:	693b      	ldr	r3, [r7, #16]
 8010b4c:	1ad3      	subs	r3, r2, r3
 8010b4e:	2b02      	cmp	r3, #2
 8010b50:	d901      	bls.n	8010b56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8010b52:	2303      	movs	r3, #3
 8010b54:	e1b8      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8010b56:	4b15      	ldr	r3, [pc, #84]	; (8010bac <HAL_RCC_OscConfig+0x508>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d0f0      	beq.n	8010b44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	689b      	ldr	r3, [r3, #8]
 8010b66:	2b01      	cmp	r3, #1
 8010b68:	d108      	bne.n	8010b7c <HAL_RCC_OscConfig+0x4d8>
 8010b6a:	4b0f      	ldr	r3, [pc, #60]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b70:	4a0d      	ldr	r2, [pc, #52]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010b72:	f043 0301 	orr.w	r3, r3, #1
 8010b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8010b7a:	e029      	b.n	8010bd0 <HAL_RCC_OscConfig+0x52c>
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	689b      	ldr	r3, [r3, #8]
 8010b80:	2b05      	cmp	r3, #5
 8010b82:	d115      	bne.n	8010bb0 <HAL_RCC_OscConfig+0x50c>
 8010b84:	4b08      	ldr	r3, [pc, #32]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b8a:	4a07      	ldr	r2, [pc, #28]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010b8c:	f043 0304 	orr.w	r3, r3, #4
 8010b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8010b94:	4b04      	ldr	r3, [pc, #16]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010b9a:	4a03      	ldr	r2, [pc, #12]	; (8010ba8 <HAL_RCC_OscConfig+0x504>)
 8010b9c:	f043 0301 	orr.w	r3, r3, #1
 8010ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8010ba4:	e014      	b.n	8010bd0 <HAL_RCC_OscConfig+0x52c>
 8010ba6:	bf00      	nop
 8010ba8:	40021000 	.word	0x40021000
 8010bac:	40007000 	.word	0x40007000
 8010bb0:	4b9d      	ldr	r3, [pc, #628]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010bb6:	4a9c      	ldr	r2, [pc, #624]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010bb8:	f023 0301 	bic.w	r3, r3, #1
 8010bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8010bc0:	4b99      	ldr	r3, [pc, #612]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010bc6:	4a98      	ldr	r2, [pc, #608]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010bc8:	f023 0304 	bic.w	r3, r3, #4
 8010bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	689b      	ldr	r3, [r3, #8]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d016      	beq.n	8010c06 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010bd8:	f7fa ffe4 	bl	800bba4 <HAL_GetTick>
 8010bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010bde:	e00a      	b.n	8010bf6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010be0:	f7fa ffe0 	bl	800bba4 <HAL_GetTick>
 8010be4:	4602      	mov	r2, r0
 8010be6:	693b      	ldr	r3, [r7, #16]
 8010be8:	1ad3      	subs	r3, r2, r3
 8010bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8010bee:	4293      	cmp	r3, r2
 8010bf0:	d901      	bls.n	8010bf6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8010bf2:	2303      	movs	r3, #3
 8010bf4:	e168      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010bf6:	4b8c      	ldr	r3, [pc, #560]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010bfc:	f003 0302 	and.w	r3, r3, #2
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d0ed      	beq.n	8010be0 <HAL_RCC_OscConfig+0x53c>
 8010c04:	e015      	b.n	8010c32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010c06:	f7fa ffcd 	bl	800bba4 <HAL_GetTick>
 8010c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8010c0c:	e00a      	b.n	8010c24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010c0e:	f7fa ffc9 	bl	800bba4 <HAL_GetTick>
 8010c12:	4602      	mov	r2, r0
 8010c14:	693b      	ldr	r3, [r7, #16]
 8010c16:	1ad3      	subs	r3, r2, r3
 8010c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c1c:	4293      	cmp	r3, r2
 8010c1e:	d901      	bls.n	8010c24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8010c20:	2303      	movs	r3, #3
 8010c22:	e151      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8010c24:	4b80      	ldr	r3, [pc, #512]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c2a:	f003 0302 	and.w	r3, r3, #2
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d1ed      	bne.n	8010c0e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010c32:	7ffb      	ldrb	r3, [r7, #31]
 8010c34:	2b01      	cmp	r3, #1
 8010c36:	d105      	bne.n	8010c44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010c38:	4b7b      	ldr	r3, [pc, #492]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c3c:	4a7a      	ldr	r2, [pc, #488]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010c42:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	f003 0320 	and.w	r3, r3, #32
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d03c      	beq.n	8010cca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d01c      	beq.n	8010c92 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8010c58:	4b73      	ldr	r3, [pc, #460]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010c5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010c5e:	4a72      	ldr	r2, [pc, #456]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010c60:	f043 0301 	orr.w	r3, r3, #1
 8010c64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010c68:	f7fa ff9c 	bl	800bba4 <HAL_GetTick>
 8010c6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8010c6e:	e008      	b.n	8010c82 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010c70:	f7fa ff98 	bl	800bba4 <HAL_GetTick>
 8010c74:	4602      	mov	r2, r0
 8010c76:	693b      	ldr	r3, [r7, #16]
 8010c78:	1ad3      	subs	r3, r2, r3
 8010c7a:	2b02      	cmp	r3, #2
 8010c7c:	d901      	bls.n	8010c82 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8010c7e:	2303      	movs	r3, #3
 8010c80:	e122      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8010c82:	4b69      	ldr	r3, [pc, #420]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010c84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010c88:	f003 0302 	and.w	r3, r3, #2
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d0ef      	beq.n	8010c70 <HAL_RCC_OscConfig+0x5cc>
 8010c90:	e01b      	b.n	8010cca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8010c92:	4b65      	ldr	r3, [pc, #404]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010c94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010c98:	4a63      	ldr	r2, [pc, #396]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010c9a:	f023 0301 	bic.w	r3, r3, #1
 8010c9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010ca2:	f7fa ff7f 	bl	800bba4 <HAL_GetTick>
 8010ca6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8010ca8:	e008      	b.n	8010cbc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010caa:	f7fa ff7b 	bl	800bba4 <HAL_GetTick>
 8010cae:	4602      	mov	r2, r0
 8010cb0:	693b      	ldr	r3, [r7, #16]
 8010cb2:	1ad3      	subs	r3, r2, r3
 8010cb4:	2b02      	cmp	r3, #2
 8010cb6:	d901      	bls.n	8010cbc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8010cb8:	2303      	movs	r3, #3
 8010cba:	e105      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8010cbc:	4b5a      	ldr	r3, [pc, #360]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010cc2:	f003 0302 	and.w	r3, r3, #2
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d1ef      	bne.n	8010caa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	f000 80f9 	beq.w	8010ec6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cd8:	2b02      	cmp	r3, #2
 8010cda:	f040 80cf 	bne.w	8010e7c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8010cde:	4b52      	ldr	r3, [pc, #328]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010ce0:	68db      	ldr	r3, [r3, #12]
 8010ce2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8010ce4:	697b      	ldr	r3, [r7, #20]
 8010ce6:	f003 0203 	and.w	r2, r3, #3
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d12c      	bne.n	8010d4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8010cf2:	697b      	ldr	r3, [r7, #20]
 8010cf4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cfc:	3b01      	subs	r3, #1
 8010cfe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8010d00:	429a      	cmp	r2, r3
 8010d02:	d123      	bne.n	8010d4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d0e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8010d10:	429a      	cmp	r2, r3
 8010d12:	d11b      	bne.n	8010d4c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8010d14:	697b      	ldr	r3, [r7, #20]
 8010d16:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d1e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8010d20:	429a      	cmp	r2, r3
 8010d22:	d113      	bne.n	8010d4c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d2e:	085b      	lsrs	r3, r3, #1
 8010d30:	3b01      	subs	r3, #1
 8010d32:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d109      	bne.n	8010d4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8010d38:	697b      	ldr	r3, [r7, #20]
 8010d3a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d42:	085b      	lsrs	r3, r3, #1
 8010d44:	3b01      	subs	r3, #1
 8010d46:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8010d48:	429a      	cmp	r2, r3
 8010d4a:	d071      	beq.n	8010e30 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8010d4c:	69bb      	ldr	r3, [r7, #24]
 8010d4e:	2b0c      	cmp	r3, #12
 8010d50:	d068      	beq.n	8010e24 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8010d52:	4b35      	ldr	r3, [pc, #212]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d105      	bne.n	8010d6a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8010d5e:	4b32      	ldr	r3, [pc, #200]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d001      	beq.n	8010d6e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	e0ac      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8010d6e:	4b2e      	ldr	r3, [pc, #184]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	4a2d      	ldr	r2, [pc, #180]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010d74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010d78:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8010d7a:	f7fa ff13 	bl	800bba4 <HAL_GetTick>
 8010d7e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010d80:	e008      	b.n	8010d94 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010d82:	f7fa ff0f 	bl	800bba4 <HAL_GetTick>
 8010d86:	4602      	mov	r2, r0
 8010d88:	693b      	ldr	r3, [r7, #16]
 8010d8a:	1ad3      	subs	r3, r2, r3
 8010d8c:	2b02      	cmp	r3, #2
 8010d8e:	d901      	bls.n	8010d94 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8010d90:	2303      	movs	r3, #3
 8010d92:	e099      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010d94:	4b24      	ldr	r3, [pc, #144]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d1f0      	bne.n	8010d82 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010da0:	4b21      	ldr	r3, [pc, #132]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010da2:	68da      	ldr	r2, [r3, #12]
 8010da4:	4b21      	ldr	r3, [pc, #132]	; (8010e2c <HAL_RCC_OscConfig+0x788>)
 8010da6:	4013      	ands	r3, r2
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8010dac:	687a      	ldr	r2, [r7, #4]
 8010dae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010db0:	3a01      	subs	r2, #1
 8010db2:	0112      	lsls	r2, r2, #4
 8010db4:	4311      	orrs	r1, r2
 8010db6:	687a      	ldr	r2, [r7, #4]
 8010db8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010dba:	0212      	lsls	r2, r2, #8
 8010dbc:	4311      	orrs	r1, r2
 8010dbe:	687a      	ldr	r2, [r7, #4]
 8010dc0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8010dc2:	0852      	lsrs	r2, r2, #1
 8010dc4:	3a01      	subs	r2, #1
 8010dc6:	0552      	lsls	r2, r2, #21
 8010dc8:	4311      	orrs	r1, r2
 8010dca:	687a      	ldr	r2, [r7, #4]
 8010dcc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8010dce:	0852      	lsrs	r2, r2, #1
 8010dd0:	3a01      	subs	r2, #1
 8010dd2:	0652      	lsls	r2, r2, #25
 8010dd4:	4311      	orrs	r1, r2
 8010dd6:	687a      	ldr	r2, [r7, #4]
 8010dd8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010dda:	06d2      	lsls	r2, r2, #27
 8010ddc:	430a      	orrs	r2, r1
 8010dde:	4912      	ldr	r1, [pc, #72]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010de0:	4313      	orrs	r3, r2
 8010de2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8010de4:	4b10      	ldr	r3, [pc, #64]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	4a0f      	ldr	r2, [pc, #60]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010dee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8010df0:	4b0d      	ldr	r3, [pc, #52]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010df2:	68db      	ldr	r3, [r3, #12]
 8010df4:	4a0c      	ldr	r2, [pc, #48]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010dfa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8010dfc:	f7fa fed2 	bl	800bba4 <HAL_GetTick>
 8010e00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010e02:	e008      	b.n	8010e16 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010e04:	f7fa fece 	bl	800bba4 <HAL_GetTick>
 8010e08:	4602      	mov	r2, r0
 8010e0a:	693b      	ldr	r3, [r7, #16]
 8010e0c:	1ad3      	subs	r3, r2, r3
 8010e0e:	2b02      	cmp	r3, #2
 8010e10:	d901      	bls.n	8010e16 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8010e12:	2303      	movs	r3, #3
 8010e14:	e058      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010e16:	4b04      	ldr	r3, [pc, #16]	; (8010e28 <HAL_RCC_OscConfig+0x784>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d0f0      	beq.n	8010e04 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8010e22:	e050      	b.n	8010ec6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8010e24:	2301      	movs	r3, #1
 8010e26:	e04f      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
 8010e28:	40021000 	.word	0x40021000
 8010e2c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010e30:	4b27      	ldr	r3, [pc, #156]	; (8010ed0 <HAL_RCC_OscConfig+0x82c>)
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d144      	bne.n	8010ec6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8010e3c:	4b24      	ldr	r3, [pc, #144]	; (8010ed0 <HAL_RCC_OscConfig+0x82c>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	4a23      	ldr	r2, [pc, #140]	; (8010ed0 <HAL_RCC_OscConfig+0x82c>)
 8010e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010e46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8010e48:	4b21      	ldr	r3, [pc, #132]	; (8010ed0 <HAL_RCC_OscConfig+0x82c>)
 8010e4a:	68db      	ldr	r3, [r3, #12]
 8010e4c:	4a20      	ldr	r2, [pc, #128]	; (8010ed0 <HAL_RCC_OscConfig+0x82c>)
 8010e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010e52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8010e54:	f7fa fea6 	bl	800bba4 <HAL_GetTick>
 8010e58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010e5a:	e008      	b.n	8010e6e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010e5c:	f7fa fea2 	bl	800bba4 <HAL_GetTick>
 8010e60:	4602      	mov	r2, r0
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	1ad3      	subs	r3, r2, r3
 8010e66:	2b02      	cmp	r3, #2
 8010e68:	d901      	bls.n	8010e6e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8010e6a:	2303      	movs	r3, #3
 8010e6c:	e02c      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010e6e:	4b18      	ldr	r3, [pc, #96]	; (8010ed0 <HAL_RCC_OscConfig+0x82c>)
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d0f0      	beq.n	8010e5c <HAL_RCC_OscConfig+0x7b8>
 8010e7a:	e024      	b.n	8010ec6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8010e7c:	69bb      	ldr	r3, [r7, #24]
 8010e7e:	2b0c      	cmp	r3, #12
 8010e80:	d01f      	beq.n	8010ec2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010e82:	4b13      	ldr	r3, [pc, #76]	; (8010ed0 <HAL_RCC_OscConfig+0x82c>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	4a12      	ldr	r2, [pc, #72]	; (8010ed0 <HAL_RCC_OscConfig+0x82c>)
 8010e88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010e8e:	f7fa fe89 	bl	800bba4 <HAL_GetTick>
 8010e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010e94:	e008      	b.n	8010ea8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010e96:	f7fa fe85 	bl	800bba4 <HAL_GetTick>
 8010e9a:	4602      	mov	r2, r0
 8010e9c:	693b      	ldr	r3, [r7, #16]
 8010e9e:	1ad3      	subs	r3, r2, r3
 8010ea0:	2b02      	cmp	r3, #2
 8010ea2:	d901      	bls.n	8010ea8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8010ea4:	2303      	movs	r3, #3
 8010ea6:	e00f      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8010ea8:	4b09      	ldr	r3, [pc, #36]	; (8010ed0 <HAL_RCC_OscConfig+0x82c>)
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d1f0      	bne.n	8010e96 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8010eb4:	4b06      	ldr	r3, [pc, #24]	; (8010ed0 <HAL_RCC_OscConfig+0x82c>)
 8010eb6:	68da      	ldr	r2, [r3, #12]
 8010eb8:	4905      	ldr	r1, [pc, #20]	; (8010ed0 <HAL_RCC_OscConfig+0x82c>)
 8010eba:	4b06      	ldr	r3, [pc, #24]	; (8010ed4 <HAL_RCC_OscConfig+0x830>)
 8010ebc:	4013      	ands	r3, r2
 8010ebe:	60cb      	str	r3, [r1, #12]
 8010ec0:	e001      	b.n	8010ec6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8010ec2:	2301      	movs	r3, #1
 8010ec4:	e000      	b.n	8010ec8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8010ec6:	2300      	movs	r3, #0
}
 8010ec8:	4618      	mov	r0, r3
 8010eca:	3720      	adds	r7, #32
 8010ecc:	46bd      	mov	sp, r7
 8010ece:	bd80      	pop	{r7, pc}
 8010ed0:	40021000 	.word	0x40021000
 8010ed4:	feeefffc 	.word	0xfeeefffc

08010ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b084      	sub	sp, #16
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
 8010ee0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d101      	bne.n	8010eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010ee8:	2301      	movs	r3, #1
 8010eea:	e0e7      	b.n	80110bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010eec:	4b75      	ldr	r3, [pc, #468]	; (80110c4 <HAL_RCC_ClockConfig+0x1ec>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	f003 0307 	and.w	r3, r3, #7
 8010ef4:	683a      	ldr	r2, [r7, #0]
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d910      	bls.n	8010f1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010efa:	4b72      	ldr	r3, [pc, #456]	; (80110c4 <HAL_RCC_ClockConfig+0x1ec>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	f023 0207 	bic.w	r2, r3, #7
 8010f02:	4970      	ldr	r1, [pc, #448]	; (80110c4 <HAL_RCC_ClockConfig+0x1ec>)
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	4313      	orrs	r3, r2
 8010f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010f0a:	4b6e      	ldr	r3, [pc, #440]	; (80110c4 <HAL_RCC_ClockConfig+0x1ec>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	f003 0307 	and.w	r3, r3, #7
 8010f12:	683a      	ldr	r2, [r7, #0]
 8010f14:	429a      	cmp	r2, r3
 8010f16:	d001      	beq.n	8010f1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8010f18:	2301      	movs	r3, #1
 8010f1a:	e0cf      	b.n	80110bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	f003 0302 	and.w	r3, r3, #2
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d010      	beq.n	8010f4a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	689a      	ldr	r2, [r3, #8]
 8010f2c:	4b66      	ldr	r3, [pc, #408]	; (80110c8 <HAL_RCC_ClockConfig+0x1f0>)
 8010f2e:	689b      	ldr	r3, [r3, #8]
 8010f30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010f34:	429a      	cmp	r2, r3
 8010f36:	d908      	bls.n	8010f4a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010f38:	4b63      	ldr	r3, [pc, #396]	; (80110c8 <HAL_RCC_ClockConfig+0x1f0>)
 8010f3a:	689b      	ldr	r3, [r3, #8]
 8010f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	689b      	ldr	r3, [r3, #8]
 8010f44:	4960      	ldr	r1, [pc, #384]	; (80110c8 <HAL_RCC_ClockConfig+0x1f0>)
 8010f46:	4313      	orrs	r3, r2
 8010f48:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	f003 0301 	and.w	r3, r3, #1
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d04c      	beq.n	8010ff0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	2b03      	cmp	r3, #3
 8010f5c:	d107      	bne.n	8010f6e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010f5e:	4b5a      	ldr	r3, [pc, #360]	; (80110c8 <HAL_RCC_ClockConfig+0x1f0>)
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d121      	bne.n	8010fae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	e0a6      	b.n	80110bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	685b      	ldr	r3, [r3, #4]
 8010f72:	2b02      	cmp	r3, #2
 8010f74:	d107      	bne.n	8010f86 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010f76:	4b54      	ldr	r3, [pc, #336]	; (80110c8 <HAL_RCC_ClockConfig+0x1f0>)
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d115      	bne.n	8010fae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8010f82:	2301      	movs	r3, #1
 8010f84:	e09a      	b.n	80110bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	685b      	ldr	r3, [r3, #4]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d107      	bne.n	8010f9e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010f8e:	4b4e      	ldr	r3, [pc, #312]	; (80110c8 <HAL_RCC_ClockConfig+0x1f0>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	f003 0302 	and.w	r3, r3, #2
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d109      	bne.n	8010fae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8010f9a:	2301      	movs	r3, #1
 8010f9c:	e08e      	b.n	80110bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010f9e:	4b4a      	ldr	r3, [pc, #296]	; (80110c8 <HAL_RCC_ClockConfig+0x1f0>)
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d101      	bne.n	8010fae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8010faa:	2301      	movs	r3, #1
 8010fac:	e086      	b.n	80110bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010fae:	4b46      	ldr	r3, [pc, #280]	; (80110c8 <HAL_RCC_ClockConfig+0x1f0>)
 8010fb0:	689b      	ldr	r3, [r3, #8]
 8010fb2:	f023 0203 	bic.w	r2, r3, #3
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	685b      	ldr	r3, [r3, #4]
 8010fba:	4943      	ldr	r1, [pc, #268]	; (80110c8 <HAL_RCC_ClockConfig+0x1f0>)
 8010fbc:	4313      	orrs	r3, r2
 8010fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010fc0:	f7fa fdf0 	bl	800bba4 <HAL_GetTick>
 8010fc4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010fc6:	e00a      	b.n	8010fde <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010fc8:	f7fa fdec 	bl	800bba4 <HAL_GetTick>
 8010fcc:	4602      	mov	r2, r0
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	1ad3      	subs	r3, r2, r3
 8010fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8010fd6:	4293      	cmp	r3, r2
 8010fd8:	d901      	bls.n	8010fde <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8010fda:	2303      	movs	r3, #3
 8010fdc:	e06e      	b.n	80110bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010fde:	4b3a      	ldr	r3, [pc, #232]	; (80110c8 <HAL_RCC_ClockConfig+0x1f0>)
 8010fe0:	689b      	ldr	r3, [r3, #8]
 8010fe2:	f003 020c 	and.w	r2, r3, #12
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	685b      	ldr	r3, [r3, #4]
 8010fea:	009b      	lsls	r3, r3, #2
 8010fec:	429a      	cmp	r2, r3
 8010fee:	d1eb      	bne.n	8010fc8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	f003 0302 	and.w	r3, r3, #2
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d010      	beq.n	801101e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	689a      	ldr	r2, [r3, #8]
 8011000:	4b31      	ldr	r3, [pc, #196]	; (80110c8 <HAL_RCC_ClockConfig+0x1f0>)
 8011002:	689b      	ldr	r3, [r3, #8]
 8011004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011008:	429a      	cmp	r2, r3
 801100a:	d208      	bcs.n	801101e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801100c:	4b2e      	ldr	r3, [pc, #184]	; (80110c8 <HAL_RCC_ClockConfig+0x1f0>)
 801100e:	689b      	ldr	r3, [r3, #8]
 8011010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	689b      	ldr	r3, [r3, #8]
 8011018:	492b      	ldr	r1, [pc, #172]	; (80110c8 <HAL_RCC_ClockConfig+0x1f0>)
 801101a:	4313      	orrs	r3, r2
 801101c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801101e:	4b29      	ldr	r3, [pc, #164]	; (80110c4 <HAL_RCC_ClockConfig+0x1ec>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	f003 0307 	and.w	r3, r3, #7
 8011026:	683a      	ldr	r2, [r7, #0]
 8011028:	429a      	cmp	r2, r3
 801102a:	d210      	bcs.n	801104e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801102c:	4b25      	ldr	r3, [pc, #148]	; (80110c4 <HAL_RCC_ClockConfig+0x1ec>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	f023 0207 	bic.w	r2, r3, #7
 8011034:	4923      	ldr	r1, [pc, #140]	; (80110c4 <HAL_RCC_ClockConfig+0x1ec>)
 8011036:	683b      	ldr	r3, [r7, #0]
 8011038:	4313      	orrs	r3, r2
 801103a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801103c:	4b21      	ldr	r3, [pc, #132]	; (80110c4 <HAL_RCC_ClockConfig+0x1ec>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	f003 0307 	and.w	r3, r3, #7
 8011044:	683a      	ldr	r2, [r7, #0]
 8011046:	429a      	cmp	r2, r3
 8011048:	d001      	beq.n	801104e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 801104a:	2301      	movs	r3, #1
 801104c:	e036      	b.n	80110bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	f003 0304 	and.w	r3, r3, #4
 8011056:	2b00      	cmp	r3, #0
 8011058:	d008      	beq.n	801106c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801105a:	4b1b      	ldr	r3, [pc, #108]	; (80110c8 <HAL_RCC_ClockConfig+0x1f0>)
 801105c:	689b      	ldr	r3, [r3, #8]
 801105e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	68db      	ldr	r3, [r3, #12]
 8011066:	4918      	ldr	r1, [pc, #96]	; (80110c8 <HAL_RCC_ClockConfig+0x1f0>)
 8011068:	4313      	orrs	r3, r2
 801106a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	f003 0308 	and.w	r3, r3, #8
 8011074:	2b00      	cmp	r3, #0
 8011076:	d009      	beq.n	801108c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011078:	4b13      	ldr	r3, [pc, #76]	; (80110c8 <HAL_RCC_ClockConfig+0x1f0>)
 801107a:	689b      	ldr	r3, [r3, #8]
 801107c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	691b      	ldr	r3, [r3, #16]
 8011084:	00db      	lsls	r3, r3, #3
 8011086:	4910      	ldr	r1, [pc, #64]	; (80110c8 <HAL_RCC_ClockConfig+0x1f0>)
 8011088:	4313      	orrs	r3, r2
 801108a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801108c:	f000 f824 	bl	80110d8 <HAL_RCC_GetSysClockFreq>
 8011090:	4602      	mov	r2, r0
 8011092:	4b0d      	ldr	r3, [pc, #52]	; (80110c8 <HAL_RCC_ClockConfig+0x1f0>)
 8011094:	689b      	ldr	r3, [r3, #8]
 8011096:	091b      	lsrs	r3, r3, #4
 8011098:	f003 030f 	and.w	r3, r3, #15
 801109c:	490b      	ldr	r1, [pc, #44]	; (80110cc <HAL_RCC_ClockConfig+0x1f4>)
 801109e:	5ccb      	ldrb	r3, [r1, r3]
 80110a0:	f003 031f 	and.w	r3, r3, #31
 80110a4:	fa22 f303 	lsr.w	r3, r2, r3
 80110a8:	4a09      	ldr	r2, [pc, #36]	; (80110d0 <HAL_RCC_ClockConfig+0x1f8>)
 80110aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80110ac:	4b09      	ldr	r3, [pc, #36]	; (80110d4 <HAL_RCC_ClockConfig+0x1fc>)
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	4618      	mov	r0, r3
 80110b2:	f7fa fd27 	bl	800bb04 <HAL_InitTick>
 80110b6:	4603      	mov	r3, r0
 80110b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80110ba:	7afb      	ldrb	r3, [r7, #11]
}
 80110bc:	4618      	mov	r0, r3
 80110be:	3710      	adds	r7, #16
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bd80      	pop	{r7, pc}
 80110c4:	40022000 	.word	0x40022000
 80110c8:	40021000 	.word	0x40021000
 80110cc:	0801afd0 	.word	0x0801afd0
 80110d0:	20000194 	.word	0x20000194
 80110d4:	20000550 	.word	0x20000550

080110d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80110d8:	b480      	push	{r7}
 80110da:	b089      	sub	sp, #36	; 0x24
 80110dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80110de:	2300      	movs	r3, #0
 80110e0:	61fb      	str	r3, [r7, #28]
 80110e2:	2300      	movs	r3, #0
 80110e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80110e6:	4b3e      	ldr	r3, [pc, #248]	; (80111e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80110e8:	689b      	ldr	r3, [r3, #8]
 80110ea:	f003 030c 	and.w	r3, r3, #12
 80110ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80110f0:	4b3b      	ldr	r3, [pc, #236]	; (80111e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80110f2:	68db      	ldr	r3, [r3, #12]
 80110f4:	f003 0303 	and.w	r3, r3, #3
 80110f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80110fa:	693b      	ldr	r3, [r7, #16]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d005      	beq.n	801110c <HAL_RCC_GetSysClockFreq+0x34>
 8011100:	693b      	ldr	r3, [r7, #16]
 8011102:	2b0c      	cmp	r3, #12
 8011104:	d121      	bne.n	801114a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	2b01      	cmp	r3, #1
 801110a:	d11e      	bne.n	801114a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 801110c:	4b34      	ldr	r3, [pc, #208]	; (80111e0 <HAL_RCC_GetSysClockFreq+0x108>)
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	f003 0308 	and.w	r3, r3, #8
 8011114:	2b00      	cmp	r3, #0
 8011116:	d107      	bne.n	8011128 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8011118:	4b31      	ldr	r3, [pc, #196]	; (80111e0 <HAL_RCC_GetSysClockFreq+0x108>)
 801111a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801111e:	0a1b      	lsrs	r3, r3, #8
 8011120:	f003 030f 	and.w	r3, r3, #15
 8011124:	61fb      	str	r3, [r7, #28]
 8011126:	e005      	b.n	8011134 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8011128:	4b2d      	ldr	r3, [pc, #180]	; (80111e0 <HAL_RCC_GetSysClockFreq+0x108>)
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	091b      	lsrs	r3, r3, #4
 801112e:	f003 030f 	and.w	r3, r3, #15
 8011132:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8011134:	4a2b      	ldr	r2, [pc, #172]	; (80111e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8011136:	69fb      	ldr	r3, [r7, #28]
 8011138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801113c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801113e:	693b      	ldr	r3, [r7, #16]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d10d      	bne.n	8011160 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8011144:	69fb      	ldr	r3, [r7, #28]
 8011146:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8011148:	e00a      	b.n	8011160 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 801114a:	693b      	ldr	r3, [r7, #16]
 801114c:	2b04      	cmp	r3, #4
 801114e:	d102      	bne.n	8011156 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8011150:	4b25      	ldr	r3, [pc, #148]	; (80111e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8011152:	61bb      	str	r3, [r7, #24]
 8011154:	e004      	b.n	8011160 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8011156:	693b      	ldr	r3, [r7, #16]
 8011158:	2b08      	cmp	r3, #8
 801115a:	d101      	bne.n	8011160 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801115c:	4b23      	ldr	r3, [pc, #140]	; (80111ec <HAL_RCC_GetSysClockFreq+0x114>)
 801115e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8011160:	693b      	ldr	r3, [r7, #16]
 8011162:	2b0c      	cmp	r3, #12
 8011164:	d134      	bne.n	80111d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8011166:	4b1e      	ldr	r3, [pc, #120]	; (80111e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8011168:	68db      	ldr	r3, [r3, #12]
 801116a:	f003 0303 	and.w	r3, r3, #3
 801116e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	2b02      	cmp	r3, #2
 8011174:	d003      	beq.n	801117e <HAL_RCC_GetSysClockFreq+0xa6>
 8011176:	68bb      	ldr	r3, [r7, #8]
 8011178:	2b03      	cmp	r3, #3
 801117a:	d003      	beq.n	8011184 <HAL_RCC_GetSysClockFreq+0xac>
 801117c:	e005      	b.n	801118a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 801117e:	4b1a      	ldr	r3, [pc, #104]	; (80111e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8011180:	617b      	str	r3, [r7, #20]
      break;
 8011182:	e005      	b.n	8011190 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8011184:	4b19      	ldr	r3, [pc, #100]	; (80111ec <HAL_RCC_GetSysClockFreq+0x114>)
 8011186:	617b      	str	r3, [r7, #20]
      break;
 8011188:	e002      	b.n	8011190 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 801118a:	69fb      	ldr	r3, [r7, #28]
 801118c:	617b      	str	r3, [r7, #20]
      break;
 801118e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8011190:	4b13      	ldr	r3, [pc, #76]	; (80111e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8011192:	68db      	ldr	r3, [r3, #12]
 8011194:	091b      	lsrs	r3, r3, #4
 8011196:	f003 0307 	and.w	r3, r3, #7
 801119a:	3301      	adds	r3, #1
 801119c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 801119e:	4b10      	ldr	r3, [pc, #64]	; (80111e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80111a0:	68db      	ldr	r3, [r3, #12]
 80111a2:	0a1b      	lsrs	r3, r3, #8
 80111a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111a8:	697a      	ldr	r2, [r7, #20]
 80111aa:	fb03 f202 	mul.w	r2, r3, r2
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80111b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80111b6:	4b0a      	ldr	r3, [pc, #40]	; (80111e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80111b8:	68db      	ldr	r3, [r3, #12]
 80111ba:	0e5b      	lsrs	r3, r3, #25
 80111bc:	f003 0303 	and.w	r3, r3, #3
 80111c0:	3301      	adds	r3, #1
 80111c2:	005b      	lsls	r3, r3, #1
 80111c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80111c6:	697a      	ldr	r2, [r7, #20]
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80111ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80111d0:	69bb      	ldr	r3, [r7, #24]
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	3724      	adds	r7, #36	; 0x24
 80111d6:	46bd      	mov	sp, r7
 80111d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111dc:	4770      	bx	lr
 80111de:	bf00      	nop
 80111e0:	40021000 	.word	0x40021000
 80111e4:	0801afe8 	.word	0x0801afe8
 80111e8:	00f42400 	.word	0x00f42400
 80111ec:	007a1200 	.word	0x007a1200

080111f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80111f0:	b480      	push	{r7}
 80111f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80111f4:	4b03      	ldr	r3, [pc, #12]	; (8011204 <HAL_RCC_GetHCLKFreq+0x14>)
 80111f6:	681b      	ldr	r3, [r3, #0]
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	46bd      	mov	sp, r7
 80111fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011200:	4770      	bx	lr
 8011202:	bf00      	nop
 8011204:	20000194 	.word	0x20000194

08011208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801120c:	f7ff fff0 	bl	80111f0 <HAL_RCC_GetHCLKFreq>
 8011210:	4602      	mov	r2, r0
 8011212:	4b06      	ldr	r3, [pc, #24]	; (801122c <HAL_RCC_GetPCLK1Freq+0x24>)
 8011214:	689b      	ldr	r3, [r3, #8]
 8011216:	0a1b      	lsrs	r3, r3, #8
 8011218:	f003 0307 	and.w	r3, r3, #7
 801121c:	4904      	ldr	r1, [pc, #16]	; (8011230 <HAL_RCC_GetPCLK1Freq+0x28>)
 801121e:	5ccb      	ldrb	r3, [r1, r3]
 8011220:	f003 031f 	and.w	r3, r3, #31
 8011224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011228:	4618      	mov	r0, r3
 801122a:	bd80      	pop	{r7, pc}
 801122c:	40021000 	.word	0x40021000
 8011230:	0801afe0 	.word	0x0801afe0

08011234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8011238:	f7ff ffda 	bl	80111f0 <HAL_RCC_GetHCLKFreq>
 801123c:	4602      	mov	r2, r0
 801123e:	4b06      	ldr	r3, [pc, #24]	; (8011258 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011240:	689b      	ldr	r3, [r3, #8]
 8011242:	0adb      	lsrs	r3, r3, #11
 8011244:	f003 0307 	and.w	r3, r3, #7
 8011248:	4904      	ldr	r1, [pc, #16]	; (801125c <HAL_RCC_GetPCLK2Freq+0x28>)
 801124a:	5ccb      	ldrb	r3, [r1, r3]
 801124c:	f003 031f 	and.w	r3, r3, #31
 8011250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011254:	4618      	mov	r0, r3
 8011256:	bd80      	pop	{r7, pc}
 8011258:	40021000 	.word	0x40021000
 801125c:	0801afe0 	.word	0x0801afe0

08011260 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b086      	sub	sp, #24
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8011268:	2300      	movs	r3, #0
 801126a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 801126c:	4b2a      	ldr	r3, [pc, #168]	; (8011318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801126e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011274:	2b00      	cmp	r3, #0
 8011276:	d003      	beq.n	8011280 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8011278:	f7ff f886 	bl	8010388 <HAL_PWREx_GetVoltageRange>
 801127c:	6178      	str	r0, [r7, #20]
 801127e:	e014      	b.n	80112aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8011280:	4b25      	ldr	r3, [pc, #148]	; (8011318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8011282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011284:	4a24      	ldr	r2, [pc, #144]	; (8011318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8011286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801128a:	6593      	str	r3, [r2, #88]	; 0x58
 801128c:	4b22      	ldr	r3, [pc, #136]	; (8011318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801128e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011294:	60fb      	str	r3, [r7, #12]
 8011296:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8011298:	f7ff f876 	bl	8010388 <HAL_PWREx_GetVoltageRange>
 801129c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 801129e:	4b1e      	ldr	r3, [pc, #120]	; (8011318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80112a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80112a2:	4a1d      	ldr	r2, [pc, #116]	; (8011318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80112a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80112a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80112b0:	d10b      	bne.n	80112ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	2b80      	cmp	r3, #128	; 0x80
 80112b6:	d919      	bls.n	80112ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	2ba0      	cmp	r3, #160	; 0xa0
 80112bc:	d902      	bls.n	80112c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80112be:	2302      	movs	r3, #2
 80112c0:	613b      	str	r3, [r7, #16]
 80112c2:	e013      	b.n	80112ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80112c4:	2301      	movs	r3, #1
 80112c6:	613b      	str	r3, [r7, #16]
 80112c8:	e010      	b.n	80112ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	2b80      	cmp	r3, #128	; 0x80
 80112ce:	d902      	bls.n	80112d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80112d0:	2303      	movs	r3, #3
 80112d2:	613b      	str	r3, [r7, #16]
 80112d4:	e00a      	b.n	80112ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	2b80      	cmp	r3, #128	; 0x80
 80112da:	d102      	bne.n	80112e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80112dc:	2302      	movs	r3, #2
 80112de:	613b      	str	r3, [r7, #16]
 80112e0:	e004      	b.n	80112ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	2b70      	cmp	r3, #112	; 0x70
 80112e6:	d101      	bne.n	80112ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80112e8:	2301      	movs	r3, #1
 80112ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80112ec:	4b0b      	ldr	r3, [pc, #44]	; (801131c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	f023 0207 	bic.w	r2, r3, #7
 80112f4:	4909      	ldr	r1, [pc, #36]	; (801131c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80112f6:	693b      	ldr	r3, [r7, #16]
 80112f8:	4313      	orrs	r3, r2
 80112fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80112fc:	4b07      	ldr	r3, [pc, #28]	; (801131c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	f003 0307 	and.w	r3, r3, #7
 8011304:	693a      	ldr	r2, [r7, #16]
 8011306:	429a      	cmp	r2, r3
 8011308:	d001      	beq.n	801130e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 801130a:	2301      	movs	r3, #1
 801130c:	e000      	b.n	8011310 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 801130e:	2300      	movs	r3, #0
}
 8011310:	4618      	mov	r0, r3
 8011312:	3718      	adds	r7, #24
 8011314:	46bd      	mov	sp, r7
 8011316:	bd80      	pop	{r7, pc}
 8011318:	40021000 	.word	0x40021000
 801131c:	40022000 	.word	0x40022000

08011320 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b086      	sub	sp, #24
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8011328:	2300      	movs	r3, #0
 801132a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801132c:	2300      	movs	r3, #0
 801132e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011338:	2b00      	cmp	r3, #0
 801133a:	d041      	beq.n	80113c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011340:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8011344:	d02a      	beq.n	801139c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8011346:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801134a:	d824      	bhi.n	8011396 <HAL_RCCEx_PeriphCLKConfig+0x76>
 801134c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011350:	d008      	beq.n	8011364 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8011352:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011356:	d81e      	bhi.n	8011396 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8011358:	2b00      	cmp	r3, #0
 801135a:	d00a      	beq.n	8011372 <HAL_RCCEx_PeriphCLKConfig+0x52>
 801135c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011360:	d010      	beq.n	8011384 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8011362:	e018      	b.n	8011396 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8011364:	4b86      	ldr	r3, [pc, #536]	; (8011580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011366:	68db      	ldr	r3, [r3, #12]
 8011368:	4a85      	ldr	r2, [pc, #532]	; (8011580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801136a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801136e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8011370:	e015      	b.n	801139e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	3304      	adds	r3, #4
 8011376:	2100      	movs	r1, #0
 8011378:	4618      	mov	r0, r3
 801137a:	f001 f895 	bl	80124a8 <RCCEx_PLLSAI1_Config>
 801137e:	4603      	mov	r3, r0
 8011380:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8011382:	e00c      	b.n	801139e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	3320      	adds	r3, #32
 8011388:	2100      	movs	r1, #0
 801138a:	4618      	mov	r0, r3
 801138c:	f001 f97e 	bl	801268c <RCCEx_PLLSAI2_Config>
 8011390:	4603      	mov	r3, r0
 8011392:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8011394:	e003      	b.n	801139e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011396:	2301      	movs	r3, #1
 8011398:	74fb      	strb	r3, [r7, #19]
      break;
 801139a:	e000      	b.n	801139e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 801139c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801139e:	7cfb      	ldrb	r3, [r7, #19]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d10b      	bne.n	80113bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80113a4:	4b76      	ldr	r3, [pc, #472]	; (8011580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80113a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80113aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80113b2:	4973      	ldr	r1, [pc, #460]	; (8011580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80113b4:	4313      	orrs	r3, r2
 80113b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80113ba:	e001      	b.n	80113c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80113bc:	7cfb      	ldrb	r3, [r7, #19]
 80113be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d041      	beq.n	8011450 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80113d4:	d02a      	beq.n	801142c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80113d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80113da:	d824      	bhi.n	8011426 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80113dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80113e0:	d008      	beq.n	80113f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80113e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80113e6:	d81e      	bhi.n	8011426 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d00a      	beq.n	8011402 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80113ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80113f0:	d010      	beq.n	8011414 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80113f2:	e018      	b.n	8011426 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80113f4:	4b62      	ldr	r3, [pc, #392]	; (8011580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80113f6:	68db      	ldr	r3, [r3, #12]
 80113f8:	4a61      	ldr	r2, [pc, #388]	; (8011580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80113fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80113fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8011400:	e015      	b.n	801142e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	3304      	adds	r3, #4
 8011406:	2100      	movs	r1, #0
 8011408:	4618      	mov	r0, r3
 801140a:	f001 f84d 	bl	80124a8 <RCCEx_PLLSAI1_Config>
 801140e:	4603      	mov	r3, r0
 8011410:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8011412:	e00c      	b.n	801142e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	3320      	adds	r3, #32
 8011418:	2100      	movs	r1, #0
 801141a:	4618      	mov	r0, r3
 801141c:	f001 f936 	bl	801268c <RCCEx_PLLSAI2_Config>
 8011420:	4603      	mov	r3, r0
 8011422:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8011424:	e003      	b.n	801142e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8011426:	2301      	movs	r3, #1
 8011428:	74fb      	strb	r3, [r7, #19]
      break;
 801142a:	e000      	b.n	801142e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 801142c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801142e:	7cfb      	ldrb	r3, [r7, #19]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d10b      	bne.n	801144c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8011434:	4b52      	ldr	r3, [pc, #328]	; (8011580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801143a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011442:	494f      	ldr	r1, [pc, #316]	; (8011580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011444:	4313      	orrs	r3, r2
 8011446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 801144a:	e001      	b.n	8011450 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801144c:	7cfb      	ldrb	r3, [r7, #19]
 801144e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011458:	2b00      	cmp	r3, #0
 801145a:	f000 80a0 	beq.w	801159e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801145e:	2300      	movs	r3, #0
 8011460:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8011462:	4b47      	ldr	r3, [pc, #284]	; (8011580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801146a:	2b00      	cmp	r3, #0
 801146c:	d101      	bne.n	8011472 <HAL_RCCEx_PeriphCLKConfig+0x152>
 801146e:	2301      	movs	r3, #1
 8011470:	e000      	b.n	8011474 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8011472:	2300      	movs	r3, #0
 8011474:	2b00      	cmp	r3, #0
 8011476:	d00d      	beq.n	8011494 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011478:	4b41      	ldr	r3, [pc, #260]	; (8011580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801147a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801147c:	4a40      	ldr	r2, [pc, #256]	; (8011580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801147e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011482:	6593      	str	r3, [r2, #88]	; 0x58
 8011484:	4b3e      	ldr	r3, [pc, #248]	; (8011580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801148c:	60bb      	str	r3, [r7, #8]
 801148e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011490:	2301      	movs	r3, #1
 8011492:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011494:	4b3b      	ldr	r3, [pc, #236]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	4a3a      	ldr	r2, [pc, #232]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 801149a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801149e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80114a0:	f7fa fb80 	bl	800bba4 <HAL_GetTick>
 80114a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80114a6:	e009      	b.n	80114bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80114a8:	f7fa fb7c 	bl	800bba4 <HAL_GetTick>
 80114ac:	4602      	mov	r2, r0
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	1ad3      	subs	r3, r2, r3
 80114b2:	2b02      	cmp	r3, #2
 80114b4:	d902      	bls.n	80114bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80114b6:	2303      	movs	r3, #3
 80114b8:	74fb      	strb	r3, [r7, #19]
        break;
 80114ba:	e005      	b.n	80114c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80114bc:	4b31      	ldr	r3, [pc, #196]	; (8011584 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d0ef      	beq.n	80114a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80114c8:	7cfb      	ldrb	r3, [r7, #19]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d15c      	bne.n	8011588 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80114ce:	4b2c      	ldr	r3, [pc, #176]	; (8011580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80114d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80114d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80114d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80114da:	697b      	ldr	r3, [r7, #20]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d01f      	beq.n	8011520 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80114e6:	697a      	ldr	r2, [r7, #20]
 80114e8:	429a      	cmp	r2, r3
 80114ea:	d019      	beq.n	8011520 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80114ec:	4b24      	ldr	r3, [pc, #144]	; (8011580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80114ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80114f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80114f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80114f8:	4b21      	ldr	r3, [pc, #132]	; (8011580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80114fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80114fe:	4a20      	ldr	r2, [pc, #128]	; (8011580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011508:	4b1d      	ldr	r3, [pc, #116]	; (8011580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801150a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801150e:	4a1c      	ldr	r2, [pc, #112]	; (8011580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8011518:	4a19      	ldr	r2, [pc, #100]	; (8011580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801151a:	697b      	ldr	r3, [r7, #20]
 801151c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8011520:	697b      	ldr	r3, [r7, #20]
 8011522:	f003 0301 	and.w	r3, r3, #1
 8011526:	2b00      	cmp	r3, #0
 8011528:	d016      	beq.n	8011558 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801152a:	f7fa fb3b 	bl	800bba4 <HAL_GetTick>
 801152e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8011530:	e00b      	b.n	801154a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011532:	f7fa fb37 	bl	800bba4 <HAL_GetTick>
 8011536:	4602      	mov	r2, r0
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	1ad3      	subs	r3, r2, r3
 801153c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011540:	4293      	cmp	r3, r2
 8011542:	d902      	bls.n	801154a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8011544:	2303      	movs	r3, #3
 8011546:	74fb      	strb	r3, [r7, #19]
            break;
 8011548:	e006      	b.n	8011558 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801154a:	4b0d      	ldr	r3, [pc, #52]	; (8011580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801154c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011550:	f003 0302 	and.w	r3, r3, #2
 8011554:	2b00      	cmp	r3, #0
 8011556:	d0ec      	beq.n	8011532 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8011558:	7cfb      	ldrb	r3, [r7, #19]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d10c      	bne.n	8011578 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801155e:	4b08      	ldr	r3, [pc, #32]	; (8011580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011564:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801156e:	4904      	ldr	r1, [pc, #16]	; (8011580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8011570:	4313      	orrs	r3, r2
 8011572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8011576:	e009      	b.n	801158c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8011578:	7cfb      	ldrb	r3, [r7, #19]
 801157a:	74bb      	strb	r3, [r7, #18]
 801157c:	e006      	b.n	801158c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 801157e:	bf00      	nop
 8011580:	40021000 	.word	0x40021000
 8011584:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011588:	7cfb      	ldrb	r3, [r7, #19]
 801158a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801158c:	7c7b      	ldrb	r3, [r7, #17]
 801158e:	2b01      	cmp	r3, #1
 8011590:	d105      	bne.n	801159e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011592:	4ba6      	ldr	r3, [pc, #664]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011596:	4aa5      	ldr	r2, [pc, #660]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801159c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	f003 0301 	and.w	r3, r3, #1
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d00a      	beq.n	80115c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80115aa:	4ba0      	ldr	r3, [pc, #640]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80115ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80115b0:	f023 0203 	bic.w	r2, r3, #3
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115b8:	499c      	ldr	r1, [pc, #624]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80115ba:	4313      	orrs	r3, r2
 80115bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	f003 0302 	and.w	r3, r3, #2
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d00a      	beq.n	80115e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80115cc:	4b97      	ldr	r3, [pc, #604]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80115ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80115d2:	f023 020c 	bic.w	r2, r3, #12
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115da:	4994      	ldr	r1, [pc, #592]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80115dc:	4313      	orrs	r3, r2
 80115de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	f003 0304 	and.w	r3, r3, #4
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d00a      	beq.n	8011604 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80115ee:	4b8f      	ldr	r3, [pc, #572]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80115f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80115f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115fc:	498b      	ldr	r1, [pc, #556]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80115fe:	4313      	orrs	r3, r2
 8011600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	f003 0308 	and.w	r3, r3, #8
 801160c:	2b00      	cmp	r3, #0
 801160e:	d00a      	beq.n	8011626 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8011610:	4b86      	ldr	r3, [pc, #536]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011616:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801161e:	4983      	ldr	r1, [pc, #524]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011620:	4313      	orrs	r3, r2
 8011622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	f003 0310 	and.w	r3, r3, #16
 801162e:	2b00      	cmp	r3, #0
 8011630:	d00a      	beq.n	8011648 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8011632:	4b7e      	ldr	r3, [pc, #504]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011638:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011640:	497a      	ldr	r1, [pc, #488]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011642:	4313      	orrs	r3, r2
 8011644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	f003 0320 	and.w	r3, r3, #32
 8011650:	2b00      	cmp	r3, #0
 8011652:	d00a      	beq.n	801166a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8011654:	4b75      	ldr	r3, [pc, #468]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801165a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011662:	4972      	ldr	r1, [pc, #456]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011664:	4313      	orrs	r3, r2
 8011666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011672:	2b00      	cmp	r3, #0
 8011674:	d00a      	beq.n	801168c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011676:	4b6d      	ldr	r3, [pc, #436]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801167c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011684:	4969      	ldr	r1, [pc, #420]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011686:	4313      	orrs	r3, r2
 8011688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011694:	2b00      	cmp	r3, #0
 8011696:	d00a      	beq.n	80116ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8011698:	4b64      	ldr	r3, [pc, #400]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801169a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801169e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80116a6:	4961      	ldr	r1, [pc, #388]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80116a8:	4313      	orrs	r3, r2
 80116aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d00a      	beq.n	80116d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80116ba:	4b5c      	ldr	r3, [pc, #368]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80116bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80116c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116c8:	4958      	ldr	r1, [pc, #352]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80116ca:	4313      	orrs	r3, r2
 80116cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d00a      	beq.n	80116f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80116dc:	4b53      	ldr	r3, [pc, #332]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80116de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80116e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116ea:	4950      	ldr	r1, [pc, #320]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80116ec:	4313      	orrs	r3, r2
 80116ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d00a      	beq.n	8011714 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80116fe:	4b4b      	ldr	r3, [pc, #300]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011704:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801170c:	4947      	ldr	r1, [pc, #284]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801170e:	4313      	orrs	r3, r2
 8011710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801171c:	2b00      	cmp	r3, #0
 801171e:	d00a      	beq.n	8011736 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8011720:	4b42      	ldr	r3, [pc, #264]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011722:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011726:	f023 0203 	bic.w	r2, r3, #3
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801172e:	493f      	ldr	r1, [pc, #252]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011730:	4313      	orrs	r3, r2
 8011732:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801173e:	2b00      	cmp	r3, #0
 8011740:	d028      	beq.n	8011794 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011742:	4b3a      	ldr	r3, [pc, #232]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011748:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011750:	4936      	ldr	r1, [pc, #216]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011752:	4313      	orrs	r3, r2
 8011754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801175c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011760:	d106      	bne.n	8011770 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8011762:	4b32      	ldr	r3, [pc, #200]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011764:	68db      	ldr	r3, [r3, #12]
 8011766:	4a31      	ldr	r2, [pc, #196]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011768:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801176c:	60d3      	str	r3, [r2, #12]
 801176e:	e011      	b.n	8011794 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011774:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011778:	d10c      	bne.n	8011794 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	3304      	adds	r3, #4
 801177e:	2101      	movs	r1, #1
 8011780:	4618      	mov	r0, r3
 8011782:	f000 fe91 	bl	80124a8 <RCCEx_PLLSAI1_Config>
 8011786:	4603      	mov	r3, r0
 8011788:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 801178a:	7cfb      	ldrb	r3, [r7, #19]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d001      	beq.n	8011794 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8011790:	7cfb      	ldrb	r3, [r7, #19]
 8011792:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801179c:	2b00      	cmp	r3, #0
 801179e:	d028      	beq.n	80117f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80117a0:	4b22      	ldr	r3, [pc, #136]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80117a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80117a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117ae:	491f      	ldr	r1, [pc, #124]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80117b0:	4313      	orrs	r3, r2
 80117b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80117be:	d106      	bne.n	80117ce <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80117c0:	4b1a      	ldr	r3, [pc, #104]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80117c2:	68db      	ldr	r3, [r3, #12]
 80117c4:	4a19      	ldr	r2, [pc, #100]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80117c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80117ca:	60d3      	str	r3, [r2, #12]
 80117cc:	e011      	b.n	80117f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80117d6:	d10c      	bne.n	80117f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	3304      	adds	r3, #4
 80117dc:	2101      	movs	r1, #1
 80117de:	4618      	mov	r0, r3
 80117e0:	f000 fe62 	bl	80124a8 <RCCEx_PLLSAI1_Config>
 80117e4:	4603      	mov	r3, r0
 80117e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80117e8:	7cfb      	ldrb	r3, [r7, #19]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d001      	beq.n	80117f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80117ee:	7cfb      	ldrb	r3, [r7, #19]
 80117f0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d02a      	beq.n	8011854 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80117fe:	4b0b      	ldr	r3, [pc, #44]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011804:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801180c:	4907      	ldr	r1, [pc, #28]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 801180e:	4313      	orrs	r3, r2
 8011810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011818:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801181c:	d108      	bne.n	8011830 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801181e:	4b03      	ldr	r3, [pc, #12]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011820:	68db      	ldr	r3, [r3, #12]
 8011822:	4a02      	ldr	r2, [pc, #8]	; (801182c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8011824:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011828:	60d3      	str	r3, [r2, #12]
 801182a:	e013      	b.n	8011854 <HAL_RCCEx_PeriphCLKConfig+0x534>
 801182c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011834:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011838:	d10c      	bne.n	8011854 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	3304      	adds	r3, #4
 801183e:	2101      	movs	r1, #1
 8011840:	4618      	mov	r0, r3
 8011842:	f000 fe31 	bl	80124a8 <RCCEx_PLLSAI1_Config>
 8011846:	4603      	mov	r3, r0
 8011848:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801184a:	7cfb      	ldrb	r3, [r7, #19]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d001      	beq.n	8011854 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8011850:	7cfb      	ldrb	r3, [r7, #19]
 8011852:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801185c:	2b00      	cmp	r3, #0
 801185e:	d02f      	beq.n	80118c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8011860:	4b2c      	ldr	r3, [pc, #176]	; (8011914 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8011862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011866:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801186e:	4929      	ldr	r1, [pc, #164]	; (8011914 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8011870:	4313      	orrs	r3, r2
 8011872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801187a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801187e:	d10d      	bne.n	801189c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	3304      	adds	r3, #4
 8011884:	2102      	movs	r1, #2
 8011886:	4618      	mov	r0, r3
 8011888:	f000 fe0e 	bl	80124a8 <RCCEx_PLLSAI1_Config>
 801188c:	4603      	mov	r3, r0
 801188e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8011890:	7cfb      	ldrb	r3, [r7, #19]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d014      	beq.n	80118c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8011896:	7cfb      	ldrb	r3, [r7, #19]
 8011898:	74bb      	strb	r3, [r7, #18]
 801189a:	e011      	b.n	80118c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80118a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80118a4:	d10c      	bne.n	80118c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	3320      	adds	r3, #32
 80118aa:	2102      	movs	r1, #2
 80118ac:	4618      	mov	r0, r3
 80118ae:	f000 feed 	bl	801268c <RCCEx_PLLSAI2_Config>
 80118b2:	4603      	mov	r3, r0
 80118b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80118b6:	7cfb      	ldrb	r3, [r7, #19]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d001      	beq.n	80118c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80118bc:	7cfb      	ldrb	r3, [r7, #19]
 80118be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d00b      	beq.n	80118e4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80118cc:	4b11      	ldr	r3, [pc, #68]	; (8011914 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80118ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80118d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80118dc:	490d      	ldr	r1, [pc, #52]	; (8011914 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80118de:	4313      	orrs	r3, r2
 80118e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d00b      	beq.n	8011908 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80118f0:	4b08      	ldr	r3, [pc, #32]	; (8011914 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80118f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80118f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011900:	4904      	ldr	r1, [pc, #16]	; (8011914 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8011902:	4313      	orrs	r3, r2
 8011904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8011908:	7cbb      	ldrb	r3, [r7, #18]
}
 801190a:	4618      	mov	r0, r3
 801190c:	3718      	adds	r7, #24
 801190e:	46bd      	mov	sp, r7
 8011910:	bd80      	pop	{r7, pc}
 8011912:	bf00      	nop
 8011914:	40021000 	.word	0x40021000

08011918 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b088      	sub	sp, #32
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8011920:	2300      	movs	r3, #0
 8011922:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801192a:	d13e      	bne.n	80119aa <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 801192c:	4bb4      	ldr	r3, [pc, #720]	; (8011c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 801192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011936:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8011938:	693b      	ldr	r3, [r7, #16]
 801193a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801193e:	d028      	beq.n	8011992 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8011940:	693b      	ldr	r3, [r7, #16]
 8011942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011946:	f200 858c 	bhi.w	8012462 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 801194a:	693b      	ldr	r3, [r7, #16]
 801194c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011950:	d005      	beq.n	801195e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8011952:	693b      	ldr	r3, [r7, #16]
 8011954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011958:	d00e      	beq.n	8011978 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 801195a:	f000 bd82 	b.w	8012462 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 801195e:	4ba8      	ldr	r3, [pc, #672]	; (8011c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011964:	f003 0302 	and.w	r3, r3, #2
 8011968:	2b02      	cmp	r3, #2
 801196a:	f040 857c 	bne.w	8012466 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 801196e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011972:	61fb      	str	r3, [r7, #28]
      break;
 8011974:	f000 bd77 	b.w	8012466 <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8011978:	4ba1      	ldr	r3, [pc, #644]	; (8011c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 801197a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801197e:	f003 0302 	and.w	r3, r3, #2
 8011982:	2b02      	cmp	r3, #2
 8011984:	f040 8571 	bne.w	801246a <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 8011988:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 801198c:	61fb      	str	r3, [r7, #28]
      break;
 801198e:	f000 bd6c 	b.w	801246a <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011992:	4b9b      	ldr	r3, [pc, #620]	; (8011c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801199a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801199e:	f040 8566 	bne.w	801246e <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 80119a2:	4b98      	ldr	r3, [pc, #608]	; (8011c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80119a4:	61fb      	str	r3, [r7, #28]
      break;
 80119a6:	f000 bd62 	b.w	801246e <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80119aa:	4b95      	ldr	r3, [pc, #596]	; (8011c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80119ac:	68db      	ldr	r3, [r3, #12]
 80119ae:	f003 0303 	and.w	r3, r3, #3
 80119b2:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80119b4:	697b      	ldr	r3, [r7, #20]
 80119b6:	2b03      	cmp	r3, #3
 80119b8:	d036      	beq.n	8011a28 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80119ba:	697b      	ldr	r3, [r7, #20]
 80119bc:	2b03      	cmp	r3, #3
 80119be:	d840      	bhi.n	8011a42 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	2b01      	cmp	r3, #1
 80119c4:	d003      	beq.n	80119ce <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80119c6:	697b      	ldr	r3, [r7, #20]
 80119c8:	2b02      	cmp	r3, #2
 80119ca:	d020      	beq.n	8011a0e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80119cc:	e039      	b.n	8011a42 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80119ce:	4b8c      	ldr	r3, [pc, #560]	; (8011c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	f003 0302 	and.w	r3, r3, #2
 80119d6:	2b02      	cmp	r3, #2
 80119d8:	d116      	bne.n	8011a08 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80119da:	4b89      	ldr	r3, [pc, #548]	; (8011c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	f003 0308 	and.w	r3, r3, #8
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d005      	beq.n	80119f2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80119e6:	4b86      	ldr	r3, [pc, #536]	; (8011c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	091b      	lsrs	r3, r3, #4
 80119ec:	f003 030f 	and.w	r3, r3, #15
 80119f0:	e005      	b.n	80119fe <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80119f2:	4b83      	ldr	r3, [pc, #524]	; (8011c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80119f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80119f8:	0a1b      	lsrs	r3, r3, #8
 80119fa:	f003 030f 	and.w	r3, r3, #15
 80119fe:	4a82      	ldr	r2, [pc, #520]	; (8011c08 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8011a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a04:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8011a06:	e01f      	b.n	8011a48 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8011a08:	2300      	movs	r3, #0
 8011a0a:	61bb      	str	r3, [r7, #24]
      break;
 8011a0c:	e01c      	b.n	8011a48 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011a0e:	4b7c      	ldr	r3, [pc, #496]	; (8011c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011a1a:	d102      	bne.n	8011a22 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8011a1c:	4b7b      	ldr	r3, [pc, #492]	; (8011c0c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8011a1e:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8011a20:	e012      	b.n	8011a48 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8011a22:	2300      	movs	r3, #0
 8011a24:	61bb      	str	r3, [r7, #24]
      break;
 8011a26:	e00f      	b.n	8011a48 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011a28:	4b75      	ldr	r3, [pc, #468]	; (8011c00 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011a30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011a34:	d102      	bne.n	8011a3c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8011a36:	4b76      	ldr	r3, [pc, #472]	; (8011c10 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8011a38:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8011a3a:	e005      	b.n	8011a48 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	61bb      	str	r3, [r7, #24]
      break;
 8011a40:	e002      	b.n	8011a48 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8011a42:	2300      	movs	r3, #0
 8011a44:	61bb      	str	r3, [r7, #24]
      break;
 8011a46:	bf00      	nop
    }

    switch(PeriphClk)
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011a4e:	f000 842a 	beq.w	80122a6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011a58:	f200 850b 	bhi.w	8012472 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8011a62:	f000 80df 	beq.w	8011c24 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8011a6c:	f200 8501 	bhi.w	8012472 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011a76:	f000 80d5 	beq.w	8011c24 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011a80:	f200 84f7 	bhi.w	8012472 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a8a:	f000 8377 	beq.w	801217c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011a94:	f200 84ed 	bhi.w	8012472 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011a9e:	f000 84c3 	beq.w	8012428 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011aa8:	f200 84e3 	bhi.w	8012472 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011ab2:	f000 82e6 	beq.w	8012082 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011abc:	f200 84d9 	bhi.w	8012472 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011ac6:	f000 80ad 	beq.w	8011c24 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011ad0:	f200 84cf 	bhi.w	8012472 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ada:	f000 809b 	beq.w	8011c14 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ae4:	f200 84c5 	bhi.w	8012472 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011aee:	d07f      	beq.n	8011bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011af6:	f200 84bc 	bhi.w	8012472 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011b00:	f000 8448 	beq.w	8012394 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011b0a:	f200 84b2 	bhi.w	8012472 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b14:	f000 83f0 	beq.w	80122f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b1e:	f200 84a8 	bhi.w	8012472 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011b28:	f000 8391 	beq.w	801224e <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011b32:	f200 849e 	bhi.w	8012472 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2b80      	cmp	r3, #128	; 0x80
 8011b3a:	f000 835c 	beq.w	80121f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	2b80      	cmp	r3, #128	; 0x80
 8011b42:	f200 8496 	bhi.w	8012472 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	2b20      	cmp	r3, #32
 8011b4a:	d84b      	bhi.n	8011be4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	f000 848f 	beq.w	8012472 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	3b01      	subs	r3, #1
 8011b58:	2b1f      	cmp	r3, #31
 8011b5a:	f200 848a 	bhi.w	8012472 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8011b5e:	a201      	add	r2, pc, #4	; (adr r2, 8011b64 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 8011b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b64:	08011d7b 	.word	0x08011d7b
 8011b68:	08011deb 	.word	0x08011deb
 8011b6c:	08012473 	.word	0x08012473
 8011b70:	08011e7f 	.word	0x08011e7f
 8011b74:	08012473 	.word	0x08012473
 8011b78:	08012473 	.word	0x08012473
 8011b7c:	08012473 	.word	0x08012473
 8011b80:	08011f07 	.word	0x08011f07
 8011b84:	08012473 	.word	0x08012473
 8011b88:	08012473 	.word	0x08012473
 8011b8c:	08012473 	.word	0x08012473
 8011b90:	08012473 	.word	0x08012473
 8011b94:	08012473 	.word	0x08012473
 8011b98:	08012473 	.word	0x08012473
 8011b9c:	08012473 	.word	0x08012473
 8011ba0:	08011f7f 	.word	0x08011f7f
 8011ba4:	08012473 	.word	0x08012473
 8011ba8:	08012473 	.word	0x08012473
 8011bac:	08012473 	.word	0x08012473
 8011bb0:	08012473 	.word	0x08012473
 8011bb4:	08012473 	.word	0x08012473
 8011bb8:	08012473 	.word	0x08012473
 8011bbc:	08012473 	.word	0x08012473
 8011bc0:	08012473 	.word	0x08012473
 8011bc4:	08012473 	.word	0x08012473
 8011bc8:	08012473 	.word	0x08012473
 8011bcc:	08012473 	.word	0x08012473
 8011bd0:	08012473 	.word	0x08012473
 8011bd4:	08012473 	.word	0x08012473
 8011bd8:	08012473 	.word	0x08012473
 8011bdc:	08012473 	.word	0x08012473
 8011be0:	08012001 	.word	0x08012001
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	2b40      	cmp	r3, #64	; 0x40
 8011be8:	f000 82d9 	beq.w	801219e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8011bec:	f000 bc41 	b.w	8012472 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8011bf0:	69b9      	ldr	r1, [r7, #24]
 8011bf2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011bf6:	f000 fe25 	bl	8012844 <RCCEx_GetSAIxPeriphCLKFreq>
 8011bfa:	61f8      	str	r0, [r7, #28]
      break;
 8011bfc:	f000 bc3a 	b.w	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8011c00:	40021000 	.word	0x40021000
 8011c04:	0003d090 	.word	0x0003d090
 8011c08:	0801afe8 	.word	0x0801afe8
 8011c0c:	00f42400 	.word	0x00f42400
 8011c10:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8011c14:	69b9      	ldr	r1, [r7, #24]
 8011c16:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8011c1a:	f000 fe13 	bl	8012844 <RCCEx_GetSAIxPeriphCLKFreq>
 8011c1e:	61f8      	str	r0, [r7, #28]
      break;
 8011c20:	f000 bc28 	b.w	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8011c24:	4ba6      	ldr	r3, [pc, #664]	; (8011ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c2a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8011c2e:	613b      	str	r3, [r7, #16]
 8011c30:	693b      	ldr	r3, [r7, #16]
 8011c32:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8011c36:	d015      	beq.n	8011c64 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8011c38:	693b      	ldr	r3, [r7, #16]
 8011c3a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8011c3e:	f200 8092 	bhi.w	8011d66 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011c48:	d029      	beq.n	8011c9e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8011c4a:	693b      	ldr	r3, [r7, #16]
 8011c4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011c50:	f200 8089 	bhi.w	8011d66 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d07b      	beq.n	8011d52 <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 8011c5a:	693b      	ldr	r3, [r7, #16]
 8011c5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011c60:	d04a      	beq.n	8011cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 8011c62:	e080      	b.n	8011d66 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8011c64:	4b96      	ldr	r3, [pc, #600]	; (8011ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	f003 0302 	and.w	r3, r3, #2
 8011c6c:	2b02      	cmp	r3, #2
 8011c6e:	d17c      	bne.n	8011d6a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8011c70:	4b93      	ldr	r3, [pc, #588]	; (8011ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	f003 0308 	and.w	r3, r3, #8
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d005      	beq.n	8011c88 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8011c7c:	4b90      	ldr	r3, [pc, #576]	; (8011ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	091b      	lsrs	r3, r3, #4
 8011c82:	f003 030f 	and.w	r3, r3, #15
 8011c86:	e005      	b.n	8011c94 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8011c88:	4b8d      	ldr	r3, [pc, #564]	; (8011ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011c8e:	0a1b      	lsrs	r3, r3, #8
 8011c90:	f003 030f 	and.w	r3, r3, #15
 8011c94:	4a8b      	ldr	r2, [pc, #556]	; (8011ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8011c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c9a:	61fb      	str	r3, [r7, #28]
          break;
 8011c9c:	e065      	b.n	8011d6a <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8011c9e:	4b88      	ldr	r3, [pc, #544]	; (8011ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011ca6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011caa:	d160      	bne.n	8011d6e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8011cac:	4b84      	ldr	r3, [pc, #528]	; (8011ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011cae:	68db      	ldr	r3, [r3, #12]
 8011cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011cb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011cb8:	d159      	bne.n	8011d6e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8011cba:	4b81      	ldr	r3, [pc, #516]	; (8011ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011cbc:	68db      	ldr	r3, [r3, #12]
 8011cbe:	0a1b      	lsrs	r3, r3, #8
 8011cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011cc4:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8011cc6:	69bb      	ldr	r3, [r7, #24]
 8011cc8:	68fa      	ldr	r2, [r7, #12]
 8011cca:	fb03 f202 	mul.w	r2, r3, r2
 8011cce:	4b7c      	ldr	r3, [pc, #496]	; (8011ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011cd0:	68db      	ldr	r3, [r3, #12]
 8011cd2:	091b      	lsrs	r3, r3, #4
 8011cd4:	f003 0307 	and.w	r3, r3, #7
 8011cd8:	3301      	adds	r3, #1
 8011cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8011cde:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8011ce0:	4b77      	ldr	r3, [pc, #476]	; (8011ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011ce2:	68db      	ldr	r3, [r3, #12]
 8011ce4:	0d5b      	lsrs	r3, r3, #21
 8011ce6:	f003 0303 	and.w	r3, r3, #3
 8011cea:	3301      	adds	r3, #1
 8011cec:	005b      	lsls	r3, r3, #1
 8011cee:	69ba      	ldr	r2, [r7, #24]
 8011cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8011cf4:	61fb      	str	r3, [r7, #28]
          break;
 8011cf6:	e03a      	b.n	8011d6e <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8011cf8:	4b71      	ldr	r3, [pc, #452]	; (8011ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011d00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011d04:	d135      	bne.n	8011d72 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8011d06:	4b6e      	ldr	r3, [pc, #440]	; (8011ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011d08:	691b      	ldr	r3, [r3, #16]
 8011d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011d0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011d12:	d12e      	bne.n	8011d72 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8011d14:	4b6a      	ldr	r3, [pc, #424]	; (8011ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011d16:	691b      	ldr	r3, [r3, #16]
 8011d18:	0a1b      	lsrs	r3, r3, #8
 8011d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d1e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8011d20:	69bb      	ldr	r3, [r7, #24]
 8011d22:	68fa      	ldr	r2, [r7, #12]
 8011d24:	fb03 f202 	mul.w	r2, r3, r2
 8011d28:	4b65      	ldr	r3, [pc, #404]	; (8011ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011d2a:	68db      	ldr	r3, [r3, #12]
 8011d2c:	091b      	lsrs	r3, r3, #4
 8011d2e:	f003 0307 	and.w	r3, r3, #7
 8011d32:	3301      	adds	r3, #1
 8011d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d38:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8011d3a:	4b61      	ldr	r3, [pc, #388]	; (8011ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011d3c:	691b      	ldr	r3, [r3, #16]
 8011d3e:	0d5b      	lsrs	r3, r3, #21
 8011d40:	f003 0303 	and.w	r3, r3, #3
 8011d44:	3301      	adds	r3, #1
 8011d46:	005b      	lsls	r3, r3, #1
 8011d48:	69ba      	ldr	r2, [r7, #24]
 8011d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d4e:	61fb      	str	r3, [r7, #28]
          break;
 8011d50:	e00f      	b.n	8011d72 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8011d52:	4b5b      	ldr	r3, [pc, #364]	; (8011ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011d54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011d58:	f003 0302 	and.w	r3, r3, #2
 8011d5c:	2b02      	cmp	r3, #2
 8011d5e:	d10a      	bne.n	8011d76 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 8011d60:	4b59      	ldr	r3, [pc, #356]	; (8011ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8011d62:	61fb      	str	r3, [r7, #28]
          break;
 8011d64:	e007      	b.n	8011d76 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 8011d66:	bf00      	nop
 8011d68:	e384      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011d6a:	bf00      	nop
 8011d6c:	e382      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011d6e:	bf00      	nop
 8011d70:	e380      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011d72:	bf00      	nop
 8011d74:	e37e      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011d76:	bf00      	nop
        break;
 8011d78:	e37c      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8011d7a:	4b51      	ldr	r3, [pc, #324]	; (8011ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d80:	f003 0303 	and.w	r3, r3, #3
 8011d84:	613b      	str	r3, [r7, #16]
 8011d86:	693b      	ldr	r3, [r7, #16]
 8011d88:	2b03      	cmp	r3, #3
 8011d8a:	d828      	bhi.n	8011dde <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 8011d8c:	a201      	add	r2, pc, #4	; (adr r2, 8011d94 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8011d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d92:	bf00      	nop
 8011d94:	08011da5 	.word	0x08011da5
 8011d98:	08011dad 	.word	0x08011dad
 8011d9c:	08011db5 	.word	0x08011db5
 8011da0:	08011dc9 	.word	0x08011dc9
          frequency = HAL_RCC_GetPCLK2Freq();
 8011da4:	f7ff fa46 	bl	8011234 <HAL_RCC_GetPCLK2Freq>
 8011da8:	61f8      	str	r0, [r7, #28]
          break;
 8011daa:	e01d      	b.n	8011de8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 8011dac:	f7ff f994 	bl	80110d8 <HAL_RCC_GetSysClockFreq>
 8011db0:	61f8      	str	r0, [r7, #28]
          break;
 8011db2:	e019      	b.n	8011de8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011db4:	4b42      	ldr	r3, [pc, #264]	; (8011ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011dc0:	d10f      	bne.n	8011de2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 8011dc2:	4b42      	ldr	r3, [pc, #264]	; (8011ecc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8011dc4:	61fb      	str	r3, [r7, #28]
          break;
 8011dc6:	e00c      	b.n	8011de2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011dc8:	4b3d      	ldr	r3, [pc, #244]	; (8011ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011dce:	f003 0302 	and.w	r3, r3, #2
 8011dd2:	2b02      	cmp	r3, #2
 8011dd4:	d107      	bne.n	8011de6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 8011dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011dda:	61fb      	str	r3, [r7, #28]
          break;
 8011ddc:	e003      	b.n	8011de6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 8011dde:	bf00      	nop
 8011de0:	e348      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011de2:	bf00      	nop
 8011de4:	e346      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011de6:	bf00      	nop
        break;
 8011de8:	e344      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8011dea:	4b35      	ldr	r3, [pc, #212]	; (8011ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011df0:	f003 030c 	and.w	r3, r3, #12
 8011df4:	613b      	str	r3, [r7, #16]
 8011df6:	693b      	ldr	r3, [r7, #16]
 8011df8:	2b0c      	cmp	r3, #12
 8011dfa:	d83a      	bhi.n	8011e72 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 8011dfc:	a201      	add	r2, pc, #4	; (adr r2, 8011e04 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8011dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e02:	bf00      	nop
 8011e04:	08011e39 	.word	0x08011e39
 8011e08:	08011e73 	.word	0x08011e73
 8011e0c:	08011e73 	.word	0x08011e73
 8011e10:	08011e73 	.word	0x08011e73
 8011e14:	08011e41 	.word	0x08011e41
 8011e18:	08011e73 	.word	0x08011e73
 8011e1c:	08011e73 	.word	0x08011e73
 8011e20:	08011e73 	.word	0x08011e73
 8011e24:	08011e49 	.word	0x08011e49
 8011e28:	08011e73 	.word	0x08011e73
 8011e2c:	08011e73 	.word	0x08011e73
 8011e30:	08011e73 	.word	0x08011e73
 8011e34:	08011e5d 	.word	0x08011e5d
          frequency = HAL_RCC_GetPCLK1Freq();
 8011e38:	f7ff f9e6 	bl	8011208 <HAL_RCC_GetPCLK1Freq>
 8011e3c:	61f8      	str	r0, [r7, #28]
          break;
 8011e3e:	e01d      	b.n	8011e7c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 8011e40:	f7ff f94a 	bl	80110d8 <HAL_RCC_GetSysClockFreq>
 8011e44:	61f8      	str	r0, [r7, #28]
          break;
 8011e46:	e019      	b.n	8011e7c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011e48:	4b1d      	ldr	r3, [pc, #116]	; (8011ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011e54:	d10f      	bne.n	8011e76 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 8011e56:	4b1d      	ldr	r3, [pc, #116]	; (8011ecc <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8011e58:	61fb      	str	r3, [r7, #28]
          break;
 8011e5a:	e00c      	b.n	8011e76 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011e5c:	4b18      	ldr	r3, [pc, #96]	; (8011ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e62:	f003 0302 	and.w	r3, r3, #2
 8011e66:	2b02      	cmp	r3, #2
 8011e68:	d107      	bne.n	8011e7a <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 8011e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011e6e:	61fb      	str	r3, [r7, #28]
          break;
 8011e70:	e003      	b.n	8011e7a <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 8011e72:	bf00      	nop
 8011e74:	e2fe      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011e76:	bf00      	nop
 8011e78:	e2fc      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011e7a:	bf00      	nop
        break;
 8011e7c:	e2fa      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8011e7e:	4b10      	ldr	r3, [pc, #64]	; (8011ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8011e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011e84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011e88:	613b      	str	r3, [r7, #16]
 8011e8a:	693b      	ldr	r3, [r7, #16]
 8011e8c:	2b30      	cmp	r3, #48	; 0x30
 8011e8e:	d029      	beq.n	8011ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8011e90:	693b      	ldr	r3, [r7, #16]
 8011e92:	2b30      	cmp	r3, #48	; 0x30
 8011e94:	d831      	bhi.n	8011efa <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8011e96:	693b      	ldr	r3, [r7, #16]
 8011e98:	2b20      	cmp	r3, #32
 8011e9a:	d019      	beq.n	8011ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8011e9c:	693b      	ldr	r3, [r7, #16]
 8011e9e:	2b20      	cmp	r3, #32
 8011ea0:	d82b      	bhi.n	8011efa <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8011ea2:	693b      	ldr	r3, [r7, #16]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d003      	beq.n	8011eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8011ea8:	693b      	ldr	r3, [r7, #16]
 8011eaa:	2b10      	cmp	r3, #16
 8011eac:	d004      	beq.n	8011eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 8011eae:	e024      	b.n	8011efa <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8011eb0:	f7ff f9aa 	bl	8011208 <HAL_RCC_GetPCLK1Freq>
 8011eb4:	61f8      	str	r0, [r7, #28]
          break;
 8011eb6:	e025      	b.n	8011f04 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8011eb8:	f7ff f90e 	bl	80110d8 <HAL_RCC_GetSysClockFreq>
 8011ebc:	61f8      	str	r0, [r7, #28]
          break;
 8011ebe:	e021      	b.n	8011f04 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8011ec0:	40021000 	.word	0x40021000
 8011ec4:	0801afe8 	.word	0x0801afe8
 8011ec8:	02dc6c00 	.word	0x02dc6c00
 8011ecc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011ed0:	4b8f      	ldr	r3, [pc, #572]	; (8012110 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011edc:	d10f      	bne.n	8011efe <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 8011ede:	4b8d      	ldr	r3, [pc, #564]	; (8012114 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8011ee0:	61fb      	str	r3, [r7, #28]
          break;
 8011ee2:	e00c      	b.n	8011efe <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011ee4:	4b8a      	ldr	r3, [pc, #552]	; (8012110 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011eea:	f003 0302 	and.w	r3, r3, #2
 8011eee:	2b02      	cmp	r3, #2
 8011ef0:	d107      	bne.n	8011f02 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 8011ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011ef6:	61fb      	str	r3, [r7, #28]
          break;
 8011ef8:	e003      	b.n	8011f02 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 8011efa:	bf00      	nop
 8011efc:	e2ba      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011efe:	bf00      	nop
 8011f00:	e2b8      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011f02:	bf00      	nop
        break;
 8011f04:	e2b6      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8011f06:	4b82      	ldr	r3, [pc, #520]	; (8012110 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011f0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011f10:	613b      	str	r3, [r7, #16]
 8011f12:	693b      	ldr	r3, [r7, #16]
 8011f14:	2bc0      	cmp	r3, #192	; 0xc0
 8011f16:	d021      	beq.n	8011f5c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8011f18:	693b      	ldr	r3, [r7, #16]
 8011f1a:	2bc0      	cmp	r3, #192	; 0xc0
 8011f1c:	d829      	bhi.n	8011f72 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8011f1e:	693b      	ldr	r3, [r7, #16]
 8011f20:	2b80      	cmp	r3, #128	; 0x80
 8011f22:	d011      	beq.n	8011f48 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8011f24:	693b      	ldr	r3, [r7, #16]
 8011f26:	2b80      	cmp	r3, #128	; 0x80
 8011f28:	d823      	bhi.n	8011f72 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8011f2a:	693b      	ldr	r3, [r7, #16]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d003      	beq.n	8011f38 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8011f30:	693b      	ldr	r3, [r7, #16]
 8011f32:	2b40      	cmp	r3, #64	; 0x40
 8011f34:	d004      	beq.n	8011f40 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 8011f36:	e01c      	b.n	8011f72 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8011f38:	f7ff f966 	bl	8011208 <HAL_RCC_GetPCLK1Freq>
 8011f3c:	61f8      	str	r0, [r7, #28]
          break;
 8011f3e:	e01d      	b.n	8011f7c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 8011f40:	f7ff f8ca 	bl	80110d8 <HAL_RCC_GetSysClockFreq>
 8011f44:	61f8      	str	r0, [r7, #28]
          break;
 8011f46:	e019      	b.n	8011f7c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011f48:	4b71      	ldr	r3, [pc, #452]	; (8012110 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011f54:	d10f      	bne.n	8011f76 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 8011f56:	4b6f      	ldr	r3, [pc, #444]	; (8012114 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8011f58:	61fb      	str	r3, [r7, #28]
          break;
 8011f5a:	e00c      	b.n	8011f76 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011f5c:	4b6c      	ldr	r3, [pc, #432]	; (8012110 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f62:	f003 0302 	and.w	r3, r3, #2
 8011f66:	2b02      	cmp	r3, #2
 8011f68:	d107      	bne.n	8011f7a <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 8011f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011f6e:	61fb      	str	r3, [r7, #28]
          break;
 8011f70:	e003      	b.n	8011f7a <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 8011f72:	bf00      	nop
 8011f74:	e27e      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011f76:	bf00      	nop
 8011f78:	e27c      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011f7a:	bf00      	nop
        break;
 8011f7c:	e27a      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8011f7e:	4b64      	ldr	r3, [pc, #400]	; (8012110 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011f84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011f88:	613b      	str	r3, [r7, #16]
 8011f8a:	693b      	ldr	r3, [r7, #16]
 8011f8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011f90:	d025      	beq.n	8011fde <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 8011f92:	693b      	ldr	r3, [r7, #16]
 8011f94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011f98:	d82c      	bhi.n	8011ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8011f9a:	693b      	ldr	r3, [r7, #16]
 8011f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011fa0:	d013      	beq.n	8011fca <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8011fa2:	693b      	ldr	r3, [r7, #16]
 8011fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011fa8:	d824      	bhi.n	8011ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8011faa:	693b      	ldr	r3, [r7, #16]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d004      	beq.n	8011fba <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8011fb0:	693b      	ldr	r3, [r7, #16]
 8011fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011fb6:	d004      	beq.n	8011fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 8011fb8:	e01c      	b.n	8011ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8011fba:	f7ff f925 	bl	8011208 <HAL_RCC_GetPCLK1Freq>
 8011fbe:	61f8      	str	r0, [r7, #28]
          break;
 8011fc0:	e01d      	b.n	8011ffe <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 8011fc2:	f7ff f889 	bl	80110d8 <HAL_RCC_GetSysClockFreq>
 8011fc6:	61f8      	str	r0, [r7, #28]
          break;
 8011fc8:	e019      	b.n	8011ffe <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011fca:	4b51      	ldr	r3, [pc, #324]	; (8012110 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011fd6:	d10f      	bne.n	8011ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 8011fd8:	4b4e      	ldr	r3, [pc, #312]	; (8012114 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8011fda:	61fb      	str	r3, [r7, #28]
          break;
 8011fdc:	e00c      	b.n	8011ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8011fde:	4b4c      	ldr	r3, [pc, #304]	; (8012110 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8011fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011fe4:	f003 0302 	and.w	r3, r3, #2
 8011fe8:	2b02      	cmp	r3, #2
 8011fea:	d107      	bne.n	8011ffc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 8011fec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011ff0:	61fb      	str	r3, [r7, #28]
          break;
 8011ff2:	e003      	b.n	8011ffc <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 8011ff4:	bf00      	nop
 8011ff6:	e23d      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011ff8:	bf00      	nop
 8011ffa:	e23b      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8011ffc:	bf00      	nop
        break;
 8011ffe:	e239      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8012000:	4b43      	ldr	r3, [pc, #268]	; (8012110 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8012002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012006:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801200a:	613b      	str	r3, [r7, #16]
 801200c:	693b      	ldr	r3, [r7, #16]
 801200e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012012:	d025      	beq.n	8012060 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8012014:	693b      	ldr	r3, [r7, #16]
 8012016:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801201a:	d82c      	bhi.n	8012076 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 801201c:	693b      	ldr	r3, [r7, #16]
 801201e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012022:	d013      	beq.n	801204c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8012024:	693b      	ldr	r3, [r7, #16]
 8012026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801202a:	d824      	bhi.n	8012076 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 801202c:	693b      	ldr	r3, [r7, #16]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d004      	beq.n	801203c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012038:	d004      	beq.n	8012044 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 801203a:	e01c      	b.n	8012076 <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 801203c:	f7ff f8e4 	bl	8011208 <HAL_RCC_GetPCLK1Freq>
 8012040:	61f8      	str	r0, [r7, #28]
          break;
 8012042:	e01d      	b.n	8012080 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 8012044:	f7ff f848 	bl	80110d8 <HAL_RCC_GetSysClockFreq>
 8012048:	61f8      	str	r0, [r7, #28]
          break;
 801204a:	e019      	b.n	8012080 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801204c:	4b30      	ldr	r3, [pc, #192]	; (8012110 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012058:	d10f      	bne.n	801207a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 801205a:	4b2e      	ldr	r3, [pc, #184]	; (8012114 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 801205c:	61fb      	str	r3, [r7, #28]
          break;
 801205e:	e00c      	b.n	801207a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8012060:	4b2b      	ldr	r3, [pc, #172]	; (8012110 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8012062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012066:	f003 0302 	and.w	r3, r3, #2
 801206a:	2b02      	cmp	r3, #2
 801206c:	d107      	bne.n	801207e <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 801206e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012072:	61fb      	str	r3, [r7, #28]
          break;
 8012074:	e003      	b.n	801207e <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 8012076:	bf00      	nop
 8012078:	e1fc      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801207a:	bf00      	nop
 801207c:	e1fa      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801207e:	bf00      	nop
        break;
 8012080:	e1f8      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8012082:	4b23      	ldr	r3, [pc, #140]	; (8012110 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8012084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012088:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801208c:	613b      	str	r3, [r7, #16]
 801208e:	693b      	ldr	r3, [r7, #16]
 8012090:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8012094:	d00c      	beq.n	80120b0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 8012096:	693b      	ldr	r3, [r7, #16]
 8012098:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801209c:	d868      	bhi.n	8012170 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 801209e:	693b      	ldr	r3, [r7, #16]
 80120a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80120a4:	d008      	beq.n	80120b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80120a6:	693b      	ldr	r3, [r7, #16]
 80120a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80120ac:	d034      	beq.n	8012118 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 80120ae:	e05f      	b.n	8012170 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 80120b0:	f7ff f812 	bl	80110d8 <HAL_RCC_GetSysClockFreq>
 80120b4:	61f8      	str	r0, [r7, #28]
          break;
 80120b6:	e060      	b.n	801217a <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80120b8:	4b15      	ldr	r3, [pc, #84]	; (8012110 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80120c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80120c4:	d156      	bne.n	8012174 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 80120c6:	4b12      	ldr	r3, [pc, #72]	; (8012110 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80120c8:	691b      	ldr	r3, [r3, #16]
 80120ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d050      	beq.n	8012174 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80120d2:	4b0f      	ldr	r3, [pc, #60]	; (8012110 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80120d4:	691b      	ldr	r3, [r3, #16]
 80120d6:	0a1b      	lsrs	r3, r3, #8
 80120d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80120dc:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80120de:	69bb      	ldr	r3, [r7, #24]
 80120e0:	68fa      	ldr	r2, [r7, #12]
 80120e2:	fb03 f202 	mul.w	r2, r3, r2
 80120e6:	4b0a      	ldr	r3, [pc, #40]	; (8012110 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80120e8:	68db      	ldr	r3, [r3, #12]
 80120ea:	091b      	lsrs	r3, r3, #4
 80120ec:	f003 0307 	and.w	r3, r3, #7
 80120f0:	3301      	adds	r3, #1
 80120f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80120f6:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80120f8:	4b05      	ldr	r3, [pc, #20]	; (8012110 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 80120fa:	691b      	ldr	r3, [r3, #16]
 80120fc:	0e5b      	lsrs	r3, r3, #25
 80120fe:	f003 0303 	and.w	r3, r3, #3
 8012102:	3301      	adds	r3, #1
 8012104:	005b      	lsls	r3, r3, #1
 8012106:	69ba      	ldr	r2, [r7, #24]
 8012108:	fbb2 f3f3 	udiv	r3, r2, r3
 801210c:	61fb      	str	r3, [r7, #28]
          break;
 801210e:	e031      	b.n	8012174 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8012110:	40021000 	.word	0x40021000
 8012114:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8012118:	4b9c      	ldr	r3, [pc, #624]	; (801238c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012124:	d128      	bne.n	8012178 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 8012126:	4b99      	ldr	r3, [pc, #612]	; (801238c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012128:	695b      	ldr	r3, [r3, #20]
 801212a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801212e:	2b00      	cmp	r3, #0
 8012130:	d022      	beq.n	8012178 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8012132:	4b96      	ldr	r3, [pc, #600]	; (801238c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012134:	695b      	ldr	r3, [r3, #20]
 8012136:	0a1b      	lsrs	r3, r3, #8
 8012138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801213c:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 801213e:	69bb      	ldr	r3, [r7, #24]
 8012140:	68fa      	ldr	r2, [r7, #12]
 8012142:	fb03 f202 	mul.w	r2, r3, r2
 8012146:	4b91      	ldr	r3, [pc, #580]	; (801238c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012148:	68db      	ldr	r3, [r3, #12]
 801214a:	091b      	lsrs	r3, r3, #4
 801214c:	f003 0307 	and.w	r3, r3, #7
 8012150:	3301      	adds	r3, #1
 8012152:	fbb2 f3f3 	udiv	r3, r2, r3
 8012156:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8012158:	4b8c      	ldr	r3, [pc, #560]	; (801238c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801215a:	695b      	ldr	r3, [r3, #20]
 801215c:	0e5b      	lsrs	r3, r3, #25
 801215e:	f003 0303 	and.w	r3, r3, #3
 8012162:	3301      	adds	r3, #1
 8012164:	005b      	lsls	r3, r3, #1
 8012166:	69ba      	ldr	r2, [r7, #24]
 8012168:	fbb2 f3f3 	udiv	r3, r2, r3
 801216c:	61fb      	str	r3, [r7, #28]
          break;
 801216e:	e003      	b.n	8012178 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 8012170:	bf00      	nop
 8012172:	e17f      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012174:	bf00      	nop
 8012176:	e17d      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012178:	bf00      	nop
        break;
 801217a:	e17b      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 801217c:	4b83      	ldr	r3, [pc, #524]	; (801238c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012186:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8012188:	693b      	ldr	r3, [r7, #16]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d103      	bne.n	8012196 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 801218e:	f7ff f851 	bl	8011234 <HAL_RCC_GetPCLK2Freq>
 8012192:	61f8      	str	r0, [r7, #28]
        break;
 8012194:	e16e      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 8012196:	f7fe ff9f 	bl	80110d8 <HAL_RCC_GetSysClockFreq>
 801219a:	61f8      	str	r0, [r7, #28]
        break;
 801219c:	e16a      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 801219e:	4b7b      	ldr	r3, [pc, #492]	; (801238c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80121a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80121a4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80121a8:	613b      	str	r3, [r7, #16]
 80121aa:	693b      	ldr	r3, [r7, #16]
 80121ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80121b0:	d013      	beq.n	80121da <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 80121b2:	693b      	ldr	r3, [r7, #16]
 80121b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80121b8:	d819      	bhi.n	80121ee <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80121ba:	693b      	ldr	r3, [r7, #16]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d004      	beq.n	80121ca <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 80121c0:	693b      	ldr	r3, [r7, #16]
 80121c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80121c6:	d004      	beq.n	80121d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 80121c8:	e011      	b.n	80121ee <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 80121ca:	f7ff f81d 	bl	8011208 <HAL_RCC_GetPCLK1Freq>
 80121ce:	61f8      	str	r0, [r7, #28]
          break;
 80121d0:	e010      	b.n	80121f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 80121d2:	f7fe ff81 	bl	80110d8 <HAL_RCC_GetSysClockFreq>
 80121d6:	61f8      	str	r0, [r7, #28]
          break;
 80121d8:	e00c      	b.n	80121f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80121da:	4b6c      	ldr	r3, [pc, #432]	; (801238c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80121e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80121e6:	d104      	bne.n	80121f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 80121e8:	4b69      	ldr	r3, [pc, #420]	; (8012390 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 80121ea:	61fb      	str	r3, [r7, #28]
          break;
 80121ec:	e001      	b.n	80121f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 80121ee:	bf00      	nop
 80121f0:	e140      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80121f2:	bf00      	nop
        break;
 80121f4:	e13e      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80121f6:	4b65      	ldr	r3, [pc, #404]	; (801238c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80121f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80121fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012200:	613b      	str	r3, [r7, #16]
 8012202:	693b      	ldr	r3, [r7, #16]
 8012204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012208:	d013      	beq.n	8012232 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 801220a:	693b      	ldr	r3, [r7, #16]
 801220c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012210:	d819      	bhi.n	8012246 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8012212:	693b      	ldr	r3, [r7, #16]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d004      	beq.n	8012222 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 8012218:	693b      	ldr	r3, [r7, #16]
 801221a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801221e:	d004      	beq.n	801222a <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 8012220:	e011      	b.n	8012246 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8012222:	f7fe fff1 	bl	8011208 <HAL_RCC_GetPCLK1Freq>
 8012226:	61f8      	str	r0, [r7, #28]
          break;
 8012228:	e010      	b.n	801224c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 801222a:	f7fe ff55 	bl	80110d8 <HAL_RCC_GetSysClockFreq>
 801222e:	61f8      	str	r0, [r7, #28]
          break;
 8012230:	e00c      	b.n	801224c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012232:	4b56      	ldr	r3, [pc, #344]	; (801238c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801223a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801223e:	d104      	bne.n	801224a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 8012240:	4b53      	ldr	r3, [pc, #332]	; (8012390 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8012242:	61fb      	str	r3, [r7, #28]
          break;
 8012244:	e001      	b.n	801224a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 8012246:	bf00      	nop
 8012248:	e114      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801224a:	bf00      	nop
        break;
 801224c:	e112      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 801224e:	4b4f      	ldr	r3, [pc, #316]	; (801238c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012254:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8012258:	613b      	str	r3, [r7, #16]
 801225a:	693b      	ldr	r3, [r7, #16]
 801225c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012260:	d013      	beq.n	801228a <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012268:	d819      	bhi.n	801229e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 801226a:	693b      	ldr	r3, [r7, #16]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d004      	beq.n	801227a <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 8012270:	693b      	ldr	r3, [r7, #16]
 8012272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012276:	d004      	beq.n	8012282 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 8012278:	e011      	b.n	801229e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 801227a:	f7fe ffc5 	bl	8011208 <HAL_RCC_GetPCLK1Freq>
 801227e:	61f8      	str	r0, [r7, #28]
          break;
 8012280:	e010      	b.n	80122a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 8012282:	f7fe ff29 	bl	80110d8 <HAL_RCC_GetSysClockFreq>
 8012286:	61f8      	str	r0, [r7, #28]
          break;
 8012288:	e00c      	b.n	80122a4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801228a:	4b40      	ldr	r3, [pc, #256]	; (801238c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012296:	d104      	bne.n	80122a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 8012298:	4b3d      	ldr	r3, [pc, #244]	; (8012390 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 801229a:	61fb      	str	r3, [r7, #28]
          break;
 801229c:	e001      	b.n	80122a2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 801229e:	bf00      	nop
 80122a0:	e0e8      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80122a2:	bf00      	nop
        break;
 80122a4:	e0e6      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80122a6:	4b39      	ldr	r3, [pc, #228]	; (801238c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80122a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80122ac:	f003 0303 	and.w	r3, r3, #3
 80122b0:	613b      	str	r3, [r7, #16]
 80122b2:	693b      	ldr	r3, [r7, #16]
 80122b4:	2b02      	cmp	r3, #2
 80122b6:	d011      	beq.n	80122dc <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 80122b8:	693b      	ldr	r3, [r7, #16]
 80122ba:	2b02      	cmp	r3, #2
 80122bc:	d818      	bhi.n	80122f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 80122be:	693b      	ldr	r3, [r7, #16]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d003      	beq.n	80122cc <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 80122c4:	693b      	ldr	r3, [r7, #16]
 80122c6:	2b01      	cmp	r3, #1
 80122c8:	d004      	beq.n	80122d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 80122ca:	e011      	b.n	80122f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 80122cc:	f7fe ff9c 	bl	8011208 <HAL_RCC_GetPCLK1Freq>
 80122d0:	61f8      	str	r0, [r7, #28]
          break;
 80122d2:	e010      	b.n	80122f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 80122d4:	f7fe ff00 	bl	80110d8 <HAL_RCC_GetSysClockFreq>
 80122d8:	61f8      	str	r0, [r7, #28]
          break;
 80122da:	e00c      	b.n	80122f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80122dc:	4b2b      	ldr	r3, [pc, #172]	; (801238c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80122e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80122e8:	d104      	bne.n	80122f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 80122ea:	4b29      	ldr	r3, [pc, #164]	; (8012390 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 80122ec:	61fb      	str	r3, [r7, #28]
          break;
 80122ee:	e001      	b.n	80122f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 80122f0:	bf00      	nop
 80122f2:	e0bf      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80122f4:	bf00      	nop
        break;
 80122f6:	e0bd      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80122f8:	4b24      	ldr	r3, [pc, #144]	; (801238c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80122fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80122fe:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8012302:	613b      	str	r3, [r7, #16]
 8012304:	693b      	ldr	r3, [r7, #16]
 8012306:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 801230a:	d02c      	beq.n	8012366 <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 801230c:	693b      	ldr	r3, [r7, #16]
 801230e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8012312:	d833      	bhi.n	801237c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8012314:	693b      	ldr	r3, [r7, #16]
 8012316:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801231a:	d01a      	beq.n	8012352 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 801231c:	693b      	ldr	r3, [r7, #16]
 801231e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8012322:	d82b      	bhi.n	801237c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8012324:	693b      	ldr	r3, [r7, #16]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d004      	beq.n	8012334 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 801232a:	693b      	ldr	r3, [r7, #16]
 801232c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012330:	d004      	beq.n	801233c <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 8012332:	e023      	b.n	801237c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8012334:	f7fe ff68 	bl	8011208 <HAL_RCC_GetPCLK1Freq>
 8012338:	61f8      	str	r0, [r7, #28]
          break;
 801233a:	e026      	b.n	801238a <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 801233c:	4b13      	ldr	r3, [pc, #76]	; (801238c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 801233e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012342:	f003 0302 	and.w	r3, r3, #2
 8012346:	2b02      	cmp	r3, #2
 8012348:	d11a      	bne.n	8012380 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 801234a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 801234e:	61fb      	str	r3, [r7, #28]
          break;
 8012350:	e016      	b.n	8012380 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012352:	4b0e      	ldr	r3, [pc, #56]	; (801238c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801235a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801235e:	d111      	bne.n	8012384 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 8012360:	4b0b      	ldr	r3, [pc, #44]	; (8012390 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8012362:	61fb      	str	r3, [r7, #28]
          break;
 8012364:	e00e      	b.n	8012384 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8012366:	4b09      	ldr	r3, [pc, #36]	; (801238c <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8012368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801236c:	f003 0302 	and.w	r3, r3, #2
 8012370:	2b02      	cmp	r3, #2
 8012372:	d109      	bne.n	8012388 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 8012374:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012378:	61fb      	str	r3, [r7, #28]
          break;
 801237a:	e005      	b.n	8012388 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 801237c:	bf00      	nop
 801237e:	e079      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012380:	bf00      	nop
 8012382:	e077      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012384:	bf00      	nop
 8012386:	e075      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012388:	bf00      	nop
        break;
 801238a:	e073      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 801238c:	40021000 	.word	0x40021000
 8012390:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8012394:	4b3a      	ldr	r3, [pc, #232]	; (8012480 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8012396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801239a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 801239e:	613b      	str	r3, [r7, #16]
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80123a6:	d02c      	beq.n	8012402 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 80123a8:	693b      	ldr	r3, [r7, #16]
 80123aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80123ae:	d833      	bhi.n	8012418 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 80123b0:	693b      	ldr	r3, [r7, #16]
 80123b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80123b6:	d01a      	beq.n	80123ee <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 80123b8:	693b      	ldr	r3, [r7, #16]
 80123ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80123be:	d82b      	bhi.n	8012418 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 80123c0:	693b      	ldr	r3, [r7, #16]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d004      	beq.n	80123d0 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 80123c6:	693b      	ldr	r3, [r7, #16]
 80123c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80123cc:	d004      	beq.n	80123d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80123ce:	e023      	b.n	8012418 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 80123d0:	f7fe ff1a 	bl	8011208 <HAL_RCC_GetPCLK1Freq>
 80123d4:	61f8      	str	r0, [r7, #28]
          break;
 80123d6:	e026      	b.n	8012426 <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80123d8:	4b29      	ldr	r3, [pc, #164]	; (8012480 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80123da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80123de:	f003 0302 	and.w	r3, r3, #2
 80123e2:	2b02      	cmp	r3, #2
 80123e4:	d11a      	bne.n	801241c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 80123e6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80123ea:	61fb      	str	r3, [r7, #28]
          break;
 80123ec:	e016      	b.n	801241c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80123ee:	4b24      	ldr	r3, [pc, #144]	; (8012480 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80123f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80123fa:	d111      	bne.n	8012420 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 80123fc:	4b21      	ldr	r3, [pc, #132]	; (8012484 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 80123fe:	61fb      	str	r3, [r7, #28]
          break;
 8012400:	e00e      	b.n	8012420 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8012402:	4b1f      	ldr	r3, [pc, #124]	; (8012480 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8012404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012408:	f003 0302 	and.w	r3, r3, #2
 801240c:	2b02      	cmp	r3, #2
 801240e:	d109      	bne.n	8012424 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 8012410:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012414:	61fb      	str	r3, [r7, #28]
          break;
 8012416:	e005      	b.n	8012424 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 8012418:	bf00      	nop
 801241a:	e02b      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 801241c:	bf00      	nop
 801241e:	e029      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012420:	bf00      	nop
 8012422:	e027      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8012424:	bf00      	nop
        break;
 8012426:	e025      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8012428:	4b15      	ldr	r3, [pc, #84]	; (8012480 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 801242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801242e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012432:	613b      	str	r3, [r7, #16]
 8012434:	693b      	ldr	r3, [r7, #16]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d004      	beq.n	8012444 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 801243a:	693b      	ldr	r3, [r7, #16]
 801243c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012440:	d004      	beq.n	801244c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 8012442:	e00d      	b.n	8012460 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 8012444:	f7fe fee0 	bl	8011208 <HAL_RCC_GetPCLK1Freq>
 8012448:	61f8      	str	r0, [r7, #28]
          break;
 801244a:	e009      	b.n	8012460 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801244c:	4b0c      	ldr	r3, [pc, #48]	; (8012480 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012458:	d101      	bne.n	801245e <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 801245a:	4b0a      	ldr	r3, [pc, #40]	; (8012484 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 801245c:	61fb      	str	r3, [r7, #28]
          break;
 801245e:	bf00      	nop
        break;
 8012460:	e008      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8012462:	bf00      	nop
 8012464:	e006      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8012466:	bf00      	nop
 8012468:	e004      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 801246a:	bf00      	nop
 801246c:	e002      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 801246e:	bf00      	nop
 8012470:	e000      	b.n	8012474 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 8012472:	bf00      	nop
    }
  }

  return(frequency);
 8012474:	69fb      	ldr	r3, [r7, #28]
}
 8012476:	4618      	mov	r0, r3
 8012478:	3720      	adds	r7, #32
 801247a:	46bd      	mov	sp, r7
 801247c:	bd80      	pop	{r7, pc}
 801247e:	bf00      	nop
 8012480:	40021000 	.word	0x40021000
 8012484:	00f42400 	.word	0x00f42400

08012488 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8012488:	b480      	push	{r7}
 801248a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 801248c:	4b05      	ldr	r3, [pc, #20]	; (80124a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	4a04      	ldr	r2, [pc, #16]	; (80124a4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8012492:	f043 0304 	orr.w	r3, r3, #4
 8012496:	6013      	str	r3, [r2, #0]
}
 8012498:	bf00      	nop
 801249a:	46bd      	mov	sp, r7
 801249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a0:	4770      	bx	lr
 80124a2:	bf00      	nop
 80124a4:	40021000 	.word	0x40021000

080124a8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b084      	sub	sp, #16
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
 80124b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80124b2:	2300      	movs	r3, #0
 80124b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80124b6:	4b74      	ldr	r3, [pc, #464]	; (8012688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80124b8:	68db      	ldr	r3, [r3, #12]
 80124ba:	f003 0303 	and.w	r3, r3, #3
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d018      	beq.n	80124f4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80124c2:	4b71      	ldr	r3, [pc, #452]	; (8012688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80124c4:	68db      	ldr	r3, [r3, #12]
 80124c6:	f003 0203 	and.w	r2, r3, #3
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	429a      	cmp	r2, r3
 80124d0:	d10d      	bne.n	80124ee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	681b      	ldr	r3, [r3, #0]
       ||
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d009      	beq.n	80124ee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80124da:	4b6b      	ldr	r3, [pc, #428]	; (8012688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80124dc:	68db      	ldr	r3, [r3, #12]
 80124de:	091b      	lsrs	r3, r3, #4
 80124e0:	f003 0307 	and.w	r3, r3, #7
 80124e4:	1c5a      	adds	r2, r3, #1
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	685b      	ldr	r3, [r3, #4]
       ||
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d047      	beq.n	801257e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80124ee:	2301      	movs	r3, #1
 80124f0:	73fb      	strb	r3, [r7, #15]
 80124f2:	e044      	b.n	801257e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	2b03      	cmp	r3, #3
 80124fa:	d018      	beq.n	801252e <RCCEx_PLLSAI1_Config+0x86>
 80124fc:	2b03      	cmp	r3, #3
 80124fe:	d825      	bhi.n	801254c <RCCEx_PLLSAI1_Config+0xa4>
 8012500:	2b01      	cmp	r3, #1
 8012502:	d002      	beq.n	801250a <RCCEx_PLLSAI1_Config+0x62>
 8012504:	2b02      	cmp	r3, #2
 8012506:	d009      	beq.n	801251c <RCCEx_PLLSAI1_Config+0x74>
 8012508:	e020      	b.n	801254c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 801250a:	4b5f      	ldr	r3, [pc, #380]	; (8012688 <RCCEx_PLLSAI1_Config+0x1e0>)
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	f003 0302 	and.w	r3, r3, #2
 8012512:	2b00      	cmp	r3, #0
 8012514:	d11d      	bne.n	8012552 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8012516:	2301      	movs	r3, #1
 8012518:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801251a:	e01a      	b.n	8012552 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 801251c:	4b5a      	ldr	r3, [pc, #360]	; (8012688 <RCCEx_PLLSAI1_Config+0x1e0>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012524:	2b00      	cmp	r3, #0
 8012526:	d116      	bne.n	8012556 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8012528:	2301      	movs	r3, #1
 801252a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801252c:	e013      	b.n	8012556 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 801252e:	4b56      	ldr	r3, [pc, #344]	; (8012688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012536:	2b00      	cmp	r3, #0
 8012538:	d10f      	bne.n	801255a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801253a:	4b53      	ldr	r3, [pc, #332]	; (8012688 <RCCEx_PLLSAI1_Config+0x1e0>)
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012542:	2b00      	cmp	r3, #0
 8012544:	d109      	bne.n	801255a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8012546:	2301      	movs	r3, #1
 8012548:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801254a:	e006      	b.n	801255a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 801254c:	2301      	movs	r3, #1
 801254e:	73fb      	strb	r3, [r7, #15]
      break;
 8012550:	e004      	b.n	801255c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8012552:	bf00      	nop
 8012554:	e002      	b.n	801255c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8012556:	bf00      	nop
 8012558:	e000      	b.n	801255c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801255a:	bf00      	nop
    }

    if(status == HAL_OK)
 801255c:	7bfb      	ldrb	r3, [r7, #15]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d10d      	bne.n	801257e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8012562:	4b49      	ldr	r3, [pc, #292]	; (8012688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012564:	68db      	ldr	r3, [r3, #12]
 8012566:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	6819      	ldr	r1, [r3, #0]
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	685b      	ldr	r3, [r3, #4]
 8012572:	3b01      	subs	r3, #1
 8012574:	011b      	lsls	r3, r3, #4
 8012576:	430b      	orrs	r3, r1
 8012578:	4943      	ldr	r1, [pc, #268]	; (8012688 <RCCEx_PLLSAI1_Config+0x1e0>)
 801257a:	4313      	orrs	r3, r2
 801257c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 801257e:	7bfb      	ldrb	r3, [r7, #15]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d17c      	bne.n	801267e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8012584:	4b40      	ldr	r3, [pc, #256]	; (8012688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	4a3f      	ldr	r2, [pc, #252]	; (8012688 <RCCEx_PLLSAI1_Config+0x1e0>)
 801258a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801258e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012590:	f7f9 fb08 	bl	800bba4 <HAL_GetTick>
 8012594:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8012596:	e009      	b.n	80125ac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8012598:	f7f9 fb04 	bl	800bba4 <HAL_GetTick>
 801259c:	4602      	mov	r2, r0
 801259e:	68bb      	ldr	r3, [r7, #8]
 80125a0:	1ad3      	subs	r3, r2, r3
 80125a2:	2b02      	cmp	r3, #2
 80125a4:	d902      	bls.n	80125ac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80125a6:	2303      	movs	r3, #3
 80125a8:	73fb      	strb	r3, [r7, #15]
        break;
 80125aa:	e005      	b.n	80125b8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80125ac:	4b36      	ldr	r3, [pc, #216]	; (8012688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d1ef      	bne.n	8012598 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80125b8:	7bfb      	ldrb	r3, [r7, #15]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d15f      	bne.n	801267e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80125be:	683b      	ldr	r3, [r7, #0]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d110      	bne.n	80125e6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80125c4:	4b30      	ldr	r3, [pc, #192]	; (8012688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80125c6:	691b      	ldr	r3, [r3, #16]
 80125c8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80125cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80125d0:	687a      	ldr	r2, [r7, #4]
 80125d2:	6892      	ldr	r2, [r2, #8]
 80125d4:	0211      	lsls	r1, r2, #8
 80125d6:	687a      	ldr	r2, [r7, #4]
 80125d8:	68d2      	ldr	r2, [r2, #12]
 80125da:	06d2      	lsls	r2, r2, #27
 80125dc:	430a      	orrs	r2, r1
 80125de:	492a      	ldr	r1, [pc, #168]	; (8012688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80125e0:	4313      	orrs	r3, r2
 80125e2:	610b      	str	r3, [r1, #16]
 80125e4:	e027      	b.n	8012636 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80125e6:	683b      	ldr	r3, [r7, #0]
 80125e8:	2b01      	cmp	r3, #1
 80125ea:	d112      	bne.n	8012612 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80125ec:	4b26      	ldr	r3, [pc, #152]	; (8012688 <RCCEx_PLLSAI1_Config+0x1e0>)
 80125ee:	691b      	ldr	r3, [r3, #16]
 80125f0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80125f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80125f8:	687a      	ldr	r2, [r7, #4]
 80125fa:	6892      	ldr	r2, [r2, #8]
 80125fc:	0211      	lsls	r1, r2, #8
 80125fe:	687a      	ldr	r2, [r7, #4]
 8012600:	6912      	ldr	r2, [r2, #16]
 8012602:	0852      	lsrs	r2, r2, #1
 8012604:	3a01      	subs	r2, #1
 8012606:	0552      	lsls	r2, r2, #21
 8012608:	430a      	orrs	r2, r1
 801260a:	491f      	ldr	r1, [pc, #124]	; (8012688 <RCCEx_PLLSAI1_Config+0x1e0>)
 801260c:	4313      	orrs	r3, r2
 801260e:	610b      	str	r3, [r1, #16]
 8012610:	e011      	b.n	8012636 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8012612:	4b1d      	ldr	r3, [pc, #116]	; (8012688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012614:	691b      	ldr	r3, [r3, #16]
 8012616:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 801261a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801261e:	687a      	ldr	r2, [r7, #4]
 8012620:	6892      	ldr	r2, [r2, #8]
 8012622:	0211      	lsls	r1, r2, #8
 8012624:	687a      	ldr	r2, [r7, #4]
 8012626:	6952      	ldr	r2, [r2, #20]
 8012628:	0852      	lsrs	r2, r2, #1
 801262a:	3a01      	subs	r2, #1
 801262c:	0652      	lsls	r2, r2, #25
 801262e:	430a      	orrs	r2, r1
 8012630:	4915      	ldr	r1, [pc, #84]	; (8012688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012632:	4313      	orrs	r3, r2
 8012634:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8012636:	4b14      	ldr	r3, [pc, #80]	; (8012688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	4a13      	ldr	r2, [pc, #76]	; (8012688 <RCCEx_PLLSAI1_Config+0x1e0>)
 801263c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012640:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012642:	f7f9 faaf 	bl	800bba4 <HAL_GetTick>
 8012646:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8012648:	e009      	b.n	801265e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 801264a:	f7f9 faab 	bl	800bba4 <HAL_GetTick>
 801264e:	4602      	mov	r2, r0
 8012650:	68bb      	ldr	r3, [r7, #8]
 8012652:	1ad3      	subs	r3, r2, r3
 8012654:	2b02      	cmp	r3, #2
 8012656:	d902      	bls.n	801265e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8012658:	2303      	movs	r3, #3
 801265a:	73fb      	strb	r3, [r7, #15]
          break;
 801265c:	e005      	b.n	801266a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801265e:	4b0a      	ldr	r3, [pc, #40]	; (8012688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012666:	2b00      	cmp	r3, #0
 8012668:	d0ef      	beq.n	801264a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 801266a:	7bfb      	ldrb	r3, [r7, #15]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d106      	bne.n	801267e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8012670:	4b05      	ldr	r3, [pc, #20]	; (8012688 <RCCEx_PLLSAI1_Config+0x1e0>)
 8012672:	691a      	ldr	r2, [r3, #16]
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	699b      	ldr	r3, [r3, #24]
 8012678:	4903      	ldr	r1, [pc, #12]	; (8012688 <RCCEx_PLLSAI1_Config+0x1e0>)
 801267a:	4313      	orrs	r3, r2
 801267c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 801267e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012680:	4618      	mov	r0, r3
 8012682:	3710      	adds	r7, #16
 8012684:	46bd      	mov	sp, r7
 8012686:	bd80      	pop	{r7, pc}
 8012688:	40021000 	.word	0x40021000

0801268c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b084      	sub	sp, #16
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
 8012694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012696:	2300      	movs	r3, #0
 8012698:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801269a:	4b69      	ldr	r3, [pc, #420]	; (8012840 <RCCEx_PLLSAI2_Config+0x1b4>)
 801269c:	68db      	ldr	r3, [r3, #12]
 801269e:	f003 0303 	and.w	r3, r3, #3
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d018      	beq.n	80126d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80126a6:	4b66      	ldr	r3, [pc, #408]	; (8012840 <RCCEx_PLLSAI2_Config+0x1b4>)
 80126a8:	68db      	ldr	r3, [r3, #12]
 80126aa:	f003 0203 	and.w	r2, r3, #3
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	429a      	cmp	r2, r3
 80126b4:	d10d      	bne.n	80126d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
       ||
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d009      	beq.n	80126d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80126be:	4b60      	ldr	r3, [pc, #384]	; (8012840 <RCCEx_PLLSAI2_Config+0x1b4>)
 80126c0:	68db      	ldr	r3, [r3, #12]
 80126c2:	091b      	lsrs	r3, r3, #4
 80126c4:	f003 0307 	and.w	r3, r3, #7
 80126c8:	1c5a      	adds	r2, r3, #1
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	685b      	ldr	r3, [r3, #4]
       ||
 80126ce:	429a      	cmp	r2, r3
 80126d0:	d047      	beq.n	8012762 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80126d2:	2301      	movs	r3, #1
 80126d4:	73fb      	strb	r3, [r7, #15]
 80126d6:	e044      	b.n	8012762 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	2b03      	cmp	r3, #3
 80126de:	d018      	beq.n	8012712 <RCCEx_PLLSAI2_Config+0x86>
 80126e0:	2b03      	cmp	r3, #3
 80126e2:	d825      	bhi.n	8012730 <RCCEx_PLLSAI2_Config+0xa4>
 80126e4:	2b01      	cmp	r3, #1
 80126e6:	d002      	beq.n	80126ee <RCCEx_PLLSAI2_Config+0x62>
 80126e8:	2b02      	cmp	r3, #2
 80126ea:	d009      	beq.n	8012700 <RCCEx_PLLSAI2_Config+0x74>
 80126ec:	e020      	b.n	8012730 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80126ee:	4b54      	ldr	r3, [pc, #336]	; (8012840 <RCCEx_PLLSAI2_Config+0x1b4>)
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	f003 0302 	and.w	r3, r3, #2
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d11d      	bne.n	8012736 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80126fa:	2301      	movs	r3, #1
 80126fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80126fe:	e01a      	b.n	8012736 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8012700:	4b4f      	ldr	r3, [pc, #316]	; (8012840 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012708:	2b00      	cmp	r3, #0
 801270a:	d116      	bne.n	801273a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 801270c:	2301      	movs	r3, #1
 801270e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8012710:	e013      	b.n	801273a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8012712:	4b4b      	ldr	r3, [pc, #300]	; (8012840 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801271a:	2b00      	cmp	r3, #0
 801271c:	d10f      	bne.n	801273e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 801271e:	4b48      	ldr	r3, [pc, #288]	; (8012840 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012726:	2b00      	cmp	r3, #0
 8012728:	d109      	bne.n	801273e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 801272a:	2301      	movs	r3, #1
 801272c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801272e:	e006      	b.n	801273e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8012730:	2301      	movs	r3, #1
 8012732:	73fb      	strb	r3, [r7, #15]
      break;
 8012734:	e004      	b.n	8012740 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8012736:	bf00      	nop
 8012738:	e002      	b.n	8012740 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 801273a:	bf00      	nop
 801273c:	e000      	b.n	8012740 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 801273e:	bf00      	nop
    }

    if(status == HAL_OK)
 8012740:	7bfb      	ldrb	r3, [r7, #15]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d10d      	bne.n	8012762 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8012746:	4b3e      	ldr	r3, [pc, #248]	; (8012840 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012748:	68db      	ldr	r3, [r3, #12]
 801274a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	6819      	ldr	r1, [r3, #0]
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	685b      	ldr	r3, [r3, #4]
 8012756:	3b01      	subs	r3, #1
 8012758:	011b      	lsls	r3, r3, #4
 801275a:	430b      	orrs	r3, r1
 801275c:	4938      	ldr	r1, [pc, #224]	; (8012840 <RCCEx_PLLSAI2_Config+0x1b4>)
 801275e:	4313      	orrs	r3, r2
 8012760:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8012762:	7bfb      	ldrb	r3, [r7, #15]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d166      	bne.n	8012836 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8012768:	4b35      	ldr	r3, [pc, #212]	; (8012840 <RCCEx_PLLSAI2_Config+0x1b4>)
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	4a34      	ldr	r2, [pc, #208]	; (8012840 <RCCEx_PLLSAI2_Config+0x1b4>)
 801276e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012772:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012774:	f7f9 fa16 	bl	800bba4 <HAL_GetTick>
 8012778:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 801277a:	e009      	b.n	8012790 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 801277c:	f7f9 fa12 	bl	800bba4 <HAL_GetTick>
 8012780:	4602      	mov	r2, r0
 8012782:	68bb      	ldr	r3, [r7, #8]
 8012784:	1ad3      	subs	r3, r2, r3
 8012786:	2b02      	cmp	r3, #2
 8012788:	d902      	bls.n	8012790 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 801278a:	2303      	movs	r3, #3
 801278c:	73fb      	strb	r3, [r7, #15]
        break;
 801278e:	e005      	b.n	801279c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8012790:	4b2b      	ldr	r3, [pc, #172]	; (8012840 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012798:	2b00      	cmp	r3, #0
 801279a:	d1ef      	bne.n	801277c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 801279c:	7bfb      	ldrb	r3, [r7, #15]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d149      	bne.n	8012836 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d110      	bne.n	80127ca <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80127a8:	4b25      	ldr	r3, [pc, #148]	; (8012840 <RCCEx_PLLSAI2_Config+0x1b4>)
 80127aa:	695b      	ldr	r3, [r3, #20]
 80127ac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80127b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80127b4:	687a      	ldr	r2, [r7, #4]
 80127b6:	6892      	ldr	r2, [r2, #8]
 80127b8:	0211      	lsls	r1, r2, #8
 80127ba:	687a      	ldr	r2, [r7, #4]
 80127bc:	68d2      	ldr	r2, [r2, #12]
 80127be:	06d2      	lsls	r2, r2, #27
 80127c0:	430a      	orrs	r2, r1
 80127c2:	491f      	ldr	r1, [pc, #124]	; (8012840 <RCCEx_PLLSAI2_Config+0x1b4>)
 80127c4:	4313      	orrs	r3, r2
 80127c6:	614b      	str	r3, [r1, #20]
 80127c8:	e011      	b.n	80127ee <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80127ca:	4b1d      	ldr	r3, [pc, #116]	; (8012840 <RCCEx_PLLSAI2_Config+0x1b4>)
 80127cc:	695b      	ldr	r3, [r3, #20]
 80127ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80127d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80127d6:	687a      	ldr	r2, [r7, #4]
 80127d8:	6892      	ldr	r2, [r2, #8]
 80127da:	0211      	lsls	r1, r2, #8
 80127dc:	687a      	ldr	r2, [r7, #4]
 80127de:	6912      	ldr	r2, [r2, #16]
 80127e0:	0852      	lsrs	r2, r2, #1
 80127e2:	3a01      	subs	r2, #1
 80127e4:	0652      	lsls	r2, r2, #25
 80127e6:	430a      	orrs	r2, r1
 80127e8:	4915      	ldr	r1, [pc, #84]	; (8012840 <RCCEx_PLLSAI2_Config+0x1b4>)
 80127ea:	4313      	orrs	r3, r2
 80127ec:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80127ee:	4b14      	ldr	r3, [pc, #80]	; (8012840 <RCCEx_PLLSAI2_Config+0x1b4>)
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	4a13      	ldr	r2, [pc, #76]	; (8012840 <RCCEx_PLLSAI2_Config+0x1b4>)
 80127f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80127f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80127fa:	f7f9 f9d3 	bl	800bba4 <HAL_GetTick>
 80127fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8012800:	e009      	b.n	8012816 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8012802:	f7f9 f9cf 	bl	800bba4 <HAL_GetTick>
 8012806:	4602      	mov	r2, r0
 8012808:	68bb      	ldr	r3, [r7, #8]
 801280a:	1ad3      	subs	r3, r2, r3
 801280c:	2b02      	cmp	r3, #2
 801280e:	d902      	bls.n	8012816 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8012810:	2303      	movs	r3, #3
 8012812:	73fb      	strb	r3, [r7, #15]
          break;
 8012814:	e005      	b.n	8012822 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8012816:	4b0a      	ldr	r3, [pc, #40]	; (8012840 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801281e:	2b00      	cmp	r3, #0
 8012820:	d0ef      	beq.n	8012802 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8012822:	7bfb      	ldrb	r3, [r7, #15]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d106      	bne.n	8012836 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8012828:	4b05      	ldr	r3, [pc, #20]	; (8012840 <RCCEx_PLLSAI2_Config+0x1b4>)
 801282a:	695a      	ldr	r2, [r3, #20]
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	695b      	ldr	r3, [r3, #20]
 8012830:	4903      	ldr	r1, [pc, #12]	; (8012840 <RCCEx_PLLSAI2_Config+0x1b4>)
 8012832:	4313      	orrs	r3, r2
 8012834:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8012836:	7bfb      	ldrb	r3, [r7, #15]
}
 8012838:	4618      	mov	r0, r3
 801283a:	3710      	adds	r7, #16
 801283c:	46bd      	mov	sp, r7
 801283e:	bd80      	pop	{r7, pc}
 8012840:	40021000 	.word	0x40021000

08012844 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8012844:	b480      	push	{r7}
 8012846:	b089      	sub	sp, #36	; 0x24
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
 801284c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 801284e:	2300      	movs	r3, #0
 8012850:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8012852:	2300      	movs	r3, #0
 8012854:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8012856:	2300      	movs	r3, #0
 8012858:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012860:	d10c      	bne.n	801287c <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8012862:	4b77      	ldr	r3, [pc, #476]	; (8012a40 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012868:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 801286c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 801286e:	69bb      	ldr	r3, [r7, #24]
 8012870:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8012874:	d112      	bne.n	801289c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8012876:	4b73      	ldr	r3, [pc, #460]	; (8012a44 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 8012878:	61fb      	str	r3, [r7, #28]
 801287a:	e00f      	b.n	801289c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012882:	d10b      	bne.n	801289c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8012884:	4b6e      	ldr	r3, [pc, #440]	; (8012a40 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801288a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 801288e:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8012890:	69bb      	ldr	r3, [r7, #24]
 8012892:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8012896:	d101      	bne.n	801289c <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8012898:	4b6a      	ldr	r3, [pc, #424]	; (8012a44 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 801289a:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 801289c:	69fb      	ldr	r3, [r7, #28]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	f040 80c6 	bne.w	8012a30 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 80128a4:	683b      	ldr	r3, [r7, #0]
 80128a6:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80128a8:	69bb      	ldr	r3, [r7, #24]
 80128aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80128ae:	d003      	beq.n	80128b8 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80128b0:	69bb      	ldr	r3, [r7, #24]
 80128b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80128b6:	d13b      	bne.n	8012930 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80128b8:	4b61      	ldr	r3, [pc, #388]	; (8012a40 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80128c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80128c4:	f040 80b3 	bne.w	8012a2e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 80128c8:	4b5d      	ldr	r3, [pc, #372]	; (8012a40 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80128ca:	68db      	ldr	r3, [r3, #12]
 80128cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	f000 80ac 	beq.w	8012a2e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80128d6:	4b5a      	ldr	r3, [pc, #360]	; (8012a40 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80128d8:	68db      	ldr	r3, [r3, #12]
 80128da:	091b      	lsrs	r3, r3, #4
 80128dc:	f003 0307 	and.w	r3, r3, #7
 80128e0:	3301      	adds	r3, #1
 80128e2:	693a      	ldr	r2, [r7, #16]
 80128e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80128e8:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80128ea:	4b55      	ldr	r3, [pc, #340]	; (8012a40 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80128ec:	68db      	ldr	r3, [r3, #12]
 80128ee:	0a1b      	lsrs	r3, r3, #8
 80128f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80128f4:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80128f6:	4b52      	ldr	r3, [pc, #328]	; (8012a40 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80128f8:	68db      	ldr	r3, [r3, #12]
 80128fa:	0edb      	lsrs	r3, r3, #27
 80128fc:	f003 031f 	and.w	r3, r3, #31
 8012900:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8012902:	697b      	ldr	r3, [r7, #20]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d10a      	bne.n	801291e <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8012908:	4b4d      	ldr	r3, [pc, #308]	; (8012a40 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 801290a:	68db      	ldr	r3, [r3, #12]
 801290c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012910:	2b00      	cmp	r3, #0
 8012912:	d002      	beq.n	801291a <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 8012914:	2311      	movs	r3, #17
 8012916:	617b      	str	r3, [r7, #20]
 8012918:	e001      	b.n	801291e <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 801291a:	2307      	movs	r3, #7
 801291c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 801291e:	693b      	ldr	r3, [r7, #16]
 8012920:	68fa      	ldr	r2, [r7, #12]
 8012922:	fb03 f202 	mul.w	r2, r3, r2
 8012926:	697b      	ldr	r3, [r7, #20]
 8012928:	fbb2 f3f3 	udiv	r3, r2, r3
 801292c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 801292e:	e07e      	b.n	8012a2e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8012930:	69bb      	ldr	r3, [r7, #24]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d139      	bne.n	80129aa <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8012936:	4b42      	ldr	r3, [pc, #264]	; (8012a40 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801293e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012942:	d175      	bne.n	8012a30 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8012944:	4b3e      	ldr	r3, [pc, #248]	; (8012a40 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012946:	691b      	ldr	r3, [r3, #16]
 8012948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801294c:	2b00      	cmp	r3, #0
 801294e:	d06f      	beq.n	8012a30 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8012950:	4b3b      	ldr	r3, [pc, #236]	; (8012a40 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012952:	68db      	ldr	r3, [r3, #12]
 8012954:	091b      	lsrs	r3, r3, #4
 8012956:	f003 0307 	and.w	r3, r3, #7
 801295a:	3301      	adds	r3, #1
 801295c:	693a      	ldr	r2, [r7, #16]
 801295e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012962:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8012964:	4b36      	ldr	r3, [pc, #216]	; (8012a40 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012966:	691b      	ldr	r3, [r3, #16]
 8012968:	0a1b      	lsrs	r3, r3, #8
 801296a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801296e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8012970:	4b33      	ldr	r3, [pc, #204]	; (8012a40 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012972:	691b      	ldr	r3, [r3, #16]
 8012974:	0edb      	lsrs	r3, r3, #27
 8012976:	f003 031f 	and.w	r3, r3, #31
 801297a:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 801297c:	697b      	ldr	r3, [r7, #20]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d10a      	bne.n	8012998 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8012982:	4b2f      	ldr	r3, [pc, #188]	; (8012a40 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012984:	691b      	ldr	r3, [r3, #16]
 8012986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801298a:	2b00      	cmp	r3, #0
 801298c:	d002      	beq.n	8012994 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 801298e:	2311      	movs	r3, #17
 8012990:	617b      	str	r3, [r7, #20]
 8012992:	e001      	b.n	8012998 <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 8012994:	2307      	movs	r3, #7
 8012996:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8012998:	693b      	ldr	r3, [r7, #16]
 801299a:	68fa      	ldr	r2, [r7, #12]
 801299c:	fb03 f202 	mul.w	r2, r3, r2
 80129a0:	697b      	ldr	r3, [r7, #20]
 80129a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80129a6:	61fb      	str	r3, [r7, #28]
 80129a8:	e042      	b.n	8012a30 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80129aa:	69bb      	ldr	r3, [r7, #24]
 80129ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80129b0:	d003      	beq.n	80129ba <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 80129b2:	69bb      	ldr	r3, [r7, #24]
 80129b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80129b8:	d13a      	bne.n	8012a30 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80129ba:	4b21      	ldr	r3, [pc, #132]	; (8012a40 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80129c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80129c6:	d133      	bne.n	8012a30 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 80129c8:	4b1d      	ldr	r3, [pc, #116]	; (8012a40 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80129ca:	695b      	ldr	r3, [r3, #20]
 80129cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d02d      	beq.n	8012a30 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80129d4:	4b1a      	ldr	r3, [pc, #104]	; (8012a40 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80129d6:	68db      	ldr	r3, [r3, #12]
 80129d8:	091b      	lsrs	r3, r3, #4
 80129da:	f003 0307 	and.w	r3, r3, #7
 80129de:	3301      	adds	r3, #1
 80129e0:	693a      	ldr	r2, [r7, #16]
 80129e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80129e6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80129e8:	4b15      	ldr	r3, [pc, #84]	; (8012a40 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80129ea:	695b      	ldr	r3, [r3, #20]
 80129ec:	0a1b      	lsrs	r3, r3, #8
 80129ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80129f2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80129f4:	4b12      	ldr	r3, [pc, #72]	; (8012a40 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80129f6:	695b      	ldr	r3, [r3, #20]
 80129f8:	0edb      	lsrs	r3, r3, #27
 80129fa:	f003 031f 	and.w	r3, r3, #31
 80129fe:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8012a00:	697b      	ldr	r3, [r7, #20]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d10a      	bne.n	8012a1c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8012a06:	4b0e      	ldr	r3, [pc, #56]	; (8012a40 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8012a08:	695b      	ldr	r3, [r3, #20]
 8012a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d002      	beq.n	8012a18 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8012a12:	2311      	movs	r3, #17
 8012a14:	617b      	str	r3, [r7, #20]
 8012a16:	e001      	b.n	8012a1c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8012a18:	2307      	movs	r3, #7
 8012a1a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8012a1c:	693b      	ldr	r3, [r7, #16]
 8012a1e:	68fa      	ldr	r2, [r7, #12]
 8012a20:	fb03 f202 	mul.w	r2, r3, r2
 8012a24:	697b      	ldr	r3, [r7, #20]
 8012a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8012a2a:	61fb      	str	r3, [r7, #28]
 8012a2c:	e000      	b.n	8012a30 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8012a2e:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8012a30:	69fb      	ldr	r3, [r7, #28]
}
 8012a32:	4618      	mov	r0, r3
 8012a34:	3724      	adds	r7, #36	; 0x24
 8012a36:	46bd      	mov	sp, r7
 8012a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3c:	4770      	bx	lr
 8012a3e:	bf00      	nop
 8012a40:	40021000 	.word	0x40021000
 8012a44:	001fff68 	.word	0x001fff68

08012a48 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b088      	sub	sp, #32
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d101      	bne.n	8012a5a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8012a56:	2301      	movs	r3, #1
 8012a58:	e155      	b.n	8012d06 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8012a60:	b2db      	uxtb	r3, r3
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d106      	bne.n	8012a74 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	2200      	movs	r2, #0
 8012a6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8012a6e:	6878      	ldr	r0, [r7, #4]
 8012a70:	f7f0 f872 	bl	8002b58 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8012a74:	6878      	ldr	r0, [r7, #4]
 8012a76:	f000 f959 	bl	8012d2c <SAI_Disable>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d001      	beq.n	8012a84 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8012a80:	2301      	movs	r3, #1
 8012a82:	e140      	b.n	8012d06 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	2202      	movs	r2, #2
 8012a88:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	68db      	ldr	r3, [r3, #12]
 8012a90:	2b02      	cmp	r3, #2
 8012a92:	d00c      	beq.n	8012aae <HAL_SAI_Init+0x66>
 8012a94:	2b02      	cmp	r3, #2
 8012a96:	d80d      	bhi.n	8012ab4 <HAL_SAI_Init+0x6c>
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d002      	beq.n	8012aa2 <HAL_SAI_Init+0x5a>
 8012a9c:	2b01      	cmp	r3, #1
 8012a9e:	d003      	beq.n	8012aa8 <HAL_SAI_Init+0x60>
 8012aa0:	e008      	b.n	8012ab4 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	61fb      	str	r3, [r7, #28]
      break;
 8012aa6:	e008      	b.n	8012aba <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8012aa8:	2310      	movs	r3, #16
 8012aaa:	61fb      	str	r3, [r7, #28]
      break;
 8012aac:	e005      	b.n	8012aba <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8012aae:	2320      	movs	r3, #32
 8012ab0:	61fb      	str	r3, [r7, #28]
      break;
 8012ab2:	e002      	b.n	8012aba <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	61fb      	str	r3, [r7, #28]
      break;
 8012ab8:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	689b      	ldr	r3, [r3, #8]
 8012abe:	2b03      	cmp	r3, #3
 8012ac0:	d81d      	bhi.n	8012afe <HAL_SAI_Init+0xb6>
 8012ac2:	a201      	add	r2, pc, #4	; (adr r2, 8012ac8 <HAL_SAI_Init+0x80>)
 8012ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ac8:	08012ad9 	.word	0x08012ad9
 8012acc:	08012adf 	.word	0x08012adf
 8012ad0:	08012ae7 	.word	0x08012ae7
 8012ad4:	08012aef 	.word	0x08012aef
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8012ad8:	2300      	movs	r3, #0
 8012ada:	617b      	str	r3, [r7, #20]
      break;
 8012adc:	e012      	b.n	8012b04 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8012ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012ae2:	617b      	str	r3, [r7, #20]
      break;
 8012ae4:	e00e      	b.n	8012b04 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8012ae6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012aea:	617b      	str	r3, [r7, #20]
      break;
 8012aec:	e00a      	b.n	8012b04 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8012aee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012af2:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8012af4:	69fb      	ldr	r3, [r7, #28]
 8012af6:	f043 0301 	orr.w	r3, r3, #1
 8012afa:	61fb      	str	r3, [r7, #28]
      break;
 8012afc:	e002      	b.n	8012b04 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8012afe:	2300      	movs	r3, #0
 8012b00:	617b      	str	r3, [r7, #20]
      break;
 8012b02:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	4a81      	ldr	r2, [pc, #516]	; (8012d10 <HAL_SAI_Init+0x2c8>)
 8012b0a:	4293      	cmp	r3, r2
 8012b0c:	d004      	beq.n	8012b18 <HAL_SAI_Init+0xd0>
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	4a80      	ldr	r2, [pc, #512]	; (8012d14 <HAL_SAI_Init+0x2cc>)
 8012b14:	4293      	cmp	r3, r2
 8012b16:	d103      	bne.n	8012b20 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8012b18:	4a7f      	ldr	r2, [pc, #508]	; (8012d18 <HAL_SAI_Init+0x2d0>)
 8012b1a:	69fb      	ldr	r3, [r7, #28]
 8012b1c:	6013      	str	r3, [r2, #0]
 8012b1e:	e002      	b.n	8012b26 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8012b20:	4a7e      	ldr	r2, [pc, #504]	; (8012d1c <HAL_SAI_Init+0x2d4>)
 8012b22:	69fb      	ldr	r3, [r7, #28]
 8012b24:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	69db      	ldr	r3, [r3, #28]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d041      	beq.n	8012bb2 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	4a77      	ldr	r2, [pc, #476]	; (8012d10 <HAL_SAI_Init+0x2c8>)
 8012b34:	4293      	cmp	r3, r2
 8012b36:	d004      	beq.n	8012b42 <HAL_SAI_Init+0xfa>
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	4a75      	ldr	r2, [pc, #468]	; (8012d14 <HAL_SAI_Init+0x2cc>)
 8012b3e:	4293      	cmp	r3, r2
 8012b40:	d105      	bne.n	8012b4e <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8012b42:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012b46:	f7fe fee7 	bl	8011918 <HAL_RCCEx_GetPeriphCLKFreq>
 8012b4a:	6138      	str	r0, [r7, #16]
 8012b4c:	e004      	b.n	8012b58 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8012b4e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8012b52:	f7fe fee1 	bl	8011918 <HAL_RCCEx_GetPeriphCLKFreq>
 8012b56:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8012b58:	693a      	ldr	r2, [r7, #16]
 8012b5a:	4613      	mov	r3, r2
 8012b5c:	009b      	lsls	r3, r3, #2
 8012b5e:	4413      	add	r3, r2
 8012b60:	005b      	lsls	r3, r3, #1
 8012b62:	461a      	mov	r2, r3
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	69db      	ldr	r3, [r3, #28]
 8012b68:	025b      	lsls	r3, r3, #9
 8012b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b6e:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	4a6b      	ldr	r2, [pc, #428]	; (8012d20 <HAL_SAI_Init+0x2d8>)
 8012b74:	fba2 2303 	umull	r2, r3, r2, r3
 8012b78:	08da      	lsrs	r2, r3, #3
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8012b7e:	68f9      	ldr	r1, [r7, #12]
 8012b80:	4b67      	ldr	r3, [pc, #412]	; (8012d20 <HAL_SAI_Init+0x2d8>)
 8012b82:	fba3 2301 	umull	r2, r3, r3, r1
 8012b86:	08da      	lsrs	r2, r3, #3
 8012b88:	4613      	mov	r3, r2
 8012b8a:	009b      	lsls	r3, r3, #2
 8012b8c:	4413      	add	r3, r2
 8012b8e:	005b      	lsls	r3, r3, #1
 8012b90:	1aca      	subs	r2, r1, r3
 8012b92:	2a08      	cmp	r2, #8
 8012b94:	d904      	bls.n	8012ba0 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	6a1b      	ldr	r3, [r3, #32]
 8012b9a:	1c5a      	adds	r2, r3, #1
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ba4:	2b04      	cmp	r3, #4
 8012ba6:	d104      	bne.n	8012bb2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	6a1b      	ldr	r3, [r3, #32]
 8012bac:	085a      	lsrs	r2, r3, #1
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	685b      	ldr	r3, [r3, #4]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d003      	beq.n	8012bc2 <HAL_SAI_Init+0x17a>
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	685b      	ldr	r3, [r3, #4]
 8012bbe:	2b02      	cmp	r3, #2
 8012bc0:	d109      	bne.n	8012bd6 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012bc6:	2b01      	cmp	r3, #1
 8012bc8:	d101      	bne.n	8012bce <HAL_SAI_Init+0x186>
 8012bca:	2300      	movs	r3, #0
 8012bcc:	e001      	b.n	8012bd2 <HAL_SAI_Init+0x18a>
 8012bce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012bd2:	61bb      	str	r3, [r7, #24]
 8012bd4:	e008      	b.n	8012be8 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012bda:	2b01      	cmp	r3, #1
 8012bdc:	d102      	bne.n	8012be4 <HAL_SAI_Init+0x19c>
 8012bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012be2:	e000      	b.n	8012be6 <HAL_SAI_Init+0x19e>
 8012be4:	2300      	movs	r3, #0
 8012be6:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	6819      	ldr	r1, [r3, #0]
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	681a      	ldr	r2, [r3, #0]
 8012bf2:	4b4c      	ldr	r3, [pc, #304]	; (8012d24 <HAL_SAI_Init+0x2dc>)
 8012bf4:	400b      	ands	r3, r1
 8012bf6:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	6819      	ldr	r1, [r3, #0]
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	685a      	ldr	r2, [r3, #4]
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c06:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012c0c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c12:	431a      	orrs	r2, r3
 8012c14:	69bb      	ldr	r3, [r7, #24]
 8012c16:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8012c18:	697b      	ldr	r3, [r7, #20]
 8012c1a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8012c20:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	691b      	ldr	r3, [r3, #16]
 8012c26:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8012c2c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	6a1b      	ldr	r3, [r3, #32]
 8012c32:	051b      	lsls	r3, r3, #20
 8012c34:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	430a      	orrs	r2, r1
 8012c3c:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	685b      	ldr	r3, [r3, #4]
 8012c44:	687a      	ldr	r2, [r7, #4]
 8012c46:	6812      	ldr	r2, [r2, #0]
 8012c48:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8012c4c:	f023 030f 	bic.w	r3, r3, #15
 8012c50:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	6859      	ldr	r1, [r3, #4]
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	699a      	ldr	r2, [r3, #24]
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c60:	431a      	orrs	r2, r3
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c66:	431a      	orrs	r2, r3
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	430a      	orrs	r2, r1
 8012c6e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	6899      	ldr	r1, [r3, #8]
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	681a      	ldr	r2, [r3, #0]
 8012c7a:	4b2b      	ldr	r3, [pc, #172]	; (8012d28 <HAL_SAI_Init+0x2e0>)
 8012c7c:	400b      	ands	r3, r1
 8012c7e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	6899      	ldr	r1, [r3, #8]
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c8a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8012c90:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8012c96:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8012c9c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012ca2:	3b01      	subs	r3, #1
 8012ca4:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8012ca6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	430a      	orrs	r2, r1
 8012cae:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	68d9      	ldr	r1, [r3, #12]
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	681a      	ldr	r2, [r3, #0]
 8012cba:	f24f 0320 	movw	r3, #61472	; 0xf020
 8012cbe:	400b      	ands	r3, r1
 8012cc0:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	68d9      	ldr	r1, [r3, #12]
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012cd0:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012cd6:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8012cd8:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012cde:	3b01      	subs	r3, #1
 8012ce0:	021b      	lsls	r3, r3, #8
 8012ce2:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	430a      	orrs	r2, r1
 8012cea:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	2200      	movs	r2, #0
 8012cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2201      	movs	r2, #1
 8012cf8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	2200      	movs	r2, #0
 8012d00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8012d04:	2300      	movs	r3, #0
}
 8012d06:	4618      	mov	r0, r3
 8012d08:	3720      	adds	r7, #32
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	bd80      	pop	{r7, pc}
 8012d0e:	bf00      	nop
 8012d10:	40015404 	.word	0x40015404
 8012d14:	40015424 	.word	0x40015424
 8012d18:	40015400 	.word	0x40015400
 8012d1c:	40015800 	.word	0x40015800
 8012d20:	cccccccd 	.word	0xcccccccd
 8012d24:	ff05c010 	.word	0xff05c010
 8012d28:	fff88000 	.word	0xfff88000

08012d2c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8012d2c:	b480      	push	{r7}
 8012d2e:	b085      	sub	sp, #20
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8012d34:	4b18      	ldr	r3, [pc, #96]	; (8012d98 <SAI_Disable+0x6c>)
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	4a18      	ldr	r2, [pc, #96]	; (8012d9c <SAI_Disable+0x70>)
 8012d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8012d3e:	0b1b      	lsrs	r3, r3, #12
 8012d40:	009b      	lsls	r3, r3, #2
 8012d42:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8012d44:	2300      	movs	r3, #0
 8012d46:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	681a      	ldr	r2, [r3, #0]
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8012d56:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d10a      	bne.n	8012d74 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012d64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8012d6e:	2303      	movs	r3, #3
 8012d70:	72fb      	strb	r3, [r7, #11]
      break;
 8012d72:	e009      	b.n	8012d88 <SAI_Disable+0x5c>
    }
    count--;
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	3b01      	subs	r3, #1
 8012d78:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d1e7      	bne.n	8012d58 <SAI_Disable+0x2c>

  return status;
 8012d88:	7afb      	ldrb	r3, [r7, #11]
}
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	3714      	adds	r7, #20
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d94:	4770      	bx	lr
 8012d96:	bf00      	nop
 8012d98:	20000194 	.word	0x20000194
 8012d9c:	95cbec1b 	.word	0x95cbec1b

08012da0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b082      	sub	sp, #8
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d101      	bne.n	8012db2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8012dae:	2301      	movs	r3, #1
 8012db0:	e022      	b.n	8012df8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012db8:	b2db      	uxtb	r3, r3
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d105      	bne.n	8012dca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8012dc4:	6878      	ldr	r0, [r7, #4]
 8012dc6:	f7ef ff71 	bl	8002cac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	2203      	movs	r2, #3
 8012dce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8012dd2:	6878      	ldr	r0, [r7, #4]
 8012dd4:	f000 f814 	bl	8012e00 <HAL_SD_InitCard>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d001      	beq.n	8012de2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8012dde:	2301      	movs	r3, #1
 8012de0:	e00a      	b.n	8012df8 <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	2200      	movs	r2, #0
 8012de6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	2200      	movs	r2, #0
 8012dec:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2201      	movs	r2, #1
 8012df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8012df6:	2300      	movs	r3, #0
}
 8012df8:	4618      	mov	r0, r3
 8012dfa:	3708      	adds	r7, #8
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bd80      	pop	{r7, pc}

08012e00 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8012e00:	b5b0      	push	{r4, r5, r7, lr}
 8012e02:	b08e      	sub	sp, #56	; 0x38
 8012e04:	af04      	add	r7, sp, #16
 8012e06:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8012e08:	2300      	movs	r3, #0
 8012e0a:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8012e10:	2300      	movs	r3, #0
 8012e12:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8012e14:	2300      	movs	r3, #0
 8012e16:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8012e18:	2300      	movs	r3, #0
 8012e1a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8012e1c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8012e20:	f7fe fd7a 	bl	8011918 <HAL_RCCEx_GetPeriphCLKFreq>
 8012e24:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8012e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d109      	bne.n	8012e40 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2201      	movs	r2, #1
 8012e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012e3a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8012e3c:	2301      	movs	r3, #1
 8012e3e:	e07b      	b.n	8012f38 <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8012e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e42:	09db      	lsrs	r3, r3, #7
 8012e44:	4a3e      	ldr	r2, [pc, #248]	; (8012f40 <HAL_SD_InitCard+0x140>)
 8012e46:	fba2 2303 	umull	r2, r3, r2, r3
 8012e4a:	091b      	lsrs	r3, r3, #4
 8012e4c:	3b02      	subs	r3, #2
 8012e4e:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	681d      	ldr	r5, [r3, #0]
 8012e54:	466c      	mov	r4, sp
 8012e56:	f107 0314 	add.w	r3, r7, #20
 8012e5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012e5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8012e62:	f107 0308 	add.w	r3, r7, #8
 8012e66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8012e68:	4628      	mov	r0, r5
 8012e6a:	f002 fd97 	bl	801599c <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	685a      	ldr	r2, [r3, #4]
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012e7c:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	4618      	mov	r0, r3
 8012e84:	f002 fdc4 	bl	8015a10 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	685a      	ldr	r2, [r3, #4]
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012e96:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8012e98:	69fb      	ldr	r3, [r7, #28]
 8012e9a:	3302      	adds	r3, #2
 8012e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ea2:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8012ea4:	4a27      	ldr	r2, [pc, #156]	; (8012f44 <HAL_SD_InitCard+0x144>)
 8012ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8012eac:	3301      	adds	r3, #1
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f7f8 fe84 	bl	800bbbc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8012eb4:	6878      	ldr	r0, [r7, #4]
 8012eb6:	f000 fb77 	bl	80135a8 <SD_PowerON>
 8012eba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8012ebc:	6a3b      	ldr	r3, [r7, #32]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d00b      	beq.n	8012eda <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	2201      	movs	r2, #1
 8012ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012ece:	6a3b      	ldr	r3, [r7, #32]
 8012ed0:	431a      	orrs	r2, r3
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8012ed6:	2301      	movs	r3, #1
 8012ed8:	e02e      	b.n	8012f38 <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8012eda:	6878      	ldr	r0, [r7, #4]
 8012edc:	f000 fa96 	bl	801340c <SD_InitCard>
 8012ee0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8012ee2:	6a3b      	ldr	r3, [r7, #32]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d00b      	beq.n	8012f00 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	2201      	movs	r2, #1
 8012eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012ef4:	6a3b      	ldr	r3, [r7, #32]
 8012ef6:	431a      	orrs	r2, r3
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8012efc:	2301      	movs	r3, #1
 8012efe:	e01b      	b.n	8012f38 <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f002 fe14 	bl	8015b36 <SDMMC_CmdBlockLength>
 8012f0e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8012f10:	6a3b      	ldr	r3, [r7, #32]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d00f      	beq.n	8012f36 <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	4a0b      	ldr	r2, [pc, #44]	; (8012f48 <HAL_SD_InitCard+0x148>)
 8012f1c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012f22:	6a3b      	ldr	r3, [r7, #32]
 8012f24:	431a      	orrs	r2, r3
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	2201      	movs	r2, #1
 8012f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8012f32:	2301      	movs	r3, #1
 8012f34:	e000      	b.n	8012f38 <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8012f36:	2300      	movs	r3, #0
}
 8012f38:	4618      	mov	r0, r3
 8012f3a:	3728      	adds	r7, #40	; 0x28
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bdb0      	pop	{r4, r5, r7, pc}
 8012f40:	014f8b59 	.word	0x014f8b59
 8012f44:	00012110 	.word	0x00012110
 8012f48:	004005ff 	.word	0x004005ff

08012f4c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8012f4c:	b480      	push	{r7}
 8012f4e:	b083      	sub	sp, #12
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
 8012f54:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f5a:	0f9b      	lsrs	r3, r3, #30
 8012f5c:	b2da      	uxtb	r2, r3
 8012f5e:	683b      	ldr	r3, [r7, #0]
 8012f60:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f66:	0e9b      	lsrs	r3, r3, #26
 8012f68:	b2db      	uxtb	r3, r3
 8012f6a:	f003 030f 	and.w	r3, r3, #15
 8012f6e:	b2da      	uxtb	r2, r3
 8012f70:	683b      	ldr	r3, [r7, #0]
 8012f72:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f78:	0e1b      	lsrs	r3, r3, #24
 8012f7a:	b2db      	uxtb	r3, r3
 8012f7c:	f003 0303 	and.w	r3, r3, #3
 8012f80:	b2da      	uxtb	r2, r3
 8012f82:	683b      	ldr	r3, [r7, #0]
 8012f84:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f8a:	0c1b      	lsrs	r3, r3, #16
 8012f8c:	b2da      	uxtb	r2, r3
 8012f8e:	683b      	ldr	r3, [r7, #0]
 8012f90:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f96:	0a1b      	lsrs	r3, r3, #8
 8012f98:	b2da      	uxtb	r2, r3
 8012f9a:	683b      	ldr	r3, [r7, #0]
 8012f9c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012fa2:	b2da      	uxtb	r2, r3
 8012fa4:	683b      	ldr	r3, [r7, #0]
 8012fa6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012fac:	0d1b      	lsrs	r3, r3, #20
 8012fae:	b29a      	uxth	r2, r3
 8012fb0:	683b      	ldr	r3, [r7, #0]
 8012fb2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012fb8:	0c1b      	lsrs	r3, r3, #16
 8012fba:	b2db      	uxtb	r3, r3
 8012fbc:	f003 030f 	and.w	r3, r3, #15
 8012fc0:	b2da      	uxtb	r2, r3
 8012fc2:	683b      	ldr	r3, [r7, #0]
 8012fc4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012fca:	0bdb      	lsrs	r3, r3, #15
 8012fcc:	b2db      	uxtb	r3, r3
 8012fce:	f003 0301 	and.w	r3, r3, #1
 8012fd2:	b2da      	uxtb	r2, r3
 8012fd4:	683b      	ldr	r3, [r7, #0]
 8012fd6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012fdc:	0b9b      	lsrs	r3, r3, #14
 8012fde:	b2db      	uxtb	r3, r3
 8012fe0:	f003 0301 	and.w	r3, r3, #1
 8012fe4:	b2da      	uxtb	r2, r3
 8012fe6:	683b      	ldr	r3, [r7, #0]
 8012fe8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012fee:	0b5b      	lsrs	r3, r3, #13
 8012ff0:	b2db      	uxtb	r3, r3
 8012ff2:	f003 0301 	and.w	r3, r3, #1
 8012ff6:	b2da      	uxtb	r2, r3
 8012ff8:	683b      	ldr	r3, [r7, #0]
 8012ffa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013000:	0b1b      	lsrs	r3, r3, #12
 8013002:	b2db      	uxtb	r3, r3
 8013004:	f003 0301 	and.w	r3, r3, #1
 8013008:	b2da      	uxtb	r2, r3
 801300a:	683b      	ldr	r3, [r7, #0]
 801300c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 801300e:	683b      	ldr	r3, [r7, #0]
 8013010:	2200      	movs	r2, #0
 8013012:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013018:	2b00      	cmp	r3, #0
 801301a:	d163      	bne.n	80130e4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013020:	009a      	lsls	r2, r3, #2
 8013022:	f640 73fc 	movw	r3, #4092	; 0xffc
 8013026:	4013      	ands	r3, r2
 8013028:	687a      	ldr	r2, [r7, #4]
 801302a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 801302c:	0f92      	lsrs	r2, r2, #30
 801302e:	431a      	orrs	r2, r3
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013038:	0edb      	lsrs	r3, r3, #27
 801303a:	b2db      	uxtb	r3, r3
 801303c:	f003 0307 	and.w	r3, r3, #7
 8013040:	b2da      	uxtb	r2, r3
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801304a:	0e1b      	lsrs	r3, r3, #24
 801304c:	b2db      	uxtb	r3, r3
 801304e:	f003 0307 	and.w	r3, r3, #7
 8013052:	b2da      	uxtb	r2, r3
 8013054:	683b      	ldr	r3, [r7, #0]
 8013056:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801305c:	0d5b      	lsrs	r3, r3, #21
 801305e:	b2db      	uxtb	r3, r3
 8013060:	f003 0307 	and.w	r3, r3, #7
 8013064:	b2da      	uxtb	r2, r3
 8013066:	683b      	ldr	r3, [r7, #0]
 8013068:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801306e:	0c9b      	lsrs	r3, r3, #18
 8013070:	b2db      	uxtb	r3, r3
 8013072:	f003 0307 	and.w	r3, r3, #7
 8013076:	b2da      	uxtb	r2, r3
 8013078:	683b      	ldr	r3, [r7, #0]
 801307a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013080:	0bdb      	lsrs	r3, r3, #15
 8013082:	b2db      	uxtb	r3, r3
 8013084:	f003 0307 	and.w	r3, r3, #7
 8013088:	b2da      	uxtb	r2, r3
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 801308e:	683b      	ldr	r3, [r7, #0]
 8013090:	691b      	ldr	r3, [r3, #16]
 8013092:	1c5a      	adds	r2, r3, #1
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8013098:	683b      	ldr	r3, [r7, #0]
 801309a:	7e1b      	ldrb	r3, [r3, #24]
 801309c:	b2db      	uxtb	r3, r3
 801309e:	f003 0307 	and.w	r3, r3, #7
 80130a2:	3302      	adds	r3, #2
 80130a4:	2201      	movs	r2, #1
 80130a6:	fa02 f303 	lsl.w	r3, r2, r3
 80130aa:	687a      	ldr	r2, [r7, #4]
 80130ac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80130ae:	fb03 f202 	mul.w	r2, r3, r2
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80130b6:	683b      	ldr	r3, [r7, #0]
 80130b8:	7a1b      	ldrb	r3, [r3, #8]
 80130ba:	b2db      	uxtb	r3, r3
 80130bc:	f003 030f 	and.w	r3, r3, #15
 80130c0:	2201      	movs	r2, #1
 80130c2:	409a      	lsls	r2, r3
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80130cc:	687a      	ldr	r2, [r7, #4]
 80130ce:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80130d0:	0a52      	lsrs	r2, r2, #9
 80130d2:	fb03 f202 	mul.w	r2, r3, r2
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80130e0:	661a      	str	r2, [r3, #96]	; 0x60
 80130e2:	e031      	b.n	8013148 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80130e8:	2b01      	cmp	r3, #1
 80130ea:	d11d      	bne.n	8013128 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80130f0:	041b      	lsls	r3, r3, #16
 80130f2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130fa:	0c1b      	lsrs	r3, r3, #16
 80130fc:	431a      	orrs	r2, r3
 80130fe:	683b      	ldr	r3, [r7, #0]
 8013100:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	691b      	ldr	r3, [r3, #16]
 8013106:	3301      	adds	r3, #1
 8013108:	029a      	lsls	r2, r3, #10
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	f44f 7200 	mov.w	r2, #512	; 0x200
 801311c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	661a      	str	r2, [r3, #96]	; 0x60
 8013126:	e00f      	b.n	8013148 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	4a58      	ldr	r2, [pc, #352]	; (8013290 <HAL_SD_GetCardCSD+0x344>)
 801312e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013134:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	2201      	movs	r2, #1
 8013140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8013144:	2301      	movs	r3, #1
 8013146:	e09d      	b.n	8013284 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801314c:	0b9b      	lsrs	r3, r3, #14
 801314e:	b2db      	uxtb	r3, r3
 8013150:	f003 0301 	and.w	r3, r3, #1
 8013154:	b2da      	uxtb	r2, r3
 8013156:	683b      	ldr	r3, [r7, #0]
 8013158:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801315e:	09db      	lsrs	r3, r3, #7
 8013160:	b2db      	uxtb	r3, r3
 8013162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013166:	b2da      	uxtb	r2, r3
 8013168:	683b      	ldr	r3, [r7, #0]
 801316a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013170:	b2db      	uxtb	r3, r3
 8013172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013176:	b2da      	uxtb	r2, r3
 8013178:	683b      	ldr	r3, [r7, #0]
 801317a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013180:	0fdb      	lsrs	r3, r3, #31
 8013182:	b2da      	uxtb	r2, r3
 8013184:	683b      	ldr	r3, [r7, #0]
 8013186:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801318c:	0f5b      	lsrs	r3, r3, #29
 801318e:	b2db      	uxtb	r3, r3
 8013190:	f003 0303 	and.w	r3, r3, #3
 8013194:	b2da      	uxtb	r2, r3
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801319e:	0e9b      	lsrs	r3, r3, #26
 80131a0:	b2db      	uxtb	r3, r3
 80131a2:	f003 0307 	and.w	r3, r3, #7
 80131a6:	b2da      	uxtb	r2, r3
 80131a8:	683b      	ldr	r3, [r7, #0]
 80131aa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131b0:	0d9b      	lsrs	r3, r3, #22
 80131b2:	b2db      	uxtb	r3, r3
 80131b4:	f003 030f 	and.w	r3, r3, #15
 80131b8:	b2da      	uxtb	r2, r3
 80131ba:	683b      	ldr	r3, [r7, #0]
 80131bc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131c2:	0d5b      	lsrs	r3, r3, #21
 80131c4:	b2db      	uxtb	r3, r3
 80131c6:	f003 0301 	and.w	r3, r3, #1
 80131ca:	b2da      	uxtb	r2, r3
 80131cc:	683b      	ldr	r3, [r7, #0]
 80131ce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	2200      	movs	r2, #0
 80131d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131de:	0c1b      	lsrs	r3, r3, #16
 80131e0:	b2db      	uxtb	r3, r3
 80131e2:	f003 0301 	and.w	r3, r3, #1
 80131e6:	b2da      	uxtb	r2, r3
 80131e8:	683b      	ldr	r3, [r7, #0]
 80131ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131f2:	0bdb      	lsrs	r3, r3, #15
 80131f4:	b2db      	uxtb	r3, r3
 80131f6:	f003 0301 	and.w	r3, r3, #1
 80131fa:	b2da      	uxtb	r2, r3
 80131fc:	683b      	ldr	r3, [r7, #0]
 80131fe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013206:	0b9b      	lsrs	r3, r3, #14
 8013208:	b2db      	uxtb	r3, r3
 801320a:	f003 0301 	and.w	r3, r3, #1
 801320e:	b2da      	uxtb	r2, r3
 8013210:	683b      	ldr	r3, [r7, #0]
 8013212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801321a:	0b5b      	lsrs	r3, r3, #13
 801321c:	b2db      	uxtb	r3, r3
 801321e:	f003 0301 	and.w	r3, r3, #1
 8013222:	b2da      	uxtb	r2, r3
 8013224:	683b      	ldr	r3, [r7, #0]
 8013226:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801322e:	0b1b      	lsrs	r3, r3, #12
 8013230:	b2db      	uxtb	r3, r3
 8013232:	f003 0301 	and.w	r3, r3, #1
 8013236:	b2da      	uxtb	r2, r3
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013242:	0a9b      	lsrs	r3, r3, #10
 8013244:	b2db      	uxtb	r3, r3
 8013246:	f003 0303 	and.w	r3, r3, #3
 801324a:	b2da      	uxtb	r2, r3
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013256:	0a1b      	lsrs	r3, r3, #8
 8013258:	b2db      	uxtb	r3, r3
 801325a:	f003 0303 	and.w	r3, r3, #3
 801325e:	b2da      	uxtb	r2, r3
 8013260:	683b      	ldr	r3, [r7, #0]
 8013262:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801326a:	085b      	lsrs	r3, r3, #1
 801326c:	b2db      	uxtb	r3, r3
 801326e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013272:	b2da      	uxtb	r2, r3
 8013274:	683b      	ldr	r3, [r7, #0]
 8013276:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	2201      	movs	r2, #1
 801327e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8013282:	2300      	movs	r3, #0
}
 8013284:	4618      	mov	r0, r3
 8013286:	370c      	adds	r7, #12
 8013288:	46bd      	mov	sp, r7
 801328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801328e:	4770      	bx	lr
 8013290:	004005ff 	.word	0x004005ff

08013294 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8013294:	b5b0      	push	{r4, r5, r7, lr}
 8013296:	b090      	sub	sp, #64	; 0x40
 8013298:	af04      	add	r7, sp, #16
 801329a:	6078      	str	r0, [r7, #4]
 801329c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 801329e:	2300      	movs	r3, #0
 80132a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	2203      	movs	r2, #3
 80132a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80132b0:	2b03      	cmp	r3, #3
 80132b2:	d02e      	beq.n	8013312 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80132b4:	683b      	ldr	r3, [r7, #0]
 80132b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80132ba:	d106      	bne.n	80132ca <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	639a      	str	r2, [r3, #56]	; 0x38
 80132c8:	e029      	b.n	801331e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80132ca:	683b      	ldr	r3, [r7, #0]
 80132cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80132d0:	d10a      	bne.n	80132e8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80132d2:	6878      	ldr	r0, [r7, #4]
 80132d4:	f000 f9f6 	bl	80136c4 <SD_WideBus_Enable>
 80132d8:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80132de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132e0:	431a      	orrs	r2, r3
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	639a      	str	r2, [r3, #56]	; 0x38
 80132e6:	e01a      	b.n	801331e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80132e8:	683b      	ldr	r3, [r7, #0]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d10a      	bne.n	8013304 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80132ee:	6878      	ldr	r0, [r7, #4]
 80132f0:	f000 fa33 	bl	801375a <SD_WideBus_Disable>
 80132f4:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80132fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132fc:	431a      	orrs	r2, r3
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	639a      	str	r2, [r3, #56]	; 0x38
 8013302:	e00c      	b.n	801331e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013308:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	639a      	str	r2, [r3, #56]	; 0x38
 8013310:	e005      	b.n	801331e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013316:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013322:	2b00      	cmp	r3, #0
 8013324:	d007      	beq.n	8013336 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	4a35      	ldr	r2, [pc, #212]	; (8013400 <HAL_SD_ConfigWideBusOperation+0x16c>)
 801332c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 801332e:	2301      	movs	r3, #1
 8013330:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013334:	e042      	b.n	80133bc <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8013336:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 801333a:	f7fe faed 	bl	8011918 <HAL_RCCEx_GetPeriphCLKFreq>
 801333e:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8013340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013342:	2b00      	cmp	r3, #0
 8013344:	d031      	beq.n	80133aa <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	685b      	ldr	r3, [r3, #4]
 801334a:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	689b      	ldr	r3, [r3, #8]
 8013350:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	68db      	ldr	r3, [r3, #12]
 8013356:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 8013358:	683b      	ldr	r3, [r7, #0]
 801335a:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	695b      	ldr	r3, [r3, #20]
 8013360:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	699b      	ldr	r3, [r3, #24]
 8013366:	3302      	adds	r3, #2
 8013368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801336a:	fbb2 f3f3 	udiv	r3, r2, r3
 801336e:	4a25      	ldr	r2, [pc, #148]	; (8013404 <HAL_SD_ConfigWideBusOperation+0x170>)
 8013370:	4293      	cmp	r3, r2
 8013372:	d907      	bls.n	8013384 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 8013374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013376:	4a24      	ldr	r2, [pc, #144]	; (8013408 <HAL_SD_ConfigWideBusOperation+0x174>)
 8013378:	fba2 2303 	umull	r2, r3, r2, r3
 801337c:	0ddb      	lsrs	r3, r3, #23
 801337e:	3b02      	subs	r3, #2
 8013380:	623b      	str	r3, [r7, #32]
 8013382:	e002      	b.n	801338a <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	699b      	ldr	r3, [r3, #24]
 8013388:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	681d      	ldr	r5, [r3, #0]
 801338e:	466c      	mov	r4, sp
 8013390:	f107 0318 	add.w	r3, r7, #24
 8013394:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013398:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801339c:	f107 030c 	add.w	r3, r7, #12
 80133a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80133a2:	4628      	mov	r0, r5
 80133a4:	f002 fafa 	bl	801599c <SDMMC_Init>
 80133a8:	e008      	b.n	80133bc <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80133b6:	2301      	movs	r3, #1
 80133b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80133c4:	4618      	mov	r0, r3
 80133c6:	f002 fbb6 	bl	8015b36 <SDMMC_CmdBlockLength>
 80133ca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80133cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d00c      	beq.n	80133ec <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	4a0a      	ldr	r2, [pc, #40]	; (8013400 <HAL_SD_ConfigWideBusOperation+0x16c>)
 80133d8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80133de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133e0:	431a      	orrs	r2, r3
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80133e6:	2301      	movs	r3, #1
 80133e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	2201      	movs	r2, #1
 80133f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80133f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80133f8:	4618      	mov	r0, r3
 80133fa:	3730      	adds	r7, #48	; 0x30
 80133fc:	46bd      	mov	sp, r7
 80133fe:	bdb0      	pop	{r4, r5, r7, pc}
 8013400:	004005ff 	.word	0x004005ff
 8013404:	017d7840 	.word	0x017d7840
 8013408:	55e63b89 	.word	0x55e63b89

0801340c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 801340c:	b5b0      	push	{r4, r5, r7, lr}
 801340e:	b094      	sub	sp, #80	; 0x50
 8013410:	af04      	add	r7, sp, #16
 8013412:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8013414:	2301      	movs	r3, #1
 8013416:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	4618      	mov	r0, r3
 801341e:	f002 fb06 	bl	8015a2e <SDMMC_GetPowerState>
 8013422:	4603      	mov	r3, r0
 8013424:	2b00      	cmp	r3, #0
 8013426:	d102      	bne.n	801342e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8013428:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 801342c:	e0b8      	b.n	80135a0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013432:	2b03      	cmp	r3, #3
 8013434:	d02f      	beq.n	8013496 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	4618      	mov	r0, r3
 801343c:	f002 fc85 	bl	8015d4a <SDMMC_CmdSendCID>
 8013440:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8013442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013444:	2b00      	cmp	r3, #0
 8013446:	d001      	beq.n	801344c <SD_InitCard+0x40>
    {
      return errorstate;
 8013448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801344a:	e0a9      	b.n	80135a0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	2100      	movs	r1, #0
 8013452:	4618      	mov	r0, r3
 8013454:	f002 fb30 	bl	8015ab8 <SDMMC_GetResponse>
 8013458:	4602      	mov	r2, r0
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	2104      	movs	r1, #4
 8013464:	4618      	mov	r0, r3
 8013466:	f002 fb27 	bl	8015ab8 <SDMMC_GetResponse>
 801346a:	4602      	mov	r2, r0
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	2108      	movs	r1, #8
 8013476:	4618      	mov	r0, r3
 8013478:	f002 fb1e 	bl	8015ab8 <SDMMC_GetResponse>
 801347c:	4602      	mov	r2, r0
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	210c      	movs	r1, #12
 8013488:	4618      	mov	r0, r3
 801348a:	f002 fb15 	bl	8015ab8 <SDMMC_GetResponse>
 801348e:	4602      	mov	r2, r0
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801349a:	2b03      	cmp	r3, #3
 801349c:	d00d      	beq.n	80134ba <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	f107 020e 	add.w	r2, r7, #14
 80134a6:	4611      	mov	r1, r2
 80134a8:	4618      	mov	r0, r3
 80134aa:	f002 fc8b 	bl	8015dc4 <SDMMC_CmdSetRelAdd>
 80134ae:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80134b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d001      	beq.n	80134ba <SD_InitCard+0xae>
    {
      return errorstate;
 80134b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134b8:	e072      	b.n	80135a0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80134be:	2b03      	cmp	r3, #3
 80134c0:	d036      	beq.n	8013530 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80134c2:	89fb      	ldrh	r3, [r7, #14]
 80134c4:	461a      	mov	r2, r3
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	681a      	ldr	r2, [r3, #0]
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80134d2:	041b      	lsls	r3, r3, #16
 80134d4:	4619      	mov	r1, r3
 80134d6:	4610      	mov	r0, r2
 80134d8:	f002 fc55 	bl	8015d86 <SDMMC_CmdSendCSD>
 80134dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80134de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d001      	beq.n	80134e8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80134e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134e6:	e05b      	b.n	80135a0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	2100      	movs	r1, #0
 80134ee:	4618      	mov	r0, r3
 80134f0:	f002 fae2 	bl	8015ab8 <SDMMC_GetResponse>
 80134f4:	4602      	mov	r2, r0
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	2104      	movs	r1, #4
 8013500:	4618      	mov	r0, r3
 8013502:	f002 fad9 	bl	8015ab8 <SDMMC_GetResponse>
 8013506:	4602      	mov	r2, r0
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	2108      	movs	r1, #8
 8013512:	4618      	mov	r0, r3
 8013514:	f002 fad0 	bl	8015ab8 <SDMMC_GetResponse>
 8013518:	4602      	mov	r2, r0
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	210c      	movs	r1, #12
 8013524:	4618      	mov	r0, r3
 8013526:	f002 fac7 	bl	8015ab8 <SDMMC_GetResponse>
 801352a:	4602      	mov	r2, r0
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	2104      	movs	r1, #4
 8013536:	4618      	mov	r0, r3
 8013538:	f002 fabe 	bl	8015ab8 <SDMMC_GetResponse>
 801353c:	4603      	mov	r3, r0
 801353e:	0d1a      	lsrs	r2, r3, #20
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8013544:	f107 0310 	add.w	r3, r7, #16
 8013548:	4619      	mov	r1, r3
 801354a:	6878      	ldr	r0, [r7, #4]
 801354c:	f7ff fcfe 	bl	8012f4c <HAL_SD_GetCardCSD>
 8013550:	4603      	mov	r3, r0
 8013552:	2b00      	cmp	r3, #0
 8013554:	d002      	beq.n	801355c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8013556:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801355a:	e021      	b.n	80135a0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	6819      	ldr	r1, [r3, #0]
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013564:	041b      	lsls	r3, r3, #16
 8013566:	2200      	movs	r2, #0
 8013568:	461c      	mov	r4, r3
 801356a:	4615      	mov	r5, r2
 801356c:	4622      	mov	r2, r4
 801356e:	462b      	mov	r3, r5
 8013570:	4608      	mov	r0, r1
 8013572:	f002 fb02 	bl	8015b7a <SDMMC_CmdSelDesel>
 8013576:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8013578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801357a:	2b00      	cmp	r3, #0
 801357c:	d001      	beq.n	8013582 <SD_InitCard+0x176>
  {
    return errorstate;
 801357e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013580:	e00e      	b.n	80135a0 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	681d      	ldr	r5, [r3, #0]
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	466c      	mov	r4, sp
 801358a:	f103 0210 	add.w	r2, r3, #16
 801358e:	ca07      	ldmia	r2, {r0, r1, r2}
 8013590:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013594:	3304      	adds	r3, #4
 8013596:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013598:	4628      	mov	r0, r5
 801359a:	f002 f9ff 	bl	801599c <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 801359e:	2300      	movs	r3, #0
}
 80135a0:	4618      	mov	r0, r3
 80135a2:	3740      	adds	r7, #64	; 0x40
 80135a4:	46bd      	mov	sp, r7
 80135a6:	bdb0      	pop	{r4, r5, r7, pc}

080135a8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b086      	sub	sp, #24
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80135b0:	2300      	movs	r3, #0
 80135b2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80135b4:	2300      	movs	r3, #0
 80135b6:	617b      	str	r3, [r7, #20]
 80135b8:	2300      	movs	r3, #0
 80135ba:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	4618      	mov	r0, r3
 80135c2:	f002 fafd 	bl	8015bc0 <SDMMC_CmdGoIdleState>
 80135c6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d001      	beq.n	80135d2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	e072      	b.n	80136b8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	4618      	mov	r0, r3
 80135d8:	f002 fb10 	bl	8015bfc <SDMMC_CmdOperCond>
 80135dc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d00d      	beq.n	8013600 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	2200      	movs	r2, #0
 80135e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	4618      	mov	r0, r3
 80135f0:	f002 fae6 	bl	8015bc0 <SDMMC_CmdGoIdleState>
 80135f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d004      	beq.n	8013606 <SD_PowerON+0x5e>
    {
      return errorstate;
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	e05b      	b.n	80136b8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	2201      	movs	r2, #1
 8013604:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801360a:	2b01      	cmp	r3, #1
 801360c:	d137      	bne.n	801367e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	2100      	movs	r1, #0
 8013614:	4618      	mov	r0, r3
 8013616:	f002 fb10 	bl	8015c3a <SDMMC_CmdAppCommand>
 801361a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d02d      	beq.n	801367e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8013622:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013626:	e047      	b.n	80136b8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	2100      	movs	r1, #0
 801362e:	4618      	mov	r0, r3
 8013630:	f002 fb03 	bl	8015c3a <SDMMC_CmdAppCommand>
 8013634:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d001      	beq.n	8013640 <SD_PowerON+0x98>
    {
      return errorstate;
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	e03b      	b.n	80136b8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	491e      	ldr	r1, [pc, #120]	; (80136c0 <SD_PowerON+0x118>)
 8013646:	4618      	mov	r0, r3
 8013648:	f002 fb19 	bl	8015c7e <SDMMC_CmdAppOperCommand>
 801364c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d002      	beq.n	801365a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8013654:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013658:	e02e      	b.n	80136b8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	2100      	movs	r1, #0
 8013660:	4618      	mov	r0, r3
 8013662:	f002 fa29 	bl	8015ab8 <SDMMC_GetResponse>
 8013666:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8013668:	697b      	ldr	r3, [r7, #20]
 801366a:	0fdb      	lsrs	r3, r3, #31
 801366c:	2b01      	cmp	r3, #1
 801366e:	d101      	bne.n	8013674 <SD_PowerON+0xcc>
 8013670:	2301      	movs	r3, #1
 8013672:	e000      	b.n	8013676 <SD_PowerON+0xce>
 8013674:	2300      	movs	r3, #0
 8013676:	613b      	str	r3, [r7, #16]

    count++;
 8013678:	68bb      	ldr	r3, [r7, #8]
 801367a:	3301      	adds	r3, #1
 801367c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 801367e:	68bb      	ldr	r3, [r7, #8]
 8013680:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013684:	4293      	cmp	r3, r2
 8013686:	d802      	bhi.n	801368e <SD_PowerON+0xe6>
 8013688:	693b      	ldr	r3, [r7, #16]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d0cc      	beq.n	8013628 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 801368e:	68bb      	ldr	r3, [r7, #8]
 8013690:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8013694:	4293      	cmp	r3, r2
 8013696:	d902      	bls.n	801369e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8013698:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801369c:	e00c      	b.n	80136b8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 801369e:	697b      	ldr	r3, [r7, #20]
 80136a0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d003      	beq.n	80136b0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	2201      	movs	r2, #1
 80136ac:	645a      	str	r2, [r3, #68]	; 0x44
 80136ae:	e002      	b.n	80136b6 <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	2200      	movs	r2, #0
 80136b4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80136b6:	2300      	movs	r3, #0
}
 80136b8:	4618      	mov	r0, r3
 80136ba:	3718      	adds	r7, #24
 80136bc:	46bd      	mov	sp, r7
 80136be:	bd80      	pop	{r7, pc}
 80136c0:	c1100000 	.word	0xc1100000

080136c4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b086      	sub	sp, #24
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80136cc:	2300      	movs	r3, #0
 80136ce:	60fb      	str	r3, [r7, #12]
 80136d0:	2300      	movs	r3, #0
 80136d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	2100      	movs	r1, #0
 80136da:	4618      	mov	r0, r3
 80136dc:	f002 f9ec 	bl	8015ab8 <SDMMC_GetResponse>
 80136e0:	4603      	mov	r3, r0
 80136e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80136e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80136ea:	d102      	bne.n	80136f2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80136ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80136f0:	e02f      	b.n	8013752 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80136f2:	f107 030c 	add.w	r3, r7, #12
 80136f6:	4619      	mov	r1, r3
 80136f8:	6878      	ldr	r0, [r7, #4]
 80136fa:	f000 f879 	bl	80137f0 <SD_FindSCR>
 80136fe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8013700:	697b      	ldr	r3, [r7, #20]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d001      	beq.n	801370a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8013706:	697b      	ldr	r3, [r7, #20]
 8013708:	e023      	b.n	8013752 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801370a:	693b      	ldr	r3, [r7, #16]
 801370c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013710:	2b00      	cmp	r3, #0
 8013712:	d01c      	beq.n	801374e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	681a      	ldr	r2, [r3, #0]
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801371c:	041b      	lsls	r3, r3, #16
 801371e:	4619      	mov	r1, r3
 8013720:	4610      	mov	r0, r2
 8013722:	f002 fa8a 	bl	8015c3a <SDMMC_CmdAppCommand>
 8013726:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013728:	697b      	ldr	r3, [r7, #20]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d001      	beq.n	8013732 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 801372e:	697b      	ldr	r3, [r7, #20]
 8013730:	e00f      	b.n	8013752 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	2102      	movs	r1, #2
 8013738:	4618      	mov	r0, r3
 801373a:	f002 fac3 	bl	8015cc4 <SDMMC_CmdBusWidth>
 801373e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8013740:	697b      	ldr	r3, [r7, #20]
 8013742:	2b00      	cmp	r3, #0
 8013744:	d001      	beq.n	801374a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8013746:	697b      	ldr	r3, [r7, #20]
 8013748:	e003      	b.n	8013752 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 801374a:	2300      	movs	r3, #0
 801374c:	e001      	b.n	8013752 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801374e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8013752:	4618      	mov	r0, r3
 8013754:	3718      	adds	r7, #24
 8013756:	46bd      	mov	sp, r7
 8013758:	bd80      	pop	{r7, pc}

0801375a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 801375a:	b580      	push	{r7, lr}
 801375c:	b086      	sub	sp, #24
 801375e:	af00      	add	r7, sp, #0
 8013760:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8013762:	2300      	movs	r3, #0
 8013764:	60fb      	str	r3, [r7, #12]
 8013766:	2300      	movs	r3, #0
 8013768:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	2100      	movs	r1, #0
 8013770:	4618      	mov	r0, r3
 8013772:	f002 f9a1 	bl	8015ab8 <SDMMC_GetResponse>
 8013776:	4603      	mov	r3, r0
 8013778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801377c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8013780:	d102      	bne.n	8013788 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8013782:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013786:	e02f      	b.n	80137e8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8013788:	f107 030c 	add.w	r3, r7, #12
 801378c:	4619      	mov	r1, r3
 801378e:	6878      	ldr	r0, [r7, #4]
 8013790:	f000 f82e 	bl	80137f0 <SD_FindSCR>
 8013794:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8013796:	697b      	ldr	r3, [r7, #20]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d001      	beq.n	80137a0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 801379c:	697b      	ldr	r3, [r7, #20]
 801379e:	e023      	b.n	80137e8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80137a0:	693b      	ldr	r3, [r7, #16]
 80137a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d01c      	beq.n	80137e4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	681a      	ldr	r2, [r3, #0]
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80137b2:	041b      	lsls	r3, r3, #16
 80137b4:	4619      	mov	r1, r3
 80137b6:	4610      	mov	r0, r2
 80137b8:	f002 fa3f 	bl	8015c3a <SDMMC_CmdAppCommand>
 80137bc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80137be:	697b      	ldr	r3, [r7, #20]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d001      	beq.n	80137c8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80137c4:	697b      	ldr	r3, [r7, #20]
 80137c6:	e00f      	b.n	80137e8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	2100      	movs	r1, #0
 80137ce:	4618      	mov	r0, r3
 80137d0:	f002 fa78 	bl	8015cc4 <SDMMC_CmdBusWidth>
 80137d4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80137d6:	697b      	ldr	r3, [r7, #20]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d001      	beq.n	80137e0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80137dc:	697b      	ldr	r3, [r7, #20]
 80137de:	e003      	b.n	80137e8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80137e0:	2300      	movs	r3, #0
 80137e2:	e001      	b.n	80137e8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80137e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80137e8:	4618      	mov	r0, r3
 80137ea:	3718      	adds	r7, #24
 80137ec:	46bd      	mov	sp, r7
 80137ee:	bd80      	pop	{r7, pc}

080137f0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80137f0:	b590      	push	{r4, r7, lr}
 80137f2:	b08f      	sub	sp, #60	; 0x3c
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
 80137f8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80137fa:	f7f8 f9d3 	bl	800bba4 <HAL_GetTick>
 80137fe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8013800:	2300      	movs	r3, #0
 8013802:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8013804:	2300      	movs	r3, #0
 8013806:	60bb      	str	r3, [r7, #8]
 8013808:	2300      	movs	r3, #0
 801380a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	2108      	movs	r1, #8
 8013816:	4618      	mov	r0, r3
 8013818:	f002 f98d 	bl	8015b36 <SDMMC_CmdBlockLength>
 801381c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801381e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013820:	2b00      	cmp	r3, #0
 8013822:	d001      	beq.n	8013828 <SD_FindSCR+0x38>
  {
    return errorstate;
 8013824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013826:	e0a9      	b.n	801397c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	681a      	ldr	r2, [r3, #0]
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013830:	041b      	lsls	r3, r3, #16
 8013832:	4619      	mov	r1, r3
 8013834:	4610      	mov	r0, r2
 8013836:	f002 fa00 	bl	8015c3a <SDMMC_CmdAppCommand>
 801383a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801383e:	2b00      	cmp	r3, #0
 8013840:	d001      	beq.n	8013846 <SD_FindSCR+0x56>
  {
    return errorstate;
 8013842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013844:	e09a      	b.n	801397c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8013846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801384a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 801384c:	2308      	movs	r3, #8
 801384e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8013850:	2330      	movs	r3, #48	; 0x30
 8013852:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8013854:	2302      	movs	r3, #2
 8013856:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8013858:	2300      	movs	r3, #0
 801385a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 801385c:	2301      	movs	r3, #1
 801385e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	f107 0210 	add.w	r2, r7, #16
 8013868:	4611      	mov	r1, r2
 801386a:	4618      	mov	r0, r3
 801386c:	f002 f937 	bl	8015ade <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	4618      	mov	r0, r3
 8013876:	f002 fa47 	bl	8015d08 <SDMMC_CmdSendSCR>
 801387a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 801387c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801387e:	2b00      	cmp	r3, #0
 8013880:	d022      	beq.n	80138c8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8013882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013884:	e07a      	b.n	801397c <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801388c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013890:	2b00      	cmp	r3, #0
 8013892:	d00e      	beq.n	80138b2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	6819      	ldr	r1, [r3, #0]
 8013898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801389a:	009b      	lsls	r3, r3, #2
 801389c:	f107 0208 	add.w	r2, r7, #8
 80138a0:	18d4      	adds	r4, r2, r3
 80138a2:	4608      	mov	r0, r1
 80138a4:	f002 f8a7 	bl	80159f6 <SDMMC_ReadFIFO>
 80138a8:	4603      	mov	r3, r0
 80138aa:	6023      	str	r3, [r4, #0]
      index++;
 80138ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138ae:	3301      	adds	r3, #1
 80138b0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80138b2:	f7f8 f977 	bl	800bba4 <HAL_GetTick>
 80138b6:	4602      	mov	r2, r0
 80138b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138ba:	1ad3      	subs	r3, r2, r3
 80138bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80138c0:	d102      	bne.n	80138c8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80138c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80138c6:	e059      	b.n	801397c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80138ce:	f240 432a 	movw	r3, #1066	; 0x42a
 80138d2:	4013      	ands	r3, r2
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d0d6      	beq.n	8013886 <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138de:	f003 0308 	and.w	r3, r3, #8
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d005      	beq.n	80138f2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	2208      	movs	r2, #8
 80138ec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80138ee:	2308      	movs	r3, #8
 80138f0:	e044      	b.n	801397c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138f8:	f003 0302 	and.w	r3, r3, #2
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d005      	beq.n	801390c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	2202      	movs	r2, #2
 8013906:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8013908:	2302      	movs	r3, #2
 801390a:	e037      	b.n	801397c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013912:	f003 0320 	and.w	r3, r3, #32
 8013916:	2b00      	cmp	r3, #0
 8013918:	d005      	beq.n	8013926 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	2220      	movs	r2, #32
 8013920:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8013922:	2320      	movs	r3, #32
 8013924:	e02a      	b.n	801397c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	f240 523a 	movw	r2, #1338	; 0x53a
 801392e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	061a      	lsls	r2, r3, #24
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	021b      	lsls	r3, r3, #8
 8013938:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801393c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	0a1b      	lsrs	r3, r3, #8
 8013942:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8013946:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	0e1b      	lsrs	r3, r3, #24
 801394c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 801394e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013950:	601a      	str	r2, [r3, #0]
    scr++;
 8013952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013954:	3304      	adds	r3, #4
 8013956:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8013958:	68bb      	ldr	r3, [r7, #8]
 801395a:	061a      	lsls	r2, r3, #24
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	021b      	lsls	r3, r3, #8
 8013960:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013964:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8013966:	68bb      	ldr	r3, [r7, #8]
 8013968:	0a1b      	lsrs	r3, r3, #8
 801396a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801396e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	0e1b      	lsrs	r3, r3, #24
 8013974:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8013976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013978:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 801397a:	2300      	movs	r3, #0
}
 801397c:	4618      	mov	r0, r3
 801397e:	373c      	adds	r7, #60	; 0x3c
 8013980:	46bd      	mov	sp, r7
 8013982:	bd90      	pop	{r4, r7, pc}

08013984 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013984:	b580      	push	{r7, lr}
 8013986:	b084      	sub	sp, #16
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d101      	bne.n	8013996 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013992:	2301      	movs	r3, #1
 8013994:	e095      	b.n	8013ac2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801399a:	2b00      	cmp	r3, #0
 801399c:	d108      	bne.n	80139b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	685b      	ldr	r3, [r3, #4]
 80139a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80139a6:	d009      	beq.n	80139bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	2200      	movs	r2, #0
 80139ac:	61da      	str	r2, [r3, #28]
 80139ae:	e005      	b.n	80139bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2200      	movs	r2, #0
 80139b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	2200      	movs	r2, #0
 80139ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2200      	movs	r2, #0
 80139c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80139c8:	b2db      	uxtb	r3, r3
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d106      	bne.n	80139dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	2200      	movs	r2, #0
 80139d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80139d6:	6878      	ldr	r0, [r7, #4]
 80139d8:	f7ef fa46 	bl	8002e68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	2202      	movs	r2, #2
 80139e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	681a      	ldr	r2, [r3, #0]
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80139f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	68db      	ldr	r3, [r3, #12]
 80139f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80139fc:	d902      	bls.n	8013a04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80139fe:	2300      	movs	r3, #0
 8013a00:	60fb      	str	r3, [r7, #12]
 8013a02:	e002      	b.n	8013a0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8013a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013a08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	68db      	ldr	r3, [r3, #12]
 8013a0e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8013a12:	d007      	beq.n	8013a24 <HAL_SPI_Init+0xa0>
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	68db      	ldr	r3, [r3, #12]
 8013a18:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8013a1c:	d002      	beq.n	8013a24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	2200      	movs	r2, #0
 8013a22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	685b      	ldr	r3, [r3, #4]
 8013a28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	689b      	ldr	r3, [r3, #8]
 8013a30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8013a34:	431a      	orrs	r2, r3
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	691b      	ldr	r3, [r3, #16]
 8013a3a:	f003 0302 	and.w	r3, r3, #2
 8013a3e:	431a      	orrs	r2, r3
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	695b      	ldr	r3, [r3, #20]
 8013a44:	f003 0301 	and.w	r3, r3, #1
 8013a48:	431a      	orrs	r2, r3
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	699b      	ldr	r3, [r3, #24]
 8013a4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013a52:	431a      	orrs	r2, r3
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	69db      	ldr	r3, [r3, #28]
 8013a58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013a5c:	431a      	orrs	r2, r3
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	6a1b      	ldr	r3, [r3, #32]
 8013a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013a66:	ea42 0103 	orr.w	r1, r2, r3
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a6e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	430a      	orrs	r2, r1
 8013a78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	699b      	ldr	r3, [r3, #24]
 8013a7e:	0c1b      	lsrs	r3, r3, #16
 8013a80:	f003 0204 	and.w	r2, r3, #4
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a88:	f003 0310 	and.w	r3, r3, #16
 8013a8c:	431a      	orrs	r2, r3
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a92:	f003 0308 	and.w	r3, r3, #8
 8013a96:	431a      	orrs	r2, r3
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	68db      	ldr	r3, [r3, #12]
 8013a9c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8013aa0:	ea42 0103 	orr.w	r1, r2, r3
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	430a      	orrs	r2, r1
 8013ab0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	2201      	movs	r2, #1
 8013abc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8013ac0:	2300      	movs	r3, #0
}
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	3710      	adds	r7, #16
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}

08013aca <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8013aca:	b580      	push	{r7, lr}
 8013acc:	b084      	sub	sp, #16
 8013ace:	af00      	add	r7, sp, #0
 8013ad0:	60f8      	str	r0, [r7, #12]
 8013ad2:	60b9      	str	r1, [r7, #8]
 8013ad4:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d101      	bne.n	8013ae0 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8013adc:	2301      	movs	r3, #1
 8013ade:	e038      	b.n	8013b52 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8013ae6:	b2db      	uxtb	r3, r3
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d106      	bne.n	8013afa <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	2200      	movs	r2, #0
 8013af0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8013af4:	68f8      	ldr	r0, [r7, #12]
 8013af6:	f7ed fe3d 	bl	8001774 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	681a      	ldr	r2, [r3, #0]
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	3308      	adds	r3, #8
 8013b02:	4619      	mov	r1, r3
 8013b04:	4610      	mov	r0, r2
 8013b06:	f001 fe31 	bl	801576c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	6818      	ldr	r0, [r3, #0]
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	689b      	ldr	r3, [r3, #8]
 8013b12:	461a      	mov	r2, r3
 8013b14:	68b9      	ldr	r1, [r7, #8]
 8013b16:	f001 feb9 	bl	801588c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	6858      	ldr	r0, [r3, #4]
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	689a      	ldr	r2, [r3, #8]
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b26:	6879      	ldr	r1, [r7, #4]
 8013b28:	f001 ff00 	bl	801592c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	68fa      	ldr	r2, [r7, #12]
 8013b32:	6892      	ldr	r2, [r2, #8]
 8013b34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	68fa      	ldr	r2, [r7, #12]
 8013b3e:	6892      	ldr	r2, [r2, #8]
 8013b40:	f041 0101 	orr.w	r1, r1, #1
 8013b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	2201      	movs	r2, #1
 8013b4c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8013b50:	2300      	movs	r3, #0
}
 8013b52:	4618      	mov	r0, r3
 8013b54:	3710      	adds	r7, #16
 8013b56:	46bd      	mov	sp, r7
 8013b58:	bd80      	pop	{r7, pc}

08013b5a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013b5a:	b580      	push	{r7, lr}
 8013b5c:	b082      	sub	sp, #8
 8013b5e:	af00      	add	r7, sp, #0
 8013b60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d101      	bne.n	8013b6c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013b68:	2301      	movs	r3, #1
 8013b6a:	e049      	b.n	8013c00 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013b72:	b2db      	uxtb	r3, r3
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d106      	bne.n	8013b86 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	2200      	movs	r2, #0
 8013b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013b80:	6878      	ldr	r0, [r7, #4]
 8013b82:	f7ef fb87 	bl	8003294 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	2202      	movs	r2, #2
 8013b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	681a      	ldr	r2, [r3, #0]
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	3304      	adds	r3, #4
 8013b96:	4619      	mov	r1, r3
 8013b98:	4610      	mov	r0, r2
 8013b9a:	f000 fcf5 	bl	8014588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	2201      	movs	r2, #1
 8013ba2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	2201      	movs	r2, #1
 8013baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	2201      	movs	r2, #1
 8013bb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	2201      	movs	r2, #1
 8013bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	2201      	movs	r2, #1
 8013bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	2201      	movs	r2, #1
 8013bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	2201      	movs	r2, #1
 8013bd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	2201      	movs	r2, #1
 8013bda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	2201      	movs	r2, #1
 8013be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	2201      	movs	r2, #1
 8013bea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	2201      	movs	r2, #1
 8013bf2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	2201      	movs	r2, #1
 8013bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013bfe:	2300      	movs	r3, #0
}
 8013c00:	4618      	mov	r0, r3
 8013c02:	3708      	adds	r7, #8
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}

08013c08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013c08:	b480      	push	{r7}
 8013c0a:	b085      	sub	sp, #20
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013c16:	b2db      	uxtb	r3, r3
 8013c18:	2b01      	cmp	r3, #1
 8013c1a:	d001      	beq.n	8013c20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013c1c:	2301      	movs	r3, #1
 8013c1e:	e04f      	b.n	8013cc0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	2202      	movs	r2, #2
 8013c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	68da      	ldr	r2, [r3, #12]
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	f042 0201 	orr.w	r2, r2, #1
 8013c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	4a23      	ldr	r2, [pc, #140]	; (8013ccc <HAL_TIM_Base_Start_IT+0xc4>)
 8013c3e:	4293      	cmp	r3, r2
 8013c40:	d01d      	beq.n	8013c7e <HAL_TIM_Base_Start_IT+0x76>
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013c4a:	d018      	beq.n	8013c7e <HAL_TIM_Base_Start_IT+0x76>
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	4a1f      	ldr	r2, [pc, #124]	; (8013cd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8013c52:	4293      	cmp	r3, r2
 8013c54:	d013      	beq.n	8013c7e <HAL_TIM_Base_Start_IT+0x76>
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	4a1e      	ldr	r2, [pc, #120]	; (8013cd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8013c5c:	4293      	cmp	r3, r2
 8013c5e:	d00e      	beq.n	8013c7e <HAL_TIM_Base_Start_IT+0x76>
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	4a1c      	ldr	r2, [pc, #112]	; (8013cd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8013c66:	4293      	cmp	r3, r2
 8013c68:	d009      	beq.n	8013c7e <HAL_TIM_Base_Start_IT+0x76>
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	4a1b      	ldr	r2, [pc, #108]	; (8013cdc <HAL_TIM_Base_Start_IT+0xd4>)
 8013c70:	4293      	cmp	r3, r2
 8013c72:	d004      	beq.n	8013c7e <HAL_TIM_Base_Start_IT+0x76>
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	4a19      	ldr	r2, [pc, #100]	; (8013ce0 <HAL_TIM_Base_Start_IT+0xd8>)
 8013c7a:	4293      	cmp	r3, r2
 8013c7c:	d115      	bne.n	8013caa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	689a      	ldr	r2, [r3, #8]
 8013c84:	4b17      	ldr	r3, [pc, #92]	; (8013ce4 <HAL_TIM_Base_Start_IT+0xdc>)
 8013c86:	4013      	ands	r3, r2
 8013c88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	2b06      	cmp	r3, #6
 8013c8e:	d015      	beq.n	8013cbc <HAL_TIM_Base_Start_IT+0xb4>
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013c96:	d011      	beq.n	8013cbc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	681a      	ldr	r2, [r3, #0]
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	f042 0201 	orr.w	r2, r2, #1
 8013ca6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013ca8:	e008      	b.n	8013cbc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	681a      	ldr	r2, [r3, #0]
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	f042 0201 	orr.w	r2, r2, #1
 8013cb8:	601a      	str	r2, [r3, #0]
 8013cba:	e000      	b.n	8013cbe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013cbc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8013cbe:	2300      	movs	r3, #0
}
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	3714      	adds	r7, #20
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cca:	4770      	bx	lr
 8013ccc:	40012c00 	.word	0x40012c00
 8013cd0:	40000400 	.word	0x40000400
 8013cd4:	40000800 	.word	0x40000800
 8013cd8:	40000c00 	.word	0x40000c00
 8013cdc:	40013400 	.word	0x40013400
 8013ce0:	40014000 	.word	0x40014000
 8013ce4:	00010007 	.word	0x00010007

08013ce8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b082      	sub	sp, #8
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d101      	bne.n	8013cfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	e049      	b.n	8013d8e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013d00:	b2db      	uxtb	r3, r3
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d106      	bne.n	8013d14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	2200      	movs	r2, #0
 8013d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8013d0e:	6878      	ldr	r0, [r7, #4]
 8013d10:	f7f7 fba4 	bl	800b45c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	2202      	movs	r2, #2
 8013d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	681a      	ldr	r2, [r3, #0]
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	3304      	adds	r3, #4
 8013d24:	4619      	mov	r1, r3
 8013d26:	4610      	mov	r0, r2
 8013d28:	f000 fc2e 	bl	8014588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	2201      	movs	r2, #1
 8013d30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	2201      	movs	r2, #1
 8013d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	2201      	movs	r2, #1
 8013d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	2201      	movs	r2, #1
 8013d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	2201      	movs	r2, #1
 8013d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	2201      	movs	r2, #1
 8013d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2201      	movs	r2, #1
 8013d60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	2201      	movs	r2, #1
 8013d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	2201      	movs	r2, #1
 8013d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2201      	movs	r2, #1
 8013d78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	2201      	movs	r2, #1
 8013d80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	2201      	movs	r2, #1
 8013d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013d8c:	2300      	movs	r3, #0
}
 8013d8e:	4618      	mov	r0, r3
 8013d90:	3708      	adds	r7, #8
 8013d92:	46bd      	mov	sp, r7
 8013d94:	bd80      	pop	{r7, pc}
	...

08013d98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b084      	sub	sp, #16
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
 8013da0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8013da2:	683b      	ldr	r3, [r7, #0]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d109      	bne.n	8013dbc <HAL_TIM_PWM_Start+0x24>
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013dae:	b2db      	uxtb	r3, r3
 8013db0:	2b01      	cmp	r3, #1
 8013db2:	bf14      	ite	ne
 8013db4:	2301      	movne	r3, #1
 8013db6:	2300      	moveq	r3, #0
 8013db8:	b2db      	uxtb	r3, r3
 8013dba:	e03c      	b.n	8013e36 <HAL_TIM_PWM_Start+0x9e>
 8013dbc:	683b      	ldr	r3, [r7, #0]
 8013dbe:	2b04      	cmp	r3, #4
 8013dc0:	d109      	bne.n	8013dd6 <HAL_TIM_PWM_Start+0x3e>
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8013dc8:	b2db      	uxtb	r3, r3
 8013dca:	2b01      	cmp	r3, #1
 8013dcc:	bf14      	ite	ne
 8013dce:	2301      	movne	r3, #1
 8013dd0:	2300      	moveq	r3, #0
 8013dd2:	b2db      	uxtb	r3, r3
 8013dd4:	e02f      	b.n	8013e36 <HAL_TIM_PWM_Start+0x9e>
 8013dd6:	683b      	ldr	r3, [r7, #0]
 8013dd8:	2b08      	cmp	r3, #8
 8013dda:	d109      	bne.n	8013df0 <HAL_TIM_PWM_Start+0x58>
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013de2:	b2db      	uxtb	r3, r3
 8013de4:	2b01      	cmp	r3, #1
 8013de6:	bf14      	ite	ne
 8013de8:	2301      	movne	r3, #1
 8013dea:	2300      	moveq	r3, #0
 8013dec:	b2db      	uxtb	r3, r3
 8013dee:	e022      	b.n	8013e36 <HAL_TIM_PWM_Start+0x9e>
 8013df0:	683b      	ldr	r3, [r7, #0]
 8013df2:	2b0c      	cmp	r3, #12
 8013df4:	d109      	bne.n	8013e0a <HAL_TIM_PWM_Start+0x72>
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013dfc:	b2db      	uxtb	r3, r3
 8013dfe:	2b01      	cmp	r3, #1
 8013e00:	bf14      	ite	ne
 8013e02:	2301      	movne	r3, #1
 8013e04:	2300      	moveq	r3, #0
 8013e06:	b2db      	uxtb	r3, r3
 8013e08:	e015      	b.n	8013e36 <HAL_TIM_PWM_Start+0x9e>
 8013e0a:	683b      	ldr	r3, [r7, #0]
 8013e0c:	2b10      	cmp	r3, #16
 8013e0e:	d109      	bne.n	8013e24 <HAL_TIM_PWM_Start+0x8c>
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013e16:	b2db      	uxtb	r3, r3
 8013e18:	2b01      	cmp	r3, #1
 8013e1a:	bf14      	ite	ne
 8013e1c:	2301      	movne	r3, #1
 8013e1e:	2300      	moveq	r3, #0
 8013e20:	b2db      	uxtb	r3, r3
 8013e22:	e008      	b.n	8013e36 <HAL_TIM_PWM_Start+0x9e>
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013e2a:	b2db      	uxtb	r3, r3
 8013e2c:	2b01      	cmp	r3, #1
 8013e2e:	bf14      	ite	ne
 8013e30:	2301      	movne	r3, #1
 8013e32:	2300      	moveq	r3, #0
 8013e34:	b2db      	uxtb	r3, r3
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d001      	beq.n	8013e3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8013e3a:	2301      	movs	r3, #1
 8013e3c:	e09c      	b.n	8013f78 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013e3e:	683b      	ldr	r3, [r7, #0]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d104      	bne.n	8013e4e <HAL_TIM_PWM_Start+0xb6>
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	2202      	movs	r2, #2
 8013e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013e4c:	e023      	b.n	8013e96 <HAL_TIM_PWM_Start+0xfe>
 8013e4e:	683b      	ldr	r3, [r7, #0]
 8013e50:	2b04      	cmp	r3, #4
 8013e52:	d104      	bne.n	8013e5e <HAL_TIM_PWM_Start+0xc6>
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	2202      	movs	r2, #2
 8013e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013e5c:	e01b      	b.n	8013e96 <HAL_TIM_PWM_Start+0xfe>
 8013e5e:	683b      	ldr	r3, [r7, #0]
 8013e60:	2b08      	cmp	r3, #8
 8013e62:	d104      	bne.n	8013e6e <HAL_TIM_PWM_Start+0xd6>
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	2202      	movs	r2, #2
 8013e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013e6c:	e013      	b.n	8013e96 <HAL_TIM_PWM_Start+0xfe>
 8013e6e:	683b      	ldr	r3, [r7, #0]
 8013e70:	2b0c      	cmp	r3, #12
 8013e72:	d104      	bne.n	8013e7e <HAL_TIM_PWM_Start+0xe6>
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	2202      	movs	r2, #2
 8013e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013e7c:	e00b      	b.n	8013e96 <HAL_TIM_PWM_Start+0xfe>
 8013e7e:	683b      	ldr	r3, [r7, #0]
 8013e80:	2b10      	cmp	r3, #16
 8013e82:	d104      	bne.n	8013e8e <HAL_TIM_PWM_Start+0xf6>
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2202      	movs	r2, #2
 8013e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013e8c:	e003      	b.n	8013e96 <HAL_TIM_PWM_Start+0xfe>
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	2202      	movs	r2, #2
 8013e92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	2201      	movs	r2, #1
 8013e9c:	6839      	ldr	r1, [r7, #0]
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f000 fee2 	bl	8014c68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	4a35      	ldr	r2, [pc, #212]	; (8013f80 <HAL_TIM_PWM_Start+0x1e8>)
 8013eaa:	4293      	cmp	r3, r2
 8013eac:	d013      	beq.n	8013ed6 <HAL_TIM_PWM_Start+0x13e>
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	4a34      	ldr	r2, [pc, #208]	; (8013f84 <HAL_TIM_PWM_Start+0x1ec>)
 8013eb4:	4293      	cmp	r3, r2
 8013eb6:	d00e      	beq.n	8013ed6 <HAL_TIM_PWM_Start+0x13e>
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	4a32      	ldr	r2, [pc, #200]	; (8013f88 <HAL_TIM_PWM_Start+0x1f0>)
 8013ebe:	4293      	cmp	r3, r2
 8013ec0:	d009      	beq.n	8013ed6 <HAL_TIM_PWM_Start+0x13e>
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	4a31      	ldr	r2, [pc, #196]	; (8013f8c <HAL_TIM_PWM_Start+0x1f4>)
 8013ec8:	4293      	cmp	r3, r2
 8013eca:	d004      	beq.n	8013ed6 <HAL_TIM_PWM_Start+0x13e>
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	4a2f      	ldr	r2, [pc, #188]	; (8013f90 <HAL_TIM_PWM_Start+0x1f8>)
 8013ed2:	4293      	cmp	r3, r2
 8013ed4:	d101      	bne.n	8013eda <HAL_TIM_PWM_Start+0x142>
 8013ed6:	2301      	movs	r3, #1
 8013ed8:	e000      	b.n	8013edc <HAL_TIM_PWM_Start+0x144>
 8013eda:	2300      	movs	r3, #0
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d007      	beq.n	8013ef0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8013eee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	4a22      	ldr	r2, [pc, #136]	; (8013f80 <HAL_TIM_PWM_Start+0x1e8>)
 8013ef6:	4293      	cmp	r3, r2
 8013ef8:	d01d      	beq.n	8013f36 <HAL_TIM_PWM_Start+0x19e>
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	681b      	ldr	r3, [r3, #0]
 8013efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013f02:	d018      	beq.n	8013f36 <HAL_TIM_PWM_Start+0x19e>
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	4a22      	ldr	r2, [pc, #136]	; (8013f94 <HAL_TIM_PWM_Start+0x1fc>)
 8013f0a:	4293      	cmp	r3, r2
 8013f0c:	d013      	beq.n	8013f36 <HAL_TIM_PWM_Start+0x19e>
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	4a21      	ldr	r2, [pc, #132]	; (8013f98 <HAL_TIM_PWM_Start+0x200>)
 8013f14:	4293      	cmp	r3, r2
 8013f16:	d00e      	beq.n	8013f36 <HAL_TIM_PWM_Start+0x19e>
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	4a1f      	ldr	r2, [pc, #124]	; (8013f9c <HAL_TIM_PWM_Start+0x204>)
 8013f1e:	4293      	cmp	r3, r2
 8013f20:	d009      	beq.n	8013f36 <HAL_TIM_PWM_Start+0x19e>
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	4a17      	ldr	r2, [pc, #92]	; (8013f84 <HAL_TIM_PWM_Start+0x1ec>)
 8013f28:	4293      	cmp	r3, r2
 8013f2a:	d004      	beq.n	8013f36 <HAL_TIM_PWM_Start+0x19e>
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	4a15      	ldr	r2, [pc, #84]	; (8013f88 <HAL_TIM_PWM_Start+0x1f0>)
 8013f32:	4293      	cmp	r3, r2
 8013f34:	d115      	bne.n	8013f62 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	689a      	ldr	r2, [r3, #8]
 8013f3c:	4b18      	ldr	r3, [pc, #96]	; (8013fa0 <HAL_TIM_PWM_Start+0x208>)
 8013f3e:	4013      	ands	r3, r2
 8013f40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	2b06      	cmp	r3, #6
 8013f46:	d015      	beq.n	8013f74 <HAL_TIM_PWM_Start+0x1dc>
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013f4e:	d011      	beq.n	8013f74 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	681a      	ldr	r2, [r3, #0]
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	f042 0201 	orr.w	r2, r2, #1
 8013f5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013f60:	e008      	b.n	8013f74 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	681a      	ldr	r2, [r3, #0]
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	f042 0201 	orr.w	r2, r2, #1
 8013f70:	601a      	str	r2, [r3, #0]
 8013f72:	e000      	b.n	8013f76 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013f74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8013f76:	2300      	movs	r3, #0
}
 8013f78:	4618      	mov	r0, r3
 8013f7a:	3710      	adds	r7, #16
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	bd80      	pop	{r7, pc}
 8013f80:	40012c00 	.word	0x40012c00
 8013f84:	40013400 	.word	0x40013400
 8013f88:	40014000 	.word	0x40014000
 8013f8c:	40014400 	.word	0x40014400
 8013f90:	40014800 	.word	0x40014800
 8013f94:	40000400 	.word	0x40000400
 8013f98:	40000800 	.word	0x40000800
 8013f9c:	40000c00 	.word	0x40000c00
 8013fa0:	00010007 	.word	0x00010007

08013fa4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b082      	sub	sp, #8
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
 8013fac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	681b      	ldr	r3, [r3, #0]
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	6839      	ldr	r1, [r7, #0]
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f000 fe56 	bl	8014c68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	4a3e      	ldr	r2, [pc, #248]	; (80140bc <HAL_TIM_PWM_Stop+0x118>)
 8013fc2:	4293      	cmp	r3, r2
 8013fc4:	d013      	beq.n	8013fee <HAL_TIM_PWM_Stop+0x4a>
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	4a3d      	ldr	r2, [pc, #244]	; (80140c0 <HAL_TIM_PWM_Stop+0x11c>)
 8013fcc:	4293      	cmp	r3, r2
 8013fce:	d00e      	beq.n	8013fee <HAL_TIM_PWM_Stop+0x4a>
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	4a3b      	ldr	r2, [pc, #236]	; (80140c4 <HAL_TIM_PWM_Stop+0x120>)
 8013fd6:	4293      	cmp	r3, r2
 8013fd8:	d009      	beq.n	8013fee <HAL_TIM_PWM_Stop+0x4a>
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	4a3a      	ldr	r2, [pc, #232]	; (80140c8 <HAL_TIM_PWM_Stop+0x124>)
 8013fe0:	4293      	cmp	r3, r2
 8013fe2:	d004      	beq.n	8013fee <HAL_TIM_PWM_Stop+0x4a>
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	4a38      	ldr	r2, [pc, #224]	; (80140cc <HAL_TIM_PWM_Stop+0x128>)
 8013fea:	4293      	cmp	r3, r2
 8013fec:	d101      	bne.n	8013ff2 <HAL_TIM_PWM_Stop+0x4e>
 8013fee:	2301      	movs	r3, #1
 8013ff0:	e000      	b.n	8013ff4 <HAL_TIM_PWM_Stop+0x50>
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d017      	beq.n	8014028 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	6a1a      	ldr	r2, [r3, #32]
 8013ffe:	f241 1311 	movw	r3, #4369	; 0x1111
 8014002:	4013      	ands	r3, r2
 8014004:	2b00      	cmp	r3, #0
 8014006:	d10f      	bne.n	8014028 <HAL_TIM_PWM_Stop+0x84>
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	6a1a      	ldr	r2, [r3, #32]
 801400e:	f240 4344 	movw	r3, #1092	; 0x444
 8014012:	4013      	ands	r3, r2
 8014014:	2b00      	cmp	r3, #0
 8014016:	d107      	bne.n	8014028 <HAL_TIM_PWM_Stop+0x84>
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8014026:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	6a1a      	ldr	r2, [r3, #32]
 801402e:	f241 1311 	movw	r3, #4369	; 0x1111
 8014032:	4013      	ands	r3, r2
 8014034:	2b00      	cmp	r3, #0
 8014036:	d10f      	bne.n	8014058 <HAL_TIM_PWM_Stop+0xb4>
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	6a1a      	ldr	r2, [r3, #32]
 801403e:	f240 4344 	movw	r3, #1092	; 0x444
 8014042:	4013      	ands	r3, r2
 8014044:	2b00      	cmp	r3, #0
 8014046:	d107      	bne.n	8014058 <HAL_TIM_PWM_Stop+0xb4>
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	681a      	ldr	r2, [r3, #0]
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	f022 0201 	bic.w	r2, r2, #1
 8014056:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8014058:	683b      	ldr	r3, [r7, #0]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d104      	bne.n	8014068 <HAL_TIM_PWM_Stop+0xc4>
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	2201      	movs	r2, #1
 8014062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014066:	e023      	b.n	80140b0 <HAL_TIM_PWM_Stop+0x10c>
 8014068:	683b      	ldr	r3, [r7, #0]
 801406a:	2b04      	cmp	r3, #4
 801406c:	d104      	bne.n	8014078 <HAL_TIM_PWM_Stop+0xd4>
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	2201      	movs	r2, #1
 8014072:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014076:	e01b      	b.n	80140b0 <HAL_TIM_PWM_Stop+0x10c>
 8014078:	683b      	ldr	r3, [r7, #0]
 801407a:	2b08      	cmp	r3, #8
 801407c:	d104      	bne.n	8014088 <HAL_TIM_PWM_Stop+0xe4>
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	2201      	movs	r2, #1
 8014082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014086:	e013      	b.n	80140b0 <HAL_TIM_PWM_Stop+0x10c>
 8014088:	683b      	ldr	r3, [r7, #0]
 801408a:	2b0c      	cmp	r3, #12
 801408c:	d104      	bne.n	8014098 <HAL_TIM_PWM_Stop+0xf4>
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	2201      	movs	r2, #1
 8014092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8014096:	e00b      	b.n	80140b0 <HAL_TIM_PWM_Stop+0x10c>
 8014098:	683b      	ldr	r3, [r7, #0]
 801409a:	2b10      	cmp	r3, #16
 801409c:	d104      	bne.n	80140a8 <HAL_TIM_PWM_Stop+0x104>
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	2201      	movs	r2, #1
 80140a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80140a6:	e003      	b.n	80140b0 <HAL_TIM_PWM_Stop+0x10c>
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	2201      	movs	r2, #1
 80140ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80140b0:	2300      	movs	r3, #0
}
 80140b2:	4618      	mov	r0, r3
 80140b4:	3708      	adds	r7, #8
 80140b6:	46bd      	mov	sp, r7
 80140b8:	bd80      	pop	{r7, pc}
 80140ba:	bf00      	nop
 80140bc:	40012c00 	.word	0x40012c00
 80140c0:	40013400 	.word	0x40013400
 80140c4:	40014000 	.word	0x40014000
 80140c8:	40014400 	.word	0x40014400
 80140cc:	40014800 	.word	0x40014800

080140d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b082      	sub	sp, #8
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	691b      	ldr	r3, [r3, #16]
 80140de:	f003 0302 	and.w	r3, r3, #2
 80140e2:	2b02      	cmp	r3, #2
 80140e4:	d122      	bne.n	801412c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	68db      	ldr	r3, [r3, #12]
 80140ec:	f003 0302 	and.w	r3, r3, #2
 80140f0:	2b02      	cmp	r3, #2
 80140f2:	d11b      	bne.n	801412c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	f06f 0202 	mvn.w	r2, #2
 80140fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	2201      	movs	r2, #1
 8014102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	699b      	ldr	r3, [r3, #24]
 801410a:	f003 0303 	and.w	r3, r3, #3
 801410e:	2b00      	cmp	r3, #0
 8014110:	d003      	beq.n	801411a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8014112:	6878      	ldr	r0, [r7, #4]
 8014114:	f000 fa1a 	bl	801454c <HAL_TIM_IC_CaptureCallback>
 8014118:	e005      	b.n	8014126 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f000 fa0c 	bl	8014538 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014120:	6878      	ldr	r0, [r7, #4]
 8014122:	f000 fa1d 	bl	8014560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	2200      	movs	r2, #0
 801412a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	691b      	ldr	r3, [r3, #16]
 8014132:	f003 0304 	and.w	r3, r3, #4
 8014136:	2b04      	cmp	r3, #4
 8014138:	d122      	bne.n	8014180 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	68db      	ldr	r3, [r3, #12]
 8014140:	f003 0304 	and.w	r3, r3, #4
 8014144:	2b04      	cmp	r3, #4
 8014146:	d11b      	bne.n	8014180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	f06f 0204 	mvn.w	r2, #4
 8014150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	2202      	movs	r2, #2
 8014156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	699b      	ldr	r3, [r3, #24]
 801415e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014162:	2b00      	cmp	r3, #0
 8014164:	d003      	beq.n	801416e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014166:	6878      	ldr	r0, [r7, #4]
 8014168:	f000 f9f0 	bl	801454c <HAL_TIM_IC_CaptureCallback>
 801416c:	e005      	b.n	801417a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801416e:	6878      	ldr	r0, [r7, #4]
 8014170:	f000 f9e2 	bl	8014538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014174:	6878      	ldr	r0, [r7, #4]
 8014176:	f000 f9f3 	bl	8014560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	2200      	movs	r2, #0
 801417e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	691b      	ldr	r3, [r3, #16]
 8014186:	f003 0308 	and.w	r3, r3, #8
 801418a:	2b08      	cmp	r3, #8
 801418c:	d122      	bne.n	80141d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	68db      	ldr	r3, [r3, #12]
 8014194:	f003 0308 	and.w	r3, r3, #8
 8014198:	2b08      	cmp	r3, #8
 801419a:	d11b      	bne.n	80141d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	f06f 0208 	mvn.w	r2, #8
 80141a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	2204      	movs	r2, #4
 80141aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	69db      	ldr	r3, [r3, #28]
 80141b2:	f003 0303 	and.w	r3, r3, #3
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d003      	beq.n	80141c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80141ba:	6878      	ldr	r0, [r7, #4]
 80141bc:	f000 f9c6 	bl	801454c <HAL_TIM_IC_CaptureCallback>
 80141c0:	e005      	b.n	80141ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80141c2:	6878      	ldr	r0, [r7, #4]
 80141c4:	f000 f9b8 	bl	8014538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80141c8:	6878      	ldr	r0, [r7, #4]
 80141ca:	f000 f9c9 	bl	8014560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	2200      	movs	r2, #0
 80141d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	691b      	ldr	r3, [r3, #16]
 80141da:	f003 0310 	and.w	r3, r3, #16
 80141de:	2b10      	cmp	r3, #16
 80141e0:	d122      	bne.n	8014228 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	68db      	ldr	r3, [r3, #12]
 80141e8:	f003 0310 	and.w	r3, r3, #16
 80141ec:	2b10      	cmp	r3, #16
 80141ee:	d11b      	bne.n	8014228 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	f06f 0210 	mvn.w	r2, #16
 80141f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	2208      	movs	r2, #8
 80141fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	69db      	ldr	r3, [r3, #28]
 8014206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801420a:	2b00      	cmp	r3, #0
 801420c:	d003      	beq.n	8014216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801420e:	6878      	ldr	r0, [r7, #4]
 8014210:	f000 f99c 	bl	801454c <HAL_TIM_IC_CaptureCallback>
 8014214:	e005      	b.n	8014222 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014216:	6878      	ldr	r0, [r7, #4]
 8014218:	f000 f98e 	bl	8014538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801421c:	6878      	ldr	r0, [r7, #4]
 801421e:	f000 f99f 	bl	8014560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	2200      	movs	r2, #0
 8014226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	691b      	ldr	r3, [r3, #16]
 801422e:	f003 0301 	and.w	r3, r3, #1
 8014232:	2b01      	cmp	r3, #1
 8014234:	d10e      	bne.n	8014254 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	68db      	ldr	r3, [r3, #12]
 801423c:	f003 0301 	and.w	r3, r3, #1
 8014240:	2b01      	cmp	r3, #1
 8014242:	d107      	bne.n	8014254 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	f06f 0201 	mvn.w	r2, #1
 801424c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801424e:	6878      	ldr	r0, [r7, #4]
 8014250:	f7ed fddc 	bl	8001e0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	691b      	ldr	r3, [r3, #16]
 801425a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801425e:	2b80      	cmp	r3, #128	; 0x80
 8014260:	d10e      	bne.n	8014280 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	68db      	ldr	r3, [r3, #12]
 8014268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801426c:	2b80      	cmp	r3, #128	; 0x80
 801426e:	d107      	bne.n	8014280 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8014278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801427a:	6878      	ldr	r0, [r7, #4]
 801427c:	f000 fdac 	bl	8014dd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	691b      	ldr	r3, [r3, #16]
 8014286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801428a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801428e:	d10e      	bne.n	80142ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	68db      	ldr	r3, [r3, #12]
 8014296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801429a:	2b80      	cmp	r3, #128	; 0x80
 801429c:	d107      	bne.n	80142ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80142a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80142a8:	6878      	ldr	r0, [r7, #4]
 80142aa:	f000 fd9f 	bl	8014dec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	691b      	ldr	r3, [r3, #16]
 80142b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80142b8:	2b40      	cmp	r3, #64	; 0x40
 80142ba:	d10e      	bne.n	80142da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	68db      	ldr	r3, [r3, #12]
 80142c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80142c6:	2b40      	cmp	r3, #64	; 0x40
 80142c8:	d107      	bne.n	80142da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80142d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80142d4:	6878      	ldr	r0, [r7, #4]
 80142d6:	f000 f94d 	bl	8014574 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	691b      	ldr	r3, [r3, #16]
 80142e0:	f003 0320 	and.w	r3, r3, #32
 80142e4:	2b20      	cmp	r3, #32
 80142e6:	d10e      	bne.n	8014306 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	68db      	ldr	r3, [r3, #12]
 80142ee:	f003 0320 	and.w	r3, r3, #32
 80142f2:	2b20      	cmp	r3, #32
 80142f4:	d107      	bne.n	8014306 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	f06f 0220 	mvn.w	r2, #32
 80142fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8014300:	6878      	ldr	r0, [r7, #4]
 8014302:	f000 fd5f 	bl	8014dc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8014306:	bf00      	nop
 8014308:	3708      	adds	r7, #8
 801430a:	46bd      	mov	sp, r7
 801430c:	bd80      	pop	{r7, pc}
	...

08014310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014310:	b580      	push	{r7, lr}
 8014312:	b086      	sub	sp, #24
 8014314:	af00      	add	r7, sp, #0
 8014316:	60f8      	str	r0, [r7, #12]
 8014318:	60b9      	str	r1, [r7, #8]
 801431a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801431c:	2300      	movs	r3, #0
 801431e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014326:	2b01      	cmp	r3, #1
 8014328:	d101      	bne.n	801432e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801432a:	2302      	movs	r3, #2
 801432c:	e0ff      	b.n	801452e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	2201      	movs	r2, #1
 8014332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	2b14      	cmp	r3, #20
 801433a:	f200 80f0 	bhi.w	801451e <HAL_TIM_PWM_ConfigChannel+0x20e>
 801433e:	a201      	add	r2, pc, #4	; (adr r2, 8014344 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8014340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014344:	08014399 	.word	0x08014399
 8014348:	0801451f 	.word	0x0801451f
 801434c:	0801451f 	.word	0x0801451f
 8014350:	0801451f 	.word	0x0801451f
 8014354:	080143d9 	.word	0x080143d9
 8014358:	0801451f 	.word	0x0801451f
 801435c:	0801451f 	.word	0x0801451f
 8014360:	0801451f 	.word	0x0801451f
 8014364:	0801441b 	.word	0x0801441b
 8014368:	0801451f 	.word	0x0801451f
 801436c:	0801451f 	.word	0x0801451f
 8014370:	0801451f 	.word	0x0801451f
 8014374:	0801445b 	.word	0x0801445b
 8014378:	0801451f 	.word	0x0801451f
 801437c:	0801451f 	.word	0x0801451f
 8014380:	0801451f 	.word	0x0801451f
 8014384:	0801449d 	.word	0x0801449d
 8014388:	0801451f 	.word	0x0801451f
 801438c:	0801451f 	.word	0x0801451f
 8014390:	0801451f 	.word	0x0801451f
 8014394:	080144dd 	.word	0x080144dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	68b9      	ldr	r1, [r7, #8]
 801439e:	4618      	mov	r0, r3
 80143a0:	f000 f98c 	bl	80146bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	699a      	ldr	r2, [r3, #24]
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	f042 0208 	orr.w	r2, r2, #8
 80143b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	699a      	ldr	r2, [r3, #24]
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	f022 0204 	bic.w	r2, r2, #4
 80143c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	6999      	ldr	r1, [r3, #24]
 80143ca:	68bb      	ldr	r3, [r7, #8]
 80143cc:	691a      	ldr	r2, [r3, #16]
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	430a      	orrs	r2, r1
 80143d4:	619a      	str	r2, [r3, #24]
      break;
 80143d6:	e0a5      	b.n	8014524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	68b9      	ldr	r1, [r7, #8]
 80143de:	4618      	mov	r0, r3
 80143e0:	f000 f9fc 	bl	80147dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	699a      	ldr	r2, [r3, #24]
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80143f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	699a      	ldr	r2, [r3, #24]
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	6999      	ldr	r1, [r3, #24]
 801440a:	68bb      	ldr	r3, [r7, #8]
 801440c:	691b      	ldr	r3, [r3, #16]
 801440e:	021a      	lsls	r2, r3, #8
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	430a      	orrs	r2, r1
 8014416:	619a      	str	r2, [r3, #24]
      break;
 8014418:	e084      	b.n	8014524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	68b9      	ldr	r1, [r7, #8]
 8014420:	4618      	mov	r0, r3
 8014422:	f000 fa65 	bl	80148f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	69da      	ldr	r2, [r3, #28]
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	f042 0208 	orr.w	r2, r2, #8
 8014434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8014436:	68fb      	ldr	r3, [r7, #12]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	69da      	ldr	r2, [r3, #28]
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	f022 0204 	bic.w	r2, r2, #4
 8014444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	69d9      	ldr	r1, [r3, #28]
 801444c:	68bb      	ldr	r3, [r7, #8]
 801444e:	691a      	ldr	r2, [r3, #16]
 8014450:	68fb      	ldr	r3, [r7, #12]
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	430a      	orrs	r2, r1
 8014456:	61da      	str	r2, [r3, #28]
      break;
 8014458:	e064      	b.n	8014524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	68b9      	ldr	r1, [r7, #8]
 8014460:	4618      	mov	r0, r3
 8014462:	f000 facd 	bl	8014a00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	69da      	ldr	r2, [r3, #28]
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	69da      	ldr	r2, [r3, #28]
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	69d9      	ldr	r1, [r3, #28]
 801448c:	68bb      	ldr	r3, [r7, #8]
 801448e:	691b      	ldr	r3, [r3, #16]
 8014490:	021a      	lsls	r2, r3, #8
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	430a      	orrs	r2, r1
 8014498:	61da      	str	r2, [r3, #28]
      break;
 801449a:	e043      	b.n	8014524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	68b9      	ldr	r1, [r7, #8]
 80144a2:	4618      	mov	r0, r3
 80144a4:	f000 fb16 	bl	8014ad4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	f042 0208 	orr.w	r2, r2, #8
 80144b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	f022 0204 	bic.w	r2, r2, #4
 80144c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80144ce:	68bb      	ldr	r3, [r7, #8]
 80144d0:	691a      	ldr	r2, [r3, #16]
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	430a      	orrs	r2, r1
 80144d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80144da:	e023      	b.n	8014524 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	68b9      	ldr	r1, [r7, #8]
 80144e2:	4618      	mov	r0, r3
 80144e4:	f000 fb5a 	bl	8014b9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80144f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014506:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	691b      	ldr	r3, [r3, #16]
 8014512:	021a      	lsls	r2, r3, #8
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	430a      	orrs	r2, r1
 801451a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801451c:	e002      	b.n	8014524 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801451e:	2301      	movs	r3, #1
 8014520:	75fb      	strb	r3, [r7, #23]
      break;
 8014522:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	2200      	movs	r2, #0
 8014528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801452c:	7dfb      	ldrb	r3, [r7, #23]
}
 801452e:	4618      	mov	r0, r3
 8014530:	3718      	adds	r7, #24
 8014532:	46bd      	mov	sp, r7
 8014534:	bd80      	pop	{r7, pc}
 8014536:	bf00      	nop

08014538 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014538:	b480      	push	{r7}
 801453a:	b083      	sub	sp, #12
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8014540:	bf00      	nop
 8014542:	370c      	adds	r7, #12
 8014544:	46bd      	mov	sp, r7
 8014546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454a:	4770      	bx	lr

0801454c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801454c:	b480      	push	{r7}
 801454e:	b083      	sub	sp, #12
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8014554:	bf00      	nop
 8014556:	370c      	adds	r7, #12
 8014558:	46bd      	mov	sp, r7
 801455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455e:	4770      	bx	lr

08014560 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014560:	b480      	push	{r7}
 8014562:	b083      	sub	sp, #12
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014568:	bf00      	nop
 801456a:	370c      	adds	r7, #12
 801456c:	46bd      	mov	sp, r7
 801456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014572:	4770      	bx	lr

08014574 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014574:	b480      	push	{r7}
 8014576:	b083      	sub	sp, #12
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801457c:	bf00      	nop
 801457e:	370c      	adds	r7, #12
 8014580:	46bd      	mov	sp, r7
 8014582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014586:	4770      	bx	lr

08014588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8014588:	b480      	push	{r7}
 801458a:	b085      	sub	sp, #20
 801458c:	af00      	add	r7, sp, #0
 801458e:	6078      	str	r0, [r7, #4]
 8014590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	4a40      	ldr	r2, [pc, #256]	; (801469c <TIM_Base_SetConfig+0x114>)
 801459c:	4293      	cmp	r3, r2
 801459e:	d013      	beq.n	80145c8 <TIM_Base_SetConfig+0x40>
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80145a6:	d00f      	beq.n	80145c8 <TIM_Base_SetConfig+0x40>
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	4a3d      	ldr	r2, [pc, #244]	; (80146a0 <TIM_Base_SetConfig+0x118>)
 80145ac:	4293      	cmp	r3, r2
 80145ae:	d00b      	beq.n	80145c8 <TIM_Base_SetConfig+0x40>
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	4a3c      	ldr	r2, [pc, #240]	; (80146a4 <TIM_Base_SetConfig+0x11c>)
 80145b4:	4293      	cmp	r3, r2
 80145b6:	d007      	beq.n	80145c8 <TIM_Base_SetConfig+0x40>
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	4a3b      	ldr	r2, [pc, #236]	; (80146a8 <TIM_Base_SetConfig+0x120>)
 80145bc:	4293      	cmp	r3, r2
 80145be:	d003      	beq.n	80145c8 <TIM_Base_SetConfig+0x40>
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	4a3a      	ldr	r2, [pc, #232]	; (80146ac <TIM_Base_SetConfig+0x124>)
 80145c4:	4293      	cmp	r3, r2
 80145c6:	d108      	bne.n	80145da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80145c8:	68fb      	ldr	r3, [r7, #12]
 80145ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80145ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80145d0:	683b      	ldr	r3, [r7, #0]
 80145d2:	685b      	ldr	r3, [r3, #4]
 80145d4:	68fa      	ldr	r2, [r7, #12]
 80145d6:	4313      	orrs	r3, r2
 80145d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	4a2f      	ldr	r2, [pc, #188]	; (801469c <TIM_Base_SetConfig+0x114>)
 80145de:	4293      	cmp	r3, r2
 80145e0:	d01f      	beq.n	8014622 <TIM_Base_SetConfig+0x9a>
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80145e8:	d01b      	beq.n	8014622 <TIM_Base_SetConfig+0x9a>
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	4a2c      	ldr	r2, [pc, #176]	; (80146a0 <TIM_Base_SetConfig+0x118>)
 80145ee:	4293      	cmp	r3, r2
 80145f0:	d017      	beq.n	8014622 <TIM_Base_SetConfig+0x9a>
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	4a2b      	ldr	r2, [pc, #172]	; (80146a4 <TIM_Base_SetConfig+0x11c>)
 80145f6:	4293      	cmp	r3, r2
 80145f8:	d013      	beq.n	8014622 <TIM_Base_SetConfig+0x9a>
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	4a2a      	ldr	r2, [pc, #168]	; (80146a8 <TIM_Base_SetConfig+0x120>)
 80145fe:	4293      	cmp	r3, r2
 8014600:	d00f      	beq.n	8014622 <TIM_Base_SetConfig+0x9a>
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	4a29      	ldr	r2, [pc, #164]	; (80146ac <TIM_Base_SetConfig+0x124>)
 8014606:	4293      	cmp	r3, r2
 8014608:	d00b      	beq.n	8014622 <TIM_Base_SetConfig+0x9a>
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	4a28      	ldr	r2, [pc, #160]	; (80146b0 <TIM_Base_SetConfig+0x128>)
 801460e:	4293      	cmp	r3, r2
 8014610:	d007      	beq.n	8014622 <TIM_Base_SetConfig+0x9a>
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	4a27      	ldr	r2, [pc, #156]	; (80146b4 <TIM_Base_SetConfig+0x12c>)
 8014616:	4293      	cmp	r3, r2
 8014618:	d003      	beq.n	8014622 <TIM_Base_SetConfig+0x9a>
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	4a26      	ldr	r2, [pc, #152]	; (80146b8 <TIM_Base_SetConfig+0x130>)
 801461e:	4293      	cmp	r3, r2
 8014620:	d108      	bne.n	8014634 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801462a:	683b      	ldr	r3, [r7, #0]
 801462c:	68db      	ldr	r3, [r3, #12]
 801462e:	68fa      	ldr	r2, [r7, #12]
 8014630:	4313      	orrs	r3, r2
 8014632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	695b      	ldr	r3, [r3, #20]
 801463e:	4313      	orrs	r3, r2
 8014640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	68fa      	ldr	r2, [r7, #12]
 8014646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014648:	683b      	ldr	r3, [r7, #0]
 801464a:	689a      	ldr	r2, [r3, #8]
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014650:	683b      	ldr	r3, [r7, #0]
 8014652:	681a      	ldr	r2, [r3, #0]
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	4a10      	ldr	r2, [pc, #64]	; (801469c <TIM_Base_SetConfig+0x114>)
 801465c:	4293      	cmp	r3, r2
 801465e:	d00f      	beq.n	8014680 <TIM_Base_SetConfig+0xf8>
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	4a12      	ldr	r2, [pc, #72]	; (80146ac <TIM_Base_SetConfig+0x124>)
 8014664:	4293      	cmp	r3, r2
 8014666:	d00b      	beq.n	8014680 <TIM_Base_SetConfig+0xf8>
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	4a11      	ldr	r2, [pc, #68]	; (80146b0 <TIM_Base_SetConfig+0x128>)
 801466c:	4293      	cmp	r3, r2
 801466e:	d007      	beq.n	8014680 <TIM_Base_SetConfig+0xf8>
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	4a10      	ldr	r2, [pc, #64]	; (80146b4 <TIM_Base_SetConfig+0x12c>)
 8014674:	4293      	cmp	r3, r2
 8014676:	d003      	beq.n	8014680 <TIM_Base_SetConfig+0xf8>
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	4a0f      	ldr	r2, [pc, #60]	; (80146b8 <TIM_Base_SetConfig+0x130>)
 801467c:	4293      	cmp	r3, r2
 801467e:	d103      	bne.n	8014688 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014680:	683b      	ldr	r3, [r7, #0]
 8014682:	691a      	ldr	r2, [r3, #16]
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	2201      	movs	r2, #1
 801468c:	615a      	str	r2, [r3, #20]
}
 801468e:	bf00      	nop
 8014690:	3714      	adds	r7, #20
 8014692:	46bd      	mov	sp, r7
 8014694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014698:	4770      	bx	lr
 801469a:	bf00      	nop
 801469c:	40012c00 	.word	0x40012c00
 80146a0:	40000400 	.word	0x40000400
 80146a4:	40000800 	.word	0x40000800
 80146a8:	40000c00 	.word	0x40000c00
 80146ac:	40013400 	.word	0x40013400
 80146b0:	40014000 	.word	0x40014000
 80146b4:	40014400 	.word	0x40014400
 80146b8:	40014800 	.word	0x40014800

080146bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80146bc:	b480      	push	{r7}
 80146be:	b087      	sub	sp, #28
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
 80146c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	6a1b      	ldr	r3, [r3, #32]
 80146ca:	f023 0201 	bic.w	r2, r3, #1
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	6a1b      	ldr	r3, [r3, #32]
 80146d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	685b      	ldr	r3, [r3, #4]
 80146dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	699b      	ldr	r3, [r3, #24]
 80146e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80146ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80146ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	f023 0303 	bic.w	r3, r3, #3
 80146f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80146f8:	683b      	ldr	r3, [r7, #0]
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	68fa      	ldr	r2, [r7, #12]
 80146fe:	4313      	orrs	r3, r2
 8014700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014702:	697b      	ldr	r3, [r7, #20]
 8014704:	f023 0302 	bic.w	r3, r3, #2
 8014708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801470a:	683b      	ldr	r3, [r7, #0]
 801470c:	689b      	ldr	r3, [r3, #8]
 801470e:	697a      	ldr	r2, [r7, #20]
 8014710:	4313      	orrs	r3, r2
 8014712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	4a2c      	ldr	r2, [pc, #176]	; (80147c8 <TIM_OC1_SetConfig+0x10c>)
 8014718:	4293      	cmp	r3, r2
 801471a:	d00f      	beq.n	801473c <TIM_OC1_SetConfig+0x80>
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	4a2b      	ldr	r2, [pc, #172]	; (80147cc <TIM_OC1_SetConfig+0x110>)
 8014720:	4293      	cmp	r3, r2
 8014722:	d00b      	beq.n	801473c <TIM_OC1_SetConfig+0x80>
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	4a2a      	ldr	r2, [pc, #168]	; (80147d0 <TIM_OC1_SetConfig+0x114>)
 8014728:	4293      	cmp	r3, r2
 801472a:	d007      	beq.n	801473c <TIM_OC1_SetConfig+0x80>
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	4a29      	ldr	r2, [pc, #164]	; (80147d4 <TIM_OC1_SetConfig+0x118>)
 8014730:	4293      	cmp	r3, r2
 8014732:	d003      	beq.n	801473c <TIM_OC1_SetConfig+0x80>
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	4a28      	ldr	r2, [pc, #160]	; (80147d8 <TIM_OC1_SetConfig+0x11c>)
 8014738:	4293      	cmp	r3, r2
 801473a:	d10c      	bne.n	8014756 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801473c:	697b      	ldr	r3, [r7, #20]
 801473e:	f023 0308 	bic.w	r3, r3, #8
 8014742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014744:	683b      	ldr	r3, [r7, #0]
 8014746:	68db      	ldr	r3, [r3, #12]
 8014748:	697a      	ldr	r2, [r7, #20]
 801474a:	4313      	orrs	r3, r2
 801474c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801474e:	697b      	ldr	r3, [r7, #20]
 8014750:	f023 0304 	bic.w	r3, r3, #4
 8014754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	4a1b      	ldr	r2, [pc, #108]	; (80147c8 <TIM_OC1_SetConfig+0x10c>)
 801475a:	4293      	cmp	r3, r2
 801475c:	d00f      	beq.n	801477e <TIM_OC1_SetConfig+0xc2>
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	4a1a      	ldr	r2, [pc, #104]	; (80147cc <TIM_OC1_SetConfig+0x110>)
 8014762:	4293      	cmp	r3, r2
 8014764:	d00b      	beq.n	801477e <TIM_OC1_SetConfig+0xc2>
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	4a19      	ldr	r2, [pc, #100]	; (80147d0 <TIM_OC1_SetConfig+0x114>)
 801476a:	4293      	cmp	r3, r2
 801476c:	d007      	beq.n	801477e <TIM_OC1_SetConfig+0xc2>
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	4a18      	ldr	r2, [pc, #96]	; (80147d4 <TIM_OC1_SetConfig+0x118>)
 8014772:	4293      	cmp	r3, r2
 8014774:	d003      	beq.n	801477e <TIM_OC1_SetConfig+0xc2>
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	4a17      	ldr	r2, [pc, #92]	; (80147d8 <TIM_OC1_SetConfig+0x11c>)
 801477a:	4293      	cmp	r3, r2
 801477c:	d111      	bne.n	80147a2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801477e:	693b      	ldr	r3, [r7, #16]
 8014780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8014786:	693b      	ldr	r3, [r7, #16]
 8014788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801478c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801478e:	683b      	ldr	r3, [r7, #0]
 8014790:	695b      	ldr	r3, [r3, #20]
 8014792:	693a      	ldr	r2, [r7, #16]
 8014794:	4313      	orrs	r3, r2
 8014796:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014798:	683b      	ldr	r3, [r7, #0]
 801479a:	699b      	ldr	r3, [r3, #24]
 801479c:	693a      	ldr	r2, [r7, #16]
 801479e:	4313      	orrs	r3, r2
 80147a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	693a      	ldr	r2, [r7, #16]
 80147a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	68fa      	ldr	r2, [r7, #12]
 80147ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80147ae:	683b      	ldr	r3, [r7, #0]
 80147b0:	685a      	ldr	r2, [r3, #4]
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	697a      	ldr	r2, [r7, #20]
 80147ba:	621a      	str	r2, [r3, #32]
}
 80147bc:	bf00      	nop
 80147be:	371c      	adds	r7, #28
 80147c0:	46bd      	mov	sp, r7
 80147c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c6:	4770      	bx	lr
 80147c8:	40012c00 	.word	0x40012c00
 80147cc:	40013400 	.word	0x40013400
 80147d0:	40014000 	.word	0x40014000
 80147d4:	40014400 	.word	0x40014400
 80147d8:	40014800 	.word	0x40014800

080147dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80147dc:	b480      	push	{r7}
 80147de:	b087      	sub	sp, #28
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
 80147e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	6a1b      	ldr	r3, [r3, #32]
 80147ea:	f023 0210 	bic.w	r2, r3, #16
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	6a1b      	ldr	r3, [r3, #32]
 80147f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	685b      	ldr	r3, [r3, #4]
 80147fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	699b      	ldr	r3, [r3, #24]
 8014802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801480a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801480e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014818:	683b      	ldr	r3, [r7, #0]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	021b      	lsls	r3, r3, #8
 801481e:	68fa      	ldr	r2, [r7, #12]
 8014820:	4313      	orrs	r3, r2
 8014822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014824:	697b      	ldr	r3, [r7, #20]
 8014826:	f023 0320 	bic.w	r3, r3, #32
 801482a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801482c:	683b      	ldr	r3, [r7, #0]
 801482e:	689b      	ldr	r3, [r3, #8]
 8014830:	011b      	lsls	r3, r3, #4
 8014832:	697a      	ldr	r2, [r7, #20]
 8014834:	4313      	orrs	r3, r2
 8014836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	4a28      	ldr	r2, [pc, #160]	; (80148dc <TIM_OC2_SetConfig+0x100>)
 801483c:	4293      	cmp	r3, r2
 801483e:	d003      	beq.n	8014848 <TIM_OC2_SetConfig+0x6c>
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	4a27      	ldr	r2, [pc, #156]	; (80148e0 <TIM_OC2_SetConfig+0x104>)
 8014844:	4293      	cmp	r3, r2
 8014846:	d10d      	bne.n	8014864 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014848:	697b      	ldr	r3, [r7, #20]
 801484a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801484e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014850:	683b      	ldr	r3, [r7, #0]
 8014852:	68db      	ldr	r3, [r3, #12]
 8014854:	011b      	lsls	r3, r3, #4
 8014856:	697a      	ldr	r2, [r7, #20]
 8014858:	4313      	orrs	r3, r2
 801485a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801485c:	697b      	ldr	r3, [r7, #20]
 801485e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014862:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	4a1d      	ldr	r2, [pc, #116]	; (80148dc <TIM_OC2_SetConfig+0x100>)
 8014868:	4293      	cmp	r3, r2
 801486a:	d00f      	beq.n	801488c <TIM_OC2_SetConfig+0xb0>
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	4a1c      	ldr	r2, [pc, #112]	; (80148e0 <TIM_OC2_SetConfig+0x104>)
 8014870:	4293      	cmp	r3, r2
 8014872:	d00b      	beq.n	801488c <TIM_OC2_SetConfig+0xb0>
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	4a1b      	ldr	r2, [pc, #108]	; (80148e4 <TIM_OC2_SetConfig+0x108>)
 8014878:	4293      	cmp	r3, r2
 801487a:	d007      	beq.n	801488c <TIM_OC2_SetConfig+0xb0>
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	4a1a      	ldr	r2, [pc, #104]	; (80148e8 <TIM_OC2_SetConfig+0x10c>)
 8014880:	4293      	cmp	r3, r2
 8014882:	d003      	beq.n	801488c <TIM_OC2_SetConfig+0xb0>
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	4a19      	ldr	r2, [pc, #100]	; (80148ec <TIM_OC2_SetConfig+0x110>)
 8014888:	4293      	cmp	r3, r2
 801488a:	d113      	bne.n	80148b4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801488c:	693b      	ldr	r3, [r7, #16]
 801488e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014892:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014894:	693b      	ldr	r3, [r7, #16]
 8014896:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801489a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801489c:	683b      	ldr	r3, [r7, #0]
 801489e:	695b      	ldr	r3, [r3, #20]
 80148a0:	009b      	lsls	r3, r3, #2
 80148a2:	693a      	ldr	r2, [r7, #16]
 80148a4:	4313      	orrs	r3, r2
 80148a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80148a8:	683b      	ldr	r3, [r7, #0]
 80148aa:	699b      	ldr	r3, [r3, #24]
 80148ac:	009b      	lsls	r3, r3, #2
 80148ae:	693a      	ldr	r2, [r7, #16]
 80148b0:	4313      	orrs	r3, r2
 80148b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	693a      	ldr	r2, [r7, #16]
 80148b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	68fa      	ldr	r2, [r7, #12]
 80148be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80148c0:	683b      	ldr	r3, [r7, #0]
 80148c2:	685a      	ldr	r2, [r3, #4]
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	697a      	ldr	r2, [r7, #20]
 80148cc:	621a      	str	r2, [r3, #32]
}
 80148ce:	bf00      	nop
 80148d0:	371c      	adds	r7, #28
 80148d2:	46bd      	mov	sp, r7
 80148d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d8:	4770      	bx	lr
 80148da:	bf00      	nop
 80148dc:	40012c00 	.word	0x40012c00
 80148e0:	40013400 	.word	0x40013400
 80148e4:	40014000 	.word	0x40014000
 80148e8:	40014400 	.word	0x40014400
 80148ec:	40014800 	.word	0x40014800

080148f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80148f0:	b480      	push	{r7}
 80148f2:	b087      	sub	sp, #28
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	6078      	str	r0, [r7, #4]
 80148f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	6a1b      	ldr	r3, [r3, #32]
 80148fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	6a1b      	ldr	r3, [r3, #32]
 801490a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	685b      	ldr	r3, [r3, #4]
 8014910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	69db      	ldr	r3, [r3, #28]
 8014916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801491e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	f023 0303 	bic.w	r3, r3, #3
 801492a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801492c:	683b      	ldr	r3, [r7, #0]
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	68fa      	ldr	r2, [r7, #12]
 8014932:	4313      	orrs	r3, r2
 8014934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014936:	697b      	ldr	r3, [r7, #20]
 8014938:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801493c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801493e:	683b      	ldr	r3, [r7, #0]
 8014940:	689b      	ldr	r3, [r3, #8]
 8014942:	021b      	lsls	r3, r3, #8
 8014944:	697a      	ldr	r2, [r7, #20]
 8014946:	4313      	orrs	r3, r2
 8014948:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	4a27      	ldr	r2, [pc, #156]	; (80149ec <TIM_OC3_SetConfig+0xfc>)
 801494e:	4293      	cmp	r3, r2
 8014950:	d003      	beq.n	801495a <TIM_OC3_SetConfig+0x6a>
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	4a26      	ldr	r2, [pc, #152]	; (80149f0 <TIM_OC3_SetConfig+0x100>)
 8014956:	4293      	cmp	r3, r2
 8014958:	d10d      	bne.n	8014976 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801495a:	697b      	ldr	r3, [r7, #20]
 801495c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014960:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014962:	683b      	ldr	r3, [r7, #0]
 8014964:	68db      	ldr	r3, [r3, #12]
 8014966:	021b      	lsls	r3, r3, #8
 8014968:	697a      	ldr	r2, [r7, #20]
 801496a:	4313      	orrs	r3, r2
 801496c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801496e:	697b      	ldr	r3, [r7, #20]
 8014970:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	4a1c      	ldr	r2, [pc, #112]	; (80149ec <TIM_OC3_SetConfig+0xfc>)
 801497a:	4293      	cmp	r3, r2
 801497c:	d00f      	beq.n	801499e <TIM_OC3_SetConfig+0xae>
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	4a1b      	ldr	r2, [pc, #108]	; (80149f0 <TIM_OC3_SetConfig+0x100>)
 8014982:	4293      	cmp	r3, r2
 8014984:	d00b      	beq.n	801499e <TIM_OC3_SetConfig+0xae>
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	4a1a      	ldr	r2, [pc, #104]	; (80149f4 <TIM_OC3_SetConfig+0x104>)
 801498a:	4293      	cmp	r3, r2
 801498c:	d007      	beq.n	801499e <TIM_OC3_SetConfig+0xae>
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	4a19      	ldr	r2, [pc, #100]	; (80149f8 <TIM_OC3_SetConfig+0x108>)
 8014992:	4293      	cmp	r3, r2
 8014994:	d003      	beq.n	801499e <TIM_OC3_SetConfig+0xae>
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	4a18      	ldr	r2, [pc, #96]	; (80149fc <TIM_OC3_SetConfig+0x10c>)
 801499a:	4293      	cmp	r3, r2
 801499c:	d113      	bne.n	80149c6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801499e:	693b      	ldr	r3, [r7, #16]
 80149a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80149a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80149a6:	693b      	ldr	r3, [r7, #16]
 80149a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80149ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	695b      	ldr	r3, [r3, #20]
 80149b2:	011b      	lsls	r3, r3, #4
 80149b4:	693a      	ldr	r2, [r7, #16]
 80149b6:	4313      	orrs	r3, r2
 80149b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80149ba:	683b      	ldr	r3, [r7, #0]
 80149bc:	699b      	ldr	r3, [r3, #24]
 80149be:	011b      	lsls	r3, r3, #4
 80149c0:	693a      	ldr	r2, [r7, #16]
 80149c2:	4313      	orrs	r3, r2
 80149c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	693a      	ldr	r2, [r7, #16]
 80149ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	68fa      	ldr	r2, [r7, #12]
 80149d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80149d2:	683b      	ldr	r3, [r7, #0]
 80149d4:	685a      	ldr	r2, [r3, #4]
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	697a      	ldr	r2, [r7, #20]
 80149de:	621a      	str	r2, [r3, #32]
}
 80149e0:	bf00      	nop
 80149e2:	371c      	adds	r7, #28
 80149e4:	46bd      	mov	sp, r7
 80149e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ea:	4770      	bx	lr
 80149ec:	40012c00 	.word	0x40012c00
 80149f0:	40013400 	.word	0x40013400
 80149f4:	40014000 	.word	0x40014000
 80149f8:	40014400 	.word	0x40014400
 80149fc:	40014800 	.word	0x40014800

08014a00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014a00:	b480      	push	{r7}
 8014a02:	b087      	sub	sp, #28
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	6078      	str	r0, [r7, #4]
 8014a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	6a1b      	ldr	r3, [r3, #32]
 8014a0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	6a1b      	ldr	r3, [r3, #32]
 8014a1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	685b      	ldr	r3, [r3, #4]
 8014a20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	69db      	ldr	r3, [r3, #28]
 8014a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014a3c:	683b      	ldr	r3, [r7, #0]
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	021b      	lsls	r3, r3, #8
 8014a42:	68fa      	ldr	r2, [r7, #12]
 8014a44:	4313      	orrs	r3, r2
 8014a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014a48:	693b      	ldr	r3, [r7, #16]
 8014a4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014a4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014a50:	683b      	ldr	r3, [r7, #0]
 8014a52:	689b      	ldr	r3, [r3, #8]
 8014a54:	031b      	lsls	r3, r3, #12
 8014a56:	693a      	ldr	r2, [r7, #16]
 8014a58:	4313      	orrs	r3, r2
 8014a5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	4a18      	ldr	r2, [pc, #96]	; (8014ac0 <TIM_OC4_SetConfig+0xc0>)
 8014a60:	4293      	cmp	r3, r2
 8014a62:	d00f      	beq.n	8014a84 <TIM_OC4_SetConfig+0x84>
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	4a17      	ldr	r2, [pc, #92]	; (8014ac4 <TIM_OC4_SetConfig+0xc4>)
 8014a68:	4293      	cmp	r3, r2
 8014a6a:	d00b      	beq.n	8014a84 <TIM_OC4_SetConfig+0x84>
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	4a16      	ldr	r2, [pc, #88]	; (8014ac8 <TIM_OC4_SetConfig+0xc8>)
 8014a70:	4293      	cmp	r3, r2
 8014a72:	d007      	beq.n	8014a84 <TIM_OC4_SetConfig+0x84>
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	4a15      	ldr	r2, [pc, #84]	; (8014acc <TIM_OC4_SetConfig+0xcc>)
 8014a78:	4293      	cmp	r3, r2
 8014a7a:	d003      	beq.n	8014a84 <TIM_OC4_SetConfig+0x84>
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	4a14      	ldr	r2, [pc, #80]	; (8014ad0 <TIM_OC4_SetConfig+0xd0>)
 8014a80:	4293      	cmp	r3, r2
 8014a82:	d109      	bne.n	8014a98 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014a84:	697b      	ldr	r3, [r7, #20]
 8014a86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014a8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014a8c:	683b      	ldr	r3, [r7, #0]
 8014a8e:	695b      	ldr	r3, [r3, #20]
 8014a90:	019b      	lsls	r3, r3, #6
 8014a92:	697a      	ldr	r2, [r7, #20]
 8014a94:	4313      	orrs	r3, r2
 8014a96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	697a      	ldr	r2, [r7, #20]
 8014a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	68fa      	ldr	r2, [r7, #12]
 8014aa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014aa4:	683b      	ldr	r3, [r7, #0]
 8014aa6:	685a      	ldr	r2, [r3, #4]
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	693a      	ldr	r2, [r7, #16]
 8014ab0:	621a      	str	r2, [r3, #32]
}
 8014ab2:	bf00      	nop
 8014ab4:	371c      	adds	r7, #28
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014abc:	4770      	bx	lr
 8014abe:	bf00      	nop
 8014ac0:	40012c00 	.word	0x40012c00
 8014ac4:	40013400 	.word	0x40013400
 8014ac8:	40014000 	.word	0x40014000
 8014acc:	40014400 	.word	0x40014400
 8014ad0:	40014800 	.word	0x40014800

08014ad4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8014ad4:	b480      	push	{r7}
 8014ad6:	b087      	sub	sp, #28
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	6078      	str	r0, [r7, #4]
 8014adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	6a1b      	ldr	r3, [r3, #32]
 8014ae2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	6a1b      	ldr	r3, [r3, #32]
 8014aee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	685b      	ldr	r3, [r3, #4]
 8014af4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014b08:	683b      	ldr	r3, [r7, #0]
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	68fa      	ldr	r2, [r7, #12]
 8014b0e:	4313      	orrs	r3, r2
 8014b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8014b12:	693b      	ldr	r3, [r7, #16]
 8014b14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8014b18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8014b1a:	683b      	ldr	r3, [r7, #0]
 8014b1c:	689b      	ldr	r3, [r3, #8]
 8014b1e:	041b      	lsls	r3, r3, #16
 8014b20:	693a      	ldr	r2, [r7, #16]
 8014b22:	4313      	orrs	r3, r2
 8014b24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	4a17      	ldr	r2, [pc, #92]	; (8014b88 <TIM_OC5_SetConfig+0xb4>)
 8014b2a:	4293      	cmp	r3, r2
 8014b2c:	d00f      	beq.n	8014b4e <TIM_OC5_SetConfig+0x7a>
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	4a16      	ldr	r2, [pc, #88]	; (8014b8c <TIM_OC5_SetConfig+0xb8>)
 8014b32:	4293      	cmp	r3, r2
 8014b34:	d00b      	beq.n	8014b4e <TIM_OC5_SetConfig+0x7a>
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	4a15      	ldr	r2, [pc, #84]	; (8014b90 <TIM_OC5_SetConfig+0xbc>)
 8014b3a:	4293      	cmp	r3, r2
 8014b3c:	d007      	beq.n	8014b4e <TIM_OC5_SetConfig+0x7a>
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	4a14      	ldr	r2, [pc, #80]	; (8014b94 <TIM_OC5_SetConfig+0xc0>)
 8014b42:	4293      	cmp	r3, r2
 8014b44:	d003      	beq.n	8014b4e <TIM_OC5_SetConfig+0x7a>
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	4a13      	ldr	r2, [pc, #76]	; (8014b98 <TIM_OC5_SetConfig+0xc4>)
 8014b4a:	4293      	cmp	r3, r2
 8014b4c:	d109      	bne.n	8014b62 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8014b4e:	697b      	ldr	r3, [r7, #20]
 8014b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014b54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	695b      	ldr	r3, [r3, #20]
 8014b5a:	021b      	lsls	r3, r3, #8
 8014b5c:	697a      	ldr	r2, [r7, #20]
 8014b5e:	4313      	orrs	r3, r2
 8014b60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	697a      	ldr	r2, [r7, #20]
 8014b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	68fa      	ldr	r2, [r7, #12]
 8014b6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8014b6e:	683b      	ldr	r3, [r7, #0]
 8014b70:	685a      	ldr	r2, [r3, #4]
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	693a      	ldr	r2, [r7, #16]
 8014b7a:	621a      	str	r2, [r3, #32]
}
 8014b7c:	bf00      	nop
 8014b7e:	371c      	adds	r7, #28
 8014b80:	46bd      	mov	sp, r7
 8014b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b86:	4770      	bx	lr
 8014b88:	40012c00 	.word	0x40012c00
 8014b8c:	40013400 	.word	0x40013400
 8014b90:	40014000 	.word	0x40014000
 8014b94:	40014400 	.word	0x40014400
 8014b98:	40014800 	.word	0x40014800

08014b9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8014b9c:	b480      	push	{r7}
 8014b9e:	b087      	sub	sp, #28
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	6078      	str	r0, [r7, #4]
 8014ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	6a1b      	ldr	r3, [r3, #32]
 8014baa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	6a1b      	ldr	r3, [r3, #32]
 8014bb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	685b      	ldr	r3, [r3, #4]
 8014bbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014bd0:	683b      	ldr	r3, [r7, #0]
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	021b      	lsls	r3, r3, #8
 8014bd6:	68fa      	ldr	r2, [r7, #12]
 8014bd8:	4313      	orrs	r3, r2
 8014bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8014bdc:	693b      	ldr	r3, [r7, #16]
 8014bde:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014be2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8014be4:	683b      	ldr	r3, [r7, #0]
 8014be6:	689b      	ldr	r3, [r3, #8]
 8014be8:	051b      	lsls	r3, r3, #20
 8014bea:	693a      	ldr	r2, [r7, #16]
 8014bec:	4313      	orrs	r3, r2
 8014bee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	4a18      	ldr	r2, [pc, #96]	; (8014c54 <TIM_OC6_SetConfig+0xb8>)
 8014bf4:	4293      	cmp	r3, r2
 8014bf6:	d00f      	beq.n	8014c18 <TIM_OC6_SetConfig+0x7c>
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	4a17      	ldr	r2, [pc, #92]	; (8014c58 <TIM_OC6_SetConfig+0xbc>)
 8014bfc:	4293      	cmp	r3, r2
 8014bfe:	d00b      	beq.n	8014c18 <TIM_OC6_SetConfig+0x7c>
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	4a16      	ldr	r2, [pc, #88]	; (8014c5c <TIM_OC6_SetConfig+0xc0>)
 8014c04:	4293      	cmp	r3, r2
 8014c06:	d007      	beq.n	8014c18 <TIM_OC6_SetConfig+0x7c>
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	4a15      	ldr	r2, [pc, #84]	; (8014c60 <TIM_OC6_SetConfig+0xc4>)
 8014c0c:	4293      	cmp	r3, r2
 8014c0e:	d003      	beq.n	8014c18 <TIM_OC6_SetConfig+0x7c>
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	4a14      	ldr	r2, [pc, #80]	; (8014c64 <TIM_OC6_SetConfig+0xc8>)
 8014c14:	4293      	cmp	r3, r2
 8014c16:	d109      	bne.n	8014c2c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8014c18:	697b      	ldr	r3, [r7, #20]
 8014c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8014c20:	683b      	ldr	r3, [r7, #0]
 8014c22:	695b      	ldr	r3, [r3, #20]
 8014c24:	029b      	lsls	r3, r3, #10
 8014c26:	697a      	ldr	r2, [r7, #20]
 8014c28:	4313      	orrs	r3, r2
 8014c2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	697a      	ldr	r2, [r7, #20]
 8014c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	68fa      	ldr	r2, [r7, #12]
 8014c36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8014c38:	683b      	ldr	r3, [r7, #0]
 8014c3a:	685a      	ldr	r2, [r3, #4]
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	693a      	ldr	r2, [r7, #16]
 8014c44:	621a      	str	r2, [r3, #32]
}
 8014c46:	bf00      	nop
 8014c48:	371c      	adds	r7, #28
 8014c4a:	46bd      	mov	sp, r7
 8014c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c50:	4770      	bx	lr
 8014c52:	bf00      	nop
 8014c54:	40012c00 	.word	0x40012c00
 8014c58:	40013400 	.word	0x40013400
 8014c5c:	40014000 	.word	0x40014000
 8014c60:	40014400 	.word	0x40014400
 8014c64:	40014800 	.word	0x40014800

08014c68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014c68:	b480      	push	{r7}
 8014c6a:	b087      	sub	sp, #28
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	60f8      	str	r0, [r7, #12]
 8014c70:	60b9      	str	r1, [r7, #8]
 8014c72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8014c74:	68bb      	ldr	r3, [r7, #8]
 8014c76:	f003 031f 	and.w	r3, r3, #31
 8014c7a:	2201      	movs	r2, #1
 8014c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8014c80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	6a1a      	ldr	r2, [r3, #32]
 8014c86:	697b      	ldr	r3, [r7, #20]
 8014c88:	43db      	mvns	r3, r3
 8014c8a:	401a      	ands	r2, r3
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	6a1a      	ldr	r2, [r3, #32]
 8014c94:	68bb      	ldr	r3, [r7, #8]
 8014c96:	f003 031f 	and.w	r3, r3, #31
 8014c9a:	6879      	ldr	r1, [r7, #4]
 8014c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8014ca0:	431a      	orrs	r2, r3
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	621a      	str	r2, [r3, #32]
}
 8014ca6:	bf00      	nop
 8014ca8:	371c      	adds	r7, #28
 8014caa:	46bd      	mov	sp, r7
 8014cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb0:	4770      	bx	lr
	...

08014cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014cb4:	b480      	push	{r7}
 8014cb6:	b085      	sub	sp, #20
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]
 8014cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014cc4:	2b01      	cmp	r3, #1
 8014cc6:	d101      	bne.n	8014ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014cc8:	2302      	movs	r3, #2
 8014cca:	e068      	b.n	8014d9e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	2201      	movs	r2, #1
 8014cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	2202      	movs	r2, #2
 8014cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	685b      	ldr	r3, [r3, #4]
 8014ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	689b      	ldr	r3, [r3, #8]
 8014cea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	4a2e      	ldr	r2, [pc, #184]	; (8014dac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8014cf2:	4293      	cmp	r3, r2
 8014cf4:	d004      	beq.n	8014d00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	4a2d      	ldr	r2, [pc, #180]	; (8014db0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8014cfc:	4293      	cmp	r3, r2
 8014cfe:	d108      	bne.n	8014d12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8014d06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8014d08:	683b      	ldr	r3, [r7, #0]
 8014d0a:	685b      	ldr	r3, [r3, #4]
 8014d0c:	68fa      	ldr	r2, [r7, #12]
 8014d0e:	4313      	orrs	r3, r2
 8014d10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014d18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014d1a:	683b      	ldr	r3, [r7, #0]
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	68fa      	ldr	r2, [r7, #12]
 8014d20:	4313      	orrs	r3, r2
 8014d22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	68fa      	ldr	r2, [r7, #12]
 8014d2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	681b      	ldr	r3, [r3, #0]
 8014d30:	4a1e      	ldr	r2, [pc, #120]	; (8014dac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8014d32:	4293      	cmp	r3, r2
 8014d34:	d01d      	beq.n	8014d72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014d3e:	d018      	beq.n	8014d72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	4a1b      	ldr	r2, [pc, #108]	; (8014db4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8014d46:	4293      	cmp	r3, r2
 8014d48:	d013      	beq.n	8014d72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	4a1a      	ldr	r2, [pc, #104]	; (8014db8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8014d50:	4293      	cmp	r3, r2
 8014d52:	d00e      	beq.n	8014d72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	4a18      	ldr	r2, [pc, #96]	; (8014dbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8014d5a:	4293      	cmp	r3, r2
 8014d5c:	d009      	beq.n	8014d72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	4a13      	ldr	r2, [pc, #76]	; (8014db0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8014d64:	4293      	cmp	r3, r2
 8014d66:	d004      	beq.n	8014d72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	681b      	ldr	r3, [r3, #0]
 8014d6c:	4a14      	ldr	r2, [pc, #80]	; (8014dc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8014d6e:	4293      	cmp	r3, r2
 8014d70:	d10c      	bne.n	8014d8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014d72:	68bb      	ldr	r3, [r7, #8]
 8014d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014d78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014d7a:	683b      	ldr	r3, [r7, #0]
 8014d7c:	689b      	ldr	r3, [r3, #8]
 8014d7e:	68ba      	ldr	r2, [r7, #8]
 8014d80:	4313      	orrs	r3, r2
 8014d82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	68ba      	ldr	r2, [r7, #8]
 8014d8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	2201      	movs	r2, #1
 8014d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	2200      	movs	r2, #0
 8014d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014d9c:	2300      	movs	r3, #0
}
 8014d9e:	4618      	mov	r0, r3
 8014da0:	3714      	adds	r7, #20
 8014da2:	46bd      	mov	sp, r7
 8014da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da8:	4770      	bx	lr
 8014daa:	bf00      	nop
 8014dac:	40012c00 	.word	0x40012c00
 8014db0:	40013400 	.word	0x40013400
 8014db4:	40000400 	.word	0x40000400
 8014db8:	40000800 	.word	0x40000800
 8014dbc:	40000c00 	.word	0x40000c00
 8014dc0:	40014000 	.word	0x40014000

08014dc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014dc4:	b480      	push	{r7}
 8014dc6:	b083      	sub	sp, #12
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014dcc:	bf00      	nop
 8014dce:	370c      	adds	r7, #12
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd6:	4770      	bx	lr

08014dd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014dd8:	b480      	push	{r7}
 8014dda:	b083      	sub	sp, #12
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014de0:	bf00      	nop
 8014de2:	370c      	adds	r7, #12
 8014de4:	46bd      	mov	sp, r7
 8014de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dea:	4770      	bx	lr

08014dec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8014dec:	b480      	push	{r7}
 8014dee:	b083      	sub	sp, #12
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8014df4:	bf00      	nop
 8014df6:	370c      	adds	r7, #12
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfe:	4770      	bx	lr

08014e00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b082      	sub	sp, #8
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d101      	bne.n	8014e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014e0e:	2301      	movs	r3, #1
 8014e10:	e040      	b.n	8014e94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d106      	bne.n	8014e28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014e22:	6878      	ldr	r0, [r7, #4]
 8014e24:	f7ee faea 	bl	80033fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	2224      	movs	r2, #36	; 0x24
 8014e2c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	681a      	ldr	r2, [r3, #0]
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	f022 0201 	bic.w	r2, r2, #1
 8014e3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014e3e:	6878      	ldr	r0, [r7, #4]
 8014e40:	f000 f82c 	bl	8014e9c <UART_SetConfig>
 8014e44:	4603      	mov	r3, r0
 8014e46:	2b01      	cmp	r3, #1
 8014e48:	d101      	bne.n	8014e4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8014e4a:	2301      	movs	r3, #1
 8014e4c:	e022      	b.n	8014e94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d002      	beq.n	8014e5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8014e56:	6878      	ldr	r0, [r7, #4]
 8014e58:	f000 fad8 	bl	801540c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	685a      	ldr	r2, [r3, #4]
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014e6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	689a      	ldr	r2, [r3, #8]
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014e7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	681a      	ldr	r2, [r3, #0]
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	f042 0201 	orr.w	r2, r2, #1
 8014e8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8014e8c:	6878      	ldr	r0, [r7, #4]
 8014e8e:	f000 fb5f 	bl	8015550 <UART_CheckIdleState>
 8014e92:	4603      	mov	r3, r0
}
 8014e94:	4618      	mov	r0, r3
 8014e96:	3708      	adds	r7, #8
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	bd80      	pop	{r7, pc}

08014e9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014e9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014ea0:	b08a      	sub	sp, #40	; 0x28
 8014ea2:	af00      	add	r7, sp, #0
 8014ea4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	689a      	ldr	r2, [r3, #8]
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	691b      	ldr	r3, [r3, #16]
 8014eb4:	431a      	orrs	r2, r3
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	695b      	ldr	r3, [r3, #20]
 8014eba:	431a      	orrs	r2, r3
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	69db      	ldr	r3, [r3, #28]
 8014ec0:	4313      	orrs	r3, r2
 8014ec2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	681a      	ldr	r2, [r3, #0]
 8014eca:	4ba4      	ldr	r3, [pc, #656]	; (801515c <UART_SetConfig+0x2c0>)
 8014ecc:	4013      	ands	r3, r2
 8014ece:	68fa      	ldr	r2, [r7, #12]
 8014ed0:	6812      	ldr	r2, [r2, #0]
 8014ed2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014ed4:	430b      	orrs	r3, r1
 8014ed6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	685b      	ldr	r3, [r3, #4]
 8014ede:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8014ee2:	68fb      	ldr	r3, [r7, #12]
 8014ee4:	68da      	ldr	r2, [r3, #12]
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	430a      	orrs	r2, r1
 8014eec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	699b      	ldr	r3, [r3, #24]
 8014ef2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	4a99      	ldr	r2, [pc, #612]	; (8015160 <UART_SetConfig+0x2c4>)
 8014efa:	4293      	cmp	r3, r2
 8014efc:	d004      	beq.n	8014f08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	6a1b      	ldr	r3, [r3, #32]
 8014f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f04:	4313      	orrs	r3, r2
 8014f06:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	689b      	ldr	r3, [r3, #8]
 8014f0e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f18:	430a      	orrs	r2, r1
 8014f1a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	4a90      	ldr	r2, [pc, #576]	; (8015164 <UART_SetConfig+0x2c8>)
 8014f22:	4293      	cmp	r3, r2
 8014f24:	d126      	bne.n	8014f74 <UART_SetConfig+0xd8>
 8014f26:	4b90      	ldr	r3, [pc, #576]	; (8015168 <UART_SetConfig+0x2cc>)
 8014f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014f2c:	f003 0303 	and.w	r3, r3, #3
 8014f30:	2b03      	cmp	r3, #3
 8014f32:	d81b      	bhi.n	8014f6c <UART_SetConfig+0xd0>
 8014f34:	a201      	add	r2, pc, #4	; (adr r2, 8014f3c <UART_SetConfig+0xa0>)
 8014f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f3a:	bf00      	nop
 8014f3c:	08014f4d 	.word	0x08014f4d
 8014f40:	08014f5d 	.word	0x08014f5d
 8014f44:	08014f55 	.word	0x08014f55
 8014f48:	08014f65 	.word	0x08014f65
 8014f4c:	2301      	movs	r3, #1
 8014f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014f52:	e116      	b.n	8015182 <UART_SetConfig+0x2e6>
 8014f54:	2302      	movs	r3, #2
 8014f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014f5a:	e112      	b.n	8015182 <UART_SetConfig+0x2e6>
 8014f5c:	2304      	movs	r3, #4
 8014f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014f62:	e10e      	b.n	8015182 <UART_SetConfig+0x2e6>
 8014f64:	2308      	movs	r3, #8
 8014f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014f6a:	e10a      	b.n	8015182 <UART_SetConfig+0x2e6>
 8014f6c:	2310      	movs	r3, #16
 8014f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014f72:	e106      	b.n	8015182 <UART_SetConfig+0x2e6>
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	4a7c      	ldr	r2, [pc, #496]	; (801516c <UART_SetConfig+0x2d0>)
 8014f7a:	4293      	cmp	r3, r2
 8014f7c:	d138      	bne.n	8014ff0 <UART_SetConfig+0x154>
 8014f7e:	4b7a      	ldr	r3, [pc, #488]	; (8015168 <UART_SetConfig+0x2cc>)
 8014f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014f84:	f003 030c 	and.w	r3, r3, #12
 8014f88:	2b0c      	cmp	r3, #12
 8014f8a:	d82d      	bhi.n	8014fe8 <UART_SetConfig+0x14c>
 8014f8c:	a201      	add	r2, pc, #4	; (adr r2, 8014f94 <UART_SetConfig+0xf8>)
 8014f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f92:	bf00      	nop
 8014f94:	08014fc9 	.word	0x08014fc9
 8014f98:	08014fe9 	.word	0x08014fe9
 8014f9c:	08014fe9 	.word	0x08014fe9
 8014fa0:	08014fe9 	.word	0x08014fe9
 8014fa4:	08014fd9 	.word	0x08014fd9
 8014fa8:	08014fe9 	.word	0x08014fe9
 8014fac:	08014fe9 	.word	0x08014fe9
 8014fb0:	08014fe9 	.word	0x08014fe9
 8014fb4:	08014fd1 	.word	0x08014fd1
 8014fb8:	08014fe9 	.word	0x08014fe9
 8014fbc:	08014fe9 	.word	0x08014fe9
 8014fc0:	08014fe9 	.word	0x08014fe9
 8014fc4:	08014fe1 	.word	0x08014fe1
 8014fc8:	2300      	movs	r3, #0
 8014fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014fce:	e0d8      	b.n	8015182 <UART_SetConfig+0x2e6>
 8014fd0:	2302      	movs	r3, #2
 8014fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014fd6:	e0d4      	b.n	8015182 <UART_SetConfig+0x2e6>
 8014fd8:	2304      	movs	r3, #4
 8014fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014fde:	e0d0      	b.n	8015182 <UART_SetConfig+0x2e6>
 8014fe0:	2308      	movs	r3, #8
 8014fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014fe6:	e0cc      	b.n	8015182 <UART_SetConfig+0x2e6>
 8014fe8:	2310      	movs	r3, #16
 8014fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8014fee:	e0c8      	b.n	8015182 <UART_SetConfig+0x2e6>
 8014ff0:	68fb      	ldr	r3, [r7, #12]
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	4a5e      	ldr	r2, [pc, #376]	; (8015170 <UART_SetConfig+0x2d4>)
 8014ff6:	4293      	cmp	r3, r2
 8014ff8:	d125      	bne.n	8015046 <UART_SetConfig+0x1aa>
 8014ffa:	4b5b      	ldr	r3, [pc, #364]	; (8015168 <UART_SetConfig+0x2cc>)
 8014ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015000:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8015004:	2b30      	cmp	r3, #48	; 0x30
 8015006:	d016      	beq.n	8015036 <UART_SetConfig+0x19a>
 8015008:	2b30      	cmp	r3, #48	; 0x30
 801500a:	d818      	bhi.n	801503e <UART_SetConfig+0x1a2>
 801500c:	2b20      	cmp	r3, #32
 801500e:	d00a      	beq.n	8015026 <UART_SetConfig+0x18a>
 8015010:	2b20      	cmp	r3, #32
 8015012:	d814      	bhi.n	801503e <UART_SetConfig+0x1a2>
 8015014:	2b00      	cmp	r3, #0
 8015016:	d002      	beq.n	801501e <UART_SetConfig+0x182>
 8015018:	2b10      	cmp	r3, #16
 801501a:	d008      	beq.n	801502e <UART_SetConfig+0x192>
 801501c:	e00f      	b.n	801503e <UART_SetConfig+0x1a2>
 801501e:	2300      	movs	r3, #0
 8015020:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015024:	e0ad      	b.n	8015182 <UART_SetConfig+0x2e6>
 8015026:	2302      	movs	r3, #2
 8015028:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801502c:	e0a9      	b.n	8015182 <UART_SetConfig+0x2e6>
 801502e:	2304      	movs	r3, #4
 8015030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015034:	e0a5      	b.n	8015182 <UART_SetConfig+0x2e6>
 8015036:	2308      	movs	r3, #8
 8015038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801503c:	e0a1      	b.n	8015182 <UART_SetConfig+0x2e6>
 801503e:	2310      	movs	r3, #16
 8015040:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015044:	e09d      	b.n	8015182 <UART_SetConfig+0x2e6>
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	681b      	ldr	r3, [r3, #0]
 801504a:	4a4a      	ldr	r2, [pc, #296]	; (8015174 <UART_SetConfig+0x2d8>)
 801504c:	4293      	cmp	r3, r2
 801504e:	d125      	bne.n	801509c <UART_SetConfig+0x200>
 8015050:	4b45      	ldr	r3, [pc, #276]	; (8015168 <UART_SetConfig+0x2cc>)
 8015052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015056:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801505a:	2bc0      	cmp	r3, #192	; 0xc0
 801505c:	d016      	beq.n	801508c <UART_SetConfig+0x1f0>
 801505e:	2bc0      	cmp	r3, #192	; 0xc0
 8015060:	d818      	bhi.n	8015094 <UART_SetConfig+0x1f8>
 8015062:	2b80      	cmp	r3, #128	; 0x80
 8015064:	d00a      	beq.n	801507c <UART_SetConfig+0x1e0>
 8015066:	2b80      	cmp	r3, #128	; 0x80
 8015068:	d814      	bhi.n	8015094 <UART_SetConfig+0x1f8>
 801506a:	2b00      	cmp	r3, #0
 801506c:	d002      	beq.n	8015074 <UART_SetConfig+0x1d8>
 801506e:	2b40      	cmp	r3, #64	; 0x40
 8015070:	d008      	beq.n	8015084 <UART_SetConfig+0x1e8>
 8015072:	e00f      	b.n	8015094 <UART_SetConfig+0x1f8>
 8015074:	2300      	movs	r3, #0
 8015076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801507a:	e082      	b.n	8015182 <UART_SetConfig+0x2e6>
 801507c:	2302      	movs	r3, #2
 801507e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015082:	e07e      	b.n	8015182 <UART_SetConfig+0x2e6>
 8015084:	2304      	movs	r3, #4
 8015086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801508a:	e07a      	b.n	8015182 <UART_SetConfig+0x2e6>
 801508c:	2308      	movs	r3, #8
 801508e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015092:	e076      	b.n	8015182 <UART_SetConfig+0x2e6>
 8015094:	2310      	movs	r3, #16
 8015096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801509a:	e072      	b.n	8015182 <UART_SetConfig+0x2e6>
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	4a35      	ldr	r2, [pc, #212]	; (8015178 <UART_SetConfig+0x2dc>)
 80150a2:	4293      	cmp	r3, r2
 80150a4:	d12a      	bne.n	80150fc <UART_SetConfig+0x260>
 80150a6:	4b30      	ldr	r3, [pc, #192]	; (8015168 <UART_SetConfig+0x2cc>)
 80150a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80150ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80150b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80150b4:	d01a      	beq.n	80150ec <UART_SetConfig+0x250>
 80150b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80150ba:	d81b      	bhi.n	80150f4 <UART_SetConfig+0x258>
 80150bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80150c0:	d00c      	beq.n	80150dc <UART_SetConfig+0x240>
 80150c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80150c6:	d815      	bhi.n	80150f4 <UART_SetConfig+0x258>
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d003      	beq.n	80150d4 <UART_SetConfig+0x238>
 80150cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80150d0:	d008      	beq.n	80150e4 <UART_SetConfig+0x248>
 80150d2:	e00f      	b.n	80150f4 <UART_SetConfig+0x258>
 80150d4:	2300      	movs	r3, #0
 80150d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80150da:	e052      	b.n	8015182 <UART_SetConfig+0x2e6>
 80150dc:	2302      	movs	r3, #2
 80150de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80150e2:	e04e      	b.n	8015182 <UART_SetConfig+0x2e6>
 80150e4:	2304      	movs	r3, #4
 80150e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80150ea:	e04a      	b.n	8015182 <UART_SetConfig+0x2e6>
 80150ec:	2308      	movs	r3, #8
 80150ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80150f2:	e046      	b.n	8015182 <UART_SetConfig+0x2e6>
 80150f4:	2310      	movs	r3, #16
 80150f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80150fa:	e042      	b.n	8015182 <UART_SetConfig+0x2e6>
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	4a17      	ldr	r2, [pc, #92]	; (8015160 <UART_SetConfig+0x2c4>)
 8015102:	4293      	cmp	r3, r2
 8015104:	d13a      	bne.n	801517c <UART_SetConfig+0x2e0>
 8015106:	4b18      	ldr	r3, [pc, #96]	; (8015168 <UART_SetConfig+0x2cc>)
 8015108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801510c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8015110:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8015114:	d01a      	beq.n	801514c <UART_SetConfig+0x2b0>
 8015116:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801511a:	d81b      	bhi.n	8015154 <UART_SetConfig+0x2b8>
 801511c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015120:	d00c      	beq.n	801513c <UART_SetConfig+0x2a0>
 8015122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015126:	d815      	bhi.n	8015154 <UART_SetConfig+0x2b8>
 8015128:	2b00      	cmp	r3, #0
 801512a:	d003      	beq.n	8015134 <UART_SetConfig+0x298>
 801512c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015130:	d008      	beq.n	8015144 <UART_SetConfig+0x2a8>
 8015132:	e00f      	b.n	8015154 <UART_SetConfig+0x2b8>
 8015134:	2300      	movs	r3, #0
 8015136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801513a:	e022      	b.n	8015182 <UART_SetConfig+0x2e6>
 801513c:	2302      	movs	r3, #2
 801513e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015142:	e01e      	b.n	8015182 <UART_SetConfig+0x2e6>
 8015144:	2304      	movs	r3, #4
 8015146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801514a:	e01a      	b.n	8015182 <UART_SetConfig+0x2e6>
 801514c:	2308      	movs	r3, #8
 801514e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8015152:	e016      	b.n	8015182 <UART_SetConfig+0x2e6>
 8015154:	2310      	movs	r3, #16
 8015156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 801515a:	e012      	b.n	8015182 <UART_SetConfig+0x2e6>
 801515c:	efff69f3 	.word	0xefff69f3
 8015160:	40008000 	.word	0x40008000
 8015164:	40013800 	.word	0x40013800
 8015168:	40021000 	.word	0x40021000
 801516c:	40004400 	.word	0x40004400
 8015170:	40004800 	.word	0x40004800
 8015174:	40004c00 	.word	0x40004c00
 8015178:	40005000 	.word	0x40005000
 801517c:	2310      	movs	r3, #16
 801517e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	4a9f      	ldr	r2, [pc, #636]	; (8015404 <UART_SetConfig+0x568>)
 8015188:	4293      	cmp	r3, r2
 801518a:	d17a      	bne.n	8015282 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801518c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015190:	2b08      	cmp	r3, #8
 8015192:	d824      	bhi.n	80151de <UART_SetConfig+0x342>
 8015194:	a201      	add	r2, pc, #4	; (adr r2, 801519c <UART_SetConfig+0x300>)
 8015196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801519a:	bf00      	nop
 801519c:	080151c1 	.word	0x080151c1
 80151a0:	080151df 	.word	0x080151df
 80151a4:	080151c9 	.word	0x080151c9
 80151a8:	080151df 	.word	0x080151df
 80151ac:	080151cf 	.word	0x080151cf
 80151b0:	080151df 	.word	0x080151df
 80151b4:	080151df 	.word	0x080151df
 80151b8:	080151df 	.word	0x080151df
 80151bc:	080151d7 	.word	0x080151d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80151c0:	f7fc f822 	bl	8011208 <HAL_RCC_GetPCLK1Freq>
 80151c4:	61f8      	str	r0, [r7, #28]
        break;
 80151c6:	e010      	b.n	80151ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80151c8:	4b8f      	ldr	r3, [pc, #572]	; (8015408 <UART_SetConfig+0x56c>)
 80151ca:	61fb      	str	r3, [r7, #28]
        break;
 80151cc:	e00d      	b.n	80151ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80151ce:	f7fb ff83 	bl	80110d8 <HAL_RCC_GetSysClockFreq>
 80151d2:	61f8      	str	r0, [r7, #28]
        break;
 80151d4:	e009      	b.n	80151ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80151d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80151da:	61fb      	str	r3, [r7, #28]
        break;
 80151dc:	e005      	b.n	80151ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80151de:	2300      	movs	r3, #0
 80151e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80151e2:	2301      	movs	r3, #1
 80151e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80151e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80151ea:	69fb      	ldr	r3, [r7, #28]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	f000 80fb 	beq.w	80153e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	685a      	ldr	r2, [r3, #4]
 80151f6:	4613      	mov	r3, r2
 80151f8:	005b      	lsls	r3, r3, #1
 80151fa:	4413      	add	r3, r2
 80151fc:	69fa      	ldr	r2, [r7, #28]
 80151fe:	429a      	cmp	r2, r3
 8015200:	d305      	bcc.n	801520e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	685b      	ldr	r3, [r3, #4]
 8015206:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8015208:	69fa      	ldr	r2, [r7, #28]
 801520a:	429a      	cmp	r2, r3
 801520c:	d903      	bls.n	8015216 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 801520e:	2301      	movs	r3, #1
 8015210:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015214:	e0e8      	b.n	80153e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8015216:	69fb      	ldr	r3, [r7, #28]
 8015218:	2200      	movs	r2, #0
 801521a:	461c      	mov	r4, r3
 801521c:	4615      	mov	r5, r2
 801521e:	f04f 0200 	mov.w	r2, #0
 8015222:	f04f 0300 	mov.w	r3, #0
 8015226:	022b      	lsls	r3, r5, #8
 8015228:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 801522c:	0222      	lsls	r2, r4, #8
 801522e:	68f9      	ldr	r1, [r7, #12]
 8015230:	6849      	ldr	r1, [r1, #4]
 8015232:	0849      	lsrs	r1, r1, #1
 8015234:	2000      	movs	r0, #0
 8015236:	4688      	mov	r8, r1
 8015238:	4681      	mov	r9, r0
 801523a:	eb12 0a08 	adds.w	sl, r2, r8
 801523e:	eb43 0b09 	adc.w	fp, r3, r9
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	685b      	ldr	r3, [r3, #4]
 8015246:	2200      	movs	r2, #0
 8015248:	603b      	str	r3, [r7, #0]
 801524a:	607a      	str	r2, [r7, #4]
 801524c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015250:	4650      	mov	r0, sl
 8015252:	4659      	mov	r1, fp
 8015254:	f7eb fc3a 	bl	8000acc <__aeabi_uldivmod>
 8015258:	4602      	mov	r2, r0
 801525a:	460b      	mov	r3, r1
 801525c:	4613      	mov	r3, r2
 801525e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015260:	69bb      	ldr	r3, [r7, #24]
 8015262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015266:	d308      	bcc.n	801527a <UART_SetConfig+0x3de>
 8015268:	69bb      	ldr	r3, [r7, #24]
 801526a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801526e:	d204      	bcs.n	801527a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	69ba      	ldr	r2, [r7, #24]
 8015276:	60da      	str	r2, [r3, #12]
 8015278:	e0b6      	b.n	80153e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 801527a:	2301      	movs	r3, #1
 801527c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015280:	e0b2      	b.n	80153e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	69db      	ldr	r3, [r3, #28]
 8015286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801528a:	d15e      	bne.n	801534a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 801528c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015290:	2b08      	cmp	r3, #8
 8015292:	d828      	bhi.n	80152e6 <UART_SetConfig+0x44a>
 8015294:	a201      	add	r2, pc, #4	; (adr r2, 801529c <UART_SetConfig+0x400>)
 8015296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801529a:	bf00      	nop
 801529c:	080152c1 	.word	0x080152c1
 80152a0:	080152c9 	.word	0x080152c9
 80152a4:	080152d1 	.word	0x080152d1
 80152a8:	080152e7 	.word	0x080152e7
 80152ac:	080152d7 	.word	0x080152d7
 80152b0:	080152e7 	.word	0x080152e7
 80152b4:	080152e7 	.word	0x080152e7
 80152b8:	080152e7 	.word	0x080152e7
 80152bc:	080152df 	.word	0x080152df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80152c0:	f7fb ffa2 	bl	8011208 <HAL_RCC_GetPCLK1Freq>
 80152c4:	61f8      	str	r0, [r7, #28]
        break;
 80152c6:	e014      	b.n	80152f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80152c8:	f7fb ffb4 	bl	8011234 <HAL_RCC_GetPCLK2Freq>
 80152cc:	61f8      	str	r0, [r7, #28]
        break;
 80152ce:	e010      	b.n	80152f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80152d0:	4b4d      	ldr	r3, [pc, #308]	; (8015408 <UART_SetConfig+0x56c>)
 80152d2:	61fb      	str	r3, [r7, #28]
        break;
 80152d4:	e00d      	b.n	80152f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80152d6:	f7fb feff 	bl	80110d8 <HAL_RCC_GetSysClockFreq>
 80152da:	61f8      	str	r0, [r7, #28]
        break;
 80152dc:	e009      	b.n	80152f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80152de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80152e2:	61fb      	str	r3, [r7, #28]
        break;
 80152e4:	e005      	b.n	80152f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80152e6:	2300      	movs	r3, #0
 80152e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80152ea:	2301      	movs	r3, #1
 80152ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80152f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80152f2:	69fb      	ldr	r3, [r7, #28]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d077      	beq.n	80153e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80152f8:	69fb      	ldr	r3, [r7, #28]
 80152fa:	005a      	lsls	r2, r3, #1
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	685b      	ldr	r3, [r3, #4]
 8015300:	085b      	lsrs	r3, r3, #1
 8015302:	441a      	add	r2, r3
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	685b      	ldr	r3, [r3, #4]
 8015308:	fbb2 f3f3 	udiv	r3, r2, r3
 801530c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801530e:	69bb      	ldr	r3, [r7, #24]
 8015310:	2b0f      	cmp	r3, #15
 8015312:	d916      	bls.n	8015342 <UART_SetConfig+0x4a6>
 8015314:	69bb      	ldr	r3, [r7, #24]
 8015316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801531a:	d212      	bcs.n	8015342 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801531c:	69bb      	ldr	r3, [r7, #24]
 801531e:	b29b      	uxth	r3, r3
 8015320:	f023 030f 	bic.w	r3, r3, #15
 8015324:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015326:	69bb      	ldr	r3, [r7, #24]
 8015328:	085b      	lsrs	r3, r3, #1
 801532a:	b29b      	uxth	r3, r3
 801532c:	f003 0307 	and.w	r3, r3, #7
 8015330:	b29a      	uxth	r2, r3
 8015332:	8afb      	ldrh	r3, [r7, #22]
 8015334:	4313      	orrs	r3, r2
 8015336:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	8afa      	ldrh	r2, [r7, #22]
 801533e:	60da      	str	r2, [r3, #12]
 8015340:	e052      	b.n	80153e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8015342:	2301      	movs	r3, #1
 8015344:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8015348:	e04e      	b.n	80153e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 801534a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801534e:	2b08      	cmp	r3, #8
 8015350:	d827      	bhi.n	80153a2 <UART_SetConfig+0x506>
 8015352:	a201      	add	r2, pc, #4	; (adr r2, 8015358 <UART_SetConfig+0x4bc>)
 8015354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015358:	0801537d 	.word	0x0801537d
 801535c:	08015385 	.word	0x08015385
 8015360:	0801538d 	.word	0x0801538d
 8015364:	080153a3 	.word	0x080153a3
 8015368:	08015393 	.word	0x08015393
 801536c:	080153a3 	.word	0x080153a3
 8015370:	080153a3 	.word	0x080153a3
 8015374:	080153a3 	.word	0x080153a3
 8015378:	0801539b 	.word	0x0801539b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801537c:	f7fb ff44 	bl	8011208 <HAL_RCC_GetPCLK1Freq>
 8015380:	61f8      	str	r0, [r7, #28]
        break;
 8015382:	e014      	b.n	80153ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015384:	f7fb ff56 	bl	8011234 <HAL_RCC_GetPCLK2Freq>
 8015388:	61f8      	str	r0, [r7, #28]
        break;
 801538a:	e010      	b.n	80153ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801538c:	4b1e      	ldr	r3, [pc, #120]	; (8015408 <UART_SetConfig+0x56c>)
 801538e:	61fb      	str	r3, [r7, #28]
        break;
 8015390:	e00d      	b.n	80153ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8015392:	f7fb fea1 	bl	80110d8 <HAL_RCC_GetSysClockFreq>
 8015396:	61f8      	str	r0, [r7, #28]
        break;
 8015398:	e009      	b.n	80153ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801539a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801539e:	61fb      	str	r3, [r7, #28]
        break;
 80153a0:	e005      	b.n	80153ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80153a2:	2300      	movs	r3, #0
 80153a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80153a6:	2301      	movs	r3, #1
 80153a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80153ac:	bf00      	nop
    }

    if (pclk != 0U)
 80153ae:	69fb      	ldr	r3, [r7, #28]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d019      	beq.n	80153e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	685b      	ldr	r3, [r3, #4]
 80153b8:	085a      	lsrs	r2, r3, #1
 80153ba:	69fb      	ldr	r3, [r7, #28]
 80153bc:	441a      	add	r2, r3
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	685b      	ldr	r3, [r3, #4]
 80153c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80153c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80153c8:	69bb      	ldr	r3, [r7, #24]
 80153ca:	2b0f      	cmp	r3, #15
 80153cc:	d909      	bls.n	80153e2 <UART_SetConfig+0x546>
 80153ce:	69bb      	ldr	r3, [r7, #24]
 80153d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80153d4:	d205      	bcs.n	80153e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80153d6:	69bb      	ldr	r3, [r7, #24]
 80153d8:	b29a      	uxth	r2, r3
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	60da      	str	r2, [r3, #12]
 80153e0:	e002      	b.n	80153e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80153e2:	2301      	movs	r3, #1
 80153e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	2200      	movs	r2, #0
 80153ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	2200      	movs	r2, #0
 80153f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80153f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80153f8:	4618      	mov	r0, r3
 80153fa:	3728      	adds	r7, #40	; 0x28
 80153fc:	46bd      	mov	sp, r7
 80153fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015402:	bf00      	nop
 8015404:	40008000 	.word	0x40008000
 8015408:	00f42400 	.word	0x00f42400

0801540c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801540c:	b480      	push	{r7}
 801540e:	b083      	sub	sp, #12
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015418:	f003 0301 	and.w	r3, r3, #1
 801541c:	2b00      	cmp	r3, #0
 801541e:	d00a      	beq.n	8015436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	685b      	ldr	r3, [r3, #4]
 8015426:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	430a      	orrs	r2, r1
 8015434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801543a:	f003 0302 	and.w	r3, r3, #2
 801543e:	2b00      	cmp	r3, #0
 8015440:	d00a      	beq.n	8015458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	685b      	ldr	r3, [r3, #4]
 8015448:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	430a      	orrs	r2, r1
 8015456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801545c:	f003 0304 	and.w	r3, r3, #4
 8015460:	2b00      	cmp	r3, #0
 8015462:	d00a      	beq.n	801547a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	685b      	ldr	r3, [r3, #4]
 801546a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	430a      	orrs	r2, r1
 8015478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801547e:	f003 0308 	and.w	r3, r3, #8
 8015482:	2b00      	cmp	r3, #0
 8015484:	d00a      	beq.n	801549c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	685b      	ldr	r3, [r3, #4]
 801548c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	430a      	orrs	r2, r1
 801549a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154a0:	f003 0310 	and.w	r3, r3, #16
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d00a      	beq.n	80154be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	689b      	ldr	r3, [r3, #8]
 80154ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	430a      	orrs	r2, r1
 80154bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154c2:	f003 0320 	and.w	r3, r3, #32
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d00a      	beq.n	80154e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	689b      	ldr	r3, [r3, #8]
 80154d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	430a      	orrs	r2, r1
 80154de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d01a      	beq.n	8015522 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	685b      	ldr	r3, [r3, #4]
 80154f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	430a      	orrs	r2, r1
 8015500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801550a:	d10a      	bne.n	8015522 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	685b      	ldr	r3, [r3, #4]
 8015512:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	430a      	orrs	r2, r1
 8015520:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801552a:	2b00      	cmp	r3, #0
 801552c:	d00a      	beq.n	8015544 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	685b      	ldr	r3, [r3, #4]
 8015534:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	430a      	orrs	r2, r1
 8015542:	605a      	str	r2, [r3, #4]
  }
}
 8015544:	bf00      	nop
 8015546:	370c      	adds	r7, #12
 8015548:	46bd      	mov	sp, r7
 801554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801554e:	4770      	bx	lr

08015550 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015550:	b580      	push	{r7, lr}
 8015552:	b086      	sub	sp, #24
 8015554:	af02      	add	r7, sp, #8
 8015556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	2200      	movs	r2, #0
 801555c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015560:	f7f6 fb20 	bl	800bba4 <HAL_GetTick>
 8015564:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	f003 0308 	and.w	r3, r3, #8
 8015570:	2b08      	cmp	r3, #8
 8015572:	d10e      	bne.n	8015592 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015574:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015578:	9300      	str	r3, [sp, #0]
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	2200      	movs	r2, #0
 801557e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015582:	6878      	ldr	r0, [r7, #4]
 8015584:	f000 f82d 	bl	80155e2 <UART_WaitOnFlagUntilTimeout>
 8015588:	4603      	mov	r3, r0
 801558a:	2b00      	cmp	r3, #0
 801558c:	d001      	beq.n	8015592 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801558e:	2303      	movs	r3, #3
 8015590:	e023      	b.n	80155da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	f003 0304 	and.w	r3, r3, #4
 801559c:	2b04      	cmp	r3, #4
 801559e:	d10e      	bne.n	80155be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80155a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80155a4:	9300      	str	r3, [sp, #0]
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	2200      	movs	r2, #0
 80155aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80155ae:	6878      	ldr	r0, [r7, #4]
 80155b0:	f000 f817 	bl	80155e2 <UART_WaitOnFlagUntilTimeout>
 80155b4:	4603      	mov	r3, r0
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d001      	beq.n	80155be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80155ba:	2303      	movs	r3, #3
 80155bc:	e00d      	b.n	80155da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	2220      	movs	r2, #32
 80155c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	2220      	movs	r2, #32
 80155c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	2200      	movs	r2, #0
 80155ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	2200      	movs	r2, #0
 80155d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80155d8:	2300      	movs	r3, #0
}
 80155da:	4618      	mov	r0, r3
 80155dc:	3710      	adds	r7, #16
 80155de:	46bd      	mov	sp, r7
 80155e0:	bd80      	pop	{r7, pc}

080155e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80155e2:	b580      	push	{r7, lr}
 80155e4:	b09c      	sub	sp, #112	; 0x70
 80155e6:	af00      	add	r7, sp, #0
 80155e8:	60f8      	str	r0, [r7, #12]
 80155ea:	60b9      	str	r1, [r7, #8]
 80155ec:	603b      	str	r3, [r7, #0]
 80155ee:	4613      	mov	r3, r2
 80155f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80155f2:	e0a5      	b.n	8015740 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80155f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80155f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80155fa:	f000 80a1 	beq.w	8015740 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80155fe:	f7f6 fad1 	bl	800bba4 <HAL_GetTick>
 8015602:	4602      	mov	r2, r0
 8015604:	683b      	ldr	r3, [r7, #0]
 8015606:	1ad3      	subs	r3, r2, r3
 8015608:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801560a:	429a      	cmp	r2, r3
 801560c:	d302      	bcc.n	8015614 <UART_WaitOnFlagUntilTimeout+0x32>
 801560e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015610:	2b00      	cmp	r3, #0
 8015612:	d13e      	bne.n	8015692 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801561a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801561c:	e853 3f00 	ldrex	r3, [r3]
 8015620:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015624:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8015628:	667b      	str	r3, [r7, #100]	; 0x64
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	461a      	mov	r2, r3
 8015630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015632:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015634:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015636:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015638:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801563a:	e841 2300 	strex	r3, r2, [r1]
 801563e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015642:	2b00      	cmp	r3, #0
 8015644:	d1e6      	bne.n	8015614 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	3308      	adds	r3, #8
 801564c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801564e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015650:	e853 3f00 	ldrex	r3, [r3]
 8015654:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015658:	f023 0301 	bic.w	r3, r3, #1
 801565c:	663b      	str	r3, [r7, #96]	; 0x60
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	3308      	adds	r3, #8
 8015664:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015666:	64ba      	str	r2, [r7, #72]	; 0x48
 8015668:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801566a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801566c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801566e:	e841 2300 	strex	r3, r2, [r1]
 8015672:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8015674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015676:	2b00      	cmp	r3, #0
 8015678:	d1e5      	bne.n	8015646 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	2220      	movs	r2, #32
 801567e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	2220      	movs	r2, #32
 8015684:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	2200      	movs	r2, #0
 801568a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 801568e:	2303      	movs	r3, #3
 8015690:	e067      	b.n	8015762 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	f003 0304 	and.w	r3, r3, #4
 801569c:	2b00      	cmp	r3, #0
 801569e:	d04f      	beq.n	8015740 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	69db      	ldr	r3, [r3, #28]
 80156a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80156aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80156ae:	d147      	bne.n	8015740 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80156b8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156c2:	e853 3f00 	ldrex	r3, [r3]
 80156c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80156c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80156ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	461a      	mov	r2, r3
 80156d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80156d8:	637b      	str	r3, [r7, #52]	; 0x34
 80156da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80156de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80156e0:	e841 2300 	strex	r3, r2, [r1]
 80156e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80156e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d1e6      	bne.n	80156ba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	3308      	adds	r3, #8
 80156f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156f4:	697b      	ldr	r3, [r7, #20]
 80156f6:	e853 3f00 	ldrex	r3, [r3]
 80156fa:	613b      	str	r3, [r7, #16]
   return(result);
 80156fc:	693b      	ldr	r3, [r7, #16]
 80156fe:	f023 0301 	bic.w	r3, r3, #1
 8015702:	66bb      	str	r3, [r7, #104]	; 0x68
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	3308      	adds	r3, #8
 801570a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801570c:	623a      	str	r2, [r7, #32]
 801570e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015710:	69f9      	ldr	r1, [r7, #28]
 8015712:	6a3a      	ldr	r2, [r7, #32]
 8015714:	e841 2300 	strex	r3, r2, [r1]
 8015718:	61bb      	str	r3, [r7, #24]
   return(result);
 801571a:	69bb      	ldr	r3, [r7, #24]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d1e5      	bne.n	80156ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	2220      	movs	r2, #32
 8015724:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	2220      	movs	r2, #32
 801572a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	2220      	movs	r2, #32
 8015730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	2200      	movs	r2, #0
 8015738:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 801573c:	2303      	movs	r3, #3
 801573e:	e010      	b.n	8015762 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	69da      	ldr	r2, [r3, #28]
 8015746:	68bb      	ldr	r3, [r7, #8]
 8015748:	4013      	ands	r3, r2
 801574a:	68ba      	ldr	r2, [r7, #8]
 801574c:	429a      	cmp	r2, r3
 801574e:	bf0c      	ite	eq
 8015750:	2301      	moveq	r3, #1
 8015752:	2300      	movne	r3, #0
 8015754:	b2db      	uxtb	r3, r3
 8015756:	461a      	mov	r2, r3
 8015758:	79fb      	ldrb	r3, [r7, #7]
 801575a:	429a      	cmp	r2, r3
 801575c:	f43f af4a 	beq.w	80155f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015760:	2300      	movs	r3, #0
}
 8015762:	4618      	mov	r0, r3
 8015764:	3770      	adds	r7, #112	; 0x70
 8015766:	46bd      	mov	sp, r7
 8015768:	bd80      	pop	{r7, pc}
	...

0801576c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 801576c:	b480      	push	{r7}
 801576e:	b087      	sub	sp, #28
 8015770:	af00      	add	r7, sp, #0
 8015772:	6078      	str	r0, [r7, #4]
 8015774:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8015776:	683b      	ldr	r3, [r7, #0]
 8015778:	681a      	ldr	r2, [r3, #0]
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015780:	683a      	ldr	r2, [r7, #0]
 8015782:	6812      	ldr	r2, [r2, #0]
 8015784:	f023 0101 	bic.w	r1, r3, #1
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 801578e:	683b      	ldr	r3, [r7, #0]
 8015790:	689b      	ldr	r3, [r3, #8]
 8015792:	2b08      	cmp	r3, #8
 8015794:	d102      	bne.n	801579c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8015796:	2340      	movs	r3, #64	; 0x40
 8015798:	617b      	str	r3, [r7, #20]
 801579a:	e001      	b.n	80157a0 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 801579c:	2300      	movs	r3, #0
 801579e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80157a0:	683b      	ldr	r3, [r7, #0]
 80157a2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80157a4:	697b      	ldr	r3, [r7, #20]
 80157a6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80157a8:	683b      	ldr	r3, [r7, #0]
 80157aa:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80157ac:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80157ae:	683b      	ldr	r3, [r7, #0]
 80157b0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80157b2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80157b4:	683b      	ldr	r3, [r7, #0]
 80157b6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80157b8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80157ba:	683b      	ldr	r3, [r7, #0]
 80157bc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80157be:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80157c0:	683b      	ldr	r3, [r7, #0]
 80157c2:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80157c4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80157c6:	683b      	ldr	r3, [r7, #0]
 80157c8:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80157ca:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80157cc:	683b      	ldr	r3, [r7, #0]
 80157ce:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80157d0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80157d2:	683b      	ldr	r3, [r7, #0]
 80157d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80157d6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80157d8:	683b      	ldr	r3, [r7, #0]
 80157da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80157dc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80157de:	683b      	ldr	r3, [r7, #0]
 80157e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80157e2:	4313      	orrs	r3, r2
 80157e4:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80157e6:	683b      	ldr	r3, [r7, #0]
 80157e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157ea:	693a      	ldr	r2, [r7, #16]
 80157ec:	4313      	orrs	r3, r2
 80157ee:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 80157f0:	683b      	ldr	r3, [r7, #0]
 80157f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80157f4:	693a      	ldr	r2, [r7, #16]
 80157f6:	4313      	orrs	r3, r2
 80157f8:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 80157fa:	683b      	ldr	r3, [r7, #0]
 80157fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80157fe:	693a      	ldr	r2, [r7, #16]
 8015800:	4313      	orrs	r3, r2
 8015802:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8015804:	4b20      	ldr	r3, [pc, #128]	; (8015888 <FMC_NORSRAM_Init+0x11c>)
 8015806:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801580e:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015816:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 801581e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8015820:	683b      	ldr	r3, [r7, #0]
 8015822:	681a      	ldr	r2, [r3, #0]
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	43db      	mvns	r3, r3
 801582e:	ea02 0103 	and.w	r1, r2, r3
 8015832:	683b      	ldr	r3, [r7, #0]
 8015834:	681a      	ldr	r2, [r3, #0]
 8015836:	693b      	ldr	r3, [r7, #16]
 8015838:	4319      	orrs	r1, r3
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8015840:	683b      	ldr	r3, [r7, #0]
 8015842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015848:	d10c      	bne.n	8015864 <FMC_NORSRAM_Init+0xf8>
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d008      	beq.n	8015864 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801585a:	683b      	ldr	r3, [r7, #0]
 801585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801585e:	431a      	orrs	r2, r3
 8015860:	687b      	ldr	r3, [r7, #4]
 8015862:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8015864:	683b      	ldr	r3, [r7, #0]
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d006      	beq.n	801587a <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	681a      	ldr	r2, [r3, #0]
 8015870:	683b      	ldr	r3, [r7, #0]
 8015872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015874:	431a      	orrs	r2, r3
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 801587a:	2300      	movs	r3, #0
}
 801587c:	4618      	mov	r0, r3
 801587e:	371c      	adds	r7, #28
 8015880:	46bd      	mov	sp, r7
 8015882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015886:	4770      	bx	lr
 8015888:	0008fb7f 	.word	0x0008fb7f

0801588c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 801588c:	b480      	push	{r7}
 801588e:	b087      	sub	sp, #28
 8015890:	af00      	add	r7, sp, #0
 8015892:	60f8      	str	r0, [r7, #12]
 8015894:	60b9      	str	r1, [r7, #8]
 8015896:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	1c5a      	adds	r2, r3, #1
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158a2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80158a6:	68bb      	ldr	r3, [r7, #8]
 80158a8:	681a      	ldr	r2, [r3, #0]
 80158aa:	68bb      	ldr	r3, [r7, #8]
 80158ac:	685b      	ldr	r3, [r3, #4]
 80158ae:	011b      	lsls	r3, r3, #4
 80158b0:	431a      	orrs	r2, r3
 80158b2:	68bb      	ldr	r3, [r7, #8]
 80158b4:	689b      	ldr	r3, [r3, #8]
 80158b6:	021b      	lsls	r3, r3, #8
 80158b8:	431a      	orrs	r2, r3
 80158ba:	68bb      	ldr	r3, [r7, #8]
 80158bc:	691b      	ldr	r3, [r3, #16]
 80158be:	041b      	lsls	r3, r3, #16
 80158c0:	431a      	orrs	r2, r3
 80158c2:	68bb      	ldr	r3, [r7, #8]
 80158c4:	695b      	ldr	r3, [r3, #20]
 80158c6:	3b01      	subs	r3, #1
 80158c8:	051b      	lsls	r3, r3, #20
 80158ca:	431a      	orrs	r2, r3
 80158cc:	68bb      	ldr	r3, [r7, #8]
 80158ce:	699b      	ldr	r3, [r3, #24]
 80158d0:	3b02      	subs	r3, #2
 80158d2:	061b      	lsls	r3, r3, #24
 80158d4:	431a      	orrs	r2, r3
 80158d6:	68bb      	ldr	r3, [r7, #8]
 80158d8:	69db      	ldr	r3, [r3, #28]
 80158da:	4313      	orrs	r3, r2
 80158dc:	687a      	ldr	r2, [r7, #4]
 80158de:	3201      	adds	r2, #1
 80158e0:	4319      	orrs	r1, r3
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	681b      	ldr	r3, [r3, #0]
 80158ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80158f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80158f4:	d113      	bne.n	801591e <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	685b      	ldr	r3, [r3, #4]
 80158fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80158fe:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8015900:	68bb      	ldr	r3, [r7, #8]
 8015902:	695b      	ldr	r3, [r3, #20]
 8015904:	3b01      	subs	r3, #1
 8015906:	051b      	lsls	r3, r3, #20
 8015908:	697a      	ldr	r2, [r7, #20]
 801590a:	4313      	orrs	r3, r2
 801590c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	685b      	ldr	r3, [r3, #4]
 8015912:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8015916:	697b      	ldr	r3, [r7, #20]
 8015918:	431a      	orrs	r2, r3
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 801591e:	2300      	movs	r3, #0
}
 8015920:	4618      	mov	r0, r3
 8015922:	371c      	adds	r7, #28
 8015924:	46bd      	mov	sp, r7
 8015926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801592a:	4770      	bx	lr

0801592c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 801592c:	b480      	push	{r7}
 801592e:	b085      	sub	sp, #20
 8015930:	af00      	add	r7, sp, #0
 8015932:	60f8      	str	r0, [r7, #12]
 8015934:	60b9      	str	r1, [r7, #8]
 8015936:	607a      	str	r2, [r7, #4]
 8015938:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 801593a:	683b      	ldr	r3, [r7, #0]
 801593c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015940:	d11d      	bne.n	801597e <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	687a      	ldr	r2, [r7, #4]
 8015946:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801594a:	4b13      	ldr	r3, [pc, #76]	; (8015998 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 801594c:	4013      	ands	r3, r2
 801594e:	68ba      	ldr	r2, [r7, #8]
 8015950:	6811      	ldr	r1, [r2, #0]
 8015952:	68ba      	ldr	r2, [r7, #8]
 8015954:	6852      	ldr	r2, [r2, #4]
 8015956:	0112      	lsls	r2, r2, #4
 8015958:	4311      	orrs	r1, r2
 801595a:	68ba      	ldr	r2, [r7, #8]
 801595c:	6892      	ldr	r2, [r2, #8]
 801595e:	0212      	lsls	r2, r2, #8
 8015960:	4311      	orrs	r1, r2
 8015962:	68ba      	ldr	r2, [r7, #8]
 8015964:	69d2      	ldr	r2, [r2, #28]
 8015966:	4311      	orrs	r1, r2
 8015968:	68ba      	ldr	r2, [r7, #8]
 801596a:	6912      	ldr	r2, [r2, #16]
 801596c:	0412      	lsls	r2, r2, #16
 801596e:	430a      	orrs	r2, r1
 8015970:	ea43 0102 	orr.w	r1, r3, r2
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	687a      	ldr	r2, [r7, #4]
 8015978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801597c:	e005      	b.n	801598a <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	687a      	ldr	r2, [r7, #4]
 8015982:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8015986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 801598a:	2300      	movs	r3, #0
}
 801598c:	4618      	mov	r0, r3
 801598e:	3714      	adds	r7, #20
 8015990:	46bd      	mov	sp, r7
 8015992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015996:	4770      	bx	lr
 8015998:	cff00000 	.word	0xcff00000

0801599c <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801599c:	b084      	sub	sp, #16
 801599e:	b480      	push	{r7}
 80159a0:	b085      	sub	sp, #20
 80159a2:	af00      	add	r7, sp, #0
 80159a4:	6078      	str	r0, [r7, #4]
 80159a6:	f107 001c 	add.w	r0, r7, #28
 80159aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80159ae:	2300      	movs	r3, #0
 80159b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 80159b2:	6a3b      	ldr	r3, [r7, #32]
 80159b4:	68fa      	ldr	r2, [r7, #12]
 80159b6:	4313      	orrs	r3, r2
 80159b8:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 80159ba:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 80159bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 80159be:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80159c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80159c2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80159c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80159c6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80159c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80159ca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80159cc:	68fa      	ldr	r2, [r7, #12]
 80159ce:	4313      	orrs	r3, r2
 80159d0:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	685b      	ldr	r3, [r3, #4]
 80159d6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80159da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80159de:	68fa      	ldr	r2, [r7, #12]
 80159e0:	431a      	orrs	r2, r3
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80159e6:	2300      	movs	r3, #0
}
 80159e8:	4618      	mov	r0, r3
 80159ea:	3714      	adds	r7, #20
 80159ec:	46bd      	mov	sp, r7
 80159ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f2:	b004      	add	sp, #16
 80159f4:	4770      	bx	lr

080159f6 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80159f6:	b480      	push	{r7}
 80159f8:	b083      	sub	sp, #12
 80159fa:	af00      	add	r7, sp, #0
 80159fc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8015a04:	4618      	mov	r0, r3
 8015a06:	370c      	adds	r7, #12
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a0e:	4770      	bx	lr

08015a10 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8015a10:	b580      	push	{r7, lr}
 8015a12:	b082      	sub	sp, #8
 8015a14:	af00      	add	r7, sp, #0
 8015a16:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	2203      	movs	r2, #3
 8015a1c:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8015a1e:	2002      	movs	r0, #2
 8015a20:	f7f6 f8cc 	bl	800bbbc <HAL_Delay>

  return HAL_OK;
 8015a24:	2300      	movs	r3, #0
}
 8015a26:	4618      	mov	r0, r3
 8015a28:	3708      	adds	r7, #8
 8015a2a:	46bd      	mov	sp, r7
 8015a2c:	bd80      	pop	{r7, pc}

08015a2e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8015a2e:	b480      	push	{r7}
 8015a30:	b083      	sub	sp, #12
 8015a32:	af00      	add	r7, sp, #0
 8015a34:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	f003 0303 	and.w	r3, r3, #3
}
 8015a3e:	4618      	mov	r0, r3
 8015a40:	370c      	adds	r7, #12
 8015a42:	46bd      	mov	sp, r7
 8015a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a48:	4770      	bx	lr

08015a4a <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8015a4a:	b480      	push	{r7}
 8015a4c:	b085      	sub	sp, #20
 8015a4e:	af00      	add	r7, sp, #0
 8015a50:	6078      	str	r0, [r7, #4]
 8015a52:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8015a54:	2300      	movs	r3, #0
 8015a56:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8015a58:	683b      	ldr	r3, [r7, #0]
 8015a5a:	681a      	ldr	r2, [r3, #0]
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8015a60:	683b      	ldr	r3, [r7, #0]
 8015a62:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8015a64:	683b      	ldr	r3, [r7, #0]
 8015a66:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8015a68:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8015a6a:	683b      	ldr	r3, [r7, #0]
 8015a6c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8015a6e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8015a70:	683b      	ldr	r3, [r7, #0]
 8015a72:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8015a74:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8015a76:	68fa      	ldr	r2, [r7, #12]
 8015a78:	4313      	orrs	r3, r2
 8015a7a:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	68db      	ldr	r3, [r3, #12]
 8015a80:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8015a84:	f023 030f 	bic.w	r3, r3, #15
 8015a88:	68fa      	ldr	r2, [r7, #12]
 8015a8a:	431a      	orrs	r2, r3
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8015a90:	2300      	movs	r3, #0
}
 8015a92:	4618      	mov	r0, r3
 8015a94:	3714      	adds	r7, #20
 8015a96:	46bd      	mov	sp, r7
 8015a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a9c:	4770      	bx	lr

08015a9e <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8015a9e:	b480      	push	{r7}
 8015aa0:	b083      	sub	sp, #12
 8015aa2:	af00      	add	r7, sp, #0
 8015aa4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	691b      	ldr	r3, [r3, #16]
 8015aaa:	b2db      	uxtb	r3, r3
}
 8015aac:	4618      	mov	r0, r3
 8015aae:	370c      	adds	r7, #12
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ab6:	4770      	bx	lr

08015ab8 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8015ab8:	b480      	push	{r7}
 8015aba:	b085      	sub	sp, #20
 8015abc:	af00      	add	r7, sp, #0
 8015abe:	6078      	str	r0, [r7, #4]
 8015ac0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	3314      	adds	r3, #20
 8015ac6:	461a      	mov	r2, r3
 8015ac8:	683b      	ldr	r3, [r7, #0]
 8015aca:	4413      	add	r3, r2
 8015acc:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	681b      	ldr	r3, [r3, #0]
}
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	3714      	adds	r7, #20
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015adc:	4770      	bx	lr

08015ade <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8015ade:	b480      	push	{r7}
 8015ae0:	b085      	sub	sp, #20
 8015ae2:	af00      	add	r7, sp, #0
 8015ae4:	6078      	str	r0, [r7, #4]
 8015ae6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8015ae8:	2300      	movs	r3, #0
 8015aea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8015aec:	683b      	ldr	r3, [r7, #0]
 8015aee:	681a      	ldr	r2, [r3, #0]
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8015af4:	683b      	ldr	r3, [r7, #0]
 8015af6:	685a      	ldr	r2, [r3, #4]
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8015afc:	683b      	ldr	r3, [r7, #0]
 8015afe:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8015b00:	683b      	ldr	r3, [r7, #0]
 8015b02:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8015b04:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8015b06:	683b      	ldr	r3, [r7, #0]
 8015b08:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8015b0a:	431a      	orrs	r2, r3
                       Data->DPSM);
 8015b0c:	683b      	ldr	r3, [r7, #0]
 8015b0e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8015b10:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8015b12:	68fa      	ldr	r2, [r7, #12]
 8015b14:	4313      	orrs	r3, r2
 8015b16:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b1c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8015b20:	68fb      	ldr	r3, [r7, #12]
 8015b22:	431a      	orrs	r2, r3
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8015b28:	2300      	movs	r3, #0

}
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	3714      	adds	r7, #20
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b34:	4770      	bx	lr

08015b36 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8015b36:	b580      	push	{r7, lr}
 8015b38:	b088      	sub	sp, #32
 8015b3a:	af00      	add	r7, sp, #0
 8015b3c:	6078      	str	r0, [r7, #4]
 8015b3e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8015b40:	683b      	ldr	r3, [r7, #0]
 8015b42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8015b44:	2310      	movs	r3, #16
 8015b46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015b48:	2340      	movs	r3, #64	; 0x40
 8015b4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015b4c:	2300      	movs	r3, #0
 8015b4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015b54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015b56:	f107 0308 	add.w	r3, r7, #8
 8015b5a:	4619      	mov	r1, r3
 8015b5c:	6878      	ldr	r0, [r7, #4]
 8015b5e:	f7ff ff74 	bl	8015a4a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8015b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8015b66:	2110      	movs	r1, #16
 8015b68:	6878      	ldr	r0, [r7, #4]
 8015b6a:	f000 f94d 	bl	8015e08 <SDMMC_GetCmdResp1>
 8015b6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015b70:	69fb      	ldr	r3, [r7, #28]
}
 8015b72:	4618      	mov	r0, r3
 8015b74:	3720      	adds	r7, #32
 8015b76:	46bd      	mov	sp, r7
 8015b78:	bd80      	pop	{r7, pc}

08015b7a <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8015b7a:	b580      	push	{r7, lr}
 8015b7c:	b08a      	sub	sp, #40	; 0x28
 8015b7e:	af00      	add	r7, sp, #0
 8015b80:	60f8      	str	r0, [r7, #12]
 8015b82:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8015b86:	683b      	ldr	r3, [r7, #0]
 8015b88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8015b8a:	2307      	movs	r3, #7
 8015b8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015b8e:	2340      	movs	r3, #64	; 0x40
 8015b90:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015b92:	2300      	movs	r3, #0
 8015b94:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015b9a:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015b9c:	f107 0310 	add.w	r3, r7, #16
 8015ba0:	4619      	mov	r1, r3
 8015ba2:	68f8      	ldr	r0, [r7, #12]
 8015ba4:	f7ff ff51 	bl	8015a4a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8015ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8015bac:	2107      	movs	r1, #7
 8015bae:	68f8      	ldr	r0, [r7, #12]
 8015bb0:	f000 f92a 	bl	8015e08 <SDMMC_GetCmdResp1>
 8015bb4:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8015bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015bb8:	4618      	mov	r0, r3
 8015bba:	3728      	adds	r7, #40	; 0x28
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	bd80      	pop	{r7, pc}

08015bc0 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8015bc0:	b580      	push	{r7, lr}
 8015bc2:	b088      	sub	sp, #32
 8015bc4:	af00      	add	r7, sp, #0
 8015bc6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8015bc8:	2300      	movs	r3, #0
 8015bca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8015bcc:	2300      	movs	r3, #0
 8015bce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015bd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015bdc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015bde:	f107 0308 	add.w	r3, r7, #8
 8015be2:	4619      	mov	r1, r3
 8015be4:	6878      	ldr	r0, [r7, #4]
 8015be6:	f7ff ff30 	bl	8015a4a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8015bea:	6878      	ldr	r0, [r7, #4]
 8015bec:	f000 fb44 	bl	8016278 <SDMMC_GetCmdError>
 8015bf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015bf2:	69fb      	ldr	r3, [r7, #28]
}
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	3720      	adds	r7, #32
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	bd80      	pop	{r7, pc}

08015bfc <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8015bfc:	b580      	push	{r7, lr}
 8015bfe:	b088      	sub	sp, #32
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8015c04:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8015c08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8015c0a:	2308      	movs	r3, #8
 8015c0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015c0e:	2340      	movs	r3, #64	; 0x40
 8015c10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015c12:	2300      	movs	r3, #0
 8015c14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015c1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015c1c:	f107 0308 	add.w	r3, r7, #8
 8015c20:	4619      	mov	r1, r3
 8015c22:	6878      	ldr	r0, [r7, #4]
 8015c24:	f7ff ff11 	bl	8015a4a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8015c28:	6878      	ldr	r0, [r7, #4]
 8015c2a:	f000 fad7 	bl	80161dc <SDMMC_GetCmdResp7>
 8015c2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015c30:	69fb      	ldr	r3, [r7, #28]
}
 8015c32:	4618      	mov	r0, r3
 8015c34:	3720      	adds	r7, #32
 8015c36:	46bd      	mov	sp, r7
 8015c38:	bd80      	pop	{r7, pc}

08015c3a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8015c3a:	b580      	push	{r7, lr}
 8015c3c:	b088      	sub	sp, #32
 8015c3e:	af00      	add	r7, sp, #0
 8015c40:	6078      	str	r0, [r7, #4]
 8015c42:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8015c44:	683b      	ldr	r3, [r7, #0]
 8015c46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8015c48:	2337      	movs	r3, #55	; 0x37
 8015c4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015c4c:	2340      	movs	r3, #64	; 0x40
 8015c4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015c50:	2300      	movs	r3, #0
 8015c52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015c58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015c5a:	f107 0308 	add.w	r3, r7, #8
 8015c5e:	4619      	mov	r1, r3
 8015c60:	6878      	ldr	r0, [r7, #4]
 8015c62:	f7ff fef2 	bl	8015a4a <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8015c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8015c6a:	2137      	movs	r1, #55	; 0x37
 8015c6c:	6878      	ldr	r0, [r7, #4]
 8015c6e:	f000 f8cb 	bl	8015e08 <SDMMC_GetCmdResp1>
 8015c72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015c74:	69fb      	ldr	r3, [r7, #28]
}
 8015c76:	4618      	mov	r0, r3
 8015c78:	3720      	adds	r7, #32
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	bd80      	pop	{r7, pc}

08015c7e <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8015c7e:	b580      	push	{r7, lr}
 8015c80:	b088      	sub	sp, #32
 8015c82:	af00      	add	r7, sp, #0
 8015c84:	6078      	str	r0, [r7, #4]
 8015c86:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8015c88:	683b      	ldr	r3, [r7, #0]
 8015c8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8015c8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015c92:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8015c94:	2329      	movs	r3, #41	; 0x29
 8015c96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015c98:	2340      	movs	r3, #64	; 0x40
 8015c9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015ca4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015ca6:	f107 0308 	add.w	r3, r7, #8
 8015caa:	4619      	mov	r1, r3
 8015cac:	6878      	ldr	r0, [r7, #4]
 8015cae:	f7ff fecc 	bl	8015a4a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8015cb2:	6878      	ldr	r0, [r7, #4]
 8015cb4:	f000 f9de 	bl	8016074 <SDMMC_GetCmdResp3>
 8015cb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015cba:	69fb      	ldr	r3, [r7, #28]
}
 8015cbc:	4618      	mov	r0, r3
 8015cbe:	3720      	adds	r7, #32
 8015cc0:	46bd      	mov	sp, r7
 8015cc2:	bd80      	pop	{r7, pc}

08015cc4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b088      	sub	sp, #32
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
 8015ccc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8015cce:	683b      	ldr	r3, [r7, #0]
 8015cd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8015cd2:	2306      	movs	r3, #6
 8015cd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015cd6:	2340      	movs	r3, #64	; 0x40
 8015cd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015cda:	2300      	movs	r3, #0
 8015cdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015ce2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015ce4:	f107 0308 	add.w	r3, r7, #8
 8015ce8:	4619      	mov	r1, r3
 8015cea:	6878      	ldr	r0, [r7, #4]
 8015cec:	f7ff fead 	bl	8015a4a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8015cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8015cf4:	2106      	movs	r1, #6
 8015cf6:	6878      	ldr	r0, [r7, #4]
 8015cf8:	f000 f886 	bl	8015e08 <SDMMC_GetCmdResp1>
 8015cfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015cfe:	69fb      	ldr	r3, [r7, #28]
}
 8015d00:	4618      	mov	r0, r3
 8015d02:	3720      	adds	r7, #32
 8015d04:	46bd      	mov	sp, r7
 8015d06:	bd80      	pop	{r7, pc}

08015d08 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b088      	sub	sp, #32
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8015d10:	2300      	movs	r3, #0
 8015d12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8015d14:	2333      	movs	r3, #51	; 0x33
 8015d16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015d18:	2340      	movs	r3, #64	; 0x40
 8015d1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015d24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015d26:	f107 0308 	add.w	r3, r7, #8
 8015d2a:	4619      	mov	r1, r3
 8015d2c:	6878      	ldr	r0, [r7, #4]
 8015d2e:	f7ff fe8c 	bl	8015a4a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8015d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8015d36:	2133      	movs	r1, #51	; 0x33
 8015d38:	6878      	ldr	r0, [r7, #4]
 8015d3a:	f000 f865 	bl	8015e08 <SDMMC_GetCmdResp1>
 8015d3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015d40:	69fb      	ldr	r3, [r7, #28]
}
 8015d42:	4618      	mov	r0, r3
 8015d44:	3720      	adds	r7, #32
 8015d46:	46bd      	mov	sp, r7
 8015d48:	bd80      	pop	{r7, pc}

08015d4a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8015d4a:	b580      	push	{r7, lr}
 8015d4c:	b088      	sub	sp, #32
 8015d4e:	af00      	add	r7, sp, #0
 8015d50:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8015d52:	2300      	movs	r3, #0
 8015d54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8015d56:	2302      	movs	r3, #2
 8015d58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8015d5a:	23c0      	movs	r3, #192	; 0xc0
 8015d5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015d5e:	2300      	movs	r3, #0
 8015d60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015d66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015d68:	f107 0308 	add.w	r3, r7, #8
 8015d6c:	4619      	mov	r1, r3
 8015d6e:	6878      	ldr	r0, [r7, #4]
 8015d70:	f7ff fe6b 	bl	8015a4a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8015d74:	6878      	ldr	r0, [r7, #4]
 8015d76:	f000 f935 	bl	8015fe4 <SDMMC_GetCmdResp2>
 8015d7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015d7c:	69fb      	ldr	r3, [r7, #28]
}
 8015d7e:	4618      	mov	r0, r3
 8015d80:	3720      	adds	r7, #32
 8015d82:	46bd      	mov	sp, r7
 8015d84:	bd80      	pop	{r7, pc}

08015d86 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8015d86:	b580      	push	{r7, lr}
 8015d88:	b088      	sub	sp, #32
 8015d8a:	af00      	add	r7, sp, #0
 8015d8c:	6078      	str	r0, [r7, #4]
 8015d8e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8015d90:	683b      	ldr	r3, [r7, #0]
 8015d92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8015d94:	2309      	movs	r3, #9
 8015d96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8015d98:	23c0      	movs	r3, #192	; 0xc0
 8015d9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015da4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015da6:	f107 0308 	add.w	r3, r7, #8
 8015daa:	4619      	mov	r1, r3
 8015dac:	6878      	ldr	r0, [r7, #4]
 8015dae:	f7ff fe4c 	bl	8015a4a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8015db2:	6878      	ldr	r0, [r7, #4]
 8015db4:	f000 f916 	bl	8015fe4 <SDMMC_GetCmdResp2>
 8015db8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015dba:	69fb      	ldr	r3, [r7, #28]
}
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	3720      	adds	r7, #32
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	bd80      	pop	{r7, pc}

08015dc4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8015dc4:	b580      	push	{r7, lr}
 8015dc6:	b088      	sub	sp, #32
 8015dc8:	af00      	add	r7, sp, #0
 8015dca:	6078      	str	r0, [r7, #4]
 8015dcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8015dce:	2300      	movs	r3, #0
 8015dd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8015dd2:	2303      	movs	r3, #3
 8015dd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8015dd6:	2340      	movs	r3, #64	; 0x40
 8015dd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8015dda:	2300      	movs	r3, #0
 8015ddc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8015dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015de2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8015de4:	f107 0308 	add.w	r3, r7, #8
 8015de8:	4619      	mov	r1, r3
 8015dea:	6878      	ldr	r0, [r7, #4]
 8015dec:	f7ff fe2d 	bl	8015a4a <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8015df0:	683a      	ldr	r2, [r7, #0]
 8015df2:	2103      	movs	r1, #3
 8015df4:	6878      	ldr	r0, [r7, #4]
 8015df6:	f000 f97b 	bl	80160f0 <SDMMC_GetCmdResp6>
 8015dfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8015dfc:	69fb      	ldr	r3, [r7, #28]
}
 8015dfe:	4618      	mov	r0, r3
 8015e00:	3720      	adds	r7, #32
 8015e02:	46bd      	mov	sp, r7
 8015e04:	bd80      	pop	{r7, pc}
	...

08015e08 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b088      	sub	sp, #32
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	60f8      	str	r0, [r7, #12]
 8015e10:	460b      	mov	r3, r1
 8015e12:	607a      	str	r2, [r7, #4]
 8015e14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8015e16:	4b70      	ldr	r3, [pc, #448]	; (8015fd8 <SDMMC_GetCmdResp1+0x1d0>)
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	4a70      	ldr	r2, [pc, #448]	; (8015fdc <SDMMC_GetCmdResp1+0x1d4>)
 8015e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8015e20:	0a5a      	lsrs	r2, r3, #9
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	fb02 f303 	mul.w	r3, r2, r3
 8015e28:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8015e2a:	69fb      	ldr	r3, [r7, #28]
 8015e2c:	1e5a      	subs	r2, r3, #1
 8015e2e:	61fa      	str	r2, [r7, #28]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d102      	bne.n	8015e3a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8015e34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8015e38:	e0c9      	b.n	8015fce <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8015e3a:	68fb      	ldr	r3, [r7, #12]
 8015e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e3e:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8015e40:	69bb      	ldr	r3, [r7, #24]
 8015e42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d0ef      	beq.n	8015e2a <SDMMC_GetCmdResp1+0x22>
 8015e4a:	69bb      	ldr	r3, [r7, #24]
 8015e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d1ea      	bne.n	8015e2a <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e58:	f003 0304 	and.w	r3, r3, #4
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d004      	beq.n	8015e6a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	2204      	movs	r2, #4
 8015e64:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8015e66:	2304      	movs	r3, #4
 8015e68:	e0b1      	b.n	8015fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e6e:	f003 0301 	and.w	r3, r3, #1
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d004      	beq.n	8015e80 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	2201      	movs	r2, #1
 8015e7a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015e7c:	2301      	movs	r3, #1
 8015e7e:	e0a6      	b.n	8015fce <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	22c5      	movs	r2, #197	; 0xc5
 8015e84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8015e86:	68f8      	ldr	r0, [r7, #12]
 8015e88:	f7ff fe09 	bl	8015a9e <SDMMC_GetCommandResponse>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	461a      	mov	r2, r3
 8015e90:	7afb      	ldrb	r3, [r7, #11]
 8015e92:	4293      	cmp	r3, r2
 8015e94:	d001      	beq.n	8015e9a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8015e96:	2301      	movs	r3, #1
 8015e98:	e099      	b.n	8015fce <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8015e9a:	2100      	movs	r1, #0
 8015e9c:	68f8      	ldr	r0, [r7, #12]
 8015e9e:	f7ff fe0b 	bl	8015ab8 <SDMMC_GetResponse>
 8015ea2:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8015ea4:	697a      	ldr	r2, [r7, #20]
 8015ea6:	4b4e      	ldr	r3, [pc, #312]	; (8015fe0 <SDMMC_GetCmdResp1+0x1d8>)
 8015ea8:	4013      	ands	r3, r2
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d101      	bne.n	8015eb2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8015eae:	2300      	movs	r3, #0
 8015eb0:	e08d      	b.n	8015fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8015eb2:	697b      	ldr	r3, [r7, #20]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	da02      	bge.n	8015ebe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8015eb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8015ebc:	e087      	b.n	8015fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8015ebe:	697b      	ldr	r3, [r7, #20]
 8015ec0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d001      	beq.n	8015ecc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8015ec8:	2340      	movs	r3, #64	; 0x40
 8015eca:	e080      	b.n	8015fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8015ecc:	697b      	ldr	r3, [r7, #20]
 8015ece:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d001      	beq.n	8015eda <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8015ed6:	2380      	movs	r3, #128	; 0x80
 8015ed8:	e079      	b.n	8015fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8015eda:	697b      	ldr	r3, [r7, #20]
 8015edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d002      	beq.n	8015eea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8015ee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015ee8:	e071      	b.n	8015fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8015eea:	697b      	ldr	r3, [r7, #20]
 8015eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d002      	beq.n	8015efa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8015ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015ef8:	e069      	b.n	8015fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8015efa:	697b      	ldr	r3, [r7, #20]
 8015efc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d002      	beq.n	8015f0a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8015f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015f08:	e061      	b.n	8015fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8015f0a:	697b      	ldr	r3, [r7, #20]
 8015f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d002      	beq.n	8015f1a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8015f14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015f18:	e059      	b.n	8015fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8015f1a:	697b      	ldr	r3, [r7, #20]
 8015f1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d002      	beq.n	8015f2a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8015f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015f28:	e051      	b.n	8015fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8015f2a:	697b      	ldr	r3, [r7, #20]
 8015f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d002      	beq.n	8015f3a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8015f34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015f38:	e049      	b.n	8015fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8015f3a:	697b      	ldr	r3, [r7, #20]
 8015f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d002      	beq.n	8015f4a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8015f44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8015f48:	e041      	b.n	8015fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8015f4a:	697b      	ldr	r3, [r7, #20]
 8015f4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d002      	beq.n	8015f5a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8015f54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015f58:	e039      	b.n	8015fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8015f5a:	697b      	ldr	r3, [r7, #20]
 8015f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d002      	beq.n	8015f6a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8015f64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8015f68:	e031      	b.n	8015fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8015f6a:	697b      	ldr	r3, [r7, #20]
 8015f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d002      	beq.n	8015f7a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8015f74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8015f78:	e029      	b.n	8015fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8015f7a:	697b      	ldr	r3, [r7, #20]
 8015f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d002      	beq.n	8015f8a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8015f84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015f88:	e021      	b.n	8015fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8015f8a:	697b      	ldr	r3, [r7, #20]
 8015f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d002      	beq.n	8015f9a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8015f94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8015f98:	e019      	b.n	8015fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8015f9a:	697b      	ldr	r3, [r7, #20]
 8015f9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d002      	beq.n	8015faa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8015fa4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8015fa8:	e011      	b.n	8015fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8015faa:	697b      	ldr	r3, [r7, #20]
 8015fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d002      	beq.n	8015fba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8015fb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8015fb8:	e009      	b.n	8015fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8015fba:	697b      	ldr	r3, [r7, #20]
 8015fbc:	f003 0308 	and.w	r3, r3, #8
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d002      	beq.n	8015fca <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8015fc4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8015fc8:	e001      	b.n	8015fce <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8015fca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	3720      	adds	r7, #32
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}
 8015fd6:	bf00      	nop
 8015fd8:	20000194 	.word	0x20000194
 8015fdc:	10624dd3 	.word	0x10624dd3
 8015fe0:	fdffe008 	.word	0xfdffe008

08015fe4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8015fe4:	b480      	push	{r7}
 8015fe6:	b085      	sub	sp, #20
 8015fe8:	af00      	add	r7, sp, #0
 8015fea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8015fec:	4b1f      	ldr	r3, [pc, #124]	; (801606c <SDMMC_GetCmdResp2+0x88>)
 8015fee:	681b      	ldr	r3, [r3, #0]
 8015ff0:	4a1f      	ldr	r2, [pc, #124]	; (8016070 <SDMMC_GetCmdResp2+0x8c>)
 8015ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8015ff6:	0a5b      	lsrs	r3, r3, #9
 8015ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8015ffc:	fb02 f303 	mul.w	r3, r2, r3
 8016000:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	1e5a      	subs	r2, r3, #1
 8016006:	60fa      	str	r2, [r7, #12]
 8016008:	2b00      	cmp	r3, #0
 801600a:	d102      	bne.n	8016012 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801600c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016010:	e026      	b.n	8016060 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016016:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016018:	68bb      	ldr	r3, [r7, #8]
 801601a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801601e:	2b00      	cmp	r3, #0
 8016020:	d0ef      	beq.n	8016002 <SDMMC_GetCmdResp2+0x1e>
 8016022:	68bb      	ldr	r3, [r7, #8]
 8016024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016028:	2b00      	cmp	r3, #0
 801602a:	d1ea      	bne.n	8016002 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016030:	f003 0304 	and.w	r3, r3, #4
 8016034:	2b00      	cmp	r3, #0
 8016036:	d004      	beq.n	8016042 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	2204      	movs	r2, #4
 801603c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801603e:	2304      	movs	r3, #4
 8016040:	e00e      	b.n	8016060 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016046:	f003 0301 	and.w	r3, r3, #1
 801604a:	2b00      	cmp	r3, #0
 801604c:	d004      	beq.n	8016058 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	2201      	movs	r2, #1
 8016052:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016054:	2301      	movs	r3, #1
 8016056:	e003      	b.n	8016060 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	22c5      	movs	r2, #197	; 0xc5
 801605c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801605e:	2300      	movs	r3, #0
}
 8016060:	4618      	mov	r0, r3
 8016062:	3714      	adds	r7, #20
 8016064:	46bd      	mov	sp, r7
 8016066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801606a:	4770      	bx	lr
 801606c:	20000194 	.word	0x20000194
 8016070:	10624dd3 	.word	0x10624dd3

08016074 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8016074:	b480      	push	{r7}
 8016076:	b085      	sub	sp, #20
 8016078:	af00      	add	r7, sp, #0
 801607a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801607c:	4b1a      	ldr	r3, [pc, #104]	; (80160e8 <SDMMC_GetCmdResp3+0x74>)
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	4a1a      	ldr	r2, [pc, #104]	; (80160ec <SDMMC_GetCmdResp3+0x78>)
 8016082:	fba2 2303 	umull	r2, r3, r2, r3
 8016086:	0a5b      	lsrs	r3, r3, #9
 8016088:	f241 3288 	movw	r2, #5000	; 0x1388
 801608c:	fb02 f303 	mul.w	r3, r2, r3
 8016090:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	1e5a      	subs	r2, r3, #1
 8016096:	60fa      	str	r2, [r7, #12]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d102      	bne.n	80160a2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801609c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80160a0:	e01b      	b.n	80160da <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80160a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80160a8:	68bb      	ldr	r3, [r7, #8]
 80160aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d0ef      	beq.n	8016092 <SDMMC_GetCmdResp3+0x1e>
 80160b2:	68bb      	ldr	r3, [r7, #8]
 80160b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d1ea      	bne.n	8016092 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80160c0:	f003 0304 	and.w	r3, r3, #4
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d004      	beq.n	80160d2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	2204      	movs	r2, #4
 80160cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80160ce:	2304      	movs	r3, #4
 80160d0:	e003      	b.n	80160da <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	22c5      	movs	r2, #197	; 0xc5
 80160d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80160d8:	2300      	movs	r3, #0
}
 80160da:	4618      	mov	r0, r3
 80160dc:	3714      	adds	r7, #20
 80160de:	46bd      	mov	sp, r7
 80160e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e4:	4770      	bx	lr
 80160e6:	bf00      	nop
 80160e8:	20000194 	.word	0x20000194
 80160ec:	10624dd3 	.word	0x10624dd3

080160f0 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80160f0:	b580      	push	{r7, lr}
 80160f2:	b088      	sub	sp, #32
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	60f8      	str	r0, [r7, #12]
 80160f8:	460b      	mov	r3, r1
 80160fa:	607a      	str	r2, [r7, #4]
 80160fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80160fe:	4b35      	ldr	r3, [pc, #212]	; (80161d4 <SDMMC_GetCmdResp6+0xe4>)
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	4a35      	ldr	r2, [pc, #212]	; (80161d8 <SDMMC_GetCmdResp6+0xe8>)
 8016104:	fba2 2303 	umull	r2, r3, r2, r3
 8016108:	0a5b      	lsrs	r3, r3, #9
 801610a:	f241 3288 	movw	r2, #5000	; 0x1388
 801610e:	fb02 f303 	mul.w	r3, r2, r3
 8016112:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8016114:	69fb      	ldr	r3, [r7, #28]
 8016116:	1e5a      	subs	r2, r3, #1
 8016118:	61fa      	str	r2, [r7, #28]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d102      	bne.n	8016124 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801611e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016122:	e052      	b.n	80161ca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016128:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801612a:	69bb      	ldr	r3, [r7, #24]
 801612c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016130:	2b00      	cmp	r3, #0
 8016132:	d0ef      	beq.n	8016114 <SDMMC_GetCmdResp6+0x24>
 8016134:	69bb      	ldr	r3, [r7, #24]
 8016136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801613a:	2b00      	cmp	r3, #0
 801613c:	d1ea      	bne.n	8016114 <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801613e:	68fb      	ldr	r3, [r7, #12]
 8016140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016142:	f003 0304 	and.w	r3, r3, #4
 8016146:	2b00      	cmp	r3, #0
 8016148:	d004      	beq.n	8016154 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	2204      	movs	r2, #4
 801614e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016150:	2304      	movs	r3, #4
 8016152:	e03a      	b.n	80161ca <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016158:	f003 0301 	and.w	r3, r3, #1
 801615c:	2b00      	cmp	r3, #0
 801615e:	d004      	beq.n	801616a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	2201      	movs	r2, #1
 8016164:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016166:	2301      	movs	r3, #1
 8016168:	e02f      	b.n	80161ca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801616a:	68f8      	ldr	r0, [r7, #12]
 801616c:	f7ff fc97 	bl	8015a9e <SDMMC_GetCommandResponse>
 8016170:	4603      	mov	r3, r0
 8016172:	461a      	mov	r2, r3
 8016174:	7afb      	ldrb	r3, [r7, #11]
 8016176:	4293      	cmp	r3, r2
 8016178:	d001      	beq.n	801617e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801617a:	2301      	movs	r3, #1
 801617c:	e025      	b.n	80161ca <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	22c5      	movs	r2, #197	; 0xc5
 8016182:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8016184:	2100      	movs	r1, #0
 8016186:	68f8      	ldr	r0, [r7, #12]
 8016188:	f7ff fc96 	bl	8015ab8 <SDMMC_GetResponse>
 801618c:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801618e:	697b      	ldr	r3, [r7, #20]
 8016190:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8016194:	2b00      	cmp	r3, #0
 8016196:	d106      	bne.n	80161a6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8016198:	697b      	ldr	r3, [r7, #20]
 801619a:	0c1b      	lsrs	r3, r3, #16
 801619c:	b29a      	uxth	r2, r3
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80161a2:	2300      	movs	r3, #0
 80161a4:	e011      	b.n	80161ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80161a6:	697b      	ldr	r3, [r7, #20]
 80161a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d002      	beq.n	80161b6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80161b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80161b4:	e009      	b.n	80161ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80161b6:	697b      	ldr	r3, [r7, #20]
 80161b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d002      	beq.n	80161c6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80161c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80161c4:	e001      	b.n	80161ca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80161c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80161ca:	4618      	mov	r0, r3
 80161cc:	3720      	adds	r7, #32
 80161ce:	46bd      	mov	sp, r7
 80161d0:	bd80      	pop	{r7, pc}
 80161d2:	bf00      	nop
 80161d4:	20000194 	.word	0x20000194
 80161d8:	10624dd3 	.word	0x10624dd3

080161dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80161dc:	b480      	push	{r7}
 80161de:	b085      	sub	sp, #20
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80161e4:	4b22      	ldr	r3, [pc, #136]	; (8016270 <SDMMC_GetCmdResp7+0x94>)
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	4a22      	ldr	r2, [pc, #136]	; (8016274 <SDMMC_GetCmdResp7+0x98>)
 80161ea:	fba2 2303 	umull	r2, r3, r2, r3
 80161ee:	0a5b      	lsrs	r3, r3, #9
 80161f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80161f4:	fb02 f303 	mul.w	r3, r2, r3
 80161f8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	1e5a      	subs	r2, r3, #1
 80161fe:	60fa      	str	r2, [r7, #12]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d102      	bne.n	801620a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8016204:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016208:	e02c      	b.n	8016264 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801620e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016210:	68bb      	ldr	r3, [r7, #8]
 8016212:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8016216:	2b00      	cmp	r3, #0
 8016218:	d0ef      	beq.n	80161fa <SDMMC_GetCmdResp7+0x1e>
 801621a:	68bb      	ldr	r3, [r7, #8]
 801621c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8016220:	2b00      	cmp	r3, #0
 8016222:	d1ea      	bne.n	80161fa <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016228:	f003 0304 	and.w	r3, r3, #4
 801622c:	2b00      	cmp	r3, #0
 801622e:	d004      	beq.n	801623a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	2204      	movs	r2, #4
 8016234:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016236:	2304      	movs	r3, #4
 8016238:	e014      	b.n	8016264 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801623e:	f003 0301 	and.w	r3, r3, #1
 8016242:	2b00      	cmp	r3, #0
 8016244:	d004      	beq.n	8016250 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	2201      	movs	r2, #1
 801624a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801624c:	2301      	movs	r3, #1
 801624e:	e009      	b.n	8016264 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016258:	2b00      	cmp	r3, #0
 801625a:	d002      	beq.n	8016262 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	2240      	movs	r2, #64	; 0x40
 8016260:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8016262:	2300      	movs	r3, #0

}
 8016264:	4618      	mov	r0, r3
 8016266:	3714      	adds	r7, #20
 8016268:	46bd      	mov	sp, r7
 801626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801626e:	4770      	bx	lr
 8016270:	20000194 	.word	0x20000194
 8016274:	10624dd3 	.word	0x10624dd3

08016278 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8016278:	b480      	push	{r7}
 801627a:	b085      	sub	sp, #20
 801627c:	af00      	add	r7, sp, #0
 801627e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8016280:	4b11      	ldr	r3, [pc, #68]	; (80162c8 <SDMMC_GetCmdError+0x50>)
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	4a11      	ldr	r2, [pc, #68]	; (80162cc <SDMMC_GetCmdError+0x54>)
 8016286:	fba2 2303 	umull	r2, r3, r2, r3
 801628a:	0a5b      	lsrs	r3, r3, #9
 801628c:	f241 3288 	movw	r2, #5000	; 0x1388
 8016290:	fb02 f303 	mul.w	r3, r2, r3
 8016294:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	1e5a      	subs	r2, r3, #1
 801629a:	60fa      	str	r2, [r7, #12]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d102      	bne.n	80162a6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80162a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80162a4:	e009      	b.n	80162ba <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80162aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d0f1      	beq.n	8016296 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	22c5      	movs	r2, #197	; 0xc5
 80162b6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80162b8:	2300      	movs	r3, #0
}
 80162ba:	4618      	mov	r0, r3
 80162bc:	3714      	adds	r7, #20
 80162be:	46bd      	mov	sp, r7
 80162c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162c4:	4770      	bx	lr
 80162c6:	bf00      	nop
 80162c8:	20000194 	.word	0x20000194
 80162cc:	10624dd3 	.word	0x10624dd3

080162d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80162d0:	b084      	sub	sp, #16
 80162d2:	b580      	push	{r7, lr}
 80162d4:	b084      	sub	sp, #16
 80162d6:	af00      	add	r7, sp, #0
 80162d8:	6078      	str	r0, [r7, #4]
 80162da:	f107 001c 	add.w	r0, r7, #28
 80162de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	68db      	ldr	r3, [r3, #12]
 80162e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80162ee:	6878      	ldr	r0, [r7, #4]
 80162f0:	f001 faf6 	bl	80178e0 <USB_CoreReset>
 80162f4:	4603      	mov	r3, r0
 80162f6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80162f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d106      	bne.n	801630c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016302:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	639a      	str	r2, [r3, #56]	; 0x38
 801630a:	e005      	b.n	8016318 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016310:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8016318:	7bfb      	ldrb	r3, [r7, #15]
}
 801631a:	4618      	mov	r0, r3
 801631c:	3710      	adds	r7, #16
 801631e:	46bd      	mov	sp, r7
 8016320:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016324:	b004      	add	sp, #16
 8016326:	4770      	bx	lr

08016328 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8016328:	b480      	push	{r7}
 801632a:	b087      	sub	sp, #28
 801632c:	af00      	add	r7, sp, #0
 801632e:	60f8      	str	r0, [r7, #12]
 8016330:	60b9      	str	r1, [r7, #8]
 8016332:	4613      	mov	r3, r2
 8016334:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8016336:	79fb      	ldrb	r3, [r7, #7]
 8016338:	2b02      	cmp	r3, #2
 801633a:	d165      	bne.n	8016408 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801633c:	68bb      	ldr	r3, [r7, #8]
 801633e:	4a3e      	ldr	r2, [pc, #248]	; (8016438 <USB_SetTurnaroundTime+0x110>)
 8016340:	4293      	cmp	r3, r2
 8016342:	d906      	bls.n	8016352 <USB_SetTurnaroundTime+0x2a>
 8016344:	68bb      	ldr	r3, [r7, #8]
 8016346:	4a3d      	ldr	r2, [pc, #244]	; (801643c <USB_SetTurnaroundTime+0x114>)
 8016348:	4293      	cmp	r3, r2
 801634a:	d202      	bcs.n	8016352 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801634c:	230f      	movs	r3, #15
 801634e:	617b      	str	r3, [r7, #20]
 8016350:	e05c      	b.n	801640c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8016352:	68bb      	ldr	r3, [r7, #8]
 8016354:	4a39      	ldr	r2, [pc, #228]	; (801643c <USB_SetTurnaroundTime+0x114>)
 8016356:	4293      	cmp	r3, r2
 8016358:	d306      	bcc.n	8016368 <USB_SetTurnaroundTime+0x40>
 801635a:	68bb      	ldr	r3, [r7, #8]
 801635c:	4a38      	ldr	r2, [pc, #224]	; (8016440 <USB_SetTurnaroundTime+0x118>)
 801635e:	4293      	cmp	r3, r2
 8016360:	d202      	bcs.n	8016368 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8016362:	230e      	movs	r3, #14
 8016364:	617b      	str	r3, [r7, #20]
 8016366:	e051      	b.n	801640c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8016368:	68bb      	ldr	r3, [r7, #8]
 801636a:	4a35      	ldr	r2, [pc, #212]	; (8016440 <USB_SetTurnaroundTime+0x118>)
 801636c:	4293      	cmp	r3, r2
 801636e:	d306      	bcc.n	801637e <USB_SetTurnaroundTime+0x56>
 8016370:	68bb      	ldr	r3, [r7, #8]
 8016372:	4a34      	ldr	r2, [pc, #208]	; (8016444 <USB_SetTurnaroundTime+0x11c>)
 8016374:	4293      	cmp	r3, r2
 8016376:	d202      	bcs.n	801637e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8016378:	230d      	movs	r3, #13
 801637a:	617b      	str	r3, [r7, #20]
 801637c:	e046      	b.n	801640c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801637e:	68bb      	ldr	r3, [r7, #8]
 8016380:	4a30      	ldr	r2, [pc, #192]	; (8016444 <USB_SetTurnaroundTime+0x11c>)
 8016382:	4293      	cmp	r3, r2
 8016384:	d306      	bcc.n	8016394 <USB_SetTurnaroundTime+0x6c>
 8016386:	68bb      	ldr	r3, [r7, #8]
 8016388:	4a2f      	ldr	r2, [pc, #188]	; (8016448 <USB_SetTurnaroundTime+0x120>)
 801638a:	4293      	cmp	r3, r2
 801638c:	d802      	bhi.n	8016394 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801638e:	230c      	movs	r3, #12
 8016390:	617b      	str	r3, [r7, #20]
 8016392:	e03b      	b.n	801640c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8016394:	68bb      	ldr	r3, [r7, #8]
 8016396:	4a2c      	ldr	r2, [pc, #176]	; (8016448 <USB_SetTurnaroundTime+0x120>)
 8016398:	4293      	cmp	r3, r2
 801639a:	d906      	bls.n	80163aa <USB_SetTurnaroundTime+0x82>
 801639c:	68bb      	ldr	r3, [r7, #8]
 801639e:	4a2b      	ldr	r2, [pc, #172]	; (801644c <USB_SetTurnaroundTime+0x124>)
 80163a0:	4293      	cmp	r3, r2
 80163a2:	d802      	bhi.n	80163aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80163a4:	230b      	movs	r3, #11
 80163a6:	617b      	str	r3, [r7, #20]
 80163a8:	e030      	b.n	801640c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80163aa:	68bb      	ldr	r3, [r7, #8]
 80163ac:	4a27      	ldr	r2, [pc, #156]	; (801644c <USB_SetTurnaroundTime+0x124>)
 80163ae:	4293      	cmp	r3, r2
 80163b0:	d906      	bls.n	80163c0 <USB_SetTurnaroundTime+0x98>
 80163b2:	68bb      	ldr	r3, [r7, #8]
 80163b4:	4a26      	ldr	r2, [pc, #152]	; (8016450 <USB_SetTurnaroundTime+0x128>)
 80163b6:	4293      	cmp	r3, r2
 80163b8:	d802      	bhi.n	80163c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80163ba:	230a      	movs	r3, #10
 80163bc:	617b      	str	r3, [r7, #20]
 80163be:	e025      	b.n	801640c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80163c0:	68bb      	ldr	r3, [r7, #8]
 80163c2:	4a23      	ldr	r2, [pc, #140]	; (8016450 <USB_SetTurnaroundTime+0x128>)
 80163c4:	4293      	cmp	r3, r2
 80163c6:	d906      	bls.n	80163d6 <USB_SetTurnaroundTime+0xae>
 80163c8:	68bb      	ldr	r3, [r7, #8]
 80163ca:	4a22      	ldr	r2, [pc, #136]	; (8016454 <USB_SetTurnaroundTime+0x12c>)
 80163cc:	4293      	cmp	r3, r2
 80163ce:	d202      	bcs.n	80163d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80163d0:	2309      	movs	r3, #9
 80163d2:	617b      	str	r3, [r7, #20]
 80163d4:	e01a      	b.n	801640c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80163d6:	68bb      	ldr	r3, [r7, #8]
 80163d8:	4a1e      	ldr	r2, [pc, #120]	; (8016454 <USB_SetTurnaroundTime+0x12c>)
 80163da:	4293      	cmp	r3, r2
 80163dc:	d306      	bcc.n	80163ec <USB_SetTurnaroundTime+0xc4>
 80163de:	68bb      	ldr	r3, [r7, #8]
 80163e0:	4a1d      	ldr	r2, [pc, #116]	; (8016458 <USB_SetTurnaroundTime+0x130>)
 80163e2:	4293      	cmp	r3, r2
 80163e4:	d802      	bhi.n	80163ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80163e6:	2308      	movs	r3, #8
 80163e8:	617b      	str	r3, [r7, #20]
 80163ea:	e00f      	b.n	801640c <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80163ec:	68bb      	ldr	r3, [r7, #8]
 80163ee:	4a1a      	ldr	r2, [pc, #104]	; (8016458 <USB_SetTurnaroundTime+0x130>)
 80163f0:	4293      	cmp	r3, r2
 80163f2:	d906      	bls.n	8016402 <USB_SetTurnaroundTime+0xda>
 80163f4:	68bb      	ldr	r3, [r7, #8]
 80163f6:	4a19      	ldr	r2, [pc, #100]	; (801645c <USB_SetTurnaroundTime+0x134>)
 80163f8:	4293      	cmp	r3, r2
 80163fa:	d202      	bcs.n	8016402 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80163fc:	2307      	movs	r3, #7
 80163fe:	617b      	str	r3, [r7, #20]
 8016400:	e004      	b.n	801640c <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8016402:	2306      	movs	r3, #6
 8016404:	617b      	str	r3, [r7, #20]
 8016406:	e001      	b.n	801640c <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8016408:	2309      	movs	r3, #9
 801640a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	68db      	ldr	r3, [r3, #12]
 8016410:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	68da      	ldr	r2, [r3, #12]
 801641c:	697b      	ldr	r3, [r7, #20]
 801641e:	029b      	lsls	r3, r3, #10
 8016420:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8016424:	431a      	orrs	r2, r3
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801642a:	2300      	movs	r3, #0
}
 801642c:	4618      	mov	r0, r3
 801642e:	371c      	adds	r7, #28
 8016430:	46bd      	mov	sp, r7
 8016432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016436:	4770      	bx	lr
 8016438:	00d8acbf 	.word	0x00d8acbf
 801643c:	00e4e1c0 	.word	0x00e4e1c0
 8016440:	00f42400 	.word	0x00f42400
 8016444:	01067380 	.word	0x01067380
 8016448:	011a499f 	.word	0x011a499f
 801644c:	01312cff 	.word	0x01312cff
 8016450:	014ca43f 	.word	0x014ca43f
 8016454:	016e3600 	.word	0x016e3600
 8016458:	01a6ab1f 	.word	0x01a6ab1f
 801645c:	01e84800 	.word	0x01e84800

08016460 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8016460:	b480      	push	{r7}
 8016462:	b083      	sub	sp, #12
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	689b      	ldr	r3, [r3, #8]
 801646c:	f043 0201 	orr.w	r2, r3, #1
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8016474:	2300      	movs	r3, #0
}
 8016476:	4618      	mov	r0, r3
 8016478:	370c      	adds	r7, #12
 801647a:	46bd      	mov	sp, r7
 801647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016480:	4770      	bx	lr

08016482 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8016482:	b480      	push	{r7}
 8016484:	b083      	sub	sp, #12
 8016486:	af00      	add	r7, sp, #0
 8016488:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	689b      	ldr	r3, [r3, #8]
 801648e:	f023 0201 	bic.w	r2, r3, #1
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8016496:	2300      	movs	r3, #0
}
 8016498:	4618      	mov	r0, r3
 801649a:	370c      	adds	r7, #12
 801649c:	46bd      	mov	sp, r7
 801649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a2:	4770      	bx	lr

080164a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80164a4:	b580      	push	{r7, lr}
 80164a6:	b084      	sub	sp, #16
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	6078      	str	r0, [r7, #4]
 80164ac:	460b      	mov	r3, r1
 80164ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80164b0:	2300      	movs	r3, #0
 80164b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	68db      	ldr	r3, [r3, #12]
 80164b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80164c0:	78fb      	ldrb	r3, [r7, #3]
 80164c2:	2b01      	cmp	r3, #1
 80164c4:	d115      	bne.n	80164f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	68db      	ldr	r3, [r3, #12]
 80164ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80164d2:	2001      	movs	r0, #1
 80164d4:	f7f5 fb72 	bl	800bbbc <HAL_Delay>
      ms++;
 80164d8:	68fb      	ldr	r3, [r7, #12]
 80164da:	3301      	adds	r3, #1
 80164dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80164de:	6878      	ldr	r0, [r7, #4]
 80164e0:	f001 f985 	bl	80177ee <USB_GetMode>
 80164e4:	4603      	mov	r3, r0
 80164e6:	2b01      	cmp	r3, #1
 80164e8:	d01e      	beq.n	8016528 <USB_SetCurrentMode+0x84>
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	2b31      	cmp	r3, #49	; 0x31
 80164ee:	d9f0      	bls.n	80164d2 <USB_SetCurrentMode+0x2e>
 80164f0:	e01a      	b.n	8016528 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80164f2:	78fb      	ldrb	r3, [r7, #3]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d115      	bne.n	8016524 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	68db      	ldr	r3, [r3, #12]
 80164fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8016504:	2001      	movs	r0, #1
 8016506:	f7f5 fb59 	bl	800bbbc <HAL_Delay>
      ms++;
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	3301      	adds	r3, #1
 801650e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8016510:	6878      	ldr	r0, [r7, #4]
 8016512:	f001 f96c 	bl	80177ee <USB_GetMode>
 8016516:	4603      	mov	r3, r0
 8016518:	2b00      	cmp	r3, #0
 801651a:	d005      	beq.n	8016528 <USB_SetCurrentMode+0x84>
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	2b31      	cmp	r3, #49	; 0x31
 8016520:	d9f0      	bls.n	8016504 <USB_SetCurrentMode+0x60>
 8016522:	e001      	b.n	8016528 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8016524:	2301      	movs	r3, #1
 8016526:	e005      	b.n	8016534 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	2b32      	cmp	r3, #50	; 0x32
 801652c:	d101      	bne.n	8016532 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801652e:	2301      	movs	r3, #1
 8016530:	e000      	b.n	8016534 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8016532:	2300      	movs	r3, #0
}
 8016534:	4618      	mov	r0, r3
 8016536:	3710      	adds	r7, #16
 8016538:	46bd      	mov	sp, r7
 801653a:	bd80      	pop	{r7, pc}

0801653c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801653c:	b084      	sub	sp, #16
 801653e:	b580      	push	{r7, lr}
 8016540:	b086      	sub	sp, #24
 8016542:	af00      	add	r7, sp, #0
 8016544:	6078      	str	r0, [r7, #4]
 8016546:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801654a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801654e:	2300      	movs	r3, #0
 8016550:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8016556:	2300      	movs	r3, #0
 8016558:	613b      	str	r3, [r7, #16]
 801655a:	e009      	b.n	8016570 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801655c:	687a      	ldr	r2, [r7, #4]
 801655e:	693b      	ldr	r3, [r7, #16]
 8016560:	3340      	adds	r3, #64	; 0x40
 8016562:	009b      	lsls	r3, r3, #2
 8016564:	4413      	add	r3, r2
 8016566:	2200      	movs	r2, #0
 8016568:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801656a:	693b      	ldr	r3, [r7, #16]
 801656c:	3301      	adds	r3, #1
 801656e:	613b      	str	r3, [r7, #16]
 8016570:	693b      	ldr	r3, [r7, #16]
 8016572:	2b0e      	cmp	r3, #14
 8016574:	d9f2      	bls.n	801655c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8016576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016578:	2b00      	cmp	r3, #0
 801657a:	d11c      	bne.n	80165b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016582:	685b      	ldr	r3, [r3, #4]
 8016584:	68fa      	ldr	r2, [r7, #12]
 8016586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801658a:	f043 0302 	orr.w	r3, r3, #2
 801658e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016594:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	601a      	str	r2, [r3, #0]
 80165b4:	e005      	b.n	80165c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80165c8:	461a      	mov	r2, r3
 80165ca:	2300      	movs	r3, #0
 80165cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80165ce:	68fb      	ldr	r3, [r7, #12]
 80165d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80165d4:	4619      	mov	r1, r3
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80165dc:	461a      	mov	r2, r3
 80165de:	680b      	ldr	r3, [r1, #0]
 80165e0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80165e2:	2103      	movs	r1, #3
 80165e4:	6878      	ldr	r0, [r7, #4]
 80165e6:	f000 f959 	bl	801689c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80165ea:	2110      	movs	r1, #16
 80165ec:	6878      	ldr	r0, [r7, #4]
 80165ee:	f000 f8f1 	bl	80167d4 <USB_FlushTxFifo>
 80165f2:	4603      	mov	r3, r0
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d001      	beq.n	80165fc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80165f8:	2301      	movs	r3, #1
 80165fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80165fc:	6878      	ldr	r0, [r7, #4]
 80165fe:	f000 f91d 	bl	801683c <USB_FlushRxFifo>
 8016602:	4603      	mov	r3, r0
 8016604:	2b00      	cmp	r3, #0
 8016606:	d001      	beq.n	801660c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8016608:	2301      	movs	r3, #1
 801660a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801660c:	68fb      	ldr	r3, [r7, #12]
 801660e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016612:	461a      	mov	r2, r3
 8016614:	2300      	movs	r3, #0
 8016616:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8016618:	68fb      	ldr	r3, [r7, #12]
 801661a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801661e:	461a      	mov	r2, r3
 8016620:	2300      	movs	r3, #0
 8016622:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801662a:	461a      	mov	r2, r3
 801662c:	2300      	movs	r3, #0
 801662e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8016630:	2300      	movs	r3, #0
 8016632:	613b      	str	r3, [r7, #16]
 8016634:	e043      	b.n	80166be <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8016636:	693b      	ldr	r3, [r7, #16]
 8016638:	015a      	lsls	r2, r3, #5
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	4413      	add	r3, r2
 801663e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016648:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801664c:	d118      	bne.n	8016680 <USB_DevInit+0x144>
    {
      if (i == 0U)
 801664e:	693b      	ldr	r3, [r7, #16]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d10a      	bne.n	801666a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8016654:	693b      	ldr	r3, [r7, #16]
 8016656:	015a      	lsls	r2, r3, #5
 8016658:	68fb      	ldr	r3, [r7, #12]
 801665a:	4413      	add	r3, r2
 801665c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016660:	461a      	mov	r2, r3
 8016662:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8016666:	6013      	str	r3, [r2, #0]
 8016668:	e013      	b.n	8016692 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801666a:	693b      	ldr	r3, [r7, #16]
 801666c:	015a      	lsls	r2, r3, #5
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	4413      	add	r3, r2
 8016672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016676:	461a      	mov	r2, r3
 8016678:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801667c:	6013      	str	r3, [r2, #0]
 801667e:	e008      	b.n	8016692 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8016680:	693b      	ldr	r3, [r7, #16]
 8016682:	015a      	lsls	r2, r3, #5
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	4413      	add	r3, r2
 8016688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801668c:	461a      	mov	r2, r3
 801668e:	2300      	movs	r3, #0
 8016690:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8016692:	693b      	ldr	r3, [r7, #16]
 8016694:	015a      	lsls	r2, r3, #5
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	4413      	add	r3, r2
 801669a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801669e:	461a      	mov	r2, r3
 80166a0:	2300      	movs	r3, #0
 80166a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80166a4:	693b      	ldr	r3, [r7, #16]
 80166a6:	015a      	lsls	r2, r3, #5
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	4413      	add	r3, r2
 80166ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80166b0:	461a      	mov	r2, r3
 80166b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80166b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80166b8:	693b      	ldr	r3, [r7, #16]
 80166ba:	3301      	adds	r3, #1
 80166bc:	613b      	str	r3, [r7, #16]
 80166be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166c0:	693a      	ldr	r2, [r7, #16]
 80166c2:	429a      	cmp	r2, r3
 80166c4:	d3b7      	bcc.n	8016636 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80166c6:	2300      	movs	r3, #0
 80166c8:	613b      	str	r3, [r7, #16]
 80166ca:	e043      	b.n	8016754 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80166cc:	693b      	ldr	r3, [r7, #16]
 80166ce:	015a      	lsls	r2, r3, #5
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	4413      	add	r3, r2
 80166d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80166de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80166e2:	d118      	bne.n	8016716 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80166e4:	693b      	ldr	r3, [r7, #16]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d10a      	bne.n	8016700 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80166ea:	693b      	ldr	r3, [r7, #16]
 80166ec:	015a      	lsls	r2, r3, #5
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	4413      	add	r3, r2
 80166f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80166f6:	461a      	mov	r2, r3
 80166f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80166fc:	6013      	str	r3, [r2, #0]
 80166fe:	e013      	b.n	8016728 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8016700:	693b      	ldr	r3, [r7, #16]
 8016702:	015a      	lsls	r2, r3, #5
 8016704:	68fb      	ldr	r3, [r7, #12]
 8016706:	4413      	add	r3, r2
 8016708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801670c:	461a      	mov	r2, r3
 801670e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8016712:	6013      	str	r3, [r2, #0]
 8016714:	e008      	b.n	8016728 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8016716:	693b      	ldr	r3, [r7, #16]
 8016718:	015a      	lsls	r2, r3, #5
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	4413      	add	r3, r2
 801671e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016722:	461a      	mov	r2, r3
 8016724:	2300      	movs	r3, #0
 8016726:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8016728:	693b      	ldr	r3, [r7, #16]
 801672a:	015a      	lsls	r2, r3, #5
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	4413      	add	r3, r2
 8016730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016734:	461a      	mov	r2, r3
 8016736:	2300      	movs	r3, #0
 8016738:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801673a:	693b      	ldr	r3, [r7, #16]
 801673c:	015a      	lsls	r2, r3, #5
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	4413      	add	r3, r2
 8016742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016746:	461a      	mov	r2, r3
 8016748:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801674c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801674e:	693b      	ldr	r3, [r7, #16]
 8016750:	3301      	adds	r3, #1
 8016752:	613b      	str	r3, [r7, #16]
 8016754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016756:	693a      	ldr	r2, [r7, #16]
 8016758:	429a      	cmp	r2, r3
 801675a:	d3b7      	bcc.n	80166cc <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016762:	691b      	ldr	r3, [r3, #16]
 8016764:	68fa      	ldr	r2, [r7, #12]
 8016766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801676a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801676e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	2200      	movs	r2, #0
 8016774:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801677c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	699b      	ldr	r3, [r3, #24]
 8016782:	f043 0210 	orr.w	r2, r3, #16
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	699a      	ldr	r2, [r3, #24]
 801678e:	4b10      	ldr	r3, [pc, #64]	; (80167d0 <USB_DevInit+0x294>)
 8016790:	4313      	orrs	r3, r2
 8016792:	687a      	ldr	r2, [r7, #4]
 8016794:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8016796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016798:	2b00      	cmp	r3, #0
 801679a:	d005      	beq.n	80167a8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	699b      	ldr	r3, [r3, #24]
 80167a0:	f043 0208 	orr.w	r2, r3, #8
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80167a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80167aa:	2b01      	cmp	r3, #1
 80167ac:	d107      	bne.n	80167be <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	699b      	ldr	r3, [r3, #24]
 80167b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80167b6:	f043 0304 	orr.w	r3, r3, #4
 80167ba:	687a      	ldr	r2, [r7, #4]
 80167bc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80167be:	7dfb      	ldrb	r3, [r7, #23]
}
 80167c0:	4618      	mov	r0, r3
 80167c2:	3718      	adds	r7, #24
 80167c4:	46bd      	mov	sp, r7
 80167c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80167ca:	b004      	add	sp, #16
 80167cc:	4770      	bx	lr
 80167ce:	bf00      	nop
 80167d0:	803c3800 	.word	0x803c3800

080167d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80167d4:	b480      	push	{r7}
 80167d6:	b085      	sub	sp, #20
 80167d8:	af00      	add	r7, sp, #0
 80167da:	6078      	str	r0, [r7, #4]
 80167dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80167de:	2300      	movs	r3, #0
 80167e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	3301      	adds	r3, #1
 80167e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80167e8:	68fb      	ldr	r3, [r7, #12]
 80167ea:	4a13      	ldr	r2, [pc, #76]	; (8016838 <USB_FlushTxFifo+0x64>)
 80167ec:	4293      	cmp	r3, r2
 80167ee:	d901      	bls.n	80167f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80167f0:	2303      	movs	r3, #3
 80167f2:	e01b      	b.n	801682c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	691b      	ldr	r3, [r3, #16]
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	daf2      	bge.n	80167e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80167fc:	2300      	movs	r3, #0
 80167fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8016800:	683b      	ldr	r3, [r7, #0]
 8016802:	019b      	lsls	r3, r3, #6
 8016804:	f043 0220 	orr.w	r2, r3, #32
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	3301      	adds	r3, #1
 8016810:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8016812:	68fb      	ldr	r3, [r7, #12]
 8016814:	4a08      	ldr	r2, [pc, #32]	; (8016838 <USB_FlushTxFifo+0x64>)
 8016816:	4293      	cmp	r3, r2
 8016818:	d901      	bls.n	801681e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801681a:	2303      	movs	r3, #3
 801681c:	e006      	b.n	801682c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	691b      	ldr	r3, [r3, #16]
 8016822:	f003 0320 	and.w	r3, r3, #32
 8016826:	2b20      	cmp	r3, #32
 8016828:	d0f0      	beq.n	801680c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801682a:	2300      	movs	r3, #0
}
 801682c:	4618      	mov	r0, r3
 801682e:	3714      	adds	r7, #20
 8016830:	46bd      	mov	sp, r7
 8016832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016836:	4770      	bx	lr
 8016838:	00030d40 	.word	0x00030d40

0801683c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801683c:	b480      	push	{r7}
 801683e:	b085      	sub	sp, #20
 8016840:	af00      	add	r7, sp, #0
 8016842:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8016844:	2300      	movs	r3, #0
 8016846:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	3301      	adds	r3, #1
 801684c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	4a11      	ldr	r2, [pc, #68]	; (8016898 <USB_FlushRxFifo+0x5c>)
 8016852:	4293      	cmp	r3, r2
 8016854:	d901      	bls.n	801685a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8016856:	2303      	movs	r3, #3
 8016858:	e018      	b.n	801688c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	691b      	ldr	r3, [r3, #16]
 801685e:	2b00      	cmp	r3, #0
 8016860:	daf2      	bge.n	8016848 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8016862:	2300      	movs	r3, #0
 8016864:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	2210      	movs	r2, #16
 801686a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	3301      	adds	r3, #1
 8016870:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	4a08      	ldr	r2, [pc, #32]	; (8016898 <USB_FlushRxFifo+0x5c>)
 8016876:	4293      	cmp	r3, r2
 8016878:	d901      	bls.n	801687e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801687a:	2303      	movs	r3, #3
 801687c:	e006      	b.n	801688c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	691b      	ldr	r3, [r3, #16]
 8016882:	f003 0310 	and.w	r3, r3, #16
 8016886:	2b10      	cmp	r3, #16
 8016888:	d0f0      	beq.n	801686c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801688a:	2300      	movs	r3, #0
}
 801688c:	4618      	mov	r0, r3
 801688e:	3714      	adds	r7, #20
 8016890:	46bd      	mov	sp, r7
 8016892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016896:	4770      	bx	lr
 8016898:	00030d40 	.word	0x00030d40

0801689c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801689c:	b480      	push	{r7}
 801689e:	b085      	sub	sp, #20
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	6078      	str	r0, [r7, #4]
 80168a4:	460b      	mov	r3, r1
 80168a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80168b2:	681a      	ldr	r2, [r3, #0]
 80168b4:	78fb      	ldrb	r3, [r7, #3]
 80168b6:	68f9      	ldr	r1, [r7, #12]
 80168b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80168bc:	4313      	orrs	r3, r2
 80168be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80168c0:	2300      	movs	r3, #0
}
 80168c2:	4618      	mov	r0, r3
 80168c4:	3714      	adds	r7, #20
 80168c6:	46bd      	mov	sp, r7
 80168c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168cc:	4770      	bx	lr

080168ce <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80168ce:	b480      	push	{r7}
 80168d0:	b087      	sub	sp, #28
 80168d2:	af00      	add	r7, sp, #0
 80168d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80168da:	693b      	ldr	r3, [r7, #16]
 80168dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80168e0:	689b      	ldr	r3, [r3, #8]
 80168e2:	f003 0306 	and.w	r3, r3, #6
 80168e6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	2b02      	cmp	r3, #2
 80168ec:	d002      	beq.n	80168f4 <USB_GetDevSpeed+0x26>
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	2b06      	cmp	r3, #6
 80168f2:	d102      	bne.n	80168fa <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80168f4:	2302      	movs	r3, #2
 80168f6:	75fb      	strb	r3, [r7, #23]
 80168f8:	e001      	b.n	80168fe <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80168fa:	230f      	movs	r3, #15
 80168fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80168fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8016900:	4618      	mov	r0, r3
 8016902:	371c      	adds	r7, #28
 8016904:	46bd      	mov	sp, r7
 8016906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690a:	4770      	bx	lr

0801690c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801690c:	b480      	push	{r7}
 801690e:	b085      	sub	sp, #20
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]
 8016914:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801691a:	683b      	ldr	r3, [r7, #0]
 801691c:	781b      	ldrb	r3, [r3, #0]
 801691e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8016920:	683b      	ldr	r3, [r7, #0]
 8016922:	785b      	ldrb	r3, [r3, #1]
 8016924:	2b01      	cmp	r3, #1
 8016926:	d13a      	bne.n	801699e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801692e:	69da      	ldr	r2, [r3, #28]
 8016930:	683b      	ldr	r3, [r7, #0]
 8016932:	781b      	ldrb	r3, [r3, #0]
 8016934:	f003 030f 	and.w	r3, r3, #15
 8016938:	2101      	movs	r1, #1
 801693a:	fa01 f303 	lsl.w	r3, r1, r3
 801693e:	b29b      	uxth	r3, r3
 8016940:	68f9      	ldr	r1, [r7, #12]
 8016942:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016946:	4313      	orrs	r3, r2
 8016948:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801694a:	68bb      	ldr	r3, [r7, #8]
 801694c:	015a      	lsls	r2, r3, #5
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	4413      	add	r3, r2
 8016952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016956:	681b      	ldr	r3, [r3, #0]
 8016958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801695c:	2b00      	cmp	r3, #0
 801695e:	d155      	bne.n	8016a0c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016960:	68bb      	ldr	r3, [r7, #8]
 8016962:	015a      	lsls	r2, r3, #5
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	4413      	add	r3, r2
 8016968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801696c:	681a      	ldr	r2, [r3, #0]
 801696e:	683b      	ldr	r3, [r7, #0]
 8016970:	68db      	ldr	r3, [r3, #12]
 8016972:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8016976:	683b      	ldr	r3, [r7, #0]
 8016978:	791b      	ldrb	r3, [r3, #4]
 801697a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801697c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801697e:	68bb      	ldr	r3, [r7, #8]
 8016980:	059b      	lsls	r3, r3, #22
 8016982:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8016984:	4313      	orrs	r3, r2
 8016986:	68ba      	ldr	r2, [r7, #8]
 8016988:	0151      	lsls	r1, r2, #5
 801698a:	68fa      	ldr	r2, [r7, #12]
 801698c:	440a      	add	r2, r1
 801698e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801699a:	6013      	str	r3, [r2, #0]
 801699c:	e036      	b.n	8016a0c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80169a4:	69da      	ldr	r2, [r3, #28]
 80169a6:	683b      	ldr	r3, [r7, #0]
 80169a8:	781b      	ldrb	r3, [r3, #0]
 80169aa:	f003 030f 	and.w	r3, r3, #15
 80169ae:	2101      	movs	r1, #1
 80169b0:	fa01 f303 	lsl.w	r3, r1, r3
 80169b4:	041b      	lsls	r3, r3, #16
 80169b6:	68f9      	ldr	r1, [r7, #12]
 80169b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80169bc:	4313      	orrs	r3, r2
 80169be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80169c0:	68bb      	ldr	r3, [r7, #8]
 80169c2:	015a      	lsls	r2, r3, #5
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	4413      	add	r3, r2
 80169c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d11a      	bne.n	8016a0c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80169d6:	68bb      	ldr	r3, [r7, #8]
 80169d8:	015a      	lsls	r2, r3, #5
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	4413      	add	r3, r2
 80169de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80169e2:	681a      	ldr	r2, [r3, #0]
 80169e4:	683b      	ldr	r3, [r7, #0]
 80169e6:	68db      	ldr	r3, [r3, #12]
 80169e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80169ec:	683b      	ldr	r3, [r7, #0]
 80169ee:	791b      	ldrb	r3, [r3, #4]
 80169f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80169f2:	430b      	orrs	r3, r1
 80169f4:	4313      	orrs	r3, r2
 80169f6:	68ba      	ldr	r2, [r7, #8]
 80169f8:	0151      	lsls	r1, r2, #5
 80169fa:	68fa      	ldr	r2, [r7, #12]
 80169fc:	440a      	add	r2, r1
 80169fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016a0a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8016a0c:	2300      	movs	r3, #0
}
 8016a0e:	4618      	mov	r0, r3
 8016a10:	3714      	adds	r7, #20
 8016a12:	46bd      	mov	sp, r7
 8016a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a18:	4770      	bx	lr
	...

08016a1c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016a1c:	b480      	push	{r7}
 8016a1e:	b085      	sub	sp, #20
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]
 8016a24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016a2a:	683b      	ldr	r3, [r7, #0]
 8016a2c:	781b      	ldrb	r3, [r3, #0]
 8016a2e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8016a30:	683b      	ldr	r3, [r7, #0]
 8016a32:	785b      	ldrb	r3, [r3, #1]
 8016a34:	2b01      	cmp	r3, #1
 8016a36:	d161      	bne.n	8016afc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8016a38:	68bb      	ldr	r3, [r7, #8]
 8016a3a:	015a      	lsls	r2, r3, #5
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	4413      	add	r3, r2
 8016a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016a4e:	d11f      	bne.n	8016a90 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8016a50:	68bb      	ldr	r3, [r7, #8]
 8016a52:	015a      	lsls	r2, r3, #5
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	4413      	add	r3, r2
 8016a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	68ba      	ldr	r2, [r7, #8]
 8016a60:	0151      	lsls	r1, r2, #5
 8016a62:	68fa      	ldr	r2, [r7, #12]
 8016a64:	440a      	add	r2, r1
 8016a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016a6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8016a6e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8016a70:	68bb      	ldr	r3, [r7, #8]
 8016a72:	015a      	lsls	r2, r3, #5
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	4413      	add	r3, r2
 8016a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	68ba      	ldr	r2, [r7, #8]
 8016a80:	0151      	lsls	r1, r2, #5
 8016a82:	68fa      	ldr	r2, [r7, #12]
 8016a84:	440a      	add	r2, r1
 8016a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016a8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016a8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016a96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016a98:	683b      	ldr	r3, [r7, #0]
 8016a9a:	781b      	ldrb	r3, [r3, #0]
 8016a9c:	f003 030f 	and.w	r3, r3, #15
 8016aa0:	2101      	movs	r1, #1
 8016aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8016aa6:	b29b      	uxth	r3, r3
 8016aa8:	43db      	mvns	r3, r3
 8016aaa:	68f9      	ldr	r1, [r7, #12]
 8016aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016ab0:	4013      	ands	r3, r2
 8016ab2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016aba:	69da      	ldr	r2, [r3, #28]
 8016abc:	683b      	ldr	r3, [r7, #0]
 8016abe:	781b      	ldrb	r3, [r3, #0]
 8016ac0:	f003 030f 	and.w	r3, r3, #15
 8016ac4:	2101      	movs	r1, #1
 8016ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8016aca:	b29b      	uxth	r3, r3
 8016acc:	43db      	mvns	r3, r3
 8016ace:	68f9      	ldr	r1, [r7, #12]
 8016ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016ad4:	4013      	ands	r3, r2
 8016ad6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8016ad8:	68bb      	ldr	r3, [r7, #8]
 8016ada:	015a      	lsls	r2, r3, #5
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	4413      	add	r3, r2
 8016ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016ae4:	681a      	ldr	r2, [r3, #0]
 8016ae6:	68bb      	ldr	r3, [r7, #8]
 8016ae8:	0159      	lsls	r1, r3, #5
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	440b      	add	r3, r1
 8016aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016af2:	4619      	mov	r1, r3
 8016af4:	4b35      	ldr	r3, [pc, #212]	; (8016bcc <USB_DeactivateEndpoint+0x1b0>)
 8016af6:	4013      	ands	r3, r2
 8016af8:	600b      	str	r3, [r1, #0]
 8016afa:	e060      	b.n	8016bbe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8016afc:	68bb      	ldr	r3, [r7, #8]
 8016afe:	015a      	lsls	r2, r3, #5
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	4413      	add	r3, r2
 8016b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016b0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8016b12:	d11f      	bne.n	8016b54 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8016b14:	68bb      	ldr	r3, [r7, #8]
 8016b16:	015a      	lsls	r2, r3, #5
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	4413      	add	r3, r2
 8016b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	68ba      	ldr	r2, [r7, #8]
 8016b24:	0151      	lsls	r1, r2, #5
 8016b26:	68fa      	ldr	r2, [r7, #12]
 8016b28:	440a      	add	r2, r1
 8016b2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016b2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8016b32:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8016b34:	68bb      	ldr	r3, [r7, #8]
 8016b36:	015a      	lsls	r2, r3, #5
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	4413      	add	r3, r2
 8016b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	68ba      	ldr	r2, [r7, #8]
 8016b44:	0151      	lsls	r1, r2, #5
 8016b46:	68fa      	ldr	r2, [r7, #12]
 8016b48:	440a      	add	r2, r1
 8016b4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016b4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016b52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016b5c:	683b      	ldr	r3, [r7, #0]
 8016b5e:	781b      	ldrb	r3, [r3, #0]
 8016b60:	f003 030f 	and.w	r3, r3, #15
 8016b64:	2101      	movs	r1, #1
 8016b66:	fa01 f303 	lsl.w	r3, r1, r3
 8016b6a:	041b      	lsls	r3, r3, #16
 8016b6c:	43db      	mvns	r3, r3
 8016b6e:	68f9      	ldr	r1, [r7, #12]
 8016b70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016b74:	4013      	ands	r3, r2
 8016b76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016b7e:	69da      	ldr	r2, [r3, #28]
 8016b80:	683b      	ldr	r3, [r7, #0]
 8016b82:	781b      	ldrb	r3, [r3, #0]
 8016b84:	f003 030f 	and.w	r3, r3, #15
 8016b88:	2101      	movs	r1, #1
 8016b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8016b8e:	041b      	lsls	r3, r3, #16
 8016b90:	43db      	mvns	r3, r3
 8016b92:	68f9      	ldr	r1, [r7, #12]
 8016b94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016b98:	4013      	ands	r3, r2
 8016b9a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8016b9c:	68bb      	ldr	r3, [r7, #8]
 8016b9e:	015a      	lsls	r2, r3, #5
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	4413      	add	r3, r2
 8016ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016ba8:	681a      	ldr	r2, [r3, #0]
 8016baa:	68bb      	ldr	r3, [r7, #8]
 8016bac:	0159      	lsls	r1, r3, #5
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	440b      	add	r3, r1
 8016bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016bb6:	4619      	mov	r1, r3
 8016bb8:	4b05      	ldr	r3, [pc, #20]	; (8016bd0 <USB_DeactivateEndpoint+0x1b4>)
 8016bba:	4013      	ands	r3, r2
 8016bbc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8016bbe:	2300      	movs	r3, #0
}
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	3714      	adds	r7, #20
 8016bc4:	46bd      	mov	sp, r7
 8016bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bca:	4770      	bx	lr
 8016bcc:	ec337800 	.word	0xec337800
 8016bd0:	eff37800 	.word	0xeff37800

08016bd4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016bd4:	b580      	push	{r7, lr}
 8016bd6:	b086      	sub	sp, #24
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	6078      	str	r0, [r7, #4]
 8016bdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8016be2:	683b      	ldr	r3, [r7, #0]
 8016be4:	781b      	ldrb	r3, [r3, #0]
 8016be6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8016be8:	683b      	ldr	r3, [r7, #0]
 8016bea:	785b      	ldrb	r3, [r3, #1]
 8016bec:	2b01      	cmp	r3, #1
 8016bee:	f040 810a 	bne.w	8016e06 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8016bf2:	683b      	ldr	r3, [r7, #0]
 8016bf4:	699b      	ldr	r3, [r3, #24]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d132      	bne.n	8016c60 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8016bfa:	693b      	ldr	r3, [r7, #16]
 8016bfc:	015a      	lsls	r2, r3, #5
 8016bfe:	697b      	ldr	r3, [r7, #20]
 8016c00:	4413      	add	r3, r2
 8016c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016c06:	691b      	ldr	r3, [r3, #16]
 8016c08:	693a      	ldr	r2, [r7, #16]
 8016c0a:	0151      	lsls	r1, r2, #5
 8016c0c:	697a      	ldr	r2, [r7, #20]
 8016c0e:	440a      	add	r2, r1
 8016c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016c14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8016c18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8016c1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8016c1e:	693b      	ldr	r3, [r7, #16]
 8016c20:	015a      	lsls	r2, r3, #5
 8016c22:	697b      	ldr	r3, [r7, #20]
 8016c24:	4413      	add	r3, r2
 8016c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016c2a:	691b      	ldr	r3, [r3, #16]
 8016c2c:	693a      	ldr	r2, [r7, #16]
 8016c2e:	0151      	lsls	r1, r2, #5
 8016c30:	697a      	ldr	r2, [r7, #20]
 8016c32:	440a      	add	r2, r1
 8016c34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016c38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016c3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016c3e:	693b      	ldr	r3, [r7, #16]
 8016c40:	015a      	lsls	r2, r3, #5
 8016c42:	697b      	ldr	r3, [r7, #20]
 8016c44:	4413      	add	r3, r2
 8016c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016c4a:	691b      	ldr	r3, [r3, #16]
 8016c4c:	693a      	ldr	r2, [r7, #16]
 8016c4e:	0151      	lsls	r1, r2, #5
 8016c50:	697a      	ldr	r2, [r7, #20]
 8016c52:	440a      	add	r2, r1
 8016c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016c58:	0cdb      	lsrs	r3, r3, #19
 8016c5a:	04db      	lsls	r3, r3, #19
 8016c5c:	6113      	str	r3, [r2, #16]
 8016c5e:	e074      	b.n	8016d4a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016c60:	693b      	ldr	r3, [r7, #16]
 8016c62:	015a      	lsls	r2, r3, #5
 8016c64:	697b      	ldr	r3, [r7, #20]
 8016c66:	4413      	add	r3, r2
 8016c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016c6c:	691b      	ldr	r3, [r3, #16]
 8016c6e:	693a      	ldr	r2, [r7, #16]
 8016c70:	0151      	lsls	r1, r2, #5
 8016c72:	697a      	ldr	r2, [r7, #20]
 8016c74:	440a      	add	r2, r1
 8016c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016c7a:	0cdb      	lsrs	r3, r3, #19
 8016c7c:	04db      	lsls	r3, r3, #19
 8016c7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8016c80:	693b      	ldr	r3, [r7, #16]
 8016c82:	015a      	lsls	r2, r3, #5
 8016c84:	697b      	ldr	r3, [r7, #20]
 8016c86:	4413      	add	r3, r2
 8016c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016c8c:	691b      	ldr	r3, [r3, #16]
 8016c8e:	693a      	ldr	r2, [r7, #16]
 8016c90:	0151      	lsls	r1, r2, #5
 8016c92:	697a      	ldr	r2, [r7, #20]
 8016c94:	440a      	add	r2, r1
 8016c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016c9a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8016c9e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8016ca2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8016ca4:	693b      	ldr	r3, [r7, #16]
 8016ca6:	015a      	lsls	r2, r3, #5
 8016ca8:	697b      	ldr	r3, [r7, #20]
 8016caa:	4413      	add	r3, r2
 8016cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016cb0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8016cb2:	683b      	ldr	r3, [r7, #0]
 8016cb4:	6999      	ldr	r1, [r3, #24]
 8016cb6:	683b      	ldr	r3, [r7, #0]
 8016cb8:	68db      	ldr	r3, [r3, #12]
 8016cba:	440b      	add	r3, r1
 8016cbc:	1e59      	subs	r1, r3, #1
 8016cbe:	683b      	ldr	r3, [r7, #0]
 8016cc0:	68db      	ldr	r3, [r3, #12]
 8016cc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8016cc6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8016cc8:	4b9e      	ldr	r3, [pc, #632]	; (8016f44 <USB_EPStartXfer+0x370>)
 8016cca:	400b      	ands	r3, r1
 8016ccc:	6939      	ldr	r1, [r7, #16]
 8016cce:	0148      	lsls	r0, r1, #5
 8016cd0:	6979      	ldr	r1, [r7, #20]
 8016cd2:	4401      	add	r1, r0
 8016cd4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8016cd8:	4313      	orrs	r3, r2
 8016cda:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8016cdc:	693b      	ldr	r3, [r7, #16]
 8016cde:	015a      	lsls	r2, r3, #5
 8016ce0:	697b      	ldr	r3, [r7, #20]
 8016ce2:	4413      	add	r3, r2
 8016ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016ce8:	691a      	ldr	r2, [r3, #16]
 8016cea:	683b      	ldr	r3, [r7, #0]
 8016cec:	699b      	ldr	r3, [r3, #24]
 8016cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016cf2:	6939      	ldr	r1, [r7, #16]
 8016cf4:	0148      	lsls	r0, r1, #5
 8016cf6:	6979      	ldr	r1, [r7, #20]
 8016cf8:	4401      	add	r1, r0
 8016cfa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8016cfe:	4313      	orrs	r3, r2
 8016d00:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8016d02:	683b      	ldr	r3, [r7, #0]
 8016d04:	791b      	ldrb	r3, [r3, #4]
 8016d06:	2b01      	cmp	r3, #1
 8016d08:	d11f      	bne.n	8016d4a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8016d0a:	693b      	ldr	r3, [r7, #16]
 8016d0c:	015a      	lsls	r2, r3, #5
 8016d0e:	697b      	ldr	r3, [r7, #20]
 8016d10:	4413      	add	r3, r2
 8016d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016d16:	691b      	ldr	r3, [r3, #16]
 8016d18:	693a      	ldr	r2, [r7, #16]
 8016d1a:	0151      	lsls	r1, r2, #5
 8016d1c:	697a      	ldr	r2, [r7, #20]
 8016d1e:	440a      	add	r2, r1
 8016d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016d24:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8016d28:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8016d2a:	693b      	ldr	r3, [r7, #16]
 8016d2c:	015a      	lsls	r2, r3, #5
 8016d2e:	697b      	ldr	r3, [r7, #20]
 8016d30:	4413      	add	r3, r2
 8016d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016d36:	691b      	ldr	r3, [r3, #16]
 8016d38:	693a      	ldr	r2, [r7, #16]
 8016d3a:	0151      	lsls	r1, r2, #5
 8016d3c:	697a      	ldr	r2, [r7, #20]
 8016d3e:	440a      	add	r2, r1
 8016d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016d44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016d48:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8016d4a:	693b      	ldr	r3, [r7, #16]
 8016d4c:	015a      	lsls	r2, r3, #5
 8016d4e:	697b      	ldr	r3, [r7, #20]
 8016d50:	4413      	add	r3, r2
 8016d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	693a      	ldr	r2, [r7, #16]
 8016d5a:	0151      	lsls	r1, r2, #5
 8016d5c:	697a      	ldr	r2, [r7, #20]
 8016d5e:	440a      	add	r2, r1
 8016d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016d64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8016d68:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8016d6a:	683b      	ldr	r3, [r7, #0]
 8016d6c:	791b      	ldrb	r3, [r3, #4]
 8016d6e:	2b01      	cmp	r3, #1
 8016d70:	d015      	beq.n	8016d9e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8016d72:	683b      	ldr	r3, [r7, #0]
 8016d74:	699b      	ldr	r3, [r3, #24]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	f000 8106 	beq.w	8016f88 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8016d7c:	697b      	ldr	r3, [r7, #20]
 8016d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016d84:	683b      	ldr	r3, [r7, #0]
 8016d86:	781b      	ldrb	r3, [r3, #0]
 8016d88:	f003 030f 	and.w	r3, r3, #15
 8016d8c:	2101      	movs	r1, #1
 8016d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8016d92:	6979      	ldr	r1, [r7, #20]
 8016d94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8016d98:	4313      	orrs	r3, r2
 8016d9a:	634b      	str	r3, [r1, #52]	; 0x34
 8016d9c:	e0f4      	b.n	8016f88 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8016d9e:	697b      	ldr	r3, [r7, #20]
 8016da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016da4:	689b      	ldr	r3, [r3, #8]
 8016da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d110      	bne.n	8016dd0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8016dae:	693b      	ldr	r3, [r7, #16]
 8016db0:	015a      	lsls	r2, r3, #5
 8016db2:	697b      	ldr	r3, [r7, #20]
 8016db4:	4413      	add	r3, r2
 8016db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016dba:	681b      	ldr	r3, [r3, #0]
 8016dbc:	693a      	ldr	r2, [r7, #16]
 8016dbe:	0151      	lsls	r1, r2, #5
 8016dc0:	697a      	ldr	r2, [r7, #20]
 8016dc2:	440a      	add	r2, r1
 8016dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016dc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016dcc:	6013      	str	r3, [r2, #0]
 8016dce:	e00f      	b.n	8016df0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8016dd0:	693b      	ldr	r3, [r7, #16]
 8016dd2:	015a      	lsls	r2, r3, #5
 8016dd4:	697b      	ldr	r3, [r7, #20]
 8016dd6:	4413      	add	r3, r2
 8016dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	693a      	ldr	r2, [r7, #16]
 8016de0:	0151      	lsls	r1, r2, #5
 8016de2:	697a      	ldr	r2, [r7, #20]
 8016de4:	440a      	add	r2, r1
 8016de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016dee:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8016df0:	683b      	ldr	r3, [r7, #0]
 8016df2:	6919      	ldr	r1, [r3, #16]
 8016df4:	683b      	ldr	r3, [r7, #0]
 8016df6:	781a      	ldrb	r2, [r3, #0]
 8016df8:	683b      	ldr	r3, [r7, #0]
 8016dfa:	699b      	ldr	r3, [r3, #24]
 8016dfc:	b29b      	uxth	r3, r3
 8016dfe:	6878      	ldr	r0, [r7, #4]
 8016e00:	f000 fa94 	bl	801732c <USB_WritePacket>
 8016e04:	e0c0      	b.n	8016f88 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8016e06:	693b      	ldr	r3, [r7, #16]
 8016e08:	015a      	lsls	r2, r3, #5
 8016e0a:	697b      	ldr	r3, [r7, #20]
 8016e0c:	4413      	add	r3, r2
 8016e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016e12:	691b      	ldr	r3, [r3, #16]
 8016e14:	693a      	ldr	r2, [r7, #16]
 8016e16:	0151      	lsls	r1, r2, #5
 8016e18:	697a      	ldr	r2, [r7, #20]
 8016e1a:	440a      	add	r2, r1
 8016e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016e20:	0cdb      	lsrs	r3, r3, #19
 8016e22:	04db      	lsls	r3, r3, #19
 8016e24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8016e26:	693b      	ldr	r3, [r7, #16]
 8016e28:	015a      	lsls	r2, r3, #5
 8016e2a:	697b      	ldr	r3, [r7, #20]
 8016e2c:	4413      	add	r3, r2
 8016e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016e32:	691b      	ldr	r3, [r3, #16]
 8016e34:	693a      	ldr	r2, [r7, #16]
 8016e36:	0151      	lsls	r1, r2, #5
 8016e38:	697a      	ldr	r2, [r7, #20]
 8016e3a:	440a      	add	r2, r1
 8016e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016e40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8016e44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8016e48:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8016e4a:	683b      	ldr	r3, [r7, #0]
 8016e4c:	699b      	ldr	r3, [r3, #24]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d123      	bne.n	8016e9a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8016e52:	693b      	ldr	r3, [r7, #16]
 8016e54:	015a      	lsls	r2, r3, #5
 8016e56:	697b      	ldr	r3, [r7, #20]
 8016e58:	4413      	add	r3, r2
 8016e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016e5e:	691a      	ldr	r2, [r3, #16]
 8016e60:	683b      	ldr	r3, [r7, #0]
 8016e62:	68db      	ldr	r3, [r3, #12]
 8016e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016e68:	6939      	ldr	r1, [r7, #16]
 8016e6a:	0148      	lsls	r0, r1, #5
 8016e6c:	6979      	ldr	r1, [r7, #20]
 8016e6e:	4401      	add	r1, r0
 8016e70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8016e74:	4313      	orrs	r3, r2
 8016e76:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8016e78:	693b      	ldr	r3, [r7, #16]
 8016e7a:	015a      	lsls	r2, r3, #5
 8016e7c:	697b      	ldr	r3, [r7, #20]
 8016e7e:	4413      	add	r3, r2
 8016e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016e84:	691b      	ldr	r3, [r3, #16]
 8016e86:	693a      	ldr	r2, [r7, #16]
 8016e88:	0151      	lsls	r1, r2, #5
 8016e8a:	697a      	ldr	r2, [r7, #20]
 8016e8c:	440a      	add	r2, r1
 8016e8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016e92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016e96:	6113      	str	r3, [r2, #16]
 8016e98:	e037      	b.n	8016f0a <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8016e9a:	683b      	ldr	r3, [r7, #0]
 8016e9c:	699a      	ldr	r2, [r3, #24]
 8016e9e:	683b      	ldr	r3, [r7, #0]
 8016ea0:	68db      	ldr	r3, [r3, #12]
 8016ea2:	4413      	add	r3, r2
 8016ea4:	1e5a      	subs	r2, r3, #1
 8016ea6:	683b      	ldr	r3, [r7, #0]
 8016ea8:	68db      	ldr	r3, [r3, #12]
 8016eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8016eae:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8016eb0:	683b      	ldr	r3, [r7, #0]
 8016eb2:	68db      	ldr	r3, [r3, #12]
 8016eb4:	89fa      	ldrh	r2, [r7, #14]
 8016eb6:	fb03 f202 	mul.w	r2, r3, r2
 8016eba:	683b      	ldr	r3, [r7, #0]
 8016ebc:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8016ebe:	693b      	ldr	r3, [r7, #16]
 8016ec0:	015a      	lsls	r2, r3, #5
 8016ec2:	697b      	ldr	r3, [r7, #20]
 8016ec4:	4413      	add	r3, r2
 8016ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016eca:	691a      	ldr	r2, [r3, #16]
 8016ecc:	89fb      	ldrh	r3, [r7, #14]
 8016ece:	04d9      	lsls	r1, r3, #19
 8016ed0:	4b1c      	ldr	r3, [pc, #112]	; (8016f44 <USB_EPStartXfer+0x370>)
 8016ed2:	400b      	ands	r3, r1
 8016ed4:	6939      	ldr	r1, [r7, #16]
 8016ed6:	0148      	lsls	r0, r1, #5
 8016ed8:	6979      	ldr	r1, [r7, #20]
 8016eda:	4401      	add	r1, r0
 8016edc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8016ee0:	4313      	orrs	r3, r2
 8016ee2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8016ee4:	693b      	ldr	r3, [r7, #16]
 8016ee6:	015a      	lsls	r2, r3, #5
 8016ee8:	697b      	ldr	r3, [r7, #20]
 8016eea:	4413      	add	r3, r2
 8016eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016ef0:	691a      	ldr	r2, [r3, #16]
 8016ef2:	683b      	ldr	r3, [r7, #0]
 8016ef4:	69db      	ldr	r3, [r3, #28]
 8016ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8016efa:	6939      	ldr	r1, [r7, #16]
 8016efc:	0148      	lsls	r0, r1, #5
 8016efe:	6979      	ldr	r1, [r7, #20]
 8016f00:	4401      	add	r1, r0
 8016f02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8016f06:	4313      	orrs	r3, r2
 8016f08:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8016f0a:	683b      	ldr	r3, [r7, #0]
 8016f0c:	791b      	ldrb	r3, [r3, #4]
 8016f0e:	2b01      	cmp	r3, #1
 8016f10:	d12a      	bne.n	8016f68 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8016f12:	697b      	ldr	r3, [r7, #20]
 8016f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8016f18:	689b      	ldr	r3, [r3, #8]
 8016f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d112      	bne.n	8016f48 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8016f22:	693b      	ldr	r3, [r7, #16]
 8016f24:	015a      	lsls	r2, r3, #5
 8016f26:	697b      	ldr	r3, [r7, #20]
 8016f28:	4413      	add	r3, r2
 8016f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	693a      	ldr	r2, [r7, #16]
 8016f32:	0151      	lsls	r1, r2, #5
 8016f34:	697a      	ldr	r2, [r7, #20]
 8016f36:	440a      	add	r2, r1
 8016f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016f3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8016f40:	6013      	str	r3, [r2, #0]
 8016f42:	e011      	b.n	8016f68 <USB_EPStartXfer+0x394>
 8016f44:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8016f48:	693b      	ldr	r3, [r7, #16]
 8016f4a:	015a      	lsls	r2, r3, #5
 8016f4c:	697b      	ldr	r3, [r7, #20]
 8016f4e:	4413      	add	r3, r2
 8016f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	693a      	ldr	r2, [r7, #16]
 8016f58:	0151      	lsls	r1, r2, #5
 8016f5a:	697a      	ldr	r2, [r7, #20]
 8016f5c:	440a      	add	r2, r1
 8016f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016f66:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8016f68:	693b      	ldr	r3, [r7, #16]
 8016f6a:	015a      	lsls	r2, r3, #5
 8016f6c:	697b      	ldr	r3, [r7, #20]
 8016f6e:	4413      	add	r3, r2
 8016f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	693a      	ldr	r2, [r7, #16]
 8016f78:	0151      	lsls	r1, r2, #5
 8016f7a:	697a      	ldr	r2, [r7, #20]
 8016f7c:	440a      	add	r2, r1
 8016f7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8016f82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8016f86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8016f88:	2300      	movs	r3, #0
}
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	3718      	adds	r7, #24
 8016f8e:	46bd      	mov	sp, r7
 8016f90:	bd80      	pop	{r7, pc}
 8016f92:	bf00      	nop

08016f94 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8016f94:	b480      	push	{r7}
 8016f96:	b085      	sub	sp, #20
 8016f98:	af00      	add	r7, sp, #0
 8016f9a:	6078      	str	r0, [r7, #4]
 8016f9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8016fa2:	683b      	ldr	r3, [r7, #0]
 8016fa4:	781b      	ldrb	r3, [r3, #0]
 8016fa6:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8016fa8:	683b      	ldr	r3, [r7, #0]
 8016faa:	785b      	ldrb	r3, [r3, #1]
 8016fac:	2b01      	cmp	r3, #1
 8016fae:	f040 80ab 	bne.w	8017108 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8016fb2:	683b      	ldr	r3, [r7, #0]
 8016fb4:	699b      	ldr	r3, [r3, #24]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d132      	bne.n	8017020 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8016fba:	68bb      	ldr	r3, [r7, #8]
 8016fbc:	015a      	lsls	r2, r3, #5
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	4413      	add	r3, r2
 8016fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016fc6:	691b      	ldr	r3, [r3, #16]
 8016fc8:	68ba      	ldr	r2, [r7, #8]
 8016fca:	0151      	lsls	r1, r2, #5
 8016fcc:	68fa      	ldr	r2, [r7, #12]
 8016fce:	440a      	add	r2, r1
 8016fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016fd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8016fd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8016fdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8016fde:	68bb      	ldr	r3, [r7, #8]
 8016fe0:	015a      	lsls	r2, r3, #5
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	4413      	add	r3, r2
 8016fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8016fea:	691b      	ldr	r3, [r3, #16]
 8016fec:	68ba      	ldr	r2, [r7, #8]
 8016fee:	0151      	lsls	r1, r2, #5
 8016ff0:	68fa      	ldr	r2, [r7, #12]
 8016ff2:	440a      	add	r2, r1
 8016ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8016ff8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016ffc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8016ffe:	68bb      	ldr	r3, [r7, #8]
 8017000:	015a      	lsls	r2, r3, #5
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	4413      	add	r3, r2
 8017006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801700a:	691b      	ldr	r3, [r3, #16]
 801700c:	68ba      	ldr	r2, [r7, #8]
 801700e:	0151      	lsls	r1, r2, #5
 8017010:	68fa      	ldr	r2, [r7, #12]
 8017012:	440a      	add	r2, r1
 8017014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017018:	0cdb      	lsrs	r3, r3, #19
 801701a:	04db      	lsls	r3, r3, #19
 801701c:	6113      	str	r3, [r2, #16]
 801701e:	e04e      	b.n	80170be <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8017020:	68bb      	ldr	r3, [r7, #8]
 8017022:	015a      	lsls	r2, r3, #5
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	4413      	add	r3, r2
 8017028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801702c:	691b      	ldr	r3, [r3, #16]
 801702e:	68ba      	ldr	r2, [r7, #8]
 8017030:	0151      	lsls	r1, r2, #5
 8017032:	68fa      	ldr	r2, [r7, #12]
 8017034:	440a      	add	r2, r1
 8017036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801703a:	0cdb      	lsrs	r3, r3, #19
 801703c:	04db      	lsls	r3, r3, #19
 801703e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8017040:	68bb      	ldr	r3, [r7, #8]
 8017042:	015a      	lsls	r2, r3, #5
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	4413      	add	r3, r2
 8017048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801704c:	691b      	ldr	r3, [r3, #16]
 801704e:	68ba      	ldr	r2, [r7, #8]
 8017050:	0151      	lsls	r1, r2, #5
 8017052:	68fa      	ldr	r2, [r7, #12]
 8017054:	440a      	add	r2, r1
 8017056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801705a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801705e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8017062:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8017064:	683b      	ldr	r3, [r7, #0]
 8017066:	699a      	ldr	r2, [r3, #24]
 8017068:	683b      	ldr	r3, [r7, #0]
 801706a:	68db      	ldr	r3, [r3, #12]
 801706c:	429a      	cmp	r2, r3
 801706e:	d903      	bls.n	8017078 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8017070:	683b      	ldr	r3, [r7, #0]
 8017072:	68da      	ldr	r2, [r3, #12]
 8017074:	683b      	ldr	r3, [r7, #0]
 8017076:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8017078:	68bb      	ldr	r3, [r7, #8]
 801707a:	015a      	lsls	r2, r3, #5
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	4413      	add	r3, r2
 8017080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017084:	691b      	ldr	r3, [r3, #16]
 8017086:	68ba      	ldr	r2, [r7, #8]
 8017088:	0151      	lsls	r1, r2, #5
 801708a:	68fa      	ldr	r2, [r7, #12]
 801708c:	440a      	add	r2, r1
 801708e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017092:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8017096:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8017098:	68bb      	ldr	r3, [r7, #8]
 801709a:	015a      	lsls	r2, r3, #5
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	4413      	add	r3, r2
 80170a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80170a4:	691a      	ldr	r2, [r3, #16]
 80170a6:	683b      	ldr	r3, [r7, #0]
 80170a8:	699b      	ldr	r3, [r3, #24]
 80170aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80170ae:	68b9      	ldr	r1, [r7, #8]
 80170b0:	0148      	lsls	r0, r1, #5
 80170b2:	68f9      	ldr	r1, [r7, #12]
 80170b4:	4401      	add	r1, r0
 80170b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80170ba:	4313      	orrs	r3, r2
 80170bc:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80170be:	68bb      	ldr	r3, [r7, #8]
 80170c0:	015a      	lsls	r2, r3, #5
 80170c2:	68fb      	ldr	r3, [r7, #12]
 80170c4:	4413      	add	r3, r2
 80170c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	68ba      	ldr	r2, [r7, #8]
 80170ce:	0151      	lsls	r1, r2, #5
 80170d0:	68fa      	ldr	r2, [r7, #12]
 80170d2:	440a      	add	r2, r1
 80170d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80170d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80170dc:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80170de:	683b      	ldr	r3, [r7, #0]
 80170e0:	699b      	ldr	r3, [r3, #24]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d071      	beq.n	80171ca <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80170ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80170ee:	683b      	ldr	r3, [r7, #0]
 80170f0:	781b      	ldrb	r3, [r3, #0]
 80170f2:	f003 030f 	and.w	r3, r3, #15
 80170f6:	2101      	movs	r1, #1
 80170f8:	fa01 f303 	lsl.w	r3, r1, r3
 80170fc:	68f9      	ldr	r1, [r7, #12]
 80170fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8017102:	4313      	orrs	r3, r2
 8017104:	634b      	str	r3, [r1, #52]	; 0x34
 8017106:	e060      	b.n	80171ca <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8017108:	68bb      	ldr	r3, [r7, #8]
 801710a:	015a      	lsls	r2, r3, #5
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	4413      	add	r3, r2
 8017110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017114:	691b      	ldr	r3, [r3, #16]
 8017116:	68ba      	ldr	r2, [r7, #8]
 8017118:	0151      	lsls	r1, r2, #5
 801711a:	68fa      	ldr	r2, [r7, #12]
 801711c:	440a      	add	r2, r1
 801711e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017122:	0cdb      	lsrs	r3, r3, #19
 8017124:	04db      	lsls	r3, r3, #19
 8017126:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8017128:	68bb      	ldr	r3, [r7, #8]
 801712a:	015a      	lsls	r2, r3, #5
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	4413      	add	r3, r2
 8017130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017134:	691b      	ldr	r3, [r3, #16]
 8017136:	68ba      	ldr	r2, [r7, #8]
 8017138:	0151      	lsls	r1, r2, #5
 801713a:	68fa      	ldr	r2, [r7, #12]
 801713c:	440a      	add	r2, r1
 801713e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017142:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8017146:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801714a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801714c:	683b      	ldr	r3, [r7, #0]
 801714e:	699b      	ldr	r3, [r3, #24]
 8017150:	2b00      	cmp	r3, #0
 8017152:	d003      	beq.n	801715c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8017154:	683b      	ldr	r3, [r7, #0]
 8017156:	68da      	ldr	r2, [r3, #12]
 8017158:	683b      	ldr	r3, [r7, #0]
 801715a:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 801715c:	683b      	ldr	r3, [r7, #0]
 801715e:	68da      	ldr	r2, [r3, #12]
 8017160:	683b      	ldr	r3, [r7, #0]
 8017162:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8017164:	68bb      	ldr	r3, [r7, #8]
 8017166:	015a      	lsls	r2, r3, #5
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	4413      	add	r3, r2
 801716c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017170:	691b      	ldr	r3, [r3, #16]
 8017172:	68ba      	ldr	r2, [r7, #8]
 8017174:	0151      	lsls	r1, r2, #5
 8017176:	68fa      	ldr	r2, [r7, #12]
 8017178:	440a      	add	r2, r1
 801717a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801717e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8017182:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8017184:	68bb      	ldr	r3, [r7, #8]
 8017186:	015a      	lsls	r2, r3, #5
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	4413      	add	r3, r2
 801718c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017190:	691a      	ldr	r2, [r3, #16]
 8017192:	683b      	ldr	r3, [r7, #0]
 8017194:	69db      	ldr	r3, [r3, #28]
 8017196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801719a:	68b9      	ldr	r1, [r7, #8]
 801719c:	0148      	lsls	r0, r1, #5
 801719e:	68f9      	ldr	r1, [r7, #12]
 80171a0:	4401      	add	r1, r0
 80171a2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80171a6:	4313      	orrs	r3, r2
 80171a8:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80171aa:	68bb      	ldr	r3, [r7, #8]
 80171ac:	015a      	lsls	r2, r3, #5
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	4413      	add	r3, r2
 80171b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	68ba      	ldr	r2, [r7, #8]
 80171ba:	0151      	lsls	r1, r2, #5
 80171bc:	68fa      	ldr	r2, [r7, #12]
 80171be:	440a      	add	r2, r1
 80171c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80171c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80171c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80171ca:	2300      	movs	r3, #0
}
 80171cc:	4618      	mov	r0, r3
 80171ce:	3714      	adds	r7, #20
 80171d0:	46bd      	mov	sp, r7
 80171d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d6:	4770      	bx	lr

080171d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80171d8:	b480      	push	{r7}
 80171da:	b087      	sub	sp, #28
 80171dc:	af00      	add	r7, sp, #0
 80171de:	6078      	str	r0, [r7, #4]
 80171e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80171e2:	2300      	movs	r3, #0
 80171e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80171e6:	2300      	movs	r3, #0
 80171e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80171ee:	683b      	ldr	r3, [r7, #0]
 80171f0:	785b      	ldrb	r3, [r3, #1]
 80171f2:	2b01      	cmp	r3, #1
 80171f4:	d14a      	bne.n	801728c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80171f6:	683b      	ldr	r3, [r7, #0]
 80171f8:	781b      	ldrb	r3, [r3, #0]
 80171fa:	015a      	lsls	r2, r3, #5
 80171fc:	693b      	ldr	r3, [r7, #16]
 80171fe:	4413      	add	r3, r2
 8017200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801720a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801720e:	f040 8086 	bne.w	801731e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8017212:	683b      	ldr	r3, [r7, #0]
 8017214:	781b      	ldrb	r3, [r3, #0]
 8017216:	015a      	lsls	r2, r3, #5
 8017218:	693b      	ldr	r3, [r7, #16]
 801721a:	4413      	add	r3, r2
 801721c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	683a      	ldr	r2, [r7, #0]
 8017224:	7812      	ldrb	r2, [r2, #0]
 8017226:	0151      	lsls	r1, r2, #5
 8017228:	693a      	ldr	r2, [r7, #16]
 801722a:	440a      	add	r2, r1
 801722c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017230:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8017234:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8017236:	683b      	ldr	r3, [r7, #0]
 8017238:	781b      	ldrb	r3, [r3, #0]
 801723a:	015a      	lsls	r2, r3, #5
 801723c:	693b      	ldr	r3, [r7, #16]
 801723e:	4413      	add	r3, r2
 8017240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	683a      	ldr	r2, [r7, #0]
 8017248:	7812      	ldrb	r2, [r2, #0]
 801724a:	0151      	lsls	r1, r2, #5
 801724c:	693a      	ldr	r2, [r7, #16]
 801724e:	440a      	add	r2, r1
 8017250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017254:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8017258:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	3301      	adds	r3, #1
 801725e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8017260:	68fb      	ldr	r3, [r7, #12]
 8017262:	f242 7210 	movw	r2, #10000	; 0x2710
 8017266:	4293      	cmp	r3, r2
 8017268:	d902      	bls.n	8017270 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801726a:	2301      	movs	r3, #1
 801726c:	75fb      	strb	r3, [r7, #23]
          break;
 801726e:	e056      	b.n	801731e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8017270:	683b      	ldr	r3, [r7, #0]
 8017272:	781b      	ldrb	r3, [r3, #0]
 8017274:	015a      	lsls	r2, r3, #5
 8017276:	693b      	ldr	r3, [r7, #16]
 8017278:	4413      	add	r3, r2
 801727a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017288:	d0e7      	beq.n	801725a <USB_EPStopXfer+0x82>
 801728a:	e048      	b.n	801731e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801728c:	683b      	ldr	r3, [r7, #0]
 801728e:	781b      	ldrb	r3, [r3, #0]
 8017290:	015a      	lsls	r2, r3, #5
 8017292:	693b      	ldr	r3, [r7, #16]
 8017294:	4413      	add	r3, r2
 8017296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801729a:	681b      	ldr	r3, [r3, #0]
 801729c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80172a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80172a4:	d13b      	bne.n	801731e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80172a6:	683b      	ldr	r3, [r7, #0]
 80172a8:	781b      	ldrb	r3, [r3, #0]
 80172aa:	015a      	lsls	r2, r3, #5
 80172ac:	693b      	ldr	r3, [r7, #16]
 80172ae:	4413      	add	r3, r2
 80172b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	683a      	ldr	r2, [r7, #0]
 80172b8:	7812      	ldrb	r2, [r2, #0]
 80172ba:	0151      	lsls	r1, r2, #5
 80172bc:	693a      	ldr	r2, [r7, #16]
 80172be:	440a      	add	r2, r1
 80172c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80172c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80172c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80172ca:	683b      	ldr	r3, [r7, #0]
 80172cc:	781b      	ldrb	r3, [r3, #0]
 80172ce:	015a      	lsls	r2, r3, #5
 80172d0:	693b      	ldr	r3, [r7, #16]
 80172d2:	4413      	add	r3, r2
 80172d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80172d8:	681b      	ldr	r3, [r3, #0]
 80172da:	683a      	ldr	r2, [r7, #0]
 80172dc:	7812      	ldrb	r2, [r2, #0]
 80172de:	0151      	lsls	r1, r2, #5
 80172e0:	693a      	ldr	r2, [r7, #16]
 80172e2:	440a      	add	r2, r1
 80172e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80172e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80172ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	3301      	adds	r3, #1
 80172f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80172fa:	4293      	cmp	r3, r2
 80172fc:	d902      	bls.n	8017304 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80172fe:	2301      	movs	r3, #1
 8017300:	75fb      	strb	r3, [r7, #23]
          break;
 8017302:	e00c      	b.n	801731e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8017304:	683b      	ldr	r3, [r7, #0]
 8017306:	781b      	ldrb	r3, [r3, #0]
 8017308:	015a      	lsls	r2, r3, #5
 801730a:	693b      	ldr	r3, [r7, #16]
 801730c:	4413      	add	r3, r2
 801730e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017318:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801731c:	d0e7      	beq.n	80172ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801731e:	7dfb      	ldrb	r3, [r7, #23]
}
 8017320:	4618      	mov	r0, r3
 8017322:	371c      	adds	r7, #28
 8017324:	46bd      	mov	sp, r7
 8017326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801732a:	4770      	bx	lr

0801732c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 801732c:	b480      	push	{r7}
 801732e:	b089      	sub	sp, #36	; 0x24
 8017330:	af00      	add	r7, sp, #0
 8017332:	60f8      	str	r0, [r7, #12]
 8017334:	60b9      	str	r1, [r7, #8]
 8017336:	4611      	mov	r1, r2
 8017338:	461a      	mov	r2, r3
 801733a:	460b      	mov	r3, r1
 801733c:	71fb      	strb	r3, [r7, #7]
 801733e:	4613      	mov	r3, r2
 8017340:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8017346:	68bb      	ldr	r3, [r7, #8]
 8017348:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 801734a:	88bb      	ldrh	r3, [r7, #4]
 801734c:	3303      	adds	r3, #3
 801734e:	089b      	lsrs	r3, r3, #2
 8017350:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8017352:	2300      	movs	r3, #0
 8017354:	61bb      	str	r3, [r7, #24]
 8017356:	e018      	b.n	801738a <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8017358:	79fb      	ldrb	r3, [r7, #7]
 801735a:	031a      	lsls	r2, r3, #12
 801735c:	697b      	ldr	r3, [r7, #20]
 801735e:	4413      	add	r3, r2
 8017360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017364:	461a      	mov	r2, r3
 8017366:	69fb      	ldr	r3, [r7, #28]
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	6013      	str	r3, [r2, #0]
    pSrc++;
 801736c:	69fb      	ldr	r3, [r7, #28]
 801736e:	3301      	adds	r3, #1
 8017370:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8017372:	69fb      	ldr	r3, [r7, #28]
 8017374:	3301      	adds	r3, #1
 8017376:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8017378:	69fb      	ldr	r3, [r7, #28]
 801737a:	3301      	adds	r3, #1
 801737c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 801737e:	69fb      	ldr	r3, [r7, #28]
 8017380:	3301      	adds	r3, #1
 8017382:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8017384:	69bb      	ldr	r3, [r7, #24]
 8017386:	3301      	adds	r3, #1
 8017388:	61bb      	str	r3, [r7, #24]
 801738a:	69ba      	ldr	r2, [r7, #24]
 801738c:	693b      	ldr	r3, [r7, #16]
 801738e:	429a      	cmp	r2, r3
 8017390:	d3e2      	bcc.n	8017358 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8017392:	2300      	movs	r3, #0
}
 8017394:	4618      	mov	r0, r3
 8017396:	3724      	adds	r7, #36	; 0x24
 8017398:	46bd      	mov	sp, r7
 801739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801739e:	4770      	bx	lr

080173a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80173a0:	b480      	push	{r7}
 80173a2:	b08b      	sub	sp, #44	; 0x2c
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	60f8      	str	r0, [r7, #12]
 80173a8:	60b9      	str	r1, [r7, #8]
 80173aa:	4613      	mov	r3, r2
 80173ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80173b2:	68bb      	ldr	r3, [r7, #8]
 80173b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80173b6:	88fb      	ldrh	r3, [r7, #6]
 80173b8:	089b      	lsrs	r3, r3, #2
 80173ba:	b29b      	uxth	r3, r3
 80173bc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80173be:	88fb      	ldrh	r3, [r7, #6]
 80173c0:	f003 0303 	and.w	r3, r3, #3
 80173c4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80173c6:	2300      	movs	r3, #0
 80173c8:	623b      	str	r3, [r7, #32]
 80173ca:	e014      	b.n	80173f6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80173cc:	69bb      	ldr	r3, [r7, #24]
 80173ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80173d2:	681a      	ldr	r2, [r3, #0]
 80173d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173d6:	601a      	str	r2, [r3, #0]
    pDest++;
 80173d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173da:	3301      	adds	r3, #1
 80173dc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80173de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173e0:	3301      	adds	r3, #1
 80173e2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80173e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173e6:	3301      	adds	r3, #1
 80173e8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80173ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173ec:	3301      	adds	r3, #1
 80173ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80173f0:	6a3b      	ldr	r3, [r7, #32]
 80173f2:	3301      	adds	r3, #1
 80173f4:	623b      	str	r3, [r7, #32]
 80173f6:	6a3a      	ldr	r2, [r7, #32]
 80173f8:	697b      	ldr	r3, [r7, #20]
 80173fa:	429a      	cmp	r2, r3
 80173fc:	d3e6      	bcc.n	80173cc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80173fe:	8bfb      	ldrh	r3, [r7, #30]
 8017400:	2b00      	cmp	r3, #0
 8017402:	d01e      	beq.n	8017442 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8017404:	2300      	movs	r3, #0
 8017406:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8017408:	69bb      	ldr	r3, [r7, #24]
 801740a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801740e:	461a      	mov	r2, r3
 8017410:	f107 0310 	add.w	r3, r7, #16
 8017414:	6812      	ldr	r2, [r2, #0]
 8017416:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8017418:	693a      	ldr	r2, [r7, #16]
 801741a:	6a3b      	ldr	r3, [r7, #32]
 801741c:	b2db      	uxtb	r3, r3
 801741e:	00db      	lsls	r3, r3, #3
 8017420:	fa22 f303 	lsr.w	r3, r2, r3
 8017424:	b2da      	uxtb	r2, r3
 8017426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017428:	701a      	strb	r2, [r3, #0]
      i++;
 801742a:	6a3b      	ldr	r3, [r7, #32]
 801742c:	3301      	adds	r3, #1
 801742e:	623b      	str	r3, [r7, #32]
      pDest++;
 8017430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017432:	3301      	adds	r3, #1
 8017434:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8017436:	8bfb      	ldrh	r3, [r7, #30]
 8017438:	3b01      	subs	r3, #1
 801743a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801743c:	8bfb      	ldrh	r3, [r7, #30]
 801743e:	2b00      	cmp	r3, #0
 8017440:	d1ea      	bne.n	8017418 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8017442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017444:	4618      	mov	r0, r3
 8017446:	372c      	adds	r7, #44	; 0x2c
 8017448:	46bd      	mov	sp, r7
 801744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801744e:	4770      	bx	lr

08017450 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8017450:	b480      	push	{r7}
 8017452:	b085      	sub	sp, #20
 8017454:	af00      	add	r7, sp, #0
 8017456:	6078      	str	r0, [r7, #4]
 8017458:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801745e:	683b      	ldr	r3, [r7, #0]
 8017460:	781b      	ldrb	r3, [r3, #0]
 8017462:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8017464:	683b      	ldr	r3, [r7, #0]
 8017466:	785b      	ldrb	r3, [r3, #1]
 8017468:	2b01      	cmp	r3, #1
 801746a:	d12c      	bne.n	80174c6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801746c:	68bb      	ldr	r3, [r7, #8]
 801746e:	015a      	lsls	r2, r3, #5
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	4413      	add	r3, r2
 8017474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	2b00      	cmp	r3, #0
 801747c:	db12      	blt.n	80174a4 <USB_EPSetStall+0x54>
 801747e:	68bb      	ldr	r3, [r7, #8]
 8017480:	2b00      	cmp	r3, #0
 8017482:	d00f      	beq.n	80174a4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8017484:	68bb      	ldr	r3, [r7, #8]
 8017486:	015a      	lsls	r2, r3, #5
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	4413      	add	r3, r2
 801748c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	68ba      	ldr	r2, [r7, #8]
 8017494:	0151      	lsls	r1, r2, #5
 8017496:	68fa      	ldr	r2, [r7, #12]
 8017498:	440a      	add	r2, r1
 801749a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801749e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80174a2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80174a4:	68bb      	ldr	r3, [r7, #8]
 80174a6:	015a      	lsls	r2, r3, #5
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	4413      	add	r3, r2
 80174ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80174b0:	681b      	ldr	r3, [r3, #0]
 80174b2:	68ba      	ldr	r2, [r7, #8]
 80174b4:	0151      	lsls	r1, r2, #5
 80174b6:	68fa      	ldr	r2, [r7, #12]
 80174b8:	440a      	add	r2, r1
 80174ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80174be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80174c2:	6013      	str	r3, [r2, #0]
 80174c4:	e02b      	b.n	801751e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80174c6:	68bb      	ldr	r3, [r7, #8]
 80174c8:	015a      	lsls	r2, r3, #5
 80174ca:	68fb      	ldr	r3, [r7, #12]
 80174cc:	4413      	add	r3, r2
 80174ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80174d2:	681b      	ldr	r3, [r3, #0]
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	db12      	blt.n	80174fe <USB_EPSetStall+0xae>
 80174d8:	68bb      	ldr	r3, [r7, #8]
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d00f      	beq.n	80174fe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80174de:	68bb      	ldr	r3, [r7, #8]
 80174e0:	015a      	lsls	r2, r3, #5
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	4413      	add	r3, r2
 80174e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80174ea:	681b      	ldr	r3, [r3, #0]
 80174ec:	68ba      	ldr	r2, [r7, #8]
 80174ee:	0151      	lsls	r1, r2, #5
 80174f0:	68fa      	ldr	r2, [r7, #12]
 80174f2:	440a      	add	r2, r1
 80174f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80174f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80174fc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80174fe:	68bb      	ldr	r3, [r7, #8]
 8017500:	015a      	lsls	r2, r3, #5
 8017502:	68fb      	ldr	r3, [r7, #12]
 8017504:	4413      	add	r3, r2
 8017506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	68ba      	ldr	r2, [r7, #8]
 801750e:	0151      	lsls	r1, r2, #5
 8017510:	68fa      	ldr	r2, [r7, #12]
 8017512:	440a      	add	r2, r1
 8017514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8017518:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801751c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801751e:	2300      	movs	r3, #0
}
 8017520:	4618      	mov	r0, r3
 8017522:	3714      	adds	r7, #20
 8017524:	46bd      	mov	sp, r7
 8017526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801752a:	4770      	bx	lr

0801752c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801752c:	b480      	push	{r7}
 801752e:	b085      	sub	sp, #20
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
 8017534:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801753a:	683b      	ldr	r3, [r7, #0]
 801753c:	781b      	ldrb	r3, [r3, #0]
 801753e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8017540:	683b      	ldr	r3, [r7, #0]
 8017542:	785b      	ldrb	r3, [r3, #1]
 8017544:	2b01      	cmp	r3, #1
 8017546:	d128      	bne.n	801759a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8017548:	68bb      	ldr	r3, [r7, #8]
 801754a:	015a      	lsls	r2, r3, #5
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	4413      	add	r3, r2
 8017550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	68ba      	ldr	r2, [r7, #8]
 8017558:	0151      	lsls	r1, r2, #5
 801755a:	68fa      	ldr	r2, [r7, #12]
 801755c:	440a      	add	r2, r1
 801755e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017562:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8017566:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8017568:	683b      	ldr	r3, [r7, #0]
 801756a:	791b      	ldrb	r3, [r3, #4]
 801756c:	2b03      	cmp	r3, #3
 801756e:	d003      	beq.n	8017578 <USB_EPClearStall+0x4c>
 8017570:	683b      	ldr	r3, [r7, #0]
 8017572:	791b      	ldrb	r3, [r3, #4]
 8017574:	2b02      	cmp	r3, #2
 8017576:	d138      	bne.n	80175ea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8017578:	68bb      	ldr	r3, [r7, #8]
 801757a:	015a      	lsls	r2, r3, #5
 801757c:	68fb      	ldr	r3, [r7, #12]
 801757e:	4413      	add	r3, r2
 8017580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8017584:	681b      	ldr	r3, [r3, #0]
 8017586:	68ba      	ldr	r2, [r7, #8]
 8017588:	0151      	lsls	r1, r2, #5
 801758a:	68fa      	ldr	r2, [r7, #12]
 801758c:	440a      	add	r2, r1
 801758e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017596:	6013      	str	r3, [r2, #0]
 8017598:	e027      	b.n	80175ea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801759a:	68bb      	ldr	r3, [r7, #8]
 801759c:	015a      	lsls	r2, r3, #5
 801759e:	68fb      	ldr	r3, [r7, #12]
 80175a0:	4413      	add	r3, r2
 80175a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	68ba      	ldr	r2, [r7, #8]
 80175aa:	0151      	lsls	r1, r2, #5
 80175ac:	68fa      	ldr	r2, [r7, #12]
 80175ae:	440a      	add	r2, r1
 80175b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80175b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80175b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80175ba:	683b      	ldr	r3, [r7, #0]
 80175bc:	791b      	ldrb	r3, [r3, #4]
 80175be:	2b03      	cmp	r3, #3
 80175c0:	d003      	beq.n	80175ca <USB_EPClearStall+0x9e>
 80175c2:	683b      	ldr	r3, [r7, #0]
 80175c4:	791b      	ldrb	r3, [r3, #4]
 80175c6:	2b02      	cmp	r3, #2
 80175c8:	d10f      	bne.n	80175ea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80175ca:	68bb      	ldr	r3, [r7, #8]
 80175cc:	015a      	lsls	r2, r3, #5
 80175ce:	68fb      	ldr	r3, [r7, #12]
 80175d0:	4413      	add	r3, r2
 80175d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	68ba      	ldr	r2, [r7, #8]
 80175da:	0151      	lsls	r1, r2, #5
 80175dc:	68fa      	ldr	r2, [r7, #12]
 80175de:	440a      	add	r2, r1
 80175e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80175e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80175e8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80175ea:	2300      	movs	r3, #0
}
 80175ec:	4618      	mov	r0, r3
 80175ee:	3714      	adds	r7, #20
 80175f0:	46bd      	mov	sp, r7
 80175f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175f6:	4770      	bx	lr

080175f8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80175f8:	b480      	push	{r7}
 80175fa:	b085      	sub	sp, #20
 80175fc:	af00      	add	r7, sp, #0
 80175fe:	6078      	str	r0, [r7, #4]
 8017600:	460b      	mov	r3, r1
 8017602:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	68fa      	ldr	r2, [r7, #12]
 8017612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017616:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801761a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017622:	681a      	ldr	r2, [r3, #0]
 8017624:	78fb      	ldrb	r3, [r7, #3]
 8017626:	011b      	lsls	r3, r3, #4
 8017628:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801762c:	68f9      	ldr	r1, [r7, #12]
 801762e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8017632:	4313      	orrs	r3, r2
 8017634:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8017636:	2300      	movs	r3, #0
}
 8017638:	4618      	mov	r0, r3
 801763a:	3714      	adds	r7, #20
 801763c:	46bd      	mov	sp, r7
 801763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017642:	4770      	bx	lr

08017644 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8017644:	b480      	push	{r7}
 8017646:	b085      	sub	sp, #20
 8017648:	af00      	add	r7, sp, #0
 801764a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	68fa      	ldr	r2, [r7, #12]
 801765a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801765e:	f023 0303 	bic.w	r3, r3, #3
 8017662:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8017664:	68fb      	ldr	r3, [r7, #12]
 8017666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801766a:	685b      	ldr	r3, [r3, #4]
 801766c:	68fa      	ldr	r2, [r7, #12]
 801766e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8017672:	f023 0302 	bic.w	r3, r3, #2
 8017676:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8017678:	2300      	movs	r3, #0
}
 801767a:	4618      	mov	r0, r3
 801767c:	3714      	adds	r7, #20
 801767e:	46bd      	mov	sp, r7
 8017680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017684:	4770      	bx	lr

08017686 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8017686:	b480      	push	{r7}
 8017688:	b085      	sub	sp, #20
 801768a:	af00      	add	r7, sp, #0
 801768c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8017692:	68fb      	ldr	r3, [r7, #12]
 8017694:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017698:	681b      	ldr	r3, [r3, #0]
 801769a:	68fa      	ldr	r2, [r7, #12]
 801769c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80176a0:	f023 0303 	bic.w	r3, r3, #3
 80176a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80176a6:	68fb      	ldr	r3, [r7, #12]
 80176a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80176ac:	685b      	ldr	r3, [r3, #4]
 80176ae:	68fa      	ldr	r2, [r7, #12]
 80176b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80176b4:	f043 0302 	orr.w	r3, r3, #2
 80176b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80176ba:	2300      	movs	r3, #0
}
 80176bc:	4618      	mov	r0, r3
 80176be:	3714      	adds	r7, #20
 80176c0:	46bd      	mov	sp, r7
 80176c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c6:	4770      	bx	lr

080176c8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80176c8:	b480      	push	{r7}
 80176ca:	b085      	sub	sp, #20
 80176cc:	af00      	add	r7, sp, #0
 80176ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	695b      	ldr	r3, [r3, #20]
 80176d4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	699b      	ldr	r3, [r3, #24]
 80176da:	68fa      	ldr	r2, [r7, #12]
 80176dc:	4013      	ands	r3, r2
 80176de:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80176e0:	68fb      	ldr	r3, [r7, #12]
}
 80176e2:	4618      	mov	r0, r3
 80176e4:	3714      	adds	r7, #20
 80176e6:	46bd      	mov	sp, r7
 80176e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ec:	4770      	bx	lr

080176ee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80176ee:	b480      	push	{r7}
 80176f0:	b085      	sub	sp, #20
 80176f2:	af00      	add	r7, sp, #0
 80176f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017700:	699b      	ldr	r3, [r3, #24]
 8017702:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801770a:	69db      	ldr	r3, [r3, #28]
 801770c:	68ba      	ldr	r2, [r7, #8]
 801770e:	4013      	ands	r3, r2
 8017710:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8017712:	68bb      	ldr	r3, [r7, #8]
 8017714:	0c1b      	lsrs	r3, r3, #16
}
 8017716:	4618      	mov	r0, r3
 8017718:	3714      	adds	r7, #20
 801771a:	46bd      	mov	sp, r7
 801771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017720:	4770      	bx	lr

08017722 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8017722:	b480      	push	{r7}
 8017724:	b085      	sub	sp, #20
 8017726:	af00      	add	r7, sp, #0
 8017728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017734:	699b      	ldr	r3, [r3, #24]
 8017736:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801773e:	69db      	ldr	r3, [r3, #28]
 8017740:	68ba      	ldr	r2, [r7, #8]
 8017742:	4013      	ands	r3, r2
 8017744:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8017746:	68bb      	ldr	r3, [r7, #8]
 8017748:	b29b      	uxth	r3, r3
}
 801774a:	4618      	mov	r0, r3
 801774c:	3714      	adds	r7, #20
 801774e:	46bd      	mov	sp, r7
 8017750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017754:	4770      	bx	lr

08017756 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8017756:	b480      	push	{r7}
 8017758:	b085      	sub	sp, #20
 801775a:	af00      	add	r7, sp, #0
 801775c:	6078      	str	r0, [r7, #4]
 801775e:	460b      	mov	r3, r1
 8017760:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8017766:	78fb      	ldrb	r3, [r7, #3]
 8017768:	015a      	lsls	r2, r3, #5
 801776a:	68fb      	ldr	r3, [r7, #12]
 801776c:	4413      	add	r3, r2
 801776e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017772:	689b      	ldr	r3, [r3, #8]
 8017774:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801777c:	695b      	ldr	r3, [r3, #20]
 801777e:	68ba      	ldr	r2, [r7, #8]
 8017780:	4013      	ands	r3, r2
 8017782:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8017784:	68bb      	ldr	r3, [r7, #8]
}
 8017786:	4618      	mov	r0, r3
 8017788:	3714      	adds	r7, #20
 801778a:	46bd      	mov	sp, r7
 801778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017790:	4770      	bx	lr

08017792 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8017792:	b480      	push	{r7}
 8017794:	b087      	sub	sp, #28
 8017796:	af00      	add	r7, sp, #0
 8017798:	6078      	str	r0, [r7, #4]
 801779a:	460b      	mov	r3, r1
 801779c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80177a2:	697b      	ldr	r3, [r7, #20]
 80177a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80177a8:	691b      	ldr	r3, [r3, #16]
 80177aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80177ac:	697b      	ldr	r3, [r7, #20]
 80177ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80177b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80177b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80177b6:	78fb      	ldrb	r3, [r7, #3]
 80177b8:	f003 030f 	and.w	r3, r3, #15
 80177bc:	68fa      	ldr	r2, [r7, #12]
 80177be:	fa22 f303 	lsr.w	r3, r2, r3
 80177c2:	01db      	lsls	r3, r3, #7
 80177c4:	b2db      	uxtb	r3, r3
 80177c6:	693a      	ldr	r2, [r7, #16]
 80177c8:	4313      	orrs	r3, r2
 80177ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80177cc:	78fb      	ldrb	r3, [r7, #3]
 80177ce:	015a      	lsls	r2, r3, #5
 80177d0:	697b      	ldr	r3, [r7, #20]
 80177d2:	4413      	add	r3, r2
 80177d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80177d8:	689b      	ldr	r3, [r3, #8]
 80177da:	693a      	ldr	r2, [r7, #16]
 80177dc:	4013      	ands	r3, r2
 80177de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80177e0:	68bb      	ldr	r3, [r7, #8]
}
 80177e2:	4618      	mov	r0, r3
 80177e4:	371c      	adds	r7, #28
 80177e6:	46bd      	mov	sp, r7
 80177e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ec:	4770      	bx	lr

080177ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80177ee:	b480      	push	{r7}
 80177f0:	b083      	sub	sp, #12
 80177f2:	af00      	add	r7, sp, #0
 80177f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	695b      	ldr	r3, [r3, #20]
 80177fa:	f003 0301 	and.w	r3, r3, #1
}
 80177fe:	4618      	mov	r0, r3
 8017800:	370c      	adds	r7, #12
 8017802:	46bd      	mov	sp, r7
 8017804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017808:	4770      	bx	lr

0801780a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801780a:	b480      	push	{r7}
 801780c:	b085      	sub	sp, #20
 801780e:	af00      	add	r7, sp, #0
 8017810:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	68fa      	ldr	r2, [r7, #12]
 8017820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8017824:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8017828:	f023 0307 	bic.w	r3, r3, #7
 801782c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8017834:	685b      	ldr	r3, [r3, #4]
 8017836:	68fa      	ldr	r2, [r7, #12]
 8017838:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801783c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017840:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8017842:	2300      	movs	r3, #0
}
 8017844:	4618      	mov	r0, r3
 8017846:	3714      	adds	r7, #20
 8017848:	46bd      	mov	sp, r7
 801784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801784e:	4770      	bx	lr

08017850 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8017850:	b480      	push	{r7}
 8017852:	b085      	sub	sp, #20
 8017854:	af00      	add	r7, sp, #0
 8017856:	6078      	str	r0, [r7, #4]
 8017858:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	333c      	adds	r3, #60	; 0x3c
 8017862:	3304      	adds	r3, #4
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8017868:	68bb      	ldr	r3, [r7, #8]
 801786a:	4a1c      	ldr	r2, [pc, #112]	; (80178dc <USB_EP0_OutStart+0x8c>)
 801786c:	4293      	cmp	r3, r2
 801786e:	d90a      	bls.n	8017886 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801787c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017880:	d101      	bne.n	8017886 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8017882:	2300      	movs	r3, #0
 8017884:	e024      	b.n	80178d0 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801788c:	461a      	mov	r2, r3
 801788e:	2300      	movs	r3, #0
 8017890:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8017898:	691b      	ldr	r3, [r3, #16]
 801789a:	68fa      	ldr	r2, [r7, #12]
 801789c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80178a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80178a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80178ac:	691b      	ldr	r3, [r3, #16]
 80178ae:	68fa      	ldr	r2, [r7, #12]
 80178b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80178b4:	f043 0318 	orr.w	r3, r3, #24
 80178b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80178c0:	691b      	ldr	r3, [r3, #16]
 80178c2:	68fa      	ldr	r2, [r7, #12]
 80178c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80178c8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80178cc:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80178ce:	2300      	movs	r3, #0
}
 80178d0:	4618      	mov	r0, r3
 80178d2:	3714      	adds	r7, #20
 80178d4:	46bd      	mov	sp, r7
 80178d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178da:	4770      	bx	lr
 80178dc:	4f54300a 	.word	0x4f54300a

080178e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80178e0:	b480      	push	{r7}
 80178e2:	b085      	sub	sp, #20
 80178e4:	af00      	add	r7, sp, #0
 80178e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80178e8:	2300      	movs	r3, #0
 80178ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	3301      	adds	r3, #1
 80178f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	4a13      	ldr	r2, [pc, #76]	; (8017944 <USB_CoreReset+0x64>)
 80178f6:	4293      	cmp	r3, r2
 80178f8:	d901      	bls.n	80178fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80178fa:	2303      	movs	r3, #3
 80178fc:	e01b      	b.n	8017936 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	691b      	ldr	r3, [r3, #16]
 8017902:	2b00      	cmp	r3, #0
 8017904:	daf2      	bge.n	80178ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8017906:	2300      	movs	r3, #0
 8017908:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	691b      	ldr	r3, [r3, #16]
 801790e:	f043 0201 	orr.w	r2, r3, #1
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	3301      	adds	r3, #1
 801791a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	4a09      	ldr	r2, [pc, #36]	; (8017944 <USB_CoreReset+0x64>)
 8017920:	4293      	cmp	r3, r2
 8017922:	d901      	bls.n	8017928 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8017924:	2303      	movs	r3, #3
 8017926:	e006      	b.n	8017936 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	691b      	ldr	r3, [r3, #16]
 801792c:	f003 0301 	and.w	r3, r3, #1
 8017930:	2b01      	cmp	r3, #1
 8017932:	d0f0      	beq.n	8017916 <USB_CoreReset+0x36>

  return HAL_OK;
 8017934:	2300      	movs	r3, #0
}
 8017936:	4618      	mov	r0, r3
 8017938:	3714      	adds	r7, #20
 801793a:	46bd      	mov	sp, r7
 801793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017940:	4770      	bx	lr
 8017942:	bf00      	nop
 8017944:	00030d40 	.word	0x00030d40

08017948 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017948:	b580      	push	{r7, lr}
 801794a:	b084      	sub	sp, #16
 801794c:	af00      	add	r7, sp, #0
 801794e:	6078      	str	r0, [r7, #4]
 8017950:	460b      	mov	r3, r1
 8017952:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8017954:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8017958:	f002 fa6c 	bl	8019e34 <USBD_static_malloc>
 801795c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	2b00      	cmp	r3, #0
 8017962:	d105      	bne.n	8017970 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	2200      	movs	r2, #0
 8017968:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801796c:	2302      	movs	r3, #2
 801796e:	e066      	b.n	8017a3e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	68fa      	ldr	r2, [r7, #12]
 8017974:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	7c1b      	ldrb	r3, [r3, #16]
 801797c:	2b00      	cmp	r3, #0
 801797e:	d119      	bne.n	80179b4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8017980:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017984:	2202      	movs	r2, #2
 8017986:	2181      	movs	r1, #129	; 0x81
 8017988:	6878      	ldr	r0, [r7, #4]
 801798a:	f002 f83f 	bl	8019a0c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	2201      	movs	r2, #1
 8017992:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8017994:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017998:	2202      	movs	r2, #2
 801799a:	2101      	movs	r1, #1
 801799c:	6878      	ldr	r0, [r7, #4]
 801799e:	f002 f835 	bl	8019a0c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	2201      	movs	r2, #1
 80179a6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	2210      	movs	r2, #16
 80179ae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80179b2:	e016      	b.n	80179e2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80179b4:	2340      	movs	r3, #64	; 0x40
 80179b6:	2202      	movs	r2, #2
 80179b8:	2181      	movs	r1, #129	; 0x81
 80179ba:	6878      	ldr	r0, [r7, #4]
 80179bc:	f002 f826 	bl	8019a0c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	2201      	movs	r2, #1
 80179c4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80179c6:	2340      	movs	r3, #64	; 0x40
 80179c8:	2202      	movs	r2, #2
 80179ca:	2101      	movs	r1, #1
 80179cc:	6878      	ldr	r0, [r7, #4]
 80179ce:	f002 f81d 	bl	8019a0c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	2201      	movs	r2, #1
 80179d6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	2210      	movs	r2, #16
 80179de:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80179e2:	2308      	movs	r3, #8
 80179e4:	2203      	movs	r2, #3
 80179e6:	2182      	movs	r1, #130	; 0x82
 80179e8:	6878      	ldr	r0, [r7, #4]
 80179ea:	f002 f80f 	bl	8019a0c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	2201      	movs	r2, #1
 80179f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	2200      	movs	r2, #0
 8017a04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	2200      	movs	r2, #0
 8017a0c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	7c1b      	ldrb	r3, [r3, #16]
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d109      	bne.n	8017a2c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8017a1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017a22:	2101      	movs	r1, #1
 8017a24:	6878      	ldr	r0, [r7, #4]
 8017a26:	f002 f96b 	bl	8019d00 <USBD_LL_PrepareReceive>
 8017a2a:	e007      	b.n	8017a3c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8017a32:	2340      	movs	r3, #64	; 0x40
 8017a34:	2101      	movs	r1, #1
 8017a36:	6878      	ldr	r0, [r7, #4]
 8017a38:	f002 f962 	bl	8019d00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8017a3c:	2300      	movs	r3, #0
}
 8017a3e:	4618      	mov	r0, r3
 8017a40:	3710      	adds	r7, #16
 8017a42:	46bd      	mov	sp, r7
 8017a44:	bd80      	pop	{r7, pc}

08017a46 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017a46:	b580      	push	{r7, lr}
 8017a48:	b082      	sub	sp, #8
 8017a4a:	af00      	add	r7, sp, #0
 8017a4c:	6078      	str	r0, [r7, #4]
 8017a4e:	460b      	mov	r3, r1
 8017a50:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8017a52:	2181      	movs	r1, #129	; 0x81
 8017a54:	6878      	ldr	r0, [r7, #4]
 8017a56:	f002 f817 	bl	8019a88 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	2200      	movs	r2, #0
 8017a5e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8017a60:	2101      	movs	r1, #1
 8017a62:	6878      	ldr	r0, [r7, #4]
 8017a64:	f002 f810 	bl	8019a88 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	2200      	movs	r2, #0
 8017a6c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8017a70:	2182      	movs	r1, #130	; 0x82
 8017a72:	6878      	ldr	r0, [r7, #4]
 8017a74:	f002 f808 	bl	8019a88 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	2200      	movs	r2, #0
 8017a7c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	2200      	movs	r2, #0
 8017a84:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d00e      	beq.n	8017ab0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017a98:	685b      	ldr	r3, [r3, #4]
 8017a9a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	f002 f9d4 	bl	8019e50 <USBD_static_free>
    pdev->pClassData = NULL;
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	2200      	movs	r2, #0
 8017aac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8017ab0:	2300      	movs	r3, #0
}
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	3708      	adds	r7, #8
 8017ab6:	46bd      	mov	sp, r7
 8017ab8:	bd80      	pop	{r7, pc}
	...

08017abc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8017abc:	b580      	push	{r7, lr}
 8017abe:	b086      	sub	sp, #24
 8017ac0:	af00      	add	r7, sp, #0
 8017ac2:	6078      	str	r0, [r7, #4]
 8017ac4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017acc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8017ace:	2300      	movs	r3, #0
 8017ad0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8017ad6:	2300      	movs	r3, #0
 8017ad8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8017ada:	693b      	ldr	r3, [r7, #16]
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d101      	bne.n	8017ae4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8017ae0:	2303      	movs	r3, #3
 8017ae2:	e0af      	b.n	8017c44 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017ae4:	683b      	ldr	r3, [r7, #0]
 8017ae6:	781b      	ldrb	r3, [r3, #0]
 8017ae8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d03f      	beq.n	8017b70 <USBD_CDC_Setup+0xb4>
 8017af0:	2b20      	cmp	r3, #32
 8017af2:	f040 809f 	bne.w	8017c34 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8017af6:	683b      	ldr	r3, [r7, #0]
 8017af8:	88db      	ldrh	r3, [r3, #6]
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d02e      	beq.n	8017b5c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8017afe:	683b      	ldr	r3, [r7, #0]
 8017b00:	781b      	ldrb	r3, [r3, #0]
 8017b02:	b25b      	sxtb	r3, r3
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	da16      	bge.n	8017b36 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017b0e:	689b      	ldr	r3, [r3, #8]
 8017b10:	683a      	ldr	r2, [r7, #0]
 8017b12:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8017b14:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8017b16:	683a      	ldr	r2, [r7, #0]
 8017b18:	88d2      	ldrh	r2, [r2, #6]
 8017b1a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8017b1c:	683b      	ldr	r3, [r7, #0]
 8017b1e:	88db      	ldrh	r3, [r3, #6]
 8017b20:	2b07      	cmp	r3, #7
 8017b22:	bf28      	it	cs
 8017b24:	2307      	movcs	r3, #7
 8017b26:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8017b28:	693b      	ldr	r3, [r7, #16]
 8017b2a:	89fa      	ldrh	r2, [r7, #14]
 8017b2c:	4619      	mov	r1, r3
 8017b2e:	6878      	ldr	r0, [r7, #4]
 8017b30:	f001 fb13 	bl	801915a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8017b34:	e085      	b.n	8017c42 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8017b36:	683b      	ldr	r3, [r7, #0]
 8017b38:	785a      	ldrb	r2, [r3, #1]
 8017b3a:	693b      	ldr	r3, [r7, #16]
 8017b3c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8017b40:	683b      	ldr	r3, [r7, #0]
 8017b42:	88db      	ldrh	r3, [r3, #6]
 8017b44:	b2da      	uxtb	r2, r3
 8017b46:	693b      	ldr	r3, [r7, #16]
 8017b48:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8017b4c:	6939      	ldr	r1, [r7, #16]
 8017b4e:	683b      	ldr	r3, [r7, #0]
 8017b50:	88db      	ldrh	r3, [r3, #6]
 8017b52:	461a      	mov	r2, r3
 8017b54:	6878      	ldr	r0, [r7, #4]
 8017b56:	f001 fb2c 	bl	80191b2 <USBD_CtlPrepareRx>
      break;
 8017b5a:	e072      	b.n	8017c42 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017b62:	689b      	ldr	r3, [r3, #8]
 8017b64:	683a      	ldr	r2, [r7, #0]
 8017b66:	7850      	ldrb	r0, [r2, #1]
 8017b68:	2200      	movs	r2, #0
 8017b6a:	6839      	ldr	r1, [r7, #0]
 8017b6c:	4798      	blx	r3
      break;
 8017b6e:	e068      	b.n	8017c42 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017b70:	683b      	ldr	r3, [r7, #0]
 8017b72:	785b      	ldrb	r3, [r3, #1]
 8017b74:	2b0b      	cmp	r3, #11
 8017b76:	d852      	bhi.n	8017c1e <USBD_CDC_Setup+0x162>
 8017b78:	a201      	add	r2, pc, #4	; (adr r2, 8017b80 <USBD_CDC_Setup+0xc4>)
 8017b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b7e:	bf00      	nop
 8017b80:	08017bb1 	.word	0x08017bb1
 8017b84:	08017c2d 	.word	0x08017c2d
 8017b88:	08017c1f 	.word	0x08017c1f
 8017b8c:	08017c1f 	.word	0x08017c1f
 8017b90:	08017c1f 	.word	0x08017c1f
 8017b94:	08017c1f 	.word	0x08017c1f
 8017b98:	08017c1f 	.word	0x08017c1f
 8017b9c:	08017c1f 	.word	0x08017c1f
 8017ba0:	08017c1f 	.word	0x08017c1f
 8017ba4:	08017c1f 	.word	0x08017c1f
 8017ba8:	08017bdb 	.word	0x08017bdb
 8017bac:	08017c05 	.word	0x08017c05
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017bb6:	b2db      	uxtb	r3, r3
 8017bb8:	2b03      	cmp	r3, #3
 8017bba:	d107      	bne.n	8017bcc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8017bbc:	f107 030a 	add.w	r3, r7, #10
 8017bc0:	2202      	movs	r2, #2
 8017bc2:	4619      	mov	r1, r3
 8017bc4:	6878      	ldr	r0, [r7, #4]
 8017bc6:	f001 fac8 	bl	801915a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8017bca:	e032      	b.n	8017c32 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8017bcc:	6839      	ldr	r1, [r7, #0]
 8017bce:	6878      	ldr	r0, [r7, #4]
 8017bd0:	f001 fa52 	bl	8019078 <USBD_CtlError>
            ret = USBD_FAIL;
 8017bd4:	2303      	movs	r3, #3
 8017bd6:	75fb      	strb	r3, [r7, #23]
          break;
 8017bd8:	e02b      	b.n	8017c32 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017be0:	b2db      	uxtb	r3, r3
 8017be2:	2b03      	cmp	r3, #3
 8017be4:	d107      	bne.n	8017bf6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8017be6:	f107 030d 	add.w	r3, r7, #13
 8017bea:	2201      	movs	r2, #1
 8017bec:	4619      	mov	r1, r3
 8017bee:	6878      	ldr	r0, [r7, #4]
 8017bf0:	f001 fab3 	bl	801915a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8017bf4:	e01d      	b.n	8017c32 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8017bf6:	6839      	ldr	r1, [r7, #0]
 8017bf8:	6878      	ldr	r0, [r7, #4]
 8017bfa:	f001 fa3d 	bl	8019078 <USBD_CtlError>
            ret = USBD_FAIL;
 8017bfe:	2303      	movs	r3, #3
 8017c00:	75fb      	strb	r3, [r7, #23]
          break;
 8017c02:	e016      	b.n	8017c32 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017c0a:	b2db      	uxtb	r3, r3
 8017c0c:	2b03      	cmp	r3, #3
 8017c0e:	d00f      	beq.n	8017c30 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8017c10:	6839      	ldr	r1, [r7, #0]
 8017c12:	6878      	ldr	r0, [r7, #4]
 8017c14:	f001 fa30 	bl	8019078 <USBD_CtlError>
            ret = USBD_FAIL;
 8017c18:	2303      	movs	r3, #3
 8017c1a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8017c1c:	e008      	b.n	8017c30 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8017c1e:	6839      	ldr	r1, [r7, #0]
 8017c20:	6878      	ldr	r0, [r7, #4]
 8017c22:	f001 fa29 	bl	8019078 <USBD_CtlError>
          ret = USBD_FAIL;
 8017c26:	2303      	movs	r3, #3
 8017c28:	75fb      	strb	r3, [r7, #23]
          break;
 8017c2a:	e002      	b.n	8017c32 <USBD_CDC_Setup+0x176>
          break;
 8017c2c:	bf00      	nop
 8017c2e:	e008      	b.n	8017c42 <USBD_CDC_Setup+0x186>
          break;
 8017c30:	bf00      	nop
      }
      break;
 8017c32:	e006      	b.n	8017c42 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8017c34:	6839      	ldr	r1, [r7, #0]
 8017c36:	6878      	ldr	r0, [r7, #4]
 8017c38:	f001 fa1e 	bl	8019078 <USBD_CtlError>
      ret = USBD_FAIL;
 8017c3c:	2303      	movs	r3, #3
 8017c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8017c40:	bf00      	nop
  }

  return (uint8_t)ret;
 8017c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8017c44:	4618      	mov	r0, r3
 8017c46:	3718      	adds	r7, #24
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	bd80      	pop	{r7, pc}

08017c4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8017c4c:	b580      	push	{r7, lr}
 8017c4e:	b084      	sub	sp, #16
 8017c50:	af00      	add	r7, sp, #0
 8017c52:	6078      	str	r0, [r7, #4]
 8017c54:	460b      	mov	r3, r1
 8017c56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017c5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d101      	bne.n	8017c6e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8017c6a:	2303      	movs	r3, #3
 8017c6c:	e04f      	b.n	8017d0e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017c74:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8017c76:	78fa      	ldrb	r2, [r7, #3]
 8017c78:	6879      	ldr	r1, [r7, #4]
 8017c7a:	4613      	mov	r3, r2
 8017c7c:	009b      	lsls	r3, r3, #2
 8017c7e:	4413      	add	r3, r2
 8017c80:	009b      	lsls	r3, r3, #2
 8017c82:	440b      	add	r3, r1
 8017c84:	3318      	adds	r3, #24
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d029      	beq.n	8017ce0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8017c8c:	78fa      	ldrb	r2, [r7, #3]
 8017c8e:	6879      	ldr	r1, [r7, #4]
 8017c90:	4613      	mov	r3, r2
 8017c92:	009b      	lsls	r3, r3, #2
 8017c94:	4413      	add	r3, r2
 8017c96:	009b      	lsls	r3, r3, #2
 8017c98:	440b      	add	r3, r1
 8017c9a:	3318      	adds	r3, #24
 8017c9c:	681a      	ldr	r2, [r3, #0]
 8017c9e:	78f9      	ldrb	r1, [r7, #3]
 8017ca0:	68f8      	ldr	r0, [r7, #12]
 8017ca2:	460b      	mov	r3, r1
 8017ca4:	00db      	lsls	r3, r3, #3
 8017ca6:	440b      	add	r3, r1
 8017ca8:	009b      	lsls	r3, r3, #2
 8017caa:	4403      	add	r3, r0
 8017cac:	3348      	adds	r3, #72	; 0x48
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	fbb2 f1f3 	udiv	r1, r2, r3
 8017cb4:	fb01 f303 	mul.w	r3, r1, r3
 8017cb8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d110      	bne.n	8017ce0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8017cbe:	78fa      	ldrb	r2, [r7, #3]
 8017cc0:	6879      	ldr	r1, [r7, #4]
 8017cc2:	4613      	mov	r3, r2
 8017cc4:	009b      	lsls	r3, r3, #2
 8017cc6:	4413      	add	r3, r2
 8017cc8:	009b      	lsls	r3, r3, #2
 8017cca:	440b      	add	r3, r1
 8017ccc:	3318      	adds	r3, #24
 8017cce:	2200      	movs	r2, #0
 8017cd0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8017cd2:	78f9      	ldrb	r1, [r7, #3]
 8017cd4:	2300      	movs	r3, #0
 8017cd6:	2200      	movs	r2, #0
 8017cd8:	6878      	ldr	r0, [r7, #4]
 8017cda:	f001 ffd9 	bl	8019c90 <USBD_LL_Transmit>
 8017cde:	e015      	b.n	8017d0c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8017ce0:	68bb      	ldr	r3, [r7, #8]
 8017ce2:	2200      	movs	r2, #0
 8017ce4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017cee:	691b      	ldr	r3, [r3, #16]
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d00b      	beq.n	8017d0c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017cfa:	691b      	ldr	r3, [r3, #16]
 8017cfc:	68ba      	ldr	r2, [r7, #8]
 8017cfe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8017d02:	68ba      	ldr	r2, [r7, #8]
 8017d04:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8017d08:	78fa      	ldrb	r2, [r7, #3]
 8017d0a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8017d0c:	2300      	movs	r3, #0
}
 8017d0e:	4618      	mov	r0, r3
 8017d10:	3710      	adds	r7, #16
 8017d12:	46bd      	mov	sp, r7
 8017d14:	bd80      	pop	{r7, pc}

08017d16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8017d16:	b580      	push	{r7, lr}
 8017d18:	b084      	sub	sp, #16
 8017d1a:	af00      	add	r7, sp, #0
 8017d1c:	6078      	str	r0, [r7, #4]
 8017d1e:	460b      	mov	r3, r1
 8017d20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017d28:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d101      	bne.n	8017d38 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8017d34:	2303      	movs	r3, #3
 8017d36:	e015      	b.n	8017d64 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8017d38:	78fb      	ldrb	r3, [r7, #3]
 8017d3a:	4619      	mov	r1, r3
 8017d3c:	6878      	ldr	r0, [r7, #4]
 8017d3e:	f002 f817 	bl	8019d70 <USBD_LL_GetRxDataSize>
 8017d42:	4602      	mov	r2, r0
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017d50:	68db      	ldr	r3, [r3, #12]
 8017d52:	68fa      	ldr	r2, [r7, #12]
 8017d54:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8017d58:	68fa      	ldr	r2, [r7, #12]
 8017d5a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8017d5e:	4611      	mov	r1, r2
 8017d60:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8017d62:	2300      	movs	r3, #0
}
 8017d64:	4618      	mov	r0, r3
 8017d66:	3710      	adds	r7, #16
 8017d68:	46bd      	mov	sp, r7
 8017d6a:	bd80      	pop	{r7, pc}

08017d6c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8017d6c:	b580      	push	{r7, lr}
 8017d6e:	b084      	sub	sp, #16
 8017d70:	af00      	add	r7, sp, #0
 8017d72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017d7a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8017d7c:	68fb      	ldr	r3, [r7, #12]
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d101      	bne.n	8017d86 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8017d82:	2303      	movs	r3, #3
 8017d84:	e01b      	b.n	8017dbe <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d015      	beq.n	8017dbc <USBD_CDC_EP0_RxReady+0x50>
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8017d96:	2bff      	cmp	r3, #255	; 0xff
 8017d98:	d010      	beq.n	8017dbc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8017da0:	689b      	ldr	r3, [r3, #8]
 8017da2:	68fa      	ldr	r2, [r7, #12]
 8017da4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8017da8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8017daa:	68fa      	ldr	r2, [r7, #12]
 8017dac:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8017db0:	b292      	uxth	r2, r2
 8017db2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	22ff      	movs	r2, #255	; 0xff
 8017db8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8017dbc:	2300      	movs	r3, #0
}
 8017dbe:	4618      	mov	r0, r3
 8017dc0:	3710      	adds	r7, #16
 8017dc2:	46bd      	mov	sp, r7
 8017dc4:	bd80      	pop	{r7, pc}
	...

08017dc8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8017dc8:	b480      	push	{r7}
 8017dca:	b083      	sub	sp, #12
 8017dcc:	af00      	add	r7, sp, #0
 8017dce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	2243      	movs	r2, #67	; 0x43
 8017dd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8017dd6:	4b03      	ldr	r3, [pc, #12]	; (8017de4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8017dd8:	4618      	mov	r0, r3
 8017dda:	370c      	adds	r7, #12
 8017ddc:	46bd      	mov	sp, r7
 8017dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017de2:	4770      	bx	lr
 8017de4:	200005e0 	.word	0x200005e0

08017de8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8017de8:	b480      	push	{r7}
 8017dea:	b083      	sub	sp, #12
 8017dec:	af00      	add	r7, sp, #0
 8017dee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	2243      	movs	r2, #67	; 0x43
 8017df4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8017df6:	4b03      	ldr	r3, [pc, #12]	; (8017e04 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8017df8:	4618      	mov	r0, r3
 8017dfa:	370c      	adds	r7, #12
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e02:	4770      	bx	lr
 8017e04:	2000059c 	.word	0x2000059c

08017e08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8017e08:	b480      	push	{r7}
 8017e0a:	b083      	sub	sp, #12
 8017e0c:	af00      	add	r7, sp, #0
 8017e0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	2243      	movs	r2, #67	; 0x43
 8017e14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8017e16:	4b03      	ldr	r3, [pc, #12]	; (8017e24 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8017e18:	4618      	mov	r0, r3
 8017e1a:	370c      	adds	r7, #12
 8017e1c:	46bd      	mov	sp, r7
 8017e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e22:	4770      	bx	lr
 8017e24:	20000624 	.word	0x20000624

08017e28 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8017e28:	b480      	push	{r7}
 8017e2a:	b083      	sub	sp, #12
 8017e2c:	af00      	add	r7, sp, #0
 8017e2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8017e30:	687b      	ldr	r3, [r7, #4]
 8017e32:	220a      	movs	r2, #10
 8017e34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8017e36:	4b03      	ldr	r3, [pc, #12]	; (8017e44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8017e38:	4618      	mov	r0, r3
 8017e3a:	370c      	adds	r7, #12
 8017e3c:	46bd      	mov	sp, r7
 8017e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e42:	4770      	bx	lr
 8017e44:	20000558 	.word	0x20000558

08017e48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8017e48:	b480      	push	{r7}
 8017e4a:	b083      	sub	sp, #12
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	6078      	str	r0, [r7, #4]
 8017e50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8017e52:	683b      	ldr	r3, [r7, #0]
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d101      	bne.n	8017e5c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8017e58:	2303      	movs	r3, #3
 8017e5a:	e004      	b.n	8017e66 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	683a      	ldr	r2, [r7, #0]
 8017e60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8017e64:	2300      	movs	r3, #0
}
 8017e66:	4618      	mov	r0, r3
 8017e68:	370c      	adds	r7, #12
 8017e6a:	46bd      	mov	sp, r7
 8017e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e70:	4770      	bx	lr

08017e72 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8017e72:	b480      	push	{r7}
 8017e74:	b087      	sub	sp, #28
 8017e76:	af00      	add	r7, sp, #0
 8017e78:	60f8      	str	r0, [r7, #12]
 8017e7a:	60b9      	str	r1, [r7, #8]
 8017e7c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017e7e:	68fb      	ldr	r3, [r7, #12]
 8017e80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017e84:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8017e86:	697b      	ldr	r3, [r7, #20]
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d101      	bne.n	8017e90 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8017e8c:	2303      	movs	r3, #3
 8017e8e:	e008      	b.n	8017ea2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8017e90:	697b      	ldr	r3, [r7, #20]
 8017e92:	68ba      	ldr	r2, [r7, #8]
 8017e94:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8017e98:	697b      	ldr	r3, [r7, #20]
 8017e9a:	687a      	ldr	r2, [r7, #4]
 8017e9c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8017ea0:	2300      	movs	r3, #0
}
 8017ea2:	4618      	mov	r0, r3
 8017ea4:	371c      	adds	r7, #28
 8017ea6:	46bd      	mov	sp, r7
 8017ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eac:	4770      	bx	lr

08017eae <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8017eae:	b480      	push	{r7}
 8017eb0:	b085      	sub	sp, #20
 8017eb2:	af00      	add	r7, sp, #0
 8017eb4:	6078      	str	r0, [r7, #4]
 8017eb6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017ebe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8017ec0:	68fb      	ldr	r3, [r7, #12]
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d101      	bne.n	8017eca <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8017ec6:	2303      	movs	r3, #3
 8017ec8:	e004      	b.n	8017ed4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	683a      	ldr	r2, [r7, #0]
 8017ece:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8017ed2:	2300      	movs	r3, #0
}
 8017ed4:	4618      	mov	r0, r3
 8017ed6:	3714      	adds	r7, #20
 8017ed8:	46bd      	mov	sp, r7
 8017eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ede:	4770      	bx	lr

08017ee0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8017ee0:	b580      	push	{r7, lr}
 8017ee2:	b084      	sub	sp, #16
 8017ee4:	af00      	add	r7, sp, #0
 8017ee6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017eee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8017ef6:	2b00      	cmp	r3, #0
 8017ef8:	d101      	bne.n	8017efe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8017efa:	2303      	movs	r3, #3
 8017efc:	e016      	b.n	8017f2c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	7c1b      	ldrb	r3, [r3, #16]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d109      	bne.n	8017f1a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8017f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017f10:	2101      	movs	r1, #1
 8017f12:	6878      	ldr	r0, [r7, #4]
 8017f14:	f001 fef4 	bl	8019d00 <USBD_LL_PrepareReceive>
 8017f18:	e007      	b.n	8017f2a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8017f1a:	68fb      	ldr	r3, [r7, #12]
 8017f1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8017f20:	2340      	movs	r3, #64	; 0x40
 8017f22:	2101      	movs	r1, #1
 8017f24:	6878      	ldr	r0, [r7, #4]
 8017f26:	f001 feeb 	bl	8019d00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8017f2a:	2300      	movs	r3, #0
}
 8017f2c:	4618      	mov	r0, r3
 8017f2e:	3710      	adds	r7, #16
 8017f30:	46bd      	mov	sp, r7
 8017f32:	bd80      	pop	{r7, pc}

08017f34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8017f34:	b580      	push	{r7, lr}
 8017f36:	b086      	sub	sp, #24
 8017f38:	af00      	add	r7, sp, #0
 8017f3a:	60f8      	str	r0, [r7, #12]
 8017f3c:	60b9      	str	r1, [r7, #8]
 8017f3e:	4613      	mov	r3, r2
 8017f40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d101      	bne.n	8017f4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8017f48:	2303      	movs	r3, #3
 8017f4a:	e01f      	b.n	8017f8c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	2200      	movs	r2, #0
 8017f50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8017f54:	68fb      	ldr	r3, [r7, #12]
 8017f56:	2200      	movs	r2, #0
 8017f58:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8017f5c:	68fb      	ldr	r3, [r7, #12]
 8017f5e:	2200      	movs	r2, #0
 8017f60:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8017f64:	68bb      	ldr	r3, [r7, #8]
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d003      	beq.n	8017f72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8017f6a:	68fb      	ldr	r3, [r7, #12]
 8017f6c:	68ba      	ldr	r2, [r7, #8]
 8017f6e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017f72:	68fb      	ldr	r3, [r7, #12]
 8017f74:	2201      	movs	r2, #1
 8017f76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	79fa      	ldrb	r2, [r7, #7]
 8017f7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8017f80:	68f8      	ldr	r0, [r7, #12]
 8017f82:	f001 fcc5 	bl	8019910 <USBD_LL_Init>
 8017f86:	4603      	mov	r3, r0
 8017f88:	75fb      	strb	r3, [r7, #23]

  return ret;
 8017f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	3718      	adds	r7, #24
 8017f90:	46bd      	mov	sp, r7
 8017f92:	bd80      	pop	{r7, pc}

08017f94 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8017f94:	b580      	push	{r7, lr}
 8017f96:	b084      	sub	sp, #16
 8017f98:	af00      	add	r7, sp, #0
 8017f9a:	6078      	str	r0, [r7, #4]
 8017f9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8017f9e:	2300      	movs	r3, #0
 8017fa0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8017fa2:	683b      	ldr	r3, [r7, #0]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d101      	bne.n	8017fac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8017fa8:	2303      	movs	r3, #3
 8017faa:	e016      	b.n	8017fda <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	683a      	ldr	r2, [r7, #0]
 8017fb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d00b      	beq.n	8017fd8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8017fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fc8:	f107 020e 	add.w	r2, r7, #14
 8017fcc:	4610      	mov	r0, r2
 8017fce:	4798      	blx	r3
 8017fd0:	4602      	mov	r2, r0
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8017fd8:	2300      	movs	r3, #0
}
 8017fda:	4618      	mov	r0, r3
 8017fdc:	3710      	adds	r7, #16
 8017fde:	46bd      	mov	sp, r7
 8017fe0:	bd80      	pop	{r7, pc}

08017fe2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8017fe2:	b580      	push	{r7, lr}
 8017fe4:	b082      	sub	sp, #8
 8017fe6:	af00      	add	r7, sp, #0
 8017fe8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8017fea:	6878      	ldr	r0, [r7, #4]
 8017fec:	f001 fcdc 	bl	80199a8 <USBD_LL_Start>
 8017ff0:	4603      	mov	r3, r0
}
 8017ff2:	4618      	mov	r0, r3
 8017ff4:	3708      	adds	r7, #8
 8017ff6:	46bd      	mov	sp, r7
 8017ff8:	bd80      	pop	{r7, pc}

08017ffa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8017ffa:	b480      	push	{r7}
 8017ffc:	b083      	sub	sp, #12
 8017ffe:	af00      	add	r7, sp, #0
 8018000:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8018002:	2300      	movs	r3, #0
}
 8018004:	4618      	mov	r0, r3
 8018006:	370c      	adds	r7, #12
 8018008:	46bd      	mov	sp, r7
 801800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801800e:	4770      	bx	lr

08018010 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018010:	b580      	push	{r7, lr}
 8018012:	b084      	sub	sp, #16
 8018014:	af00      	add	r7, sp, #0
 8018016:	6078      	str	r0, [r7, #4]
 8018018:	460b      	mov	r3, r1
 801801a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801801c:	2303      	movs	r3, #3
 801801e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018026:	2b00      	cmp	r3, #0
 8018028:	d009      	beq.n	801803e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	78fa      	ldrb	r2, [r7, #3]
 8018034:	4611      	mov	r1, r2
 8018036:	6878      	ldr	r0, [r7, #4]
 8018038:	4798      	blx	r3
 801803a:	4603      	mov	r3, r0
 801803c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801803e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018040:	4618      	mov	r0, r3
 8018042:	3710      	adds	r7, #16
 8018044:	46bd      	mov	sp, r7
 8018046:	bd80      	pop	{r7, pc}

08018048 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8018048:	b580      	push	{r7, lr}
 801804a:	b082      	sub	sp, #8
 801804c:	af00      	add	r7, sp, #0
 801804e:	6078      	str	r0, [r7, #4]
 8018050:	460b      	mov	r3, r1
 8018052:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801805a:	2b00      	cmp	r3, #0
 801805c:	d007      	beq.n	801806e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018064:	685b      	ldr	r3, [r3, #4]
 8018066:	78fa      	ldrb	r2, [r7, #3]
 8018068:	4611      	mov	r1, r2
 801806a:	6878      	ldr	r0, [r7, #4]
 801806c:	4798      	blx	r3
  }

  return USBD_OK;
 801806e:	2300      	movs	r3, #0
}
 8018070:	4618      	mov	r0, r3
 8018072:	3708      	adds	r7, #8
 8018074:	46bd      	mov	sp, r7
 8018076:	bd80      	pop	{r7, pc}

08018078 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8018078:	b580      	push	{r7, lr}
 801807a:	b084      	sub	sp, #16
 801807c:	af00      	add	r7, sp, #0
 801807e:	6078      	str	r0, [r7, #4]
 8018080:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8018088:	6839      	ldr	r1, [r7, #0]
 801808a:	4618      	mov	r0, r3
 801808c:	f000 ffba 	bl	8019004 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	2201      	movs	r2, #1
 8018094:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801809e:	461a      	mov	r2, r3
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80180ac:	f003 031f 	and.w	r3, r3, #31
 80180b0:	2b02      	cmp	r3, #2
 80180b2:	d01a      	beq.n	80180ea <USBD_LL_SetupStage+0x72>
 80180b4:	2b02      	cmp	r3, #2
 80180b6:	d822      	bhi.n	80180fe <USBD_LL_SetupStage+0x86>
 80180b8:	2b00      	cmp	r3, #0
 80180ba:	d002      	beq.n	80180c2 <USBD_LL_SetupStage+0x4a>
 80180bc:	2b01      	cmp	r3, #1
 80180be:	d00a      	beq.n	80180d6 <USBD_LL_SetupStage+0x5e>
 80180c0:	e01d      	b.n	80180fe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80180c8:	4619      	mov	r1, r3
 80180ca:	6878      	ldr	r0, [r7, #4]
 80180cc:	f000 fa62 	bl	8018594 <USBD_StdDevReq>
 80180d0:	4603      	mov	r3, r0
 80180d2:	73fb      	strb	r3, [r7, #15]
      break;
 80180d4:	e020      	b.n	8018118 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80180dc:	4619      	mov	r1, r3
 80180de:	6878      	ldr	r0, [r7, #4]
 80180e0:	f000 fac6 	bl	8018670 <USBD_StdItfReq>
 80180e4:	4603      	mov	r3, r0
 80180e6:	73fb      	strb	r3, [r7, #15]
      break;
 80180e8:	e016      	b.n	8018118 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80180f0:	4619      	mov	r1, r3
 80180f2:	6878      	ldr	r0, [r7, #4]
 80180f4:	f000 fb05 	bl	8018702 <USBD_StdEPReq>
 80180f8:	4603      	mov	r3, r0
 80180fa:	73fb      	strb	r3, [r7, #15]
      break;
 80180fc:	e00c      	b.n	8018118 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8018104:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8018108:	b2db      	uxtb	r3, r3
 801810a:	4619      	mov	r1, r3
 801810c:	6878      	ldr	r0, [r7, #4]
 801810e:	f001 fcf1 	bl	8019af4 <USBD_LL_StallEP>
 8018112:	4603      	mov	r3, r0
 8018114:	73fb      	strb	r3, [r7, #15]
      break;
 8018116:	bf00      	nop
  }

  return ret;
 8018118:	7bfb      	ldrb	r3, [r7, #15]
}
 801811a:	4618      	mov	r0, r3
 801811c:	3710      	adds	r7, #16
 801811e:	46bd      	mov	sp, r7
 8018120:	bd80      	pop	{r7, pc}

08018122 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8018122:	b580      	push	{r7, lr}
 8018124:	b086      	sub	sp, #24
 8018126:	af00      	add	r7, sp, #0
 8018128:	60f8      	str	r0, [r7, #12]
 801812a:	460b      	mov	r3, r1
 801812c:	607a      	str	r2, [r7, #4]
 801812e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8018130:	7afb      	ldrb	r3, [r7, #11]
 8018132:	2b00      	cmp	r3, #0
 8018134:	d138      	bne.n	80181a8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801813c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8018144:	2b03      	cmp	r3, #3
 8018146:	d14a      	bne.n	80181de <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8018148:	693b      	ldr	r3, [r7, #16]
 801814a:	689a      	ldr	r2, [r3, #8]
 801814c:	693b      	ldr	r3, [r7, #16]
 801814e:	68db      	ldr	r3, [r3, #12]
 8018150:	429a      	cmp	r2, r3
 8018152:	d913      	bls.n	801817c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8018154:	693b      	ldr	r3, [r7, #16]
 8018156:	689a      	ldr	r2, [r3, #8]
 8018158:	693b      	ldr	r3, [r7, #16]
 801815a:	68db      	ldr	r3, [r3, #12]
 801815c:	1ad2      	subs	r2, r2, r3
 801815e:	693b      	ldr	r3, [r7, #16]
 8018160:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8018162:	693b      	ldr	r3, [r7, #16]
 8018164:	68da      	ldr	r2, [r3, #12]
 8018166:	693b      	ldr	r3, [r7, #16]
 8018168:	689b      	ldr	r3, [r3, #8]
 801816a:	4293      	cmp	r3, r2
 801816c:	bf28      	it	cs
 801816e:	4613      	movcs	r3, r2
 8018170:	461a      	mov	r2, r3
 8018172:	6879      	ldr	r1, [r7, #4]
 8018174:	68f8      	ldr	r0, [r7, #12]
 8018176:	f001 f839 	bl	80191ec <USBD_CtlContinueRx>
 801817a:	e030      	b.n	80181de <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018182:	b2db      	uxtb	r3, r3
 8018184:	2b03      	cmp	r3, #3
 8018186:	d10b      	bne.n	80181a0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801818e:	691b      	ldr	r3, [r3, #16]
 8018190:	2b00      	cmp	r3, #0
 8018192:	d005      	beq.n	80181a0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801819a:	691b      	ldr	r3, [r3, #16]
 801819c:	68f8      	ldr	r0, [r7, #12]
 801819e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80181a0:	68f8      	ldr	r0, [r7, #12]
 80181a2:	f001 f834 	bl	801920e <USBD_CtlSendStatus>
 80181a6:	e01a      	b.n	80181de <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80181ae:	b2db      	uxtb	r3, r3
 80181b0:	2b03      	cmp	r3, #3
 80181b2:	d114      	bne.n	80181de <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80181ba:	699b      	ldr	r3, [r3, #24]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d00e      	beq.n	80181de <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80181c0:	68fb      	ldr	r3, [r7, #12]
 80181c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80181c6:	699b      	ldr	r3, [r3, #24]
 80181c8:	7afa      	ldrb	r2, [r7, #11]
 80181ca:	4611      	mov	r1, r2
 80181cc:	68f8      	ldr	r0, [r7, #12]
 80181ce:	4798      	blx	r3
 80181d0:	4603      	mov	r3, r0
 80181d2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80181d4:	7dfb      	ldrb	r3, [r7, #23]
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d001      	beq.n	80181de <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80181da:	7dfb      	ldrb	r3, [r7, #23]
 80181dc:	e000      	b.n	80181e0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80181de:	2300      	movs	r3, #0
}
 80181e0:	4618      	mov	r0, r3
 80181e2:	3718      	adds	r7, #24
 80181e4:	46bd      	mov	sp, r7
 80181e6:	bd80      	pop	{r7, pc}

080181e8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80181e8:	b580      	push	{r7, lr}
 80181ea:	b086      	sub	sp, #24
 80181ec:	af00      	add	r7, sp, #0
 80181ee:	60f8      	str	r0, [r7, #12]
 80181f0:	460b      	mov	r3, r1
 80181f2:	607a      	str	r2, [r7, #4]
 80181f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80181f6:	7afb      	ldrb	r3, [r7, #11]
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d16b      	bne.n	80182d4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80181fc:	68fb      	ldr	r3, [r7, #12]
 80181fe:	3314      	adds	r3, #20
 8018200:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8018202:	68fb      	ldr	r3, [r7, #12]
 8018204:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8018208:	2b02      	cmp	r3, #2
 801820a:	d156      	bne.n	80182ba <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801820c:	693b      	ldr	r3, [r7, #16]
 801820e:	689a      	ldr	r2, [r3, #8]
 8018210:	693b      	ldr	r3, [r7, #16]
 8018212:	68db      	ldr	r3, [r3, #12]
 8018214:	429a      	cmp	r2, r3
 8018216:	d914      	bls.n	8018242 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8018218:	693b      	ldr	r3, [r7, #16]
 801821a:	689a      	ldr	r2, [r3, #8]
 801821c:	693b      	ldr	r3, [r7, #16]
 801821e:	68db      	ldr	r3, [r3, #12]
 8018220:	1ad2      	subs	r2, r2, r3
 8018222:	693b      	ldr	r3, [r7, #16]
 8018224:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8018226:	693b      	ldr	r3, [r7, #16]
 8018228:	689b      	ldr	r3, [r3, #8]
 801822a:	461a      	mov	r2, r3
 801822c:	6879      	ldr	r1, [r7, #4]
 801822e:	68f8      	ldr	r0, [r7, #12]
 8018230:	f000 ffae 	bl	8019190 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018234:	2300      	movs	r3, #0
 8018236:	2200      	movs	r2, #0
 8018238:	2100      	movs	r1, #0
 801823a:	68f8      	ldr	r0, [r7, #12]
 801823c:	f001 fd60 	bl	8019d00 <USBD_LL_PrepareReceive>
 8018240:	e03b      	b.n	80182ba <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8018242:	693b      	ldr	r3, [r7, #16]
 8018244:	68da      	ldr	r2, [r3, #12]
 8018246:	693b      	ldr	r3, [r7, #16]
 8018248:	689b      	ldr	r3, [r3, #8]
 801824a:	429a      	cmp	r2, r3
 801824c:	d11c      	bne.n	8018288 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801824e:	693b      	ldr	r3, [r7, #16]
 8018250:	685a      	ldr	r2, [r3, #4]
 8018252:	693b      	ldr	r3, [r7, #16]
 8018254:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8018256:	429a      	cmp	r2, r3
 8018258:	d316      	bcc.n	8018288 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801825a:	693b      	ldr	r3, [r7, #16]
 801825c:	685a      	ldr	r2, [r3, #4]
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8018264:	429a      	cmp	r2, r3
 8018266:	d20f      	bcs.n	8018288 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8018268:	2200      	movs	r2, #0
 801826a:	2100      	movs	r1, #0
 801826c:	68f8      	ldr	r0, [r7, #12]
 801826e:	f000 ff8f 	bl	8019190 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8018272:	68fb      	ldr	r3, [r7, #12]
 8018274:	2200      	movs	r2, #0
 8018276:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801827a:	2300      	movs	r3, #0
 801827c:	2200      	movs	r2, #0
 801827e:	2100      	movs	r1, #0
 8018280:	68f8      	ldr	r0, [r7, #12]
 8018282:	f001 fd3d 	bl	8019d00 <USBD_LL_PrepareReceive>
 8018286:	e018      	b.n	80182ba <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018288:	68fb      	ldr	r3, [r7, #12]
 801828a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801828e:	b2db      	uxtb	r3, r3
 8018290:	2b03      	cmp	r3, #3
 8018292:	d10b      	bne.n	80182ac <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8018294:	68fb      	ldr	r3, [r7, #12]
 8018296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801829a:	68db      	ldr	r3, [r3, #12]
 801829c:	2b00      	cmp	r3, #0
 801829e:	d005      	beq.n	80182ac <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80182a6:	68db      	ldr	r3, [r3, #12]
 80182a8:	68f8      	ldr	r0, [r7, #12]
 80182aa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80182ac:	2180      	movs	r1, #128	; 0x80
 80182ae:	68f8      	ldr	r0, [r7, #12]
 80182b0:	f001 fc20 	bl	8019af4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80182b4:	68f8      	ldr	r0, [r7, #12]
 80182b6:	f000 ffbd 	bl	8019234 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80182ba:	68fb      	ldr	r3, [r7, #12]
 80182bc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80182c0:	2b01      	cmp	r3, #1
 80182c2:	d122      	bne.n	801830a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80182c4:	68f8      	ldr	r0, [r7, #12]
 80182c6:	f7ff fe98 	bl	8017ffa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80182ca:	68fb      	ldr	r3, [r7, #12]
 80182cc:	2200      	movs	r2, #0
 80182ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80182d2:	e01a      	b.n	801830a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80182d4:	68fb      	ldr	r3, [r7, #12]
 80182d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80182da:	b2db      	uxtb	r3, r3
 80182dc:	2b03      	cmp	r3, #3
 80182de:	d114      	bne.n	801830a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80182e0:	68fb      	ldr	r3, [r7, #12]
 80182e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80182e6:	695b      	ldr	r3, [r3, #20]
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d00e      	beq.n	801830a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80182ec:	68fb      	ldr	r3, [r7, #12]
 80182ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80182f2:	695b      	ldr	r3, [r3, #20]
 80182f4:	7afa      	ldrb	r2, [r7, #11]
 80182f6:	4611      	mov	r1, r2
 80182f8:	68f8      	ldr	r0, [r7, #12]
 80182fa:	4798      	blx	r3
 80182fc:	4603      	mov	r3, r0
 80182fe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8018300:	7dfb      	ldrb	r3, [r7, #23]
 8018302:	2b00      	cmp	r3, #0
 8018304:	d001      	beq.n	801830a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8018306:	7dfb      	ldrb	r3, [r7, #23]
 8018308:	e000      	b.n	801830c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801830a:	2300      	movs	r3, #0
}
 801830c:	4618      	mov	r0, r3
 801830e:	3718      	adds	r7, #24
 8018310:	46bd      	mov	sp, r7
 8018312:	bd80      	pop	{r7, pc}

08018314 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8018314:	b580      	push	{r7, lr}
 8018316:	b082      	sub	sp, #8
 8018318:	af00      	add	r7, sp, #0
 801831a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	2201      	movs	r2, #1
 8018320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	2200      	movs	r2, #0
 8018328:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	2200      	movs	r2, #0
 8018330:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	2200      	movs	r2, #0
 8018336:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018340:	2b00      	cmp	r3, #0
 8018342:	d101      	bne.n	8018348 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8018344:	2303      	movs	r3, #3
 8018346:	e02f      	b.n	80183a8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801834e:	2b00      	cmp	r3, #0
 8018350:	d00f      	beq.n	8018372 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018358:	685b      	ldr	r3, [r3, #4]
 801835a:	2b00      	cmp	r3, #0
 801835c:	d009      	beq.n	8018372 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018364:	685b      	ldr	r3, [r3, #4]
 8018366:	687a      	ldr	r2, [r7, #4]
 8018368:	6852      	ldr	r2, [r2, #4]
 801836a:	b2d2      	uxtb	r2, r2
 801836c:	4611      	mov	r1, r2
 801836e:	6878      	ldr	r0, [r7, #4]
 8018370:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8018372:	2340      	movs	r3, #64	; 0x40
 8018374:	2200      	movs	r2, #0
 8018376:	2100      	movs	r1, #0
 8018378:	6878      	ldr	r0, [r7, #4]
 801837a:	f001 fb47 	bl	8019a0c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	2201      	movs	r2, #1
 8018382:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	2240      	movs	r2, #64	; 0x40
 801838a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801838e:	2340      	movs	r3, #64	; 0x40
 8018390:	2200      	movs	r2, #0
 8018392:	2180      	movs	r1, #128	; 0x80
 8018394:	6878      	ldr	r0, [r7, #4]
 8018396:	f001 fb39 	bl	8019a0c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	2201      	movs	r2, #1
 801839e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	2240      	movs	r2, #64	; 0x40
 80183a4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80183a6:	2300      	movs	r3, #0
}
 80183a8:	4618      	mov	r0, r3
 80183aa:	3708      	adds	r7, #8
 80183ac:	46bd      	mov	sp, r7
 80183ae:	bd80      	pop	{r7, pc}

080183b0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80183b0:	b480      	push	{r7}
 80183b2:	b083      	sub	sp, #12
 80183b4:	af00      	add	r7, sp, #0
 80183b6:	6078      	str	r0, [r7, #4]
 80183b8:	460b      	mov	r3, r1
 80183ba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	78fa      	ldrb	r2, [r7, #3]
 80183c0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80183c2:	2300      	movs	r3, #0
}
 80183c4:	4618      	mov	r0, r3
 80183c6:	370c      	adds	r7, #12
 80183c8:	46bd      	mov	sp, r7
 80183ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ce:	4770      	bx	lr

080183d0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80183d0:	b480      	push	{r7}
 80183d2:	b083      	sub	sp, #12
 80183d4:	af00      	add	r7, sp, #0
 80183d6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80183de:	b2da      	uxtb	r2, r3
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	2204      	movs	r2, #4
 80183ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80183ee:	2300      	movs	r3, #0
}
 80183f0:	4618      	mov	r0, r3
 80183f2:	370c      	adds	r7, #12
 80183f4:	46bd      	mov	sp, r7
 80183f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183fa:	4770      	bx	lr

080183fc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80183fc:	b480      	push	{r7}
 80183fe:	b083      	sub	sp, #12
 8018400:	af00      	add	r7, sp, #0
 8018402:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801840a:	b2db      	uxtb	r3, r3
 801840c:	2b04      	cmp	r3, #4
 801840e:	d106      	bne.n	801841e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8018410:	687b      	ldr	r3, [r7, #4]
 8018412:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8018416:	b2da      	uxtb	r2, r3
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801841e:	2300      	movs	r3, #0
}
 8018420:	4618      	mov	r0, r3
 8018422:	370c      	adds	r7, #12
 8018424:	46bd      	mov	sp, r7
 8018426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801842a:	4770      	bx	lr

0801842c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801842c:	b580      	push	{r7, lr}
 801842e:	b082      	sub	sp, #8
 8018430:	af00      	add	r7, sp, #0
 8018432:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801843a:	2b00      	cmp	r3, #0
 801843c:	d101      	bne.n	8018442 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801843e:	2303      	movs	r3, #3
 8018440:	e012      	b.n	8018468 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018448:	b2db      	uxtb	r3, r3
 801844a:	2b03      	cmp	r3, #3
 801844c:	d10b      	bne.n	8018466 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018454:	69db      	ldr	r3, [r3, #28]
 8018456:	2b00      	cmp	r3, #0
 8018458:	d005      	beq.n	8018466 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018460:	69db      	ldr	r3, [r3, #28]
 8018462:	6878      	ldr	r0, [r7, #4]
 8018464:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018466:	2300      	movs	r3, #0
}
 8018468:	4618      	mov	r0, r3
 801846a:	3708      	adds	r7, #8
 801846c:	46bd      	mov	sp, r7
 801846e:	bd80      	pop	{r7, pc}

08018470 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8018470:	b580      	push	{r7, lr}
 8018472:	b082      	sub	sp, #8
 8018474:	af00      	add	r7, sp, #0
 8018476:	6078      	str	r0, [r7, #4]
 8018478:	460b      	mov	r3, r1
 801847a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018482:	2b00      	cmp	r3, #0
 8018484:	d101      	bne.n	801848a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8018486:	2303      	movs	r3, #3
 8018488:	e014      	b.n	80184b4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018490:	b2db      	uxtb	r3, r3
 8018492:	2b03      	cmp	r3, #3
 8018494:	d10d      	bne.n	80184b2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801849c:	6a1b      	ldr	r3, [r3, #32]
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d007      	beq.n	80184b2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80184a8:	6a1b      	ldr	r3, [r3, #32]
 80184aa:	78fa      	ldrb	r2, [r7, #3]
 80184ac:	4611      	mov	r1, r2
 80184ae:	6878      	ldr	r0, [r7, #4]
 80184b0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80184b2:	2300      	movs	r3, #0
}
 80184b4:	4618      	mov	r0, r3
 80184b6:	3708      	adds	r7, #8
 80184b8:	46bd      	mov	sp, r7
 80184ba:	bd80      	pop	{r7, pc}

080184bc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80184bc:	b580      	push	{r7, lr}
 80184be:	b082      	sub	sp, #8
 80184c0:	af00      	add	r7, sp, #0
 80184c2:	6078      	str	r0, [r7, #4]
 80184c4:	460b      	mov	r3, r1
 80184c6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d101      	bne.n	80184d6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80184d2:	2303      	movs	r3, #3
 80184d4:	e014      	b.n	8018500 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80184dc:	b2db      	uxtb	r3, r3
 80184de:	2b03      	cmp	r3, #3
 80184e0:	d10d      	bne.n	80184fe <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80184e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d007      	beq.n	80184fe <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80184f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184f6:	78fa      	ldrb	r2, [r7, #3]
 80184f8:	4611      	mov	r1, r2
 80184fa:	6878      	ldr	r0, [r7, #4]
 80184fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80184fe:	2300      	movs	r3, #0
}
 8018500:	4618      	mov	r0, r3
 8018502:	3708      	adds	r7, #8
 8018504:	46bd      	mov	sp, r7
 8018506:	bd80      	pop	{r7, pc}

08018508 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8018508:	b480      	push	{r7}
 801850a:	b083      	sub	sp, #12
 801850c:	af00      	add	r7, sp, #0
 801850e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8018510:	2300      	movs	r3, #0
}
 8018512:	4618      	mov	r0, r3
 8018514:	370c      	adds	r7, #12
 8018516:	46bd      	mov	sp, r7
 8018518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801851c:	4770      	bx	lr

0801851e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801851e:	b580      	push	{r7, lr}
 8018520:	b082      	sub	sp, #8
 8018522:	af00      	add	r7, sp, #0
 8018524:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	2201      	movs	r2, #1
 801852a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018534:	2b00      	cmp	r3, #0
 8018536:	d009      	beq.n	801854c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801853e:	685b      	ldr	r3, [r3, #4]
 8018540:	687a      	ldr	r2, [r7, #4]
 8018542:	6852      	ldr	r2, [r2, #4]
 8018544:	b2d2      	uxtb	r2, r2
 8018546:	4611      	mov	r1, r2
 8018548:	6878      	ldr	r0, [r7, #4]
 801854a:	4798      	blx	r3
  }

  return USBD_OK;
 801854c:	2300      	movs	r3, #0
}
 801854e:	4618      	mov	r0, r3
 8018550:	3708      	adds	r7, #8
 8018552:	46bd      	mov	sp, r7
 8018554:	bd80      	pop	{r7, pc}

08018556 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8018556:	b480      	push	{r7}
 8018558:	b087      	sub	sp, #28
 801855a:	af00      	add	r7, sp, #0
 801855c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8018562:	697b      	ldr	r3, [r7, #20]
 8018564:	781b      	ldrb	r3, [r3, #0]
 8018566:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8018568:	697b      	ldr	r3, [r7, #20]
 801856a:	3301      	adds	r3, #1
 801856c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801856e:	697b      	ldr	r3, [r7, #20]
 8018570:	781b      	ldrb	r3, [r3, #0]
 8018572:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8018574:	8a3b      	ldrh	r3, [r7, #16]
 8018576:	021b      	lsls	r3, r3, #8
 8018578:	b21a      	sxth	r2, r3
 801857a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801857e:	4313      	orrs	r3, r2
 8018580:	b21b      	sxth	r3, r3
 8018582:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8018584:	89fb      	ldrh	r3, [r7, #14]
}
 8018586:	4618      	mov	r0, r3
 8018588:	371c      	adds	r7, #28
 801858a:	46bd      	mov	sp, r7
 801858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018590:	4770      	bx	lr
	...

08018594 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018594:	b580      	push	{r7, lr}
 8018596:	b084      	sub	sp, #16
 8018598:	af00      	add	r7, sp, #0
 801859a:	6078      	str	r0, [r7, #4]
 801859c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801859e:	2300      	movs	r3, #0
 80185a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80185a2:	683b      	ldr	r3, [r7, #0]
 80185a4:	781b      	ldrb	r3, [r3, #0]
 80185a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80185aa:	2b40      	cmp	r3, #64	; 0x40
 80185ac:	d005      	beq.n	80185ba <USBD_StdDevReq+0x26>
 80185ae:	2b40      	cmp	r3, #64	; 0x40
 80185b0:	d853      	bhi.n	801865a <USBD_StdDevReq+0xc6>
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d00b      	beq.n	80185ce <USBD_StdDevReq+0x3a>
 80185b6:	2b20      	cmp	r3, #32
 80185b8:	d14f      	bne.n	801865a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80185c0:	689b      	ldr	r3, [r3, #8]
 80185c2:	6839      	ldr	r1, [r7, #0]
 80185c4:	6878      	ldr	r0, [r7, #4]
 80185c6:	4798      	blx	r3
 80185c8:	4603      	mov	r3, r0
 80185ca:	73fb      	strb	r3, [r7, #15]
      break;
 80185cc:	e04a      	b.n	8018664 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80185ce:	683b      	ldr	r3, [r7, #0]
 80185d0:	785b      	ldrb	r3, [r3, #1]
 80185d2:	2b09      	cmp	r3, #9
 80185d4:	d83b      	bhi.n	801864e <USBD_StdDevReq+0xba>
 80185d6:	a201      	add	r2, pc, #4	; (adr r2, 80185dc <USBD_StdDevReq+0x48>)
 80185d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185dc:	08018631 	.word	0x08018631
 80185e0:	08018645 	.word	0x08018645
 80185e4:	0801864f 	.word	0x0801864f
 80185e8:	0801863b 	.word	0x0801863b
 80185ec:	0801864f 	.word	0x0801864f
 80185f0:	0801860f 	.word	0x0801860f
 80185f4:	08018605 	.word	0x08018605
 80185f8:	0801864f 	.word	0x0801864f
 80185fc:	08018627 	.word	0x08018627
 8018600:	08018619 	.word	0x08018619
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8018604:	6839      	ldr	r1, [r7, #0]
 8018606:	6878      	ldr	r0, [r7, #4]
 8018608:	f000 f9de 	bl	80189c8 <USBD_GetDescriptor>
          break;
 801860c:	e024      	b.n	8018658 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801860e:	6839      	ldr	r1, [r7, #0]
 8018610:	6878      	ldr	r0, [r7, #4]
 8018612:	f000 fb6d 	bl	8018cf0 <USBD_SetAddress>
          break;
 8018616:	e01f      	b.n	8018658 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8018618:	6839      	ldr	r1, [r7, #0]
 801861a:	6878      	ldr	r0, [r7, #4]
 801861c:	f000 fbac 	bl	8018d78 <USBD_SetConfig>
 8018620:	4603      	mov	r3, r0
 8018622:	73fb      	strb	r3, [r7, #15]
          break;
 8018624:	e018      	b.n	8018658 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8018626:	6839      	ldr	r1, [r7, #0]
 8018628:	6878      	ldr	r0, [r7, #4]
 801862a:	f000 fc4b 	bl	8018ec4 <USBD_GetConfig>
          break;
 801862e:	e013      	b.n	8018658 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8018630:	6839      	ldr	r1, [r7, #0]
 8018632:	6878      	ldr	r0, [r7, #4]
 8018634:	f000 fc7c 	bl	8018f30 <USBD_GetStatus>
          break;
 8018638:	e00e      	b.n	8018658 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801863a:	6839      	ldr	r1, [r7, #0]
 801863c:	6878      	ldr	r0, [r7, #4]
 801863e:	f000 fcab 	bl	8018f98 <USBD_SetFeature>
          break;
 8018642:	e009      	b.n	8018658 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8018644:	6839      	ldr	r1, [r7, #0]
 8018646:	6878      	ldr	r0, [r7, #4]
 8018648:	f000 fcba 	bl	8018fc0 <USBD_ClrFeature>
          break;
 801864c:	e004      	b.n	8018658 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801864e:	6839      	ldr	r1, [r7, #0]
 8018650:	6878      	ldr	r0, [r7, #4]
 8018652:	f000 fd11 	bl	8019078 <USBD_CtlError>
          break;
 8018656:	bf00      	nop
      }
      break;
 8018658:	e004      	b.n	8018664 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801865a:	6839      	ldr	r1, [r7, #0]
 801865c:	6878      	ldr	r0, [r7, #4]
 801865e:	f000 fd0b 	bl	8019078 <USBD_CtlError>
      break;
 8018662:	bf00      	nop
  }

  return ret;
 8018664:	7bfb      	ldrb	r3, [r7, #15]
}
 8018666:	4618      	mov	r0, r3
 8018668:	3710      	adds	r7, #16
 801866a:	46bd      	mov	sp, r7
 801866c:	bd80      	pop	{r7, pc}
 801866e:	bf00      	nop

08018670 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018670:	b580      	push	{r7, lr}
 8018672:	b084      	sub	sp, #16
 8018674:	af00      	add	r7, sp, #0
 8018676:	6078      	str	r0, [r7, #4]
 8018678:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801867a:	2300      	movs	r3, #0
 801867c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801867e:	683b      	ldr	r3, [r7, #0]
 8018680:	781b      	ldrb	r3, [r3, #0]
 8018682:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8018686:	2b40      	cmp	r3, #64	; 0x40
 8018688:	d005      	beq.n	8018696 <USBD_StdItfReq+0x26>
 801868a:	2b40      	cmp	r3, #64	; 0x40
 801868c:	d82f      	bhi.n	80186ee <USBD_StdItfReq+0x7e>
 801868e:	2b00      	cmp	r3, #0
 8018690:	d001      	beq.n	8018696 <USBD_StdItfReq+0x26>
 8018692:	2b20      	cmp	r3, #32
 8018694:	d12b      	bne.n	80186ee <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801869c:	b2db      	uxtb	r3, r3
 801869e:	3b01      	subs	r3, #1
 80186a0:	2b02      	cmp	r3, #2
 80186a2:	d81d      	bhi.n	80186e0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80186a4:	683b      	ldr	r3, [r7, #0]
 80186a6:	889b      	ldrh	r3, [r3, #4]
 80186a8:	b2db      	uxtb	r3, r3
 80186aa:	2b01      	cmp	r3, #1
 80186ac:	d813      	bhi.n	80186d6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80186b4:	689b      	ldr	r3, [r3, #8]
 80186b6:	6839      	ldr	r1, [r7, #0]
 80186b8:	6878      	ldr	r0, [r7, #4]
 80186ba:	4798      	blx	r3
 80186bc:	4603      	mov	r3, r0
 80186be:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80186c0:	683b      	ldr	r3, [r7, #0]
 80186c2:	88db      	ldrh	r3, [r3, #6]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d110      	bne.n	80186ea <USBD_StdItfReq+0x7a>
 80186c8:	7bfb      	ldrb	r3, [r7, #15]
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d10d      	bne.n	80186ea <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80186ce:	6878      	ldr	r0, [r7, #4]
 80186d0:	f000 fd9d 	bl	801920e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80186d4:	e009      	b.n	80186ea <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80186d6:	6839      	ldr	r1, [r7, #0]
 80186d8:	6878      	ldr	r0, [r7, #4]
 80186da:	f000 fccd 	bl	8019078 <USBD_CtlError>
          break;
 80186de:	e004      	b.n	80186ea <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80186e0:	6839      	ldr	r1, [r7, #0]
 80186e2:	6878      	ldr	r0, [r7, #4]
 80186e4:	f000 fcc8 	bl	8019078 <USBD_CtlError>
          break;
 80186e8:	e000      	b.n	80186ec <USBD_StdItfReq+0x7c>
          break;
 80186ea:	bf00      	nop
      }
      break;
 80186ec:	e004      	b.n	80186f8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80186ee:	6839      	ldr	r1, [r7, #0]
 80186f0:	6878      	ldr	r0, [r7, #4]
 80186f2:	f000 fcc1 	bl	8019078 <USBD_CtlError>
      break;
 80186f6:	bf00      	nop
  }

  return ret;
 80186f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80186fa:	4618      	mov	r0, r3
 80186fc:	3710      	adds	r7, #16
 80186fe:	46bd      	mov	sp, r7
 8018700:	bd80      	pop	{r7, pc}

08018702 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018702:	b580      	push	{r7, lr}
 8018704:	b084      	sub	sp, #16
 8018706:	af00      	add	r7, sp, #0
 8018708:	6078      	str	r0, [r7, #4]
 801870a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801870c:	2300      	movs	r3, #0
 801870e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8018710:	683b      	ldr	r3, [r7, #0]
 8018712:	889b      	ldrh	r3, [r3, #4]
 8018714:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018716:	683b      	ldr	r3, [r7, #0]
 8018718:	781b      	ldrb	r3, [r3, #0]
 801871a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801871e:	2b40      	cmp	r3, #64	; 0x40
 8018720:	d007      	beq.n	8018732 <USBD_StdEPReq+0x30>
 8018722:	2b40      	cmp	r3, #64	; 0x40
 8018724:	f200 8145 	bhi.w	80189b2 <USBD_StdEPReq+0x2b0>
 8018728:	2b00      	cmp	r3, #0
 801872a:	d00c      	beq.n	8018746 <USBD_StdEPReq+0x44>
 801872c:	2b20      	cmp	r3, #32
 801872e:	f040 8140 	bne.w	80189b2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018738:	689b      	ldr	r3, [r3, #8]
 801873a:	6839      	ldr	r1, [r7, #0]
 801873c:	6878      	ldr	r0, [r7, #4]
 801873e:	4798      	blx	r3
 8018740:	4603      	mov	r3, r0
 8018742:	73fb      	strb	r3, [r7, #15]
      break;
 8018744:	e13a      	b.n	80189bc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8018746:	683b      	ldr	r3, [r7, #0]
 8018748:	785b      	ldrb	r3, [r3, #1]
 801874a:	2b03      	cmp	r3, #3
 801874c:	d007      	beq.n	801875e <USBD_StdEPReq+0x5c>
 801874e:	2b03      	cmp	r3, #3
 8018750:	f300 8129 	bgt.w	80189a6 <USBD_StdEPReq+0x2a4>
 8018754:	2b00      	cmp	r3, #0
 8018756:	d07f      	beq.n	8018858 <USBD_StdEPReq+0x156>
 8018758:	2b01      	cmp	r3, #1
 801875a:	d03c      	beq.n	80187d6 <USBD_StdEPReq+0xd4>
 801875c:	e123      	b.n	80189a6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018764:	b2db      	uxtb	r3, r3
 8018766:	2b02      	cmp	r3, #2
 8018768:	d002      	beq.n	8018770 <USBD_StdEPReq+0x6e>
 801876a:	2b03      	cmp	r3, #3
 801876c:	d016      	beq.n	801879c <USBD_StdEPReq+0x9a>
 801876e:	e02c      	b.n	80187ca <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018770:	7bbb      	ldrb	r3, [r7, #14]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d00d      	beq.n	8018792 <USBD_StdEPReq+0x90>
 8018776:	7bbb      	ldrb	r3, [r7, #14]
 8018778:	2b80      	cmp	r3, #128	; 0x80
 801877a:	d00a      	beq.n	8018792 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801877c:	7bbb      	ldrb	r3, [r7, #14]
 801877e:	4619      	mov	r1, r3
 8018780:	6878      	ldr	r0, [r7, #4]
 8018782:	f001 f9b7 	bl	8019af4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8018786:	2180      	movs	r1, #128	; 0x80
 8018788:	6878      	ldr	r0, [r7, #4]
 801878a:	f001 f9b3 	bl	8019af4 <USBD_LL_StallEP>
 801878e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8018790:	e020      	b.n	80187d4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8018792:	6839      	ldr	r1, [r7, #0]
 8018794:	6878      	ldr	r0, [r7, #4]
 8018796:	f000 fc6f 	bl	8019078 <USBD_CtlError>
              break;
 801879a:	e01b      	b.n	80187d4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801879c:	683b      	ldr	r3, [r7, #0]
 801879e:	885b      	ldrh	r3, [r3, #2]
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d10e      	bne.n	80187c2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80187a4:	7bbb      	ldrb	r3, [r7, #14]
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d00b      	beq.n	80187c2 <USBD_StdEPReq+0xc0>
 80187aa:	7bbb      	ldrb	r3, [r7, #14]
 80187ac:	2b80      	cmp	r3, #128	; 0x80
 80187ae:	d008      	beq.n	80187c2 <USBD_StdEPReq+0xc0>
 80187b0:	683b      	ldr	r3, [r7, #0]
 80187b2:	88db      	ldrh	r3, [r3, #6]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d104      	bne.n	80187c2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80187b8:	7bbb      	ldrb	r3, [r7, #14]
 80187ba:	4619      	mov	r1, r3
 80187bc:	6878      	ldr	r0, [r7, #4]
 80187be:	f001 f999 	bl	8019af4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80187c2:	6878      	ldr	r0, [r7, #4]
 80187c4:	f000 fd23 	bl	801920e <USBD_CtlSendStatus>

              break;
 80187c8:	e004      	b.n	80187d4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80187ca:	6839      	ldr	r1, [r7, #0]
 80187cc:	6878      	ldr	r0, [r7, #4]
 80187ce:	f000 fc53 	bl	8019078 <USBD_CtlError>
              break;
 80187d2:	bf00      	nop
          }
          break;
 80187d4:	e0ec      	b.n	80189b0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80187dc:	b2db      	uxtb	r3, r3
 80187de:	2b02      	cmp	r3, #2
 80187e0:	d002      	beq.n	80187e8 <USBD_StdEPReq+0xe6>
 80187e2:	2b03      	cmp	r3, #3
 80187e4:	d016      	beq.n	8018814 <USBD_StdEPReq+0x112>
 80187e6:	e030      	b.n	801884a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80187e8:	7bbb      	ldrb	r3, [r7, #14]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d00d      	beq.n	801880a <USBD_StdEPReq+0x108>
 80187ee:	7bbb      	ldrb	r3, [r7, #14]
 80187f0:	2b80      	cmp	r3, #128	; 0x80
 80187f2:	d00a      	beq.n	801880a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80187f4:	7bbb      	ldrb	r3, [r7, #14]
 80187f6:	4619      	mov	r1, r3
 80187f8:	6878      	ldr	r0, [r7, #4]
 80187fa:	f001 f97b 	bl	8019af4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80187fe:	2180      	movs	r1, #128	; 0x80
 8018800:	6878      	ldr	r0, [r7, #4]
 8018802:	f001 f977 	bl	8019af4 <USBD_LL_StallEP>
 8018806:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8018808:	e025      	b.n	8018856 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801880a:	6839      	ldr	r1, [r7, #0]
 801880c:	6878      	ldr	r0, [r7, #4]
 801880e:	f000 fc33 	bl	8019078 <USBD_CtlError>
              break;
 8018812:	e020      	b.n	8018856 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8018814:	683b      	ldr	r3, [r7, #0]
 8018816:	885b      	ldrh	r3, [r3, #2]
 8018818:	2b00      	cmp	r3, #0
 801881a:	d11b      	bne.n	8018854 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801881c:	7bbb      	ldrb	r3, [r7, #14]
 801881e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018822:	2b00      	cmp	r3, #0
 8018824:	d004      	beq.n	8018830 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8018826:	7bbb      	ldrb	r3, [r7, #14]
 8018828:	4619      	mov	r1, r3
 801882a:	6878      	ldr	r0, [r7, #4]
 801882c:	f001 f998 	bl	8019b60 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8018830:	6878      	ldr	r0, [r7, #4]
 8018832:	f000 fcec 	bl	801920e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801883c:	689b      	ldr	r3, [r3, #8]
 801883e:	6839      	ldr	r1, [r7, #0]
 8018840:	6878      	ldr	r0, [r7, #4]
 8018842:	4798      	blx	r3
 8018844:	4603      	mov	r3, r0
 8018846:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8018848:	e004      	b.n	8018854 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801884a:	6839      	ldr	r1, [r7, #0]
 801884c:	6878      	ldr	r0, [r7, #4]
 801884e:	f000 fc13 	bl	8019078 <USBD_CtlError>
              break;
 8018852:	e000      	b.n	8018856 <USBD_StdEPReq+0x154>
              break;
 8018854:	bf00      	nop
          }
          break;
 8018856:	e0ab      	b.n	80189b0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801885e:	b2db      	uxtb	r3, r3
 8018860:	2b02      	cmp	r3, #2
 8018862:	d002      	beq.n	801886a <USBD_StdEPReq+0x168>
 8018864:	2b03      	cmp	r3, #3
 8018866:	d032      	beq.n	80188ce <USBD_StdEPReq+0x1cc>
 8018868:	e097      	b.n	801899a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801886a:	7bbb      	ldrb	r3, [r7, #14]
 801886c:	2b00      	cmp	r3, #0
 801886e:	d007      	beq.n	8018880 <USBD_StdEPReq+0x17e>
 8018870:	7bbb      	ldrb	r3, [r7, #14]
 8018872:	2b80      	cmp	r3, #128	; 0x80
 8018874:	d004      	beq.n	8018880 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8018876:	6839      	ldr	r1, [r7, #0]
 8018878:	6878      	ldr	r0, [r7, #4]
 801887a:	f000 fbfd 	bl	8019078 <USBD_CtlError>
                break;
 801887e:	e091      	b.n	80189a4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018880:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018884:	2b00      	cmp	r3, #0
 8018886:	da0b      	bge.n	80188a0 <USBD_StdEPReq+0x19e>
 8018888:	7bbb      	ldrb	r3, [r7, #14]
 801888a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801888e:	4613      	mov	r3, r2
 8018890:	009b      	lsls	r3, r3, #2
 8018892:	4413      	add	r3, r2
 8018894:	009b      	lsls	r3, r3, #2
 8018896:	3310      	adds	r3, #16
 8018898:	687a      	ldr	r2, [r7, #4]
 801889a:	4413      	add	r3, r2
 801889c:	3304      	adds	r3, #4
 801889e:	e00b      	b.n	80188b8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80188a0:	7bbb      	ldrb	r3, [r7, #14]
 80188a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80188a6:	4613      	mov	r3, r2
 80188a8:	009b      	lsls	r3, r3, #2
 80188aa:	4413      	add	r3, r2
 80188ac:	009b      	lsls	r3, r3, #2
 80188ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80188b2:	687a      	ldr	r2, [r7, #4]
 80188b4:	4413      	add	r3, r2
 80188b6:	3304      	adds	r3, #4
 80188b8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80188ba:	68bb      	ldr	r3, [r7, #8]
 80188bc:	2200      	movs	r2, #0
 80188be:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80188c0:	68bb      	ldr	r3, [r7, #8]
 80188c2:	2202      	movs	r2, #2
 80188c4:	4619      	mov	r1, r3
 80188c6:	6878      	ldr	r0, [r7, #4]
 80188c8:	f000 fc47 	bl	801915a <USBD_CtlSendData>
              break;
 80188cc:	e06a      	b.n	80189a4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80188ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	da11      	bge.n	80188fa <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80188d6:	7bbb      	ldrb	r3, [r7, #14]
 80188d8:	f003 020f 	and.w	r2, r3, #15
 80188dc:	6879      	ldr	r1, [r7, #4]
 80188de:	4613      	mov	r3, r2
 80188e0:	009b      	lsls	r3, r3, #2
 80188e2:	4413      	add	r3, r2
 80188e4:	009b      	lsls	r3, r3, #2
 80188e6:	440b      	add	r3, r1
 80188e8:	3324      	adds	r3, #36	; 0x24
 80188ea:	881b      	ldrh	r3, [r3, #0]
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d117      	bne.n	8018920 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80188f0:	6839      	ldr	r1, [r7, #0]
 80188f2:	6878      	ldr	r0, [r7, #4]
 80188f4:	f000 fbc0 	bl	8019078 <USBD_CtlError>
                  break;
 80188f8:	e054      	b.n	80189a4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80188fa:	7bbb      	ldrb	r3, [r7, #14]
 80188fc:	f003 020f 	and.w	r2, r3, #15
 8018900:	6879      	ldr	r1, [r7, #4]
 8018902:	4613      	mov	r3, r2
 8018904:	009b      	lsls	r3, r3, #2
 8018906:	4413      	add	r3, r2
 8018908:	009b      	lsls	r3, r3, #2
 801890a:	440b      	add	r3, r1
 801890c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8018910:	881b      	ldrh	r3, [r3, #0]
 8018912:	2b00      	cmp	r3, #0
 8018914:	d104      	bne.n	8018920 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8018916:	6839      	ldr	r1, [r7, #0]
 8018918:	6878      	ldr	r0, [r7, #4]
 801891a:	f000 fbad 	bl	8019078 <USBD_CtlError>
                  break;
 801891e:	e041      	b.n	80189a4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018924:	2b00      	cmp	r3, #0
 8018926:	da0b      	bge.n	8018940 <USBD_StdEPReq+0x23e>
 8018928:	7bbb      	ldrb	r3, [r7, #14]
 801892a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801892e:	4613      	mov	r3, r2
 8018930:	009b      	lsls	r3, r3, #2
 8018932:	4413      	add	r3, r2
 8018934:	009b      	lsls	r3, r3, #2
 8018936:	3310      	adds	r3, #16
 8018938:	687a      	ldr	r2, [r7, #4]
 801893a:	4413      	add	r3, r2
 801893c:	3304      	adds	r3, #4
 801893e:	e00b      	b.n	8018958 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8018940:	7bbb      	ldrb	r3, [r7, #14]
 8018942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018946:	4613      	mov	r3, r2
 8018948:	009b      	lsls	r3, r3, #2
 801894a:	4413      	add	r3, r2
 801894c:	009b      	lsls	r3, r3, #2
 801894e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8018952:	687a      	ldr	r2, [r7, #4]
 8018954:	4413      	add	r3, r2
 8018956:	3304      	adds	r3, #4
 8018958:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801895a:	7bbb      	ldrb	r3, [r7, #14]
 801895c:	2b00      	cmp	r3, #0
 801895e:	d002      	beq.n	8018966 <USBD_StdEPReq+0x264>
 8018960:	7bbb      	ldrb	r3, [r7, #14]
 8018962:	2b80      	cmp	r3, #128	; 0x80
 8018964:	d103      	bne.n	801896e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8018966:	68bb      	ldr	r3, [r7, #8]
 8018968:	2200      	movs	r2, #0
 801896a:	601a      	str	r2, [r3, #0]
 801896c:	e00e      	b.n	801898c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801896e:	7bbb      	ldrb	r3, [r7, #14]
 8018970:	4619      	mov	r1, r3
 8018972:	6878      	ldr	r0, [r7, #4]
 8018974:	f001 f92a 	bl	8019bcc <USBD_LL_IsStallEP>
 8018978:	4603      	mov	r3, r0
 801897a:	2b00      	cmp	r3, #0
 801897c:	d003      	beq.n	8018986 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801897e:	68bb      	ldr	r3, [r7, #8]
 8018980:	2201      	movs	r2, #1
 8018982:	601a      	str	r2, [r3, #0]
 8018984:	e002      	b.n	801898c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8018986:	68bb      	ldr	r3, [r7, #8]
 8018988:	2200      	movs	r2, #0
 801898a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801898c:	68bb      	ldr	r3, [r7, #8]
 801898e:	2202      	movs	r2, #2
 8018990:	4619      	mov	r1, r3
 8018992:	6878      	ldr	r0, [r7, #4]
 8018994:	f000 fbe1 	bl	801915a <USBD_CtlSendData>
              break;
 8018998:	e004      	b.n	80189a4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 801899a:	6839      	ldr	r1, [r7, #0]
 801899c:	6878      	ldr	r0, [r7, #4]
 801899e:	f000 fb6b 	bl	8019078 <USBD_CtlError>
              break;
 80189a2:	bf00      	nop
          }
          break;
 80189a4:	e004      	b.n	80189b0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80189a6:	6839      	ldr	r1, [r7, #0]
 80189a8:	6878      	ldr	r0, [r7, #4]
 80189aa:	f000 fb65 	bl	8019078 <USBD_CtlError>
          break;
 80189ae:	bf00      	nop
      }
      break;
 80189b0:	e004      	b.n	80189bc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80189b2:	6839      	ldr	r1, [r7, #0]
 80189b4:	6878      	ldr	r0, [r7, #4]
 80189b6:	f000 fb5f 	bl	8019078 <USBD_CtlError>
      break;
 80189ba:	bf00      	nop
  }

  return ret;
 80189bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80189be:	4618      	mov	r0, r3
 80189c0:	3710      	adds	r7, #16
 80189c2:	46bd      	mov	sp, r7
 80189c4:	bd80      	pop	{r7, pc}
	...

080189c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80189c8:	b580      	push	{r7, lr}
 80189ca:	b084      	sub	sp, #16
 80189cc:	af00      	add	r7, sp, #0
 80189ce:	6078      	str	r0, [r7, #4]
 80189d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80189d2:	2300      	movs	r3, #0
 80189d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80189d6:	2300      	movs	r3, #0
 80189d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80189da:	2300      	movs	r3, #0
 80189dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80189de:	683b      	ldr	r3, [r7, #0]
 80189e0:	885b      	ldrh	r3, [r3, #2]
 80189e2:	0a1b      	lsrs	r3, r3, #8
 80189e4:	b29b      	uxth	r3, r3
 80189e6:	3b01      	subs	r3, #1
 80189e8:	2b0e      	cmp	r3, #14
 80189ea:	f200 8152 	bhi.w	8018c92 <USBD_GetDescriptor+0x2ca>
 80189ee:	a201      	add	r2, pc, #4	; (adr r2, 80189f4 <USBD_GetDescriptor+0x2c>)
 80189f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189f4:	08018a65 	.word	0x08018a65
 80189f8:	08018a7d 	.word	0x08018a7d
 80189fc:	08018abd 	.word	0x08018abd
 8018a00:	08018c93 	.word	0x08018c93
 8018a04:	08018c93 	.word	0x08018c93
 8018a08:	08018c33 	.word	0x08018c33
 8018a0c:	08018c5f 	.word	0x08018c5f
 8018a10:	08018c93 	.word	0x08018c93
 8018a14:	08018c93 	.word	0x08018c93
 8018a18:	08018c93 	.word	0x08018c93
 8018a1c:	08018c93 	.word	0x08018c93
 8018a20:	08018c93 	.word	0x08018c93
 8018a24:	08018c93 	.word	0x08018c93
 8018a28:	08018c93 	.word	0x08018c93
 8018a2c:	08018a31 	.word	0x08018a31
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018a36:	69db      	ldr	r3, [r3, #28]
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d00b      	beq.n	8018a54 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018a42:	69db      	ldr	r3, [r3, #28]
 8018a44:	687a      	ldr	r2, [r7, #4]
 8018a46:	7c12      	ldrb	r2, [r2, #16]
 8018a48:	f107 0108 	add.w	r1, r7, #8
 8018a4c:	4610      	mov	r0, r2
 8018a4e:	4798      	blx	r3
 8018a50:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018a52:	e126      	b.n	8018ca2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8018a54:	6839      	ldr	r1, [r7, #0]
 8018a56:	6878      	ldr	r0, [r7, #4]
 8018a58:	f000 fb0e 	bl	8019078 <USBD_CtlError>
        err++;
 8018a5c:	7afb      	ldrb	r3, [r7, #11]
 8018a5e:	3301      	adds	r3, #1
 8018a60:	72fb      	strb	r3, [r7, #11]
      break;
 8018a62:	e11e      	b.n	8018ca2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	687a      	ldr	r2, [r7, #4]
 8018a6e:	7c12      	ldrb	r2, [r2, #16]
 8018a70:	f107 0108 	add.w	r1, r7, #8
 8018a74:	4610      	mov	r0, r2
 8018a76:	4798      	blx	r3
 8018a78:	60f8      	str	r0, [r7, #12]
      break;
 8018a7a:	e112      	b.n	8018ca2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	7c1b      	ldrb	r3, [r3, #16]
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	d10d      	bne.n	8018aa0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a8c:	f107 0208 	add.w	r2, r7, #8
 8018a90:	4610      	mov	r0, r2
 8018a92:	4798      	blx	r3
 8018a94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8018a96:	68fb      	ldr	r3, [r7, #12]
 8018a98:	3301      	adds	r3, #1
 8018a9a:	2202      	movs	r2, #2
 8018a9c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8018a9e:	e100      	b.n	8018ca2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018aa8:	f107 0208 	add.w	r2, r7, #8
 8018aac:	4610      	mov	r0, r2
 8018aae:	4798      	blx	r3
 8018ab0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	3301      	adds	r3, #1
 8018ab6:	2202      	movs	r2, #2
 8018ab8:	701a      	strb	r2, [r3, #0]
      break;
 8018aba:	e0f2      	b.n	8018ca2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8018abc:	683b      	ldr	r3, [r7, #0]
 8018abe:	885b      	ldrh	r3, [r3, #2]
 8018ac0:	b2db      	uxtb	r3, r3
 8018ac2:	2b05      	cmp	r3, #5
 8018ac4:	f200 80ac 	bhi.w	8018c20 <USBD_GetDescriptor+0x258>
 8018ac8:	a201      	add	r2, pc, #4	; (adr r2, 8018ad0 <USBD_GetDescriptor+0x108>)
 8018aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ace:	bf00      	nop
 8018ad0:	08018ae9 	.word	0x08018ae9
 8018ad4:	08018b1d 	.word	0x08018b1d
 8018ad8:	08018b51 	.word	0x08018b51
 8018adc:	08018b85 	.word	0x08018b85
 8018ae0:	08018bb9 	.word	0x08018bb9
 8018ae4:	08018bed 	.word	0x08018bed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018aee:	685b      	ldr	r3, [r3, #4]
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d00b      	beq.n	8018b0c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018afa:	685b      	ldr	r3, [r3, #4]
 8018afc:	687a      	ldr	r2, [r7, #4]
 8018afe:	7c12      	ldrb	r2, [r2, #16]
 8018b00:	f107 0108 	add.w	r1, r7, #8
 8018b04:	4610      	mov	r0, r2
 8018b06:	4798      	blx	r3
 8018b08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018b0a:	e091      	b.n	8018c30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018b0c:	6839      	ldr	r1, [r7, #0]
 8018b0e:	6878      	ldr	r0, [r7, #4]
 8018b10:	f000 fab2 	bl	8019078 <USBD_CtlError>
            err++;
 8018b14:	7afb      	ldrb	r3, [r7, #11]
 8018b16:	3301      	adds	r3, #1
 8018b18:	72fb      	strb	r3, [r7, #11]
          break;
 8018b1a:	e089      	b.n	8018c30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018b22:	689b      	ldr	r3, [r3, #8]
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	d00b      	beq.n	8018b40 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018b2e:	689b      	ldr	r3, [r3, #8]
 8018b30:	687a      	ldr	r2, [r7, #4]
 8018b32:	7c12      	ldrb	r2, [r2, #16]
 8018b34:	f107 0108 	add.w	r1, r7, #8
 8018b38:	4610      	mov	r0, r2
 8018b3a:	4798      	blx	r3
 8018b3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018b3e:	e077      	b.n	8018c30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018b40:	6839      	ldr	r1, [r7, #0]
 8018b42:	6878      	ldr	r0, [r7, #4]
 8018b44:	f000 fa98 	bl	8019078 <USBD_CtlError>
            err++;
 8018b48:	7afb      	ldrb	r3, [r7, #11]
 8018b4a:	3301      	adds	r3, #1
 8018b4c:	72fb      	strb	r3, [r7, #11]
          break;
 8018b4e:	e06f      	b.n	8018c30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018b56:	68db      	ldr	r3, [r3, #12]
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	d00b      	beq.n	8018b74 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018b62:	68db      	ldr	r3, [r3, #12]
 8018b64:	687a      	ldr	r2, [r7, #4]
 8018b66:	7c12      	ldrb	r2, [r2, #16]
 8018b68:	f107 0108 	add.w	r1, r7, #8
 8018b6c:	4610      	mov	r0, r2
 8018b6e:	4798      	blx	r3
 8018b70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018b72:	e05d      	b.n	8018c30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018b74:	6839      	ldr	r1, [r7, #0]
 8018b76:	6878      	ldr	r0, [r7, #4]
 8018b78:	f000 fa7e 	bl	8019078 <USBD_CtlError>
            err++;
 8018b7c:	7afb      	ldrb	r3, [r7, #11]
 8018b7e:	3301      	adds	r3, #1
 8018b80:	72fb      	strb	r3, [r7, #11]
          break;
 8018b82:	e055      	b.n	8018c30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018b8a:	691b      	ldr	r3, [r3, #16]
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d00b      	beq.n	8018ba8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018b96:	691b      	ldr	r3, [r3, #16]
 8018b98:	687a      	ldr	r2, [r7, #4]
 8018b9a:	7c12      	ldrb	r2, [r2, #16]
 8018b9c:	f107 0108 	add.w	r1, r7, #8
 8018ba0:	4610      	mov	r0, r2
 8018ba2:	4798      	blx	r3
 8018ba4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018ba6:	e043      	b.n	8018c30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018ba8:	6839      	ldr	r1, [r7, #0]
 8018baa:	6878      	ldr	r0, [r7, #4]
 8018bac:	f000 fa64 	bl	8019078 <USBD_CtlError>
            err++;
 8018bb0:	7afb      	ldrb	r3, [r7, #11]
 8018bb2:	3301      	adds	r3, #1
 8018bb4:	72fb      	strb	r3, [r7, #11]
          break;
 8018bb6:	e03b      	b.n	8018c30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018bbe:	695b      	ldr	r3, [r3, #20]
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d00b      	beq.n	8018bdc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018bca:	695b      	ldr	r3, [r3, #20]
 8018bcc:	687a      	ldr	r2, [r7, #4]
 8018bce:	7c12      	ldrb	r2, [r2, #16]
 8018bd0:	f107 0108 	add.w	r1, r7, #8
 8018bd4:	4610      	mov	r0, r2
 8018bd6:	4798      	blx	r3
 8018bd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018bda:	e029      	b.n	8018c30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018bdc:	6839      	ldr	r1, [r7, #0]
 8018bde:	6878      	ldr	r0, [r7, #4]
 8018be0:	f000 fa4a 	bl	8019078 <USBD_CtlError>
            err++;
 8018be4:	7afb      	ldrb	r3, [r7, #11]
 8018be6:	3301      	adds	r3, #1
 8018be8:	72fb      	strb	r3, [r7, #11]
          break;
 8018bea:	e021      	b.n	8018c30 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8018bec:	687b      	ldr	r3, [r7, #4]
 8018bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018bf2:	699b      	ldr	r3, [r3, #24]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d00b      	beq.n	8018c10 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8018bfe:	699b      	ldr	r3, [r3, #24]
 8018c00:	687a      	ldr	r2, [r7, #4]
 8018c02:	7c12      	ldrb	r2, [r2, #16]
 8018c04:	f107 0108 	add.w	r1, r7, #8
 8018c08:	4610      	mov	r0, r2
 8018c0a:	4798      	blx	r3
 8018c0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018c0e:	e00f      	b.n	8018c30 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8018c10:	6839      	ldr	r1, [r7, #0]
 8018c12:	6878      	ldr	r0, [r7, #4]
 8018c14:	f000 fa30 	bl	8019078 <USBD_CtlError>
            err++;
 8018c18:	7afb      	ldrb	r3, [r7, #11]
 8018c1a:	3301      	adds	r3, #1
 8018c1c:	72fb      	strb	r3, [r7, #11]
          break;
 8018c1e:	e007      	b.n	8018c30 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8018c20:	6839      	ldr	r1, [r7, #0]
 8018c22:	6878      	ldr	r0, [r7, #4]
 8018c24:	f000 fa28 	bl	8019078 <USBD_CtlError>
          err++;
 8018c28:	7afb      	ldrb	r3, [r7, #11]
 8018c2a:	3301      	adds	r3, #1
 8018c2c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8018c2e:	bf00      	nop
      }
      break;
 8018c30:	e037      	b.n	8018ca2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	7c1b      	ldrb	r3, [r3, #16]
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d109      	bne.n	8018c4e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018c42:	f107 0208 	add.w	r2, r7, #8
 8018c46:	4610      	mov	r0, r2
 8018c48:	4798      	blx	r3
 8018c4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018c4c:	e029      	b.n	8018ca2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8018c4e:	6839      	ldr	r1, [r7, #0]
 8018c50:	6878      	ldr	r0, [r7, #4]
 8018c52:	f000 fa11 	bl	8019078 <USBD_CtlError>
        err++;
 8018c56:	7afb      	ldrb	r3, [r7, #11]
 8018c58:	3301      	adds	r3, #1
 8018c5a:	72fb      	strb	r3, [r7, #11]
      break;
 8018c5c:	e021      	b.n	8018ca2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	7c1b      	ldrb	r3, [r3, #16]
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	d10d      	bne.n	8018c82 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8018c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c6e:	f107 0208 	add.w	r2, r7, #8
 8018c72:	4610      	mov	r0, r2
 8018c74:	4798      	blx	r3
 8018c76:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8018c78:	68fb      	ldr	r3, [r7, #12]
 8018c7a:	3301      	adds	r3, #1
 8018c7c:	2207      	movs	r2, #7
 8018c7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018c80:	e00f      	b.n	8018ca2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8018c82:	6839      	ldr	r1, [r7, #0]
 8018c84:	6878      	ldr	r0, [r7, #4]
 8018c86:	f000 f9f7 	bl	8019078 <USBD_CtlError>
        err++;
 8018c8a:	7afb      	ldrb	r3, [r7, #11]
 8018c8c:	3301      	adds	r3, #1
 8018c8e:	72fb      	strb	r3, [r7, #11]
      break;
 8018c90:	e007      	b.n	8018ca2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8018c92:	6839      	ldr	r1, [r7, #0]
 8018c94:	6878      	ldr	r0, [r7, #4]
 8018c96:	f000 f9ef 	bl	8019078 <USBD_CtlError>
      err++;
 8018c9a:	7afb      	ldrb	r3, [r7, #11]
 8018c9c:	3301      	adds	r3, #1
 8018c9e:	72fb      	strb	r3, [r7, #11]
      break;
 8018ca0:	bf00      	nop
  }

  if (err != 0U)
 8018ca2:	7afb      	ldrb	r3, [r7, #11]
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d11e      	bne.n	8018ce6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8018ca8:	683b      	ldr	r3, [r7, #0]
 8018caa:	88db      	ldrh	r3, [r3, #6]
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d016      	beq.n	8018cde <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8018cb0:	893b      	ldrh	r3, [r7, #8]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d00e      	beq.n	8018cd4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8018cb6:	683b      	ldr	r3, [r7, #0]
 8018cb8:	88da      	ldrh	r2, [r3, #6]
 8018cba:	893b      	ldrh	r3, [r7, #8]
 8018cbc:	4293      	cmp	r3, r2
 8018cbe:	bf28      	it	cs
 8018cc0:	4613      	movcs	r3, r2
 8018cc2:	b29b      	uxth	r3, r3
 8018cc4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8018cc6:	893b      	ldrh	r3, [r7, #8]
 8018cc8:	461a      	mov	r2, r3
 8018cca:	68f9      	ldr	r1, [r7, #12]
 8018ccc:	6878      	ldr	r0, [r7, #4]
 8018cce:	f000 fa44 	bl	801915a <USBD_CtlSendData>
 8018cd2:	e009      	b.n	8018ce8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8018cd4:	6839      	ldr	r1, [r7, #0]
 8018cd6:	6878      	ldr	r0, [r7, #4]
 8018cd8:	f000 f9ce 	bl	8019078 <USBD_CtlError>
 8018cdc:	e004      	b.n	8018ce8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8018cde:	6878      	ldr	r0, [r7, #4]
 8018ce0:	f000 fa95 	bl	801920e <USBD_CtlSendStatus>
 8018ce4:	e000      	b.n	8018ce8 <USBD_GetDescriptor+0x320>
    return;
 8018ce6:	bf00      	nop
  }
}
 8018ce8:	3710      	adds	r7, #16
 8018cea:	46bd      	mov	sp, r7
 8018cec:	bd80      	pop	{r7, pc}
 8018cee:	bf00      	nop

08018cf0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018cf0:	b580      	push	{r7, lr}
 8018cf2:	b084      	sub	sp, #16
 8018cf4:	af00      	add	r7, sp, #0
 8018cf6:	6078      	str	r0, [r7, #4]
 8018cf8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8018cfa:	683b      	ldr	r3, [r7, #0]
 8018cfc:	889b      	ldrh	r3, [r3, #4]
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d131      	bne.n	8018d66 <USBD_SetAddress+0x76>
 8018d02:	683b      	ldr	r3, [r7, #0]
 8018d04:	88db      	ldrh	r3, [r3, #6]
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d12d      	bne.n	8018d66 <USBD_SetAddress+0x76>
 8018d0a:	683b      	ldr	r3, [r7, #0]
 8018d0c:	885b      	ldrh	r3, [r3, #2]
 8018d0e:	2b7f      	cmp	r3, #127	; 0x7f
 8018d10:	d829      	bhi.n	8018d66 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8018d12:	683b      	ldr	r3, [r7, #0]
 8018d14:	885b      	ldrh	r3, [r3, #2]
 8018d16:	b2db      	uxtb	r3, r3
 8018d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018d1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018d24:	b2db      	uxtb	r3, r3
 8018d26:	2b03      	cmp	r3, #3
 8018d28:	d104      	bne.n	8018d34 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8018d2a:	6839      	ldr	r1, [r7, #0]
 8018d2c:	6878      	ldr	r0, [r7, #4]
 8018d2e:	f000 f9a3 	bl	8019078 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018d32:	e01d      	b.n	8018d70 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	7bfa      	ldrb	r2, [r7, #15]
 8018d38:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8018d3c:	7bfb      	ldrb	r3, [r7, #15]
 8018d3e:	4619      	mov	r1, r3
 8018d40:	6878      	ldr	r0, [r7, #4]
 8018d42:	f000 ff6f 	bl	8019c24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8018d46:	6878      	ldr	r0, [r7, #4]
 8018d48:	f000 fa61 	bl	801920e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8018d4c:	7bfb      	ldrb	r3, [r7, #15]
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d004      	beq.n	8018d5c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	2202      	movs	r2, #2
 8018d56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018d5a:	e009      	b.n	8018d70 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	2201      	movs	r2, #1
 8018d60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018d64:	e004      	b.n	8018d70 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8018d66:	6839      	ldr	r1, [r7, #0]
 8018d68:	6878      	ldr	r0, [r7, #4]
 8018d6a:	f000 f985 	bl	8019078 <USBD_CtlError>
  }
}
 8018d6e:	bf00      	nop
 8018d70:	bf00      	nop
 8018d72:	3710      	adds	r7, #16
 8018d74:	46bd      	mov	sp, r7
 8018d76:	bd80      	pop	{r7, pc}

08018d78 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b084      	sub	sp, #16
 8018d7c:	af00      	add	r7, sp, #0
 8018d7e:	6078      	str	r0, [r7, #4]
 8018d80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018d82:	2300      	movs	r3, #0
 8018d84:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8018d86:	683b      	ldr	r3, [r7, #0]
 8018d88:	885b      	ldrh	r3, [r3, #2]
 8018d8a:	b2da      	uxtb	r2, r3
 8018d8c:	4b4c      	ldr	r3, [pc, #304]	; (8018ec0 <USBD_SetConfig+0x148>)
 8018d8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8018d90:	4b4b      	ldr	r3, [pc, #300]	; (8018ec0 <USBD_SetConfig+0x148>)
 8018d92:	781b      	ldrb	r3, [r3, #0]
 8018d94:	2b01      	cmp	r3, #1
 8018d96:	d905      	bls.n	8018da4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8018d98:	6839      	ldr	r1, [r7, #0]
 8018d9a:	6878      	ldr	r0, [r7, #4]
 8018d9c:	f000 f96c 	bl	8019078 <USBD_CtlError>
    return USBD_FAIL;
 8018da0:	2303      	movs	r3, #3
 8018da2:	e088      	b.n	8018eb6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018daa:	b2db      	uxtb	r3, r3
 8018dac:	2b02      	cmp	r3, #2
 8018dae:	d002      	beq.n	8018db6 <USBD_SetConfig+0x3e>
 8018db0:	2b03      	cmp	r3, #3
 8018db2:	d025      	beq.n	8018e00 <USBD_SetConfig+0x88>
 8018db4:	e071      	b.n	8018e9a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8018db6:	4b42      	ldr	r3, [pc, #264]	; (8018ec0 <USBD_SetConfig+0x148>)
 8018db8:	781b      	ldrb	r3, [r3, #0]
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	d01c      	beq.n	8018df8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8018dbe:	4b40      	ldr	r3, [pc, #256]	; (8018ec0 <USBD_SetConfig+0x148>)
 8018dc0:	781b      	ldrb	r3, [r3, #0]
 8018dc2:	461a      	mov	r2, r3
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018dc8:	4b3d      	ldr	r3, [pc, #244]	; (8018ec0 <USBD_SetConfig+0x148>)
 8018dca:	781b      	ldrb	r3, [r3, #0]
 8018dcc:	4619      	mov	r1, r3
 8018dce:	6878      	ldr	r0, [r7, #4]
 8018dd0:	f7ff f91e 	bl	8018010 <USBD_SetClassConfig>
 8018dd4:	4603      	mov	r3, r0
 8018dd6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8018dd8:	7bfb      	ldrb	r3, [r7, #15]
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d004      	beq.n	8018de8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8018dde:	6839      	ldr	r1, [r7, #0]
 8018de0:	6878      	ldr	r0, [r7, #4]
 8018de2:	f000 f949 	bl	8019078 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018de6:	e065      	b.n	8018eb4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8018de8:	6878      	ldr	r0, [r7, #4]
 8018dea:	f000 fa10 	bl	801920e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	2203      	movs	r2, #3
 8018df2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8018df6:	e05d      	b.n	8018eb4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8018df8:	6878      	ldr	r0, [r7, #4]
 8018dfa:	f000 fa08 	bl	801920e <USBD_CtlSendStatus>
      break;
 8018dfe:	e059      	b.n	8018eb4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8018e00:	4b2f      	ldr	r3, [pc, #188]	; (8018ec0 <USBD_SetConfig+0x148>)
 8018e02:	781b      	ldrb	r3, [r3, #0]
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d112      	bne.n	8018e2e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	2202      	movs	r2, #2
 8018e0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8018e10:	4b2b      	ldr	r3, [pc, #172]	; (8018ec0 <USBD_SetConfig+0x148>)
 8018e12:	781b      	ldrb	r3, [r3, #0]
 8018e14:	461a      	mov	r2, r3
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018e1a:	4b29      	ldr	r3, [pc, #164]	; (8018ec0 <USBD_SetConfig+0x148>)
 8018e1c:	781b      	ldrb	r3, [r3, #0]
 8018e1e:	4619      	mov	r1, r3
 8018e20:	6878      	ldr	r0, [r7, #4]
 8018e22:	f7ff f911 	bl	8018048 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8018e26:	6878      	ldr	r0, [r7, #4]
 8018e28:	f000 f9f1 	bl	801920e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8018e2c:	e042      	b.n	8018eb4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8018e2e:	4b24      	ldr	r3, [pc, #144]	; (8018ec0 <USBD_SetConfig+0x148>)
 8018e30:	781b      	ldrb	r3, [r3, #0]
 8018e32:	461a      	mov	r2, r3
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	685b      	ldr	r3, [r3, #4]
 8018e38:	429a      	cmp	r2, r3
 8018e3a:	d02a      	beq.n	8018e92 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	685b      	ldr	r3, [r3, #4]
 8018e40:	b2db      	uxtb	r3, r3
 8018e42:	4619      	mov	r1, r3
 8018e44:	6878      	ldr	r0, [r7, #4]
 8018e46:	f7ff f8ff 	bl	8018048 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8018e4a:	4b1d      	ldr	r3, [pc, #116]	; (8018ec0 <USBD_SetConfig+0x148>)
 8018e4c:	781b      	ldrb	r3, [r3, #0]
 8018e4e:	461a      	mov	r2, r3
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8018e54:	4b1a      	ldr	r3, [pc, #104]	; (8018ec0 <USBD_SetConfig+0x148>)
 8018e56:	781b      	ldrb	r3, [r3, #0]
 8018e58:	4619      	mov	r1, r3
 8018e5a:	6878      	ldr	r0, [r7, #4]
 8018e5c:	f7ff f8d8 	bl	8018010 <USBD_SetClassConfig>
 8018e60:	4603      	mov	r3, r0
 8018e62:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8018e64:	7bfb      	ldrb	r3, [r7, #15]
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d00f      	beq.n	8018e8a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8018e6a:	6839      	ldr	r1, [r7, #0]
 8018e6c:	6878      	ldr	r0, [r7, #4]
 8018e6e:	f000 f903 	bl	8019078 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	685b      	ldr	r3, [r3, #4]
 8018e76:	b2db      	uxtb	r3, r3
 8018e78:	4619      	mov	r1, r3
 8018e7a:	6878      	ldr	r0, [r7, #4]
 8018e7c:	f7ff f8e4 	bl	8018048 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	2202      	movs	r2, #2
 8018e84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8018e88:	e014      	b.n	8018eb4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8018e8a:	6878      	ldr	r0, [r7, #4]
 8018e8c:	f000 f9bf 	bl	801920e <USBD_CtlSendStatus>
      break;
 8018e90:	e010      	b.n	8018eb4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8018e92:	6878      	ldr	r0, [r7, #4]
 8018e94:	f000 f9bb 	bl	801920e <USBD_CtlSendStatus>
      break;
 8018e98:	e00c      	b.n	8018eb4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8018e9a:	6839      	ldr	r1, [r7, #0]
 8018e9c:	6878      	ldr	r0, [r7, #4]
 8018e9e:	f000 f8eb 	bl	8019078 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8018ea2:	4b07      	ldr	r3, [pc, #28]	; (8018ec0 <USBD_SetConfig+0x148>)
 8018ea4:	781b      	ldrb	r3, [r3, #0]
 8018ea6:	4619      	mov	r1, r3
 8018ea8:	6878      	ldr	r0, [r7, #4]
 8018eaa:	f7ff f8cd 	bl	8018048 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8018eae:	2303      	movs	r3, #3
 8018eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8018eb2:	bf00      	nop
  }

  return ret;
 8018eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8018eb6:	4618      	mov	r0, r3
 8018eb8:	3710      	adds	r7, #16
 8018eba:	46bd      	mov	sp, r7
 8018ebc:	bd80      	pop	{r7, pc}
 8018ebe:	bf00      	nop
 8018ec0:	20001248 	.word	0x20001248

08018ec4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018ec4:	b580      	push	{r7, lr}
 8018ec6:	b082      	sub	sp, #8
 8018ec8:	af00      	add	r7, sp, #0
 8018eca:	6078      	str	r0, [r7, #4]
 8018ecc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8018ece:	683b      	ldr	r3, [r7, #0]
 8018ed0:	88db      	ldrh	r3, [r3, #6]
 8018ed2:	2b01      	cmp	r3, #1
 8018ed4:	d004      	beq.n	8018ee0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8018ed6:	6839      	ldr	r1, [r7, #0]
 8018ed8:	6878      	ldr	r0, [r7, #4]
 8018eda:	f000 f8cd 	bl	8019078 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8018ede:	e023      	b.n	8018f28 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018ee6:	b2db      	uxtb	r3, r3
 8018ee8:	2b02      	cmp	r3, #2
 8018eea:	dc02      	bgt.n	8018ef2 <USBD_GetConfig+0x2e>
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	dc03      	bgt.n	8018ef8 <USBD_GetConfig+0x34>
 8018ef0:	e015      	b.n	8018f1e <USBD_GetConfig+0x5a>
 8018ef2:	2b03      	cmp	r3, #3
 8018ef4:	d00b      	beq.n	8018f0e <USBD_GetConfig+0x4a>
 8018ef6:	e012      	b.n	8018f1e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	2200      	movs	r2, #0
 8018efc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	3308      	adds	r3, #8
 8018f02:	2201      	movs	r2, #1
 8018f04:	4619      	mov	r1, r3
 8018f06:	6878      	ldr	r0, [r7, #4]
 8018f08:	f000 f927 	bl	801915a <USBD_CtlSendData>
        break;
 8018f0c:	e00c      	b.n	8018f28 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	3304      	adds	r3, #4
 8018f12:	2201      	movs	r2, #1
 8018f14:	4619      	mov	r1, r3
 8018f16:	6878      	ldr	r0, [r7, #4]
 8018f18:	f000 f91f 	bl	801915a <USBD_CtlSendData>
        break;
 8018f1c:	e004      	b.n	8018f28 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8018f1e:	6839      	ldr	r1, [r7, #0]
 8018f20:	6878      	ldr	r0, [r7, #4]
 8018f22:	f000 f8a9 	bl	8019078 <USBD_CtlError>
        break;
 8018f26:	bf00      	nop
}
 8018f28:	bf00      	nop
 8018f2a:	3708      	adds	r7, #8
 8018f2c:	46bd      	mov	sp, r7
 8018f2e:	bd80      	pop	{r7, pc}

08018f30 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018f30:	b580      	push	{r7, lr}
 8018f32:	b082      	sub	sp, #8
 8018f34:	af00      	add	r7, sp, #0
 8018f36:	6078      	str	r0, [r7, #4]
 8018f38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018f40:	b2db      	uxtb	r3, r3
 8018f42:	3b01      	subs	r3, #1
 8018f44:	2b02      	cmp	r3, #2
 8018f46:	d81e      	bhi.n	8018f86 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8018f48:	683b      	ldr	r3, [r7, #0]
 8018f4a:	88db      	ldrh	r3, [r3, #6]
 8018f4c:	2b02      	cmp	r3, #2
 8018f4e:	d004      	beq.n	8018f5a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8018f50:	6839      	ldr	r1, [r7, #0]
 8018f52:	6878      	ldr	r0, [r7, #4]
 8018f54:	f000 f890 	bl	8019078 <USBD_CtlError>
        break;
 8018f58:	e01a      	b.n	8018f90 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	2201      	movs	r2, #1
 8018f5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d005      	beq.n	8018f76 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	68db      	ldr	r3, [r3, #12]
 8018f6e:	f043 0202 	orr.w	r2, r3, #2
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	330c      	adds	r3, #12
 8018f7a:	2202      	movs	r2, #2
 8018f7c:	4619      	mov	r1, r3
 8018f7e:	6878      	ldr	r0, [r7, #4]
 8018f80:	f000 f8eb 	bl	801915a <USBD_CtlSendData>
      break;
 8018f84:	e004      	b.n	8018f90 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8018f86:	6839      	ldr	r1, [r7, #0]
 8018f88:	6878      	ldr	r0, [r7, #4]
 8018f8a:	f000 f875 	bl	8019078 <USBD_CtlError>
      break;
 8018f8e:	bf00      	nop
  }
}
 8018f90:	bf00      	nop
 8018f92:	3708      	adds	r7, #8
 8018f94:	46bd      	mov	sp, r7
 8018f96:	bd80      	pop	{r7, pc}

08018f98 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018f98:	b580      	push	{r7, lr}
 8018f9a:	b082      	sub	sp, #8
 8018f9c:	af00      	add	r7, sp, #0
 8018f9e:	6078      	str	r0, [r7, #4]
 8018fa0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018fa2:	683b      	ldr	r3, [r7, #0]
 8018fa4:	885b      	ldrh	r3, [r3, #2]
 8018fa6:	2b01      	cmp	r3, #1
 8018fa8:	d106      	bne.n	8018fb8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	2201      	movs	r2, #1
 8018fae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8018fb2:	6878      	ldr	r0, [r7, #4]
 8018fb4:	f000 f92b 	bl	801920e <USBD_CtlSendStatus>
  }
}
 8018fb8:	bf00      	nop
 8018fba:	3708      	adds	r7, #8
 8018fbc:	46bd      	mov	sp, r7
 8018fbe:	bd80      	pop	{r7, pc}

08018fc0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018fc0:	b580      	push	{r7, lr}
 8018fc2:	b082      	sub	sp, #8
 8018fc4:	af00      	add	r7, sp, #0
 8018fc6:	6078      	str	r0, [r7, #4]
 8018fc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8018fd0:	b2db      	uxtb	r3, r3
 8018fd2:	3b01      	subs	r3, #1
 8018fd4:	2b02      	cmp	r3, #2
 8018fd6:	d80b      	bhi.n	8018ff0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018fd8:	683b      	ldr	r3, [r7, #0]
 8018fda:	885b      	ldrh	r3, [r3, #2]
 8018fdc:	2b01      	cmp	r3, #1
 8018fde:	d10c      	bne.n	8018ffa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	2200      	movs	r2, #0
 8018fe4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8018fe8:	6878      	ldr	r0, [r7, #4]
 8018fea:	f000 f910 	bl	801920e <USBD_CtlSendStatus>
      }
      break;
 8018fee:	e004      	b.n	8018ffa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8018ff0:	6839      	ldr	r1, [r7, #0]
 8018ff2:	6878      	ldr	r0, [r7, #4]
 8018ff4:	f000 f840 	bl	8019078 <USBD_CtlError>
      break;
 8018ff8:	e000      	b.n	8018ffc <USBD_ClrFeature+0x3c>
      break;
 8018ffa:	bf00      	nop
  }
}
 8018ffc:	bf00      	nop
 8018ffe:	3708      	adds	r7, #8
 8019000:	46bd      	mov	sp, r7
 8019002:	bd80      	pop	{r7, pc}

08019004 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8019004:	b580      	push	{r7, lr}
 8019006:	b084      	sub	sp, #16
 8019008:	af00      	add	r7, sp, #0
 801900a:	6078      	str	r0, [r7, #4]
 801900c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801900e:	683b      	ldr	r3, [r7, #0]
 8019010:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8019012:	68fb      	ldr	r3, [r7, #12]
 8019014:	781a      	ldrb	r2, [r3, #0]
 8019016:	687b      	ldr	r3, [r7, #4]
 8019018:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801901a:	68fb      	ldr	r3, [r7, #12]
 801901c:	3301      	adds	r3, #1
 801901e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	781a      	ldrb	r2, [r3, #0]
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8019028:	68fb      	ldr	r3, [r7, #12]
 801902a:	3301      	adds	r3, #1
 801902c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801902e:	68f8      	ldr	r0, [r7, #12]
 8019030:	f7ff fa91 	bl	8018556 <SWAPBYTE>
 8019034:	4603      	mov	r3, r0
 8019036:	461a      	mov	r2, r3
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801903c:	68fb      	ldr	r3, [r7, #12]
 801903e:	3301      	adds	r3, #1
 8019040:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8019042:	68fb      	ldr	r3, [r7, #12]
 8019044:	3301      	adds	r3, #1
 8019046:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8019048:	68f8      	ldr	r0, [r7, #12]
 801904a:	f7ff fa84 	bl	8018556 <SWAPBYTE>
 801904e:	4603      	mov	r3, r0
 8019050:	461a      	mov	r2, r3
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8019056:	68fb      	ldr	r3, [r7, #12]
 8019058:	3301      	adds	r3, #1
 801905a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801905c:	68fb      	ldr	r3, [r7, #12]
 801905e:	3301      	adds	r3, #1
 8019060:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8019062:	68f8      	ldr	r0, [r7, #12]
 8019064:	f7ff fa77 	bl	8018556 <SWAPBYTE>
 8019068:	4603      	mov	r3, r0
 801906a:	461a      	mov	r2, r3
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	80da      	strh	r2, [r3, #6]
}
 8019070:	bf00      	nop
 8019072:	3710      	adds	r7, #16
 8019074:	46bd      	mov	sp, r7
 8019076:	bd80      	pop	{r7, pc}

08019078 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8019078:	b580      	push	{r7, lr}
 801907a:	b082      	sub	sp, #8
 801907c:	af00      	add	r7, sp, #0
 801907e:	6078      	str	r0, [r7, #4]
 8019080:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8019082:	2180      	movs	r1, #128	; 0x80
 8019084:	6878      	ldr	r0, [r7, #4]
 8019086:	f000 fd35 	bl	8019af4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801908a:	2100      	movs	r1, #0
 801908c:	6878      	ldr	r0, [r7, #4]
 801908e:	f000 fd31 	bl	8019af4 <USBD_LL_StallEP>
}
 8019092:	bf00      	nop
 8019094:	3708      	adds	r7, #8
 8019096:	46bd      	mov	sp, r7
 8019098:	bd80      	pop	{r7, pc}

0801909a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801909a:	b580      	push	{r7, lr}
 801909c:	b086      	sub	sp, #24
 801909e:	af00      	add	r7, sp, #0
 80190a0:	60f8      	str	r0, [r7, #12]
 80190a2:	60b9      	str	r1, [r7, #8]
 80190a4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80190a6:	2300      	movs	r3, #0
 80190a8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80190aa:	68fb      	ldr	r3, [r7, #12]
 80190ac:	2b00      	cmp	r3, #0
 80190ae:	d036      	beq.n	801911e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80190b0:	68fb      	ldr	r3, [r7, #12]
 80190b2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80190b4:	6938      	ldr	r0, [r7, #16]
 80190b6:	f000 f836 	bl	8019126 <USBD_GetLen>
 80190ba:	4603      	mov	r3, r0
 80190bc:	3301      	adds	r3, #1
 80190be:	b29b      	uxth	r3, r3
 80190c0:	005b      	lsls	r3, r3, #1
 80190c2:	b29a      	uxth	r2, r3
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80190c8:	7dfb      	ldrb	r3, [r7, #23]
 80190ca:	68ba      	ldr	r2, [r7, #8]
 80190cc:	4413      	add	r3, r2
 80190ce:	687a      	ldr	r2, [r7, #4]
 80190d0:	7812      	ldrb	r2, [r2, #0]
 80190d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80190d4:	7dfb      	ldrb	r3, [r7, #23]
 80190d6:	3301      	adds	r3, #1
 80190d8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80190da:	7dfb      	ldrb	r3, [r7, #23]
 80190dc:	68ba      	ldr	r2, [r7, #8]
 80190de:	4413      	add	r3, r2
 80190e0:	2203      	movs	r2, #3
 80190e2:	701a      	strb	r2, [r3, #0]
  idx++;
 80190e4:	7dfb      	ldrb	r3, [r7, #23]
 80190e6:	3301      	adds	r3, #1
 80190e8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80190ea:	e013      	b.n	8019114 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80190ec:	7dfb      	ldrb	r3, [r7, #23]
 80190ee:	68ba      	ldr	r2, [r7, #8]
 80190f0:	4413      	add	r3, r2
 80190f2:	693a      	ldr	r2, [r7, #16]
 80190f4:	7812      	ldrb	r2, [r2, #0]
 80190f6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80190f8:	693b      	ldr	r3, [r7, #16]
 80190fa:	3301      	adds	r3, #1
 80190fc:	613b      	str	r3, [r7, #16]
    idx++;
 80190fe:	7dfb      	ldrb	r3, [r7, #23]
 8019100:	3301      	adds	r3, #1
 8019102:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8019104:	7dfb      	ldrb	r3, [r7, #23]
 8019106:	68ba      	ldr	r2, [r7, #8]
 8019108:	4413      	add	r3, r2
 801910a:	2200      	movs	r2, #0
 801910c:	701a      	strb	r2, [r3, #0]
    idx++;
 801910e:	7dfb      	ldrb	r3, [r7, #23]
 8019110:	3301      	adds	r3, #1
 8019112:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8019114:	693b      	ldr	r3, [r7, #16]
 8019116:	781b      	ldrb	r3, [r3, #0]
 8019118:	2b00      	cmp	r3, #0
 801911a:	d1e7      	bne.n	80190ec <USBD_GetString+0x52>
 801911c:	e000      	b.n	8019120 <USBD_GetString+0x86>
    return;
 801911e:	bf00      	nop
  }
}
 8019120:	3718      	adds	r7, #24
 8019122:	46bd      	mov	sp, r7
 8019124:	bd80      	pop	{r7, pc}

08019126 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8019126:	b480      	push	{r7}
 8019128:	b085      	sub	sp, #20
 801912a:	af00      	add	r7, sp, #0
 801912c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801912e:	2300      	movs	r3, #0
 8019130:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8019136:	e005      	b.n	8019144 <USBD_GetLen+0x1e>
  {
    len++;
 8019138:	7bfb      	ldrb	r3, [r7, #15]
 801913a:	3301      	adds	r3, #1
 801913c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801913e:	68bb      	ldr	r3, [r7, #8]
 8019140:	3301      	adds	r3, #1
 8019142:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8019144:	68bb      	ldr	r3, [r7, #8]
 8019146:	781b      	ldrb	r3, [r3, #0]
 8019148:	2b00      	cmp	r3, #0
 801914a:	d1f5      	bne.n	8019138 <USBD_GetLen+0x12>
  }

  return len;
 801914c:	7bfb      	ldrb	r3, [r7, #15]
}
 801914e:	4618      	mov	r0, r3
 8019150:	3714      	adds	r7, #20
 8019152:	46bd      	mov	sp, r7
 8019154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019158:	4770      	bx	lr

0801915a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801915a:	b580      	push	{r7, lr}
 801915c:	b084      	sub	sp, #16
 801915e:	af00      	add	r7, sp, #0
 8019160:	60f8      	str	r0, [r7, #12]
 8019162:	60b9      	str	r1, [r7, #8]
 8019164:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8019166:	68fb      	ldr	r3, [r7, #12]
 8019168:	2202      	movs	r2, #2
 801916a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801916e:	68fb      	ldr	r3, [r7, #12]
 8019170:	687a      	ldr	r2, [r7, #4]
 8019172:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	687a      	ldr	r2, [r7, #4]
 8019178:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	68ba      	ldr	r2, [r7, #8]
 801917e:	2100      	movs	r1, #0
 8019180:	68f8      	ldr	r0, [r7, #12]
 8019182:	f000 fd85 	bl	8019c90 <USBD_LL_Transmit>

  return USBD_OK;
 8019186:	2300      	movs	r3, #0
}
 8019188:	4618      	mov	r0, r3
 801918a:	3710      	adds	r7, #16
 801918c:	46bd      	mov	sp, r7
 801918e:	bd80      	pop	{r7, pc}

08019190 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8019190:	b580      	push	{r7, lr}
 8019192:	b084      	sub	sp, #16
 8019194:	af00      	add	r7, sp, #0
 8019196:	60f8      	str	r0, [r7, #12]
 8019198:	60b9      	str	r1, [r7, #8]
 801919a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	68ba      	ldr	r2, [r7, #8]
 80191a0:	2100      	movs	r1, #0
 80191a2:	68f8      	ldr	r0, [r7, #12]
 80191a4:	f000 fd74 	bl	8019c90 <USBD_LL_Transmit>

  return USBD_OK;
 80191a8:	2300      	movs	r3, #0
}
 80191aa:	4618      	mov	r0, r3
 80191ac:	3710      	adds	r7, #16
 80191ae:	46bd      	mov	sp, r7
 80191b0:	bd80      	pop	{r7, pc}

080191b2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80191b2:	b580      	push	{r7, lr}
 80191b4:	b084      	sub	sp, #16
 80191b6:	af00      	add	r7, sp, #0
 80191b8:	60f8      	str	r0, [r7, #12]
 80191ba:	60b9      	str	r1, [r7, #8]
 80191bc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	2203      	movs	r2, #3
 80191c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80191c6:	68fb      	ldr	r3, [r7, #12]
 80191c8:	687a      	ldr	r2, [r7, #4]
 80191ca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80191ce:	68fb      	ldr	r3, [r7, #12]
 80191d0:	687a      	ldr	r2, [r7, #4]
 80191d2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	68ba      	ldr	r2, [r7, #8]
 80191da:	2100      	movs	r1, #0
 80191dc:	68f8      	ldr	r0, [r7, #12]
 80191de:	f000 fd8f 	bl	8019d00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80191e2:	2300      	movs	r3, #0
}
 80191e4:	4618      	mov	r0, r3
 80191e6:	3710      	adds	r7, #16
 80191e8:	46bd      	mov	sp, r7
 80191ea:	bd80      	pop	{r7, pc}

080191ec <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80191ec:	b580      	push	{r7, lr}
 80191ee:	b084      	sub	sp, #16
 80191f0:	af00      	add	r7, sp, #0
 80191f2:	60f8      	str	r0, [r7, #12]
 80191f4:	60b9      	str	r1, [r7, #8]
 80191f6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	68ba      	ldr	r2, [r7, #8]
 80191fc:	2100      	movs	r1, #0
 80191fe:	68f8      	ldr	r0, [r7, #12]
 8019200:	f000 fd7e 	bl	8019d00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019204:	2300      	movs	r3, #0
}
 8019206:	4618      	mov	r0, r3
 8019208:	3710      	adds	r7, #16
 801920a:	46bd      	mov	sp, r7
 801920c:	bd80      	pop	{r7, pc}

0801920e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801920e:	b580      	push	{r7, lr}
 8019210:	b082      	sub	sp, #8
 8019212:	af00      	add	r7, sp, #0
 8019214:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	2204      	movs	r2, #4
 801921a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801921e:	2300      	movs	r3, #0
 8019220:	2200      	movs	r2, #0
 8019222:	2100      	movs	r1, #0
 8019224:	6878      	ldr	r0, [r7, #4]
 8019226:	f000 fd33 	bl	8019c90 <USBD_LL_Transmit>

  return USBD_OK;
 801922a:	2300      	movs	r3, #0
}
 801922c:	4618      	mov	r0, r3
 801922e:	3708      	adds	r7, #8
 8019230:	46bd      	mov	sp, r7
 8019232:	bd80      	pop	{r7, pc}

08019234 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8019234:	b580      	push	{r7, lr}
 8019236:	b082      	sub	sp, #8
 8019238:	af00      	add	r7, sp, #0
 801923a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	2205      	movs	r2, #5
 8019240:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8019244:	2300      	movs	r3, #0
 8019246:	2200      	movs	r2, #0
 8019248:	2100      	movs	r1, #0
 801924a:	6878      	ldr	r0, [r7, #4]
 801924c:	f000 fd58 	bl	8019d00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019250:	2300      	movs	r3, #0
}
 8019252:	4618      	mov	r0, r3
 8019254:	3708      	adds	r7, #8
 8019256:	46bd      	mov	sp, r7
 8019258:	bd80      	pop	{r7, pc}
	...

0801925c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801925c:	b580      	push	{r7, lr}
 801925e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8019260:	2200      	movs	r2, #0
 8019262:	4912      	ldr	r1, [pc, #72]	; (80192ac <MX_USB_DEVICE_Init+0x50>)
 8019264:	4812      	ldr	r0, [pc, #72]	; (80192b0 <MX_USB_DEVICE_Init+0x54>)
 8019266:	f7fe fe65 	bl	8017f34 <USBD_Init>
 801926a:	4603      	mov	r3, r0
 801926c:	2b00      	cmp	r3, #0
 801926e:	d001      	beq.n	8019274 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019270:	f7e9 fb36 	bl	80028e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8019274:	490f      	ldr	r1, [pc, #60]	; (80192b4 <MX_USB_DEVICE_Init+0x58>)
 8019276:	480e      	ldr	r0, [pc, #56]	; (80192b0 <MX_USB_DEVICE_Init+0x54>)
 8019278:	f7fe fe8c 	bl	8017f94 <USBD_RegisterClass>
 801927c:	4603      	mov	r3, r0
 801927e:	2b00      	cmp	r3, #0
 8019280:	d001      	beq.n	8019286 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8019282:	f7e9 fb2d 	bl	80028e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8019286:	490c      	ldr	r1, [pc, #48]	; (80192b8 <MX_USB_DEVICE_Init+0x5c>)
 8019288:	4809      	ldr	r0, [pc, #36]	; (80192b0 <MX_USB_DEVICE_Init+0x54>)
 801928a:	f7fe fddd 	bl	8017e48 <USBD_CDC_RegisterInterface>
 801928e:	4603      	mov	r3, r0
 8019290:	2b00      	cmp	r3, #0
 8019292:	d001      	beq.n	8019298 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019294:	f7e9 fb24 	bl	80028e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019298:	4805      	ldr	r0, [pc, #20]	; (80192b0 <MX_USB_DEVICE_Init+0x54>)
 801929a:	f7fe fea2 	bl	8017fe2 <USBD_Start>
 801929e:	4603      	mov	r3, r0
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d001      	beq.n	80192a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80192a4:	f7e9 fb1c 	bl	80028e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80192a8:	bf00      	nop
 80192aa:	bd80      	pop	{r7, pc}
 80192ac:	2000067c 	.word	0x2000067c
 80192b0:	2000124c 	.word	0x2000124c
 80192b4:	20000564 	.word	0x20000564
 80192b8:	20000668 	.word	0x20000668

080192bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80192bc:	b580      	push	{r7, lr}
 80192be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80192c0:	2200      	movs	r2, #0
 80192c2:	4905      	ldr	r1, [pc, #20]	; (80192d8 <CDC_Init_FS+0x1c>)
 80192c4:	4805      	ldr	r0, [pc, #20]	; (80192dc <CDC_Init_FS+0x20>)
 80192c6:	f7fe fdd4 	bl	8017e72 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80192ca:	4905      	ldr	r1, [pc, #20]	; (80192e0 <CDC_Init_FS+0x24>)
 80192cc:	4803      	ldr	r0, [pc, #12]	; (80192dc <CDC_Init_FS+0x20>)
 80192ce:	f7fe fdee 	bl	8017eae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80192d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80192d4:	4618      	mov	r0, r3
 80192d6:	bd80      	pop	{r7, pc}
 80192d8:	20001d1c 	.word	0x20001d1c
 80192dc:	2000124c 	.word	0x2000124c
 80192e0:	2000151c 	.word	0x2000151c

080192e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80192e4:	b480      	push	{r7}
 80192e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80192e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80192ea:	4618      	mov	r0, r3
 80192ec:	46bd      	mov	sp, r7
 80192ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192f2:	4770      	bx	lr

080192f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80192f4:	b480      	push	{r7}
 80192f6:	b083      	sub	sp, #12
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	4603      	mov	r3, r0
 80192fc:	6039      	str	r1, [r7, #0]
 80192fe:	71fb      	strb	r3, [r7, #7]
 8019300:	4613      	mov	r3, r2
 8019302:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019304:	79fb      	ldrb	r3, [r7, #7]
 8019306:	2b23      	cmp	r3, #35	; 0x23
 8019308:	d84a      	bhi.n	80193a0 <CDC_Control_FS+0xac>
 801930a:	a201      	add	r2, pc, #4	; (adr r2, 8019310 <CDC_Control_FS+0x1c>)
 801930c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019310:	080193a1 	.word	0x080193a1
 8019314:	080193a1 	.word	0x080193a1
 8019318:	080193a1 	.word	0x080193a1
 801931c:	080193a1 	.word	0x080193a1
 8019320:	080193a1 	.word	0x080193a1
 8019324:	080193a1 	.word	0x080193a1
 8019328:	080193a1 	.word	0x080193a1
 801932c:	080193a1 	.word	0x080193a1
 8019330:	080193a1 	.word	0x080193a1
 8019334:	080193a1 	.word	0x080193a1
 8019338:	080193a1 	.word	0x080193a1
 801933c:	080193a1 	.word	0x080193a1
 8019340:	080193a1 	.word	0x080193a1
 8019344:	080193a1 	.word	0x080193a1
 8019348:	080193a1 	.word	0x080193a1
 801934c:	080193a1 	.word	0x080193a1
 8019350:	080193a1 	.word	0x080193a1
 8019354:	080193a1 	.word	0x080193a1
 8019358:	080193a1 	.word	0x080193a1
 801935c:	080193a1 	.word	0x080193a1
 8019360:	080193a1 	.word	0x080193a1
 8019364:	080193a1 	.word	0x080193a1
 8019368:	080193a1 	.word	0x080193a1
 801936c:	080193a1 	.word	0x080193a1
 8019370:	080193a1 	.word	0x080193a1
 8019374:	080193a1 	.word	0x080193a1
 8019378:	080193a1 	.word	0x080193a1
 801937c:	080193a1 	.word	0x080193a1
 8019380:	080193a1 	.word	0x080193a1
 8019384:	080193a1 	.word	0x080193a1
 8019388:	080193a1 	.word	0x080193a1
 801938c:	080193a1 	.word	0x080193a1
 8019390:	080193a1 	.word	0x080193a1
 8019394:	080193a1 	.word	0x080193a1
 8019398:	080193a1 	.word	0x080193a1
 801939c:	080193a1 	.word	0x080193a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80193a0:	bf00      	nop
  }

  return (USBD_OK);
 80193a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80193a4:	4618      	mov	r0, r3
 80193a6:	370c      	adds	r7, #12
 80193a8:	46bd      	mov	sp, r7
 80193aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ae:	4770      	bx	lr

080193b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80193b0:	b580      	push	{r7, lr}
 80193b2:	b082      	sub	sp, #8
 80193b4:	af00      	add	r7, sp, #0
 80193b6:	6078      	str	r0, [r7, #4]
 80193b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80193ba:	6879      	ldr	r1, [r7, #4]
 80193bc:	4805      	ldr	r0, [pc, #20]	; (80193d4 <CDC_Receive_FS+0x24>)
 80193be:	f7fe fd76 	bl	8017eae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80193c2:	4804      	ldr	r0, [pc, #16]	; (80193d4 <CDC_Receive_FS+0x24>)
 80193c4:	f7fe fd8c 	bl	8017ee0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80193c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80193ca:	4618      	mov	r0, r3
 80193cc:	3708      	adds	r7, #8
 80193ce:	46bd      	mov	sp, r7
 80193d0:	bd80      	pop	{r7, pc}
 80193d2:	bf00      	nop
 80193d4:	2000124c 	.word	0x2000124c

080193d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80193d8:	b480      	push	{r7}
 80193da:	b087      	sub	sp, #28
 80193dc:	af00      	add	r7, sp, #0
 80193de:	60f8      	str	r0, [r7, #12]
 80193e0:	60b9      	str	r1, [r7, #8]
 80193e2:	4613      	mov	r3, r2
 80193e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80193e6:	2300      	movs	r3, #0
 80193e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80193ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80193ee:	4618      	mov	r0, r3
 80193f0:	371c      	adds	r7, #28
 80193f2:	46bd      	mov	sp, r7
 80193f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193f8:	4770      	bx	lr
	...

080193fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80193fc:	b480      	push	{r7}
 80193fe:	b083      	sub	sp, #12
 8019400:	af00      	add	r7, sp, #0
 8019402:	4603      	mov	r3, r0
 8019404:	6039      	str	r1, [r7, #0]
 8019406:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8019408:	683b      	ldr	r3, [r7, #0]
 801940a:	2212      	movs	r2, #18
 801940c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801940e:	4b03      	ldr	r3, [pc, #12]	; (801941c <USBD_FS_DeviceDescriptor+0x20>)
}
 8019410:	4618      	mov	r0, r3
 8019412:	370c      	adds	r7, #12
 8019414:	46bd      	mov	sp, r7
 8019416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801941a:	4770      	bx	lr
 801941c:	2000069c 	.word	0x2000069c

08019420 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019420:	b480      	push	{r7}
 8019422:	b083      	sub	sp, #12
 8019424:	af00      	add	r7, sp, #0
 8019426:	4603      	mov	r3, r0
 8019428:	6039      	str	r1, [r7, #0]
 801942a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801942c:	683b      	ldr	r3, [r7, #0]
 801942e:	2204      	movs	r2, #4
 8019430:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019432:	4b03      	ldr	r3, [pc, #12]	; (8019440 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8019434:	4618      	mov	r0, r3
 8019436:	370c      	adds	r7, #12
 8019438:	46bd      	mov	sp, r7
 801943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801943e:	4770      	bx	lr
 8019440:	200006bc 	.word	0x200006bc

08019444 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019444:	b580      	push	{r7, lr}
 8019446:	b082      	sub	sp, #8
 8019448:	af00      	add	r7, sp, #0
 801944a:	4603      	mov	r3, r0
 801944c:	6039      	str	r1, [r7, #0]
 801944e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019450:	79fb      	ldrb	r3, [r7, #7]
 8019452:	2b00      	cmp	r3, #0
 8019454:	d105      	bne.n	8019462 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019456:	683a      	ldr	r2, [r7, #0]
 8019458:	4907      	ldr	r1, [pc, #28]	; (8019478 <USBD_FS_ProductStrDescriptor+0x34>)
 801945a:	4808      	ldr	r0, [pc, #32]	; (801947c <USBD_FS_ProductStrDescriptor+0x38>)
 801945c:	f7ff fe1d 	bl	801909a <USBD_GetString>
 8019460:	e004      	b.n	801946c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019462:	683a      	ldr	r2, [r7, #0]
 8019464:	4904      	ldr	r1, [pc, #16]	; (8019478 <USBD_FS_ProductStrDescriptor+0x34>)
 8019466:	4805      	ldr	r0, [pc, #20]	; (801947c <USBD_FS_ProductStrDescriptor+0x38>)
 8019468:	f7ff fe17 	bl	801909a <USBD_GetString>
  }
  return USBD_StrDesc;
 801946c:	4b02      	ldr	r3, [pc, #8]	; (8019478 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801946e:	4618      	mov	r0, r3
 8019470:	3708      	adds	r7, #8
 8019472:	46bd      	mov	sp, r7
 8019474:	bd80      	pop	{r7, pc}
 8019476:	bf00      	nop
 8019478:	2000251c 	.word	0x2000251c
 801947c:	0801af88 	.word	0x0801af88

08019480 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019480:	b580      	push	{r7, lr}
 8019482:	b082      	sub	sp, #8
 8019484:	af00      	add	r7, sp, #0
 8019486:	4603      	mov	r3, r0
 8019488:	6039      	str	r1, [r7, #0]
 801948a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801948c:	683a      	ldr	r2, [r7, #0]
 801948e:	4904      	ldr	r1, [pc, #16]	; (80194a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8019490:	4804      	ldr	r0, [pc, #16]	; (80194a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8019492:	f7ff fe02 	bl	801909a <USBD_GetString>
  return USBD_StrDesc;
 8019496:	4b02      	ldr	r3, [pc, #8]	; (80194a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019498:	4618      	mov	r0, r3
 801949a:	3708      	adds	r7, #8
 801949c:	46bd      	mov	sp, r7
 801949e:	bd80      	pop	{r7, pc}
 80194a0:	2000251c 	.word	0x2000251c
 80194a4:	0801afa0 	.word	0x0801afa0

080194a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80194a8:	b580      	push	{r7, lr}
 80194aa:	b082      	sub	sp, #8
 80194ac:	af00      	add	r7, sp, #0
 80194ae:	4603      	mov	r3, r0
 80194b0:	6039      	str	r1, [r7, #0]
 80194b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80194b4:	683b      	ldr	r3, [r7, #0]
 80194b6:	221a      	movs	r2, #26
 80194b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80194ba:	f000 f855 	bl	8019568 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80194be:	4b02      	ldr	r3, [pc, #8]	; (80194c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80194c0:	4618      	mov	r0, r3
 80194c2:	3708      	adds	r7, #8
 80194c4:	46bd      	mov	sp, r7
 80194c6:	bd80      	pop	{r7, pc}
 80194c8:	200006c0 	.word	0x200006c0

080194cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80194cc:	b580      	push	{r7, lr}
 80194ce:	b082      	sub	sp, #8
 80194d0:	af00      	add	r7, sp, #0
 80194d2:	4603      	mov	r3, r0
 80194d4:	6039      	str	r1, [r7, #0]
 80194d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80194d8:	79fb      	ldrb	r3, [r7, #7]
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d105      	bne.n	80194ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80194de:	683a      	ldr	r2, [r7, #0]
 80194e0:	4907      	ldr	r1, [pc, #28]	; (8019500 <USBD_FS_ConfigStrDescriptor+0x34>)
 80194e2:	4808      	ldr	r0, [pc, #32]	; (8019504 <USBD_FS_ConfigStrDescriptor+0x38>)
 80194e4:	f7ff fdd9 	bl	801909a <USBD_GetString>
 80194e8:	e004      	b.n	80194f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80194ea:	683a      	ldr	r2, [r7, #0]
 80194ec:	4904      	ldr	r1, [pc, #16]	; (8019500 <USBD_FS_ConfigStrDescriptor+0x34>)
 80194ee:	4805      	ldr	r0, [pc, #20]	; (8019504 <USBD_FS_ConfigStrDescriptor+0x38>)
 80194f0:	f7ff fdd3 	bl	801909a <USBD_GetString>
  }
  return USBD_StrDesc;
 80194f4:	4b02      	ldr	r3, [pc, #8]	; (8019500 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80194f6:	4618      	mov	r0, r3
 80194f8:	3708      	adds	r7, #8
 80194fa:	46bd      	mov	sp, r7
 80194fc:	bd80      	pop	{r7, pc}
 80194fe:	bf00      	nop
 8019500:	2000251c 	.word	0x2000251c
 8019504:	0801afb4 	.word	0x0801afb4

08019508 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019508:	b580      	push	{r7, lr}
 801950a:	b082      	sub	sp, #8
 801950c:	af00      	add	r7, sp, #0
 801950e:	4603      	mov	r3, r0
 8019510:	6039      	str	r1, [r7, #0]
 8019512:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019514:	79fb      	ldrb	r3, [r7, #7]
 8019516:	2b00      	cmp	r3, #0
 8019518:	d105      	bne.n	8019526 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801951a:	683a      	ldr	r2, [r7, #0]
 801951c:	4907      	ldr	r1, [pc, #28]	; (801953c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801951e:	4808      	ldr	r0, [pc, #32]	; (8019540 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019520:	f7ff fdbb 	bl	801909a <USBD_GetString>
 8019524:	e004      	b.n	8019530 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019526:	683a      	ldr	r2, [r7, #0]
 8019528:	4904      	ldr	r1, [pc, #16]	; (801953c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801952a:	4805      	ldr	r0, [pc, #20]	; (8019540 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801952c:	f7ff fdb5 	bl	801909a <USBD_GetString>
  }
  return USBD_StrDesc;
 8019530:	4b02      	ldr	r3, [pc, #8]	; (801953c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8019532:	4618      	mov	r0, r3
 8019534:	3708      	adds	r7, #8
 8019536:	46bd      	mov	sp, r7
 8019538:	bd80      	pop	{r7, pc}
 801953a:	bf00      	nop
 801953c:	2000251c 	.word	0x2000251c
 8019540:	0801afc0 	.word	0x0801afc0

08019544 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019544:	b480      	push	{r7}
 8019546:	b083      	sub	sp, #12
 8019548:	af00      	add	r7, sp, #0
 801954a:	4603      	mov	r3, r0
 801954c:	6039      	str	r1, [r7, #0]
 801954e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8019550:	683b      	ldr	r3, [r7, #0]
 8019552:	220c      	movs	r2, #12
 8019554:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8019556:	4b03      	ldr	r3, [pc, #12]	; (8019564 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8019558:	4618      	mov	r0, r3
 801955a:	370c      	adds	r7, #12
 801955c:	46bd      	mov	sp, r7
 801955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019562:	4770      	bx	lr
 8019564:	200006b0 	.word	0x200006b0

08019568 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019568:	b580      	push	{r7, lr}
 801956a:	b084      	sub	sp, #16
 801956c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801956e:	4b0f      	ldr	r3, [pc, #60]	; (80195ac <Get_SerialNum+0x44>)
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019574:	4b0e      	ldr	r3, [pc, #56]	; (80195b0 <Get_SerialNum+0x48>)
 8019576:	681b      	ldr	r3, [r3, #0]
 8019578:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801957a:	4b0e      	ldr	r3, [pc, #56]	; (80195b4 <Get_SerialNum+0x4c>)
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019580:	68fa      	ldr	r2, [r7, #12]
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	4413      	add	r3, r2
 8019586:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019588:	68fb      	ldr	r3, [r7, #12]
 801958a:	2b00      	cmp	r3, #0
 801958c:	d009      	beq.n	80195a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801958e:	2208      	movs	r2, #8
 8019590:	4909      	ldr	r1, [pc, #36]	; (80195b8 <Get_SerialNum+0x50>)
 8019592:	68f8      	ldr	r0, [r7, #12]
 8019594:	f000 f814 	bl	80195c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019598:	2204      	movs	r2, #4
 801959a:	4908      	ldr	r1, [pc, #32]	; (80195bc <Get_SerialNum+0x54>)
 801959c:	68b8      	ldr	r0, [r7, #8]
 801959e:	f000 f80f 	bl	80195c0 <IntToUnicode>
  }
}
 80195a2:	bf00      	nop
 80195a4:	3710      	adds	r7, #16
 80195a6:	46bd      	mov	sp, r7
 80195a8:	bd80      	pop	{r7, pc}
 80195aa:	bf00      	nop
 80195ac:	1fff7590 	.word	0x1fff7590
 80195b0:	1fff7594 	.word	0x1fff7594
 80195b4:	1fff7598 	.word	0x1fff7598
 80195b8:	200006c2 	.word	0x200006c2
 80195bc:	200006d2 	.word	0x200006d2

080195c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80195c0:	b480      	push	{r7}
 80195c2:	b087      	sub	sp, #28
 80195c4:	af00      	add	r7, sp, #0
 80195c6:	60f8      	str	r0, [r7, #12]
 80195c8:	60b9      	str	r1, [r7, #8]
 80195ca:	4613      	mov	r3, r2
 80195cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80195ce:	2300      	movs	r3, #0
 80195d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80195d2:	2300      	movs	r3, #0
 80195d4:	75fb      	strb	r3, [r7, #23]
 80195d6:	e027      	b.n	8019628 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80195d8:	68fb      	ldr	r3, [r7, #12]
 80195da:	0f1b      	lsrs	r3, r3, #28
 80195dc:	2b09      	cmp	r3, #9
 80195de:	d80b      	bhi.n	80195f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80195e0:	68fb      	ldr	r3, [r7, #12]
 80195e2:	0f1b      	lsrs	r3, r3, #28
 80195e4:	b2da      	uxtb	r2, r3
 80195e6:	7dfb      	ldrb	r3, [r7, #23]
 80195e8:	005b      	lsls	r3, r3, #1
 80195ea:	4619      	mov	r1, r3
 80195ec:	68bb      	ldr	r3, [r7, #8]
 80195ee:	440b      	add	r3, r1
 80195f0:	3230      	adds	r2, #48	; 0x30
 80195f2:	b2d2      	uxtb	r2, r2
 80195f4:	701a      	strb	r2, [r3, #0]
 80195f6:	e00a      	b.n	801960e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80195f8:	68fb      	ldr	r3, [r7, #12]
 80195fa:	0f1b      	lsrs	r3, r3, #28
 80195fc:	b2da      	uxtb	r2, r3
 80195fe:	7dfb      	ldrb	r3, [r7, #23]
 8019600:	005b      	lsls	r3, r3, #1
 8019602:	4619      	mov	r1, r3
 8019604:	68bb      	ldr	r3, [r7, #8]
 8019606:	440b      	add	r3, r1
 8019608:	3237      	adds	r2, #55	; 0x37
 801960a:	b2d2      	uxtb	r2, r2
 801960c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801960e:	68fb      	ldr	r3, [r7, #12]
 8019610:	011b      	lsls	r3, r3, #4
 8019612:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019614:	7dfb      	ldrb	r3, [r7, #23]
 8019616:	005b      	lsls	r3, r3, #1
 8019618:	3301      	adds	r3, #1
 801961a:	68ba      	ldr	r2, [r7, #8]
 801961c:	4413      	add	r3, r2
 801961e:	2200      	movs	r2, #0
 8019620:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019622:	7dfb      	ldrb	r3, [r7, #23]
 8019624:	3301      	adds	r3, #1
 8019626:	75fb      	strb	r3, [r7, #23]
 8019628:	7dfa      	ldrb	r2, [r7, #23]
 801962a:	79fb      	ldrb	r3, [r7, #7]
 801962c:	429a      	cmp	r2, r3
 801962e:	d3d3      	bcc.n	80195d8 <IntToUnicode+0x18>
  }
}
 8019630:	bf00      	nop
 8019632:	bf00      	nop
 8019634:	371c      	adds	r7, #28
 8019636:	46bd      	mov	sp, r7
 8019638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801963c:	4770      	bx	lr
	...

08019640 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019640:	b580      	push	{r7, lr}
 8019642:	b08a      	sub	sp, #40	; 0x28
 8019644:	af00      	add	r7, sp, #0
 8019646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019648:	f107 0314 	add.w	r3, r7, #20
 801964c:	2200      	movs	r2, #0
 801964e:	601a      	str	r2, [r3, #0]
 8019650:	605a      	str	r2, [r3, #4]
 8019652:	609a      	str	r2, [r3, #8]
 8019654:	60da      	str	r2, [r3, #12]
 8019656:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019660:	d14e      	bne.n	8019700 <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019662:	4b29      	ldr	r3, [pc, #164]	; (8019708 <HAL_PCD_MspInit+0xc8>)
 8019664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019666:	4a28      	ldr	r2, [pc, #160]	; (8019708 <HAL_PCD_MspInit+0xc8>)
 8019668:	f043 0301 	orr.w	r3, r3, #1
 801966c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801966e:	4b26      	ldr	r3, [pc, #152]	; (8019708 <HAL_PCD_MspInit+0xc8>)
 8019670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019672:	f003 0301 	and.w	r3, r3, #1
 8019676:	613b      	str	r3, [r7, #16]
 8019678:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 801967a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801967e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019680:	2302      	movs	r3, #2
 8019682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019684:	2300      	movs	r3, #0
 8019686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019688:	2303      	movs	r3, #3
 801968a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801968c:	230a      	movs	r3, #10
 801968e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019690:	f107 0314 	add.w	r3, r7, #20
 8019694:	4619      	mov	r1, r3
 8019696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801969a:	f7f4 f801 	bl	800d6a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801969e:	4b1a      	ldr	r3, [pc, #104]	; (8019708 <HAL_PCD_MspInit+0xc8>)
 80196a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80196a2:	4a19      	ldr	r2, [pc, #100]	; (8019708 <HAL_PCD_MspInit+0xc8>)
 80196a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80196a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80196aa:	4b17      	ldr	r3, [pc, #92]	; (8019708 <HAL_PCD_MspInit+0xc8>)
 80196ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80196ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80196b2:	60fb      	str	r3, [r7, #12]
 80196b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80196b6:	4b14      	ldr	r3, [pc, #80]	; (8019708 <HAL_PCD_MspInit+0xc8>)
 80196b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80196ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80196be:	2b00      	cmp	r3, #0
 80196c0:	d114      	bne.n	80196ec <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80196c2:	4b11      	ldr	r3, [pc, #68]	; (8019708 <HAL_PCD_MspInit+0xc8>)
 80196c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80196c6:	4a10      	ldr	r2, [pc, #64]	; (8019708 <HAL_PCD_MspInit+0xc8>)
 80196c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80196cc:	6593      	str	r3, [r2, #88]	; 0x58
 80196ce:	4b0e      	ldr	r3, [pc, #56]	; (8019708 <HAL_PCD_MspInit+0xc8>)
 80196d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80196d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80196d6:	60bb      	str	r3, [r7, #8]
 80196d8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80196da:	f7f6 feb9 	bl	8010450 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80196de:	4b0a      	ldr	r3, [pc, #40]	; (8019708 <HAL_PCD_MspInit+0xc8>)
 80196e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80196e2:	4a09      	ldr	r2, [pc, #36]	; (8019708 <HAL_PCD_MspInit+0xc8>)
 80196e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80196e8:	6593      	str	r3, [r2, #88]	; 0x58
 80196ea:	e001      	b.n	80196f0 <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80196ec:	f7f6 feb0 	bl	8010450 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80196f0:	2200      	movs	r2, #0
 80196f2:	2100      	movs	r1, #0
 80196f4:	2043      	movs	r0, #67	; 0x43
 80196f6:	f7f3 fdfc 	bl	800d2f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80196fa:	2043      	movs	r0, #67	; 0x43
 80196fc:	f7f3 fe15 	bl	800d32a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019700:	bf00      	nop
 8019702:	3728      	adds	r7, #40	; 0x28
 8019704:	46bd      	mov	sp, r7
 8019706:	bd80      	pop	{r7, pc}
 8019708:	40021000 	.word	0x40021000

0801970c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801970c:	b580      	push	{r7, lr}
 801970e:	b082      	sub	sp, #8
 8019710:	af00      	add	r7, sp, #0
 8019712:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8019720:	4619      	mov	r1, r3
 8019722:	4610      	mov	r0, r2
 8019724:	f7fe fca8 	bl	8018078 <USBD_LL_SetupStage>
}
 8019728:	bf00      	nop
 801972a:	3708      	adds	r7, #8
 801972c:	46bd      	mov	sp, r7
 801972e:	bd80      	pop	{r7, pc}

08019730 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019730:	b580      	push	{r7, lr}
 8019732:	b082      	sub	sp, #8
 8019734:	af00      	add	r7, sp, #0
 8019736:	6078      	str	r0, [r7, #4]
 8019738:	460b      	mov	r3, r1
 801973a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8019742:	78fa      	ldrb	r2, [r7, #3]
 8019744:	6879      	ldr	r1, [r7, #4]
 8019746:	4613      	mov	r3, r2
 8019748:	00db      	lsls	r3, r3, #3
 801974a:	4413      	add	r3, r2
 801974c:	009b      	lsls	r3, r3, #2
 801974e:	440b      	add	r3, r1
 8019750:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8019754:	681a      	ldr	r2, [r3, #0]
 8019756:	78fb      	ldrb	r3, [r7, #3]
 8019758:	4619      	mov	r1, r3
 801975a:	f7fe fce2 	bl	8018122 <USBD_LL_DataOutStage>
}
 801975e:	bf00      	nop
 8019760:	3708      	adds	r7, #8
 8019762:	46bd      	mov	sp, r7
 8019764:	bd80      	pop	{r7, pc}

08019766 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019766:	b580      	push	{r7, lr}
 8019768:	b082      	sub	sp, #8
 801976a:	af00      	add	r7, sp, #0
 801976c:	6078      	str	r0, [r7, #4]
 801976e:	460b      	mov	r3, r1
 8019770:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8019778:	78fa      	ldrb	r2, [r7, #3]
 801977a:	6879      	ldr	r1, [r7, #4]
 801977c:	4613      	mov	r3, r2
 801977e:	00db      	lsls	r3, r3, #3
 8019780:	4413      	add	r3, r2
 8019782:	009b      	lsls	r3, r3, #2
 8019784:	440b      	add	r3, r1
 8019786:	334c      	adds	r3, #76	; 0x4c
 8019788:	681a      	ldr	r2, [r3, #0]
 801978a:	78fb      	ldrb	r3, [r7, #3]
 801978c:	4619      	mov	r1, r3
 801978e:	f7fe fd2b 	bl	80181e8 <USBD_LL_DataInStage>
}
 8019792:	bf00      	nop
 8019794:	3708      	adds	r7, #8
 8019796:	46bd      	mov	sp, r7
 8019798:	bd80      	pop	{r7, pc}

0801979a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801979a:	b580      	push	{r7, lr}
 801979c:	b082      	sub	sp, #8
 801979e:	af00      	add	r7, sp, #0
 80197a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80197a8:	4618      	mov	r0, r3
 80197aa:	f7fe fe3f 	bl	801842c <USBD_LL_SOF>
}
 80197ae:	bf00      	nop
 80197b0:	3708      	adds	r7, #8
 80197b2:	46bd      	mov	sp, r7
 80197b4:	bd80      	pop	{r7, pc}

080197b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197b6:	b580      	push	{r7, lr}
 80197b8:	b084      	sub	sp, #16
 80197ba:	af00      	add	r7, sp, #0
 80197bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80197be:	2301      	movs	r3, #1
 80197c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	68db      	ldr	r3, [r3, #12]
 80197c6:	2b02      	cmp	r3, #2
 80197c8:	d001      	beq.n	80197ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80197ca:	f7e9 f889 	bl	80028e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80197d4:	7bfa      	ldrb	r2, [r7, #15]
 80197d6:	4611      	mov	r1, r2
 80197d8:	4618      	mov	r0, r3
 80197da:	f7fe fde9 	bl	80183b0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80197e4:	4618      	mov	r0, r3
 80197e6:	f7fe fd95 	bl	8018314 <USBD_LL_Reset>
}
 80197ea:	bf00      	nop
 80197ec:	3710      	adds	r7, #16
 80197ee:	46bd      	mov	sp, r7
 80197f0:	bd80      	pop	{r7, pc}
	...

080197f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197f4:	b580      	push	{r7, lr}
 80197f6:	b082      	sub	sp, #8
 80197f8:	af00      	add	r7, sp, #0
 80197fa:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	687a      	ldr	r2, [r7, #4]
 8019808:	6812      	ldr	r2, [r2, #0]
 801980a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801980e:	f043 0301 	orr.w	r3, r3, #1
 8019812:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801981a:	4618      	mov	r0, r3
 801981c:	f7fe fdd8 	bl	80183d0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	6a1b      	ldr	r3, [r3, #32]
 8019824:	2b00      	cmp	r3, #0
 8019826:	d005      	beq.n	8019834 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019828:	4b04      	ldr	r3, [pc, #16]	; (801983c <HAL_PCD_SuspendCallback+0x48>)
 801982a:	691b      	ldr	r3, [r3, #16]
 801982c:	4a03      	ldr	r2, [pc, #12]	; (801983c <HAL_PCD_SuspendCallback+0x48>)
 801982e:	f043 0306 	orr.w	r3, r3, #6
 8019832:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019834:	bf00      	nop
 8019836:	3708      	adds	r7, #8
 8019838:	46bd      	mov	sp, r7
 801983a:	bd80      	pop	{r7, pc}
 801983c:	e000ed00 	.word	0xe000ed00

08019840 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019840:	b580      	push	{r7, lr}
 8019842:	b082      	sub	sp, #8
 8019844:	af00      	add	r7, sp, #0
 8019846:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	681b      	ldr	r3, [r3, #0]
 801984c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019850:	681b      	ldr	r3, [r3, #0]
 8019852:	687a      	ldr	r2, [r7, #4]
 8019854:	6812      	ldr	r2, [r2, #0]
 8019856:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801985a:	f023 0301 	bic.w	r3, r3, #1
 801985e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	6a1b      	ldr	r3, [r3, #32]
 8019864:	2b00      	cmp	r3, #0
 8019866:	d007      	beq.n	8019878 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019868:	4b08      	ldr	r3, [pc, #32]	; (801988c <HAL_PCD_ResumeCallback+0x4c>)
 801986a:	691b      	ldr	r3, [r3, #16]
 801986c:	4a07      	ldr	r2, [pc, #28]	; (801988c <HAL_PCD_ResumeCallback+0x4c>)
 801986e:	f023 0306 	bic.w	r3, r3, #6
 8019872:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8019874:	f000 faf6 	bl	8019e64 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801987e:	4618      	mov	r0, r3
 8019880:	f7fe fdbc 	bl	80183fc <USBD_LL_Resume>
}
 8019884:	bf00      	nop
 8019886:	3708      	adds	r7, #8
 8019888:	46bd      	mov	sp, r7
 801988a:	bd80      	pop	{r7, pc}
 801988c:	e000ed00 	.word	0xe000ed00

08019890 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019890:	b580      	push	{r7, lr}
 8019892:	b082      	sub	sp, #8
 8019894:	af00      	add	r7, sp, #0
 8019896:	6078      	str	r0, [r7, #4]
 8019898:	460b      	mov	r3, r1
 801989a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80198a2:	78fa      	ldrb	r2, [r7, #3]
 80198a4:	4611      	mov	r1, r2
 80198a6:	4618      	mov	r0, r3
 80198a8:	f7fe fe08 	bl	80184bc <USBD_LL_IsoOUTIncomplete>
}
 80198ac:	bf00      	nop
 80198ae:	3708      	adds	r7, #8
 80198b0:	46bd      	mov	sp, r7
 80198b2:	bd80      	pop	{r7, pc}

080198b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80198b4:	b580      	push	{r7, lr}
 80198b6:	b082      	sub	sp, #8
 80198b8:	af00      	add	r7, sp, #0
 80198ba:	6078      	str	r0, [r7, #4]
 80198bc:	460b      	mov	r3, r1
 80198be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80198c6:	78fa      	ldrb	r2, [r7, #3]
 80198c8:	4611      	mov	r1, r2
 80198ca:	4618      	mov	r0, r3
 80198cc:	f7fe fdd0 	bl	8018470 <USBD_LL_IsoINIncomplete>
}
 80198d0:	bf00      	nop
 80198d2:	3708      	adds	r7, #8
 80198d4:	46bd      	mov	sp, r7
 80198d6:	bd80      	pop	{r7, pc}

080198d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80198d8:	b580      	push	{r7, lr}
 80198da:	b082      	sub	sp, #8
 80198dc:	af00      	add	r7, sp, #0
 80198de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80198e6:	4618      	mov	r0, r3
 80198e8:	f7fe fe0e 	bl	8018508 <USBD_LL_DevConnected>
}
 80198ec:	bf00      	nop
 80198ee:	3708      	adds	r7, #8
 80198f0:	46bd      	mov	sp, r7
 80198f2:	bd80      	pop	{r7, pc}

080198f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80198f4:	b580      	push	{r7, lr}
 80198f6:	b082      	sub	sp, #8
 80198f8:	af00      	add	r7, sp, #0
 80198fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019902:	4618      	mov	r0, r3
 8019904:	f7fe fe0b 	bl	801851e <USBD_LL_DevDisconnected>
}
 8019908:	bf00      	nop
 801990a:	3708      	adds	r7, #8
 801990c:	46bd      	mov	sp, r7
 801990e:	bd80      	pop	{r7, pc}

08019910 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019910:	b580      	push	{r7, lr}
 8019912:	b082      	sub	sp, #8
 8019914:	af00      	add	r7, sp, #0
 8019916:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	781b      	ldrb	r3, [r3, #0]
 801991c:	2b00      	cmp	r3, #0
 801991e:	d13c      	bne.n	801999a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019920:	4a20      	ldr	r2, [pc, #128]	; (80199a4 <USBD_LL_Init+0x94>)
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	4a1e      	ldr	r2, [pc, #120]	; (80199a4 <USBD_LL_Init+0x94>)
 801992c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019930:	4b1c      	ldr	r3, [pc, #112]	; (80199a4 <USBD_LL_Init+0x94>)
 8019932:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8019936:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8019938:	4b1a      	ldr	r3, [pc, #104]	; (80199a4 <USBD_LL_Init+0x94>)
 801993a:	2206      	movs	r2, #6
 801993c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801993e:	4b19      	ldr	r3, [pc, #100]	; (80199a4 <USBD_LL_Init+0x94>)
 8019940:	2202      	movs	r2, #2
 8019942:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019944:	4b17      	ldr	r3, [pc, #92]	; (80199a4 <USBD_LL_Init+0x94>)
 8019946:	2202      	movs	r2, #2
 8019948:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801994a:	4b16      	ldr	r3, [pc, #88]	; (80199a4 <USBD_LL_Init+0x94>)
 801994c:	2200      	movs	r2, #0
 801994e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8019950:	4b14      	ldr	r3, [pc, #80]	; (80199a4 <USBD_LL_Init+0x94>)
 8019952:	2200      	movs	r2, #0
 8019954:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019956:	4b13      	ldr	r3, [pc, #76]	; (80199a4 <USBD_LL_Init+0x94>)
 8019958:	2200      	movs	r2, #0
 801995a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801995c:	4b11      	ldr	r3, [pc, #68]	; (80199a4 <USBD_LL_Init+0x94>)
 801995e:	2200      	movs	r2, #0
 8019960:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019962:	4b10      	ldr	r3, [pc, #64]	; (80199a4 <USBD_LL_Init+0x94>)
 8019964:	2200      	movs	r2, #0
 8019966:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8019968:	4b0e      	ldr	r3, [pc, #56]	; (80199a4 <USBD_LL_Init+0x94>)
 801996a:	2200      	movs	r2, #0
 801996c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801996e:	480d      	ldr	r0, [pc, #52]	; (80199a4 <USBD_LL_Init+0x94>)
 8019970:	f7f5 fb07 	bl	800ef82 <HAL_PCD_Init>
 8019974:	4603      	mov	r3, r0
 8019976:	2b00      	cmp	r3, #0
 8019978:	d001      	beq.n	801997e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801997a:	f7e8 ffb1 	bl	80028e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801997e:	2180      	movs	r1, #128	; 0x80
 8019980:	4808      	ldr	r0, [pc, #32]	; (80199a4 <USBD_LL_Init+0x94>)
 8019982:	f7f6 fc88 	bl	8010296 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8019986:	2240      	movs	r2, #64	; 0x40
 8019988:	2100      	movs	r1, #0
 801998a:	4806      	ldr	r0, [pc, #24]	; (80199a4 <USBD_LL_Init+0x94>)
 801998c:	f7f6 fc3c 	bl	8010208 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8019990:	2280      	movs	r2, #128	; 0x80
 8019992:	2101      	movs	r1, #1
 8019994:	4803      	ldr	r0, [pc, #12]	; (80199a4 <USBD_LL_Init+0x94>)
 8019996:	f7f6 fc37 	bl	8010208 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801999a:	2300      	movs	r3, #0
}
 801999c:	4618      	mov	r0, r3
 801999e:	3708      	adds	r7, #8
 80199a0:	46bd      	mov	sp, r7
 80199a2:	bd80      	pop	{r7, pc}
 80199a4:	2000271c 	.word	0x2000271c

080199a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80199a8:	b580      	push	{r7, lr}
 80199aa:	b084      	sub	sp, #16
 80199ac:	af00      	add	r7, sp, #0
 80199ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80199b0:	2300      	movs	r3, #0
 80199b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80199b4:	2300      	movs	r3, #0
 80199b6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80199be:	4618      	mov	r0, r3
 80199c0:	f7f5 fc03 	bl	800f1ca <HAL_PCD_Start>
 80199c4:	4603      	mov	r3, r0
 80199c6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80199c8:	7bbb      	ldrb	r3, [r7, #14]
 80199ca:	2b03      	cmp	r3, #3
 80199cc:	d816      	bhi.n	80199fc <USBD_LL_Start+0x54>
 80199ce:	a201      	add	r2, pc, #4	; (adr r2, 80199d4 <USBD_LL_Start+0x2c>)
 80199d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80199d4:	080199e5 	.word	0x080199e5
 80199d8:	080199eb 	.word	0x080199eb
 80199dc:	080199f1 	.word	0x080199f1
 80199e0:	080199f7 	.word	0x080199f7
    case HAL_OK :
      usb_status = USBD_OK;
 80199e4:	2300      	movs	r3, #0
 80199e6:	73fb      	strb	r3, [r7, #15]
    break;
 80199e8:	e00b      	b.n	8019a02 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80199ea:	2303      	movs	r3, #3
 80199ec:	73fb      	strb	r3, [r7, #15]
    break;
 80199ee:	e008      	b.n	8019a02 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80199f0:	2301      	movs	r3, #1
 80199f2:	73fb      	strb	r3, [r7, #15]
    break;
 80199f4:	e005      	b.n	8019a02 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80199f6:	2303      	movs	r3, #3
 80199f8:	73fb      	strb	r3, [r7, #15]
    break;
 80199fa:	e002      	b.n	8019a02 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80199fc:	2303      	movs	r3, #3
 80199fe:	73fb      	strb	r3, [r7, #15]
    break;
 8019a00:	bf00      	nop
  }
  return usb_status;
 8019a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8019a04:	4618      	mov	r0, r3
 8019a06:	3710      	adds	r7, #16
 8019a08:	46bd      	mov	sp, r7
 8019a0a:	bd80      	pop	{r7, pc}

08019a0c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019a0c:	b580      	push	{r7, lr}
 8019a0e:	b084      	sub	sp, #16
 8019a10:	af00      	add	r7, sp, #0
 8019a12:	6078      	str	r0, [r7, #4]
 8019a14:	4608      	mov	r0, r1
 8019a16:	4611      	mov	r1, r2
 8019a18:	461a      	mov	r2, r3
 8019a1a:	4603      	mov	r3, r0
 8019a1c:	70fb      	strb	r3, [r7, #3]
 8019a1e:	460b      	mov	r3, r1
 8019a20:	70bb      	strb	r3, [r7, #2]
 8019a22:	4613      	mov	r3, r2
 8019a24:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a26:	2300      	movs	r3, #0
 8019a28:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a2a:	2300      	movs	r3, #0
 8019a2c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019a34:	78bb      	ldrb	r3, [r7, #2]
 8019a36:	883a      	ldrh	r2, [r7, #0]
 8019a38:	78f9      	ldrb	r1, [r7, #3]
 8019a3a:	f7f6 f8ad 	bl	800fb98 <HAL_PCD_EP_Open>
 8019a3e:	4603      	mov	r3, r0
 8019a40:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019a42:	7bbb      	ldrb	r3, [r7, #14]
 8019a44:	2b03      	cmp	r3, #3
 8019a46:	d817      	bhi.n	8019a78 <USBD_LL_OpenEP+0x6c>
 8019a48:	a201      	add	r2, pc, #4	; (adr r2, 8019a50 <USBD_LL_OpenEP+0x44>)
 8019a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a4e:	bf00      	nop
 8019a50:	08019a61 	.word	0x08019a61
 8019a54:	08019a67 	.word	0x08019a67
 8019a58:	08019a6d 	.word	0x08019a6d
 8019a5c:	08019a73 	.word	0x08019a73
    case HAL_OK :
      usb_status = USBD_OK;
 8019a60:	2300      	movs	r3, #0
 8019a62:	73fb      	strb	r3, [r7, #15]
    break;
 8019a64:	e00b      	b.n	8019a7e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019a66:	2303      	movs	r3, #3
 8019a68:	73fb      	strb	r3, [r7, #15]
    break;
 8019a6a:	e008      	b.n	8019a7e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019a6c:	2301      	movs	r3, #1
 8019a6e:	73fb      	strb	r3, [r7, #15]
    break;
 8019a70:	e005      	b.n	8019a7e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019a72:	2303      	movs	r3, #3
 8019a74:	73fb      	strb	r3, [r7, #15]
    break;
 8019a76:	e002      	b.n	8019a7e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8019a78:	2303      	movs	r3, #3
 8019a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8019a7c:	bf00      	nop
  }
  return usb_status;
 8019a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019a80:	4618      	mov	r0, r3
 8019a82:	3710      	adds	r7, #16
 8019a84:	46bd      	mov	sp, r7
 8019a86:	bd80      	pop	{r7, pc}

08019a88 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019a88:	b580      	push	{r7, lr}
 8019a8a:	b084      	sub	sp, #16
 8019a8c:	af00      	add	r7, sp, #0
 8019a8e:	6078      	str	r0, [r7, #4]
 8019a90:	460b      	mov	r3, r1
 8019a92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a94:	2300      	movs	r3, #0
 8019a96:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a98:	2300      	movs	r3, #0
 8019a9a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019aa2:	78fa      	ldrb	r2, [r7, #3]
 8019aa4:	4611      	mov	r1, r2
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	f7f6 f8de 	bl	800fc68 <HAL_PCD_EP_Close>
 8019aac:	4603      	mov	r3, r0
 8019aae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019ab0:	7bbb      	ldrb	r3, [r7, #14]
 8019ab2:	2b03      	cmp	r3, #3
 8019ab4:	d816      	bhi.n	8019ae4 <USBD_LL_CloseEP+0x5c>
 8019ab6:	a201      	add	r2, pc, #4	; (adr r2, 8019abc <USBD_LL_CloseEP+0x34>)
 8019ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019abc:	08019acd 	.word	0x08019acd
 8019ac0:	08019ad3 	.word	0x08019ad3
 8019ac4:	08019ad9 	.word	0x08019ad9
 8019ac8:	08019adf 	.word	0x08019adf
    case HAL_OK :
      usb_status = USBD_OK;
 8019acc:	2300      	movs	r3, #0
 8019ace:	73fb      	strb	r3, [r7, #15]
    break;
 8019ad0:	e00b      	b.n	8019aea <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019ad2:	2303      	movs	r3, #3
 8019ad4:	73fb      	strb	r3, [r7, #15]
    break;
 8019ad6:	e008      	b.n	8019aea <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019ad8:	2301      	movs	r3, #1
 8019ada:	73fb      	strb	r3, [r7, #15]
    break;
 8019adc:	e005      	b.n	8019aea <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019ade:	2303      	movs	r3, #3
 8019ae0:	73fb      	strb	r3, [r7, #15]
    break;
 8019ae2:	e002      	b.n	8019aea <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019ae4:	2303      	movs	r3, #3
 8019ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8019ae8:	bf00      	nop
  }
  return usb_status;
 8019aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8019aec:	4618      	mov	r0, r3
 8019aee:	3710      	adds	r7, #16
 8019af0:	46bd      	mov	sp, r7
 8019af2:	bd80      	pop	{r7, pc}

08019af4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019af4:	b580      	push	{r7, lr}
 8019af6:	b084      	sub	sp, #16
 8019af8:	af00      	add	r7, sp, #0
 8019afa:	6078      	str	r0, [r7, #4]
 8019afc:	460b      	mov	r3, r1
 8019afe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b00:	2300      	movs	r3, #0
 8019b02:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b04:	2300      	movs	r3, #0
 8019b06:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019b0e:	78fa      	ldrb	r2, [r7, #3]
 8019b10:	4611      	mov	r1, r2
 8019b12:	4618      	mov	r0, r3
 8019b14:	f7f6 f985 	bl	800fe22 <HAL_PCD_EP_SetStall>
 8019b18:	4603      	mov	r3, r0
 8019b1a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019b1c:	7bbb      	ldrb	r3, [r7, #14]
 8019b1e:	2b03      	cmp	r3, #3
 8019b20:	d816      	bhi.n	8019b50 <USBD_LL_StallEP+0x5c>
 8019b22:	a201      	add	r2, pc, #4	; (adr r2, 8019b28 <USBD_LL_StallEP+0x34>)
 8019b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b28:	08019b39 	.word	0x08019b39
 8019b2c:	08019b3f 	.word	0x08019b3f
 8019b30:	08019b45 	.word	0x08019b45
 8019b34:	08019b4b 	.word	0x08019b4b
    case HAL_OK :
      usb_status = USBD_OK;
 8019b38:	2300      	movs	r3, #0
 8019b3a:	73fb      	strb	r3, [r7, #15]
    break;
 8019b3c:	e00b      	b.n	8019b56 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019b3e:	2303      	movs	r3, #3
 8019b40:	73fb      	strb	r3, [r7, #15]
    break;
 8019b42:	e008      	b.n	8019b56 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019b44:	2301      	movs	r3, #1
 8019b46:	73fb      	strb	r3, [r7, #15]
    break;
 8019b48:	e005      	b.n	8019b56 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019b4a:	2303      	movs	r3, #3
 8019b4c:	73fb      	strb	r3, [r7, #15]
    break;
 8019b4e:	e002      	b.n	8019b56 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019b50:	2303      	movs	r3, #3
 8019b52:	73fb      	strb	r3, [r7, #15]
    break;
 8019b54:	bf00      	nop
  }
  return usb_status;
 8019b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b58:	4618      	mov	r0, r3
 8019b5a:	3710      	adds	r7, #16
 8019b5c:	46bd      	mov	sp, r7
 8019b5e:	bd80      	pop	{r7, pc}

08019b60 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019b60:	b580      	push	{r7, lr}
 8019b62:	b084      	sub	sp, #16
 8019b64:	af00      	add	r7, sp, #0
 8019b66:	6078      	str	r0, [r7, #4]
 8019b68:	460b      	mov	r3, r1
 8019b6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b6c:	2300      	movs	r3, #0
 8019b6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b70:	2300      	movs	r3, #0
 8019b72:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019b7a:	78fa      	ldrb	r2, [r7, #3]
 8019b7c:	4611      	mov	r1, r2
 8019b7e:	4618      	mov	r0, r3
 8019b80:	f7f6 f9b1 	bl	800fee6 <HAL_PCD_EP_ClrStall>
 8019b84:	4603      	mov	r3, r0
 8019b86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019b88:	7bbb      	ldrb	r3, [r7, #14]
 8019b8a:	2b03      	cmp	r3, #3
 8019b8c:	d816      	bhi.n	8019bbc <USBD_LL_ClearStallEP+0x5c>
 8019b8e:	a201      	add	r2, pc, #4	; (adr r2, 8019b94 <USBD_LL_ClearStallEP+0x34>)
 8019b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b94:	08019ba5 	.word	0x08019ba5
 8019b98:	08019bab 	.word	0x08019bab
 8019b9c:	08019bb1 	.word	0x08019bb1
 8019ba0:	08019bb7 	.word	0x08019bb7
    case HAL_OK :
      usb_status = USBD_OK;
 8019ba4:	2300      	movs	r3, #0
 8019ba6:	73fb      	strb	r3, [r7, #15]
    break;
 8019ba8:	e00b      	b.n	8019bc2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019baa:	2303      	movs	r3, #3
 8019bac:	73fb      	strb	r3, [r7, #15]
    break;
 8019bae:	e008      	b.n	8019bc2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019bb0:	2301      	movs	r3, #1
 8019bb2:	73fb      	strb	r3, [r7, #15]
    break;
 8019bb4:	e005      	b.n	8019bc2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019bb6:	2303      	movs	r3, #3
 8019bb8:	73fb      	strb	r3, [r7, #15]
    break;
 8019bba:	e002      	b.n	8019bc2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8019bbc:	2303      	movs	r3, #3
 8019bbe:	73fb      	strb	r3, [r7, #15]
    break;
 8019bc0:	bf00      	nop
  }
  return usb_status;
 8019bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8019bc4:	4618      	mov	r0, r3
 8019bc6:	3710      	adds	r7, #16
 8019bc8:	46bd      	mov	sp, r7
 8019bca:	bd80      	pop	{r7, pc}

08019bcc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019bcc:	b480      	push	{r7}
 8019bce:	b085      	sub	sp, #20
 8019bd0:	af00      	add	r7, sp, #0
 8019bd2:	6078      	str	r0, [r7, #4]
 8019bd4:	460b      	mov	r3, r1
 8019bd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019bde:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019be0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	da0b      	bge.n	8019c00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019be8:	78fb      	ldrb	r3, [r7, #3]
 8019bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019bee:	68f9      	ldr	r1, [r7, #12]
 8019bf0:	4613      	mov	r3, r2
 8019bf2:	00db      	lsls	r3, r3, #3
 8019bf4:	4413      	add	r3, r2
 8019bf6:	009b      	lsls	r3, r3, #2
 8019bf8:	440b      	add	r3, r1
 8019bfa:	333e      	adds	r3, #62	; 0x3e
 8019bfc:	781b      	ldrb	r3, [r3, #0]
 8019bfe:	e00b      	b.n	8019c18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019c00:	78fb      	ldrb	r3, [r7, #3]
 8019c02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019c06:	68f9      	ldr	r1, [r7, #12]
 8019c08:	4613      	mov	r3, r2
 8019c0a:	00db      	lsls	r3, r3, #3
 8019c0c:	4413      	add	r3, r2
 8019c0e:	009b      	lsls	r3, r3, #2
 8019c10:	440b      	add	r3, r1
 8019c12:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8019c16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019c18:	4618      	mov	r0, r3
 8019c1a:	3714      	adds	r7, #20
 8019c1c:	46bd      	mov	sp, r7
 8019c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c22:	4770      	bx	lr

08019c24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019c24:	b580      	push	{r7, lr}
 8019c26:	b084      	sub	sp, #16
 8019c28:	af00      	add	r7, sp, #0
 8019c2a:	6078      	str	r0, [r7, #4]
 8019c2c:	460b      	mov	r3, r1
 8019c2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c30:	2300      	movs	r3, #0
 8019c32:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019c34:	2300      	movs	r3, #0
 8019c36:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019c3e:	78fa      	ldrb	r2, [r7, #3]
 8019c40:	4611      	mov	r1, r2
 8019c42:	4618      	mov	r0, r3
 8019c44:	f7f5 ff83 	bl	800fb4e <HAL_PCD_SetAddress>
 8019c48:	4603      	mov	r3, r0
 8019c4a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8019c4c:	7bbb      	ldrb	r3, [r7, #14]
 8019c4e:	2b03      	cmp	r3, #3
 8019c50:	d816      	bhi.n	8019c80 <USBD_LL_SetUSBAddress+0x5c>
 8019c52:	a201      	add	r2, pc, #4	; (adr r2, 8019c58 <USBD_LL_SetUSBAddress+0x34>)
 8019c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019c58:	08019c69 	.word	0x08019c69
 8019c5c:	08019c6f 	.word	0x08019c6f
 8019c60:	08019c75 	.word	0x08019c75
 8019c64:	08019c7b 	.word	0x08019c7b
    case HAL_OK :
      usb_status = USBD_OK;
 8019c68:	2300      	movs	r3, #0
 8019c6a:	73fb      	strb	r3, [r7, #15]
    break;
 8019c6c:	e00b      	b.n	8019c86 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019c6e:	2303      	movs	r3, #3
 8019c70:	73fb      	strb	r3, [r7, #15]
    break;
 8019c72:	e008      	b.n	8019c86 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019c74:	2301      	movs	r3, #1
 8019c76:	73fb      	strb	r3, [r7, #15]
    break;
 8019c78:	e005      	b.n	8019c86 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019c7a:	2303      	movs	r3, #3
 8019c7c:	73fb      	strb	r3, [r7, #15]
    break;
 8019c7e:	e002      	b.n	8019c86 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8019c80:	2303      	movs	r3, #3
 8019c82:	73fb      	strb	r3, [r7, #15]
    break;
 8019c84:	bf00      	nop
  }
  return usb_status;
 8019c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c88:	4618      	mov	r0, r3
 8019c8a:	3710      	adds	r7, #16
 8019c8c:	46bd      	mov	sp, r7
 8019c8e:	bd80      	pop	{r7, pc}

08019c90 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019c90:	b580      	push	{r7, lr}
 8019c92:	b086      	sub	sp, #24
 8019c94:	af00      	add	r7, sp, #0
 8019c96:	60f8      	str	r0, [r7, #12]
 8019c98:	607a      	str	r2, [r7, #4]
 8019c9a:	603b      	str	r3, [r7, #0]
 8019c9c:	460b      	mov	r3, r1
 8019c9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ca0:	2300      	movs	r3, #0
 8019ca2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019ca4:	2300      	movs	r3, #0
 8019ca6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019ca8:	68fb      	ldr	r3, [r7, #12]
 8019caa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019cae:	7af9      	ldrb	r1, [r7, #11]
 8019cb0:	683b      	ldr	r3, [r7, #0]
 8019cb2:	687a      	ldr	r2, [r7, #4]
 8019cb4:	f7f6 f878 	bl	800fda8 <HAL_PCD_EP_Transmit>
 8019cb8:	4603      	mov	r3, r0
 8019cba:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8019cbc:	7dbb      	ldrb	r3, [r7, #22]
 8019cbe:	2b03      	cmp	r3, #3
 8019cc0:	d816      	bhi.n	8019cf0 <USBD_LL_Transmit+0x60>
 8019cc2:	a201      	add	r2, pc, #4	; (adr r2, 8019cc8 <USBD_LL_Transmit+0x38>)
 8019cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019cc8:	08019cd9 	.word	0x08019cd9
 8019ccc:	08019cdf 	.word	0x08019cdf
 8019cd0:	08019ce5 	.word	0x08019ce5
 8019cd4:	08019ceb 	.word	0x08019ceb
    case HAL_OK :
      usb_status = USBD_OK;
 8019cd8:	2300      	movs	r3, #0
 8019cda:	75fb      	strb	r3, [r7, #23]
    break;
 8019cdc:	e00b      	b.n	8019cf6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019cde:	2303      	movs	r3, #3
 8019ce0:	75fb      	strb	r3, [r7, #23]
    break;
 8019ce2:	e008      	b.n	8019cf6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019ce4:	2301      	movs	r3, #1
 8019ce6:	75fb      	strb	r3, [r7, #23]
    break;
 8019ce8:	e005      	b.n	8019cf6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019cea:	2303      	movs	r3, #3
 8019cec:	75fb      	strb	r3, [r7, #23]
    break;
 8019cee:	e002      	b.n	8019cf6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8019cf0:	2303      	movs	r3, #3
 8019cf2:	75fb      	strb	r3, [r7, #23]
    break;
 8019cf4:	bf00      	nop
  }
  return usb_status;
 8019cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8019cf8:	4618      	mov	r0, r3
 8019cfa:	3718      	adds	r7, #24
 8019cfc:	46bd      	mov	sp, r7
 8019cfe:	bd80      	pop	{r7, pc}

08019d00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019d00:	b580      	push	{r7, lr}
 8019d02:	b086      	sub	sp, #24
 8019d04:	af00      	add	r7, sp, #0
 8019d06:	60f8      	str	r0, [r7, #12]
 8019d08:	607a      	str	r2, [r7, #4]
 8019d0a:	603b      	str	r3, [r7, #0]
 8019d0c:	460b      	mov	r3, r1
 8019d0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019d10:	2300      	movs	r3, #0
 8019d12:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019d14:	2300      	movs	r3, #0
 8019d16:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019d1e:	7af9      	ldrb	r1, [r7, #11]
 8019d20:	683b      	ldr	r3, [r7, #0]
 8019d22:	687a      	ldr	r2, [r7, #4]
 8019d24:	f7f5 ffea 	bl	800fcfc <HAL_PCD_EP_Receive>
 8019d28:	4603      	mov	r3, r0
 8019d2a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8019d2c:	7dbb      	ldrb	r3, [r7, #22]
 8019d2e:	2b03      	cmp	r3, #3
 8019d30:	d816      	bhi.n	8019d60 <USBD_LL_PrepareReceive+0x60>
 8019d32:	a201      	add	r2, pc, #4	; (adr r2, 8019d38 <USBD_LL_PrepareReceive+0x38>)
 8019d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d38:	08019d49 	.word	0x08019d49
 8019d3c:	08019d4f 	.word	0x08019d4f
 8019d40:	08019d55 	.word	0x08019d55
 8019d44:	08019d5b 	.word	0x08019d5b
    case HAL_OK :
      usb_status = USBD_OK;
 8019d48:	2300      	movs	r3, #0
 8019d4a:	75fb      	strb	r3, [r7, #23]
    break;
 8019d4c:	e00b      	b.n	8019d66 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019d4e:	2303      	movs	r3, #3
 8019d50:	75fb      	strb	r3, [r7, #23]
    break;
 8019d52:	e008      	b.n	8019d66 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019d54:	2301      	movs	r3, #1
 8019d56:	75fb      	strb	r3, [r7, #23]
    break;
 8019d58:	e005      	b.n	8019d66 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019d5a:	2303      	movs	r3, #3
 8019d5c:	75fb      	strb	r3, [r7, #23]
    break;
 8019d5e:	e002      	b.n	8019d66 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8019d60:	2303      	movs	r3, #3
 8019d62:	75fb      	strb	r3, [r7, #23]
    break;
 8019d64:	bf00      	nop
  }
  return usb_status;
 8019d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8019d68:	4618      	mov	r0, r3
 8019d6a:	3718      	adds	r7, #24
 8019d6c:	46bd      	mov	sp, r7
 8019d6e:	bd80      	pop	{r7, pc}

08019d70 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019d70:	b580      	push	{r7, lr}
 8019d72:	b082      	sub	sp, #8
 8019d74:	af00      	add	r7, sp, #0
 8019d76:	6078      	str	r0, [r7, #4]
 8019d78:	460b      	mov	r3, r1
 8019d7a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019d82:	78fa      	ldrb	r2, [r7, #3]
 8019d84:	4611      	mov	r1, r2
 8019d86:	4618      	mov	r0, r3
 8019d88:	f7f5 fff6 	bl	800fd78 <HAL_PCD_EP_GetRxCount>
 8019d8c:	4603      	mov	r3, r0
}
 8019d8e:	4618      	mov	r0, r3
 8019d90:	3708      	adds	r7, #8
 8019d92:	46bd      	mov	sp, r7
 8019d94:	bd80      	pop	{r7, pc}
	...

08019d98 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8019d98:	b580      	push	{r7, lr}
 8019d9a:	b082      	sub	sp, #8
 8019d9c:	af00      	add	r7, sp, #0
 8019d9e:	6078      	str	r0, [r7, #4]
 8019da0:	460b      	mov	r3, r1
 8019da2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8019da4:	78fb      	ldrb	r3, [r7, #3]
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	d002      	beq.n	8019db0 <HAL_PCDEx_LPM_Callback+0x18>
 8019daa:	2b01      	cmp	r3, #1
 8019dac:	d01f      	beq.n	8019dee <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8019dae:	e03b      	b.n	8019e28 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	6a1b      	ldr	r3, [r3, #32]
 8019db4:	2b00      	cmp	r3, #0
 8019db6:	d007      	beq.n	8019dc8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8019db8:	f000 f854 	bl	8019e64 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019dbc:	4b1c      	ldr	r3, [pc, #112]	; (8019e30 <HAL_PCDEx_LPM_Callback+0x98>)
 8019dbe:	691b      	ldr	r3, [r3, #16]
 8019dc0:	4a1b      	ldr	r2, [pc, #108]	; (8019e30 <HAL_PCDEx_LPM_Callback+0x98>)
 8019dc2:	f023 0306 	bic.w	r3, r3, #6
 8019dc6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	687a      	ldr	r2, [r7, #4]
 8019dd4:	6812      	ldr	r2, [r2, #0]
 8019dd6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019dda:	f023 0301 	bic.w	r3, r3, #1
 8019dde:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019de6:	4618      	mov	r0, r3
 8019de8:	f7fe fb08 	bl	80183fc <USBD_LL_Resume>
    break;
 8019dec:	e01c      	b.n	8019e28 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	681b      	ldr	r3, [r3, #0]
 8019df2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	687a      	ldr	r2, [r7, #4]
 8019dfa:	6812      	ldr	r2, [r2, #0]
 8019dfc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019e00:	f043 0301 	orr.w	r3, r3, #1
 8019e04:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019e0c:	4618      	mov	r0, r3
 8019e0e:	f7fe fadf 	bl	80183d0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	6a1b      	ldr	r3, [r3, #32]
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	d005      	beq.n	8019e26 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019e1a:	4b05      	ldr	r3, [pc, #20]	; (8019e30 <HAL_PCDEx_LPM_Callback+0x98>)
 8019e1c:	691b      	ldr	r3, [r3, #16]
 8019e1e:	4a04      	ldr	r2, [pc, #16]	; (8019e30 <HAL_PCDEx_LPM_Callback+0x98>)
 8019e20:	f043 0306 	orr.w	r3, r3, #6
 8019e24:	6113      	str	r3, [r2, #16]
    break;
 8019e26:	bf00      	nop
}
 8019e28:	bf00      	nop
 8019e2a:	3708      	adds	r7, #8
 8019e2c:	46bd      	mov	sp, r7
 8019e2e:	bd80      	pop	{r7, pc}
 8019e30:	e000ed00 	.word	0xe000ed00

08019e34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019e34:	b480      	push	{r7}
 8019e36:	b083      	sub	sp, #12
 8019e38:	af00      	add	r7, sp, #0
 8019e3a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019e3c:	4b03      	ldr	r3, [pc, #12]	; (8019e4c <USBD_static_malloc+0x18>)
}
 8019e3e:	4618      	mov	r0, r3
 8019e40:	370c      	adds	r7, #12
 8019e42:	46bd      	mov	sp, r7
 8019e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e48:	4770      	bx	lr
 8019e4a:	bf00      	nop
 8019e4c:	20002c28 	.word	0x20002c28

08019e50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019e50:	b480      	push	{r7}
 8019e52:	b083      	sub	sp, #12
 8019e54:	af00      	add	r7, sp, #0
 8019e56:	6078      	str	r0, [r7, #4]

}
 8019e58:	bf00      	nop
 8019e5a:	370c      	adds	r7, #12
 8019e5c:	46bd      	mov	sp, r7
 8019e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e62:	4770      	bx	lr

08019e64 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8019e64:	b580      	push	{r7, lr}
 8019e66:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8019e68:	f7e8 fa7e 	bl	8002368 <SystemClock_Config>
}
 8019e6c:	bf00      	nop
 8019e6e:	bd80      	pop	{r7, pc}

08019e70 <__errno>:
 8019e70:	4b01      	ldr	r3, [pc, #4]	; (8019e78 <__errno+0x8>)
 8019e72:	6818      	ldr	r0, [r3, #0]
 8019e74:	4770      	bx	lr
 8019e76:	bf00      	nop
 8019e78:	200006dc 	.word	0x200006dc

08019e7c <__libc_init_array>:
 8019e7c:	b570      	push	{r4, r5, r6, lr}
 8019e7e:	4d0d      	ldr	r5, [pc, #52]	; (8019eb4 <__libc_init_array+0x38>)
 8019e80:	4c0d      	ldr	r4, [pc, #52]	; (8019eb8 <__libc_init_array+0x3c>)
 8019e82:	1b64      	subs	r4, r4, r5
 8019e84:	10a4      	asrs	r4, r4, #2
 8019e86:	2600      	movs	r6, #0
 8019e88:	42a6      	cmp	r6, r4
 8019e8a:	d109      	bne.n	8019ea0 <__libc_init_array+0x24>
 8019e8c:	4d0b      	ldr	r5, [pc, #44]	; (8019ebc <__libc_init_array+0x40>)
 8019e8e:	4c0c      	ldr	r4, [pc, #48]	; (8019ec0 <__libc_init_array+0x44>)
 8019e90:	f001 f83a 	bl	801af08 <_init>
 8019e94:	1b64      	subs	r4, r4, r5
 8019e96:	10a4      	asrs	r4, r4, #2
 8019e98:	2600      	movs	r6, #0
 8019e9a:	42a6      	cmp	r6, r4
 8019e9c:	d105      	bne.n	8019eaa <__libc_init_array+0x2e>
 8019e9e:	bd70      	pop	{r4, r5, r6, pc}
 8019ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8019ea4:	4798      	blx	r3
 8019ea6:	3601      	adds	r6, #1
 8019ea8:	e7ee      	b.n	8019e88 <__libc_init_array+0xc>
 8019eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8019eae:	4798      	blx	r3
 8019eb0:	3601      	adds	r6, #1
 8019eb2:	e7f2      	b.n	8019e9a <__libc_init_array+0x1e>
 8019eb4:	0801cfe8 	.word	0x0801cfe8
 8019eb8:	0801cfe8 	.word	0x0801cfe8
 8019ebc:	0801cfe8 	.word	0x0801cfe8
 8019ec0:	0801cfec 	.word	0x0801cfec

08019ec4 <memcpy>:
 8019ec4:	440a      	add	r2, r1
 8019ec6:	4291      	cmp	r1, r2
 8019ec8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8019ecc:	d100      	bne.n	8019ed0 <memcpy+0xc>
 8019ece:	4770      	bx	lr
 8019ed0:	b510      	push	{r4, lr}
 8019ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019ed6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019eda:	4291      	cmp	r1, r2
 8019edc:	d1f9      	bne.n	8019ed2 <memcpy+0xe>
 8019ede:	bd10      	pop	{r4, pc}

08019ee0 <memset>:
 8019ee0:	4402      	add	r2, r0
 8019ee2:	4603      	mov	r3, r0
 8019ee4:	4293      	cmp	r3, r2
 8019ee6:	d100      	bne.n	8019eea <memset+0xa>
 8019ee8:	4770      	bx	lr
 8019eea:	f803 1b01 	strb.w	r1, [r3], #1
 8019eee:	e7f9      	b.n	8019ee4 <memset+0x4>

08019ef0 <_free_r>:
 8019ef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019ef2:	2900      	cmp	r1, #0
 8019ef4:	d044      	beq.n	8019f80 <_free_r+0x90>
 8019ef6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019efa:	9001      	str	r0, [sp, #4]
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	f1a1 0404 	sub.w	r4, r1, #4
 8019f02:	bfb8      	it	lt
 8019f04:	18e4      	addlt	r4, r4, r3
 8019f06:	f000 fc59 	bl	801a7bc <__malloc_lock>
 8019f0a:	4a1e      	ldr	r2, [pc, #120]	; (8019f84 <_free_r+0x94>)
 8019f0c:	9801      	ldr	r0, [sp, #4]
 8019f0e:	6813      	ldr	r3, [r2, #0]
 8019f10:	b933      	cbnz	r3, 8019f20 <_free_r+0x30>
 8019f12:	6063      	str	r3, [r4, #4]
 8019f14:	6014      	str	r4, [r2, #0]
 8019f16:	b003      	add	sp, #12
 8019f18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019f1c:	f000 bc54 	b.w	801a7c8 <__malloc_unlock>
 8019f20:	42a3      	cmp	r3, r4
 8019f22:	d908      	bls.n	8019f36 <_free_r+0x46>
 8019f24:	6825      	ldr	r5, [r4, #0]
 8019f26:	1961      	adds	r1, r4, r5
 8019f28:	428b      	cmp	r3, r1
 8019f2a:	bf01      	itttt	eq
 8019f2c:	6819      	ldreq	r1, [r3, #0]
 8019f2e:	685b      	ldreq	r3, [r3, #4]
 8019f30:	1949      	addeq	r1, r1, r5
 8019f32:	6021      	streq	r1, [r4, #0]
 8019f34:	e7ed      	b.n	8019f12 <_free_r+0x22>
 8019f36:	461a      	mov	r2, r3
 8019f38:	685b      	ldr	r3, [r3, #4]
 8019f3a:	b10b      	cbz	r3, 8019f40 <_free_r+0x50>
 8019f3c:	42a3      	cmp	r3, r4
 8019f3e:	d9fa      	bls.n	8019f36 <_free_r+0x46>
 8019f40:	6811      	ldr	r1, [r2, #0]
 8019f42:	1855      	adds	r5, r2, r1
 8019f44:	42a5      	cmp	r5, r4
 8019f46:	d10b      	bne.n	8019f60 <_free_r+0x70>
 8019f48:	6824      	ldr	r4, [r4, #0]
 8019f4a:	4421      	add	r1, r4
 8019f4c:	1854      	adds	r4, r2, r1
 8019f4e:	42a3      	cmp	r3, r4
 8019f50:	6011      	str	r1, [r2, #0]
 8019f52:	d1e0      	bne.n	8019f16 <_free_r+0x26>
 8019f54:	681c      	ldr	r4, [r3, #0]
 8019f56:	685b      	ldr	r3, [r3, #4]
 8019f58:	6053      	str	r3, [r2, #4]
 8019f5a:	4421      	add	r1, r4
 8019f5c:	6011      	str	r1, [r2, #0]
 8019f5e:	e7da      	b.n	8019f16 <_free_r+0x26>
 8019f60:	d902      	bls.n	8019f68 <_free_r+0x78>
 8019f62:	230c      	movs	r3, #12
 8019f64:	6003      	str	r3, [r0, #0]
 8019f66:	e7d6      	b.n	8019f16 <_free_r+0x26>
 8019f68:	6825      	ldr	r5, [r4, #0]
 8019f6a:	1961      	adds	r1, r4, r5
 8019f6c:	428b      	cmp	r3, r1
 8019f6e:	bf04      	itt	eq
 8019f70:	6819      	ldreq	r1, [r3, #0]
 8019f72:	685b      	ldreq	r3, [r3, #4]
 8019f74:	6063      	str	r3, [r4, #4]
 8019f76:	bf04      	itt	eq
 8019f78:	1949      	addeq	r1, r1, r5
 8019f7a:	6021      	streq	r1, [r4, #0]
 8019f7c:	6054      	str	r4, [r2, #4]
 8019f7e:	e7ca      	b.n	8019f16 <_free_r+0x26>
 8019f80:	b003      	add	sp, #12
 8019f82:	bd30      	pop	{r4, r5, pc}
 8019f84:	20002e48 	.word	0x20002e48

08019f88 <sbrk_aligned>:
 8019f88:	b570      	push	{r4, r5, r6, lr}
 8019f8a:	4e0e      	ldr	r6, [pc, #56]	; (8019fc4 <sbrk_aligned+0x3c>)
 8019f8c:	460c      	mov	r4, r1
 8019f8e:	6831      	ldr	r1, [r6, #0]
 8019f90:	4605      	mov	r5, r0
 8019f92:	b911      	cbnz	r1, 8019f9a <sbrk_aligned+0x12>
 8019f94:	f000 f91a 	bl	801a1cc <_sbrk_r>
 8019f98:	6030      	str	r0, [r6, #0]
 8019f9a:	4621      	mov	r1, r4
 8019f9c:	4628      	mov	r0, r5
 8019f9e:	f000 f915 	bl	801a1cc <_sbrk_r>
 8019fa2:	1c43      	adds	r3, r0, #1
 8019fa4:	d00a      	beq.n	8019fbc <sbrk_aligned+0x34>
 8019fa6:	1cc4      	adds	r4, r0, #3
 8019fa8:	f024 0403 	bic.w	r4, r4, #3
 8019fac:	42a0      	cmp	r0, r4
 8019fae:	d007      	beq.n	8019fc0 <sbrk_aligned+0x38>
 8019fb0:	1a21      	subs	r1, r4, r0
 8019fb2:	4628      	mov	r0, r5
 8019fb4:	f000 f90a 	bl	801a1cc <_sbrk_r>
 8019fb8:	3001      	adds	r0, #1
 8019fba:	d101      	bne.n	8019fc0 <sbrk_aligned+0x38>
 8019fbc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019fc0:	4620      	mov	r0, r4
 8019fc2:	bd70      	pop	{r4, r5, r6, pc}
 8019fc4:	20002e4c 	.word	0x20002e4c

08019fc8 <_malloc_r>:
 8019fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019fcc:	1ccd      	adds	r5, r1, #3
 8019fce:	f025 0503 	bic.w	r5, r5, #3
 8019fd2:	3508      	adds	r5, #8
 8019fd4:	2d0c      	cmp	r5, #12
 8019fd6:	bf38      	it	cc
 8019fd8:	250c      	movcc	r5, #12
 8019fda:	2d00      	cmp	r5, #0
 8019fdc:	4607      	mov	r7, r0
 8019fde:	db01      	blt.n	8019fe4 <_malloc_r+0x1c>
 8019fe0:	42a9      	cmp	r1, r5
 8019fe2:	d905      	bls.n	8019ff0 <_malloc_r+0x28>
 8019fe4:	230c      	movs	r3, #12
 8019fe6:	603b      	str	r3, [r7, #0]
 8019fe8:	2600      	movs	r6, #0
 8019fea:	4630      	mov	r0, r6
 8019fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ff0:	4e2e      	ldr	r6, [pc, #184]	; (801a0ac <_malloc_r+0xe4>)
 8019ff2:	f000 fbe3 	bl	801a7bc <__malloc_lock>
 8019ff6:	6833      	ldr	r3, [r6, #0]
 8019ff8:	461c      	mov	r4, r3
 8019ffa:	bb34      	cbnz	r4, 801a04a <_malloc_r+0x82>
 8019ffc:	4629      	mov	r1, r5
 8019ffe:	4638      	mov	r0, r7
 801a000:	f7ff ffc2 	bl	8019f88 <sbrk_aligned>
 801a004:	1c43      	adds	r3, r0, #1
 801a006:	4604      	mov	r4, r0
 801a008:	d14d      	bne.n	801a0a6 <_malloc_r+0xde>
 801a00a:	6834      	ldr	r4, [r6, #0]
 801a00c:	4626      	mov	r6, r4
 801a00e:	2e00      	cmp	r6, #0
 801a010:	d140      	bne.n	801a094 <_malloc_r+0xcc>
 801a012:	6823      	ldr	r3, [r4, #0]
 801a014:	4631      	mov	r1, r6
 801a016:	4638      	mov	r0, r7
 801a018:	eb04 0803 	add.w	r8, r4, r3
 801a01c:	f000 f8d6 	bl	801a1cc <_sbrk_r>
 801a020:	4580      	cmp	r8, r0
 801a022:	d13a      	bne.n	801a09a <_malloc_r+0xd2>
 801a024:	6821      	ldr	r1, [r4, #0]
 801a026:	3503      	adds	r5, #3
 801a028:	1a6d      	subs	r5, r5, r1
 801a02a:	f025 0503 	bic.w	r5, r5, #3
 801a02e:	3508      	adds	r5, #8
 801a030:	2d0c      	cmp	r5, #12
 801a032:	bf38      	it	cc
 801a034:	250c      	movcc	r5, #12
 801a036:	4629      	mov	r1, r5
 801a038:	4638      	mov	r0, r7
 801a03a:	f7ff ffa5 	bl	8019f88 <sbrk_aligned>
 801a03e:	3001      	adds	r0, #1
 801a040:	d02b      	beq.n	801a09a <_malloc_r+0xd2>
 801a042:	6823      	ldr	r3, [r4, #0]
 801a044:	442b      	add	r3, r5
 801a046:	6023      	str	r3, [r4, #0]
 801a048:	e00e      	b.n	801a068 <_malloc_r+0xa0>
 801a04a:	6822      	ldr	r2, [r4, #0]
 801a04c:	1b52      	subs	r2, r2, r5
 801a04e:	d41e      	bmi.n	801a08e <_malloc_r+0xc6>
 801a050:	2a0b      	cmp	r2, #11
 801a052:	d916      	bls.n	801a082 <_malloc_r+0xba>
 801a054:	1961      	adds	r1, r4, r5
 801a056:	42a3      	cmp	r3, r4
 801a058:	6025      	str	r5, [r4, #0]
 801a05a:	bf18      	it	ne
 801a05c:	6059      	strne	r1, [r3, #4]
 801a05e:	6863      	ldr	r3, [r4, #4]
 801a060:	bf08      	it	eq
 801a062:	6031      	streq	r1, [r6, #0]
 801a064:	5162      	str	r2, [r4, r5]
 801a066:	604b      	str	r3, [r1, #4]
 801a068:	4638      	mov	r0, r7
 801a06a:	f104 060b 	add.w	r6, r4, #11
 801a06e:	f000 fbab 	bl	801a7c8 <__malloc_unlock>
 801a072:	f026 0607 	bic.w	r6, r6, #7
 801a076:	1d23      	adds	r3, r4, #4
 801a078:	1af2      	subs	r2, r6, r3
 801a07a:	d0b6      	beq.n	8019fea <_malloc_r+0x22>
 801a07c:	1b9b      	subs	r3, r3, r6
 801a07e:	50a3      	str	r3, [r4, r2]
 801a080:	e7b3      	b.n	8019fea <_malloc_r+0x22>
 801a082:	6862      	ldr	r2, [r4, #4]
 801a084:	42a3      	cmp	r3, r4
 801a086:	bf0c      	ite	eq
 801a088:	6032      	streq	r2, [r6, #0]
 801a08a:	605a      	strne	r2, [r3, #4]
 801a08c:	e7ec      	b.n	801a068 <_malloc_r+0xa0>
 801a08e:	4623      	mov	r3, r4
 801a090:	6864      	ldr	r4, [r4, #4]
 801a092:	e7b2      	b.n	8019ffa <_malloc_r+0x32>
 801a094:	4634      	mov	r4, r6
 801a096:	6876      	ldr	r6, [r6, #4]
 801a098:	e7b9      	b.n	801a00e <_malloc_r+0x46>
 801a09a:	230c      	movs	r3, #12
 801a09c:	603b      	str	r3, [r7, #0]
 801a09e:	4638      	mov	r0, r7
 801a0a0:	f000 fb92 	bl	801a7c8 <__malloc_unlock>
 801a0a4:	e7a1      	b.n	8019fea <_malloc_r+0x22>
 801a0a6:	6025      	str	r5, [r4, #0]
 801a0a8:	e7de      	b.n	801a068 <_malloc_r+0xa0>
 801a0aa:	bf00      	nop
 801a0ac:	20002e48 	.word	0x20002e48

0801a0b0 <iprintf>:
 801a0b0:	b40f      	push	{r0, r1, r2, r3}
 801a0b2:	4b0a      	ldr	r3, [pc, #40]	; (801a0dc <iprintf+0x2c>)
 801a0b4:	b513      	push	{r0, r1, r4, lr}
 801a0b6:	681c      	ldr	r4, [r3, #0]
 801a0b8:	b124      	cbz	r4, 801a0c4 <iprintf+0x14>
 801a0ba:	69a3      	ldr	r3, [r4, #24]
 801a0bc:	b913      	cbnz	r3, 801a0c4 <iprintf+0x14>
 801a0be:	4620      	mov	r0, r4
 801a0c0:	f000 fa76 	bl	801a5b0 <__sinit>
 801a0c4:	ab05      	add	r3, sp, #20
 801a0c6:	9a04      	ldr	r2, [sp, #16]
 801a0c8:	68a1      	ldr	r1, [r4, #8]
 801a0ca:	9301      	str	r3, [sp, #4]
 801a0cc:	4620      	mov	r0, r4
 801a0ce:	f000 fbab 	bl	801a828 <_vfiprintf_r>
 801a0d2:	b002      	add	sp, #8
 801a0d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a0d8:	b004      	add	sp, #16
 801a0da:	4770      	bx	lr
 801a0dc:	200006dc 	.word	0x200006dc

0801a0e0 <_puts_r>:
 801a0e0:	b570      	push	{r4, r5, r6, lr}
 801a0e2:	460e      	mov	r6, r1
 801a0e4:	4605      	mov	r5, r0
 801a0e6:	b118      	cbz	r0, 801a0f0 <_puts_r+0x10>
 801a0e8:	6983      	ldr	r3, [r0, #24]
 801a0ea:	b90b      	cbnz	r3, 801a0f0 <_puts_r+0x10>
 801a0ec:	f000 fa60 	bl	801a5b0 <__sinit>
 801a0f0:	69ab      	ldr	r3, [r5, #24]
 801a0f2:	68ac      	ldr	r4, [r5, #8]
 801a0f4:	b913      	cbnz	r3, 801a0fc <_puts_r+0x1c>
 801a0f6:	4628      	mov	r0, r5
 801a0f8:	f000 fa5a 	bl	801a5b0 <__sinit>
 801a0fc:	4b2c      	ldr	r3, [pc, #176]	; (801a1b0 <_puts_r+0xd0>)
 801a0fe:	429c      	cmp	r4, r3
 801a100:	d120      	bne.n	801a144 <_puts_r+0x64>
 801a102:	686c      	ldr	r4, [r5, #4]
 801a104:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a106:	07db      	lsls	r3, r3, #31
 801a108:	d405      	bmi.n	801a116 <_puts_r+0x36>
 801a10a:	89a3      	ldrh	r3, [r4, #12]
 801a10c:	0598      	lsls	r0, r3, #22
 801a10e:	d402      	bmi.n	801a116 <_puts_r+0x36>
 801a110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a112:	f000 faeb 	bl	801a6ec <__retarget_lock_acquire_recursive>
 801a116:	89a3      	ldrh	r3, [r4, #12]
 801a118:	0719      	lsls	r1, r3, #28
 801a11a:	d51d      	bpl.n	801a158 <_puts_r+0x78>
 801a11c:	6923      	ldr	r3, [r4, #16]
 801a11e:	b1db      	cbz	r3, 801a158 <_puts_r+0x78>
 801a120:	3e01      	subs	r6, #1
 801a122:	68a3      	ldr	r3, [r4, #8]
 801a124:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a128:	3b01      	subs	r3, #1
 801a12a:	60a3      	str	r3, [r4, #8]
 801a12c:	bb39      	cbnz	r1, 801a17e <_puts_r+0x9e>
 801a12e:	2b00      	cmp	r3, #0
 801a130:	da38      	bge.n	801a1a4 <_puts_r+0xc4>
 801a132:	4622      	mov	r2, r4
 801a134:	210a      	movs	r1, #10
 801a136:	4628      	mov	r0, r5
 801a138:	f000 f860 	bl	801a1fc <__swbuf_r>
 801a13c:	3001      	adds	r0, #1
 801a13e:	d011      	beq.n	801a164 <_puts_r+0x84>
 801a140:	250a      	movs	r5, #10
 801a142:	e011      	b.n	801a168 <_puts_r+0x88>
 801a144:	4b1b      	ldr	r3, [pc, #108]	; (801a1b4 <_puts_r+0xd4>)
 801a146:	429c      	cmp	r4, r3
 801a148:	d101      	bne.n	801a14e <_puts_r+0x6e>
 801a14a:	68ac      	ldr	r4, [r5, #8]
 801a14c:	e7da      	b.n	801a104 <_puts_r+0x24>
 801a14e:	4b1a      	ldr	r3, [pc, #104]	; (801a1b8 <_puts_r+0xd8>)
 801a150:	429c      	cmp	r4, r3
 801a152:	bf08      	it	eq
 801a154:	68ec      	ldreq	r4, [r5, #12]
 801a156:	e7d5      	b.n	801a104 <_puts_r+0x24>
 801a158:	4621      	mov	r1, r4
 801a15a:	4628      	mov	r0, r5
 801a15c:	f000 f8a0 	bl	801a2a0 <__swsetup_r>
 801a160:	2800      	cmp	r0, #0
 801a162:	d0dd      	beq.n	801a120 <_puts_r+0x40>
 801a164:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801a168:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a16a:	07da      	lsls	r2, r3, #31
 801a16c:	d405      	bmi.n	801a17a <_puts_r+0x9a>
 801a16e:	89a3      	ldrh	r3, [r4, #12]
 801a170:	059b      	lsls	r3, r3, #22
 801a172:	d402      	bmi.n	801a17a <_puts_r+0x9a>
 801a174:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a176:	f000 faba 	bl	801a6ee <__retarget_lock_release_recursive>
 801a17a:	4628      	mov	r0, r5
 801a17c:	bd70      	pop	{r4, r5, r6, pc}
 801a17e:	2b00      	cmp	r3, #0
 801a180:	da04      	bge.n	801a18c <_puts_r+0xac>
 801a182:	69a2      	ldr	r2, [r4, #24]
 801a184:	429a      	cmp	r2, r3
 801a186:	dc06      	bgt.n	801a196 <_puts_r+0xb6>
 801a188:	290a      	cmp	r1, #10
 801a18a:	d004      	beq.n	801a196 <_puts_r+0xb6>
 801a18c:	6823      	ldr	r3, [r4, #0]
 801a18e:	1c5a      	adds	r2, r3, #1
 801a190:	6022      	str	r2, [r4, #0]
 801a192:	7019      	strb	r1, [r3, #0]
 801a194:	e7c5      	b.n	801a122 <_puts_r+0x42>
 801a196:	4622      	mov	r2, r4
 801a198:	4628      	mov	r0, r5
 801a19a:	f000 f82f 	bl	801a1fc <__swbuf_r>
 801a19e:	3001      	adds	r0, #1
 801a1a0:	d1bf      	bne.n	801a122 <_puts_r+0x42>
 801a1a2:	e7df      	b.n	801a164 <_puts_r+0x84>
 801a1a4:	6823      	ldr	r3, [r4, #0]
 801a1a6:	250a      	movs	r5, #10
 801a1a8:	1c5a      	adds	r2, r3, #1
 801a1aa:	6022      	str	r2, [r4, #0]
 801a1ac:	701d      	strb	r5, [r3, #0]
 801a1ae:	e7db      	b.n	801a168 <_puts_r+0x88>
 801a1b0:	0801cf6c 	.word	0x0801cf6c
 801a1b4:	0801cf8c 	.word	0x0801cf8c
 801a1b8:	0801cf4c 	.word	0x0801cf4c

0801a1bc <puts>:
 801a1bc:	4b02      	ldr	r3, [pc, #8]	; (801a1c8 <puts+0xc>)
 801a1be:	4601      	mov	r1, r0
 801a1c0:	6818      	ldr	r0, [r3, #0]
 801a1c2:	f7ff bf8d 	b.w	801a0e0 <_puts_r>
 801a1c6:	bf00      	nop
 801a1c8:	200006dc 	.word	0x200006dc

0801a1cc <_sbrk_r>:
 801a1cc:	b538      	push	{r3, r4, r5, lr}
 801a1ce:	4d06      	ldr	r5, [pc, #24]	; (801a1e8 <_sbrk_r+0x1c>)
 801a1d0:	2300      	movs	r3, #0
 801a1d2:	4604      	mov	r4, r0
 801a1d4:	4608      	mov	r0, r1
 801a1d6:	602b      	str	r3, [r5, #0]
 801a1d8:	f7e8 ffde 	bl	8003198 <_sbrk>
 801a1dc:	1c43      	adds	r3, r0, #1
 801a1de:	d102      	bne.n	801a1e6 <_sbrk_r+0x1a>
 801a1e0:	682b      	ldr	r3, [r5, #0]
 801a1e2:	b103      	cbz	r3, 801a1e6 <_sbrk_r+0x1a>
 801a1e4:	6023      	str	r3, [r4, #0]
 801a1e6:	bd38      	pop	{r3, r4, r5, pc}
 801a1e8:	20002e54 	.word	0x20002e54

0801a1ec <strcpy>:
 801a1ec:	4603      	mov	r3, r0
 801a1ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a1f2:	f803 2b01 	strb.w	r2, [r3], #1
 801a1f6:	2a00      	cmp	r2, #0
 801a1f8:	d1f9      	bne.n	801a1ee <strcpy+0x2>
 801a1fa:	4770      	bx	lr

0801a1fc <__swbuf_r>:
 801a1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1fe:	460e      	mov	r6, r1
 801a200:	4614      	mov	r4, r2
 801a202:	4605      	mov	r5, r0
 801a204:	b118      	cbz	r0, 801a20e <__swbuf_r+0x12>
 801a206:	6983      	ldr	r3, [r0, #24]
 801a208:	b90b      	cbnz	r3, 801a20e <__swbuf_r+0x12>
 801a20a:	f000 f9d1 	bl	801a5b0 <__sinit>
 801a20e:	4b21      	ldr	r3, [pc, #132]	; (801a294 <__swbuf_r+0x98>)
 801a210:	429c      	cmp	r4, r3
 801a212:	d12b      	bne.n	801a26c <__swbuf_r+0x70>
 801a214:	686c      	ldr	r4, [r5, #4]
 801a216:	69a3      	ldr	r3, [r4, #24]
 801a218:	60a3      	str	r3, [r4, #8]
 801a21a:	89a3      	ldrh	r3, [r4, #12]
 801a21c:	071a      	lsls	r2, r3, #28
 801a21e:	d52f      	bpl.n	801a280 <__swbuf_r+0x84>
 801a220:	6923      	ldr	r3, [r4, #16]
 801a222:	b36b      	cbz	r3, 801a280 <__swbuf_r+0x84>
 801a224:	6923      	ldr	r3, [r4, #16]
 801a226:	6820      	ldr	r0, [r4, #0]
 801a228:	1ac0      	subs	r0, r0, r3
 801a22a:	6963      	ldr	r3, [r4, #20]
 801a22c:	b2f6      	uxtb	r6, r6
 801a22e:	4283      	cmp	r3, r0
 801a230:	4637      	mov	r7, r6
 801a232:	dc04      	bgt.n	801a23e <__swbuf_r+0x42>
 801a234:	4621      	mov	r1, r4
 801a236:	4628      	mov	r0, r5
 801a238:	f000 f926 	bl	801a488 <_fflush_r>
 801a23c:	bb30      	cbnz	r0, 801a28c <__swbuf_r+0x90>
 801a23e:	68a3      	ldr	r3, [r4, #8]
 801a240:	3b01      	subs	r3, #1
 801a242:	60a3      	str	r3, [r4, #8]
 801a244:	6823      	ldr	r3, [r4, #0]
 801a246:	1c5a      	adds	r2, r3, #1
 801a248:	6022      	str	r2, [r4, #0]
 801a24a:	701e      	strb	r6, [r3, #0]
 801a24c:	6963      	ldr	r3, [r4, #20]
 801a24e:	3001      	adds	r0, #1
 801a250:	4283      	cmp	r3, r0
 801a252:	d004      	beq.n	801a25e <__swbuf_r+0x62>
 801a254:	89a3      	ldrh	r3, [r4, #12]
 801a256:	07db      	lsls	r3, r3, #31
 801a258:	d506      	bpl.n	801a268 <__swbuf_r+0x6c>
 801a25a:	2e0a      	cmp	r6, #10
 801a25c:	d104      	bne.n	801a268 <__swbuf_r+0x6c>
 801a25e:	4621      	mov	r1, r4
 801a260:	4628      	mov	r0, r5
 801a262:	f000 f911 	bl	801a488 <_fflush_r>
 801a266:	b988      	cbnz	r0, 801a28c <__swbuf_r+0x90>
 801a268:	4638      	mov	r0, r7
 801a26a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a26c:	4b0a      	ldr	r3, [pc, #40]	; (801a298 <__swbuf_r+0x9c>)
 801a26e:	429c      	cmp	r4, r3
 801a270:	d101      	bne.n	801a276 <__swbuf_r+0x7a>
 801a272:	68ac      	ldr	r4, [r5, #8]
 801a274:	e7cf      	b.n	801a216 <__swbuf_r+0x1a>
 801a276:	4b09      	ldr	r3, [pc, #36]	; (801a29c <__swbuf_r+0xa0>)
 801a278:	429c      	cmp	r4, r3
 801a27a:	bf08      	it	eq
 801a27c:	68ec      	ldreq	r4, [r5, #12]
 801a27e:	e7ca      	b.n	801a216 <__swbuf_r+0x1a>
 801a280:	4621      	mov	r1, r4
 801a282:	4628      	mov	r0, r5
 801a284:	f000 f80c 	bl	801a2a0 <__swsetup_r>
 801a288:	2800      	cmp	r0, #0
 801a28a:	d0cb      	beq.n	801a224 <__swbuf_r+0x28>
 801a28c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a290:	e7ea      	b.n	801a268 <__swbuf_r+0x6c>
 801a292:	bf00      	nop
 801a294:	0801cf6c 	.word	0x0801cf6c
 801a298:	0801cf8c 	.word	0x0801cf8c
 801a29c:	0801cf4c 	.word	0x0801cf4c

0801a2a0 <__swsetup_r>:
 801a2a0:	4b32      	ldr	r3, [pc, #200]	; (801a36c <__swsetup_r+0xcc>)
 801a2a2:	b570      	push	{r4, r5, r6, lr}
 801a2a4:	681d      	ldr	r5, [r3, #0]
 801a2a6:	4606      	mov	r6, r0
 801a2a8:	460c      	mov	r4, r1
 801a2aa:	b125      	cbz	r5, 801a2b6 <__swsetup_r+0x16>
 801a2ac:	69ab      	ldr	r3, [r5, #24]
 801a2ae:	b913      	cbnz	r3, 801a2b6 <__swsetup_r+0x16>
 801a2b0:	4628      	mov	r0, r5
 801a2b2:	f000 f97d 	bl	801a5b0 <__sinit>
 801a2b6:	4b2e      	ldr	r3, [pc, #184]	; (801a370 <__swsetup_r+0xd0>)
 801a2b8:	429c      	cmp	r4, r3
 801a2ba:	d10f      	bne.n	801a2dc <__swsetup_r+0x3c>
 801a2bc:	686c      	ldr	r4, [r5, #4]
 801a2be:	89a3      	ldrh	r3, [r4, #12]
 801a2c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a2c4:	0719      	lsls	r1, r3, #28
 801a2c6:	d42c      	bmi.n	801a322 <__swsetup_r+0x82>
 801a2c8:	06dd      	lsls	r5, r3, #27
 801a2ca:	d411      	bmi.n	801a2f0 <__swsetup_r+0x50>
 801a2cc:	2309      	movs	r3, #9
 801a2ce:	6033      	str	r3, [r6, #0]
 801a2d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a2d4:	81a3      	strh	r3, [r4, #12]
 801a2d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a2da:	e03e      	b.n	801a35a <__swsetup_r+0xba>
 801a2dc:	4b25      	ldr	r3, [pc, #148]	; (801a374 <__swsetup_r+0xd4>)
 801a2de:	429c      	cmp	r4, r3
 801a2e0:	d101      	bne.n	801a2e6 <__swsetup_r+0x46>
 801a2e2:	68ac      	ldr	r4, [r5, #8]
 801a2e4:	e7eb      	b.n	801a2be <__swsetup_r+0x1e>
 801a2e6:	4b24      	ldr	r3, [pc, #144]	; (801a378 <__swsetup_r+0xd8>)
 801a2e8:	429c      	cmp	r4, r3
 801a2ea:	bf08      	it	eq
 801a2ec:	68ec      	ldreq	r4, [r5, #12]
 801a2ee:	e7e6      	b.n	801a2be <__swsetup_r+0x1e>
 801a2f0:	0758      	lsls	r0, r3, #29
 801a2f2:	d512      	bpl.n	801a31a <__swsetup_r+0x7a>
 801a2f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a2f6:	b141      	cbz	r1, 801a30a <__swsetup_r+0x6a>
 801a2f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a2fc:	4299      	cmp	r1, r3
 801a2fe:	d002      	beq.n	801a306 <__swsetup_r+0x66>
 801a300:	4630      	mov	r0, r6
 801a302:	f7ff fdf5 	bl	8019ef0 <_free_r>
 801a306:	2300      	movs	r3, #0
 801a308:	6363      	str	r3, [r4, #52]	; 0x34
 801a30a:	89a3      	ldrh	r3, [r4, #12]
 801a30c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a310:	81a3      	strh	r3, [r4, #12]
 801a312:	2300      	movs	r3, #0
 801a314:	6063      	str	r3, [r4, #4]
 801a316:	6923      	ldr	r3, [r4, #16]
 801a318:	6023      	str	r3, [r4, #0]
 801a31a:	89a3      	ldrh	r3, [r4, #12]
 801a31c:	f043 0308 	orr.w	r3, r3, #8
 801a320:	81a3      	strh	r3, [r4, #12]
 801a322:	6923      	ldr	r3, [r4, #16]
 801a324:	b94b      	cbnz	r3, 801a33a <__swsetup_r+0x9a>
 801a326:	89a3      	ldrh	r3, [r4, #12]
 801a328:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a32c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a330:	d003      	beq.n	801a33a <__swsetup_r+0x9a>
 801a332:	4621      	mov	r1, r4
 801a334:	4630      	mov	r0, r6
 801a336:	f000 fa01 	bl	801a73c <__smakebuf_r>
 801a33a:	89a0      	ldrh	r0, [r4, #12]
 801a33c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a340:	f010 0301 	ands.w	r3, r0, #1
 801a344:	d00a      	beq.n	801a35c <__swsetup_r+0xbc>
 801a346:	2300      	movs	r3, #0
 801a348:	60a3      	str	r3, [r4, #8]
 801a34a:	6963      	ldr	r3, [r4, #20]
 801a34c:	425b      	negs	r3, r3
 801a34e:	61a3      	str	r3, [r4, #24]
 801a350:	6923      	ldr	r3, [r4, #16]
 801a352:	b943      	cbnz	r3, 801a366 <__swsetup_r+0xc6>
 801a354:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a358:	d1ba      	bne.n	801a2d0 <__swsetup_r+0x30>
 801a35a:	bd70      	pop	{r4, r5, r6, pc}
 801a35c:	0781      	lsls	r1, r0, #30
 801a35e:	bf58      	it	pl
 801a360:	6963      	ldrpl	r3, [r4, #20]
 801a362:	60a3      	str	r3, [r4, #8]
 801a364:	e7f4      	b.n	801a350 <__swsetup_r+0xb0>
 801a366:	2000      	movs	r0, #0
 801a368:	e7f7      	b.n	801a35a <__swsetup_r+0xba>
 801a36a:	bf00      	nop
 801a36c:	200006dc 	.word	0x200006dc
 801a370:	0801cf6c 	.word	0x0801cf6c
 801a374:	0801cf8c 	.word	0x0801cf8c
 801a378:	0801cf4c 	.word	0x0801cf4c

0801a37c <__sflush_r>:
 801a37c:	898a      	ldrh	r2, [r1, #12]
 801a37e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a382:	4605      	mov	r5, r0
 801a384:	0710      	lsls	r0, r2, #28
 801a386:	460c      	mov	r4, r1
 801a388:	d458      	bmi.n	801a43c <__sflush_r+0xc0>
 801a38a:	684b      	ldr	r3, [r1, #4]
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	dc05      	bgt.n	801a39c <__sflush_r+0x20>
 801a390:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a392:	2b00      	cmp	r3, #0
 801a394:	dc02      	bgt.n	801a39c <__sflush_r+0x20>
 801a396:	2000      	movs	r0, #0
 801a398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a39c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a39e:	2e00      	cmp	r6, #0
 801a3a0:	d0f9      	beq.n	801a396 <__sflush_r+0x1a>
 801a3a2:	2300      	movs	r3, #0
 801a3a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a3a8:	682f      	ldr	r7, [r5, #0]
 801a3aa:	602b      	str	r3, [r5, #0]
 801a3ac:	d032      	beq.n	801a414 <__sflush_r+0x98>
 801a3ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a3b0:	89a3      	ldrh	r3, [r4, #12]
 801a3b2:	075a      	lsls	r2, r3, #29
 801a3b4:	d505      	bpl.n	801a3c2 <__sflush_r+0x46>
 801a3b6:	6863      	ldr	r3, [r4, #4]
 801a3b8:	1ac0      	subs	r0, r0, r3
 801a3ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a3bc:	b10b      	cbz	r3, 801a3c2 <__sflush_r+0x46>
 801a3be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a3c0:	1ac0      	subs	r0, r0, r3
 801a3c2:	2300      	movs	r3, #0
 801a3c4:	4602      	mov	r2, r0
 801a3c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a3c8:	6a21      	ldr	r1, [r4, #32]
 801a3ca:	4628      	mov	r0, r5
 801a3cc:	47b0      	blx	r6
 801a3ce:	1c43      	adds	r3, r0, #1
 801a3d0:	89a3      	ldrh	r3, [r4, #12]
 801a3d2:	d106      	bne.n	801a3e2 <__sflush_r+0x66>
 801a3d4:	6829      	ldr	r1, [r5, #0]
 801a3d6:	291d      	cmp	r1, #29
 801a3d8:	d82c      	bhi.n	801a434 <__sflush_r+0xb8>
 801a3da:	4a2a      	ldr	r2, [pc, #168]	; (801a484 <__sflush_r+0x108>)
 801a3dc:	40ca      	lsrs	r2, r1
 801a3de:	07d6      	lsls	r6, r2, #31
 801a3e0:	d528      	bpl.n	801a434 <__sflush_r+0xb8>
 801a3e2:	2200      	movs	r2, #0
 801a3e4:	6062      	str	r2, [r4, #4]
 801a3e6:	04d9      	lsls	r1, r3, #19
 801a3e8:	6922      	ldr	r2, [r4, #16]
 801a3ea:	6022      	str	r2, [r4, #0]
 801a3ec:	d504      	bpl.n	801a3f8 <__sflush_r+0x7c>
 801a3ee:	1c42      	adds	r2, r0, #1
 801a3f0:	d101      	bne.n	801a3f6 <__sflush_r+0x7a>
 801a3f2:	682b      	ldr	r3, [r5, #0]
 801a3f4:	b903      	cbnz	r3, 801a3f8 <__sflush_r+0x7c>
 801a3f6:	6560      	str	r0, [r4, #84]	; 0x54
 801a3f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a3fa:	602f      	str	r7, [r5, #0]
 801a3fc:	2900      	cmp	r1, #0
 801a3fe:	d0ca      	beq.n	801a396 <__sflush_r+0x1a>
 801a400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a404:	4299      	cmp	r1, r3
 801a406:	d002      	beq.n	801a40e <__sflush_r+0x92>
 801a408:	4628      	mov	r0, r5
 801a40a:	f7ff fd71 	bl	8019ef0 <_free_r>
 801a40e:	2000      	movs	r0, #0
 801a410:	6360      	str	r0, [r4, #52]	; 0x34
 801a412:	e7c1      	b.n	801a398 <__sflush_r+0x1c>
 801a414:	6a21      	ldr	r1, [r4, #32]
 801a416:	2301      	movs	r3, #1
 801a418:	4628      	mov	r0, r5
 801a41a:	47b0      	blx	r6
 801a41c:	1c41      	adds	r1, r0, #1
 801a41e:	d1c7      	bne.n	801a3b0 <__sflush_r+0x34>
 801a420:	682b      	ldr	r3, [r5, #0]
 801a422:	2b00      	cmp	r3, #0
 801a424:	d0c4      	beq.n	801a3b0 <__sflush_r+0x34>
 801a426:	2b1d      	cmp	r3, #29
 801a428:	d001      	beq.n	801a42e <__sflush_r+0xb2>
 801a42a:	2b16      	cmp	r3, #22
 801a42c:	d101      	bne.n	801a432 <__sflush_r+0xb6>
 801a42e:	602f      	str	r7, [r5, #0]
 801a430:	e7b1      	b.n	801a396 <__sflush_r+0x1a>
 801a432:	89a3      	ldrh	r3, [r4, #12]
 801a434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a438:	81a3      	strh	r3, [r4, #12]
 801a43a:	e7ad      	b.n	801a398 <__sflush_r+0x1c>
 801a43c:	690f      	ldr	r7, [r1, #16]
 801a43e:	2f00      	cmp	r7, #0
 801a440:	d0a9      	beq.n	801a396 <__sflush_r+0x1a>
 801a442:	0793      	lsls	r3, r2, #30
 801a444:	680e      	ldr	r6, [r1, #0]
 801a446:	bf08      	it	eq
 801a448:	694b      	ldreq	r3, [r1, #20]
 801a44a:	600f      	str	r7, [r1, #0]
 801a44c:	bf18      	it	ne
 801a44e:	2300      	movne	r3, #0
 801a450:	eba6 0807 	sub.w	r8, r6, r7
 801a454:	608b      	str	r3, [r1, #8]
 801a456:	f1b8 0f00 	cmp.w	r8, #0
 801a45a:	dd9c      	ble.n	801a396 <__sflush_r+0x1a>
 801a45c:	6a21      	ldr	r1, [r4, #32]
 801a45e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a460:	4643      	mov	r3, r8
 801a462:	463a      	mov	r2, r7
 801a464:	4628      	mov	r0, r5
 801a466:	47b0      	blx	r6
 801a468:	2800      	cmp	r0, #0
 801a46a:	dc06      	bgt.n	801a47a <__sflush_r+0xfe>
 801a46c:	89a3      	ldrh	r3, [r4, #12]
 801a46e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a472:	81a3      	strh	r3, [r4, #12]
 801a474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a478:	e78e      	b.n	801a398 <__sflush_r+0x1c>
 801a47a:	4407      	add	r7, r0
 801a47c:	eba8 0800 	sub.w	r8, r8, r0
 801a480:	e7e9      	b.n	801a456 <__sflush_r+0xda>
 801a482:	bf00      	nop
 801a484:	20400001 	.word	0x20400001

0801a488 <_fflush_r>:
 801a488:	b538      	push	{r3, r4, r5, lr}
 801a48a:	690b      	ldr	r3, [r1, #16]
 801a48c:	4605      	mov	r5, r0
 801a48e:	460c      	mov	r4, r1
 801a490:	b913      	cbnz	r3, 801a498 <_fflush_r+0x10>
 801a492:	2500      	movs	r5, #0
 801a494:	4628      	mov	r0, r5
 801a496:	bd38      	pop	{r3, r4, r5, pc}
 801a498:	b118      	cbz	r0, 801a4a2 <_fflush_r+0x1a>
 801a49a:	6983      	ldr	r3, [r0, #24]
 801a49c:	b90b      	cbnz	r3, 801a4a2 <_fflush_r+0x1a>
 801a49e:	f000 f887 	bl	801a5b0 <__sinit>
 801a4a2:	4b14      	ldr	r3, [pc, #80]	; (801a4f4 <_fflush_r+0x6c>)
 801a4a4:	429c      	cmp	r4, r3
 801a4a6:	d11b      	bne.n	801a4e0 <_fflush_r+0x58>
 801a4a8:	686c      	ldr	r4, [r5, #4]
 801a4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	d0ef      	beq.n	801a492 <_fflush_r+0xa>
 801a4b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a4b4:	07d0      	lsls	r0, r2, #31
 801a4b6:	d404      	bmi.n	801a4c2 <_fflush_r+0x3a>
 801a4b8:	0599      	lsls	r1, r3, #22
 801a4ba:	d402      	bmi.n	801a4c2 <_fflush_r+0x3a>
 801a4bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a4be:	f000 f915 	bl	801a6ec <__retarget_lock_acquire_recursive>
 801a4c2:	4628      	mov	r0, r5
 801a4c4:	4621      	mov	r1, r4
 801a4c6:	f7ff ff59 	bl	801a37c <__sflush_r>
 801a4ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a4cc:	07da      	lsls	r2, r3, #31
 801a4ce:	4605      	mov	r5, r0
 801a4d0:	d4e0      	bmi.n	801a494 <_fflush_r+0xc>
 801a4d2:	89a3      	ldrh	r3, [r4, #12]
 801a4d4:	059b      	lsls	r3, r3, #22
 801a4d6:	d4dd      	bmi.n	801a494 <_fflush_r+0xc>
 801a4d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a4da:	f000 f908 	bl	801a6ee <__retarget_lock_release_recursive>
 801a4de:	e7d9      	b.n	801a494 <_fflush_r+0xc>
 801a4e0:	4b05      	ldr	r3, [pc, #20]	; (801a4f8 <_fflush_r+0x70>)
 801a4e2:	429c      	cmp	r4, r3
 801a4e4:	d101      	bne.n	801a4ea <_fflush_r+0x62>
 801a4e6:	68ac      	ldr	r4, [r5, #8]
 801a4e8:	e7df      	b.n	801a4aa <_fflush_r+0x22>
 801a4ea:	4b04      	ldr	r3, [pc, #16]	; (801a4fc <_fflush_r+0x74>)
 801a4ec:	429c      	cmp	r4, r3
 801a4ee:	bf08      	it	eq
 801a4f0:	68ec      	ldreq	r4, [r5, #12]
 801a4f2:	e7da      	b.n	801a4aa <_fflush_r+0x22>
 801a4f4:	0801cf6c 	.word	0x0801cf6c
 801a4f8:	0801cf8c 	.word	0x0801cf8c
 801a4fc:	0801cf4c 	.word	0x0801cf4c

0801a500 <std>:
 801a500:	2300      	movs	r3, #0
 801a502:	b510      	push	{r4, lr}
 801a504:	4604      	mov	r4, r0
 801a506:	e9c0 3300 	strd	r3, r3, [r0]
 801a50a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a50e:	6083      	str	r3, [r0, #8]
 801a510:	8181      	strh	r1, [r0, #12]
 801a512:	6643      	str	r3, [r0, #100]	; 0x64
 801a514:	81c2      	strh	r2, [r0, #14]
 801a516:	6183      	str	r3, [r0, #24]
 801a518:	4619      	mov	r1, r3
 801a51a:	2208      	movs	r2, #8
 801a51c:	305c      	adds	r0, #92	; 0x5c
 801a51e:	f7ff fcdf 	bl	8019ee0 <memset>
 801a522:	4b05      	ldr	r3, [pc, #20]	; (801a538 <std+0x38>)
 801a524:	6263      	str	r3, [r4, #36]	; 0x24
 801a526:	4b05      	ldr	r3, [pc, #20]	; (801a53c <std+0x3c>)
 801a528:	62a3      	str	r3, [r4, #40]	; 0x28
 801a52a:	4b05      	ldr	r3, [pc, #20]	; (801a540 <std+0x40>)
 801a52c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a52e:	4b05      	ldr	r3, [pc, #20]	; (801a544 <std+0x44>)
 801a530:	6224      	str	r4, [r4, #32]
 801a532:	6323      	str	r3, [r4, #48]	; 0x30
 801a534:	bd10      	pop	{r4, pc}
 801a536:	bf00      	nop
 801a538:	0801adb1 	.word	0x0801adb1
 801a53c:	0801add3 	.word	0x0801add3
 801a540:	0801ae0b 	.word	0x0801ae0b
 801a544:	0801ae2f 	.word	0x0801ae2f

0801a548 <_cleanup_r>:
 801a548:	4901      	ldr	r1, [pc, #4]	; (801a550 <_cleanup_r+0x8>)
 801a54a:	f000 b8af 	b.w	801a6ac <_fwalk_reent>
 801a54e:	bf00      	nop
 801a550:	0801a489 	.word	0x0801a489

0801a554 <__sfmoreglue>:
 801a554:	b570      	push	{r4, r5, r6, lr}
 801a556:	2268      	movs	r2, #104	; 0x68
 801a558:	1e4d      	subs	r5, r1, #1
 801a55a:	4355      	muls	r5, r2
 801a55c:	460e      	mov	r6, r1
 801a55e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a562:	f7ff fd31 	bl	8019fc8 <_malloc_r>
 801a566:	4604      	mov	r4, r0
 801a568:	b140      	cbz	r0, 801a57c <__sfmoreglue+0x28>
 801a56a:	2100      	movs	r1, #0
 801a56c:	e9c0 1600 	strd	r1, r6, [r0]
 801a570:	300c      	adds	r0, #12
 801a572:	60a0      	str	r0, [r4, #8]
 801a574:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a578:	f7ff fcb2 	bl	8019ee0 <memset>
 801a57c:	4620      	mov	r0, r4
 801a57e:	bd70      	pop	{r4, r5, r6, pc}

0801a580 <__sfp_lock_acquire>:
 801a580:	4801      	ldr	r0, [pc, #4]	; (801a588 <__sfp_lock_acquire+0x8>)
 801a582:	f000 b8b3 	b.w	801a6ec <__retarget_lock_acquire_recursive>
 801a586:	bf00      	nop
 801a588:	20002e51 	.word	0x20002e51

0801a58c <__sfp_lock_release>:
 801a58c:	4801      	ldr	r0, [pc, #4]	; (801a594 <__sfp_lock_release+0x8>)
 801a58e:	f000 b8ae 	b.w	801a6ee <__retarget_lock_release_recursive>
 801a592:	bf00      	nop
 801a594:	20002e51 	.word	0x20002e51

0801a598 <__sinit_lock_acquire>:
 801a598:	4801      	ldr	r0, [pc, #4]	; (801a5a0 <__sinit_lock_acquire+0x8>)
 801a59a:	f000 b8a7 	b.w	801a6ec <__retarget_lock_acquire_recursive>
 801a59e:	bf00      	nop
 801a5a0:	20002e52 	.word	0x20002e52

0801a5a4 <__sinit_lock_release>:
 801a5a4:	4801      	ldr	r0, [pc, #4]	; (801a5ac <__sinit_lock_release+0x8>)
 801a5a6:	f000 b8a2 	b.w	801a6ee <__retarget_lock_release_recursive>
 801a5aa:	bf00      	nop
 801a5ac:	20002e52 	.word	0x20002e52

0801a5b0 <__sinit>:
 801a5b0:	b510      	push	{r4, lr}
 801a5b2:	4604      	mov	r4, r0
 801a5b4:	f7ff fff0 	bl	801a598 <__sinit_lock_acquire>
 801a5b8:	69a3      	ldr	r3, [r4, #24]
 801a5ba:	b11b      	cbz	r3, 801a5c4 <__sinit+0x14>
 801a5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a5c0:	f7ff bff0 	b.w	801a5a4 <__sinit_lock_release>
 801a5c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a5c8:	6523      	str	r3, [r4, #80]	; 0x50
 801a5ca:	4b13      	ldr	r3, [pc, #76]	; (801a618 <__sinit+0x68>)
 801a5cc:	4a13      	ldr	r2, [pc, #76]	; (801a61c <__sinit+0x6c>)
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	62a2      	str	r2, [r4, #40]	; 0x28
 801a5d2:	42a3      	cmp	r3, r4
 801a5d4:	bf04      	itt	eq
 801a5d6:	2301      	moveq	r3, #1
 801a5d8:	61a3      	streq	r3, [r4, #24]
 801a5da:	4620      	mov	r0, r4
 801a5dc:	f000 f820 	bl	801a620 <__sfp>
 801a5e0:	6060      	str	r0, [r4, #4]
 801a5e2:	4620      	mov	r0, r4
 801a5e4:	f000 f81c 	bl	801a620 <__sfp>
 801a5e8:	60a0      	str	r0, [r4, #8]
 801a5ea:	4620      	mov	r0, r4
 801a5ec:	f000 f818 	bl	801a620 <__sfp>
 801a5f0:	2200      	movs	r2, #0
 801a5f2:	60e0      	str	r0, [r4, #12]
 801a5f4:	2104      	movs	r1, #4
 801a5f6:	6860      	ldr	r0, [r4, #4]
 801a5f8:	f7ff ff82 	bl	801a500 <std>
 801a5fc:	68a0      	ldr	r0, [r4, #8]
 801a5fe:	2201      	movs	r2, #1
 801a600:	2109      	movs	r1, #9
 801a602:	f7ff ff7d 	bl	801a500 <std>
 801a606:	68e0      	ldr	r0, [r4, #12]
 801a608:	2202      	movs	r2, #2
 801a60a:	2112      	movs	r1, #18
 801a60c:	f7ff ff78 	bl	801a500 <std>
 801a610:	2301      	movs	r3, #1
 801a612:	61a3      	str	r3, [r4, #24]
 801a614:	e7d2      	b.n	801a5bc <__sinit+0xc>
 801a616:	bf00      	nop
 801a618:	0801cf48 	.word	0x0801cf48
 801a61c:	0801a549 	.word	0x0801a549

0801a620 <__sfp>:
 801a620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a622:	4607      	mov	r7, r0
 801a624:	f7ff ffac 	bl	801a580 <__sfp_lock_acquire>
 801a628:	4b1e      	ldr	r3, [pc, #120]	; (801a6a4 <__sfp+0x84>)
 801a62a:	681e      	ldr	r6, [r3, #0]
 801a62c:	69b3      	ldr	r3, [r6, #24]
 801a62e:	b913      	cbnz	r3, 801a636 <__sfp+0x16>
 801a630:	4630      	mov	r0, r6
 801a632:	f7ff ffbd 	bl	801a5b0 <__sinit>
 801a636:	3648      	adds	r6, #72	; 0x48
 801a638:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a63c:	3b01      	subs	r3, #1
 801a63e:	d503      	bpl.n	801a648 <__sfp+0x28>
 801a640:	6833      	ldr	r3, [r6, #0]
 801a642:	b30b      	cbz	r3, 801a688 <__sfp+0x68>
 801a644:	6836      	ldr	r6, [r6, #0]
 801a646:	e7f7      	b.n	801a638 <__sfp+0x18>
 801a648:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a64c:	b9d5      	cbnz	r5, 801a684 <__sfp+0x64>
 801a64e:	4b16      	ldr	r3, [pc, #88]	; (801a6a8 <__sfp+0x88>)
 801a650:	60e3      	str	r3, [r4, #12]
 801a652:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a656:	6665      	str	r5, [r4, #100]	; 0x64
 801a658:	f000 f847 	bl	801a6ea <__retarget_lock_init_recursive>
 801a65c:	f7ff ff96 	bl	801a58c <__sfp_lock_release>
 801a660:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a664:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a668:	6025      	str	r5, [r4, #0]
 801a66a:	61a5      	str	r5, [r4, #24]
 801a66c:	2208      	movs	r2, #8
 801a66e:	4629      	mov	r1, r5
 801a670:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a674:	f7ff fc34 	bl	8019ee0 <memset>
 801a678:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a67c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a680:	4620      	mov	r0, r4
 801a682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a684:	3468      	adds	r4, #104	; 0x68
 801a686:	e7d9      	b.n	801a63c <__sfp+0x1c>
 801a688:	2104      	movs	r1, #4
 801a68a:	4638      	mov	r0, r7
 801a68c:	f7ff ff62 	bl	801a554 <__sfmoreglue>
 801a690:	4604      	mov	r4, r0
 801a692:	6030      	str	r0, [r6, #0]
 801a694:	2800      	cmp	r0, #0
 801a696:	d1d5      	bne.n	801a644 <__sfp+0x24>
 801a698:	f7ff ff78 	bl	801a58c <__sfp_lock_release>
 801a69c:	230c      	movs	r3, #12
 801a69e:	603b      	str	r3, [r7, #0]
 801a6a0:	e7ee      	b.n	801a680 <__sfp+0x60>
 801a6a2:	bf00      	nop
 801a6a4:	0801cf48 	.word	0x0801cf48
 801a6a8:	ffff0001 	.word	0xffff0001

0801a6ac <_fwalk_reent>:
 801a6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a6b0:	4606      	mov	r6, r0
 801a6b2:	4688      	mov	r8, r1
 801a6b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a6b8:	2700      	movs	r7, #0
 801a6ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a6be:	f1b9 0901 	subs.w	r9, r9, #1
 801a6c2:	d505      	bpl.n	801a6d0 <_fwalk_reent+0x24>
 801a6c4:	6824      	ldr	r4, [r4, #0]
 801a6c6:	2c00      	cmp	r4, #0
 801a6c8:	d1f7      	bne.n	801a6ba <_fwalk_reent+0xe>
 801a6ca:	4638      	mov	r0, r7
 801a6cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a6d0:	89ab      	ldrh	r3, [r5, #12]
 801a6d2:	2b01      	cmp	r3, #1
 801a6d4:	d907      	bls.n	801a6e6 <_fwalk_reent+0x3a>
 801a6d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a6da:	3301      	adds	r3, #1
 801a6dc:	d003      	beq.n	801a6e6 <_fwalk_reent+0x3a>
 801a6de:	4629      	mov	r1, r5
 801a6e0:	4630      	mov	r0, r6
 801a6e2:	47c0      	blx	r8
 801a6e4:	4307      	orrs	r7, r0
 801a6e6:	3568      	adds	r5, #104	; 0x68
 801a6e8:	e7e9      	b.n	801a6be <_fwalk_reent+0x12>

0801a6ea <__retarget_lock_init_recursive>:
 801a6ea:	4770      	bx	lr

0801a6ec <__retarget_lock_acquire_recursive>:
 801a6ec:	4770      	bx	lr

0801a6ee <__retarget_lock_release_recursive>:
 801a6ee:	4770      	bx	lr

0801a6f0 <__swhatbuf_r>:
 801a6f0:	b570      	push	{r4, r5, r6, lr}
 801a6f2:	460e      	mov	r6, r1
 801a6f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a6f8:	2900      	cmp	r1, #0
 801a6fa:	b096      	sub	sp, #88	; 0x58
 801a6fc:	4614      	mov	r4, r2
 801a6fe:	461d      	mov	r5, r3
 801a700:	da08      	bge.n	801a714 <__swhatbuf_r+0x24>
 801a702:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a706:	2200      	movs	r2, #0
 801a708:	602a      	str	r2, [r5, #0]
 801a70a:	061a      	lsls	r2, r3, #24
 801a70c:	d410      	bmi.n	801a730 <__swhatbuf_r+0x40>
 801a70e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a712:	e00e      	b.n	801a732 <__swhatbuf_r+0x42>
 801a714:	466a      	mov	r2, sp
 801a716:	f000 fbb1 	bl	801ae7c <_fstat_r>
 801a71a:	2800      	cmp	r0, #0
 801a71c:	dbf1      	blt.n	801a702 <__swhatbuf_r+0x12>
 801a71e:	9a01      	ldr	r2, [sp, #4]
 801a720:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a724:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a728:	425a      	negs	r2, r3
 801a72a:	415a      	adcs	r2, r3
 801a72c:	602a      	str	r2, [r5, #0]
 801a72e:	e7ee      	b.n	801a70e <__swhatbuf_r+0x1e>
 801a730:	2340      	movs	r3, #64	; 0x40
 801a732:	2000      	movs	r0, #0
 801a734:	6023      	str	r3, [r4, #0]
 801a736:	b016      	add	sp, #88	; 0x58
 801a738:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a73c <__smakebuf_r>:
 801a73c:	898b      	ldrh	r3, [r1, #12]
 801a73e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a740:	079d      	lsls	r5, r3, #30
 801a742:	4606      	mov	r6, r0
 801a744:	460c      	mov	r4, r1
 801a746:	d507      	bpl.n	801a758 <__smakebuf_r+0x1c>
 801a748:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a74c:	6023      	str	r3, [r4, #0]
 801a74e:	6123      	str	r3, [r4, #16]
 801a750:	2301      	movs	r3, #1
 801a752:	6163      	str	r3, [r4, #20]
 801a754:	b002      	add	sp, #8
 801a756:	bd70      	pop	{r4, r5, r6, pc}
 801a758:	ab01      	add	r3, sp, #4
 801a75a:	466a      	mov	r2, sp
 801a75c:	f7ff ffc8 	bl	801a6f0 <__swhatbuf_r>
 801a760:	9900      	ldr	r1, [sp, #0]
 801a762:	4605      	mov	r5, r0
 801a764:	4630      	mov	r0, r6
 801a766:	f7ff fc2f 	bl	8019fc8 <_malloc_r>
 801a76a:	b948      	cbnz	r0, 801a780 <__smakebuf_r+0x44>
 801a76c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a770:	059a      	lsls	r2, r3, #22
 801a772:	d4ef      	bmi.n	801a754 <__smakebuf_r+0x18>
 801a774:	f023 0303 	bic.w	r3, r3, #3
 801a778:	f043 0302 	orr.w	r3, r3, #2
 801a77c:	81a3      	strh	r3, [r4, #12]
 801a77e:	e7e3      	b.n	801a748 <__smakebuf_r+0xc>
 801a780:	4b0d      	ldr	r3, [pc, #52]	; (801a7b8 <__smakebuf_r+0x7c>)
 801a782:	62b3      	str	r3, [r6, #40]	; 0x28
 801a784:	89a3      	ldrh	r3, [r4, #12]
 801a786:	6020      	str	r0, [r4, #0]
 801a788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a78c:	81a3      	strh	r3, [r4, #12]
 801a78e:	9b00      	ldr	r3, [sp, #0]
 801a790:	6163      	str	r3, [r4, #20]
 801a792:	9b01      	ldr	r3, [sp, #4]
 801a794:	6120      	str	r0, [r4, #16]
 801a796:	b15b      	cbz	r3, 801a7b0 <__smakebuf_r+0x74>
 801a798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a79c:	4630      	mov	r0, r6
 801a79e:	f000 fb7f 	bl	801aea0 <_isatty_r>
 801a7a2:	b128      	cbz	r0, 801a7b0 <__smakebuf_r+0x74>
 801a7a4:	89a3      	ldrh	r3, [r4, #12]
 801a7a6:	f023 0303 	bic.w	r3, r3, #3
 801a7aa:	f043 0301 	orr.w	r3, r3, #1
 801a7ae:	81a3      	strh	r3, [r4, #12]
 801a7b0:	89a0      	ldrh	r0, [r4, #12]
 801a7b2:	4305      	orrs	r5, r0
 801a7b4:	81a5      	strh	r5, [r4, #12]
 801a7b6:	e7cd      	b.n	801a754 <__smakebuf_r+0x18>
 801a7b8:	0801a549 	.word	0x0801a549

0801a7bc <__malloc_lock>:
 801a7bc:	4801      	ldr	r0, [pc, #4]	; (801a7c4 <__malloc_lock+0x8>)
 801a7be:	f7ff bf95 	b.w	801a6ec <__retarget_lock_acquire_recursive>
 801a7c2:	bf00      	nop
 801a7c4:	20002e50 	.word	0x20002e50

0801a7c8 <__malloc_unlock>:
 801a7c8:	4801      	ldr	r0, [pc, #4]	; (801a7d0 <__malloc_unlock+0x8>)
 801a7ca:	f7ff bf90 	b.w	801a6ee <__retarget_lock_release_recursive>
 801a7ce:	bf00      	nop
 801a7d0:	20002e50 	.word	0x20002e50

0801a7d4 <__sfputc_r>:
 801a7d4:	6893      	ldr	r3, [r2, #8]
 801a7d6:	3b01      	subs	r3, #1
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	b410      	push	{r4}
 801a7dc:	6093      	str	r3, [r2, #8]
 801a7de:	da08      	bge.n	801a7f2 <__sfputc_r+0x1e>
 801a7e0:	6994      	ldr	r4, [r2, #24]
 801a7e2:	42a3      	cmp	r3, r4
 801a7e4:	db01      	blt.n	801a7ea <__sfputc_r+0x16>
 801a7e6:	290a      	cmp	r1, #10
 801a7e8:	d103      	bne.n	801a7f2 <__sfputc_r+0x1e>
 801a7ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a7ee:	f7ff bd05 	b.w	801a1fc <__swbuf_r>
 801a7f2:	6813      	ldr	r3, [r2, #0]
 801a7f4:	1c58      	adds	r0, r3, #1
 801a7f6:	6010      	str	r0, [r2, #0]
 801a7f8:	7019      	strb	r1, [r3, #0]
 801a7fa:	4608      	mov	r0, r1
 801a7fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a800:	4770      	bx	lr

0801a802 <__sfputs_r>:
 801a802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a804:	4606      	mov	r6, r0
 801a806:	460f      	mov	r7, r1
 801a808:	4614      	mov	r4, r2
 801a80a:	18d5      	adds	r5, r2, r3
 801a80c:	42ac      	cmp	r4, r5
 801a80e:	d101      	bne.n	801a814 <__sfputs_r+0x12>
 801a810:	2000      	movs	r0, #0
 801a812:	e007      	b.n	801a824 <__sfputs_r+0x22>
 801a814:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a818:	463a      	mov	r2, r7
 801a81a:	4630      	mov	r0, r6
 801a81c:	f7ff ffda 	bl	801a7d4 <__sfputc_r>
 801a820:	1c43      	adds	r3, r0, #1
 801a822:	d1f3      	bne.n	801a80c <__sfputs_r+0xa>
 801a824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a828 <_vfiprintf_r>:
 801a828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a82c:	460d      	mov	r5, r1
 801a82e:	b09d      	sub	sp, #116	; 0x74
 801a830:	4614      	mov	r4, r2
 801a832:	4698      	mov	r8, r3
 801a834:	4606      	mov	r6, r0
 801a836:	b118      	cbz	r0, 801a840 <_vfiprintf_r+0x18>
 801a838:	6983      	ldr	r3, [r0, #24]
 801a83a:	b90b      	cbnz	r3, 801a840 <_vfiprintf_r+0x18>
 801a83c:	f7ff feb8 	bl	801a5b0 <__sinit>
 801a840:	4b89      	ldr	r3, [pc, #548]	; (801aa68 <_vfiprintf_r+0x240>)
 801a842:	429d      	cmp	r5, r3
 801a844:	d11b      	bne.n	801a87e <_vfiprintf_r+0x56>
 801a846:	6875      	ldr	r5, [r6, #4]
 801a848:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a84a:	07d9      	lsls	r1, r3, #31
 801a84c:	d405      	bmi.n	801a85a <_vfiprintf_r+0x32>
 801a84e:	89ab      	ldrh	r3, [r5, #12]
 801a850:	059a      	lsls	r2, r3, #22
 801a852:	d402      	bmi.n	801a85a <_vfiprintf_r+0x32>
 801a854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a856:	f7ff ff49 	bl	801a6ec <__retarget_lock_acquire_recursive>
 801a85a:	89ab      	ldrh	r3, [r5, #12]
 801a85c:	071b      	lsls	r3, r3, #28
 801a85e:	d501      	bpl.n	801a864 <_vfiprintf_r+0x3c>
 801a860:	692b      	ldr	r3, [r5, #16]
 801a862:	b9eb      	cbnz	r3, 801a8a0 <_vfiprintf_r+0x78>
 801a864:	4629      	mov	r1, r5
 801a866:	4630      	mov	r0, r6
 801a868:	f7ff fd1a 	bl	801a2a0 <__swsetup_r>
 801a86c:	b1c0      	cbz	r0, 801a8a0 <_vfiprintf_r+0x78>
 801a86e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a870:	07dc      	lsls	r4, r3, #31
 801a872:	d50e      	bpl.n	801a892 <_vfiprintf_r+0x6a>
 801a874:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a878:	b01d      	add	sp, #116	; 0x74
 801a87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a87e:	4b7b      	ldr	r3, [pc, #492]	; (801aa6c <_vfiprintf_r+0x244>)
 801a880:	429d      	cmp	r5, r3
 801a882:	d101      	bne.n	801a888 <_vfiprintf_r+0x60>
 801a884:	68b5      	ldr	r5, [r6, #8]
 801a886:	e7df      	b.n	801a848 <_vfiprintf_r+0x20>
 801a888:	4b79      	ldr	r3, [pc, #484]	; (801aa70 <_vfiprintf_r+0x248>)
 801a88a:	429d      	cmp	r5, r3
 801a88c:	bf08      	it	eq
 801a88e:	68f5      	ldreq	r5, [r6, #12]
 801a890:	e7da      	b.n	801a848 <_vfiprintf_r+0x20>
 801a892:	89ab      	ldrh	r3, [r5, #12]
 801a894:	0598      	lsls	r0, r3, #22
 801a896:	d4ed      	bmi.n	801a874 <_vfiprintf_r+0x4c>
 801a898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a89a:	f7ff ff28 	bl	801a6ee <__retarget_lock_release_recursive>
 801a89e:	e7e9      	b.n	801a874 <_vfiprintf_r+0x4c>
 801a8a0:	2300      	movs	r3, #0
 801a8a2:	9309      	str	r3, [sp, #36]	; 0x24
 801a8a4:	2320      	movs	r3, #32
 801a8a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a8aa:	f8cd 800c 	str.w	r8, [sp, #12]
 801a8ae:	2330      	movs	r3, #48	; 0x30
 801a8b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801aa74 <_vfiprintf_r+0x24c>
 801a8b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a8b8:	f04f 0901 	mov.w	r9, #1
 801a8bc:	4623      	mov	r3, r4
 801a8be:	469a      	mov	sl, r3
 801a8c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a8c4:	b10a      	cbz	r2, 801a8ca <_vfiprintf_r+0xa2>
 801a8c6:	2a25      	cmp	r2, #37	; 0x25
 801a8c8:	d1f9      	bne.n	801a8be <_vfiprintf_r+0x96>
 801a8ca:	ebba 0b04 	subs.w	fp, sl, r4
 801a8ce:	d00b      	beq.n	801a8e8 <_vfiprintf_r+0xc0>
 801a8d0:	465b      	mov	r3, fp
 801a8d2:	4622      	mov	r2, r4
 801a8d4:	4629      	mov	r1, r5
 801a8d6:	4630      	mov	r0, r6
 801a8d8:	f7ff ff93 	bl	801a802 <__sfputs_r>
 801a8dc:	3001      	adds	r0, #1
 801a8de:	f000 80aa 	beq.w	801aa36 <_vfiprintf_r+0x20e>
 801a8e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a8e4:	445a      	add	r2, fp
 801a8e6:	9209      	str	r2, [sp, #36]	; 0x24
 801a8e8:	f89a 3000 	ldrb.w	r3, [sl]
 801a8ec:	2b00      	cmp	r3, #0
 801a8ee:	f000 80a2 	beq.w	801aa36 <_vfiprintf_r+0x20e>
 801a8f2:	2300      	movs	r3, #0
 801a8f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a8f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a8fc:	f10a 0a01 	add.w	sl, sl, #1
 801a900:	9304      	str	r3, [sp, #16]
 801a902:	9307      	str	r3, [sp, #28]
 801a904:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a908:	931a      	str	r3, [sp, #104]	; 0x68
 801a90a:	4654      	mov	r4, sl
 801a90c:	2205      	movs	r2, #5
 801a90e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a912:	4858      	ldr	r0, [pc, #352]	; (801aa74 <_vfiprintf_r+0x24c>)
 801a914:	f7e5 fc6c 	bl	80001f0 <memchr>
 801a918:	9a04      	ldr	r2, [sp, #16]
 801a91a:	b9d8      	cbnz	r0, 801a954 <_vfiprintf_r+0x12c>
 801a91c:	06d1      	lsls	r1, r2, #27
 801a91e:	bf44      	itt	mi
 801a920:	2320      	movmi	r3, #32
 801a922:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a926:	0713      	lsls	r3, r2, #28
 801a928:	bf44      	itt	mi
 801a92a:	232b      	movmi	r3, #43	; 0x2b
 801a92c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a930:	f89a 3000 	ldrb.w	r3, [sl]
 801a934:	2b2a      	cmp	r3, #42	; 0x2a
 801a936:	d015      	beq.n	801a964 <_vfiprintf_r+0x13c>
 801a938:	9a07      	ldr	r2, [sp, #28]
 801a93a:	4654      	mov	r4, sl
 801a93c:	2000      	movs	r0, #0
 801a93e:	f04f 0c0a 	mov.w	ip, #10
 801a942:	4621      	mov	r1, r4
 801a944:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a948:	3b30      	subs	r3, #48	; 0x30
 801a94a:	2b09      	cmp	r3, #9
 801a94c:	d94e      	bls.n	801a9ec <_vfiprintf_r+0x1c4>
 801a94e:	b1b0      	cbz	r0, 801a97e <_vfiprintf_r+0x156>
 801a950:	9207      	str	r2, [sp, #28]
 801a952:	e014      	b.n	801a97e <_vfiprintf_r+0x156>
 801a954:	eba0 0308 	sub.w	r3, r0, r8
 801a958:	fa09 f303 	lsl.w	r3, r9, r3
 801a95c:	4313      	orrs	r3, r2
 801a95e:	9304      	str	r3, [sp, #16]
 801a960:	46a2      	mov	sl, r4
 801a962:	e7d2      	b.n	801a90a <_vfiprintf_r+0xe2>
 801a964:	9b03      	ldr	r3, [sp, #12]
 801a966:	1d19      	adds	r1, r3, #4
 801a968:	681b      	ldr	r3, [r3, #0]
 801a96a:	9103      	str	r1, [sp, #12]
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	bfbb      	ittet	lt
 801a970:	425b      	neglt	r3, r3
 801a972:	f042 0202 	orrlt.w	r2, r2, #2
 801a976:	9307      	strge	r3, [sp, #28]
 801a978:	9307      	strlt	r3, [sp, #28]
 801a97a:	bfb8      	it	lt
 801a97c:	9204      	strlt	r2, [sp, #16]
 801a97e:	7823      	ldrb	r3, [r4, #0]
 801a980:	2b2e      	cmp	r3, #46	; 0x2e
 801a982:	d10c      	bne.n	801a99e <_vfiprintf_r+0x176>
 801a984:	7863      	ldrb	r3, [r4, #1]
 801a986:	2b2a      	cmp	r3, #42	; 0x2a
 801a988:	d135      	bne.n	801a9f6 <_vfiprintf_r+0x1ce>
 801a98a:	9b03      	ldr	r3, [sp, #12]
 801a98c:	1d1a      	adds	r2, r3, #4
 801a98e:	681b      	ldr	r3, [r3, #0]
 801a990:	9203      	str	r2, [sp, #12]
 801a992:	2b00      	cmp	r3, #0
 801a994:	bfb8      	it	lt
 801a996:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a99a:	3402      	adds	r4, #2
 801a99c:	9305      	str	r3, [sp, #20]
 801a99e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801aa84 <_vfiprintf_r+0x25c>
 801a9a2:	7821      	ldrb	r1, [r4, #0]
 801a9a4:	2203      	movs	r2, #3
 801a9a6:	4650      	mov	r0, sl
 801a9a8:	f7e5 fc22 	bl	80001f0 <memchr>
 801a9ac:	b140      	cbz	r0, 801a9c0 <_vfiprintf_r+0x198>
 801a9ae:	2340      	movs	r3, #64	; 0x40
 801a9b0:	eba0 000a 	sub.w	r0, r0, sl
 801a9b4:	fa03 f000 	lsl.w	r0, r3, r0
 801a9b8:	9b04      	ldr	r3, [sp, #16]
 801a9ba:	4303      	orrs	r3, r0
 801a9bc:	3401      	adds	r4, #1
 801a9be:	9304      	str	r3, [sp, #16]
 801a9c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9c4:	482c      	ldr	r0, [pc, #176]	; (801aa78 <_vfiprintf_r+0x250>)
 801a9c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a9ca:	2206      	movs	r2, #6
 801a9cc:	f7e5 fc10 	bl	80001f0 <memchr>
 801a9d0:	2800      	cmp	r0, #0
 801a9d2:	d03f      	beq.n	801aa54 <_vfiprintf_r+0x22c>
 801a9d4:	4b29      	ldr	r3, [pc, #164]	; (801aa7c <_vfiprintf_r+0x254>)
 801a9d6:	bb1b      	cbnz	r3, 801aa20 <_vfiprintf_r+0x1f8>
 801a9d8:	9b03      	ldr	r3, [sp, #12]
 801a9da:	3307      	adds	r3, #7
 801a9dc:	f023 0307 	bic.w	r3, r3, #7
 801a9e0:	3308      	adds	r3, #8
 801a9e2:	9303      	str	r3, [sp, #12]
 801a9e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9e6:	443b      	add	r3, r7
 801a9e8:	9309      	str	r3, [sp, #36]	; 0x24
 801a9ea:	e767      	b.n	801a8bc <_vfiprintf_r+0x94>
 801a9ec:	fb0c 3202 	mla	r2, ip, r2, r3
 801a9f0:	460c      	mov	r4, r1
 801a9f2:	2001      	movs	r0, #1
 801a9f4:	e7a5      	b.n	801a942 <_vfiprintf_r+0x11a>
 801a9f6:	2300      	movs	r3, #0
 801a9f8:	3401      	adds	r4, #1
 801a9fa:	9305      	str	r3, [sp, #20]
 801a9fc:	4619      	mov	r1, r3
 801a9fe:	f04f 0c0a 	mov.w	ip, #10
 801aa02:	4620      	mov	r0, r4
 801aa04:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aa08:	3a30      	subs	r2, #48	; 0x30
 801aa0a:	2a09      	cmp	r2, #9
 801aa0c:	d903      	bls.n	801aa16 <_vfiprintf_r+0x1ee>
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d0c5      	beq.n	801a99e <_vfiprintf_r+0x176>
 801aa12:	9105      	str	r1, [sp, #20]
 801aa14:	e7c3      	b.n	801a99e <_vfiprintf_r+0x176>
 801aa16:	fb0c 2101 	mla	r1, ip, r1, r2
 801aa1a:	4604      	mov	r4, r0
 801aa1c:	2301      	movs	r3, #1
 801aa1e:	e7f0      	b.n	801aa02 <_vfiprintf_r+0x1da>
 801aa20:	ab03      	add	r3, sp, #12
 801aa22:	9300      	str	r3, [sp, #0]
 801aa24:	462a      	mov	r2, r5
 801aa26:	4b16      	ldr	r3, [pc, #88]	; (801aa80 <_vfiprintf_r+0x258>)
 801aa28:	a904      	add	r1, sp, #16
 801aa2a:	4630      	mov	r0, r6
 801aa2c:	f3af 8000 	nop.w
 801aa30:	4607      	mov	r7, r0
 801aa32:	1c78      	adds	r0, r7, #1
 801aa34:	d1d6      	bne.n	801a9e4 <_vfiprintf_r+0x1bc>
 801aa36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aa38:	07d9      	lsls	r1, r3, #31
 801aa3a:	d405      	bmi.n	801aa48 <_vfiprintf_r+0x220>
 801aa3c:	89ab      	ldrh	r3, [r5, #12]
 801aa3e:	059a      	lsls	r2, r3, #22
 801aa40:	d402      	bmi.n	801aa48 <_vfiprintf_r+0x220>
 801aa42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801aa44:	f7ff fe53 	bl	801a6ee <__retarget_lock_release_recursive>
 801aa48:	89ab      	ldrh	r3, [r5, #12]
 801aa4a:	065b      	lsls	r3, r3, #25
 801aa4c:	f53f af12 	bmi.w	801a874 <_vfiprintf_r+0x4c>
 801aa50:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aa52:	e711      	b.n	801a878 <_vfiprintf_r+0x50>
 801aa54:	ab03      	add	r3, sp, #12
 801aa56:	9300      	str	r3, [sp, #0]
 801aa58:	462a      	mov	r2, r5
 801aa5a:	4b09      	ldr	r3, [pc, #36]	; (801aa80 <_vfiprintf_r+0x258>)
 801aa5c:	a904      	add	r1, sp, #16
 801aa5e:	4630      	mov	r0, r6
 801aa60:	f000 f880 	bl	801ab64 <_printf_i>
 801aa64:	e7e4      	b.n	801aa30 <_vfiprintf_r+0x208>
 801aa66:	bf00      	nop
 801aa68:	0801cf6c 	.word	0x0801cf6c
 801aa6c:	0801cf8c 	.word	0x0801cf8c
 801aa70:	0801cf4c 	.word	0x0801cf4c
 801aa74:	0801cfac 	.word	0x0801cfac
 801aa78:	0801cfb6 	.word	0x0801cfb6
 801aa7c:	00000000 	.word	0x00000000
 801aa80:	0801a803 	.word	0x0801a803
 801aa84:	0801cfb2 	.word	0x0801cfb2

0801aa88 <_printf_common>:
 801aa88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa8c:	4616      	mov	r6, r2
 801aa8e:	4699      	mov	r9, r3
 801aa90:	688a      	ldr	r2, [r1, #8]
 801aa92:	690b      	ldr	r3, [r1, #16]
 801aa94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801aa98:	4293      	cmp	r3, r2
 801aa9a:	bfb8      	it	lt
 801aa9c:	4613      	movlt	r3, r2
 801aa9e:	6033      	str	r3, [r6, #0]
 801aaa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801aaa4:	4607      	mov	r7, r0
 801aaa6:	460c      	mov	r4, r1
 801aaa8:	b10a      	cbz	r2, 801aaae <_printf_common+0x26>
 801aaaa:	3301      	adds	r3, #1
 801aaac:	6033      	str	r3, [r6, #0]
 801aaae:	6823      	ldr	r3, [r4, #0]
 801aab0:	0699      	lsls	r1, r3, #26
 801aab2:	bf42      	ittt	mi
 801aab4:	6833      	ldrmi	r3, [r6, #0]
 801aab6:	3302      	addmi	r3, #2
 801aab8:	6033      	strmi	r3, [r6, #0]
 801aaba:	6825      	ldr	r5, [r4, #0]
 801aabc:	f015 0506 	ands.w	r5, r5, #6
 801aac0:	d106      	bne.n	801aad0 <_printf_common+0x48>
 801aac2:	f104 0a19 	add.w	sl, r4, #25
 801aac6:	68e3      	ldr	r3, [r4, #12]
 801aac8:	6832      	ldr	r2, [r6, #0]
 801aaca:	1a9b      	subs	r3, r3, r2
 801aacc:	42ab      	cmp	r3, r5
 801aace:	dc26      	bgt.n	801ab1e <_printf_common+0x96>
 801aad0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801aad4:	1e13      	subs	r3, r2, #0
 801aad6:	6822      	ldr	r2, [r4, #0]
 801aad8:	bf18      	it	ne
 801aada:	2301      	movne	r3, #1
 801aadc:	0692      	lsls	r2, r2, #26
 801aade:	d42b      	bmi.n	801ab38 <_printf_common+0xb0>
 801aae0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801aae4:	4649      	mov	r1, r9
 801aae6:	4638      	mov	r0, r7
 801aae8:	47c0      	blx	r8
 801aaea:	3001      	adds	r0, #1
 801aaec:	d01e      	beq.n	801ab2c <_printf_common+0xa4>
 801aaee:	6823      	ldr	r3, [r4, #0]
 801aaf0:	68e5      	ldr	r5, [r4, #12]
 801aaf2:	6832      	ldr	r2, [r6, #0]
 801aaf4:	f003 0306 	and.w	r3, r3, #6
 801aaf8:	2b04      	cmp	r3, #4
 801aafa:	bf08      	it	eq
 801aafc:	1aad      	subeq	r5, r5, r2
 801aafe:	68a3      	ldr	r3, [r4, #8]
 801ab00:	6922      	ldr	r2, [r4, #16]
 801ab02:	bf0c      	ite	eq
 801ab04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ab08:	2500      	movne	r5, #0
 801ab0a:	4293      	cmp	r3, r2
 801ab0c:	bfc4      	itt	gt
 801ab0e:	1a9b      	subgt	r3, r3, r2
 801ab10:	18ed      	addgt	r5, r5, r3
 801ab12:	2600      	movs	r6, #0
 801ab14:	341a      	adds	r4, #26
 801ab16:	42b5      	cmp	r5, r6
 801ab18:	d11a      	bne.n	801ab50 <_printf_common+0xc8>
 801ab1a:	2000      	movs	r0, #0
 801ab1c:	e008      	b.n	801ab30 <_printf_common+0xa8>
 801ab1e:	2301      	movs	r3, #1
 801ab20:	4652      	mov	r2, sl
 801ab22:	4649      	mov	r1, r9
 801ab24:	4638      	mov	r0, r7
 801ab26:	47c0      	blx	r8
 801ab28:	3001      	adds	r0, #1
 801ab2a:	d103      	bne.n	801ab34 <_printf_common+0xac>
 801ab2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ab30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab34:	3501      	adds	r5, #1
 801ab36:	e7c6      	b.n	801aac6 <_printf_common+0x3e>
 801ab38:	18e1      	adds	r1, r4, r3
 801ab3a:	1c5a      	adds	r2, r3, #1
 801ab3c:	2030      	movs	r0, #48	; 0x30
 801ab3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ab42:	4422      	add	r2, r4
 801ab44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ab48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ab4c:	3302      	adds	r3, #2
 801ab4e:	e7c7      	b.n	801aae0 <_printf_common+0x58>
 801ab50:	2301      	movs	r3, #1
 801ab52:	4622      	mov	r2, r4
 801ab54:	4649      	mov	r1, r9
 801ab56:	4638      	mov	r0, r7
 801ab58:	47c0      	blx	r8
 801ab5a:	3001      	adds	r0, #1
 801ab5c:	d0e6      	beq.n	801ab2c <_printf_common+0xa4>
 801ab5e:	3601      	adds	r6, #1
 801ab60:	e7d9      	b.n	801ab16 <_printf_common+0x8e>
	...

0801ab64 <_printf_i>:
 801ab64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ab68:	7e0f      	ldrb	r7, [r1, #24]
 801ab6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ab6c:	2f78      	cmp	r7, #120	; 0x78
 801ab6e:	4691      	mov	r9, r2
 801ab70:	4680      	mov	r8, r0
 801ab72:	460c      	mov	r4, r1
 801ab74:	469a      	mov	sl, r3
 801ab76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ab7a:	d807      	bhi.n	801ab8c <_printf_i+0x28>
 801ab7c:	2f62      	cmp	r7, #98	; 0x62
 801ab7e:	d80a      	bhi.n	801ab96 <_printf_i+0x32>
 801ab80:	2f00      	cmp	r7, #0
 801ab82:	f000 80d8 	beq.w	801ad36 <_printf_i+0x1d2>
 801ab86:	2f58      	cmp	r7, #88	; 0x58
 801ab88:	f000 80a3 	beq.w	801acd2 <_printf_i+0x16e>
 801ab8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ab90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ab94:	e03a      	b.n	801ac0c <_printf_i+0xa8>
 801ab96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ab9a:	2b15      	cmp	r3, #21
 801ab9c:	d8f6      	bhi.n	801ab8c <_printf_i+0x28>
 801ab9e:	a101      	add	r1, pc, #4	; (adr r1, 801aba4 <_printf_i+0x40>)
 801aba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aba4:	0801abfd 	.word	0x0801abfd
 801aba8:	0801ac11 	.word	0x0801ac11
 801abac:	0801ab8d 	.word	0x0801ab8d
 801abb0:	0801ab8d 	.word	0x0801ab8d
 801abb4:	0801ab8d 	.word	0x0801ab8d
 801abb8:	0801ab8d 	.word	0x0801ab8d
 801abbc:	0801ac11 	.word	0x0801ac11
 801abc0:	0801ab8d 	.word	0x0801ab8d
 801abc4:	0801ab8d 	.word	0x0801ab8d
 801abc8:	0801ab8d 	.word	0x0801ab8d
 801abcc:	0801ab8d 	.word	0x0801ab8d
 801abd0:	0801ad1d 	.word	0x0801ad1d
 801abd4:	0801ac41 	.word	0x0801ac41
 801abd8:	0801acff 	.word	0x0801acff
 801abdc:	0801ab8d 	.word	0x0801ab8d
 801abe0:	0801ab8d 	.word	0x0801ab8d
 801abe4:	0801ad3f 	.word	0x0801ad3f
 801abe8:	0801ab8d 	.word	0x0801ab8d
 801abec:	0801ac41 	.word	0x0801ac41
 801abf0:	0801ab8d 	.word	0x0801ab8d
 801abf4:	0801ab8d 	.word	0x0801ab8d
 801abf8:	0801ad07 	.word	0x0801ad07
 801abfc:	682b      	ldr	r3, [r5, #0]
 801abfe:	1d1a      	adds	r2, r3, #4
 801ac00:	681b      	ldr	r3, [r3, #0]
 801ac02:	602a      	str	r2, [r5, #0]
 801ac04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ac08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ac0c:	2301      	movs	r3, #1
 801ac0e:	e0a3      	b.n	801ad58 <_printf_i+0x1f4>
 801ac10:	6820      	ldr	r0, [r4, #0]
 801ac12:	6829      	ldr	r1, [r5, #0]
 801ac14:	0606      	lsls	r6, r0, #24
 801ac16:	f101 0304 	add.w	r3, r1, #4
 801ac1a:	d50a      	bpl.n	801ac32 <_printf_i+0xce>
 801ac1c:	680e      	ldr	r6, [r1, #0]
 801ac1e:	602b      	str	r3, [r5, #0]
 801ac20:	2e00      	cmp	r6, #0
 801ac22:	da03      	bge.n	801ac2c <_printf_i+0xc8>
 801ac24:	232d      	movs	r3, #45	; 0x2d
 801ac26:	4276      	negs	r6, r6
 801ac28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ac2c:	485e      	ldr	r0, [pc, #376]	; (801ada8 <_printf_i+0x244>)
 801ac2e:	230a      	movs	r3, #10
 801ac30:	e019      	b.n	801ac66 <_printf_i+0x102>
 801ac32:	680e      	ldr	r6, [r1, #0]
 801ac34:	602b      	str	r3, [r5, #0]
 801ac36:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ac3a:	bf18      	it	ne
 801ac3c:	b236      	sxthne	r6, r6
 801ac3e:	e7ef      	b.n	801ac20 <_printf_i+0xbc>
 801ac40:	682b      	ldr	r3, [r5, #0]
 801ac42:	6820      	ldr	r0, [r4, #0]
 801ac44:	1d19      	adds	r1, r3, #4
 801ac46:	6029      	str	r1, [r5, #0]
 801ac48:	0601      	lsls	r1, r0, #24
 801ac4a:	d501      	bpl.n	801ac50 <_printf_i+0xec>
 801ac4c:	681e      	ldr	r6, [r3, #0]
 801ac4e:	e002      	b.n	801ac56 <_printf_i+0xf2>
 801ac50:	0646      	lsls	r6, r0, #25
 801ac52:	d5fb      	bpl.n	801ac4c <_printf_i+0xe8>
 801ac54:	881e      	ldrh	r6, [r3, #0]
 801ac56:	4854      	ldr	r0, [pc, #336]	; (801ada8 <_printf_i+0x244>)
 801ac58:	2f6f      	cmp	r7, #111	; 0x6f
 801ac5a:	bf0c      	ite	eq
 801ac5c:	2308      	moveq	r3, #8
 801ac5e:	230a      	movne	r3, #10
 801ac60:	2100      	movs	r1, #0
 801ac62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ac66:	6865      	ldr	r5, [r4, #4]
 801ac68:	60a5      	str	r5, [r4, #8]
 801ac6a:	2d00      	cmp	r5, #0
 801ac6c:	bfa2      	ittt	ge
 801ac6e:	6821      	ldrge	r1, [r4, #0]
 801ac70:	f021 0104 	bicge.w	r1, r1, #4
 801ac74:	6021      	strge	r1, [r4, #0]
 801ac76:	b90e      	cbnz	r6, 801ac7c <_printf_i+0x118>
 801ac78:	2d00      	cmp	r5, #0
 801ac7a:	d04d      	beq.n	801ad18 <_printf_i+0x1b4>
 801ac7c:	4615      	mov	r5, r2
 801ac7e:	fbb6 f1f3 	udiv	r1, r6, r3
 801ac82:	fb03 6711 	mls	r7, r3, r1, r6
 801ac86:	5dc7      	ldrb	r7, [r0, r7]
 801ac88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ac8c:	4637      	mov	r7, r6
 801ac8e:	42bb      	cmp	r3, r7
 801ac90:	460e      	mov	r6, r1
 801ac92:	d9f4      	bls.n	801ac7e <_printf_i+0x11a>
 801ac94:	2b08      	cmp	r3, #8
 801ac96:	d10b      	bne.n	801acb0 <_printf_i+0x14c>
 801ac98:	6823      	ldr	r3, [r4, #0]
 801ac9a:	07de      	lsls	r6, r3, #31
 801ac9c:	d508      	bpl.n	801acb0 <_printf_i+0x14c>
 801ac9e:	6923      	ldr	r3, [r4, #16]
 801aca0:	6861      	ldr	r1, [r4, #4]
 801aca2:	4299      	cmp	r1, r3
 801aca4:	bfde      	ittt	le
 801aca6:	2330      	movle	r3, #48	; 0x30
 801aca8:	f805 3c01 	strble.w	r3, [r5, #-1]
 801acac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801acb0:	1b52      	subs	r2, r2, r5
 801acb2:	6122      	str	r2, [r4, #16]
 801acb4:	f8cd a000 	str.w	sl, [sp]
 801acb8:	464b      	mov	r3, r9
 801acba:	aa03      	add	r2, sp, #12
 801acbc:	4621      	mov	r1, r4
 801acbe:	4640      	mov	r0, r8
 801acc0:	f7ff fee2 	bl	801aa88 <_printf_common>
 801acc4:	3001      	adds	r0, #1
 801acc6:	d14c      	bne.n	801ad62 <_printf_i+0x1fe>
 801acc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801accc:	b004      	add	sp, #16
 801acce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801acd2:	4835      	ldr	r0, [pc, #212]	; (801ada8 <_printf_i+0x244>)
 801acd4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801acd8:	6829      	ldr	r1, [r5, #0]
 801acda:	6823      	ldr	r3, [r4, #0]
 801acdc:	f851 6b04 	ldr.w	r6, [r1], #4
 801ace0:	6029      	str	r1, [r5, #0]
 801ace2:	061d      	lsls	r5, r3, #24
 801ace4:	d514      	bpl.n	801ad10 <_printf_i+0x1ac>
 801ace6:	07df      	lsls	r7, r3, #31
 801ace8:	bf44      	itt	mi
 801acea:	f043 0320 	orrmi.w	r3, r3, #32
 801acee:	6023      	strmi	r3, [r4, #0]
 801acf0:	b91e      	cbnz	r6, 801acfa <_printf_i+0x196>
 801acf2:	6823      	ldr	r3, [r4, #0]
 801acf4:	f023 0320 	bic.w	r3, r3, #32
 801acf8:	6023      	str	r3, [r4, #0]
 801acfa:	2310      	movs	r3, #16
 801acfc:	e7b0      	b.n	801ac60 <_printf_i+0xfc>
 801acfe:	6823      	ldr	r3, [r4, #0]
 801ad00:	f043 0320 	orr.w	r3, r3, #32
 801ad04:	6023      	str	r3, [r4, #0]
 801ad06:	2378      	movs	r3, #120	; 0x78
 801ad08:	4828      	ldr	r0, [pc, #160]	; (801adac <_printf_i+0x248>)
 801ad0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ad0e:	e7e3      	b.n	801acd8 <_printf_i+0x174>
 801ad10:	0659      	lsls	r1, r3, #25
 801ad12:	bf48      	it	mi
 801ad14:	b2b6      	uxthmi	r6, r6
 801ad16:	e7e6      	b.n	801ace6 <_printf_i+0x182>
 801ad18:	4615      	mov	r5, r2
 801ad1a:	e7bb      	b.n	801ac94 <_printf_i+0x130>
 801ad1c:	682b      	ldr	r3, [r5, #0]
 801ad1e:	6826      	ldr	r6, [r4, #0]
 801ad20:	6961      	ldr	r1, [r4, #20]
 801ad22:	1d18      	adds	r0, r3, #4
 801ad24:	6028      	str	r0, [r5, #0]
 801ad26:	0635      	lsls	r5, r6, #24
 801ad28:	681b      	ldr	r3, [r3, #0]
 801ad2a:	d501      	bpl.n	801ad30 <_printf_i+0x1cc>
 801ad2c:	6019      	str	r1, [r3, #0]
 801ad2e:	e002      	b.n	801ad36 <_printf_i+0x1d2>
 801ad30:	0670      	lsls	r0, r6, #25
 801ad32:	d5fb      	bpl.n	801ad2c <_printf_i+0x1c8>
 801ad34:	8019      	strh	r1, [r3, #0]
 801ad36:	2300      	movs	r3, #0
 801ad38:	6123      	str	r3, [r4, #16]
 801ad3a:	4615      	mov	r5, r2
 801ad3c:	e7ba      	b.n	801acb4 <_printf_i+0x150>
 801ad3e:	682b      	ldr	r3, [r5, #0]
 801ad40:	1d1a      	adds	r2, r3, #4
 801ad42:	602a      	str	r2, [r5, #0]
 801ad44:	681d      	ldr	r5, [r3, #0]
 801ad46:	6862      	ldr	r2, [r4, #4]
 801ad48:	2100      	movs	r1, #0
 801ad4a:	4628      	mov	r0, r5
 801ad4c:	f7e5 fa50 	bl	80001f0 <memchr>
 801ad50:	b108      	cbz	r0, 801ad56 <_printf_i+0x1f2>
 801ad52:	1b40      	subs	r0, r0, r5
 801ad54:	6060      	str	r0, [r4, #4]
 801ad56:	6863      	ldr	r3, [r4, #4]
 801ad58:	6123      	str	r3, [r4, #16]
 801ad5a:	2300      	movs	r3, #0
 801ad5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ad60:	e7a8      	b.n	801acb4 <_printf_i+0x150>
 801ad62:	6923      	ldr	r3, [r4, #16]
 801ad64:	462a      	mov	r2, r5
 801ad66:	4649      	mov	r1, r9
 801ad68:	4640      	mov	r0, r8
 801ad6a:	47d0      	blx	sl
 801ad6c:	3001      	adds	r0, #1
 801ad6e:	d0ab      	beq.n	801acc8 <_printf_i+0x164>
 801ad70:	6823      	ldr	r3, [r4, #0]
 801ad72:	079b      	lsls	r3, r3, #30
 801ad74:	d413      	bmi.n	801ad9e <_printf_i+0x23a>
 801ad76:	68e0      	ldr	r0, [r4, #12]
 801ad78:	9b03      	ldr	r3, [sp, #12]
 801ad7a:	4298      	cmp	r0, r3
 801ad7c:	bfb8      	it	lt
 801ad7e:	4618      	movlt	r0, r3
 801ad80:	e7a4      	b.n	801accc <_printf_i+0x168>
 801ad82:	2301      	movs	r3, #1
 801ad84:	4632      	mov	r2, r6
 801ad86:	4649      	mov	r1, r9
 801ad88:	4640      	mov	r0, r8
 801ad8a:	47d0      	blx	sl
 801ad8c:	3001      	adds	r0, #1
 801ad8e:	d09b      	beq.n	801acc8 <_printf_i+0x164>
 801ad90:	3501      	adds	r5, #1
 801ad92:	68e3      	ldr	r3, [r4, #12]
 801ad94:	9903      	ldr	r1, [sp, #12]
 801ad96:	1a5b      	subs	r3, r3, r1
 801ad98:	42ab      	cmp	r3, r5
 801ad9a:	dcf2      	bgt.n	801ad82 <_printf_i+0x21e>
 801ad9c:	e7eb      	b.n	801ad76 <_printf_i+0x212>
 801ad9e:	2500      	movs	r5, #0
 801ada0:	f104 0619 	add.w	r6, r4, #25
 801ada4:	e7f5      	b.n	801ad92 <_printf_i+0x22e>
 801ada6:	bf00      	nop
 801ada8:	0801cfbd 	.word	0x0801cfbd
 801adac:	0801cfce 	.word	0x0801cfce

0801adb0 <__sread>:
 801adb0:	b510      	push	{r4, lr}
 801adb2:	460c      	mov	r4, r1
 801adb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801adb8:	f000 f894 	bl	801aee4 <_read_r>
 801adbc:	2800      	cmp	r0, #0
 801adbe:	bfab      	itete	ge
 801adc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801adc2:	89a3      	ldrhlt	r3, [r4, #12]
 801adc4:	181b      	addge	r3, r3, r0
 801adc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801adca:	bfac      	ite	ge
 801adcc:	6563      	strge	r3, [r4, #84]	; 0x54
 801adce:	81a3      	strhlt	r3, [r4, #12]
 801add0:	bd10      	pop	{r4, pc}

0801add2 <__swrite>:
 801add2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801add6:	461f      	mov	r7, r3
 801add8:	898b      	ldrh	r3, [r1, #12]
 801adda:	05db      	lsls	r3, r3, #23
 801addc:	4605      	mov	r5, r0
 801adde:	460c      	mov	r4, r1
 801ade0:	4616      	mov	r6, r2
 801ade2:	d505      	bpl.n	801adf0 <__swrite+0x1e>
 801ade4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ade8:	2302      	movs	r3, #2
 801adea:	2200      	movs	r2, #0
 801adec:	f000 f868 	bl	801aec0 <_lseek_r>
 801adf0:	89a3      	ldrh	r3, [r4, #12]
 801adf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801adf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801adfa:	81a3      	strh	r3, [r4, #12]
 801adfc:	4632      	mov	r2, r6
 801adfe:	463b      	mov	r3, r7
 801ae00:	4628      	mov	r0, r5
 801ae02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ae06:	f000 b817 	b.w	801ae38 <_write_r>

0801ae0a <__sseek>:
 801ae0a:	b510      	push	{r4, lr}
 801ae0c:	460c      	mov	r4, r1
 801ae0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae12:	f000 f855 	bl	801aec0 <_lseek_r>
 801ae16:	1c43      	adds	r3, r0, #1
 801ae18:	89a3      	ldrh	r3, [r4, #12]
 801ae1a:	bf15      	itete	ne
 801ae1c:	6560      	strne	r0, [r4, #84]	; 0x54
 801ae1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ae22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ae26:	81a3      	strheq	r3, [r4, #12]
 801ae28:	bf18      	it	ne
 801ae2a:	81a3      	strhne	r3, [r4, #12]
 801ae2c:	bd10      	pop	{r4, pc}

0801ae2e <__sclose>:
 801ae2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ae32:	f000 b813 	b.w	801ae5c <_close_r>
	...

0801ae38 <_write_r>:
 801ae38:	b538      	push	{r3, r4, r5, lr}
 801ae3a:	4d07      	ldr	r5, [pc, #28]	; (801ae58 <_write_r+0x20>)
 801ae3c:	4604      	mov	r4, r0
 801ae3e:	4608      	mov	r0, r1
 801ae40:	4611      	mov	r1, r2
 801ae42:	2200      	movs	r2, #0
 801ae44:	602a      	str	r2, [r5, #0]
 801ae46:	461a      	mov	r2, r3
 801ae48:	f7e8 f955 	bl	80030f6 <_write>
 801ae4c:	1c43      	adds	r3, r0, #1
 801ae4e:	d102      	bne.n	801ae56 <_write_r+0x1e>
 801ae50:	682b      	ldr	r3, [r5, #0]
 801ae52:	b103      	cbz	r3, 801ae56 <_write_r+0x1e>
 801ae54:	6023      	str	r3, [r4, #0]
 801ae56:	bd38      	pop	{r3, r4, r5, pc}
 801ae58:	20002e54 	.word	0x20002e54

0801ae5c <_close_r>:
 801ae5c:	b538      	push	{r3, r4, r5, lr}
 801ae5e:	4d06      	ldr	r5, [pc, #24]	; (801ae78 <_close_r+0x1c>)
 801ae60:	2300      	movs	r3, #0
 801ae62:	4604      	mov	r4, r0
 801ae64:	4608      	mov	r0, r1
 801ae66:	602b      	str	r3, [r5, #0]
 801ae68:	f7e8 f961 	bl	800312e <_close>
 801ae6c:	1c43      	adds	r3, r0, #1
 801ae6e:	d102      	bne.n	801ae76 <_close_r+0x1a>
 801ae70:	682b      	ldr	r3, [r5, #0]
 801ae72:	b103      	cbz	r3, 801ae76 <_close_r+0x1a>
 801ae74:	6023      	str	r3, [r4, #0]
 801ae76:	bd38      	pop	{r3, r4, r5, pc}
 801ae78:	20002e54 	.word	0x20002e54

0801ae7c <_fstat_r>:
 801ae7c:	b538      	push	{r3, r4, r5, lr}
 801ae7e:	4d07      	ldr	r5, [pc, #28]	; (801ae9c <_fstat_r+0x20>)
 801ae80:	2300      	movs	r3, #0
 801ae82:	4604      	mov	r4, r0
 801ae84:	4608      	mov	r0, r1
 801ae86:	4611      	mov	r1, r2
 801ae88:	602b      	str	r3, [r5, #0]
 801ae8a:	f7e8 f95c 	bl	8003146 <_fstat>
 801ae8e:	1c43      	adds	r3, r0, #1
 801ae90:	d102      	bne.n	801ae98 <_fstat_r+0x1c>
 801ae92:	682b      	ldr	r3, [r5, #0]
 801ae94:	b103      	cbz	r3, 801ae98 <_fstat_r+0x1c>
 801ae96:	6023      	str	r3, [r4, #0]
 801ae98:	bd38      	pop	{r3, r4, r5, pc}
 801ae9a:	bf00      	nop
 801ae9c:	20002e54 	.word	0x20002e54

0801aea0 <_isatty_r>:
 801aea0:	b538      	push	{r3, r4, r5, lr}
 801aea2:	4d06      	ldr	r5, [pc, #24]	; (801aebc <_isatty_r+0x1c>)
 801aea4:	2300      	movs	r3, #0
 801aea6:	4604      	mov	r4, r0
 801aea8:	4608      	mov	r0, r1
 801aeaa:	602b      	str	r3, [r5, #0]
 801aeac:	f7e8 f95b 	bl	8003166 <_isatty>
 801aeb0:	1c43      	adds	r3, r0, #1
 801aeb2:	d102      	bne.n	801aeba <_isatty_r+0x1a>
 801aeb4:	682b      	ldr	r3, [r5, #0]
 801aeb6:	b103      	cbz	r3, 801aeba <_isatty_r+0x1a>
 801aeb8:	6023      	str	r3, [r4, #0]
 801aeba:	bd38      	pop	{r3, r4, r5, pc}
 801aebc:	20002e54 	.word	0x20002e54

0801aec0 <_lseek_r>:
 801aec0:	b538      	push	{r3, r4, r5, lr}
 801aec2:	4d07      	ldr	r5, [pc, #28]	; (801aee0 <_lseek_r+0x20>)
 801aec4:	4604      	mov	r4, r0
 801aec6:	4608      	mov	r0, r1
 801aec8:	4611      	mov	r1, r2
 801aeca:	2200      	movs	r2, #0
 801aecc:	602a      	str	r2, [r5, #0]
 801aece:	461a      	mov	r2, r3
 801aed0:	f7e8 f954 	bl	800317c <_lseek>
 801aed4:	1c43      	adds	r3, r0, #1
 801aed6:	d102      	bne.n	801aede <_lseek_r+0x1e>
 801aed8:	682b      	ldr	r3, [r5, #0]
 801aeda:	b103      	cbz	r3, 801aede <_lseek_r+0x1e>
 801aedc:	6023      	str	r3, [r4, #0]
 801aede:	bd38      	pop	{r3, r4, r5, pc}
 801aee0:	20002e54 	.word	0x20002e54

0801aee4 <_read_r>:
 801aee4:	b538      	push	{r3, r4, r5, lr}
 801aee6:	4d07      	ldr	r5, [pc, #28]	; (801af04 <_read_r+0x20>)
 801aee8:	4604      	mov	r4, r0
 801aeea:	4608      	mov	r0, r1
 801aeec:	4611      	mov	r1, r2
 801aeee:	2200      	movs	r2, #0
 801aef0:	602a      	str	r2, [r5, #0]
 801aef2:	461a      	mov	r2, r3
 801aef4:	f7e8 f8e2 	bl	80030bc <_read>
 801aef8:	1c43      	adds	r3, r0, #1
 801aefa:	d102      	bne.n	801af02 <_read_r+0x1e>
 801aefc:	682b      	ldr	r3, [r5, #0]
 801aefe:	b103      	cbz	r3, 801af02 <_read_r+0x1e>
 801af00:	6023      	str	r3, [r4, #0]
 801af02:	bd38      	pop	{r3, r4, r5, pc}
 801af04:	20002e54 	.word	0x20002e54

0801af08 <_init>:
 801af08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af0a:	bf00      	nop
 801af0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801af0e:	bc08      	pop	{r3}
 801af10:	469e      	mov	lr, r3
 801af12:	4770      	bx	lr

0801af14 <_fini>:
 801af14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af16:	bf00      	nop
 801af18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801af1a:	bc08      	pop	{r3}
 801af1c:	469e      	mov	lr, r3
 801af1e:	4770      	bx	lr
